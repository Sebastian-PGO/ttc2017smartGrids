//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the MarketStatementLineItem class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "MarketStatementLineItem")]
    [DebuggerDisplayAttribute("MarketStatementLineItem {UUID}")]
    public class MarketStatementLineItem : IdentifiedObject, IMarketStatementLineItem, IModelElement
    {
        
        /// <summary>
        /// The backing field for the CurrentAmount property
        /// </summary>
        private float _currentAmount;
        
        /// <summary>
        /// The backing field for the PreviousISOAmount property
        /// </summary>
        private float _previousISOAmount;
        
        /// <summary>
        /// The backing field for the QuantityUOM property
        /// </summary>
        private string _quantityUOM;
        
        /// <summary>
        /// The backing field for the NetISOAmount property
        /// </summary>
        private float _netISOAmount;
        
        /// <summary>
        /// The backing field for the CurrentISOAmount property
        /// </summary>
        private float _currentISOAmount;
        
        /// <summary>
        /// The backing field for the PreviousQuantity property
        /// </summary>
        private float _previousQuantity;
        
        /// <summary>
        /// The backing field for the PreviousAmount property
        /// </summary>
        private float _previousAmount;
        
        /// <summary>
        /// The backing field for the NetISOQuantity property
        /// </summary>
        private float _netISOQuantity;
        
        /// <summary>
        /// The backing field for the NetPrice property
        /// </summary>
        private float _netPrice;
        
        /// <summary>
        /// The backing field for the CurrentISOQuantity property
        /// </summary>
        private float _currentISOQuantity;
        
        /// <summary>
        /// The backing field for the CurrentPrice property
        /// </summary>
        private float _currentPrice;
        
        /// <summary>
        /// The backing field for the PrevisouPrice property
        /// </summary>
        private float _previsouPrice;
        
        /// <summary>
        /// The backing field for the PreviousISOQuantity property
        /// </summary>
        private float _previousISOQuantity;
        
        /// <summary>
        /// The backing field for the IntervalDate property
        /// </summary>
        private DateTime _intervalDate;
        
        /// <summary>
        /// The backing field for the NetQuantity property
        /// </summary>
        private float _netQuantity;
        
        /// <summary>
        /// The backing field for the NetAmount property
        /// </summary>
        private float _netAmount;
        
        /// <summary>
        /// The backing field for the CurrentQuantity property
        /// </summary>
        private float _currentQuantity;
        
        /// <summary>
        /// The backing field for the IntervalNumber property
        /// </summary>
        private string _intervalNumber;
        
        /// <summary>
        /// The backing field for the UserAttributes property
        /// </summary>
        private MarketStatementLineItemUserAttributesCollection _userAttributes;
        
        /// <summary>
        /// The backing field for the ComponentMarketStatementLineItem property
        /// </summary>
        private MarketStatementLineItemComponentMarketStatementLineItemCollection _componentMarketStatementLineItem;
        
        /// <summary>
        /// The backing field for the PassThroughBill property
        /// </summary>
        private IPassThroughBill _passThroughBill;
        
        /// <summary>
        /// The backing field for the MarketStatement property
        /// </summary>
        private IMarketStatement _marketStatement;
        
        /// <summary>
        /// The backing field for the ContainerMarketStatementLineItem property
        /// </summary>
        private IMarketStatementLineItem _containerMarketStatementLineItem;
        
        private static IClass _classInstance;
        
        public MarketStatementLineItem()
        {
            this._userAttributes = new MarketStatementLineItemUserAttributesCollection(this);
            this._userAttributes.CollectionChanging += this.UserAttributesCollectionChanging;
            this._userAttributes.CollectionChanged += this.UserAttributesCollectionChanged;
            this._componentMarketStatementLineItem = new MarketStatementLineItemComponentMarketStatementLineItemCollection(this);
            this._componentMarketStatementLineItem.CollectionChanging += this.ComponentMarketStatementLineItemCollectionChanging;
            this._componentMarketStatementLineItem.CollectionChanged += this.ComponentMarketStatementLineItemCollectionChanged;
        }
        
        /// <summary>
        /// The currentAmount property
        /// </summary>
        [XmlElementNameAttribute("currentAmount")]
        [XmlAttributeAttribute(true)]
        public virtual float CurrentAmount
        {
            get
            {
                return this._currentAmount;
            }
            set
            {
                if ((this._currentAmount != value))
                {
                    float old = this._currentAmount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurrentAmountChanging(e);
                    this.OnPropertyChanging("CurrentAmount", e);
                    this._currentAmount = value;
                    this.OnCurrentAmountChanged(e);
                    this.OnPropertyChanged("CurrentAmount", e);
                }
            }
        }
        
        /// <summary>
        /// The previousISOAmount property
        /// </summary>
        [XmlElementNameAttribute("previousISOAmount")]
        [XmlAttributeAttribute(true)]
        public virtual float PreviousISOAmount
        {
            get
            {
                return this._previousISOAmount;
            }
            set
            {
                if ((this._previousISOAmount != value))
                {
                    float old = this._previousISOAmount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPreviousISOAmountChanging(e);
                    this.OnPropertyChanging("PreviousISOAmount", e);
                    this._previousISOAmount = value;
                    this.OnPreviousISOAmountChanged(e);
                    this.OnPropertyChanged("PreviousISOAmount", e);
                }
            }
        }
        
        /// <summary>
        /// The quantityUOM property
        /// </summary>
        [XmlElementNameAttribute("quantityUOM")]
        [XmlAttributeAttribute(true)]
        public virtual string QuantityUOM
        {
            get
            {
                return this._quantityUOM;
            }
            set
            {
                if ((this._quantityUOM != value))
                {
                    string old = this._quantityUOM;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQuantityUOMChanging(e);
                    this.OnPropertyChanging("QuantityUOM", e);
                    this._quantityUOM = value;
                    this.OnQuantityUOMChanged(e);
                    this.OnPropertyChanged("QuantityUOM", e);
                }
            }
        }
        
        /// <summary>
        /// The netISOAmount property
        /// </summary>
        [XmlElementNameAttribute("netISOAmount")]
        [XmlAttributeAttribute(true)]
        public virtual float NetISOAmount
        {
            get
            {
                return this._netISOAmount;
            }
            set
            {
                if ((this._netISOAmount != value))
                {
                    float old = this._netISOAmount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNetISOAmountChanging(e);
                    this.OnPropertyChanging("NetISOAmount", e);
                    this._netISOAmount = value;
                    this.OnNetISOAmountChanged(e);
                    this.OnPropertyChanged("NetISOAmount", e);
                }
            }
        }
        
        /// <summary>
        /// The currentISOAmount property
        /// </summary>
        [XmlElementNameAttribute("currentISOAmount")]
        [XmlAttributeAttribute(true)]
        public virtual float CurrentISOAmount
        {
            get
            {
                return this._currentISOAmount;
            }
            set
            {
                if ((this._currentISOAmount != value))
                {
                    float old = this._currentISOAmount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurrentISOAmountChanging(e);
                    this.OnPropertyChanging("CurrentISOAmount", e);
                    this._currentISOAmount = value;
                    this.OnCurrentISOAmountChanged(e);
                    this.OnPropertyChanged("CurrentISOAmount", e);
                }
            }
        }
        
        /// <summary>
        /// The previousQuantity property
        /// </summary>
        [XmlElementNameAttribute("previousQuantity")]
        [XmlAttributeAttribute(true)]
        public virtual float PreviousQuantity
        {
            get
            {
                return this._previousQuantity;
            }
            set
            {
                if ((this._previousQuantity != value))
                {
                    float old = this._previousQuantity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPreviousQuantityChanging(e);
                    this.OnPropertyChanging("PreviousQuantity", e);
                    this._previousQuantity = value;
                    this.OnPreviousQuantityChanged(e);
                    this.OnPropertyChanged("PreviousQuantity", e);
                }
            }
        }
        
        /// <summary>
        /// The previousAmount property
        /// </summary>
        [XmlElementNameAttribute("previousAmount")]
        [XmlAttributeAttribute(true)]
        public virtual float PreviousAmount
        {
            get
            {
                return this._previousAmount;
            }
            set
            {
                if ((this._previousAmount != value))
                {
                    float old = this._previousAmount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPreviousAmountChanging(e);
                    this.OnPropertyChanging("PreviousAmount", e);
                    this._previousAmount = value;
                    this.OnPreviousAmountChanged(e);
                    this.OnPropertyChanged("PreviousAmount", e);
                }
            }
        }
        
        /// <summary>
        /// The netISOQuantity property
        /// </summary>
        [XmlElementNameAttribute("netISOQuantity")]
        [XmlAttributeAttribute(true)]
        public virtual float NetISOQuantity
        {
            get
            {
                return this._netISOQuantity;
            }
            set
            {
                if ((this._netISOQuantity != value))
                {
                    float old = this._netISOQuantity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNetISOQuantityChanging(e);
                    this.OnPropertyChanging("NetISOQuantity", e);
                    this._netISOQuantity = value;
                    this.OnNetISOQuantityChanged(e);
                    this.OnPropertyChanged("NetISOQuantity", e);
                }
            }
        }
        
        /// <summary>
        /// The netPrice property
        /// </summary>
        [XmlElementNameAttribute("netPrice")]
        [XmlAttributeAttribute(true)]
        public virtual float NetPrice
        {
            get
            {
                return this._netPrice;
            }
            set
            {
                if ((this._netPrice != value))
                {
                    float old = this._netPrice;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNetPriceChanging(e);
                    this.OnPropertyChanging("NetPrice", e);
                    this._netPrice = value;
                    this.OnNetPriceChanged(e);
                    this.OnPropertyChanged("NetPrice", e);
                }
            }
        }
        
        /// <summary>
        /// The currentISOQuantity property
        /// </summary>
        [XmlElementNameAttribute("currentISOQuantity")]
        [XmlAttributeAttribute(true)]
        public virtual float CurrentISOQuantity
        {
            get
            {
                return this._currentISOQuantity;
            }
            set
            {
                if ((this._currentISOQuantity != value))
                {
                    float old = this._currentISOQuantity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurrentISOQuantityChanging(e);
                    this.OnPropertyChanging("CurrentISOQuantity", e);
                    this._currentISOQuantity = value;
                    this.OnCurrentISOQuantityChanged(e);
                    this.OnPropertyChanged("CurrentISOQuantity", e);
                }
            }
        }
        
        /// <summary>
        /// The currentPrice property
        /// </summary>
        [XmlElementNameAttribute("currentPrice")]
        [XmlAttributeAttribute(true)]
        public virtual float CurrentPrice
        {
            get
            {
                return this._currentPrice;
            }
            set
            {
                if ((this._currentPrice != value))
                {
                    float old = this._currentPrice;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurrentPriceChanging(e);
                    this.OnPropertyChanging("CurrentPrice", e);
                    this._currentPrice = value;
                    this.OnCurrentPriceChanged(e);
                    this.OnPropertyChanged("CurrentPrice", e);
                }
            }
        }
        
        /// <summary>
        /// The previsouPrice property
        /// </summary>
        [XmlElementNameAttribute("previsouPrice")]
        [XmlAttributeAttribute(true)]
        public virtual float PrevisouPrice
        {
            get
            {
                return this._previsouPrice;
            }
            set
            {
                if ((this._previsouPrice != value))
                {
                    float old = this._previsouPrice;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPrevisouPriceChanging(e);
                    this.OnPropertyChanging("PrevisouPrice", e);
                    this._previsouPrice = value;
                    this.OnPrevisouPriceChanged(e);
                    this.OnPropertyChanged("PrevisouPrice", e);
                }
            }
        }
        
        /// <summary>
        /// The previousISOQuantity property
        /// </summary>
        [XmlElementNameAttribute("previousISOQuantity")]
        [XmlAttributeAttribute(true)]
        public virtual float PreviousISOQuantity
        {
            get
            {
                return this._previousISOQuantity;
            }
            set
            {
                if ((this._previousISOQuantity != value))
                {
                    float old = this._previousISOQuantity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPreviousISOQuantityChanging(e);
                    this.OnPropertyChanging("PreviousISOQuantity", e);
                    this._previousISOQuantity = value;
                    this.OnPreviousISOQuantityChanged(e);
                    this.OnPropertyChanged("PreviousISOQuantity", e);
                }
            }
        }
        
        /// <summary>
        /// The intervalDate property
        /// </summary>
        [XmlElementNameAttribute("intervalDate")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime IntervalDate
        {
            get
            {
                return this._intervalDate;
            }
            set
            {
                if ((this._intervalDate != value))
                {
                    DateTime old = this._intervalDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIntervalDateChanging(e);
                    this.OnPropertyChanging("IntervalDate", e);
                    this._intervalDate = value;
                    this.OnIntervalDateChanged(e);
                    this.OnPropertyChanged("IntervalDate", e);
                }
            }
        }
        
        /// <summary>
        /// The netQuantity property
        /// </summary>
        [XmlElementNameAttribute("netQuantity")]
        [XmlAttributeAttribute(true)]
        public virtual float NetQuantity
        {
            get
            {
                return this._netQuantity;
            }
            set
            {
                if ((this._netQuantity != value))
                {
                    float old = this._netQuantity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNetQuantityChanging(e);
                    this.OnPropertyChanging("NetQuantity", e);
                    this._netQuantity = value;
                    this.OnNetQuantityChanged(e);
                    this.OnPropertyChanged("NetQuantity", e);
                }
            }
        }
        
        /// <summary>
        /// The netAmount property
        /// </summary>
        [XmlElementNameAttribute("netAmount")]
        [XmlAttributeAttribute(true)]
        public virtual float NetAmount
        {
            get
            {
                return this._netAmount;
            }
            set
            {
                if ((this._netAmount != value))
                {
                    float old = this._netAmount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNetAmountChanging(e);
                    this.OnPropertyChanging("NetAmount", e);
                    this._netAmount = value;
                    this.OnNetAmountChanged(e);
                    this.OnPropertyChanged("NetAmount", e);
                }
            }
        }
        
        /// <summary>
        /// The currentQuantity property
        /// </summary>
        [XmlElementNameAttribute("currentQuantity")]
        [XmlAttributeAttribute(true)]
        public virtual float CurrentQuantity
        {
            get
            {
                return this._currentQuantity;
            }
            set
            {
                if ((this._currentQuantity != value))
                {
                    float old = this._currentQuantity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurrentQuantityChanging(e);
                    this.OnPropertyChanging("CurrentQuantity", e);
                    this._currentQuantity = value;
                    this.OnCurrentQuantityChanged(e);
                    this.OnPropertyChanged("CurrentQuantity", e);
                }
            }
        }
        
        /// <summary>
        /// The intervalNumber property
        /// </summary>
        [XmlElementNameAttribute("intervalNumber")]
        [XmlAttributeAttribute(true)]
        public virtual string IntervalNumber
        {
            get
            {
                return this._intervalNumber;
            }
            set
            {
                if ((this._intervalNumber != value))
                {
                    string old = this._intervalNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIntervalNumberChanging(e);
                    this.OnPropertyChanging("IntervalNumber", e);
                    this._intervalNumber = value;
                    this.OnIntervalNumberChanged(e);
                    this.OnPropertyChanged("IntervalNumber", e);
                }
            }
        }
        
        /// <summary>
        /// The UserAttributes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpStatementLineItems")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IUserAttribute> UserAttributes
        {
            get
            {
                return this._userAttributes;
            }
        }
        
        /// <summary>
        /// The ComponentMarketStatementLineItem property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ContainerMarketStatementLineItem")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMarketStatementLineItem> ComponentMarketStatementLineItem
        {
            get
            {
                return this._componentMarketStatementLineItem;
            }
        }
        
        /// <summary>
        /// The PassThroughBill property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MarketStatementLineItem")]
        public virtual IPassThroughBill PassThroughBill
        {
            get
            {
                return this._passThroughBill;
            }
            set
            {
                if ((this._passThroughBill != value))
                {
                    IPassThroughBill old = this._passThroughBill;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPassThroughBillChanging(e);
                    this.OnPropertyChanging("PassThroughBill", e);
                    this._passThroughBill = value;
                    if ((old != null))
                    {
                        old.MarketStatementLineItem = null;
                        old.Deleted -= this.OnResetPassThroughBill;
                    }
                    if ((value != null))
                    {
                        value.MarketStatementLineItem = this;
                        value.Deleted += this.OnResetPassThroughBill;
                    }
                    this.OnPassThroughBillChanged(e);
                    this.OnPropertyChanged("PassThroughBill", e);
                }
            }
        }
        
        /// <summary>
        /// The MarketStatement property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MarketStatementLineItem")]
        public virtual IMarketStatement MarketStatement
        {
            get
            {
                return this._marketStatement;
            }
            set
            {
                if ((this._marketStatement != value))
                {
                    IMarketStatement old = this._marketStatement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMarketStatementChanging(e);
                    this.OnPropertyChanging("MarketStatement", e);
                    this._marketStatement = value;
                    if ((old != null))
                    {
                        old.MarketStatementLineItem.Remove(this);
                        old.Deleted -= this.OnResetMarketStatement;
                    }
                    if ((value != null))
                    {
                        value.MarketStatementLineItem.Add(this);
                        value.Deleted += this.OnResetMarketStatement;
                    }
                    this.OnMarketStatementChanged(e);
                    this.OnPropertyChanged("MarketStatement", e);
                }
            }
        }
        
        /// <summary>
        /// The ContainerMarketStatementLineItem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ComponentMarketStatementLineItem")]
        public virtual IMarketStatementLineItem ContainerMarketStatementLineItem
        {
            get
            {
                return this._containerMarketStatementLineItem;
            }
            set
            {
                if ((this._containerMarketStatementLineItem != value))
                {
                    IMarketStatementLineItem old = this._containerMarketStatementLineItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnContainerMarketStatementLineItemChanging(e);
                    this.OnPropertyChanging("ContainerMarketStatementLineItem", e);
                    this._containerMarketStatementLineItem = value;
                    if ((old != null))
                    {
                        old.ComponentMarketStatementLineItem.Remove(this);
                        old.Deleted -= this.OnResetContainerMarketStatementLineItem;
                    }
                    if ((value != null))
                    {
                        value.ComponentMarketStatementLineItem.Add(this);
                        value.Deleted += this.OnResetContainerMarketStatementLineItem;
                    }
                    this.OnContainerMarketStatementLineItemChanged(e);
                    this.OnPropertyChanged("ContainerMarketStatementLineItem", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MarketStatementLineItemReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "MarketStatementLineItem")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the CurrentAmount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentAmountChanging;
        
        /// <summary>
        /// Gets fired when the CurrentAmount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentAmountChanged;
        
        /// <summary>
        /// Gets fired before the PreviousISOAmount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreviousISOAmountChanging;
        
        /// <summary>
        /// Gets fired when the PreviousISOAmount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreviousISOAmountChanged;
        
        /// <summary>
        /// Gets fired before the QuantityUOM property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuantityUOMChanging;
        
        /// <summary>
        /// Gets fired when the QuantityUOM property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuantityUOMChanged;
        
        /// <summary>
        /// Gets fired before the NetISOAmount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NetISOAmountChanging;
        
        /// <summary>
        /// Gets fired when the NetISOAmount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NetISOAmountChanged;
        
        /// <summary>
        /// Gets fired before the CurrentISOAmount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentISOAmountChanging;
        
        /// <summary>
        /// Gets fired when the CurrentISOAmount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentISOAmountChanged;
        
        /// <summary>
        /// Gets fired before the PreviousQuantity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreviousQuantityChanging;
        
        /// <summary>
        /// Gets fired when the PreviousQuantity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreviousQuantityChanged;
        
        /// <summary>
        /// Gets fired before the PreviousAmount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreviousAmountChanging;
        
        /// <summary>
        /// Gets fired when the PreviousAmount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreviousAmountChanged;
        
        /// <summary>
        /// Gets fired before the NetISOQuantity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NetISOQuantityChanging;
        
        /// <summary>
        /// Gets fired when the NetISOQuantity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NetISOQuantityChanged;
        
        /// <summary>
        /// Gets fired before the NetPrice property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NetPriceChanging;
        
        /// <summary>
        /// Gets fired when the NetPrice property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NetPriceChanged;
        
        /// <summary>
        /// Gets fired before the CurrentISOQuantity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentISOQuantityChanging;
        
        /// <summary>
        /// Gets fired when the CurrentISOQuantity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentISOQuantityChanged;
        
        /// <summary>
        /// Gets fired before the CurrentPrice property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentPriceChanging;
        
        /// <summary>
        /// Gets fired when the CurrentPrice property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentPriceChanged;
        
        /// <summary>
        /// Gets fired before the PrevisouPrice property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PrevisouPriceChanging;
        
        /// <summary>
        /// Gets fired when the PrevisouPrice property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PrevisouPriceChanged;
        
        /// <summary>
        /// Gets fired before the PreviousISOQuantity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreviousISOQuantityChanging;
        
        /// <summary>
        /// Gets fired when the PreviousISOQuantity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreviousISOQuantityChanged;
        
        /// <summary>
        /// Gets fired before the IntervalDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IntervalDateChanging;
        
        /// <summary>
        /// Gets fired when the IntervalDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IntervalDateChanged;
        
        /// <summary>
        /// Gets fired before the NetQuantity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NetQuantityChanging;
        
        /// <summary>
        /// Gets fired when the NetQuantity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NetQuantityChanged;
        
        /// <summary>
        /// Gets fired before the NetAmount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NetAmountChanging;
        
        /// <summary>
        /// Gets fired when the NetAmount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NetAmountChanged;
        
        /// <summary>
        /// Gets fired before the CurrentQuantity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentQuantityChanging;
        
        /// <summary>
        /// Gets fired when the CurrentQuantity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentQuantityChanged;
        
        /// <summary>
        /// Gets fired before the IntervalNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IntervalNumberChanging;
        
        /// <summary>
        /// Gets fired when the IntervalNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IntervalNumberChanged;
        
        /// <summary>
        /// Gets fired before the PassThroughBill property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PassThroughBillChanging;
        
        /// <summary>
        /// Gets fired when the PassThroughBill property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PassThroughBillChanged;
        
        /// <summary>
        /// Gets fired before the MarketStatement property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MarketStatementChanging;
        
        /// <summary>
        /// Gets fired when the MarketStatement property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MarketStatementChanged;
        
        /// <summary>
        /// Gets fired before the ContainerMarketStatementLineItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ContainerMarketStatementLineItemChanging;
        
        /// <summary>
        /// Gets fired when the ContainerMarketStatementLineItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ContainerMarketStatementLineItemChanged;
        
        /// <summary>
        /// Raises the CurrentAmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentAmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentAmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentAmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PreviousISOAmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreviousISOAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreviousISOAmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PreviousISOAmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreviousISOAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreviousISOAmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QuantityUOMChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuantityUOMChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuantityUOMChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QuantityUOMChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuantityUOMChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuantityUOMChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NetISOAmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNetISOAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NetISOAmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NetISOAmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNetISOAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NetISOAmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentISOAmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentISOAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentISOAmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentISOAmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentISOAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentISOAmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PreviousQuantityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreviousQuantityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreviousQuantityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PreviousQuantityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreviousQuantityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreviousQuantityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PreviousAmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreviousAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreviousAmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PreviousAmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreviousAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreviousAmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NetISOQuantityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNetISOQuantityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NetISOQuantityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NetISOQuantityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNetISOQuantityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NetISOQuantityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NetPriceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNetPriceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NetPriceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NetPriceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNetPriceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NetPriceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentISOQuantityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentISOQuantityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentISOQuantityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentISOQuantityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentISOQuantityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentISOQuantityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentPriceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentPriceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentPriceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentPriceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentPriceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentPriceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PrevisouPriceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPrevisouPriceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PrevisouPriceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PrevisouPriceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPrevisouPriceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PrevisouPriceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PreviousISOQuantityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreviousISOQuantityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreviousISOQuantityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PreviousISOQuantityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreviousISOQuantityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreviousISOQuantityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IntervalDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIntervalDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IntervalDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IntervalDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIntervalDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IntervalDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NetQuantityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNetQuantityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NetQuantityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NetQuantityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNetQuantityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NetQuantityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NetAmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNetAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NetAmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NetAmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNetAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NetAmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentQuantityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentQuantityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentQuantityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentQuantityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentQuantityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentQuantityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IntervalNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIntervalNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IntervalNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IntervalNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIntervalNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IntervalNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the UserAttributes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UserAttributesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("UserAttributes", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the UserAttributes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UserAttributesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("UserAttributes", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ComponentMarketStatementLineItem property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ComponentMarketStatementLineItemCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ComponentMarketStatementLineItem", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ComponentMarketStatementLineItem property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ComponentMarketStatementLineItemCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ComponentMarketStatementLineItem", e);
        }
        
        /// <summary>
        /// Raises the PassThroughBillChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPassThroughBillChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PassThroughBillChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PassThroughBillChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPassThroughBillChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PassThroughBillChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PassThroughBill property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPassThroughBill(object sender, System.EventArgs eventArgs)
        {
            this.PassThroughBill = null;
        }
        
        /// <summary>
        /// Raises the MarketStatementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMarketStatementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MarketStatementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MarketStatementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMarketStatementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MarketStatementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MarketStatement property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMarketStatement(object sender, System.EventArgs eventArgs)
        {
            this.MarketStatement = null;
        }
        
        /// <summary>
        /// Raises the ContainerMarketStatementLineItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnContainerMarketStatementLineItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ContainerMarketStatementLineItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ContainerMarketStatementLineItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnContainerMarketStatementLineItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ContainerMarketStatementLineItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ContainerMarketStatementLineItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetContainerMarketStatementLineItem(object sender, System.EventArgs eventArgs)
        {
            this.ContainerMarketStatementLineItem = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CURRENTAMOUNT"))
            {
                return this.CurrentAmount;
            }
            if ((attribute == "PREVIOUSISOAMOUNT"))
            {
                return this.PreviousISOAmount;
            }
            if ((attribute == "QUANTITYUOM"))
            {
                return this.QuantityUOM;
            }
            if ((attribute == "NETISOAMOUNT"))
            {
                return this.NetISOAmount;
            }
            if ((attribute == "CURRENTISOAMOUNT"))
            {
                return this.CurrentISOAmount;
            }
            if ((attribute == "PREVIOUSQUANTITY"))
            {
                return this.PreviousQuantity;
            }
            if ((attribute == "PREVIOUSAMOUNT"))
            {
                return this.PreviousAmount;
            }
            if ((attribute == "NETISOQUANTITY"))
            {
                return this.NetISOQuantity;
            }
            if ((attribute == "NETPRICE"))
            {
                return this.NetPrice;
            }
            if ((attribute == "CURRENTISOQUANTITY"))
            {
                return this.CurrentISOQuantity;
            }
            if ((attribute == "CURRENTPRICE"))
            {
                return this.CurrentPrice;
            }
            if ((attribute == "PREVISOUPRICE"))
            {
                return this.PrevisouPrice;
            }
            if ((attribute == "PREVIOUSISOQUANTITY"))
            {
                return this.PreviousISOQuantity;
            }
            if ((attribute == "INTERVALDATE"))
            {
                return this.IntervalDate;
            }
            if ((attribute == "NETQUANTITY"))
            {
                return this.NetQuantity;
            }
            if ((attribute == "NETAMOUNT"))
            {
                return this.NetAmount;
            }
            if ((attribute == "CURRENTQUANTITY"))
            {
                return this.CurrentQuantity;
            }
            if ((attribute == "INTERVALNUMBER"))
            {
                return this.IntervalNumber;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "USERATTRIBUTES"))
            {
                return this._userAttributes;
            }
            if ((feature == "COMPONENTMARKETSTATEMENTLINEITEM"))
            {
                return this._componentMarketStatementLineItem;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PASSTHROUGHBILL"))
            {
                this.PassThroughBill = ((IPassThroughBill)(value));
                return;
            }
            if ((feature == "MARKETSTATEMENT"))
            {
                this.MarketStatement = ((IMarketStatement)(value));
                return;
            }
            if ((feature == "CONTAINERMARKETSTATEMENTLINEITEM"))
            {
                this.ContainerMarketStatementLineItem = ((IMarketStatementLineItem)(value));
                return;
            }
            if ((feature == "CURRENTAMOUNT"))
            {
                this.CurrentAmount = ((float)(value));
                return;
            }
            if ((feature == "PREVIOUSISOAMOUNT"))
            {
                this.PreviousISOAmount = ((float)(value));
                return;
            }
            if ((feature == "QUANTITYUOM"))
            {
                this.QuantityUOM = ((string)(value));
                return;
            }
            if ((feature == "NETISOAMOUNT"))
            {
                this.NetISOAmount = ((float)(value));
                return;
            }
            if ((feature == "CURRENTISOAMOUNT"))
            {
                this.CurrentISOAmount = ((float)(value));
                return;
            }
            if ((feature == "PREVIOUSQUANTITY"))
            {
                this.PreviousQuantity = ((float)(value));
                return;
            }
            if ((feature == "PREVIOUSAMOUNT"))
            {
                this.PreviousAmount = ((float)(value));
                return;
            }
            if ((feature == "NETISOQUANTITY"))
            {
                this.NetISOQuantity = ((float)(value));
                return;
            }
            if ((feature == "NETPRICE"))
            {
                this.NetPrice = ((float)(value));
                return;
            }
            if ((feature == "CURRENTISOQUANTITY"))
            {
                this.CurrentISOQuantity = ((float)(value));
                return;
            }
            if ((feature == "CURRENTPRICE"))
            {
                this.CurrentPrice = ((float)(value));
                return;
            }
            if ((feature == "PREVISOUPRICE"))
            {
                this.PrevisouPrice = ((float)(value));
                return;
            }
            if ((feature == "PREVIOUSISOQUANTITY"))
            {
                this.PreviousISOQuantity = ((float)(value));
                return;
            }
            if ((feature == "INTERVALDATE"))
            {
                this.IntervalDate = ((DateTime)(value));
                return;
            }
            if ((feature == "NETQUANTITY"))
            {
                this.NetQuantity = ((float)(value));
                return;
            }
            if ((feature == "NETAMOUNT"))
            {
                this.NetAmount = ((float)(value));
                return;
            }
            if ((feature == "CURRENTQUANTITY"))
            {
                this.CurrentQuantity = ((float)(value));
                return;
            }
            if ((feature == "INTERVALNUMBER"))
            {
                this.IntervalNumber = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "PassThroughBill"))
            {
                return new PassThroughBillProxy(this);
            }
            if ((attribute == "MarketStatement"))
            {
                return new MarketStatementProxy(this);
            }
            if ((attribute == "ContainerMarketStatementLineItem"))
            {
                return new ContainerMarketStatementLineItemProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PassThroughBill"))
            {
                return new PassThroughBillProxy(this);
            }
            if ((reference == "MarketStatement"))
            {
                return new MarketStatementProxy(this);
            }
            if ((reference == "ContainerMarketStatementLineItem"))
            {
                return new ContainerMarketStatementLineItemProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "MarketStatementLineItem")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MarketStatementLineItem class
        /// </summary>
        public class MarketStatementLineItemReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private MarketStatementLineItem _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MarketStatementLineItemReferencedElementsCollection(MarketStatementLineItem parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.UserAttributes.Count);
                    count = (count + this._parent.ComponentMarketStatementLineItem.Count);
                    if ((this._parent.PassThroughBill != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MarketStatement != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ContainerMarketStatementLineItem != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.UserAttributes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ComponentMarketStatementLineItem.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PassThroughBillChanged += this.PropagateValueChanges;
                this._parent.MarketStatementChanged += this.PropagateValueChanges;
                this._parent.ContainerMarketStatementLineItemChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.UserAttributes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ComponentMarketStatementLineItem.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PassThroughBillChanged -= this.PropagateValueChanges;
                this._parent.MarketStatementChanged -= this.PropagateValueChanges;
                this._parent.ContainerMarketStatementLineItemChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IUserAttribute userAttributesCasted = item.As<IUserAttribute>();
                if ((userAttributesCasted != null))
                {
                    this._parent.UserAttributes.Add(userAttributesCasted);
                }
                IMarketStatementLineItem componentMarketStatementLineItemCasted = item.As<IMarketStatementLineItem>();
                if ((componentMarketStatementLineItemCasted != null))
                {
                    this._parent.ComponentMarketStatementLineItem.Add(componentMarketStatementLineItemCasted);
                }
                if ((this._parent.PassThroughBill == null))
                {
                    IPassThroughBill passThroughBillCasted = item.As<IPassThroughBill>();
                    if ((passThroughBillCasted != null))
                    {
                        this._parent.PassThroughBill = passThroughBillCasted;
                        return;
                    }
                }
                if ((this._parent.MarketStatement == null))
                {
                    IMarketStatement marketStatementCasted = item.As<IMarketStatement>();
                    if ((marketStatementCasted != null))
                    {
                        this._parent.MarketStatement = marketStatementCasted;
                        return;
                    }
                }
                if ((this._parent.ContainerMarketStatementLineItem == null))
                {
                    IMarketStatementLineItem containerMarketStatementLineItemCasted = item.As<IMarketStatementLineItem>();
                    if ((containerMarketStatementLineItemCasted != null))
                    {
                        this._parent.ContainerMarketStatementLineItem = containerMarketStatementLineItemCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.UserAttributes.Clear();
                this._parent.ComponentMarketStatementLineItem.Clear();
                this._parent.PassThroughBill = null;
                this._parent.MarketStatement = null;
                this._parent.ContainerMarketStatementLineItem = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.UserAttributes.Contains(item))
                {
                    return true;
                }
                if (this._parent.ComponentMarketStatementLineItem.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.PassThroughBill))
                {
                    return true;
                }
                if ((item == this._parent.MarketStatement))
                {
                    return true;
                }
                if ((item == this._parent.ContainerMarketStatementLineItem))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> userAttributesEnumerator = this._parent.UserAttributes.GetEnumerator();
                try
                {
                    for (
                    ; userAttributesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = userAttributesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    userAttributesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> componentMarketStatementLineItemEnumerator = this._parent.ComponentMarketStatementLineItem.GetEnumerator();
                try
                {
                    for (
                    ; componentMarketStatementLineItemEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = componentMarketStatementLineItemEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    componentMarketStatementLineItemEnumerator.Dispose();
                }
                if ((this._parent.PassThroughBill != null))
                {
                    array[arrayIndex] = this._parent.PassThroughBill;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MarketStatement != null))
                {
                    array[arrayIndex] = this._parent.MarketStatement;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ContainerMarketStatementLineItem != null))
                {
                    array[arrayIndex] = this._parent.ContainerMarketStatementLineItem;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IUserAttribute userAttributeItem = item.As<IUserAttribute>();
                if (((userAttributeItem != null) 
                            && this._parent.UserAttributes.Remove(userAttributeItem)))
                {
                    return true;
                }
                IMarketStatementLineItem marketStatementLineItemItem = item.As<IMarketStatementLineItem>();
                if (((marketStatementLineItemItem != null) 
                            && this._parent.ComponentMarketStatementLineItem.Remove(marketStatementLineItemItem)))
                {
                    return true;
                }
                if ((this._parent.PassThroughBill == item))
                {
                    this._parent.PassThroughBill = null;
                    return true;
                }
                if ((this._parent.MarketStatement == item))
                {
                    this._parent.MarketStatement = null;
                    return true;
                }
                if ((this._parent.ContainerMarketStatementLineItem == item))
                {
                    this._parent.ContainerMarketStatementLineItem = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.UserAttributes).Concat(this._parent.ComponentMarketStatementLineItem).Concat(this._parent.PassThroughBill).Concat(this._parent.MarketStatement).Concat(this._parent.ContainerMarketStatementLineItem).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the currentAmount property
        /// </summary>
        private sealed class CurrentAmountProxy : ModelPropertyChange<IMarketStatementLineItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurrentAmountProxy(IMarketStatementLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CurrentAmount;
                }
                set
                {
                    this.ModelElement.CurrentAmount = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurrentAmountChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurrentAmountChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the previousISOAmount property
        /// </summary>
        private sealed class PreviousISOAmountProxy : ModelPropertyChange<IMarketStatementLineItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PreviousISOAmountProxy(IMarketStatementLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PreviousISOAmount;
                }
                set
                {
                    this.ModelElement.PreviousISOAmount = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PreviousISOAmountChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PreviousISOAmountChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the quantityUOM property
        /// </summary>
        private sealed class QuantityUOMProxy : ModelPropertyChange<IMarketStatementLineItem, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QuantityUOMProxy(IMarketStatementLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.QuantityUOM;
                }
                set
                {
                    this.ModelElement.QuantityUOM = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QuantityUOMChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.QuantityUOMChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the netISOAmount property
        /// </summary>
        private sealed class NetISOAmountProxy : ModelPropertyChange<IMarketStatementLineItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NetISOAmountProxy(IMarketStatementLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NetISOAmount;
                }
                set
                {
                    this.ModelElement.NetISOAmount = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NetISOAmountChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NetISOAmountChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the currentISOAmount property
        /// </summary>
        private sealed class CurrentISOAmountProxy : ModelPropertyChange<IMarketStatementLineItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurrentISOAmountProxy(IMarketStatementLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CurrentISOAmount;
                }
                set
                {
                    this.ModelElement.CurrentISOAmount = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurrentISOAmountChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurrentISOAmountChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the previousQuantity property
        /// </summary>
        private sealed class PreviousQuantityProxy : ModelPropertyChange<IMarketStatementLineItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PreviousQuantityProxy(IMarketStatementLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PreviousQuantity;
                }
                set
                {
                    this.ModelElement.PreviousQuantity = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PreviousQuantityChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PreviousQuantityChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the previousAmount property
        /// </summary>
        private sealed class PreviousAmountProxy : ModelPropertyChange<IMarketStatementLineItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PreviousAmountProxy(IMarketStatementLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PreviousAmount;
                }
                set
                {
                    this.ModelElement.PreviousAmount = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PreviousAmountChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PreviousAmountChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the netISOQuantity property
        /// </summary>
        private sealed class NetISOQuantityProxy : ModelPropertyChange<IMarketStatementLineItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NetISOQuantityProxy(IMarketStatementLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NetISOQuantity;
                }
                set
                {
                    this.ModelElement.NetISOQuantity = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NetISOQuantityChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NetISOQuantityChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the netPrice property
        /// </summary>
        private sealed class NetPriceProxy : ModelPropertyChange<IMarketStatementLineItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NetPriceProxy(IMarketStatementLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NetPrice;
                }
                set
                {
                    this.ModelElement.NetPrice = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NetPriceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NetPriceChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the currentISOQuantity property
        /// </summary>
        private sealed class CurrentISOQuantityProxy : ModelPropertyChange<IMarketStatementLineItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurrentISOQuantityProxy(IMarketStatementLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CurrentISOQuantity;
                }
                set
                {
                    this.ModelElement.CurrentISOQuantity = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurrentISOQuantityChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurrentISOQuantityChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the currentPrice property
        /// </summary>
        private sealed class CurrentPriceProxy : ModelPropertyChange<IMarketStatementLineItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurrentPriceProxy(IMarketStatementLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CurrentPrice;
                }
                set
                {
                    this.ModelElement.CurrentPrice = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurrentPriceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurrentPriceChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the previsouPrice property
        /// </summary>
        private sealed class PrevisouPriceProxy : ModelPropertyChange<IMarketStatementLineItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PrevisouPriceProxy(IMarketStatementLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PrevisouPrice;
                }
                set
                {
                    this.ModelElement.PrevisouPrice = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PrevisouPriceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PrevisouPriceChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the previousISOQuantity property
        /// </summary>
        private sealed class PreviousISOQuantityProxy : ModelPropertyChange<IMarketStatementLineItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PreviousISOQuantityProxy(IMarketStatementLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PreviousISOQuantity;
                }
                set
                {
                    this.ModelElement.PreviousISOQuantity = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PreviousISOQuantityChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PreviousISOQuantityChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the intervalDate property
        /// </summary>
        private sealed class IntervalDateProxy : ModelPropertyChange<IMarketStatementLineItem, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IntervalDateProxy(IMarketStatementLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.IntervalDate;
                }
                set
                {
                    this.ModelElement.IntervalDate = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IntervalDateChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IntervalDateChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the netQuantity property
        /// </summary>
        private sealed class NetQuantityProxy : ModelPropertyChange<IMarketStatementLineItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NetQuantityProxy(IMarketStatementLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NetQuantity;
                }
                set
                {
                    this.ModelElement.NetQuantity = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NetQuantityChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NetQuantityChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the netAmount property
        /// </summary>
        private sealed class NetAmountProxy : ModelPropertyChange<IMarketStatementLineItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NetAmountProxy(IMarketStatementLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NetAmount;
                }
                set
                {
                    this.ModelElement.NetAmount = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NetAmountChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NetAmountChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the currentQuantity property
        /// </summary>
        private sealed class CurrentQuantityProxy : ModelPropertyChange<IMarketStatementLineItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurrentQuantityProxy(IMarketStatementLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CurrentQuantity;
                }
                set
                {
                    this.ModelElement.CurrentQuantity = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurrentQuantityChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurrentQuantityChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the intervalNumber property
        /// </summary>
        private sealed class IntervalNumberProxy : ModelPropertyChange<IMarketStatementLineItem, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IntervalNumberProxy(IMarketStatementLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.IntervalNumber;
                }
                set
                {
                    this.ModelElement.IntervalNumber = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IntervalNumberChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.IntervalNumberChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PassThroughBill property
        /// </summary>
        private sealed class PassThroughBillProxy : ModelPropertyChange<IMarketStatementLineItem, IPassThroughBill>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PassThroughBillProxy(IMarketStatementLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPassThroughBill Value
            {
                get
                {
                    return this.ModelElement.PassThroughBill;
                }
                set
                {
                    this.ModelElement.PassThroughBill = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PassThroughBillChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PassThroughBillChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MarketStatement property
        /// </summary>
        private sealed class MarketStatementProxy : ModelPropertyChange<IMarketStatementLineItem, IMarketStatement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MarketStatementProxy(IMarketStatementLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMarketStatement Value
            {
                get
                {
                    return this.ModelElement.MarketStatement;
                }
                set
                {
                    this.ModelElement.MarketStatement = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MarketStatementChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MarketStatementChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ContainerMarketStatementLineItem property
        /// </summary>
        private sealed class ContainerMarketStatementLineItemProxy : ModelPropertyChange<IMarketStatementLineItem, IMarketStatementLineItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ContainerMarketStatementLineItemProxy(IMarketStatementLineItem modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMarketStatementLineItem Value
            {
                get
                {
                    return this.ModelElement.ContainerMarketStatementLineItem;
                }
                set
                {
                    this.ModelElement.ContainerMarketStatementLineItem = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ContainerMarketStatementLineItemChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ContainerMarketStatementLineItemChanged -= handler;
            }
        }
    }
}

