//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the Market class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "Market")]
    [DebuggerDisplayAttribute("Market {UUID}")]
    public class Market : IdentifiedObject, IMarket, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Type property
        /// </summary>
        private string _type;
        
        /// <summary>
        /// The backing field for the Start property
        /// </summary>
        private DateTime _start;
        
        /// <summary>
        /// The backing field for the RampIntervalNonSpinRes property
        /// </summary>
        private float _rampIntervalNonSpinRes;
        
        /// <summary>
        /// The backing field for the End property
        /// </summary>
        private DateTime _end;
        
        /// <summary>
        /// The backing field for the TimeIntervalLength property
        /// </summary>
        private float _timeIntervalLength;
        
        /// <summary>
        /// The backing field for the RampIntervalReg property
        /// </summary>
        private float _rampIntervalReg;
        
        /// <summary>
        /// The backing field for the RampIntervalSpinRes property
        /// </summary>
        private float _rampIntervalSpinRes;
        
        /// <summary>
        /// The backing field for the Dst property
        /// </summary>
        private bool _dst;
        
        /// <summary>
        /// The backing field for the RampIntervalEnergy property
        /// </summary>
        private float _rampIntervalEnergy;
        
        /// <summary>
        /// The backing field for the LocalTimeZone property
        /// </summary>
        private string _localTimeZone;
        
        /// <summary>
        /// The backing field for the MarketFactors property
        /// </summary>
        private MarketMarketFactorsCollection _marketFactors;
        
        /// <summary>
        /// The backing field for the MarketProducts property
        /// </summary>
        private MarketMarketProductsCollection _marketProducts;
        
        /// <summary>
        /// The backing field for the RTO property
        /// </summary>
        private IRTO _rTO;
        
        /// <summary>
        /// The backing field for the Settlements property
        /// </summary>
        private MarketSettlementsCollection _settlements;
        
        /// <summary>
        /// The backing field for the Bids property
        /// </summary>
        private MarketBidsCollection _bids;
        
        /// <summary>
        /// The backing field for the RegisteredResources property
        /// </summary>
        private MarketRegisteredResourcesCollection _registeredResources;
        
        private static IClass _classInstance;
        
        public Market()
        {
            this._marketFactors = new MarketMarketFactorsCollection(this);
            this._marketFactors.CollectionChanging += this.MarketFactorsCollectionChanging;
            this._marketFactors.CollectionChanged += this.MarketFactorsCollectionChanged;
            this._marketProducts = new MarketMarketProductsCollection(this);
            this._marketProducts.CollectionChanging += this.MarketProductsCollectionChanging;
            this._marketProducts.CollectionChanged += this.MarketProductsCollectionChanged;
            this._settlements = new MarketSettlementsCollection(this);
            this._settlements.CollectionChanging += this.SettlementsCollectionChanging;
            this._settlements.CollectionChanged += this.SettlementsCollectionChanged;
            this._bids = new MarketBidsCollection(this);
            this._bids.CollectionChanging += this.BidsCollectionChanging;
            this._bids.CollectionChanged += this.BidsCollectionChanged;
            this._registeredResources = new MarketRegisteredResourcesCollection(this);
            this._registeredResources.CollectionChanging += this.RegisteredResourcesCollectionChanging;
            this._registeredResources.CollectionChanged += this.RegisteredResourcesCollectionChanged;
        }
        
        /// <summary>
        /// The type property
        /// </summary>
        [XmlElementNameAttribute("type")]
        [XmlAttributeAttribute(true)]
        public virtual string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    string old = this._type;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeChanging(e);
                    this.OnPropertyChanging("Type", e);
                    this._type = value;
                    this.OnTypeChanged(e);
                    this.OnPropertyChanged("Type", e);
                }
            }
        }
        
        /// <summary>
        /// The start property
        /// </summary>
        [XmlElementNameAttribute("start")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime Start
        {
            get
            {
                return this._start;
            }
            set
            {
                if ((this._start != value))
                {
                    DateTime old = this._start;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStartChanging(e);
                    this.OnPropertyChanging("Start", e);
                    this._start = value;
                    this.OnStartChanged(e);
                    this.OnPropertyChanged("Start", e);
                }
            }
        }
        
        /// <summary>
        /// The rampIntervalNonSpinRes property
        /// </summary>
        [XmlElementNameAttribute("rampIntervalNonSpinRes")]
        [XmlAttributeAttribute(true)]
        public virtual float RampIntervalNonSpinRes
        {
            get
            {
                return this._rampIntervalNonSpinRes;
            }
            set
            {
                if ((this._rampIntervalNonSpinRes != value))
                {
                    float old = this._rampIntervalNonSpinRes;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRampIntervalNonSpinResChanging(e);
                    this.OnPropertyChanging("RampIntervalNonSpinRes", e);
                    this._rampIntervalNonSpinRes = value;
                    this.OnRampIntervalNonSpinResChanged(e);
                    this.OnPropertyChanged("RampIntervalNonSpinRes", e);
                }
            }
        }
        
        /// <summary>
        /// The end property
        /// </summary>
        [XmlElementNameAttribute("end")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime End
        {
            get
            {
                return this._end;
            }
            set
            {
                if ((this._end != value))
                {
                    DateTime old = this._end;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEndChanging(e);
                    this.OnPropertyChanging("End", e);
                    this._end = value;
                    this.OnEndChanged(e);
                    this.OnPropertyChanged("End", e);
                }
            }
        }
        
        /// <summary>
        /// The timeIntervalLength property
        /// </summary>
        [XmlElementNameAttribute("timeIntervalLength")]
        [XmlAttributeAttribute(true)]
        public virtual float TimeIntervalLength
        {
            get
            {
                return this._timeIntervalLength;
            }
            set
            {
                if ((this._timeIntervalLength != value))
                {
                    float old = this._timeIntervalLength;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeIntervalLengthChanging(e);
                    this.OnPropertyChanging("TimeIntervalLength", e);
                    this._timeIntervalLength = value;
                    this.OnTimeIntervalLengthChanged(e);
                    this.OnPropertyChanged("TimeIntervalLength", e);
                }
            }
        }
        
        /// <summary>
        /// The rampIntervalReg property
        /// </summary>
        [XmlElementNameAttribute("rampIntervalReg")]
        [XmlAttributeAttribute(true)]
        public virtual float RampIntervalReg
        {
            get
            {
                return this._rampIntervalReg;
            }
            set
            {
                if ((this._rampIntervalReg != value))
                {
                    float old = this._rampIntervalReg;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRampIntervalRegChanging(e);
                    this.OnPropertyChanging("RampIntervalReg", e);
                    this._rampIntervalReg = value;
                    this.OnRampIntervalRegChanged(e);
                    this.OnPropertyChanged("RampIntervalReg", e);
                }
            }
        }
        
        /// <summary>
        /// The rampIntervalSpinRes property
        /// </summary>
        [XmlElementNameAttribute("rampIntervalSpinRes")]
        [XmlAttributeAttribute(true)]
        public virtual float RampIntervalSpinRes
        {
            get
            {
                return this._rampIntervalSpinRes;
            }
            set
            {
                if ((this._rampIntervalSpinRes != value))
                {
                    float old = this._rampIntervalSpinRes;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRampIntervalSpinResChanging(e);
                    this.OnPropertyChanging("RampIntervalSpinRes", e);
                    this._rampIntervalSpinRes = value;
                    this.OnRampIntervalSpinResChanged(e);
                    this.OnPropertyChanged("RampIntervalSpinRes", e);
                }
            }
        }
        
        /// <summary>
        /// The dst property
        /// </summary>
        [XmlElementNameAttribute("dst")]
        [XmlAttributeAttribute(true)]
        public virtual bool Dst
        {
            get
            {
                return this._dst;
            }
            set
            {
                if ((this._dst != value))
                {
                    bool old = this._dst;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDstChanging(e);
                    this.OnPropertyChanging("Dst", e);
                    this._dst = value;
                    this.OnDstChanged(e);
                    this.OnPropertyChanged("Dst", e);
                }
            }
        }
        
        /// <summary>
        /// The rampIntervalEnergy property
        /// </summary>
        [XmlElementNameAttribute("rampIntervalEnergy")]
        [XmlAttributeAttribute(true)]
        public virtual float RampIntervalEnergy
        {
            get
            {
                return this._rampIntervalEnergy;
            }
            set
            {
                if ((this._rampIntervalEnergy != value))
                {
                    float old = this._rampIntervalEnergy;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRampIntervalEnergyChanging(e);
                    this.OnPropertyChanging("RampIntervalEnergy", e);
                    this._rampIntervalEnergy = value;
                    this.OnRampIntervalEnergyChanged(e);
                    this.OnPropertyChanged("RampIntervalEnergy", e);
                }
            }
        }
        
        /// <summary>
        /// The localTimeZone property
        /// </summary>
        [XmlElementNameAttribute("localTimeZone")]
        [XmlAttributeAttribute(true)]
        public virtual string LocalTimeZone
        {
            get
            {
                return this._localTimeZone;
            }
            set
            {
                if ((this._localTimeZone != value))
                {
                    string old = this._localTimeZone;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocalTimeZoneChanging(e);
                    this.OnPropertyChanging("LocalTimeZone", e);
                    this._localTimeZone = value;
                    this.OnLocalTimeZoneChanged(e);
                    this.OnPropertyChanged("LocalTimeZone", e);
                }
            }
        }
        
        /// <summary>
        /// The MarketFactors property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Market")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMarketFactors> MarketFactors
        {
            get
            {
                return this._marketFactors;
            }
        }
        
        /// <summary>
        /// The MarketProducts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Market")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMarketProduct> MarketProducts
        {
            get
            {
                return this._marketProducts;
            }
        }
        
        /// <summary>
        /// The RTO property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Markets")]
        public virtual IRTO RTO
        {
            get
            {
                return this._rTO;
            }
            set
            {
                if ((this._rTO != value))
                {
                    IRTO old = this._rTO;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRTOChanging(e);
                    this.OnPropertyChanging("RTO", e);
                    this._rTO = value;
                    if ((old != null))
                    {
                        old.Markets.Remove(this);
                        old.Deleted -= this.OnResetRTO;
                    }
                    if ((value != null))
                    {
                        value.Markets.Add(this);
                        value.Deleted += this.OnResetRTO;
                    }
                    this.OnRTOChanged(e);
                    this.OnPropertyChanged("RTO", e);
                }
            }
        }
        
        /// <summary>
        /// The Settlements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Market")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISettlement> Settlements
        {
            get
            {
                return this._settlements;
            }
        }
        
        /// <summary>
        /// The Bids property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Market")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IBid> Bids
        {
            get
            {
                return this._bids;
            }
        }
        
        /// <summary>
        /// The RegisteredResources property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Markets")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IRegisteredResource> RegisteredResources
        {
            get
            {
                return this._registeredResources;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MarketReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "Market")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Type property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanging;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanged;
        
        /// <summary>
        /// Gets fired before the Start property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartChanging;
        
        /// <summary>
        /// Gets fired when the Start property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartChanged;
        
        /// <summary>
        /// Gets fired before the RampIntervalNonSpinRes property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RampIntervalNonSpinResChanging;
        
        /// <summary>
        /// Gets fired when the RampIntervalNonSpinRes property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RampIntervalNonSpinResChanged;
        
        /// <summary>
        /// Gets fired before the End property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EndChanging;
        
        /// <summary>
        /// Gets fired when the End property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EndChanged;
        
        /// <summary>
        /// Gets fired before the TimeIntervalLength property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeIntervalLengthChanging;
        
        /// <summary>
        /// Gets fired when the TimeIntervalLength property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeIntervalLengthChanged;
        
        /// <summary>
        /// Gets fired before the RampIntervalReg property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RampIntervalRegChanging;
        
        /// <summary>
        /// Gets fired when the RampIntervalReg property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RampIntervalRegChanged;
        
        /// <summary>
        /// Gets fired before the RampIntervalSpinRes property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RampIntervalSpinResChanging;
        
        /// <summary>
        /// Gets fired when the RampIntervalSpinRes property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RampIntervalSpinResChanged;
        
        /// <summary>
        /// Gets fired before the Dst property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DstChanging;
        
        /// <summary>
        /// Gets fired when the Dst property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DstChanged;
        
        /// <summary>
        /// Gets fired before the RampIntervalEnergy property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RampIntervalEnergyChanging;
        
        /// <summary>
        /// Gets fired when the RampIntervalEnergy property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RampIntervalEnergyChanged;
        
        /// <summary>
        /// Gets fired before the LocalTimeZone property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocalTimeZoneChanging;
        
        /// <summary>
        /// Gets fired when the LocalTimeZone property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocalTimeZoneChanged;
        
        /// <summary>
        /// Gets fired before the RTO property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RTOChanging;
        
        /// <summary>
        /// Gets fired when the RTO property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RTOChanged;
        
        /// <summary>
        /// Raises the TypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RampIntervalNonSpinResChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRampIntervalNonSpinResChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RampIntervalNonSpinResChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RampIntervalNonSpinResChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRampIntervalNonSpinResChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RampIntervalNonSpinResChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EndChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEndChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EndChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EndChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEndChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EndChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeIntervalLengthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeIntervalLengthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeIntervalLengthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeIntervalLengthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeIntervalLengthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeIntervalLengthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RampIntervalRegChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRampIntervalRegChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RampIntervalRegChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RampIntervalRegChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRampIntervalRegChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RampIntervalRegChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RampIntervalSpinResChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRampIntervalSpinResChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RampIntervalSpinResChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RampIntervalSpinResChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRampIntervalSpinResChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RampIntervalSpinResChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DstChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDstChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DstChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DstChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDstChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DstChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RampIntervalEnergyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRampIntervalEnergyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RampIntervalEnergyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RampIntervalEnergyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRampIntervalEnergyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RampIntervalEnergyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocalTimeZoneChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocalTimeZoneChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocalTimeZoneChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocalTimeZoneChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocalTimeZoneChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocalTimeZoneChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MarketFactors property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MarketFactorsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("MarketFactors", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MarketFactors property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MarketFactorsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MarketFactors", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MarketProducts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MarketProductsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("MarketProducts", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MarketProducts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MarketProductsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MarketProducts", e);
        }
        
        /// <summary>
        /// Raises the RTOChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRTOChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RTOChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RTOChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRTOChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RTOChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RTO property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRTO(object sender, System.EventArgs eventArgs)
        {
            this.RTO = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Settlements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SettlementsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Settlements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Settlements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SettlementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Settlements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Bids property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BidsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Bids", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Bids property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BidsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Bids", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RegisteredResources property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RegisteredResourcesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("RegisteredResources", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RegisteredResources property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RegisteredResourcesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RegisteredResources", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TYPE"))
            {
                return this.Type;
            }
            if ((attribute == "START"))
            {
                return this.Start;
            }
            if ((attribute == "RAMPINTERVALNONSPINRES"))
            {
                return this.RampIntervalNonSpinRes;
            }
            if ((attribute == "END"))
            {
                return this.End;
            }
            if ((attribute == "TIMEINTERVALLENGTH"))
            {
                return this.TimeIntervalLength;
            }
            if ((attribute == "RAMPINTERVALREG"))
            {
                return this.RampIntervalReg;
            }
            if ((attribute == "RAMPINTERVALSPINRES"))
            {
                return this.RampIntervalSpinRes;
            }
            if ((attribute == "DST"))
            {
                return this.Dst;
            }
            if ((attribute == "RAMPINTERVALENERGY"))
            {
                return this.RampIntervalEnergy;
            }
            if ((attribute == "LOCALTIMEZONE"))
            {
                return this.LocalTimeZone;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "MARKETFACTORS"))
            {
                return this._marketFactors;
            }
            if ((feature == "MARKETPRODUCTS"))
            {
                return this._marketProducts;
            }
            if ((feature == "SETTLEMENTS"))
            {
                return this._settlements;
            }
            if ((feature == "BIDS"))
            {
                return this._bids;
            }
            if ((feature == "REGISTEREDRESOURCES"))
            {
                return this._registeredResources;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RTO"))
            {
                this.RTO = ((IRTO)(value));
                return;
            }
            if ((feature == "TYPE"))
            {
                this.Type = ((string)(value));
                return;
            }
            if ((feature == "START"))
            {
                this.Start = ((DateTime)(value));
                return;
            }
            if ((feature == "RAMPINTERVALNONSPINRES"))
            {
                this.RampIntervalNonSpinRes = ((float)(value));
                return;
            }
            if ((feature == "END"))
            {
                this.End = ((DateTime)(value));
                return;
            }
            if ((feature == "TIMEINTERVALLENGTH"))
            {
                this.TimeIntervalLength = ((float)(value));
                return;
            }
            if ((feature == "RAMPINTERVALREG"))
            {
                this.RampIntervalReg = ((float)(value));
                return;
            }
            if ((feature == "RAMPINTERVALSPINRES"))
            {
                this.RampIntervalSpinRes = ((float)(value));
                return;
            }
            if ((feature == "DST"))
            {
                this.Dst = ((bool)(value));
                return;
            }
            if ((feature == "RAMPINTERVALENERGY"))
            {
                this.RampIntervalEnergy = ((float)(value));
                return;
            }
            if ((feature == "LOCALTIMEZONE"))
            {
                this.LocalTimeZone = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "RTO"))
            {
                return new RTOProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "RTO"))
            {
                return new RTOProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "Market")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Market class
        /// </summary>
        public class MarketReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Market _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MarketReferencedElementsCollection(Market parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.MarketFactors.Count);
                    count = (count + this._parent.MarketProducts.Count);
                    if ((this._parent.RTO != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Settlements.Count);
                    count = (count + this._parent.Bids.Count);
                    count = (count + this._parent.RegisteredResources.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.MarketFactors.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MarketProducts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RTOChanged += this.PropagateValueChanges;
                this._parent.Settlements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Bids.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RegisteredResources.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.MarketFactors.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MarketProducts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RTOChanged -= this.PropagateValueChanges;
                this._parent.Settlements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Bids.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RegisteredResources.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IMarketFactors marketFactorsCasted = item.As<IMarketFactors>();
                if ((marketFactorsCasted != null))
                {
                    this._parent.MarketFactors.Add(marketFactorsCasted);
                }
                IMarketProduct marketProductsCasted = item.As<IMarketProduct>();
                if ((marketProductsCasted != null))
                {
                    this._parent.MarketProducts.Add(marketProductsCasted);
                }
                if ((this._parent.RTO == null))
                {
                    IRTO rTOCasted = item.As<IRTO>();
                    if ((rTOCasted != null))
                    {
                        this._parent.RTO = rTOCasted;
                        return;
                    }
                }
                ISettlement settlementsCasted = item.As<ISettlement>();
                if ((settlementsCasted != null))
                {
                    this._parent.Settlements.Add(settlementsCasted);
                }
                IBid bidsCasted = item.As<IBid>();
                if ((bidsCasted != null))
                {
                    this._parent.Bids.Add(bidsCasted);
                }
                IRegisteredResource registeredResourcesCasted = item.As<IRegisteredResource>();
                if ((registeredResourcesCasted != null))
                {
                    this._parent.RegisteredResources.Add(registeredResourcesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.MarketFactors.Clear();
                this._parent.MarketProducts.Clear();
                this._parent.RTO = null;
                this._parent.Settlements.Clear();
                this._parent.Bids.Clear();
                this._parent.RegisteredResources.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.MarketFactors.Contains(item))
                {
                    return true;
                }
                if (this._parent.MarketProducts.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.RTO))
                {
                    return true;
                }
                if (this._parent.Settlements.Contains(item))
                {
                    return true;
                }
                if (this._parent.Bids.Contains(item))
                {
                    return true;
                }
                if (this._parent.RegisteredResources.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> marketFactorsEnumerator = this._parent.MarketFactors.GetEnumerator();
                try
                {
                    for (
                    ; marketFactorsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = marketFactorsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    marketFactorsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> marketProductsEnumerator = this._parent.MarketProducts.GetEnumerator();
                try
                {
                    for (
                    ; marketProductsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = marketProductsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    marketProductsEnumerator.Dispose();
                }
                if ((this._parent.RTO != null))
                {
                    array[arrayIndex] = this._parent.RTO;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> settlementsEnumerator = this._parent.Settlements.GetEnumerator();
                try
                {
                    for (
                    ; settlementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = settlementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    settlementsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> bidsEnumerator = this._parent.Bids.GetEnumerator();
                try
                {
                    for (
                    ; bidsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = bidsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    bidsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> registeredResourcesEnumerator = this._parent.RegisteredResources.GetEnumerator();
                try
                {
                    for (
                    ; registeredResourcesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = registeredResourcesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    registeredResourcesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IMarketFactors marketFactorsItem = item.As<IMarketFactors>();
                if (((marketFactorsItem != null) 
                            && this._parent.MarketFactors.Remove(marketFactorsItem)))
                {
                    return true;
                }
                IMarketProduct marketProductItem = item.As<IMarketProduct>();
                if (((marketProductItem != null) 
                            && this._parent.MarketProducts.Remove(marketProductItem)))
                {
                    return true;
                }
                if ((this._parent.RTO == item))
                {
                    this._parent.RTO = null;
                    return true;
                }
                ISettlement settlementItem = item.As<ISettlement>();
                if (((settlementItem != null) 
                            && this._parent.Settlements.Remove(settlementItem)))
                {
                    return true;
                }
                IBid bidItem = item.As<IBid>();
                if (((bidItem != null) 
                            && this._parent.Bids.Remove(bidItem)))
                {
                    return true;
                }
                IRegisteredResource registeredResourceItem = item.As<IRegisteredResource>();
                if (((registeredResourceItem != null) 
                            && this._parent.RegisteredResources.Remove(registeredResourceItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.MarketFactors).Concat(this._parent.MarketProducts).Concat(this._parent.RTO).Concat(this._parent.Settlements).Concat(this._parent.Bids).Concat(this._parent.RegisteredResources).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<IMarket, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(IMarket modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TypeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the start property
        /// </summary>
        private sealed class StartProxy : ModelPropertyChange<IMarket, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartProxy(IMarket modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.Start;
                }
                set
                {
                    this.ModelElement.Start = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StartChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StartChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rampIntervalNonSpinRes property
        /// </summary>
        private sealed class RampIntervalNonSpinResProxy : ModelPropertyChange<IMarket, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RampIntervalNonSpinResProxy(IMarket modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RampIntervalNonSpinRes;
                }
                set
                {
                    this.ModelElement.RampIntervalNonSpinRes = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RampIntervalNonSpinResChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RampIntervalNonSpinResChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the end property
        /// </summary>
        private sealed class EndProxy : ModelPropertyChange<IMarket, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EndProxy(IMarket modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.End;
                }
                set
                {
                    this.ModelElement.End = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EndChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EndChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the timeIntervalLength property
        /// </summary>
        private sealed class TimeIntervalLengthProxy : ModelPropertyChange<IMarket, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeIntervalLengthProxy(IMarket modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TimeIntervalLength;
                }
                set
                {
                    this.ModelElement.TimeIntervalLength = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TimeIntervalLengthChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TimeIntervalLengthChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rampIntervalReg property
        /// </summary>
        private sealed class RampIntervalRegProxy : ModelPropertyChange<IMarket, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RampIntervalRegProxy(IMarket modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RampIntervalReg;
                }
                set
                {
                    this.ModelElement.RampIntervalReg = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RampIntervalRegChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RampIntervalRegChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rampIntervalSpinRes property
        /// </summary>
        private sealed class RampIntervalSpinResProxy : ModelPropertyChange<IMarket, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RampIntervalSpinResProxy(IMarket modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RampIntervalSpinRes;
                }
                set
                {
                    this.ModelElement.RampIntervalSpinRes = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RampIntervalSpinResChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RampIntervalSpinResChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dst property
        /// </summary>
        private sealed class DstProxy : ModelPropertyChange<IMarket, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DstProxy(IMarket modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Dst;
                }
                set
                {
                    this.ModelElement.Dst = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DstChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DstChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rampIntervalEnergy property
        /// </summary>
        private sealed class RampIntervalEnergyProxy : ModelPropertyChange<IMarket, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RampIntervalEnergyProxy(IMarket modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RampIntervalEnergy;
                }
                set
                {
                    this.ModelElement.RampIntervalEnergy = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RampIntervalEnergyChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RampIntervalEnergyChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the localTimeZone property
        /// </summary>
        private sealed class LocalTimeZoneProxy : ModelPropertyChange<IMarket, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocalTimeZoneProxy(IMarket modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.LocalTimeZone;
                }
                set
                {
                    this.ModelElement.LocalTimeZone = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LocalTimeZoneChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LocalTimeZoneChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RTO property
        /// </summary>
        private sealed class RTOProxy : ModelPropertyChange<IMarket, IRTO>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RTOProxy(IMarket modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRTO Value
            {
                get
                {
                    return this.ModelElement.RTO;
                }
                set
                {
                    this.ModelElement.RTO = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RTOChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RTOChanged -= handler;
            }
        }
    }
}

