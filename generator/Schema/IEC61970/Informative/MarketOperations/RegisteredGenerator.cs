//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the RegisteredGenerator class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "RegisteredGenerator")]
    [DebuggerDisplayAttribute("RegisteredGenerator {UUID}")]
    public class RegisteredGenerator : RegisteredResource, IRegisteredGenerator, IModelElement
    {
        
        /// <summary>
        /// The backing field for the LowControlLImit property
        /// </summary>
        private float _lowControlLImit;
        
        /// <summary>
        /// The backing field for the LowerControlRate property
        /// </summary>
        private object _lowerControlRate;
        
        /// <summary>
        /// The backing field for the RaiseRampRate property
        /// </summary>
        private object _raiseRampRate;
        
        /// <summary>
        /// The backing field for the RaiseControlRate property
        /// </summary>
        private object _raiseControlRate;
        
        /// <summary>
        /// The backing field for the MaximumAllowableSpinningReserve property
        /// </summary>
        private float _maximumAllowableSpinningReserve;
        
        /// <summary>
        /// The backing field for the MaximumOperatingMW property
        /// </summary>
        private float _maximumOperatingMW;
        
        /// <summary>
        /// The backing field for the HighControlLimit property
        /// </summary>
        private float _highControlLimit;
        
        /// <summary>
        /// The backing field for the MinimumOperatingMW property
        /// </summary>
        private float _minimumOperatingMW;
        
        /// <summary>
        /// The backing field for the LowerRampRate property
        /// </summary>
        private object _lowerRampRate;
        
        /// <summary>
        /// The backing field for the SpinReserveRamp property
        /// </summary>
        private object _spinReserveRamp;
        
        /// <summary>
        /// The backing field for the RampRateCurves property
        /// </summary>
        private RegisteredGeneratorRampRateCurvesCollection _rampRateCurves;
        
        /// <summary>
        /// The backing field for the UnitInitialConditions property
        /// </summary>
        private RegisteredGeneratorUnitInitialConditionsCollection _unitInitialConditions;
        
        /// <summary>
        /// The backing field for the StartUpCostCurves property
        /// </summary>
        private RegisteredGeneratorStartUpCostCurvesCollection _startUpCostCurves;
        
        /// <summary>
        /// The backing field for the GeneratingUnit property
        /// </summary>
        private IGeneratingUnit _generatingUnit;
        
        /// <summary>
        /// The backing field for the GeneratingBids property
        /// </summary>
        private RegisteredGeneratorGeneratingBidsCollection _generatingBids;
        
        private static IClass _classInstance;
        
        public RegisteredGenerator()
        {
            this._rampRateCurves = new RegisteredGeneratorRampRateCurvesCollection(this);
            this._rampRateCurves.CollectionChanging += this.RampRateCurvesCollectionChanging;
            this._rampRateCurves.CollectionChanged += this.RampRateCurvesCollectionChanged;
            this._unitInitialConditions = new RegisteredGeneratorUnitInitialConditionsCollection(this);
            this._unitInitialConditions.CollectionChanging += this.UnitInitialConditionsCollectionChanging;
            this._unitInitialConditions.CollectionChanged += this.UnitInitialConditionsCollectionChanged;
            this._startUpCostCurves = new RegisteredGeneratorStartUpCostCurvesCollection(this);
            this._startUpCostCurves.CollectionChanging += this.StartUpCostCurvesCollectionChanging;
            this._startUpCostCurves.CollectionChanged += this.StartUpCostCurvesCollectionChanged;
            this._generatingBids = new RegisteredGeneratorGeneratingBidsCollection(this);
            this._generatingBids.CollectionChanging += this.GeneratingBidsCollectionChanging;
            this._generatingBids.CollectionChanged += this.GeneratingBidsCollectionChanged;
        }
        
        /// <summary>
        /// The lowControlLImit property
        /// </summary>
        [XmlElementNameAttribute("lowControlLImit")]
        [XmlAttributeAttribute(true)]
        public virtual float LowControlLImit
        {
            get
            {
                return this._lowControlLImit;
            }
            set
            {
                if ((this._lowControlLImit != value))
                {
                    float old = this._lowControlLImit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLowControlLImitChanging(e);
                    this.OnPropertyChanging("LowControlLImit", e);
                    this._lowControlLImit = value;
                    this.OnLowControlLImitChanged(e);
                    this.OnPropertyChanged("LowControlLImit", e);
                }
            }
        }
        
        /// <summary>
        /// The lowerControlRate property
        /// </summary>
        [XmlElementNameAttribute("lowerControlRate")]
        [XmlAttributeAttribute(true)]
        public virtual object LowerControlRate
        {
            get
            {
                return this._lowerControlRate;
            }
            set
            {
                if ((this._lowerControlRate != value))
                {
                    object old = this._lowerControlRate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLowerControlRateChanging(e);
                    this.OnPropertyChanging("LowerControlRate", e);
                    this._lowerControlRate = value;
                    this.OnLowerControlRateChanged(e);
                    this.OnPropertyChanged("LowerControlRate", e);
                }
            }
        }
        
        /// <summary>
        /// The raiseRampRate property
        /// </summary>
        [XmlElementNameAttribute("raiseRampRate")]
        [XmlAttributeAttribute(true)]
        public virtual object RaiseRampRate
        {
            get
            {
                return this._raiseRampRate;
            }
            set
            {
                if ((this._raiseRampRate != value))
                {
                    object old = this._raiseRampRate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRaiseRampRateChanging(e);
                    this.OnPropertyChanging("RaiseRampRate", e);
                    this._raiseRampRate = value;
                    this.OnRaiseRampRateChanged(e);
                    this.OnPropertyChanged("RaiseRampRate", e);
                }
            }
        }
        
        /// <summary>
        /// The raiseControlRate property
        /// </summary>
        [XmlElementNameAttribute("raiseControlRate")]
        [XmlAttributeAttribute(true)]
        public virtual object RaiseControlRate
        {
            get
            {
                return this._raiseControlRate;
            }
            set
            {
                if ((this._raiseControlRate != value))
                {
                    object old = this._raiseControlRate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRaiseControlRateChanging(e);
                    this.OnPropertyChanging("RaiseControlRate", e);
                    this._raiseControlRate = value;
                    this.OnRaiseControlRateChanged(e);
                    this.OnPropertyChanged("RaiseControlRate", e);
                }
            }
        }
        
        /// <summary>
        /// The maximumAllowableSpinningReserve property
        /// </summary>
        [XmlElementNameAttribute("maximumAllowableSpinningReserve")]
        [XmlAttributeAttribute(true)]
        public virtual float MaximumAllowableSpinningReserve
        {
            get
            {
                return this._maximumAllowableSpinningReserve;
            }
            set
            {
                if ((this._maximumAllowableSpinningReserve != value))
                {
                    float old = this._maximumAllowableSpinningReserve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaximumAllowableSpinningReserveChanging(e);
                    this.OnPropertyChanging("MaximumAllowableSpinningReserve", e);
                    this._maximumAllowableSpinningReserve = value;
                    this.OnMaximumAllowableSpinningReserveChanged(e);
                    this.OnPropertyChanged("MaximumAllowableSpinningReserve", e);
                }
            }
        }
        
        /// <summary>
        /// The maximumOperatingMW property
        /// </summary>
        [XmlElementNameAttribute("maximumOperatingMW")]
        [XmlAttributeAttribute(true)]
        public virtual float MaximumOperatingMW
        {
            get
            {
                return this._maximumOperatingMW;
            }
            set
            {
                if ((this._maximumOperatingMW != value))
                {
                    float old = this._maximumOperatingMW;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaximumOperatingMWChanging(e);
                    this.OnPropertyChanging("MaximumOperatingMW", e);
                    this._maximumOperatingMW = value;
                    this.OnMaximumOperatingMWChanged(e);
                    this.OnPropertyChanged("MaximumOperatingMW", e);
                }
            }
        }
        
        /// <summary>
        /// The highControlLimit property
        /// </summary>
        [XmlElementNameAttribute("highControlLimit")]
        [XmlAttributeAttribute(true)]
        public virtual float HighControlLimit
        {
            get
            {
                return this._highControlLimit;
            }
            set
            {
                if ((this._highControlLimit != value))
                {
                    float old = this._highControlLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHighControlLimitChanging(e);
                    this.OnPropertyChanging("HighControlLimit", e);
                    this._highControlLimit = value;
                    this.OnHighControlLimitChanged(e);
                    this.OnPropertyChanged("HighControlLimit", e);
                }
            }
        }
        
        /// <summary>
        /// The minimumOperatingMW property
        /// </summary>
        [XmlElementNameAttribute("minimumOperatingMW")]
        [XmlAttributeAttribute(true)]
        public virtual float MinimumOperatingMW
        {
            get
            {
                return this._minimumOperatingMW;
            }
            set
            {
                if ((this._minimumOperatingMW != value))
                {
                    float old = this._minimumOperatingMW;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinimumOperatingMWChanging(e);
                    this.OnPropertyChanging("MinimumOperatingMW", e);
                    this._minimumOperatingMW = value;
                    this.OnMinimumOperatingMWChanged(e);
                    this.OnPropertyChanged("MinimumOperatingMW", e);
                }
            }
        }
        
        /// <summary>
        /// The lowerRampRate property
        /// </summary>
        [XmlElementNameAttribute("lowerRampRate")]
        [XmlAttributeAttribute(true)]
        public virtual object LowerRampRate
        {
            get
            {
                return this._lowerRampRate;
            }
            set
            {
                if ((this._lowerRampRate != value))
                {
                    object old = this._lowerRampRate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLowerRampRateChanging(e);
                    this.OnPropertyChanging("LowerRampRate", e);
                    this._lowerRampRate = value;
                    this.OnLowerRampRateChanged(e);
                    this.OnPropertyChanged("LowerRampRate", e);
                }
            }
        }
        
        /// <summary>
        /// The spinReserveRamp property
        /// </summary>
        [XmlElementNameAttribute("spinReserveRamp")]
        [XmlAttributeAttribute(true)]
        public virtual object SpinReserveRamp
        {
            get
            {
                return this._spinReserveRamp;
            }
            set
            {
                if ((this._spinReserveRamp != value))
                {
                    object old = this._spinReserveRamp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSpinReserveRampChanging(e);
                    this.OnPropertyChanging("SpinReserveRamp", e);
                    this._spinReserveRamp = value;
                    this.OnSpinReserveRampChanged(e);
                    this.OnPropertyChanged("SpinReserveRamp", e);
                }
            }
        }
        
        /// <summary>
        /// The RampRateCurves property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GeneratingUnit")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IRampRateCurve> RampRateCurves
        {
            get
            {
                return this._rampRateCurves;
            }
        }
        
        /// <summary>
        /// The UnitInitialConditions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GeneratingUnit")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IUnitInitialConditions> UnitInitialConditions
        {
            get
            {
                return this._unitInitialConditions;
            }
        }
        
        /// <summary>
        /// The StartUpCostCurves property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("RegisteredGenerators")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IStartUpCostCurve> StartUpCostCurves
        {
            get
            {
                return this._startUpCostCurves;
            }
        }
        
        /// <summary>
        /// The GeneratingUnit property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("RegisteredGenerator")]
        public virtual IGeneratingUnit GeneratingUnit
        {
            get
            {
                return this._generatingUnit;
            }
            set
            {
                if ((this._generatingUnit != value))
                {
                    IGeneratingUnit old = this._generatingUnit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGeneratingUnitChanging(e);
                    this.OnPropertyChanging("GeneratingUnit", e);
                    this._generatingUnit = value;
                    if ((old != null))
                    {
                        old.RegisteredGenerator = null;
                        old.Deleted -= this.OnResetGeneratingUnit;
                    }
                    if ((value != null))
                    {
                        value.RegisteredGenerator = this;
                        value.Deleted += this.OnResetGeneratingUnit;
                    }
                    this.OnGeneratingUnitChanged(e);
                    this.OnPropertyChanged("GeneratingUnit", e);
                }
            }
        }
        
        /// <summary>
        /// The GeneratingBids property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("RegisteredGenerator")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGeneratingBid> GeneratingBids
        {
            get
            {
                return this._generatingBids;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RegisteredGeneratorReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "RegisteredGenerator")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the LowControlLImit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowControlLImitChanging;
        
        /// <summary>
        /// Gets fired when the LowControlLImit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowControlLImitChanged;
        
        /// <summary>
        /// Gets fired before the LowerControlRate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowerControlRateChanging;
        
        /// <summary>
        /// Gets fired when the LowerControlRate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowerControlRateChanged;
        
        /// <summary>
        /// Gets fired before the RaiseRampRate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RaiseRampRateChanging;
        
        /// <summary>
        /// Gets fired when the RaiseRampRate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RaiseRampRateChanged;
        
        /// <summary>
        /// Gets fired before the RaiseControlRate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RaiseControlRateChanging;
        
        /// <summary>
        /// Gets fired when the RaiseControlRate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RaiseControlRateChanged;
        
        /// <summary>
        /// Gets fired before the MaximumAllowableSpinningReserve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaximumAllowableSpinningReserveChanging;
        
        /// <summary>
        /// Gets fired when the MaximumAllowableSpinningReserve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaximumAllowableSpinningReserveChanged;
        
        /// <summary>
        /// Gets fired before the MaximumOperatingMW property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaximumOperatingMWChanging;
        
        /// <summary>
        /// Gets fired when the MaximumOperatingMW property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaximumOperatingMWChanged;
        
        /// <summary>
        /// Gets fired before the HighControlLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HighControlLimitChanging;
        
        /// <summary>
        /// Gets fired when the HighControlLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HighControlLimitChanged;
        
        /// <summary>
        /// Gets fired before the MinimumOperatingMW property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinimumOperatingMWChanging;
        
        /// <summary>
        /// Gets fired when the MinimumOperatingMW property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinimumOperatingMWChanged;
        
        /// <summary>
        /// Gets fired before the LowerRampRate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowerRampRateChanging;
        
        /// <summary>
        /// Gets fired when the LowerRampRate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowerRampRateChanged;
        
        /// <summary>
        /// Gets fired before the SpinReserveRamp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpinReserveRampChanging;
        
        /// <summary>
        /// Gets fired when the SpinReserveRamp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpinReserveRampChanged;
        
        /// <summary>
        /// Gets fired before the GeneratingUnit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GeneratingUnitChanging;
        
        /// <summary>
        /// Gets fired when the GeneratingUnit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GeneratingUnitChanged;
        
        /// <summary>
        /// Raises the LowControlLImitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowControlLImitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowControlLImitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowControlLImitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowControlLImitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowControlLImitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowerControlRateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerControlRateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowerControlRateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowerControlRateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerControlRateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowerControlRateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RaiseRampRateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRaiseRampRateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RaiseRampRateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RaiseRampRateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRaiseRampRateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RaiseRampRateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RaiseControlRateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRaiseControlRateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RaiseControlRateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RaiseControlRateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRaiseControlRateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RaiseControlRateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaximumAllowableSpinningReserveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximumAllowableSpinningReserveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaximumAllowableSpinningReserveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaximumAllowableSpinningReserveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximumAllowableSpinningReserveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaximumAllowableSpinningReserveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaximumOperatingMWChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximumOperatingMWChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaximumOperatingMWChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaximumOperatingMWChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximumOperatingMWChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaximumOperatingMWChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HighControlLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHighControlLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HighControlLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HighControlLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHighControlLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HighControlLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinimumOperatingMWChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimumOperatingMWChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinimumOperatingMWChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinimumOperatingMWChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimumOperatingMWChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinimumOperatingMWChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowerRampRateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerRampRateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowerRampRateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowerRampRateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerRampRateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowerRampRateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpinReserveRampChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpinReserveRampChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpinReserveRampChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpinReserveRampChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpinReserveRampChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpinReserveRampChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RampRateCurves property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RampRateCurvesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("RampRateCurves", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RampRateCurves property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RampRateCurvesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RampRateCurves", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the UnitInitialConditions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UnitInitialConditionsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("UnitInitialConditions", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the UnitInitialConditions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UnitInitialConditionsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("UnitInitialConditions", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the StartUpCostCurves property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void StartUpCostCurvesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("StartUpCostCurves", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the StartUpCostCurves property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void StartUpCostCurvesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("StartUpCostCurves", e);
        }
        
        /// <summary>
        /// Raises the GeneratingUnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGeneratingUnitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GeneratingUnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GeneratingUnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGeneratingUnitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GeneratingUnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GeneratingUnit property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGeneratingUnit(object sender, System.EventArgs eventArgs)
        {
            this.GeneratingUnit = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GeneratingBids property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GeneratingBidsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("GeneratingBids", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GeneratingBids property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GeneratingBidsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GeneratingBids", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "LOWCONTROLLIMIT"))
            {
                return this.LowControlLImit;
            }
            if ((attribute == "LOWERCONTROLRATE"))
            {
                return this.LowerControlRate;
            }
            if ((attribute == "RAISERAMPRATE"))
            {
                return this.RaiseRampRate;
            }
            if ((attribute == "RAISECONTROLRATE"))
            {
                return this.RaiseControlRate;
            }
            if ((attribute == "MAXIMUMALLOWABLESPINNINGRESERVE"))
            {
                return this.MaximumAllowableSpinningReserve;
            }
            if ((attribute == "MAXIMUMOPERATINGMW"))
            {
                return this.MaximumOperatingMW;
            }
            if ((attribute == "HIGHCONTROLLIMIT"))
            {
                return this.HighControlLimit;
            }
            if ((attribute == "MINIMUMOPERATINGMW"))
            {
                return this.MinimumOperatingMW;
            }
            if ((attribute == "LOWERRAMPRATE"))
            {
                return this.LowerRampRate;
            }
            if ((attribute == "SPINRESERVERAMP"))
            {
                return this.SpinReserveRamp;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "RAMPRATECURVES"))
            {
                return this._rampRateCurves;
            }
            if ((feature == "UNITINITIALCONDITIONS"))
            {
                return this._unitInitialConditions;
            }
            if ((feature == "STARTUPCOSTCURVES"))
            {
                return this._startUpCostCurves;
            }
            if ((feature == "GENERATINGBIDS"))
            {
                return this._generatingBids;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "GENERATINGUNIT"))
            {
                this.GeneratingUnit = ((IGeneratingUnit)(value));
                return;
            }
            if ((feature == "LOWCONTROLLIMIT"))
            {
                this.LowControlLImit = ((float)(value));
                return;
            }
            if ((feature == "LOWERCONTROLRATE"))
            {
                this.LowerControlRate = ((object)(value));
                return;
            }
            if ((feature == "RAISERAMPRATE"))
            {
                this.RaiseRampRate = ((object)(value));
                return;
            }
            if ((feature == "RAISECONTROLRATE"))
            {
                this.RaiseControlRate = ((object)(value));
                return;
            }
            if ((feature == "MAXIMUMALLOWABLESPINNINGRESERVE"))
            {
                this.MaximumAllowableSpinningReserve = ((float)(value));
                return;
            }
            if ((feature == "MAXIMUMOPERATINGMW"))
            {
                this.MaximumOperatingMW = ((float)(value));
                return;
            }
            if ((feature == "HIGHCONTROLLIMIT"))
            {
                this.HighControlLimit = ((float)(value));
                return;
            }
            if ((feature == "MINIMUMOPERATINGMW"))
            {
                this.MinimumOperatingMW = ((float)(value));
                return;
            }
            if ((feature == "LOWERRAMPRATE"))
            {
                this.LowerRampRate = ((object)(value));
                return;
            }
            if ((feature == "SPINRESERVERAMP"))
            {
                this.SpinReserveRamp = ((object)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "GeneratingUnit"))
            {
                return new GeneratingUnitProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "GeneratingUnit"))
            {
                return new GeneratingUnitProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "RegisteredGenerator")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RegisteredGenerator class
        /// </summary>
        public class RegisteredGeneratorReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RegisteredGenerator _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RegisteredGeneratorReferencedElementsCollection(RegisteredGenerator parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.RampRateCurves.Count);
                    count = (count + this._parent.UnitInitialConditions.Count);
                    count = (count + this._parent.StartUpCostCurves.Count);
                    if ((this._parent.GeneratingUnit != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.GeneratingBids.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.RampRateCurves.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.UnitInitialConditions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.StartUpCostCurves.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.GeneratingUnitChanged += this.PropagateValueChanges;
                this._parent.GeneratingBids.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.RampRateCurves.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.UnitInitialConditions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.StartUpCostCurves.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.GeneratingUnitChanged -= this.PropagateValueChanges;
                this._parent.GeneratingBids.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IRampRateCurve rampRateCurvesCasted = item.As<IRampRateCurve>();
                if ((rampRateCurvesCasted != null))
                {
                    this._parent.RampRateCurves.Add(rampRateCurvesCasted);
                }
                IUnitInitialConditions unitInitialConditionsCasted = item.As<IUnitInitialConditions>();
                if ((unitInitialConditionsCasted != null))
                {
                    this._parent.UnitInitialConditions.Add(unitInitialConditionsCasted);
                }
                IStartUpCostCurve startUpCostCurvesCasted = item.As<IStartUpCostCurve>();
                if ((startUpCostCurvesCasted != null))
                {
                    this._parent.StartUpCostCurves.Add(startUpCostCurvesCasted);
                }
                if ((this._parent.GeneratingUnit == null))
                {
                    IGeneratingUnit generatingUnitCasted = item.As<IGeneratingUnit>();
                    if ((generatingUnitCasted != null))
                    {
                        this._parent.GeneratingUnit = generatingUnitCasted;
                        return;
                    }
                }
                IGeneratingBid generatingBidsCasted = item.As<IGeneratingBid>();
                if ((generatingBidsCasted != null))
                {
                    this._parent.GeneratingBids.Add(generatingBidsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.RampRateCurves.Clear();
                this._parent.UnitInitialConditions.Clear();
                this._parent.StartUpCostCurves.Clear();
                this._parent.GeneratingUnit = null;
                this._parent.GeneratingBids.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.RampRateCurves.Contains(item))
                {
                    return true;
                }
                if (this._parent.UnitInitialConditions.Contains(item))
                {
                    return true;
                }
                if (this._parent.StartUpCostCurves.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.GeneratingUnit))
                {
                    return true;
                }
                if (this._parent.GeneratingBids.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> rampRateCurvesEnumerator = this._parent.RampRateCurves.GetEnumerator();
                try
                {
                    for (
                    ; rampRateCurvesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = rampRateCurvesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    rampRateCurvesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> unitInitialConditionsEnumerator = this._parent.UnitInitialConditions.GetEnumerator();
                try
                {
                    for (
                    ; unitInitialConditionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = unitInitialConditionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    unitInitialConditionsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> startUpCostCurvesEnumerator = this._parent.StartUpCostCurves.GetEnumerator();
                try
                {
                    for (
                    ; startUpCostCurvesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = startUpCostCurvesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    startUpCostCurvesEnumerator.Dispose();
                }
                if ((this._parent.GeneratingUnit != null))
                {
                    array[arrayIndex] = this._parent.GeneratingUnit;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> generatingBidsEnumerator = this._parent.GeneratingBids.GetEnumerator();
                try
                {
                    for (
                    ; generatingBidsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = generatingBidsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    generatingBidsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IRampRateCurve rampRateCurveItem = item.As<IRampRateCurve>();
                if (((rampRateCurveItem != null) 
                            && this._parent.RampRateCurves.Remove(rampRateCurveItem)))
                {
                    return true;
                }
                IUnitInitialConditions unitInitialConditionsItem = item.As<IUnitInitialConditions>();
                if (((unitInitialConditionsItem != null) 
                            && this._parent.UnitInitialConditions.Remove(unitInitialConditionsItem)))
                {
                    return true;
                }
                IStartUpCostCurve startUpCostCurveItem = item.As<IStartUpCostCurve>();
                if (((startUpCostCurveItem != null) 
                            && this._parent.StartUpCostCurves.Remove(startUpCostCurveItem)))
                {
                    return true;
                }
                if ((this._parent.GeneratingUnit == item))
                {
                    this._parent.GeneratingUnit = null;
                    return true;
                }
                IGeneratingBid generatingBidItem = item.As<IGeneratingBid>();
                if (((generatingBidItem != null) 
                            && this._parent.GeneratingBids.Remove(generatingBidItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.RampRateCurves).Concat(this._parent.UnitInitialConditions).Concat(this._parent.StartUpCostCurves).Concat(this._parent.GeneratingUnit).Concat(this._parent.GeneratingBids).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lowControlLImit property
        /// </summary>
        private sealed class LowControlLImitProxy : ModelPropertyChange<IRegisteredGenerator, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowControlLImitProxy(IRegisteredGenerator modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.LowControlLImit;
                }
                set
                {
                    this.ModelElement.LowControlLImit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowControlLImitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowControlLImitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lowerControlRate property
        /// </summary>
        private sealed class LowerControlRateProxy : ModelPropertyChange<IRegisteredGenerator, object>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowerControlRateProxy(IRegisteredGenerator modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override object Value
            {
                get
                {
                    return this.ModelElement.LowerControlRate;
                }
                set
                {
                    this.ModelElement.LowerControlRate = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowerControlRateChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowerControlRateChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the raiseRampRate property
        /// </summary>
        private sealed class RaiseRampRateProxy : ModelPropertyChange<IRegisteredGenerator, object>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RaiseRampRateProxy(IRegisteredGenerator modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override object Value
            {
                get
                {
                    return this.ModelElement.RaiseRampRate;
                }
                set
                {
                    this.ModelElement.RaiseRampRate = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RaiseRampRateChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RaiseRampRateChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the raiseControlRate property
        /// </summary>
        private sealed class RaiseControlRateProxy : ModelPropertyChange<IRegisteredGenerator, object>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RaiseControlRateProxy(IRegisteredGenerator modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override object Value
            {
                get
                {
                    return this.ModelElement.RaiseControlRate;
                }
                set
                {
                    this.ModelElement.RaiseControlRate = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RaiseControlRateChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RaiseControlRateChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maximumAllowableSpinningReserve property
        /// </summary>
        private sealed class MaximumAllowableSpinningReserveProxy : ModelPropertyChange<IRegisteredGenerator, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaximumAllowableSpinningReserveProxy(IRegisteredGenerator modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MaximumAllowableSpinningReserve;
                }
                set
                {
                    this.ModelElement.MaximumAllowableSpinningReserve = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaximumAllowableSpinningReserveChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaximumAllowableSpinningReserveChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maximumOperatingMW property
        /// </summary>
        private sealed class MaximumOperatingMWProxy : ModelPropertyChange<IRegisteredGenerator, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaximumOperatingMWProxy(IRegisteredGenerator modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MaximumOperatingMW;
                }
                set
                {
                    this.ModelElement.MaximumOperatingMW = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaximumOperatingMWChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaximumOperatingMWChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the highControlLimit property
        /// </summary>
        private sealed class HighControlLimitProxy : ModelPropertyChange<IRegisteredGenerator, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HighControlLimitProxy(IRegisteredGenerator modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.HighControlLimit;
                }
                set
                {
                    this.ModelElement.HighControlLimit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HighControlLimitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HighControlLimitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minimumOperatingMW property
        /// </summary>
        private sealed class MinimumOperatingMWProxy : ModelPropertyChange<IRegisteredGenerator, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinimumOperatingMWProxy(IRegisteredGenerator modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinimumOperatingMW;
                }
                set
                {
                    this.ModelElement.MinimumOperatingMW = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinimumOperatingMWChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinimumOperatingMWChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lowerRampRate property
        /// </summary>
        private sealed class LowerRampRateProxy : ModelPropertyChange<IRegisteredGenerator, object>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowerRampRateProxy(IRegisteredGenerator modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override object Value
            {
                get
                {
                    return this.ModelElement.LowerRampRate;
                }
                set
                {
                    this.ModelElement.LowerRampRate = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowerRampRateChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowerRampRateChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the spinReserveRamp property
        /// </summary>
        private sealed class SpinReserveRampProxy : ModelPropertyChange<IRegisteredGenerator, object>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpinReserveRampProxy(IRegisteredGenerator modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override object Value
            {
                get
                {
                    return this.ModelElement.SpinReserveRamp;
                }
                set
                {
                    this.ModelElement.SpinReserveRamp = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SpinReserveRampChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SpinReserveRampChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GeneratingUnit property
        /// </summary>
        private sealed class GeneratingUnitProxy : ModelPropertyChange<IRegisteredGenerator, IGeneratingUnit>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GeneratingUnitProxy(IRegisteredGenerator modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGeneratingUnit Value
            {
                get
                {
                    return this.ModelElement.GeneratingUnit;
                }
                set
                {
                    this.ModelElement.GeneratingUnit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GeneratingUnitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GeneratingUnitChanged -= handler;
            }
        }
    }
}

