//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the BidClearing class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "BidClearing")]
    [DebuggerDisplayAttribute("BidClearing {UUID}")]
    public partial class BidClearing : Element, IBidClearing, IModelElement
    {
        
        /// <summary>
        /// The backing field for the StartUpCost property
        /// </summary>
        private float _startUpCost;
        
        private static Lazy<ITypedElement> _startUpCostAttribute = new Lazy<ITypedElement>(RetrieveStartUpCostAttribute);
        
        /// <summary>
        /// The backing field for the NoLoadCost property
        /// </summary>
        private float _noLoadCost;
        
        private static Lazy<ITypedElement> _noLoadCostAttribute = new Lazy<ITypedElement>(RetrieveNoLoadCostAttribute);
        
        /// <summary>
        /// The backing field for the LostOpCost property
        /// </summary>
        private float _lostOpCost;
        
        private static Lazy<ITypedElement> _lostOpCostAttribute = new Lazy<ITypedElement>(RetrieveLostOpCostAttribute);
        
        private static Lazy<ITypedElement> _bidReference = new Lazy<ITypedElement>(RetrieveBidReference);
        
        /// <summary>
        /// The backing field for the Bid property
        /// </summary>
        private IBid _bid;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The startUpCost property
        /// </summary>
        [XmlElementNameAttribute("startUpCost")]
        [XmlAttributeAttribute(true)]
        public virtual float StartUpCost
        {
            get
            {
                return this._startUpCost;
            }
            set
            {
                if ((this._startUpCost != value))
                {
                    float old = this._startUpCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStartUpCostChanging(e);
                    this.OnPropertyChanging("StartUpCost", e, _startUpCostAttribute);
                    this._startUpCost = value;
                    this.OnStartUpCostChanged(e);
                    this.OnPropertyChanged("StartUpCost", e, _startUpCostAttribute);
                }
            }
        }
        
        /// <summary>
        /// The noLoadCost property
        /// </summary>
        [XmlElementNameAttribute("noLoadCost")]
        [XmlAttributeAttribute(true)]
        public virtual float NoLoadCost
        {
            get
            {
                return this._noLoadCost;
            }
            set
            {
                if ((this._noLoadCost != value))
                {
                    float old = this._noLoadCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNoLoadCostChanging(e);
                    this.OnPropertyChanging("NoLoadCost", e, _noLoadCostAttribute);
                    this._noLoadCost = value;
                    this.OnNoLoadCostChanged(e);
                    this.OnPropertyChanged("NoLoadCost", e, _noLoadCostAttribute);
                }
            }
        }
        
        /// <summary>
        /// The lostOpCost property
        /// </summary>
        [XmlElementNameAttribute("lostOpCost")]
        [XmlAttributeAttribute(true)]
        public virtual float LostOpCost
        {
            get
            {
                return this._lostOpCost;
            }
            set
            {
                if ((this._lostOpCost != value))
                {
                    float old = this._lostOpCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLostOpCostChanging(e);
                    this.OnPropertyChanging("LostOpCost", e, _lostOpCostAttribute);
                    this._lostOpCost = value;
                    this.OnLostOpCostChanged(e);
                    this.OnPropertyChanged("LostOpCost", e, _lostOpCostAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Bid property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("BidClearing")]
        public virtual IBid Bid
        {
            get
            {
                return this._bid;
            }
            set
            {
                if ((this._bid != value))
                {
                    IBid old = this._bid;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBidChanging(e);
                    this.OnPropertyChanging("Bid", e, _bidReference);
                    this._bid = value;
                    if ((old != null))
                    {
                        old.BidClearing = null;
                        old.Deleted -= this.OnResetBid;
                    }
                    if ((value != null))
                    {
                        value.BidClearing = this;
                        value.Deleted += this.OnResetBid;
                    }
                    this.OnBidChanged(e);
                    this.OnPropertyChanged("Bid", e, _bidReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new BidClearingReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "BidClearing")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the StartUpCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartUpCostChanging;
        
        /// <summary>
        /// Gets fired when the StartUpCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartUpCostChanged;
        
        /// <summary>
        /// Gets fired before the NoLoadCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NoLoadCostChanging;
        
        /// <summary>
        /// Gets fired when the NoLoadCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NoLoadCostChanged;
        
        /// <summary>
        /// Gets fired before the LostOpCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LostOpCostChanging;
        
        /// <summary>
        /// Gets fired when the LostOpCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LostOpCostChanged;
        
        /// <summary>
        /// Gets fired before the Bid property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BidChanging;
        
        /// <summary>
        /// Gets fired when the Bid property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BidChanged;
        
        private static ITypedElement RetrieveStartUpCostAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BidClearing.ClassInstance)).Resolve("startUpCost")));
        }
        
        /// <summary>
        /// Raises the StartUpCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartUpCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartUpCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartUpCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartUpCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartUpCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNoLoadCostAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BidClearing.ClassInstance)).Resolve("noLoadCost")));
        }
        
        /// <summary>
        /// Raises the NoLoadCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNoLoadCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NoLoadCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NoLoadCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNoLoadCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NoLoadCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLostOpCostAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BidClearing.ClassInstance)).Resolve("lostOpCost")));
        }
        
        /// <summary>
        /// Raises the LostOpCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLostOpCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LostOpCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LostOpCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLostOpCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LostOpCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBidReference()
        {
            return ((ITypedElement)(((ModelElement)(BidClearing.ClassInstance)).Resolve("Bid")));
        }
        
        /// <summary>
        /// Raises the BidChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBidChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BidChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BidChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBidChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BidChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Bid property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBid(object sender, System.EventArgs eventArgs)
        {
            this.Bid = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "STARTUPCOST"))
            {
                return this.StartUpCost;
            }
            if ((attribute == "NOLOADCOST"))
            {
                return this.NoLoadCost;
            }
            if ((attribute == "LOSTOPCOST"))
            {
                return this.LostOpCost;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "BID"))
            {
                this.Bid = ((IBid)(value));
                return;
            }
            if ((feature == "STARTUPCOST"))
            {
                this.StartUpCost = ((float)(value));
                return;
            }
            if ((feature == "NOLOADCOST"))
            {
                this.NoLoadCost = ((float)(value));
                return;
            }
            if ((feature == "LOSTOPCOST"))
            {
                this.LostOpCost = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Bid"))
            {
                return new BidProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Bid"))
            {
                return new BidProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "BidClearing")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the BidClearing class
        /// </summary>
        public class BidClearingReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private BidClearing _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BidClearingReferencedElementsCollection(BidClearing parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Bid != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BidChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BidChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Bid == null))
                {
                    IBid bidCasted = item.As<IBid>();
                    if ((bidCasted != null))
                    {
                        this._parent.Bid = bidCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Bid = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Bid))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Bid != null))
                {
                    array[arrayIndex] = this._parent.Bid;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Bid == item))
                {
                    this._parent.Bid = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Bid).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the startUpCost property
        /// </summary>
        private sealed class StartUpCostProxy : ModelPropertyChange<IBidClearing, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartUpCostProxy(IBidClearing modelElement) : 
                    base(modelElement, "startUpCost")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.StartUpCost;
                }
                set
                {
                    this.ModelElement.StartUpCost = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the noLoadCost property
        /// </summary>
        private sealed class NoLoadCostProxy : ModelPropertyChange<IBidClearing, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NoLoadCostProxy(IBidClearing modelElement) : 
                    base(modelElement, "noLoadCost")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NoLoadCost;
                }
                set
                {
                    this.ModelElement.NoLoadCost = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lostOpCost property
        /// </summary>
        private sealed class LostOpCostProxy : ModelPropertyChange<IBidClearing, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LostOpCostProxy(IBidClearing modelElement) : 
                    base(modelElement, "lostOpCost")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.LostOpCost;
                }
                set
                {
                    this.ModelElement.LostOpCost = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Bid property
        /// </summary>
        private sealed class BidProxy : ModelPropertyChange<IBidClearing, IBid>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BidProxy(IBidClearing modelElement) : 
                    base(modelElement, "Bid")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBid Value
            {
                get
                {
                    return this.ModelElement.Bid;
                }
                set
                {
                    this.ModelElement.Bid = value;
                }
            }
        }
    }
}

