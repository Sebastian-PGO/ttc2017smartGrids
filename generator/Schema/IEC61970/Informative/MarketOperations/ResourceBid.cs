//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the ResourceBid class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "ResourceBid")]
    [DebuggerDisplayAttribute("ResourceBid {UUID}")]
    public class ResourceBid : Bid, IResourceBid, IModelElement
    {
        
        /// <summary>
        /// The backing field for the StartUpsMaxWeek property
        /// </summary>
        private int _startUpsMaxWeek;
        
        /// <summary>
        /// The backing field for the CommodityType property
        /// </summary>
        private string _commodityType;
        
        /// <summary>
        /// The backing field for the EnergyMaxDay property
        /// </summary>
        private float _energyMaxDay;
        
        /// <summary>
        /// The backing field for the EnergyMinDay property
        /// </summary>
        private float _energyMinDay;
        
        /// <summary>
        /// The backing field for the Virtual property
        /// </summary>
        private bool _virtual;
        
        /// <summary>
        /// The backing field for the ShutDownsMaxWeek property
        /// </summary>
        private int _shutDownsMaxWeek;
        
        /// <summary>
        /// The backing field for the ShutDownsMaxDay property
        /// </summary>
        private int _shutDownsMaxDay;
        
        /// <summary>
        /// The backing field for the StartUpsMaxDay property
        /// </summary>
        private int _startUpsMaxDay;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The startUpsMaxWeek property
        /// </summary>
        [XmlElementNameAttribute("startUpsMaxWeek")]
        [XmlAttributeAttribute(true)]
        public virtual int StartUpsMaxWeek
        {
            get
            {
                return this._startUpsMaxWeek;
            }
            set
            {
                if ((this._startUpsMaxWeek != value))
                {
                    int old = this._startUpsMaxWeek;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStartUpsMaxWeekChanging(e);
                    this.OnPropertyChanging("StartUpsMaxWeek", e);
                    this._startUpsMaxWeek = value;
                    this.OnStartUpsMaxWeekChanged(e);
                    this.OnPropertyChanged("StartUpsMaxWeek", e);
                }
            }
        }
        
        /// <summary>
        /// The commodityType property
        /// </summary>
        [XmlElementNameAttribute("commodityType")]
        [XmlAttributeAttribute(true)]
        public virtual string CommodityType
        {
            get
            {
                return this._commodityType;
            }
            set
            {
                if ((this._commodityType != value))
                {
                    string old = this._commodityType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCommodityTypeChanging(e);
                    this.OnPropertyChanging("CommodityType", e);
                    this._commodityType = value;
                    this.OnCommodityTypeChanged(e);
                    this.OnPropertyChanged("CommodityType", e);
                }
            }
        }
        
        /// <summary>
        /// The energyMaxDay property
        /// </summary>
        [XmlElementNameAttribute("energyMaxDay")]
        [XmlAttributeAttribute(true)]
        public virtual float EnergyMaxDay
        {
            get
            {
                return this._energyMaxDay;
            }
            set
            {
                if ((this._energyMaxDay != value))
                {
                    float old = this._energyMaxDay;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEnergyMaxDayChanging(e);
                    this.OnPropertyChanging("EnergyMaxDay", e);
                    this._energyMaxDay = value;
                    this.OnEnergyMaxDayChanged(e);
                    this.OnPropertyChanged("EnergyMaxDay", e);
                }
            }
        }
        
        /// <summary>
        /// The energyMinDay property
        /// </summary>
        [XmlElementNameAttribute("energyMinDay")]
        [XmlAttributeAttribute(true)]
        public virtual float EnergyMinDay
        {
            get
            {
                return this._energyMinDay;
            }
            set
            {
                if ((this._energyMinDay != value))
                {
                    float old = this._energyMinDay;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEnergyMinDayChanging(e);
                    this.OnPropertyChanging("EnergyMinDay", e);
                    this._energyMinDay = value;
                    this.OnEnergyMinDayChanged(e);
                    this.OnPropertyChanged("EnergyMinDay", e);
                }
            }
        }
        
        /// <summary>
        /// The virtual property
        /// </summary>
        [XmlElementNameAttribute("virtual")]
        [XmlAttributeAttribute(true)]
        public virtual bool Virtual
        {
            get
            {
                return this._virtual;
            }
            set
            {
                if ((this._virtual != value))
                {
                    bool old = this._virtual;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVirtualChanging(e);
                    this.OnPropertyChanging("Virtual", e);
                    this._virtual = value;
                    this.OnVirtualChanged(e);
                    this.OnPropertyChanged("Virtual", e);
                }
            }
        }
        
        /// <summary>
        /// The shutDownsMaxWeek property
        /// </summary>
        [XmlElementNameAttribute("shutDownsMaxWeek")]
        [XmlAttributeAttribute(true)]
        public virtual int ShutDownsMaxWeek
        {
            get
            {
                return this._shutDownsMaxWeek;
            }
            set
            {
                if ((this._shutDownsMaxWeek != value))
                {
                    int old = this._shutDownsMaxWeek;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnShutDownsMaxWeekChanging(e);
                    this.OnPropertyChanging("ShutDownsMaxWeek", e);
                    this._shutDownsMaxWeek = value;
                    this.OnShutDownsMaxWeekChanged(e);
                    this.OnPropertyChanged("ShutDownsMaxWeek", e);
                }
            }
        }
        
        /// <summary>
        /// The shutDownsMaxDay property
        /// </summary>
        [XmlElementNameAttribute("shutDownsMaxDay")]
        [XmlAttributeAttribute(true)]
        public virtual int ShutDownsMaxDay
        {
            get
            {
                return this._shutDownsMaxDay;
            }
            set
            {
                if ((this._shutDownsMaxDay != value))
                {
                    int old = this._shutDownsMaxDay;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnShutDownsMaxDayChanging(e);
                    this.OnPropertyChanging("ShutDownsMaxDay", e);
                    this._shutDownsMaxDay = value;
                    this.OnShutDownsMaxDayChanged(e);
                    this.OnPropertyChanged("ShutDownsMaxDay", e);
                }
            }
        }
        
        /// <summary>
        /// The startUpsMaxDay property
        /// </summary>
        [XmlElementNameAttribute("startUpsMaxDay")]
        [XmlAttributeAttribute(true)]
        public virtual int StartUpsMaxDay
        {
            get
            {
                return this._startUpsMaxDay;
            }
            set
            {
                if ((this._startUpsMaxDay != value))
                {
                    int old = this._startUpsMaxDay;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStartUpsMaxDayChanging(e);
                    this.OnPropertyChanging("StartUpsMaxDay", e);
                    this._startUpsMaxDay = value;
                    this.OnStartUpsMaxDayChanged(e);
                    this.OnPropertyChanged("StartUpsMaxDay", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "ResourceBid")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the StartUpsMaxWeek property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartUpsMaxWeekChanging;
        
        /// <summary>
        /// Gets fired when the StartUpsMaxWeek property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartUpsMaxWeekChanged;
        
        /// <summary>
        /// Gets fired before the CommodityType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CommodityTypeChanging;
        
        /// <summary>
        /// Gets fired when the CommodityType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CommodityTypeChanged;
        
        /// <summary>
        /// Gets fired before the EnergyMaxDay property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyMaxDayChanging;
        
        /// <summary>
        /// Gets fired when the EnergyMaxDay property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyMaxDayChanged;
        
        /// <summary>
        /// Gets fired before the EnergyMinDay property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyMinDayChanging;
        
        /// <summary>
        /// Gets fired when the EnergyMinDay property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyMinDayChanged;
        
        /// <summary>
        /// Gets fired before the Virtual property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VirtualChanging;
        
        /// <summary>
        /// Gets fired when the Virtual property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VirtualChanged;
        
        /// <summary>
        /// Gets fired before the ShutDownsMaxWeek property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShutDownsMaxWeekChanging;
        
        /// <summary>
        /// Gets fired when the ShutDownsMaxWeek property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShutDownsMaxWeekChanged;
        
        /// <summary>
        /// Gets fired before the ShutDownsMaxDay property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShutDownsMaxDayChanging;
        
        /// <summary>
        /// Gets fired when the ShutDownsMaxDay property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShutDownsMaxDayChanged;
        
        /// <summary>
        /// Gets fired before the StartUpsMaxDay property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartUpsMaxDayChanging;
        
        /// <summary>
        /// Gets fired when the StartUpsMaxDay property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartUpsMaxDayChanged;
        
        /// <summary>
        /// Raises the StartUpsMaxWeekChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartUpsMaxWeekChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartUpsMaxWeekChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartUpsMaxWeekChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartUpsMaxWeekChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartUpsMaxWeekChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CommodityTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommodityTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CommodityTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CommodityTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommodityTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CommodityTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnergyMaxDayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyMaxDayChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyMaxDayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnergyMaxDayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyMaxDayChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyMaxDayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnergyMinDayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyMinDayChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyMinDayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnergyMinDayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyMinDayChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyMinDayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VirtualChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVirtualChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VirtualChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VirtualChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVirtualChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VirtualChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ShutDownsMaxWeekChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShutDownsMaxWeekChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShutDownsMaxWeekChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ShutDownsMaxWeekChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShutDownsMaxWeekChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShutDownsMaxWeekChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ShutDownsMaxDayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShutDownsMaxDayChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShutDownsMaxDayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ShutDownsMaxDayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShutDownsMaxDayChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShutDownsMaxDayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartUpsMaxDayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartUpsMaxDayChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartUpsMaxDayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartUpsMaxDayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartUpsMaxDayChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartUpsMaxDayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "STARTUPSMAXWEEK"))
            {
                return this.StartUpsMaxWeek;
            }
            if ((attribute == "COMMODITYTYPE"))
            {
                return this.CommodityType;
            }
            if ((attribute == "ENERGYMAXDAY"))
            {
                return this.EnergyMaxDay;
            }
            if ((attribute == "ENERGYMINDAY"))
            {
                return this.EnergyMinDay;
            }
            if ((attribute == "VIRTUAL"))
            {
                return this.Virtual;
            }
            if ((attribute == "SHUTDOWNSMAXWEEK"))
            {
                return this.ShutDownsMaxWeek;
            }
            if ((attribute == "SHUTDOWNSMAXDAY"))
            {
                return this.ShutDownsMaxDay;
            }
            if ((attribute == "STARTUPSMAXDAY"))
            {
                return this.StartUpsMaxDay;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STARTUPSMAXWEEK"))
            {
                this.StartUpsMaxWeek = ((int)(value));
                return;
            }
            if ((feature == "COMMODITYTYPE"))
            {
                this.CommodityType = ((string)(value));
                return;
            }
            if ((feature == "ENERGYMAXDAY"))
            {
                this.EnergyMaxDay = ((float)(value));
                return;
            }
            if ((feature == "ENERGYMINDAY"))
            {
                this.EnergyMinDay = ((float)(value));
                return;
            }
            if ((feature == "VIRTUAL"))
            {
                this.Virtual = ((bool)(value));
                return;
            }
            if ((feature == "SHUTDOWNSMAXWEEK"))
            {
                this.ShutDownsMaxWeek = ((int)(value));
                return;
            }
            if ((feature == "SHUTDOWNSMAXDAY"))
            {
                this.ShutDownsMaxDay = ((int)(value));
                return;
            }
            if ((feature == "STARTUPSMAXDAY"))
            {
                this.StartUpsMaxDay = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "ResourceBid")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the startUpsMaxWeek property
        /// </summary>
        private sealed class StartUpsMaxWeekProxy : ModelPropertyChange<IResourceBid, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartUpsMaxWeekProxy(IResourceBid modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.StartUpsMaxWeek;
                }
                set
                {
                    this.ModelElement.StartUpsMaxWeek = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StartUpsMaxWeekChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StartUpsMaxWeekChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the commodityType property
        /// </summary>
        private sealed class CommodityTypeProxy : ModelPropertyChange<IResourceBid, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CommodityTypeProxy(IResourceBid modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.CommodityType;
                }
                set
                {
                    this.ModelElement.CommodityType = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CommodityTypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CommodityTypeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the energyMaxDay property
        /// </summary>
        private sealed class EnergyMaxDayProxy : ModelPropertyChange<IResourceBid, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnergyMaxDayProxy(IResourceBid modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.EnergyMaxDay;
                }
                set
                {
                    this.ModelElement.EnergyMaxDay = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EnergyMaxDayChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EnergyMaxDayChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the energyMinDay property
        /// </summary>
        private sealed class EnergyMinDayProxy : ModelPropertyChange<IResourceBid, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnergyMinDayProxy(IResourceBid modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.EnergyMinDay;
                }
                set
                {
                    this.ModelElement.EnergyMinDay = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EnergyMinDayChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EnergyMinDayChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the virtual property
        /// </summary>
        private sealed class VirtualProxy : ModelPropertyChange<IResourceBid, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VirtualProxy(IResourceBid modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Virtual;
                }
                set
                {
                    this.ModelElement.Virtual = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VirtualChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VirtualChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the shutDownsMaxWeek property
        /// </summary>
        private sealed class ShutDownsMaxWeekProxy : ModelPropertyChange<IResourceBid, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ShutDownsMaxWeekProxy(IResourceBid modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.ShutDownsMaxWeek;
                }
                set
                {
                    this.ModelElement.ShutDownsMaxWeek = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ShutDownsMaxWeekChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ShutDownsMaxWeekChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the shutDownsMaxDay property
        /// </summary>
        private sealed class ShutDownsMaxDayProxy : ModelPropertyChange<IResourceBid, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ShutDownsMaxDayProxy(IResourceBid modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.ShutDownsMaxDay;
                }
                set
                {
                    this.ModelElement.ShutDownsMaxDay = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ShutDownsMaxDayChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ShutDownsMaxDayChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the startUpsMaxDay property
        /// </summary>
        private sealed class StartUpsMaxDayProxy : ModelPropertyChange<IResourceBid, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartUpsMaxDayProxy(IResourceBid modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.StartUpsMaxDay;
                }
                set
                {
                    this.ModelElement.StartUpsMaxDay = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StartUpsMaxDayChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StartUpsMaxDayChanged -= handler;
            }
        }
    }
}

