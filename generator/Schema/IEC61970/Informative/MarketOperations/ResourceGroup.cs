//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the ResourceGroup class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "ResourceGroup")]
    [DebuggerDisplayAttribute("ResourceGroup {UUID}")]
    public class ResourceGroup : IdentifiedObject, IResourceGroup, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ResourceGroupReqs property
        /// </summary>
        private ResourceGroupResourceGroupReqsCollection _resourceGroupReqs;
        
        /// <summary>
        /// The backing field for the RegisteredResources property
        /// </summary>
        private ResourceGroupRegisteredResourcesCollection _registeredResources;
        
        private static IClass _classInstance;
        
        public ResourceGroup()
        {
            this._resourceGroupReqs = new ResourceGroupResourceGroupReqsCollection(this);
            this._resourceGroupReqs.CollectionChanging += this.ResourceGroupReqsCollectionChanging;
            this._resourceGroupReqs.CollectionChanged += this.ResourceGroupReqsCollectionChanged;
            this._registeredResources = new ResourceGroupRegisteredResourcesCollection(this);
            this._registeredResources.CollectionChanging += this.RegisteredResourcesCollectionChanging;
            this._registeredResources.CollectionChanged += this.RegisteredResourcesCollectionChanged;
        }
        
        /// <summary>
        /// The ResourceGroupReqs property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ResourceGroup")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IResourceGroupReq> ResourceGroupReqs
        {
            get
            {
                return this._resourceGroupReqs;
            }
        }
        
        /// <summary>
        /// The RegisteredResources property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ResourceGroups")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IRegisteredResource> RegisteredResources
        {
            get
            {
                return this._registeredResources;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ResourceGroupReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "ResourceGroup")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ResourceGroupReqs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ResourceGroupReqsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ResourceGroupReqs", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ResourceGroupReqs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ResourceGroupReqsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ResourceGroupReqs", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RegisteredResources property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RegisteredResourcesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("RegisteredResources", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RegisteredResources property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RegisteredResourcesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RegisteredResources", e);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "RESOURCEGROUPREQS"))
            {
                return this._resourceGroupReqs;
            }
            if ((feature == "REGISTEREDRESOURCES"))
            {
                return this._registeredResources;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "ResourceGroup")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ResourceGroup class
        /// </summary>
        public class ResourceGroupReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ResourceGroup _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ResourceGroupReferencedElementsCollection(ResourceGroup parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ResourceGroupReqs.Count);
                    count = (count + this._parent.RegisteredResources.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ResourceGroupReqs.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RegisteredResources.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ResourceGroupReqs.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RegisteredResources.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IResourceGroupReq resourceGroupReqsCasted = item.As<IResourceGroupReq>();
                if ((resourceGroupReqsCasted != null))
                {
                    this._parent.ResourceGroupReqs.Add(resourceGroupReqsCasted);
                }
                IRegisteredResource registeredResourcesCasted = item.As<IRegisteredResource>();
                if ((registeredResourcesCasted != null))
                {
                    this._parent.RegisteredResources.Add(registeredResourcesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ResourceGroupReqs.Clear();
                this._parent.RegisteredResources.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ResourceGroupReqs.Contains(item))
                {
                    return true;
                }
                if (this._parent.RegisteredResources.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> resourceGroupReqsEnumerator = this._parent.ResourceGroupReqs.GetEnumerator();
                try
                {
                    for (
                    ; resourceGroupReqsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = resourceGroupReqsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    resourceGroupReqsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> registeredResourcesEnumerator = this._parent.RegisteredResources.GetEnumerator();
                try
                {
                    for (
                    ; registeredResourcesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = registeredResourcesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    registeredResourcesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IResourceGroupReq resourceGroupReqItem = item.As<IResourceGroupReq>();
                if (((resourceGroupReqItem != null) 
                            && this._parent.ResourceGroupReqs.Remove(resourceGroupReqItem)))
                {
                    return true;
                }
                IRegisteredResource registeredResourceItem = item.As<IRegisteredResource>();
                if (((registeredResourceItem != null) 
                            && this._parent.RegisteredResources.Remove(registeredResourceItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ResourceGroupReqs).Concat(this._parent.RegisteredResources).GetEnumerator();
            }
        }
    }
}

