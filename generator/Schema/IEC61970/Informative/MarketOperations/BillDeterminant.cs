//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the BillDeterminant class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "BillDeterminant")]
    [DebuggerDisplayAttribute("BillDeterminant {UUID}")]
    public class BillDeterminant : Document, IBillDeterminant, IModelElement
    {
        
        /// <summary>
        /// The backing field for the PrecisionLevel property
        /// </summary>
        private string _precisionLevel;
        
        /// <summary>
        /// The backing field for the UnitOfMeasure property
        /// </summary>
        private string _unitOfMeasure;
        
        /// <summary>
        /// The backing field for the CalculationLevel property
        /// </summary>
        private string _calculationLevel;
        
        /// <summary>
        /// The backing field for the ConfigVersion property
        /// </summary>
        private string _configVersion;
        
        /// <summary>
        /// The backing field for the NumberInterval property
        /// </summary>
        private int _numberInterval;
        
        /// <summary>
        /// The backing field for the UserAttributes property
        /// </summary>
        private BillDeterminantUserAttributesCollection _userAttributes;
        
        /// <summary>
        /// The backing field for the ChargeProfileData property
        /// </summary>
        private BillDeterminantChargeProfileDataCollection _chargeProfileData;
        
        /// <summary>
        /// The backing field for the ChargeProfile property
        /// </summary>
        private IChargeProfile _chargeProfile;
        
        private static IClass _classInstance;
        
        public BillDeterminant()
        {
            this._userAttributes = new BillDeterminantUserAttributesCollection(this);
            this._userAttributes.CollectionChanging += this.UserAttributesCollectionChanging;
            this._userAttributes.CollectionChanged += this.UserAttributesCollectionChanged;
            this._chargeProfileData = new BillDeterminantChargeProfileDataCollection(this);
            this._chargeProfileData.CollectionChanging += this.ChargeProfileDataCollectionChanging;
            this._chargeProfileData.CollectionChanged += this.ChargeProfileDataCollectionChanged;
        }
        
        /// <summary>
        /// The precisionLevel property
        /// </summary>
        [XmlElementNameAttribute("precisionLevel")]
        [XmlAttributeAttribute(true)]
        public virtual string PrecisionLevel
        {
            get
            {
                return this._precisionLevel;
            }
            set
            {
                if ((this._precisionLevel != value))
                {
                    string old = this._precisionLevel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPrecisionLevelChanging(e);
                    this.OnPropertyChanging("PrecisionLevel", e);
                    this._precisionLevel = value;
                    this.OnPrecisionLevelChanged(e);
                    this.OnPropertyChanged("PrecisionLevel", e);
                }
            }
        }
        
        /// <summary>
        /// The unitOfMeasure property
        /// </summary>
        [XmlElementNameAttribute("unitOfMeasure")]
        [XmlAttributeAttribute(true)]
        public virtual string UnitOfMeasure
        {
            get
            {
                return this._unitOfMeasure;
            }
            set
            {
                if ((this._unitOfMeasure != value))
                {
                    string old = this._unitOfMeasure;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnitOfMeasureChanging(e);
                    this.OnPropertyChanging("UnitOfMeasure", e);
                    this._unitOfMeasure = value;
                    this.OnUnitOfMeasureChanged(e);
                    this.OnPropertyChanged("UnitOfMeasure", e);
                }
            }
        }
        
        /// <summary>
        /// The calculationLevel property
        /// </summary>
        [XmlElementNameAttribute("calculationLevel")]
        [XmlAttributeAttribute(true)]
        public virtual string CalculationLevel
        {
            get
            {
                return this._calculationLevel;
            }
            set
            {
                if ((this._calculationLevel != value))
                {
                    string old = this._calculationLevel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCalculationLevelChanging(e);
                    this.OnPropertyChanging("CalculationLevel", e);
                    this._calculationLevel = value;
                    this.OnCalculationLevelChanged(e);
                    this.OnPropertyChanged("CalculationLevel", e);
                }
            }
        }
        
        /// <summary>
        /// The configVersion property
        /// </summary>
        [XmlElementNameAttribute("configVersion")]
        [XmlAttributeAttribute(true)]
        public virtual string ConfigVersion
        {
            get
            {
                return this._configVersion;
            }
            set
            {
                if ((this._configVersion != value))
                {
                    string old = this._configVersion;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConfigVersionChanging(e);
                    this.OnPropertyChanging("ConfigVersion", e);
                    this._configVersion = value;
                    this.OnConfigVersionChanged(e);
                    this.OnPropertyChanged("ConfigVersion", e);
                }
            }
        }
        
        /// <summary>
        /// The numberInterval property
        /// </summary>
        [XmlElementNameAttribute("numberInterval")]
        [XmlAttributeAttribute(true)]
        public virtual int NumberInterval
        {
            get
            {
                return this._numberInterval;
            }
            set
            {
                if ((this._numberInterval != value))
                {
                    int old = this._numberInterval;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNumberIntervalChanging(e);
                    this.OnPropertyChanging("NumberInterval", e);
                    this._numberInterval = value;
                    this.OnNumberIntervalChanged(e);
                    this.OnPropertyChanged("NumberInterval", e);
                }
            }
        }
        
        /// <summary>
        /// The UserAttributes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("BillDeterminants")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IUserAttribute> UserAttributes
        {
            get
            {
                return this._userAttributes;
            }
        }
        
        /// <summary>
        /// The ChargeProfileData property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("BillDeterminant")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IChargeProfileData> ChargeProfileData
        {
            get
            {
                return this._chargeProfileData;
            }
        }
        
        /// <summary>
        /// The ChargeProfile property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("BillDeterminant")]
        public virtual IChargeProfile ChargeProfile
        {
            get
            {
                return this._chargeProfile;
            }
            set
            {
                if ((this._chargeProfile != value))
                {
                    IChargeProfile old = this._chargeProfile;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnChargeProfileChanging(e);
                    this.OnPropertyChanging("ChargeProfile", e);
                    this._chargeProfile = value;
                    if ((old != null))
                    {
                        old.BillDeterminant = null;
                        old.Deleted -= this.OnResetChargeProfile;
                    }
                    if ((value != null))
                    {
                        value.BillDeterminant = this;
                        value.Deleted += this.OnResetChargeProfile;
                    }
                    this.OnChargeProfileChanged(e);
                    this.OnPropertyChanged("ChargeProfile", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new BillDeterminantReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "BillDeterminant")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PrecisionLevel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PrecisionLevelChanging;
        
        /// <summary>
        /// Gets fired when the PrecisionLevel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PrecisionLevelChanged;
        
        /// <summary>
        /// Gets fired before the UnitOfMeasure property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitOfMeasureChanging;
        
        /// <summary>
        /// Gets fired when the UnitOfMeasure property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitOfMeasureChanged;
        
        /// <summary>
        /// Gets fired before the CalculationLevel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CalculationLevelChanging;
        
        /// <summary>
        /// Gets fired when the CalculationLevel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CalculationLevelChanged;
        
        /// <summary>
        /// Gets fired before the ConfigVersion property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConfigVersionChanging;
        
        /// <summary>
        /// Gets fired when the ConfigVersion property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConfigVersionChanged;
        
        /// <summary>
        /// Gets fired before the NumberInterval property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NumberIntervalChanging;
        
        /// <summary>
        /// Gets fired when the NumberInterval property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NumberIntervalChanged;
        
        /// <summary>
        /// Gets fired before the ChargeProfile property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChargeProfileChanging;
        
        /// <summary>
        /// Gets fired when the ChargeProfile property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChargeProfileChanged;
        
        /// <summary>
        /// Raises the PrecisionLevelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPrecisionLevelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PrecisionLevelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PrecisionLevelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPrecisionLevelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PrecisionLevelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnitOfMeasureChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitOfMeasureChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitOfMeasureChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnitOfMeasureChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitOfMeasureChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitOfMeasureChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CalculationLevelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCalculationLevelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CalculationLevelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CalculationLevelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCalculationLevelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CalculationLevelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConfigVersionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConfigVersionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConfigVersionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConfigVersionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConfigVersionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConfigVersionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NumberIntervalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberIntervalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NumberIntervalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NumberIntervalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberIntervalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NumberIntervalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the UserAttributes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UserAttributesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("UserAttributes", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the UserAttributes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UserAttributesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("UserAttributes", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ChargeProfileData property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChargeProfileDataCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ChargeProfileData", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ChargeProfileData property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChargeProfileDataCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ChargeProfileData", e);
        }
        
        /// <summary>
        /// Raises the ChargeProfileChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChargeProfileChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChargeProfileChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ChargeProfileChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChargeProfileChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChargeProfileChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ChargeProfile property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetChargeProfile(object sender, System.EventArgs eventArgs)
        {
            this.ChargeProfile = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PRECISIONLEVEL"))
            {
                return this.PrecisionLevel;
            }
            if ((attribute == "UNITOFMEASURE"))
            {
                return this.UnitOfMeasure;
            }
            if ((attribute == "CALCULATIONLEVEL"))
            {
                return this.CalculationLevel;
            }
            if ((attribute == "CONFIGVERSION"))
            {
                return this.ConfigVersion;
            }
            if ((attribute == "NUMBERINTERVAL"))
            {
                return this.NumberInterval;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "USERATTRIBUTES"))
            {
                return this._userAttributes;
            }
            if ((feature == "CHARGEPROFILEDATA"))
            {
                return this._chargeProfileData;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CHARGEPROFILE"))
            {
                this.ChargeProfile = ((IChargeProfile)(value));
                return;
            }
            if ((feature == "PRECISIONLEVEL"))
            {
                this.PrecisionLevel = ((string)(value));
                return;
            }
            if ((feature == "UNITOFMEASURE"))
            {
                this.UnitOfMeasure = ((string)(value));
                return;
            }
            if ((feature == "CALCULATIONLEVEL"))
            {
                this.CalculationLevel = ((string)(value));
                return;
            }
            if ((feature == "CONFIGVERSION"))
            {
                this.ConfigVersion = ((string)(value));
                return;
            }
            if ((feature == "NUMBERINTERVAL"))
            {
                this.NumberInterval = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ChargeProfile"))
            {
                return new ChargeProfileProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ChargeProfile"))
            {
                return new ChargeProfileProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "BillDeterminant")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the BillDeterminant class
        /// </summary>
        public class BillDeterminantReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private BillDeterminant _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BillDeterminantReferencedElementsCollection(BillDeterminant parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.UserAttributes.Count);
                    count = (count + this._parent.ChargeProfileData.Count);
                    if ((this._parent.ChargeProfile != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.UserAttributes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ChargeProfileData.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ChargeProfileChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.UserAttributes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ChargeProfileData.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ChargeProfileChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IUserAttribute userAttributesCasted = item.As<IUserAttribute>();
                if ((userAttributesCasted != null))
                {
                    this._parent.UserAttributes.Add(userAttributesCasted);
                }
                IChargeProfileData chargeProfileDataCasted = item.As<IChargeProfileData>();
                if ((chargeProfileDataCasted != null))
                {
                    this._parent.ChargeProfileData.Add(chargeProfileDataCasted);
                }
                if ((this._parent.ChargeProfile == null))
                {
                    IChargeProfile chargeProfileCasted = item.As<IChargeProfile>();
                    if ((chargeProfileCasted != null))
                    {
                        this._parent.ChargeProfile = chargeProfileCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.UserAttributes.Clear();
                this._parent.ChargeProfileData.Clear();
                this._parent.ChargeProfile = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.UserAttributes.Contains(item))
                {
                    return true;
                }
                if (this._parent.ChargeProfileData.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ChargeProfile))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> userAttributesEnumerator = this._parent.UserAttributes.GetEnumerator();
                try
                {
                    for (
                    ; userAttributesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = userAttributesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    userAttributesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> chargeProfileDataEnumerator = this._parent.ChargeProfileData.GetEnumerator();
                try
                {
                    for (
                    ; chargeProfileDataEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = chargeProfileDataEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    chargeProfileDataEnumerator.Dispose();
                }
                if ((this._parent.ChargeProfile != null))
                {
                    array[arrayIndex] = this._parent.ChargeProfile;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IUserAttribute userAttributeItem = item.As<IUserAttribute>();
                if (((userAttributeItem != null) 
                            && this._parent.UserAttributes.Remove(userAttributeItem)))
                {
                    return true;
                }
                IChargeProfileData chargeProfileDataItem = item.As<IChargeProfileData>();
                if (((chargeProfileDataItem != null) 
                            && this._parent.ChargeProfileData.Remove(chargeProfileDataItem)))
                {
                    return true;
                }
                if ((this._parent.ChargeProfile == item))
                {
                    this._parent.ChargeProfile = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.UserAttributes).Concat(this._parent.ChargeProfileData).Concat(this._parent.ChargeProfile).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the precisionLevel property
        /// </summary>
        private sealed class PrecisionLevelProxy : ModelPropertyChange<IBillDeterminant, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PrecisionLevelProxy(IBillDeterminant modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.PrecisionLevel;
                }
                set
                {
                    this.ModelElement.PrecisionLevel = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PrecisionLevelChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PrecisionLevelChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the unitOfMeasure property
        /// </summary>
        private sealed class UnitOfMeasureProxy : ModelPropertyChange<IBillDeterminant, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UnitOfMeasureProxy(IBillDeterminant modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.UnitOfMeasure;
                }
                set
                {
                    this.ModelElement.UnitOfMeasure = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UnitOfMeasureChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.UnitOfMeasureChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the calculationLevel property
        /// </summary>
        private sealed class CalculationLevelProxy : ModelPropertyChange<IBillDeterminant, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CalculationLevelProxy(IBillDeterminant modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.CalculationLevel;
                }
                set
                {
                    this.ModelElement.CalculationLevel = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CalculationLevelChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CalculationLevelChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the configVersion property
        /// </summary>
        private sealed class ConfigVersionProxy : ModelPropertyChange<IBillDeterminant, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConfigVersionProxy(IBillDeterminant modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ConfigVersion;
                }
                set
                {
                    this.ModelElement.ConfigVersion = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ConfigVersionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ConfigVersionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the numberInterval property
        /// </summary>
        private sealed class NumberIntervalProxy : ModelPropertyChange<IBillDeterminant, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NumberIntervalProxy(IBillDeterminant modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.NumberInterval;
                }
                set
                {
                    this.ModelElement.NumberInterval = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NumberIntervalChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NumberIntervalChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ChargeProfile property
        /// </summary>
        private sealed class ChargeProfileProxy : ModelPropertyChange<IBillDeterminant, IChargeProfile>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ChargeProfileProxy(IBillDeterminant modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IChargeProfile Value
            {
                get
                {
                    return this.ModelElement.ChargeProfile;
                }
                set
                {
                    this.ModelElement.ChargeProfile = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ChargeProfileChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ChargeProfileChanged -= handler;
            }
        }
    }
}

