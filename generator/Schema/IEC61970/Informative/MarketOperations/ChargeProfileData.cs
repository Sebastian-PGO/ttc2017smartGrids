//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the ChargeProfileData class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "ChargeProfileData")]
    [DebuggerDisplayAttribute("ChargeProfileData {UUID}")]
    public class ChargeProfileData : Element, IChargeProfileData, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Sequence property
        /// </summary>
        private int _sequence;
        
        /// <summary>
        /// The backing field for the TimeStamp property
        /// </summary>
        private DateTime _timeStamp;
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        private float _value;
        
        /// <summary>
        /// The backing field for the ChargeProfile property
        /// </summary>
        private IChargeProfile _chargeProfile;
        
        /// <summary>
        /// The backing field for the BillDeterminant property
        /// </summary>
        private IBillDeterminant _billDeterminant;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The sequence property
        /// </summary>
        [XmlElementNameAttribute("sequence")]
        [XmlAttributeAttribute(true)]
        public virtual int Sequence
        {
            get
            {
                return this._sequence;
            }
            set
            {
                if ((this._sequence != value))
                {
                    int old = this._sequence;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSequenceChanging(e);
                    this.OnPropertyChanging("Sequence", e);
                    this._sequence = value;
                    this.OnSequenceChanged(e);
                    this.OnPropertyChanged("Sequence", e);
                }
            }
        }
        
        /// <summary>
        /// The timeStamp property
        /// </summary>
        [XmlElementNameAttribute("timeStamp")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime TimeStamp
        {
            get
            {
                return this._timeStamp;
            }
            set
            {
                if ((this._timeStamp != value))
                {
                    DateTime old = this._timeStamp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeStampChanging(e);
                    this.OnPropertyChanging("TimeStamp", e);
                    this._timeStamp = value;
                    this.OnTimeStampChanged(e);
                    this.OnPropertyChanged("TimeStamp", e);
                }
            }
        }
        
        /// <summary>
        /// The value property
        /// </summary>
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public virtual float Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    float old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e);
                }
            }
        }
        
        /// <summary>
        /// The ChargeProfile property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ChargeProfileData")]
        public virtual IChargeProfile ChargeProfile
        {
            get
            {
                return this._chargeProfile;
            }
            set
            {
                if ((this._chargeProfile != value))
                {
                    IChargeProfile old = this._chargeProfile;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnChargeProfileChanging(e);
                    this.OnPropertyChanging("ChargeProfile", e);
                    this._chargeProfile = value;
                    if ((old != null))
                    {
                        old.ChargeProfileData.Remove(this);
                        old.Deleted -= this.OnResetChargeProfile;
                    }
                    if ((value != null))
                    {
                        value.ChargeProfileData.Add(this);
                        value.Deleted += this.OnResetChargeProfile;
                    }
                    this.OnChargeProfileChanged(e);
                    this.OnPropertyChanged("ChargeProfile", e);
                }
            }
        }
        
        /// <summary>
        /// The BillDeterminant property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ChargeProfileData")]
        public virtual IBillDeterminant BillDeterminant
        {
            get
            {
                return this._billDeterminant;
            }
            set
            {
                if ((this._billDeterminant != value))
                {
                    IBillDeterminant old = this._billDeterminant;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBillDeterminantChanging(e);
                    this.OnPropertyChanging("BillDeterminant", e);
                    this._billDeterminant = value;
                    if ((old != null))
                    {
                        old.ChargeProfileData.Remove(this);
                        old.Deleted -= this.OnResetBillDeterminant;
                    }
                    if ((value != null))
                    {
                        value.ChargeProfileData.Add(this);
                        value.Deleted += this.OnResetBillDeterminant;
                    }
                    this.OnBillDeterminantChanged(e);
                    this.OnPropertyChanged("BillDeterminant", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ChargeProfileDataReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "ChargeProfileData")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Sequence property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SequenceChanging;
        
        /// <summary>
        /// Gets fired when the Sequence property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SequenceChanged;
        
        /// <summary>
        /// Gets fired before the TimeStamp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeStampChanging;
        
        /// <summary>
        /// Gets fired when the TimeStamp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeStampChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanging;
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the ChargeProfile property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChargeProfileChanging;
        
        /// <summary>
        /// Gets fired when the ChargeProfile property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChargeProfileChanged;
        
        /// <summary>
        /// Gets fired before the BillDeterminant property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillDeterminantChanging;
        
        /// <summary>
        /// Gets fired when the BillDeterminant property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillDeterminantChanged;
        
        /// <summary>
        /// Raises the SequenceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSequenceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SequenceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SequenceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSequenceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SequenceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeStampChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeStampChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeStampChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeStampChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeStampChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeStampChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ChargeProfileChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChargeProfileChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChargeProfileChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ChargeProfileChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChargeProfileChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChargeProfileChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ChargeProfile property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetChargeProfile(object sender, System.EventArgs eventArgs)
        {
            this.ChargeProfile = null;
        }
        
        /// <summary>
        /// Raises the BillDeterminantChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillDeterminantChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillDeterminantChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BillDeterminantChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillDeterminantChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillDeterminantChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BillDeterminant property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBillDeterminant(object sender, System.EventArgs eventArgs)
        {
            this.BillDeterminant = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SEQUENCE"))
            {
                return this.Sequence;
            }
            if ((attribute == "TIMESTAMP"))
            {
                return this.TimeStamp;
            }
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CHARGEPROFILE"))
            {
                this.ChargeProfile = ((IChargeProfile)(value));
                return;
            }
            if ((feature == "BILLDETERMINANT"))
            {
                this.BillDeterminant = ((IBillDeterminant)(value));
                return;
            }
            if ((feature == "SEQUENCE"))
            {
                this.Sequence = ((int)(value));
                return;
            }
            if ((feature == "TIMESTAMP"))
            {
                this.TimeStamp = ((DateTime)(value));
                return;
            }
            if ((feature == "VALUE"))
            {
                this.Value = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ChargeProfile"))
            {
                return new ChargeProfileProxy(this);
            }
            if ((attribute == "BillDeterminant"))
            {
                return new BillDeterminantProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ChargeProfile"))
            {
                return new ChargeProfileProxy(this);
            }
            if ((reference == "BillDeterminant"))
            {
                return new BillDeterminantProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "ChargeProfileData")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ChargeProfileData class
        /// </summary>
        public class ChargeProfileDataReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ChargeProfileData _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ChargeProfileDataReferencedElementsCollection(ChargeProfileData parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ChargeProfile != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BillDeterminant != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ChargeProfileChanged += this.PropagateValueChanges;
                this._parent.BillDeterminantChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ChargeProfileChanged -= this.PropagateValueChanges;
                this._parent.BillDeterminantChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ChargeProfile == null))
                {
                    IChargeProfile chargeProfileCasted = item.As<IChargeProfile>();
                    if ((chargeProfileCasted != null))
                    {
                        this._parent.ChargeProfile = chargeProfileCasted;
                        return;
                    }
                }
                if ((this._parent.BillDeterminant == null))
                {
                    IBillDeterminant billDeterminantCasted = item.As<IBillDeterminant>();
                    if ((billDeterminantCasted != null))
                    {
                        this._parent.BillDeterminant = billDeterminantCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ChargeProfile = null;
                this._parent.BillDeterminant = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ChargeProfile))
                {
                    return true;
                }
                if ((item == this._parent.BillDeterminant))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ChargeProfile != null))
                {
                    array[arrayIndex] = this._parent.ChargeProfile;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BillDeterminant != null))
                {
                    array[arrayIndex] = this._parent.BillDeterminant;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ChargeProfile == item))
                {
                    this._parent.ChargeProfile = null;
                    return true;
                }
                if ((this._parent.BillDeterminant == item))
                {
                    this._parent.BillDeterminant = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ChargeProfile).Concat(this._parent.BillDeterminant).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sequence property
        /// </summary>
        private sealed class SequenceProxy : ModelPropertyChange<IChargeProfileData, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SequenceProxy(IChargeProfileData modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.Sequence;
                }
                set
                {
                    this.ModelElement.Sequence = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SequenceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SequenceChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the timeStamp property
        /// </summary>
        private sealed class TimeStampProxy : ModelPropertyChange<IChargeProfileData, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeStampProxy(IChargeProfileData modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.TimeStamp;
                }
                set
                {
                    this.ModelElement.TimeStamp = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TimeStampChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TimeStampChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IChargeProfileData, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IChargeProfileData modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ValueChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ValueChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ChargeProfile property
        /// </summary>
        private sealed class ChargeProfileProxy : ModelPropertyChange<IChargeProfileData, IChargeProfile>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ChargeProfileProxy(IChargeProfileData modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IChargeProfile Value
            {
                get
                {
                    return this.ModelElement.ChargeProfile;
                }
                set
                {
                    this.ModelElement.ChargeProfile = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ChargeProfileChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ChargeProfileChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BillDeterminant property
        /// </summary>
        private sealed class BillDeterminantProxy : ModelPropertyChange<IChargeProfileData, IBillDeterminant>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BillDeterminantProxy(IChargeProfileData modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBillDeterminant Value
            {
                get
                {
                    return this.ModelElement.BillDeterminant;
                }
                set
                {
                    this.ModelElement.BillDeterminant = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BillDeterminantChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BillDeterminantChanged -= handler;
            }
        }
    }
}

