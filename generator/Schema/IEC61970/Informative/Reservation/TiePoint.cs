//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation
{
    
    
    /// <summary>
    /// The default implementation of the TiePoint class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Reservation")]
    [XmlNamespacePrefixAttribute("cimReservation")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Reservation/TiePo" +
        "int")]
    [DebuggerDisplayAttribute("TiePoint {UUID}")]
    public class TiePoint : IdentifiedObject, ITiePoint, IModelElement
    {
        
        /// <summary>
        /// The backing field for the TiePointMWRating property
        /// </summary>
        private float _tiePointMWRating;
        
        /// <summary>
        /// The backing field for the By_Measurements property
        /// </summary>
        private TiePointBy_MeasurementsCollection _by_Measurements;
        
        /// <summary>
        /// The backing field for the Declared_ServicePoint property
        /// </summary>
        private IServicePoint _declared_ServicePoint;
        
        /// <summary>
        /// The backing field for the For_Measurements property
        /// </summary>
        private TiePointFor_MeasurementsCollection _for_Measurements;
        
        private static IClass _classInstance;
        
        public TiePoint()
        {
            this._by_Measurements = new TiePointBy_MeasurementsCollection(this);
            this._by_Measurements.CollectionChanging += this.By_MeasurementsCollectionChanging;
            this._by_Measurements.CollectionChanged += this.By_MeasurementsCollectionChanged;
            this._for_Measurements = new TiePointFor_MeasurementsCollection(this);
            this._for_Measurements.CollectionChanging += this.For_MeasurementsCollectionChanging;
            this._for_Measurements.CollectionChanged += this.For_MeasurementsCollectionChanged;
        }
        
        /// <summary>
        /// The tiePointMWRating property
        /// </summary>
        [XmlElementNameAttribute("tiePointMWRating")]
        [XmlAttributeAttribute(true)]
        public virtual float TiePointMWRating
        {
            get
            {
                return this._tiePointMWRating;
            }
            set
            {
                if ((this._tiePointMWRating != value))
                {
                    float old = this._tiePointMWRating;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTiePointMWRatingChanging(e);
                    this.OnPropertyChanging("TiePointMWRating", e);
                    this._tiePointMWRating = value;
                    this.OnTiePointMWRatingChanged(e);
                    this.OnPropertyChanged("TiePointMWRating", e);
                }
            }
        }
        
        /// <summary>
        /// The By_Measurements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("By_TiePoint")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMeasurement> By_Measurements
        {
            get
            {
                return this._by_Measurements;
            }
        }
        
        /// <summary>
        /// The Declared_ServicePoint property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Declare_TiePoint")]
        public virtual IServicePoint Declared_ServicePoint
        {
            get
            {
                return this._declared_ServicePoint;
            }
            set
            {
                if ((this._declared_ServicePoint != value))
                {
                    IServicePoint old = this._declared_ServicePoint;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDeclared_ServicePointChanging(e);
                    this.OnPropertyChanging("Declared_ServicePoint", e);
                    this._declared_ServicePoint = value;
                    if ((old != null))
                    {
                        old.Declare_TiePoint = null;
                        old.Deleted -= this.OnResetDeclared_ServicePoint;
                    }
                    if ((value != null))
                    {
                        value.Declare_TiePoint = this;
                        value.Deleted += this.OnResetDeclared_ServicePoint;
                    }
                    this.OnDeclared_ServicePointChanged(e);
                    this.OnPropertyChanged("Declared_ServicePoint", e);
                }
            }
        }
        
        /// <summary>
        /// The For_Measurements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("For_TiePoint")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMeasurement> For_Measurements
        {
            get
            {
                return this._for_Measurements;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TiePointReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Reservation/TiePo" +
                            "int")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the TiePointMWRating property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TiePointMWRatingChanging;
        
        /// <summary>
        /// Gets fired when the TiePointMWRating property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TiePointMWRatingChanged;
        
        /// <summary>
        /// Gets fired before the Declared_ServicePoint property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Declared_ServicePointChanging;
        
        /// <summary>
        /// Gets fired when the Declared_ServicePoint property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Declared_ServicePointChanged;
        
        /// <summary>
        /// Raises the TiePointMWRatingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTiePointMWRatingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TiePointMWRatingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TiePointMWRatingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTiePointMWRatingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TiePointMWRatingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the By_Measurements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void By_MeasurementsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("By_Measurements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the By_Measurements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void By_MeasurementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("By_Measurements", e);
        }
        
        /// <summary>
        /// Raises the Declared_ServicePointChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeclared_ServicePointChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Declared_ServicePointChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Declared_ServicePointChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeclared_ServicePointChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Declared_ServicePointChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Declared_ServicePoint property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDeclared_ServicePoint(object sender, System.EventArgs eventArgs)
        {
            this.Declared_ServicePoint = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the For_Measurements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void For_MeasurementsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("For_Measurements", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the For_Measurements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void For_MeasurementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("For_Measurements", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TIEPOINTMWRATING"))
            {
                return this.TiePointMWRating;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "BY_MEASUREMENTS"))
            {
                return this._by_Measurements;
            }
            if ((feature == "FOR_MEASUREMENTS"))
            {
                return this._for_Measurements;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DECLARED_SERVICEPOINT"))
            {
                this.Declared_ServicePoint = ((IServicePoint)(value));
                return;
            }
            if ((feature == "TIEPOINTMWRATING"))
            {
                this.TiePointMWRating = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Declared_ServicePoint"))
            {
                return new Declared_ServicePointProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Declared_ServicePoint"))
            {
                return new Declared_ServicePointProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Reservation/TiePo" +
                        "int")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TiePoint class
        /// </summary>
        public class TiePointReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TiePoint _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TiePointReferencedElementsCollection(TiePoint parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.By_Measurements.Count);
                    if ((this._parent.Declared_ServicePoint != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.For_Measurements.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.By_Measurements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Declared_ServicePointChanged += this.PropagateValueChanges;
                this._parent.For_Measurements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.By_Measurements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Declared_ServicePointChanged -= this.PropagateValueChanges;
                this._parent.For_Measurements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IMeasurement by_MeasurementsCasted = item.As<IMeasurement>();
                if ((by_MeasurementsCasted != null))
                {
                    this._parent.By_Measurements.Add(by_MeasurementsCasted);
                }
                if ((this._parent.Declared_ServicePoint == null))
                {
                    IServicePoint declared_ServicePointCasted = item.As<IServicePoint>();
                    if ((declared_ServicePointCasted != null))
                    {
                        this._parent.Declared_ServicePoint = declared_ServicePointCasted;
                        return;
                    }
                }
                IMeasurement for_MeasurementsCasted = item.As<IMeasurement>();
                if ((for_MeasurementsCasted != null))
                {
                    this._parent.For_Measurements.Add(for_MeasurementsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.By_Measurements.Clear();
                this._parent.Declared_ServicePoint = null;
                this._parent.For_Measurements.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.By_Measurements.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Declared_ServicePoint))
                {
                    return true;
                }
                if (this._parent.For_Measurements.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> by_MeasurementsEnumerator = this._parent.By_Measurements.GetEnumerator();
                try
                {
                    for (
                    ; by_MeasurementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = by_MeasurementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    by_MeasurementsEnumerator.Dispose();
                }
                if ((this._parent.Declared_ServicePoint != null))
                {
                    array[arrayIndex] = this._parent.Declared_ServicePoint;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> for_MeasurementsEnumerator = this._parent.For_Measurements.GetEnumerator();
                try
                {
                    for (
                    ; for_MeasurementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = for_MeasurementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    for_MeasurementsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IMeasurement measurementItem = item.As<IMeasurement>();
                if (((measurementItem != null) 
                            && this._parent.By_Measurements.Remove(measurementItem)))
                {
                    return true;
                }
                if ((this._parent.Declared_ServicePoint == item))
                {
                    this._parent.Declared_ServicePoint = null;
                    return true;
                }
                if (((measurementItem != null) 
                            && this._parent.For_Measurements.Remove(measurementItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.By_Measurements).Concat(this._parent.Declared_ServicePoint).Concat(this._parent.For_Measurements).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the tiePointMWRating property
        /// </summary>
        private sealed class TiePointMWRatingProxy : ModelPropertyChange<ITiePoint, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TiePointMWRatingProxy(ITiePoint modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TiePointMWRating;
                }
                set
                {
                    this.ModelElement.TiePointMWRating = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TiePointMWRatingChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TiePointMWRatingChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Declared_ServicePoint property
        /// </summary>
        private sealed class Declared_ServicePointProxy : ModelPropertyChange<ITiePoint, IServicePoint>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Declared_ServicePointProxy(ITiePoint modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IServicePoint Value
            {
                get
                {
                    return this.ModelElement.Declared_ServicePoint;
                }
                set
                {
                    this.ModelElement.Declared_ServicePoint = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Declared_ServicePointChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.Declared_ServicePointChanged -= handler;
            }
        }
    }
}

