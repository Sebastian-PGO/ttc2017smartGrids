//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation
{
    
    
    /// <summary>
    /// The default implementation of the ServicePoint class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Reservation")]
    [XmlNamespacePrefixAttribute("cimReservation")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Reservation/Servi" +
        "cePoint")]
    [DebuggerDisplayAttribute("ServicePoint {UUID}")]
    public partial class ServicePoint : IdentifiedObject, IServicePoint, IModelElement
    {
        
        private static Lazy<ITypedElement> _customerConsumerReference = new Lazy<ITypedElement>(RetrieveCustomerConsumerReference);
        
        /// <summary>
        /// The backing field for the CustomerConsumer property
        /// </summary>
        private ICustomerConsumer _customerConsumer;
        
        private static Lazy<ITypedElement> _transmissionProviderReference = new Lazy<ITypedElement>(RetrieveTransmissionProviderReference);
        
        /// <summary>
        /// The backing field for the TransmissionProvider property
        /// </summary>
        private ITransmissionProvider _transmissionProvider;
        
        private static Lazy<ITypedElement> _hasAPOR_Reference = new Lazy<ITypedElement>(RetrieveHasAPOR_Reference);
        
        /// <summary>
        /// The backing field for the HasAPOR_ property
        /// </summary>
        private ServicePointHasAPOR_Collection _hasAPOR_;
        
        private static Lazy<ITypedElement> _generationProviderReference = new Lazy<ITypedElement>(RetrieveGenerationProviderReference);
        
        /// <summary>
        /// The backing field for the GenerationProvider property
        /// </summary>
        private IGenerationProvider _generationProvider;
        
        private static Lazy<ITypedElement> _declare_TiePointReference = new Lazy<ITypedElement>(RetrieveDeclare_TiePointReference);
        
        /// <summary>
        /// The backing field for the Declare_TiePoint property
        /// </summary>
        private ITiePoint _declare_TiePoint;
        
        private static Lazy<ITypedElement> _hasAPOD_Reference = new Lazy<ITypedElement>(RetrieveHasAPOD_Reference);
        
        /// <summary>
        /// The backing field for the HasAPOD_ property
        /// </summary>
        private ServicePointHasAPOD_Collection _hasAPOD_;
        
        private static Lazy<ITypedElement> _energyProductsReference = new Lazy<ITypedElement>(RetrieveEnergyProductsReference);
        
        /// <summary>
        /// The backing field for the EnergyProducts property
        /// </summary>
        private ServicePointEnergyProductsCollection _energyProducts;
        
        private static Lazy<ITypedElement> _memberOfReference = new Lazy<ITypedElement>(RetrieveMemberOfReference);
        
        /// <summary>
        /// The backing field for the MemberOf property
        /// </summary>
        private ISubControlArea _memberOf;
        
        private static IClass _classInstance;
        
        public ServicePoint()
        {
            this._hasAPOR_ = new ServicePointHasAPOR_Collection(this);
            this._hasAPOR_.CollectionChanging += this.HasAPOR_CollectionChanging;
            this._hasAPOR_.CollectionChanged += this.HasAPOR_CollectionChanged;
            this._hasAPOD_ = new ServicePointHasAPOD_Collection(this);
            this._hasAPOD_.CollectionChanging += this.HasAPOD_CollectionChanging;
            this._hasAPOD_.CollectionChanged += this.HasAPOD_CollectionChanged;
            this._energyProducts = new ServicePointEnergyProductsCollection(this);
            this._energyProducts.CollectionChanging += this.EnergyProductsCollectionChanging;
            this._energyProducts.CollectionChanged += this.EnergyProductsCollectionChanged;
        }
        
        /// <summary>
        /// The CustomerConsumer property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ServicePoint")]
        public virtual ICustomerConsumer CustomerConsumer
        {
            get
            {
                return this._customerConsumer;
            }
            set
            {
                if ((this._customerConsumer != value))
                {
                    ICustomerConsumer old = this._customerConsumer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCustomerConsumerChanging(e);
                    this.OnPropertyChanging("CustomerConsumer", e, _customerConsumerReference);
                    this._customerConsumer = value;
                    if ((old != null))
                    {
                        old.ServicePoint.Remove(this);
                        old.Deleted -= this.OnResetCustomerConsumer;
                    }
                    if ((value != null))
                    {
                        value.ServicePoint.Add(this);
                        value.Deleted += this.OnResetCustomerConsumer;
                    }
                    this.OnCustomerConsumerChanged(e);
                    this.OnPropertyChanged("CustomerConsumer", e, _customerConsumerReference);
                }
            }
        }
        
        /// <summary>
        /// The TransmissionProvider property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ServicePoint")]
        public virtual ITransmissionProvider TransmissionProvider
        {
            get
            {
                return this._transmissionProvider;
            }
            set
            {
                if ((this._transmissionProvider != value))
                {
                    ITransmissionProvider old = this._transmissionProvider;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransmissionProviderChanging(e);
                    this.OnPropertyChanging("TransmissionProvider", e, _transmissionProviderReference);
                    this._transmissionProvider = value;
                    if ((old != null))
                    {
                        old.ServicePoint.Remove(this);
                        old.Deleted -= this.OnResetTransmissionProvider;
                    }
                    if ((value != null))
                    {
                        value.ServicePoint.Add(this);
                        value.Deleted += this.OnResetTransmissionProvider;
                    }
                    this.OnTransmissionProviderChanged(e);
                    this.OnPropertyChanged("TransmissionProvider", e, _transmissionProviderReference);
                }
            }
        }
        
        /// <summary>
        /// The HasAPOR_ property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PointOfReceiptFor")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransmissionPath> HasAPOR_
        {
            get
            {
                return this._hasAPOR_;
            }
        }
        
        /// <summary>
        /// The GenerationProvider property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ServicePoint")]
        public virtual IGenerationProvider GenerationProvider
        {
            get
            {
                return this._generationProvider;
            }
            set
            {
                if ((this._generationProvider != value))
                {
                    IGenerationProvider old = this._generationProvider;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGenerationProviderChanging(e);
                    this.OnPropertyChanging("GenerationProvider", e, _generationProviderReference);
                    this._generationProvider = value;
                    if ((old != null))
                    {
                        old.ServicePoint.Remove(this);
                        old.Deleted -= this.OnResetGenerationProvider;
                    }
                    if ((value != null))
                    {
                        value.ServicePoint.Add(this);
                        value.Deleted += this.OnResetGenerationProvider;
                    }
                    this.OnGenerationProviderChanged(e);
                    this.OnPropertyChanged("GenerationProvider", e, _generationProviderReference);
                }
            }
        }
        
        /// <summary>
        /// The Declare_TiePoint property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Declared_ServicePoint")]
        public virtual ITiePoint Declare_TiePoint
        {
            get
            {
                return this._declare_TiePoint;
            }
            set
            {
                if ((this._declare_TiePoint != value))
                {
                    ITiePoint old = this._declare_TiePoint;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDeclare_TiePointChanging(e);
                    this.OnPropertyChanging("Declare_TiePoint", e, _declare_TiePointReference);
                    this._declare_TiePoint = value;
                    if ((old != null))
                    {
                        old.Declared_ServicePoint = null;
                        old.Deleted -= this.OnResetDeclare_TiePoint;
                    }
                    if ((value != null))
                    {
                        value.Declared_ServicePoint = this;
                        value.Deleted += this.OnResetDeclare_TiePoint;
                    }
                    this.OnDeclare_TiePointChanged(e);
                    this.OnPropertyChanged("Declare_TiePoint", e, _declare_TiePointReference);
                }
            }
        }
        
        /// <summary>
        /// The HasAPOD_ property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("DeliveryPointFor")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransmissionPath> HasAPOD_
        {
            get
            {
                return this._hasAPOD_;
            }
        }
        
        /// <summary>
        /// The EnergyProducts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ServicePoint")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEnergyProduct> EnergyProducts
        {
            get
            {
                return this._energyProducts;
            }
        }
        
        /// <summary>
        /// The MemberOf property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PartOf")]
        public virtual ISubControlArea MemberOf
        {
            get
            {
                return this._memberOf;
            }
            set
            {
                if ((this._memberOf != value))
                {
                    ISubControlArea old = this._memberOf;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMemberOfChanging(e);
                    this.OnPropertyChanging("MemberOf", e, _memberOfReference);
                    this._memberOf = value;
                    if ((old != null))
                    {
                        old.PartOf.Remove(this);
                        old.Deleted -= this.OnResetMemberOf;
                    }
                    if ((value != null))
                    {
                        value.PartOf.Add(this);
                        value.Deleted += this.OnResetMemberOf;
                    }
                    this.OnMemberOfChanged(e);
                    this.OnPropertyChanged("MemberOf", e, _memberOfReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ServicePointReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Reservation/Servi" +
                            "cePoint")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the CustomerConsumer property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerConsumerChanging;
        
        /// <summary>
        /// Gets fired when the CustomerConsumer property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerConsumerChanged;
        
        /// <summary>
        /// Gets fired before the TransmissionProvider property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransmissionProviderChanging;
        
        /// <summary>
        /// Gets fired when the TransmissionProvider property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransmissionProviderChanged;
        
        /// <summary>
        /// Gets fired before the GenerationProvider property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GenerationProviderChanging;
        
        /// <summary>
        /// Gets fired when the GenerationProvider property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GenerationProviderChanged;
        
        /// <summary>
        /// Gets fired before the Declare_TiePoint property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Declare_TiePointChanging;
        
        /// <summary>
        /// Gets fired when the Declare_TiePoint property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Declare_TiePointChanged;
        
        /// <summary>
        /// Gets fired before the MemberOf property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MemberOfChanging;
        
        /// <summary>
        /// Gets fired when the MemberOf property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MemberOfChanged;
        
        private static ITypedElement RetrieveCustomerConsumerReference()
        {
            return ((ITypedElement)(((ModelElement)(ServicePoint.ClassInstance)).Resolve("CustomerConsumer")));
        }
        
        /// <summary>
        /// Raises the CustomerConsumerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerConsumerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerConsumerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CustomerConsumerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerConsumerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerConsumerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CustomerConsumer property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCustomerConsumer(object sender, System.EventArgs eventArgs)
        {
            this.CustomerConsumer = null;
        }
        
        private static ITypedElement RetrieveTransmissionProviderReference()
        {
            return ((ITypedElement)(((ModelElement)(ServicePoint.ClassInstance)).Resolve("TransmissionProvider")));
        }
        
        /// <summary>
        /// Raises the TransmissionProviderChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransmissionProviderChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransmissionProviderChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransmissionProviderChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransmissionProviderChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransmissionProviderChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TransmissionProvider property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTransmissionProvider(object sender, System.EventArgs eventArgs)
        {
            this.TransmissionProvider = null;
        }
        
        private static ITypedElement RetrieveHasAPOR_Reference()
        {
            return ((ITypedElement)(((ModelElement)(ServicePoint.ClassInstance)).Resolve("HasAPOR_")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the HasAPOR_ property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HasAPOR_CollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("HasAPOR_", e, _hasAPOR_Reference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the HasAPOR_ property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HasAPOR_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("HasAPOR_", e, _hasAPOR_Reference);
        }
        
        private static ITypedElement RetrieveGenerationProviderReference()
        {
            return ((ITypedElement)(((ModelElement)(ServicePoint.ClassInstance)).Resolve("GenerationProvider")));
        }
        
        /// <summary>
        /// Raises the GenerationProviderChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGenerationProviderChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GenerationProviderChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GenerationProviderChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGenerationProviderChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GenerationProviderChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GenerationProvider property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGenerationProvider(object sender, System.EventArgs eventArgs)
        {
            this.GenerationProvider = null;
        }
        
        private static ITypedElement RetrieveDeclare_TiePointReference()
        {
            return ((ITypedElement)(((ModelElement)(ServicePoint.ClassInstance)).Resolve("Declare_TiePoint")));
        }
        
        /// <summary>
        /// Raises the Declare_TiePointChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeclare_TiePointChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Declare_TiePointChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Declare_TiePointChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeclare_TiePointChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Declare_TiePointChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Declare_TiePoint property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDeclare_TiePoint(object sender, System.EventArgs eventArgs)
        {
            this.Declare_TiePoint = null;
        }
        
        private static ITypedElement RetrieveHasAPOD_Reference()
        {
            return ((ITypedElement)(((ModelElement)(ServicePoint.ClassInstance)).Resolve("HasAPOD_")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the HasAPOD_ property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HasAPOD_CollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("HasAPOD_", e, _hasAPOD_Reference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the HasAPOD_ property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HasAPOD_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("HasAPOD_", e, _hasAPOD_Reference);
        }
        
        private static ITypedElement RetrieveEnergyProductsReference()
        {
            return ((ITypedElement)(((ModelElement)(ServicePoint.ClassInstance)).Resolve("EnergyProducts")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EnergyProducts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EnergyProductsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("EnergyProducts", e, _energyProductsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EnergyProducts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EnergyProductsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EnergyProducts", e, _energyProductsReference);
        }
        
        private static ITypedElement RetrieveMemberOfReference()
        {
            return ((ITypedElement)(((ModelElement)(ServicePoint.ClassInstance)).Resolve("MemberOf")));
        }
        
        /// <summary>
        /// Raises the MemberOfChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMemberOfChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MemberOfChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MemberOfChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMemberOfChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MemberOfChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MemberOf property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMemberOf(object sender, System.EventArgs eventArgs)
        {
            this.MemberOf = null;
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "HASAPOR_"))
            {
                return this._hasAPOR_;
            }
            if ((feature == "HASAPOD_"))
            {
                return this._hasAPOD_;
            }
            if ((feature == "ENERGYPRODUCTS"))
            {
                return this._energyProducts;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CUSTOMERCONSUMER"))
            {
                this.CustomerConsumer = ((ICustomerConsumer)(value));
                return;
            }
            if ((feature == "TRANSMISSIONPROVIDER"))
            {
                this.TransmissionProvider = ((ITransmissionProvider)(value));
                return;
            }
            if ((feature == "GENERATIONPROVIDER"))
            {
                this.GenerationProvider = ((IGenerationProvider)(value));
                return;
            }
            if ((feature == "DECLARE_TIEPOINT"))
            {
                this.Declare_TiePoint = ((ITiePoint)(value));
                return;
            }
            if ((feature == "MEMBEROF"))
            {
                this.MemberOf = ((ISubControlArea)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CustomerConsumer"))
            {
                return new CustomerConsumerProxy(this);
            }
            if ((attribute == "TransmissionProvider"))
            {
                return new TransmissionProviderProxy(this);
            }
            if ((attribute == "GenerationProvider"))
            {
                return new GenerationProviderProxy(this);
            }
            if ((attribute == "Declare_TiePoint"))
            {
                return new Declare_TiePointProxy(this);
            }
            if ((attribute == "MemberOf"))
            {
                return new MemberOfProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CustomerConsumer"))
            {
                return new CustomerConsumerProxy(this);
            }
            if ((reference == "TransmissionProvider"))
            {
                return new TransmissionProviderProxy(this);
            }
            if ((reference == "GenerationProvider"))
            {
                return new GenerationProviderProxy(this);
            }
            if ((reference == "Declare_TiePoint"))
            {
                return new Declare_TiePointProxy(this);
            }
            if ((reference == "MemberOf"))
            {
                return new MemberOfProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Reservation/Servi" +
                        "cePoint")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ServicePoint class
        /// </summary>
        public class ServicePointReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ServicePoint _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ServicePointReferencedElementsCollection(ServicePoint parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.CustomerConsumer != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TransmissionProvider != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.HasAPOR_.Count);
                    if ((this._parent.GenerationProvider != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Declare_TiePoint != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.HasAPOD_.Count);
                    count = (count + this._parent.EnergyProducts.Count);
                    if ((this._parent.MemberOf != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CustomerConsumerChanged += this.PropagateValueChanges;
                this._parent.TransmissionProviderChanged += this.PropagateValueChanges;
                this._parent.HasAPOR_.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.GenerationProviderChanged += this.PropagateValueChanges;
                this._parent.Declare_TiePointChanged += this.PropagateValueChanges;
                this._parent.HasAPOD_.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.EnergyProducts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MemberOfChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CustomerConsumerChanged -= this.PropagateValueChanges;
                this._parent.TransmissionProviderChanged -= this.PropagateValueChanges;
                this._parent.HasAPOR_.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.GenerationProviderChanged -= this.PropagateValueChanges;
                this._parent.Declare_TiePointChanged -= this.PropagateValueChanges;
                this._parent.HasAPOD_.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.EnergyProducts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MemberOfChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.CustomerConsumer == null))
                {
                    ICustomerConsumer customerConsumerCasted = item.As<ICustomerConsumer>();
                    if ((customerConsumerCasted != null))
                    {
                        this._parent.CustomerConsumer = customerConsumerCasted;
                        return;
                    }
                }
                if ((this._parent.TransmissionProvider == null))
                {
                    ITransmissionProvider transmissionProviderCasted = item.As<ITransmissionProvider>();
                    if ((transmissionProviderCasted != null))
                    {
                        this._parent.TransmissionProvider = transmissionProviderCasted;
                        return;
                    }
                }
                ITransmissionPath hasAPOR_Casted = item.As<ITransmissionPath>();
                if ((hasAPOR_Casted != null))
                {
                    this._parent.HasAPOR_.Add(hasAPOR_Casted);
                }
                if ((this._parent.GenerationProvider == null))
                {
                    IGenerationProvider generationProviderCasted = item.As<IGenerationProvider>();
                    if ((generationProviderCasted != null))
                    {
                        this._parent.GenerationProvider = generationProviderCasted;
                        return;
                    }
                }
                if ((this._parent.Declare_TiePoint == null))
                {
                    ITiePoint declare_TiePointCasted = item.As<ITiePoint>();
                    if ((declare_TiePointCasted != null))
                    {
                        this._parent.Declare_TiePoint = declare_TiePointCasted;
                        return;
                    }
                }
                ITransmissionPath hasAPOD_Casted = item.As<ITransmissionPath>();
                if ((hasAPOD_Casted != null))
                {
                    this._parent.HasAPOD_.Add(hasAPOD_Casted);
                }
                IEnergyProduct energyProductsCasted = item.As<IEnergyProduct>();
                if ((energyProductsCasted != null))
                {
                    this._parent.EnergyProducts.Add(energyProductsCasted);
                }
                if ((this._parent.MemberOf == null))
                {
                    ISubControlArea memberOfCasted = item.As<ISubControlArea>();
                    if ((memberOfCasted != null))
                    {
                        this._parent.MemberOf = memberOfCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CustomerConsumer = null;
                this._parent.TransmissionProvider = null;
                this._parent.HasAPOR_.Clear();
                this._parent.GenerationProvider = null;
                this._parent.Declare_TiePoint = null;
                this._parent.HasAPOD_.Clear();
                this._parent.EnergyProducts.Clear();
                this._parent.MemberOf = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.CustomerConsumer))
                {
                    return true;
                }
                if ((item == this._parent.TransmissionProvider))
                {
                    return true;
                }
                if (this._parent.HasAPOR_.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.GenerationProvider))
                {
                    return true;
                }
                if ((item == this._parent.Declare_TiePoint))
                {
                    return true;
                }
                if (this._parent.HasAPOD_.Contains(item))
                {
                    return true;
                }
                if (this._parent.EnergyProducts.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.MemberOf))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.CustomerConsumer != null))
                {
                    array[arrayIndex] = this._parent.CustomerConsumer;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TransmissionProvider != null))
                {
                    array[arrayIndex] = this._parent.TransmissionProvider;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> hasAPOR_Enumerator = this._parent.HasAPOR_.GetEnumerator();
                try
                {
                    for (
                    ; hasAPOR_Enumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = hasAPOR_Enumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    hasAPOR_Enumerator.Dispose();
                }
                if ((this._parent.GenerationProvider != null))
                {
                    array[arrayIndex] = this._parent.GenerationProvider;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Declare_TiePoint != null))
                {
                    array[arrayIndex] = this._parent.Declare_TiePoint;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> hasAPOD_Enumerator = this._parent.HasAPOD_.GetEnumerator();
                try
                {
                    for (
                    ; hasAPOD_Enumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = hasAPOD_Enumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    hasAPOD_Enumerator.Dispose();
                }
                IEnumerator<IModelElement> energyProductsEnumerator = this._parent.EnergyProducts.GetEnumerator();
                try
                {
                    for (
                    ; energyProductsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = energyProductsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    energyProductsEnumerator.Dispose();
                }
                if ((this._parent.MemberOf != null))
                {
                    array[arrayIndex] = this._parent.MemberOf;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.CustomerConsumer == item))
                {
                    this._parent.CustomerConsumer = null;
                    return true;
                }
                if ((this._parent.TransmissionProvider == item))
                {
                    this._parent.TransmissionProvider = null;
                    return true;
                }
                ITransmissionPath transmissionPathItem = item.As<ITransmissionPath>();
                if (((transmissionPathItem != null) 
                            && this._parent.HasAPOR_.Remove(transmissionPathItem)))
                {
                    return true;
                }
                if ((this._parent.GenerationProvider == item))
                {
                    this._parent.GenerationProvider = null;
                    return true;
                }
                if ((this._parent.Declare_TiePoint == item))
                {
                    this._parent.Declare_TiePoint = null;
                    return true;
                }
                if (((transmissionPathItem != null) 
                            && this._parent.HasAPOD_.Remove(transmissionPathItem)))
                {
                    return true;
                }
                IEnergyProduct energyProductItem = item.As<IEnergyProduct>();
                if (((energyProductItem != null) 
                            && this._parent.EnergyProducts.Remove(energyProductItem)))
                {
                    return true;
                }
                if ((this._parent.MemberOf == item))
                {
                    this._parent.MemberOf = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CustomerConsumer).Concat(this._parent.TransmissionProvider).Concat(this._parent.HasAPOR_).Concat(this._parent.GenerationProvider).Concat(this._parent.Declare_TiePoint).Concat(this._parent.HasAPOD_).Concat(this._parent.EnergyProducts).Concat(this._parent.MemberOf).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CustomerConsumer property
        /// </summary>
        private sealed class CustomerConsumerProxy : ModelPropertyChange<IServicePoint, ICustomerConsumer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CustomerConsumerProxy(IServicePoint modelElement) : 
                    base(modelElement, "CustomerConsumer")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICustomerConsumer Value
            {
                get
                {
                    return this.ModelElement.CustomerConsumer;
                }
                set
                {
                    this.ModelElement.CustomerConsumer = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TransmissionProvider property
        /// </summary>
        private sealed class TransmissionProviderProxy : ModelPropertyChange<IServicePoint, ITransmissionProvider>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransmissionProviderProxy(IServicePoint modelElement) : 
                    base(modelElement, "TransmissionProvider")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITransmissionProvider Value
            {
                get
                {
                    return this.ModelElement.TransmissionProvider;
                }
                set
                {
                    this.ModelElement.TransmissionProvider = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GenerationProvider property
        /// </summary>
        private sealed class GenerationProviderProxy : ModelPropertyChange<IServicePoint, IGenerationProvider>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GenerationProviderProxy(IServicePoint modelElement) : 
                    base(modelElement, "GenerationProvider")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGenerationProvider Value
            {
                get
                {
                    return this.ModelElement.GenerationProvider;
                }
                set
                {
                    this.ModelElement.GenerationProvider = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Declare_TiePoint property
        /// </summary>
        private sealed class Declare_TiePointProxy : ModelPropertyChange<IServicePoint, ITiePoint>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Declare_TiePointProxy(IServicePoint modelElement) : 
                    base(modelElement, "Declare_TiePoint")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITiePoint Value
            {
                get
                {
                    return this.ModelElement.Declare_TiePoint;
                }
                set
                {
                    this.ModelElement.Declare_TiePoint = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MemberOf property
        /// </summary>
        private sealed class MemberOfProxy : ModelPropertyChange<IServicePoint, ISubControlArea>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MemberOfProxy(IServicePoint modelElement) : 
                    base(modelElement, "MemberOf")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISubControlArea Value
            {
                get
                {
                    return this.ModelElement.MemberOf;
                }
                set
                {
                    this.ModelElement.MemberOf = value;
                }
            }
        }
    }
}

