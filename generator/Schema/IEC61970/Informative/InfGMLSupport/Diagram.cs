//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport
{
    
    
    /// <summary>
    /// The default implementation of the Diagram class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfGMLSupport")]
    [XmlNamespacePrefixAttribute("cimInfGMLSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Dia" +
        "gram")]
    [DebuggerDisplayAttribute("Diagram {UUID}")]
    public class Diagram : Document, IDiagram, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Kind property
        /// </summary>
        private Nullable<DiagramKind> _kind;
        
        /// <summary>
        /// The backing field for the CoordinateSystem property
        /// </summary>
        private ICoordinateSystem _coordinateSystem;
        
        /// <summary>
        /// The backing field for the GmlDiagramObjects property
        /// </summary>
        private DiagramGmlDiagramObjectsCollection _gmlDiagramObjects;
        
        /// <summary>
        /// The backing field for the DesignLocations property
        /// </summary>
        private DiagramDesignLocationsCollection _designLocations;
        
        private static IClass _classInstance;
        
        public Diagram()
        {
            this._gmlDiagramObjects = new DiagramGmlDiagramObjectsCollection(this);
            this._gmlDiagramObjects.CollectionChanging += this.GmlDiagramObjectsCollectionChanging;
            this._gmlDiagramObjects.CollectionChanged += this.GmlDiagramObjectsCollectionChanged;
            this._designLocations = new DiagramDesignLocationsCollection(this);
            this._designLocations.CollectionChanging += this.DesignLocationsCollectionChanging;
            this._designLocations.CollectionChanged += this.DesignLocationsCollectionChanged;
        }
        
        /// <summary>
        /// The kind property
        /// </summary>
        [XmlElementNameAttribute("kind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<DiagramKind> Kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                if ((this._kind != value))
                {
                    Nullable<DiagramKind> old = this._kind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKindChanging(e);
                    this.OnPropertyChanging("Kind", e);
                    this._kind = value;
                    this.OnKindChanged(e);
                    this.OnPropertyChanged("Kind", e);
                }
            }
        }
        
        /// <summary>
        /// The CoordinateSystem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Diagrams")]
        public virtual ICoordinateSystem CoordinateSystem
        {
            get
            {
                return this._coordinateSystem;
            }
            set
            {
                if ((this._coordinateSystem != value))
                {
                    ICoordinateSystem old = this._coordinateSystem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCoordinateSystemChanging(e);
                    this.OnPropertyChanging("CoordinateSystem", e);
                    this._coordinateSystem = value;
                    if ((old != null))
                    {
                        old.Diagrams.Remove(this);
                        old.Deleted -= this.OnResetCoordinateSystem;
                    }
                    if ((value != null))
                    {
                        value.Diagrams.Add(this);
                        value.Deleted += this.OnResetCoordinateSystem;
                    }
                    this.OnCoordinateSystemChanged(e);
                    this.OnPropertyChanged("CoordinateSystem", e);
                }
            }
        }
        
        /// <summary>
        /// The GmlDiagramObjects property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Diagrams")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGmlDiagramObject> GmlDiagramObjects
        {
            get
            {
                return this._gmlDiagramObjects;
            }
        }
        
        /// <summary>
        /// The DesignLocations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Diagrams")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDesignLocation> DesignLocations
        {
            get
            {
                return this._designLocations;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new DiagramReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Dia" +
                            "gram")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        /// <summary>
        /// Gets fired before the CoordinateSystem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoordinateSystemChanging;
        
        /// <summary>
        /// Gets fired when the CoordinateSystem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoordinateSystemChanged;
        
        /// <summary>
        /// Raises the KindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CoordinateSystemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoordinateSystemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoordinateSystemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CoordinateSystemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoordinateSystemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoordinateSystemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CoordinateSystem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCoordinateSystem(object sender, System.EventArgs eventArgs)
        {
            this.CoordinateSystem = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GmlDiagramObjects property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlDiagramObjectsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("GmlDiagramObjects", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GmlDiagramObjects property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlDiagramObjectsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GmlDiagramObjects", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DesignLocations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DesignLocationsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("DesignLocations", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DesignLocations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DesignLocationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DesignLocations", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "KIND"))
            {
                return this.Kind;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "GMLDIAGRAMOBJECTS"))
            {
                return this._gmlDiagramObjects;
            }
            if ((feature == "DESIGNLOCATIONS"))
            {
                return this._designLocations;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "COORDINATESYSTEM"))
            {
                this.CoordinateSystem = ((ICoordinateSystem)(value));
                return;
            }
            if ((feature == "KIND"))
            {
                this.Kind = ((DiagramKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CoordinateSystem"))
            {
                return new CoordinateSystemProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CoordinateSystem"))
            {
                return new CoordinateSystemProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Dia" +
                        "gram")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Diagram class
        /// </summary>
        public class DiagramReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Diagram _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public DiagramReferencedElementsCollection(Diagram parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.CoordinateSystem != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.GmlDiagramObjects.Count);
                    count = (count + this._parent.DesignLocations.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CoordinateSystemChanged += this.PropagateValueChanges;
                this._parent.GmlDiagramObjects.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DesignLocations.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CoordinateSystemChanged -= this.PropagateValueChanges;
                this._parent.GmlDiagramObjects.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DesignLocations.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.CoordinateSystem == null))
                {
                    ICoordinateSystem coordinateSystemCasted = item.As<ICoordinateSystem>();
                    if ((coordinateSystemCasted != null))
                    {
                        this._parent.CoordinateSystem = coordinateSystemCasted;
                        return;
                    }
                }
                IGmlDiagramObject gmlDiagramObjectsCasted = item.As<IGmlDiagramObject>();
                if ((gmlDiagramObjectsCasted != null))
                {
                    this._parent.GmlDiagramObjects.Add(gmlDiagramObjectsCasted);
                }
                IDesignLocation designLocationsCasted = item.As<IDesignLocation>();
                if ((designLocationsCasted != null))
                {
                    this._parent.DesignLocations.Add(designLocationsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CoordinateSystem = null;
                this._parent.GmlDiagramObjects.Clear();
                this._parent.DesignLocations.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.CoordinateSystem))
                {
                    return true;
                }
                if (this._parent.GmlDiagramObjects.Contains(item))
                {
                    return true;
                }
                if (this._parent.DesignLocations.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.CoordinateSystem != null))
                {
                    array[arrayIndex] = this._parent.CoordinateSystem;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> gmlDiagramObjectsEnumerator = this._parent.GmlDiagramObjects.GetEnumerator();
                try
                {
                    for (
                    ; gmlDiagramObjectsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = gmlDiagramObjectsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    gmlDiagramObjectsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> designLocationsEnumerator = this._parent.DesignLocations.GetEnumerator();
                try
                {
                    for (
                    ; designLocationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = designLocationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    designLocationsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.CoordinateSystem == item))
                {
                    this._parent.CoordinateSystem = null;
                    return true;
                }
                IGmlDiagramObject gmlDiagramObjectItem = item.As<IGmlDiagramObject>();
                if (((gmlDiagramObjectItem != null) 
                            && this._parent.GmlDiagramObjects.Remove(gmlDiagramObjectItem)))
                {
                    return true;
                }
                IDesignLocation designLocationItem = item.As<IDesignLocation>();
                if (((designLocationItem != null) 
                            && this._parent.DesignLocations.Remove(designLocationItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CoordinateSystem).Concat(this._parent.GmlDiagramObjects).Concat(this._parent.DesignLocations).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kind property
        /// </summary>
        private sealed class KindProxy : ModelPropertyChange<IDiagram, Nullable<DiagramKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KindProxy(IDiagram modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<DiagramKind> Value
            {
                get
                {
                    return this.ModelElement.Kind;
                }
                set
                {
                    this.ModelElement.Kind = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.KindChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.KindChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CoordinateSystem property
        /// </summary>
        private sealed class CoordinateSystemProxy : ModelPropertyChange<IDiagram, ICoordinateSystem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CoordinateSystemProxy(IDiagram modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICoordinateSystem Value
            {
                get
                {
                    return this.ModelElement.CoordinateSystem;
                }
                set
                {
                    this.ModelElement.CoordinateSystem = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CoordinateSystemChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CoordinateSystemChanged -= handler;
            }
        }
    }
}

