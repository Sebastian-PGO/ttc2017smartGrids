//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport
{
    
    
    /// <summary>
    /// The default implementation of the Map class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfGMLSupport")]
    [XmlNamespacePrefixAttribute("cimInfGMLSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Map" +
        "")]
    [DebuggerDisplayAttribute("Map {UUID}")]
    public partial class Map : Diagram, IMap, IModelElement
    {
        
        /// <summary>
        /// The backing field for the MapLocGrid property
        /// </summary>
        private string _mapLocGrid;
        
        private static Lazy<ITypedElement> _mapLocGridAttribute = new Lazy<ITypedElement>(RetrieveMapLocGridAttribute);
        
        /// <summary>
        /// The backing field for the PageNumber property
        /// </summary>
        private int _pageNumber;
        
        private static Lazy<ITypedElement> _pageNumberAttribute = new Lazy<ITypedElement>(RetrievePageNumberAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The mapLocGrid property
        /// </summary>
        [XmlElementNameAttribute("mapLocGrid")]
        [XmlAttributeAttribute(true)]
        public virtual string MapLocGrid
        {
            get
            {
                return this._mapLocGrid;
            }
            set
            {
                if ((this._mapLocGrid != value))
                {
                    string old = this._mapLocGrid;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMapLocGridChanging(e);
                    this.OnPropertyChanging("MapLocGrid", e, _mapLocGridAttribute);
                    this._mapLocGrid = value;
                    this.OnMapLocGridChanged(e);
                    this.OnPropertyChanged("MapLocGrid", e, _mapLocGridAttribute);
                }
            }
        }
        
        /// <summary>
        /// The pageNumber property
        /// </summary>
        [XmlElementNameAttribute("pageNumber")]
        [XmlAttributeAttribute(true)]
        public virtual int PageNumber
        {
            get
            {
                return this._pageNumber;
            }
            set
            {
                if ((this._pageNumber != value))
                {
                    int old = this._pageNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPageNumberChanging(e);
                    this.OnPropertyChanging("PageNumber", e, _pageNumberAttribute);
                    this._pageNumber = value;
                    this.OnPageNumberChanged(e);
                    this.OnPropertyChanged("PageNumber", e, _pageNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Map" +
                            "")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the MapLocGrid property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MapLocGridChanging;
        
        /// <summary>
        /// Gets fired when the MapLocGrid property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MapLocGridChanged;
        
        /// <summary>
        /// Gets fired before the PageNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PageNumberChanging;
        
        /// <summary>
        /// Gets fired when the PageNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PageNumberChanged;
        
        private static ITypedElement RetrieveMapLocGridAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Map.ClassInstance)).Resolve("mapLocGrid")));
        }
        
        /// <summary>
        /// Raises the MapLocGridChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMapLocGridChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MapLocGridChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MapLocGridChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMapLocGridChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MapLocGridChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePageNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Map.ClassInstance)).Resolve("pageNumber")));
        }
        
        /// <summary>
        /// Raises the PageNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPageNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PageNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PageNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPageNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PageNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MAPLOCGRID"))
            {
                return this.MapLocGrid;
            }
            if ((attribute == "PAGENUMBER"))
            {
                return this.PageNumber;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MAPLOCGRID"))
            {
                this.MapLocGrid = ((string)(value));
                return;
            }
            if ((feature == "PAGENUMBER"))
            {
                this.PageNumber = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Map" +
                        "")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the mapLocGrid property
        /// </summary>
        private sealed class MapLocGridProxy : ModelPropertyChange<IMap, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MapLocGridProxy(IMap modelElement) : 
                    base(modelElement, "mapLocGrid")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.MapLocGrid;
                }
                set
                {
                    this.ModelElement.MapLocGrid = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pageNumber property
        /// </summary>
        private sealed class PageNumberProxy : ModelPropertyChange<IMap, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PageNumberProxy(IMap modelElement) : 
                    base(modelElement, "pageNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.PageNumber;
                }
                set
                {
                    this.ModelElement.PageNumber = value;
                }
            }
        }
    }
}

