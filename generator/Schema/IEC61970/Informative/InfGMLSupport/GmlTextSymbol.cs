//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport
{
    
    
    /// <summary>
    /// The default implementation of the GmlTextSymbol class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfGMLSupport")]
    [XmlNamespacePrefixAttribute("cimInfGMLSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
        "TextSymbol")]
    [DebuggerDisplayAttribute("GmlTextSymbol {UUID}")]
    public class GmlTextSymbol : GmlSymbol, IGmlTextSymbol, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Property property
        /// </summary>
        private string _property;
        
        /// <summary>
        /// The backing field for the Label property
        /// </summary>
        private string _label;
        
        /// <summary>
        /// The backing field for the MinFontSize property
        /// </summary>
        private int _minFontSize;
        
        /// <summary>
        /// The backing field for the FieldID property
        /// </summary>
        private string _fieldID;
        
        /// <summary>
        /// The backing field for the LabelType property
        /// </summary>
        private string _labelType;
        
        /// <summary>
        /// The backing field for the GmlHalo property
        /// </summary>
        private IGmlHalo _gmlHalo;
        
        /// <summary>
        /// The backing field for the GmlFont property
        /// </summary>
        private IGmlFont _gmlFont;
        
        /// <summary>
        /// The backing field for the GmlFill property
        /// </summary>
        private IGmlFill _gmlFill;
        
        /// <summary>
        /// The backing field for the GmlDiagramObject property
        /// </summary>
        private IGmlDiagramObject _gmlDiagramObject;
        
        /// <summary>
        /// The backing field for the GmlLabelPlacement property
        /// </summary>
        private IGmlLabelPlacement _gmlLabelPlacement;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The property property
        /// </summary>
        [XmlElementNameAttribute("property")]
        [XmlAttributeAttribute(true)]
        public virtual string Property
        {
            get
            {
                return this._property;
            }
            set
            {
                if ((this._property != value))
                {
                    string old = this._property;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyChanging(e);
                    this.OnPropertyChanging("Property", e);
                    this._property = value;
                    this.OnPropertyChanged(e);
                    this.OnPropertyChanged("Property", e);
                }
            }
        }
        
        /// <summary>
        /// The label property
        /// </summary>
        [XmlElementNameAttribute("label")]
        [XmlAttributeAttribute(true)]
        public virtual string Label
        {
            get
            {
                return this._label;
            }
            set
            {
                if ((this._label != value))
                {
                    string old = this._label;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLabelChanging(e);
                    this.OnPropertyChanging("Label", e);
                    this._label = value;
                    this.OnLabelChanged(e);
                    this.OnPropertyChanged("Label", e);
                }
            }
        }
        
        /// <summary>
        /// The minFontSize property
        /// </summary>
        [XmlElementNameAttribute("minFontSize")]
        [XmlAttributeAttribute(true)]
        public virtual int MinFontSize
        {
            get
            {
                return this._minFontSize;
            }
            set
            {
                if ((this._minFontSize != value))
                {
                    int old = this._minFontSize;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinFontSizeChanging(e);
                    this.OnPropertyChanging("MinFontSize", e);
                    this._minFontSize = value;
                    this.OnMinFontSizeChanged(e);
                    this.OnPropertyChanged("MinFontSize", e);
                }
            }
        }
        
        /// <summary>
        /// The fieldID property
        /// </summary>
        [XmlElementNameAttribute("fieldID")]
        [XmlAttributeAttribute(true)]
        public virtual string FieldID
        {
            get
            {
                return this._fieldID;
            }
            set
            {
                if ((this._fieldID != value))
                {
                    string old = this._fieldID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFieldIDChanging(e);
                    this.OnPropertyChanging("FieldID", e);
                    this._fieldID = value;
                    this.OnFieldIDChanged(e);
                    this.OnPropertyChanged("FieldID", e);
                }
            }
        }
        
        /// <summary>
        /// The labelType property
        /// </summary>
        [XmlElementNameAttribute("labelType")]
        [XmlAttributeAttribute(true)]
        public virtual string LabelType
        {
            get
            {
                return this._labelType;
            }
            set
            {
                if ((this._labelType != value))
                {
                    string old = this._labelType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLabelTypeChanging(e);
                    this.OnPropertyChanging("LabelType", e);
                    this._labelType = value;
                    this.OnLabelTypeChanged(e);
                    this.OnPropertyChanged("LabelType", e);
                }
            }
        }
        
        /// <summary>
        /// The GmlHalo property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlTextSymbols")]
        public virtual IGmlHalo GmlHalo
        {
            get
            {
                return this._gmlHalo;
            }
            set
            {
                if ((this._gmlHalo != value))
                {
                    IGmlHalo old = this._gmlHalo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGmlHaloChanging(e);
                    this.OnPropertyChanging("GmlHalo", e);
                    this._gmlHalo = value;
                    if ((old != null))
                    {
                        old.GmlTextSymbols.Remove(this);
                        old.Deleted -= this.OnResetGmlHalo;
                    }
                    if ((value != null))
                    {
                        value.GmlTextSymbols.Add(this);
                        value.Deleted += this.OnResetGmlHalo;
                    }
                    this.OnGmlHaloChanged(e);
                    this.OnPropertyChanged("GmlHalo", e);
                }
            }
        }
        
        /// <summary>
        /// The GmlFont property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlTextSymbols")]
        public virtual IGmlFont GmlFont
        {
            get
            {
                return this._gmlFont;
            }
            set
            {
                if ((this._gmlFont != value))
                {
                    IGmlFont old = this._gmlFont;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGmlFontChanging(e);
                    this.OnPropertyChanging("GmlFont", e);
                    this._gmlFont = value;
                    if ((old != null))
                    {
                        old.GmlTextSymbols.Remove(this);
                        old.Deleted -= this.OnResetGmlFont;
                    }
                    if ((value != null))
                    {
                        value.GmlTextSymbols.Add(this);
                        value.Deleted += this.OnResetGmlFont;
                    }
                    this.OnGmlFontChanged(e);
                    this.OnPropertyChanged("GmlFont", e);
                }
            }
        }
        
        /// <summary>
        /// The GmlFill property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlTextSymbols")]
        public virtual IGmlFill GmlFill
        {
            get
            {
                return this._gmlFill;
            }
            set
            {
                if ((this._gmlFill != value))
                {
                    IGmlFill old = this._gmlFill;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGmlFillChanging(e);
                    this.OnPropertyChanging("GmlFill", e);
                    this._gmlFill = value;
                    if ((old != null))
                    {
                        old.GmlTextSymbols.Remove(this);
                        old.Deleted -= this.OnResetGmlFill;
                    }
                    if ((value != null))
                    {
                        value.GmlTextSymbols.Add(this);
                        value.Deleted += this.OnResetGmlFill;
                    }
                    this.OnGmlFillChanged(e);
                    this.OnPropertyChanged("GmlFill", e);
                }
            }
        }
        
        /// <summary>
        /// The GmlDiagramObject property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlTextSymbols")]
        public virtual IGmlDiagramObject GmlDiagramObject
        {
            get
            {
                return this._gmlDiagramObject;
            }
            set
            {
                if ((this._gmlDiagramObject != value))
                {
                    IGmlDiagramObject old = this._gmlDiagramObject;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGmlDiagramObjectChanging(e);
                    this.OnPropertyChanging("GmlDiagramObject", e);
                    this._gmlDiagramObject = value;
                    if ((old != null))
                    {
                        old.GmlTextSymbols.Remove(this);
                        old.Deleted -= this.OnResetGmlDiagramObject;
                    }
                    if ((value != null))
                    {
                        value.GmlTextSymbols.Add(this);
                        value.Deleted += this.OnResetGmlDiagramObject;
                    }
                    this.OnGmlDiagramObjectChanged(e);
                    this.OnPropertyChanged("GmlDiagramObject", e);
                }
            }
        }
        
        /// <summary>
        /// The GmlLabelPlacement property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlTextSymbols")]
        public virtual IGmlLabelPlacement GmlLabelPlacement
        {
            get
            {
                return this._gmlLabelPlacement;
            }
            set
            {
                if ((this._gmlLabelPlacement != value))
                {
                    IGmlLabelPlacement old = this._gmlLabelPlacement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGmlLabelPlacementChanging(e);
                    this.OnPropertyChanging("GmlLabelPlacement", e);
                    this._gmlLabelPlacement = value;
                    if ((old != null))
                    {
                        old.GmlTextSymbols.Remove(this);
                        old.Deleted -= this.OnResetGmlLabelPlacement;
                    }
                    if ((value != null))
                    {
                        value.GmlTextSymbols.Add(this);
                        value.Deleted += this.OnResetGmlLabelPlacement;
                    }
                    this.OnGmlLabelPlacementChanged(e);
                    this.OnPropertyChanged("GmlLabelPlacement", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new GmlTextSymbolReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
                            "TextSymbol")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Property property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PropertyChanging;
        
        /// <summary>
        /// Gets fired when the Property property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PropertyChanged;
        
        /// <summary>
        /// Gets fired before the Label property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LabelChanging;
        
        /// <summary>
        /// Gets fired when the Label property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LabelChanged;
        
        /// <summary>
        /// Gets fired before the MinFontSize property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinFontSizeChanging;
        
        /// <summary>
        /// Gets fired when the MinFontSize property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinFontSizeChanged;
        
        /// <summary>
        /// Gets fired before the FieldID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FieldIDChanging;
        
        /// <summary>
        /// Gets fired when the FieldID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FieldIDChanged;
        
        /// <summary>
        /// Gets fired before the LabelType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LabelTypeChanging;
        
        /// <summary>
        /// Gets fired when the LabelType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LabelTypeChanged;
        
        /// <summary>
        /// Gets fired before the GmlHalo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlHaloChanging;
        
        /// <summary>
        /// Gets fired when the GmlHalo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlHaloChanged;
        
        /// <summary>
        /// Gets fired before the GmlFont property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlFontChanging;
        
        /// <summary>
        /// Gets fired when the GmlFont property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlFontChanged;
        
        /// <summary>
        /// Gets fired before the GmlFill property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlFillChanging;
        
        /// <summary>
        /// Gets fired when the GmlFill property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlFillChanged;
        
        /// <summary>
        /// Gets fired before the GmlDiagramObject property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlDiagramObjectChanging;
        
        /// <summary>
        /// Gets fired when the GmlDiagramObject property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlDiagramObjectChanged;
        
        /// <summary>
        /// Gets fired before the GmlLabelPlacement property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlLabelPlacementChanging;
        
        /// <summary>
        /// Gets fired when the GmlLabelPlacement property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlLabelPlacementChanged;
        
        /// <summary>
        /// Raises the PropertyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPropertyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PropertyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PropertyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPropertyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PropertyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LabelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLabelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LabelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LabelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLabelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LabelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinFontSizeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinFontSizeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinFontSizeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinFontSizeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinFontSizeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinFontSizeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FieldIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFieldIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FieldIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FieldIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFieldIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FieldIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LabelTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLabelTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LabelTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LabelTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLabelTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LabelTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GmlHaloChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlHaloChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlHaloChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GmlHaloChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlHaloChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlHaloChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GmlHalo property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGmlHalo(object sender, System.EventArgs eventArgs)
        {
            this.GmlHalo = null;
        }
        
        /// <summary>
        /// Raises the GmlFontChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlFontChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlFontChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GmlFontChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlFontChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlFontChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GmlFont property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGmlFont(object sender, System.EventArgs eventArgs)
        {
            this.GmlFont = null;
        }
        
        /// <summary>
        /// Raises the GmlFillChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlFillChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlFillChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GmlFillChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlFillChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlFillChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GmlFill property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGmlFill(object sender, System.EventArgs eventArgs)
        {
            this.GmlFill = null;
        }
        
        /// <summary>
        /// Raises the GmlDiagramObjectChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlDiagramObjectChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlDiagramObjectChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GmlDiagramObjectChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlDiagramObjectChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlDiagramObjectChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GmlDiagramObject property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGmlDiagramObject(object sender, System.EventArgs eventArgs)
        {
            this.GmlDiagramObject = null;
        }
        
        /// <summary>
        /// Raises the GmlLabelPlacementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlLabelPlacementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlLabelPlacementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GmlLabelPlacementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlLabelPlacementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlLabelPlacementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GmlLabelPlacement property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGmlLabelPlacement(object sender, System.EventArgs eventArgs)
        {
            this.GmlLabelPlacement = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PROPERTY"))
            {
                return this.Property;
            }
            if ((attribute == "LABEL"))
            {
                return this.Label;
            }
            if ((attribute == "MINFONTSIZE"))
            {
                return this.MinFontSize;
            }
            if ((attribute == "FIELDID"))
            {
                return this.FieldID;
            }
            if ((attribute == "LABELTYPE"))
            {
                return this.LabelType;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "GMLHALO"))
            {
                this.GmlHalo = ((IGmlHalo)(value));
                return;
            }
            if ((feature == "GMLFONT"))
            {
                this.GmlFont = ((IGmlFont)(value));
                return;
            }
            if ((feature == "GMLFILL"))
            {
                this.GmlFill = ((IGmlFill)(value));
                return;
            }
            if ((feature == "GMLDIAGRAMOBJECT"))
            {
                this.GmlDiagramObject = ((IGmlDiagramObject)(value));
                return;
            }
            if ((feature == "GMLLABELPLACEMENT"))
            {
                this.GmlLabelPlacement = ((IGmlLabelPlacement)(value));
                return;
            }
            if ((feature == "PROPERTY"))
            {
                this.Property = ((string)(value));
                return;
            }
            if ((feature == "LABEL"))
            {
                this.Label = ((string)(value));
                return;
            }
            if ((feature == "MINFONTSIZE"))
            {
                this.MinFontSize = ((int)(value));
                return;
            }
            if ((feature == "FIELDID"))
            {
                this.FieldID = ((string)(value));
                return;
            }
            if ((feature == "LABELTYPE"))
            {
                this.LabelType = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "GmlHalo"))
            {
                return new GmlHaloProxy(this);
            }
            if ((attribute == "GmlFont"))
            {
                return new GmlFontProxy(this);
            }
            if ((attribute == "GmlFill"))
            {
                return new GmlFillProxy(this);
            }
            if ((attribute == "GmlDiagramObject"))
            {
                return new GmlDiagramObjectProxy(this);
            }
            if ((attribute == "GmlLabelPlacement"))
            {
                return new GmlLabelPlacementProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "GmlHalo"))
            {
                return new GmlHaloProxy(this);
            }
            if ((reference == "GmlFont"))
            {
                return new GmlFontProxy(this);
            }
            if ((reference == "GmlFill"))
            {
                return new GmlFillProxy(this);
            }
            if ((reference == "GmlDiagramObject"))
            {
                return new GmlDiagramObjectProxy(this);
            }
            if ((reference == "GmlLabelPlacement"))
            {
                return new GmlLabelPlacementProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
                        "TextSymbol")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the GmlTextSymbol class
        /// </summary>
        public class GmlTextSymbolReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private GmlTextSymbol _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public GmlTextSymbolReferencedElementsCollection(GmlTextSymbol parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.GmlHalo != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.GmlFont != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.GmlFill != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.GmlDiagramObject != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.GmlLabelPlacement != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.GmlHaloChanged += this.PropagateValueChanges;
                this._parent.GmlFontChanged += this.PropagateValueChanges;
                this._parent.GmlFillChanged += this.PropagateValueChanges;
                this._parent.GmlDiagramObjectChanged += this.PropagateValueChanges;
                this._parent.GmlLabelPlacementChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.GmlHaloChanged -= this.PropagateValueChanges;
                this._parent.GmlFontChanged -= this.PropagateValueChanges;
                this._parent.GmlFillChanged -= this.PropagateValueChanges;
                this._parent.GmlDiagramObjectChanged -= this.PropagateValueChanges;
                this._parent.GmlLabelPlacementChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.GmlHalo == null))
                {
                    IGmlHalo gmlHaloCasted = item.As<IGmlHalo>();
                    if ((gmlHaloCasted != null))
                    {
                        this._parent.GmlHalo = gmlHaloCasted;
                        return;
                    }
                }
                if ((this._parent.GmlFont == null))
                {
                    IGmlFont gmlFontCasted = item.As<IGmlFont>();
                    if ((gmlFontCasted != null))
                    {
                        this._parent.GmlFont = gmlFontCasted;
                        return;
                    }
                }
                if ((this._parent.GmlFill == null))
                {
                    IGmlFill gmlFillCasted = item.As<IGmlFill>();
                    if ((gmlFillCasted != null))
                    {
                        this._parent.GmlFill = gmlFillCasted;
                        return;
                    }
                }
                if ((this._parent.GmlDiagramObject == null))
                {
                    IGmlDiagramObject gmlDiagramObjectCasted = item.As<IGmlDiagramObject>();
                    if ((gmlDiagramObjectCasted != null))
                    {
                        this._parent.GmlDiagramObject = gmlDiagramObjectCasted;
                        return;
                    }
                }
                if ((this._parent.GmlLabelPlacement == null))
                {
                    IGmlLabelPlacement gmlLabelPlacementCasted = item.As<IGmlLabelPlacement>();
                    if ((gmlLabelPlacementCasted != null))
                    {
                        this._parent.GmlLabelPlacement = gmlLabelPlacementCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.GmlHalo = null;
                this._parent.GmlFont = null;
                this._parent.GmlFill = null;
                this._parent.GmlDiagramObject = null;
                this._parent.GmlLabelPlacement = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.GmlHalo))
                {
                    return true;
                }
                if ((item == this._parent.GmlFont))
                {
                    return true;
                }
                if ((item == this._parent.GmlFill))
                {
                    return true;
                }
                if ((item == this._parent.GmlDiagramObject))
                {
                    return true;
                }
                if ((item == this._parent.GmlLabelPlacement))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.GmlHalo != null))
                {
                    array[arrayIndex] = this._parent.GmlHalo;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.GmlFont != null))
                {
                    array[arrayIndex] = this._parent.GmlFont;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.GmlFill != null))
                {
                    array[arrayIndex] = this._parent.GmlFill;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.GmlDiagramObject != null))
                {
                    array[arrayIndex] = this._parent.GmlDiagramObject;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.GmlLabelPlacement != null))
                {
                    array[arrayIndex] = this._parent.GmlLabelPlacement;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.GmlHalo == item))
                {
                    this._parent.GmlHalo = null;
                    return true;
                }
                if ((this._parent.GmlFont == item))
                {
                    this._parent.GmlFont = null;
                    return true;
                }
                if ((this._parent.GmlFill == item))
                {
                    this._parent.GmlFill = null;
                    return true;
                }
                if ((this._parent.GmlDiagramObject == item))
                {
                    this._parent.GmlDiagramObject = null;
                    return true;
                }
                if ((this._parent.GmlLabelPlacement == item))
                {
                    this._parent.GmlLabelPlacement = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.GmlHalo).Concat(this._parent.GmlFont).Concat(this._parent.GmlFill).Concat(this._parent.GmlDiagramObject).Concat(this._parent.GmlLabelPlacement).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the property property
        /// </summary>
        private sealed class PropertyProxy : ModelPropertyChange<IGmlTextSymbol, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PropertyProxy(IGmlTextSymbol modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Property;
                }
                set
                {
                    this.ModelElement.Property = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PropertyChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PropertyChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the label property
        /// </summary>
        private sealed class LabelProxy : ModelPropertyChange<IGmlTextSymbol, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LabelProxy(IGmlTextSymbol modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Label;
                }
                set
                {
                    this.ModelElement.Label = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LabelChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LabelChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minFontSize property
        /// </summary>
        private sealed class MinFontSizeProxy : ModelPropertyChange<IGmlTextSymbol, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinFontSizeProxy(IGmlTextSymbol modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.MinFontSize;
                }
                set
                {
                    this.ModelElement.MinFontSize = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinFontSizeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinFontSizeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fieldID property
        /// </summary>
        private sealed class FieldIDProxy : ModelPropertyChange<IGmlTextSymbol, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FieldIDProxy(IGmlTextSymbol modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.FieldID;
                }
                set
                {
                    this.ModelElement.FieldID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FieldIDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FieldIDChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the labelType property
        /// </summary>
        private sealed class LabelTypeProxy : ModelPropertyChange<IGmlTextSymbol, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LabelTypeProxy(IGmlTextSymbol modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.LabelType;
                }
                set
                {
                    this.ModelElement.LabelType = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LabelTypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LabelTypeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GmlHalo property
        /// </summary>
        private sealed class GmlHaloProxy : ModelPropertyChange<IGmlTextSymbol, IGmlHalo>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GmlHaloProxy(IGmlTextSymbol modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGmlHalo Value
            {
                get
                {
                    return this.ModelElement.GmlHalo;
                }
                set
                {
                    this.ModelElement.GmlHalo = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GmlHaloChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GmlHaloChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GmlFont property
        /// </summary>
        private sealed class GmlFontProxy : ModelPropertyChange<IGmlTextSymbol, IGmlFont>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GmlFontProxy(IGmlTextSymbol modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGmlFont Value
            {
                get
                {
                    return this.ModelElement.GmlFont;
                }
                set
                {
                    this.ModelElement.GmlFont = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GmlFontChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GmlFontChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GmlFill property
        /// </summary>
        private sealed class GmlFillProxy : ModelPropertyChange<IGmlTextSymbol, IGmlFill>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GmlFillProxy(IGmlTextSymbol modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGmlFill Value
            {
                get
                {
                    return this.ModelElement.GmlFill;
                }
                set
                {
                    this.ModelElement.GmlFill = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GmlFillChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GmlFillChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GmlDiagramObject property
        /// </summary>
        private sealed class GmlDiagramObjectProxy : ModelPropertyChange<IGmlTextSymbol, IGmlDiagramObject>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GmlDiagramObjectProxy(IGmlTextSymbol modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGmlDiagramObject Value
            {
                get
                {
                    return this.ModelElement.GmlDiagramObject;
                }
                set
                {
                    this.ModelElement.GmlDiagramObject = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GmlDiagramObjectChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GmlDiagramObjectChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GmlLabelPlacement property
        /// </summary>
        private sealed class GmlLabelPlacementProxy : ModelPropertyChange<IGmlTextSymbol, IGmlLabelPlacement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GmlLabelPlacementProxy(IGmlTextSymbol modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGmlLabelPlacement Value
            {
                get
                {
                    return this.ModelElement.GmlLabelPlacement;
                }
                set
                {
                    this.ModelElement.GmlLabelPlacement = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GmlLabelPlacementChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GmlLabelPlacementChanged -= handler;
            }
        }
    }
}

