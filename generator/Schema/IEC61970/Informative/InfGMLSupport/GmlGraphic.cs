//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport
{
    
    
    /// <summary>
    /// The default implementation of the GmlGraphic class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfGMLSupport")]
    [XmlNamespacePrefixAttribute("cimInfGMLSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
        "Graphic")]
    [DebuggerDisplayAttribute("GmlGraphic {UUID}")]
    public class GmlGraphic : IdentifiedObject, IGmlGraphic, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Opacity property
        /// </summary>
        private float _opacity;
        
        /// <summary>
        /// The backing field for the MinSize property
        /// </summary>
        private int _minSize;
        
        /// <summary>
        /// The backing field for the SymbolID property
        /// </summary>
        private string _symbolID;
        
        /// <summary>
        /// The backing field for the XScale property
        /// </summary>
        private float _xScale;
        
        /// <summary>
        /// The backing field for the Size property
        /// </summary>
        private int _size;
        
        /// <summary>
        /// The backing field for the YScale property
        /// </summary>
        private float _yScale;
        
        /// <summary>
        /// The backing field for the Rotation property
        /// </summary>
        private float _rotation;
        
        /// <summary>
        /// The backing field for the GmlMarks property
        /// </summary>
        private GmlGraphicGmlMarksCollection _gmlMarks;
        
        /// <summary>
        /// The backing field for the GmlPointSymbols property
        /// </summary>
        private GmlGraphicGmlPointSymbolsCollection _gmlPointSymbols;
        
        private static IClass _classInstance;
        
        public GmlGraphic()
        {
            this._gmlMarks = new GmlGraphicGmlMarksCollection(this);
            this._gmlMarks.CollectionChanging += this.GmlMarksCollectionChanging;
            this._gmlMarks.CollectionChanged += this.GmlMarksCollectionChanged;
            this._gmlPointSymbols = new GmlGraphicGmlPointSymbolsCollection(this);
            this._gmlPointSymbols.CollectionChanging += this.GmlPointSymbolsCollectionChanging;
            this._gmlPointSymbols.CollectionChanged += this.GmlPointSymbolsCollectionChanged;
        }
        
        /// <summary>
        /// The opacity property
        /// </summary>
        [XmlElementNameAttribute("opacity")]
        [XmlAttributeAttribute(true)]
        public virtual float Opacity
        {
            get
            {
                return this._opacity;
            }
            set
            {
                if ((this._opacity != value))
                {
                    float old = this._opacity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpacityChanging(e);
                    this.OnPropertyChanging("Opacity", e);
                    this._opacity = value;
                    this.OnOpacityChanged(e);
                    this.OnPropertyChanged("Opacity", e);
                }
            }
        }
        
        /// <summary>
        /// The minSize property
        /// </summary>
        [XmlElementNameAttribute("minSize")]
        [XmlAttributeAttribute(true)]
        public virtual int MinSize
        {
            get
            {
                return this._minSize;
            }
            set
            {
                if ((this._minSize != value))
                {
                    int old = this._minSize;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinSizeChanging(e);
                    this.OnPropertyChanging("MinSize", e);
                    this._minSize = value;
                    this.OnMinSizeChanged(e);
                    this.OnPropertyChanged("MinSize", e);
                }
            }
        }
        
        /// <summary>
        /// The symbolID property
        /// </summary>
        [XmlElementNameAttribute("symbolID")]
        [XmlAttributeAttribute(true)]
        public virtual string SymbolID
        {
            get
            {
                return this._symbolID;
            }
            set
            {
                if ((this._symbolID != value))
                {
                    string old = this._symbolID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSymbolIDChanging(e);
                    this.OnPropertyChanging("SymbolID", e);
                    this._symbolID = value;
                    this.OnSymbolIDChanged(e);
                    this.OnPropertyChanged("SymbolID", e);
                }
            }
        }
        
        /// <summary>
        /// The xScale property
        /// </summary>
        [XmlElementNameAttribute("xScale")]
        [XmlAttributeAttribute(true)]
        public virtual float XScale
        {
            get
            {
                return this._xScale;
            }
            set
            {
                if ((this._xScale != value))
                {
                    float old = this._xScale;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXScaleChanging(e);
                    this.OnPropertyChanging("XScale", e);
                    this._xScale = value;
                    this.OnXScaleChanged(e);
                    this.OnPropertyChanged("XScale", e);
                }
            }
        }
        
        /// <summary>
        /// The size property
        /// </summary>
        [XmlElementNameAttribute("size")]
        [XmlAttributeAttribute(true)]
        public virtual int Size
        {
            get
            {
                return this._size;
            }
            set
            {
                if ((this._size != value))
                {
                    int old = this._size;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSizeChanging(e);
                    this.OnPropertyChanging("Size", e);
                    this._size = value;
                    this.OnSizeChanged(e);
                    this.OnPropertyChanged("Size", e);
                }
            }
        }
        
        /// <summary>
        /// The yScale property
        /// </summary>
        [XmlElementNameAttribute("yScale")]
        [XmlAttributeAttribute(true)]
        public virtual float YScale
        {
            get
            {
                return this._yScale;
            }
            set
            {
                if ((this._yScale != value))
                {
                    float old = this._yScale;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnYScaleChanging(e);
                    this.OnPropertyChanging("YScale", e);
                    this._yScale = value;
                    this.OnYScaleChanged(e);
                    this.OnPropertyChanged("YScale", e);
                }
            }
        }
        
        /// <summary>
        /// The rotation property
        /// </summary>
        [XmlElementNameAttribute("rotation")]
        [XmlAttributeAttribute(true)]
        public virtual float Rotation
        {
            get
            {
                return this._rotation;
            }
            set
            {
                if ((this._rotation != value))
                {
                    float old = this._rotation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRotationChanging(e);
                    this.OnPropertyChanging("Rotation", e);
                    this._rotation = value;
                    this.OnRotationChanged(e);
                    this.OnPropertyChanged("Rotation", e);
                }
            }
        }
        
        /// <summary>
        /// The GmlMarks property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlGraphics")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGmlMark> GmlMarks
        {
            get
            {
                return this._gmlMarks;
            }
        }
        
        /// <summary>
        /// The GmlPointSymbols property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlGraphic")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGmlPointSymbol> GmlPointSymbols
        {
            get
            {
                return this._gmlPointSymbols;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new GmlGraphicReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
                            "Graphic")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Opacity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpacityChanging;
        
        /// <summary>
        /// Gets fired when the Opacity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpacityChanged;
        
        /// <summary>
        /// Gets fired before the MinSize property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinSizeChanging;
        
        /// <summary>
        /// Gets fired when the MinSize property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinSizeChanged;
        
        /// <summary>
        /// Gets fired before the SymbolID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SymbolIDChanging;
        
        /// <summary>
        /// Gets fired when the SymbolID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SymbolIDChanged;
        
        /// <summary>
        /// Gets fired before the XScale property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XScaleChanging;
        
        /// <summary>
        /// Gets fired when the XScale property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XScaleChanged;
        
        /// <summary>
        /// Gets fired before the Size property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SizeChanging;
        
        /// <summary>
        /// Gets fired when the Size property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SizeChanged;
        
        /// <summary>
        /// Gets fired before the YScale property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> YScaleChanging;
        
        /// <summary>
        /// Gets fired when the YScale property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> YScaleChanged;
        
        /// <summary>
        /// Gets fired before the Rotation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RotationChanging;
        
        /// <summary>
        /// Gets fired when the Rotation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RotationChanged;
        
        /// <summary>
        /// Raises the OpacityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpacityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpacityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpacityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpacityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpacityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinSizeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinSizeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinSizeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinSizeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinSizeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinSizeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SymbolIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSymbolIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SymbolIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SymbolIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSymbolIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SymbolIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XScaleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXScaleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XScaleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XScaleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXScaleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XScaleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SizeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSizeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SizeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SizeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSizeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SizeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the YScaleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnYScaleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.YScaleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the YScaleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnYScaleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.YScaleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RotationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRotationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RotationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RotationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRotationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RotationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GmlMarks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlMarksCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("GmlMarks", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GmlMarks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlMarksCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GmlMarks", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GmlPointSymbols property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlPointSymbolsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("GmlPointSymbols", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GmlPointSymbols property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlPointSymbolsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GmlPointSymbols", e);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "OPACITY"))
            {
                return this.Opacity;
            }
            if ((attribute == "MINSIZE"))
            {
                return this.MinSize;
            }
            if ((attribute == "SYMBOLID"))
            {
                return this.SymbolID;
            }
            if ((attribute == "XSCALE"))
            {
                return this.XScale;
            }
            if ((attribute == "SIZE"))
            {
                return this.Size;
            }
            if ((attribute == "YSCALE"))
            {
                return this.YScale;
            }
            if ((attribute == "ROTATION"))
            {
                return this.Rotation;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "GMLMARKS"))
            {
                return this._gmlMarks;
            }
            if ((feature == "GMLPOINTSYMBOLS"))
            {
                return this._gmlPointSymbols;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OPACITY"))
            {
                this.Opacity = ((float)(value));
                return;
            }
            if ((feature == "MINSIZE"))
            {
                this.MinSize = ((int)(value));
                return;
            }
            if ((feature == "SYMBOLID"))
            {
                this.SymbolID = ((string)(value));
                return;
            }
            if ((feature == "XSCALE"))
            {
                this.XScale = ((float)(value));
                return;
            }
            if ((feature == "SIZE"))
            {
                this.Size = ((int)(value));
                return;
            }
            if ((feature == "YSCALE"))
            {
                this.YScale = ((float)(value));
                return;
            }
            if ((feature == "ROTATION"))
            {
                this.Rotation = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
                        "Graphic")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the GmlGraphic class
        /// </summary>
        public class GmlGraphicReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private GmlGraphic _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public GmlGraphicReferencedElementsCollection(GmlGraphic parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.GmlMarks.Count);
                    count = (count + this._parent.GmlPointSymbols.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.GmlMarks.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.GmlPointSymbols.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.GmlMarks.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.GmlPointSymbols.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IGmlMark gmlMarksCasted = item.As<IGmlMark>();
                if ((gmlMarksCasted != null))
                {
                    this._parent.GmlMarks.Add(gmlMarksCasted);
                }
                IGmlPointSymbol gmlPointSymbolsCasted = item.As<IGmlPointSymbol>();
                if ((gmlPointSymbolsCasted != null))
                {
                    this._parent.GmlPointSymbols.Add(gmlPointSymbolsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.GmlMarks.Clear();
                this._parent.GmlPointSymbols.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.GmlMarks.Contains(item))
                {
                    return true;
                }
                if (this._parent.GmlPointSymbols.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> gmlMarksEnumerator = this._parent.GmlMarks.GetEnumerator();
                try
                {
                    for (
                    ; gmlMarksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = gmlMarksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    gmlMarksEnumerator.Dispose();
                }
                IEnumerator<IModelElement> gmlPointSymbolsEnumerator = this._parent.GmlPointSymbols.GetEnumerator();
                try
                {
                    for (
                    ; gmlPointSymbolsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = gmlPointSymbolsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    gmlPointSymbolsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IGmlMark gmlMarkItem = item.As<IGmlMark>();
                if (((gmlMarkItem != null) 
                            && this._parent.GmlMarks.Remove(gmlMarkItem)))
                {
                    return true;
                }
                IGmlPointSymbol gmlPointSymbolItem = item.As<IGmlPointSymbol>();
                if (((gmlPointSymbolItem != null) 
                            && this._parent.GmlPointSymbols.Remove(gmlPointSymbolItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.GmlMarks).Concat(this._parent.GmlPointSymbols).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the opacity property
        /// </summary>
        private sealed class OpacityProxy : ModelPropertyChange<IGmlGraphic, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpacityProxy(IGmlGraphic modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Opacity;
                }
                set
                {
                    this.ModelElement.Opacity = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpacityChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OpacityChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minSize property
        /// </summary>
        private sealed class MinSizeProxy : ModelPropertyChange<IGmlGraphic, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinSizeProxy(IGmlGraphic modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.MinSize;
                }
                set
                {
                    this.ModelElement.MinSize = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinSizeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinSizeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the symbolID property
        /// </summary>
        private sealed class SymbolIDProxy : ModelPropertyChange<IGmlGraphic, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SymbolIDProxy(IGmlGraphic modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.SymbolID;
                }
                set
                {
                    this.ModelElement.SymbolID = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SymbolIDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SymbolIDChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xScale property
        /// </summary>
        private sealed class XScaleProxy : ModelPropertyChange<IGmlGraphic, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XScaleProxy(IGmlGraphic modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.XScale;
                }
                set
                {
                    this.ModelElement.XScale = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XScaleChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.XScaleChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the size property
        /// </summary>
        private sealed class SizeProxy : ModelPropertyChange<IGmlGraphic, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SizeProxy(IGmlGraphic modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.Size;
                }
                set
                {
                    this.ModelElement.Size = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SizeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SizeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the yScale property
        /// </summary>
        private sealed class YScaleProxy : ModelPropertyChange<IGmlGraphic, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public YScaleProxy(IGmlGraphic modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.YScale;
                }
                set
                {
                    this.ModelElement.YScale = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.YScaleChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.YScaleChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rotation property
        /// </summary>
        private sealed class RotationProxy : ModelPropertyChange<IGmlGraphic, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RotationProxy(IGmlGraphic modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Rotation;
                }
                set
                {
                    this.ModelElement.Rotation = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RotationChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RotationChanged -= handler;
            }
        }
    }
}

