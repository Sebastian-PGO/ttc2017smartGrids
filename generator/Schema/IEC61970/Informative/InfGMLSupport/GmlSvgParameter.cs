//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport
{
    
    
    /// <summary>
    /// The default implementation of the GmlSvgParameter class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfGMLSupport")]
    [XmlNamespacePrefixAttribute("cimInfGMLSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
        "SvgParameter")]
    [DebuggerDisplayAttribute("GmlSvgParameter {UUID}")]
    public partial class GmlSvgParameter : IdentifiedObject, IGmlSvgParameter, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        private string _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        /// <summary>
        /// The backing field for the Attribute property
        /// </summary>
        private string _attribute;
        
        private static Lazy<ITypedElement> _attributeAttribute = new Lazy<ITypedElement>(RetrieveAttributeAttribute);
        
        private static Lazy<ITypedElement> _gmlStokesReference = new Lazy<ITypedElement>(RetrieveGmlStokesReference);
        
        /// <summary>
        /// The backing field for the GmlStokes property
        /// </summary>
        private GmlSvgParameterGmlStokesCollection _gmlStokes;
        
        private static Lazy<ITypedElement> _gmlFillsReference = new Lazy<ITypedElement>(RetrieveGmlFillsReference);
        
        /// <summary>
        /// The backing field for the GmlFills property
        /// </summary>
        private GmlSvgParameterGmlFillsCollection _gmlFills;
        
        private static Lazy<ITypedElement> _gmlFontsReference = new Lazy<ITypedElement>(RetrieveGmlFontsReference);
        
        /// <summary>
        /// The backing field for the GmlFonts property
        /// </summary>
        private GmlSvgParameterGmlFontsCollection _gmlFonts;
        
        private static IClass _classInstance;
        
        public GmlSvgParameter()
        {
            this._gmlStokes = new GmlSvgParameterGmlStokesCollection(this);
            this._gmlStokes.CollectionChanging += this.GmlStokesCollectionChanging;
            this._gmlStokes.CollectionChanged += this.GmlStokesCollectionChanged;
            this._gmlFills = new GmlSvgParameterGmlFillsCollection(this);
            this._gmlFills.CollectionChanging += this.GmlFillsCollectionChanging;
            this._gmlFills.CollectionChanged += this.GmlFillsCollectionChanged;
            this._gmlFonts = new GmlSvgParameterGmlFontsCollection(this);
            this._gmlFonts.CollectionChanging += this.GmlFontsCollectionChanging;
            this._gmlFonts.CollectionChanged += this.GmlFontsCollectionChanged;
        }
        
        /// <summary>
        /// The value property
        /// </summary>
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public virtual string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    string old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The attribute property
        /// </summary>
        [XmlElementNameAttribute("attribute")]
        [XmlAttributeAttribute(true)]
        public virtual string Attribute
        {
            get
            {
                return this._attribute;
            }
            set
            {
                if ((this._attribute != value))
                {
                    string old = this._attribute;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAttributeChanging(e);
                    this.OnPropertyChanging("Attribute", e, _attributeAttribute);
                    this._attribute = value;
                    this.OnAttributeChanged(e);
                    this.OnPropertyChanged("Attribute", e, _attributeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The GmlStokes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlSvgParameters")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGmlStroke> GmlStokes
        {
            get
            {
                return this._gmlStokes;
            }
        }
        
        /// <summary>
        /// The GmlFills property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlSvgParameters")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGmlFill> GmlFills
        {
            get
            {
                return this._gmlFills;
            }
        }
        
        /// <summary>
        /// The GmlFonts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlSvgParameters")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGmlFont> GmlFonts
        {
            get
            {
                return this._gmlFonts;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new GmlSvgParameterReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
                            "SvgParameter")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanging;
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Attribute property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AttributeChanging;
        
        /// <summary>
        /// Gets fired when the Attribute property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AttributeChanged;
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlSvgParameter.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAttributeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlSvgParameter.ClassInstance)).Resolve("attribute")));
        }
        
        /// <summary>
        /// Raises the AttributeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAttributeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AttributeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AttributeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAttributeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AttributeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGmlStokesReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlSvgParameter.ClassInstance)).Resolve("GmlStokes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GmlStokes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlStokesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("GmlStokes", e, _gmlStokesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GmlStokes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlStokesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GmlStokes", e, _gmlStokesReference);
        }
        
        private static ITypedElement RetrieveGmlFillsReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlSvgParameter.ClassInstance)).Resolve("GmlFills")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GmlFills property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlFillsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("GmlFills", e, _gmlFillsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GmlFills property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlFillsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GmlFills", e, _gmlFillsReference);
        }
        
        private static ITypedElement RetrieveGmlFontsReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlSvgParameter.ClassInstance)).Resolve("GmlFonts")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GmlFonts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlFontsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("GmlFonts", e, _gmlFontsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GmlFonts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlFontsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GmlFonts", e, _gmlFontsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            if ((attribute == "ATTRIBUTE"))
            {
                return this.Attribute;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "GMLSTOKES"))
            {
                return this._gmlStokes;
            }
            if ((feature == "GMLFILLS"))
            {
                return this._gmlFills;
            }
            if ((feature == "GMLFONTS"))
            {
                return this._gmlFonts;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUE"))
            {
                this.Value = ((string)(value));
                return;
            }
            if ((feature == "ATTRIBUTE"))
            {
                this.Attribute = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
                        "SvgParameter")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the GmlSvgParameter class
        /// </summary>
        public class GmlSvgParameterReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private GmlSvgParameter _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public GmlSvgParameterReferencedElementsCollection(GmlSvgParameter parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.GmlStokes.Count);
                    count = (count + this._parent.GmlFills.Count);
                    count = (count + this._parent.GmlFonts.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.GmlStokes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.GmlFills.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.GmlFonts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.GmlStokes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.GmlFills.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.GmlFonts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IGmlStroke gmlStokesCasted = item.As<IGmlStroke>();
                if ((gmlStokesCasted != null))
                {
                    this._parent.GmlStokes.Add(gmlStokesCasted);
                }
                IGmlFill gmlFillsCasted = item.As<IGmlFill>();
                if ((gmlFillsCasted != null))
                {
                    this._parent.GmlFills.Add(gmlFillsCasted);
                }
                IGmlFont gmlFontsCasted = item.As<IGmlFont>();
                if ((gmlFontsCasted != null))
                {
                    this._parent.GmlFonts.Add(gmlFontsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.GmlStokes.Clear();
                this._parent.GmlFills.Clear();
                this._parent.GmlFonts.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.GmlStokes.Contains(item))
                {
                    return true;
                }
                if (this._parent.GmlFills.Contains(item))
                {
                    return true;
                }
                if (this._parent.GmlFonts.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> gmlStokesEnumerator = this._parent.GmlStokes.GetEnumerator();
                try
                {
                    for (
                    ; gmlStokesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = gmlStokesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    gmlStokesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> gmlFillsEnumerator = this._parent.GmlFills.GetEnumerator();
                try
                {
                    for (
                    ; gmlFillsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = gmlFillsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    gmlFillsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> gmlFontsEnumerator = this._parent.GmlFonts.GetEnumerator();
                try
                {
                    for (
                    ; gmlFontsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = gmlFontsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    gmlFontsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IGmlStroke gmlStrokeItem = item.As<IGmlStroke>();
                if (((gmlStrokeItem != null) 
                            && this._parent.GmlStokes.Remove(gmlStrokeItem)))
                {
                    return true;
                }
                IGmlFill gmlFillItem = item.As<IGmlFill>();
                if (((gmlFillItem != null) 
                            && this._parent.GmlFills.Remove(gmlFillItem)))
                {
                    return true;
                }
                IGmlFont gmlFontItem = item.As<IGmlFont>();
                if (((gmlFontItem != null) 
                            && this._parent.GmlFonts.Remove(gmlFontItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.GmlStokes).Concat(this._parent.GmlFills).Concat(this._parent.GmlFonts).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IGmlSvgParameter, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IGmlSvgParameter modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the attribute property
        /// </summary>
        private sealed class AttributeProxy : ModelPropertyChange<IGmlSvgParameter, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AttributeProxy(IGmlSvgParameter modelElement) : 
                    base(modelElement, "attribute")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Attribute;
                }
                set
                {
                    this.ModelElement.Attribute = value;
                }
            }
        }
    }
}

