//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport
{
    
    
    /// <summary>
    /// The default implementation of the GmlFont class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfGMLSupport")]
    [XmlNamespacePrefixAttribute("cimInfGMLSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
        "Font")]
    [DebuggerDisplayAttribute("GmlFont {UUID}")]
    public partial class GmlFont : IdentifiedObject, IGmlFont, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Weight property
        /// </summary>
        private string _weight;
        
        private static Lazy<ITypedElement> _weightAttribute = new Lazy<ITypedElement>(RetrieveWeightAttribute);
        
        /// <summary>
        /// The backing field for the Family property
        /// </summary>
        private string _family;
        
        private static Lazy<ITypedElement> _familyAttribute = new Lazy<ITypedElement>(RetrieveFamilyAttribute);
        
        /// <summary>
        /// The backing field for the Style property
        /// </summary>
        private string _style;
        
        private static Lazy<ITypedElement> _styleAttribute = new Lazy<ITypedElement>(RetrieveStyleAttribute);
        
        /// <summary>
        /// The backing field for the AbsoluteSize property
        /// </summary>
        private bool _absoluteSize;
        
        private static Lazy<ITypedElement> _absoluteSizeAttribute = new Lazy<ITypedElement>(RetrieveAbsoluteSizeAttribute);
        
        /// <summary>
        /// The backing field for the Size property
        /// </summary>
        private string _size;
        
        private static Lazy<ITypedElement> _sizeAttribute = new Lazy<ITypedElement>(RetrieveSizeAttribute);
        
        private static Lazy<ITypedElement> _gmlTextSymbolsReference = new Lazy<ITypedElement>(RetrieveGmlTextSymbolsReference);
        
        /// <summary>
        /// The backing field for the GmlTextSymbols property
        /// </summary>
        private GmlFontGmlTextSymbolsCollection _gmlTextSymbols;
        
        private static Lazy<ITypedElement> _gmlColourReference = new Lazy<ITypedElement>(RetrieveGmlColourReference);
        
        /// <summary>
        /// The backing field for the GmlColour property
        /// </summary>
        private IGmlColour _gmlColour;
        
        private static Lazy<ITypedElement> _gmlSvgParametersReference = new Lazy<ITypedElement>(RetrieveGmlSvgParametersReference);
        
        /// <summary>
        /// The backing field for the GmlSvgParameters property
        /// </summary>
        private GmlFontGmlSvgParametersCollection _gmlSvgParameters;
        
        private static IClass _classInstance;
        
        public GmlFont()
        {
            this._gmlTextSymbols = new GmlFontGmlTextSymbolsCollection(this);
            this._gmlTextSymbols.CollectionChanging += this.GmlTextSymbolsCollectionChanging;
            this._gmlTextSymbols.CollectionChanged += this.GmlTextSymbolsCollectionChanged;
            this._gmlSvgParameters = new GmlFontGmlSvgParametersCollection(this);
            this._gmlSvgParameters.CollectionChanging += this.GmlSvgParametersCollectionChanging;
            this._gmlSvgParameters.CollectionChanged += this.GmlSvgParametersCollectionChanged;
        }
        
        /// <summary>
        /// The weight property
        /// </summary>
        [XmlElementNameAttribute("weight")]
        [XmlAttributeAttribute(true)]
        public virtual string Weight
        {
            get
            {
                return this._weight;
            }
            set
            {
                if ((this._weight != value))
                {
                    string old = this._weight;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWeightChanging(e);
                    this.OnPropertyChanging("Weight", e, _weightAttribute);
                    this._weight = value;
                    this.OnWeightChanged(e);
                    this.OnPropertyChanged("Weight", e, _weightAttribute);
                }
            }
        }
        
        /// <summary>
        /// The family property
        /// </summary>
        [XmlElementNameAttribute("family")]
        [XmlAttributeAttribute(true)]
        public virtual string Family
        {
            get
            {
                return this._family;
            }
            set
            {
                if ((this._family != value))
                {
                    string old = this._family;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFamilyChanging(e);
                    this.OnPropertyChanging("Family", e, _familyAttribute);
                    this._family = value;
                    this.OnFamilyChanged(e);
                    this.OnPropertyChanged("Family", e, _familyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The style property
        /// </summary>
        [XmlElementNameAttribute("style")]
        [XmlAttributeAttribute(true)]
        public virtual string Style
        {
            get
            {
                return this._style;
            }
            set
            {
                if ((this._style != value))
                {
                    string old = this._style;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStyleChanging(e);
                    this.OnPropertyChanging("Style", e, _styleAttribute);
                    this._style = value;
                    this.OnStyleChanged(e);
                    this.OnPropertyChanged("Style", e, _styleAttribute);
                }
            }
        }
        
        /// <summary>
        /// The absoluteSize property
        /// </summary>
        [XmlElementNameAttribute("absoluteSize")]
        [XmlAttributeAttribute(true)]
        public virtual bool AbsoluteSize
        {
            get
            {
                return this._absoluteSize;
            }
            set
            {
                if ((this._absoluteSize != value))
                {
                    bool old = this._absoluteSize;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAbsoluteSizeChanging(e);
                    this.OnPropertyChanging("AbsoluteSize", e, _absoluteSizeAttribute);
                    this._absoluteSize = value;
                    this.OnAbsoluteSizeChanged(e);
                    this.OnPropertyChanged("AbsoluteSize", e, _absoluteSizeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The size property
        /// </summary>
        [XmlElementNameAttribute("size")]
        [XmlAttributeAttribute(true)]
        public virtual string Size
        {
            get
            {
                return this._size;
            }
            set
            {
                if ((this._size != value))
                {
                    string old = this._size;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSizeChanging(e);
                    this.OnPropertyChanging("Size", e, _sizeAttribute);
                    this._size = value;
                    this.OnSizeChanged(e);
                    this.OnPropertyChanged("Size", e, _sizeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The GmlTextSymbols property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlFont")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGmlTextSymbol> GmlTextSymbols
        {
            get
            {
                return this._gmlTextSymbols;
            }
        }
        
        /// <summary>
        /// The GmlColour property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlFonts")]
        public virtual IGmlColour GmlColour
        {
            get
            {
                return this._gmlColour;
            }
            set
            {
                if ((this._gmlColour != value))
                {
                    IGmlColour old = this._gmlColour;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGmlColourChanging(e);
                    this.OnPropertyChanging("GmlColour", e, _gmlColourReference);
                    this._gmlColour = value;
                    if ((old != null))
                    {
                        old.GmlFonts.Remove(this);
                        old.Deleted -= this.OnResetGmlColour;
                    }
                    if ((value != null))
                    {
                        value.GmlFonts.Add(this);
                        value.Deleted += this.OnResetGmlColour;
                    }
                    this.OnGmlColourChanged(e);
                    this.OnPropertyChanged("GmlColour", e, _gmlColourReference);
                }
            }
        }
        
        /// <summary>
        /// The GmlSvgParameters property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlFonts")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGmlSvgParameter> GmlSvgParameters
        {
            get
            {
                return this._gmlSvgParameters;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new GmlFontReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
                            "Font")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Weight property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WeightChanging;
        
        /// <summary>
        /// Gets fired when the Weight property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WeightChanged;
        
        /// <summary>
        /// Gets fired before the Family property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FamilyChanging;
        
        /// <summary>
        /// Gets fired when the Family property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FamilyChanged;
        
        /// <summary>
        /// Gets fired before the Style property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StyleChanging;
        
        /// <summary>
        /// Gets fired when the Style property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StyleChanged;
        
        /// <summary>
        /// Gets fired before the AbsoluteSize property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AbsoluteSizeChanging;
        
        /// <summary>
        /// Gets fired when the AbsoluteSize property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AbsoluteSizeChanged;
        
        /// <summary>
        /// Gets fired before the Size property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SizeChanging;
        
        /// <summary>
        /// Gets fired when the Size property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SizeChanged;
        
        /// <summary>
        /// Gets fired before the GmlColour property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlColourChanging;
        
        /// <summary>
        /// Gets fired when the GmlColour property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlColourChanged;
        
        private static ITypedElement RetrieveWeightAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlFont.ClassInstance)).Resolve("weight")));
        }
        
        /// <summary>
        /// Raises the WeightChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWeightChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WeightChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WeightChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWeightChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WeightChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFamilyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlFont.ClassInstance)).Resolve("family")));
        }
        
        /// <summary>
        /// Raises the FamilyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFamilyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FamilyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FamilyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFamilyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FamilyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStyleAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlFont.ClassInstance)).Resolve("style")));
        }
        
        /// <summary>
        /// Raises the StyleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStyleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StyleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StyleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStyleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StyleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAbsoluteSizeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlFont.ClassInstance)).Resolve("absoluteSize")));
        }
        
        /// <summary>
        /// Raises the AbsoluteSizeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAbsoluteSizeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AbsoluteSizeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AbsoluteSizeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAbsoluteSizeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AbsoluteSizeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSizeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlFont.ClassInstance)).Resolve("size")));
        }
        
        /// <summary>
        /// Raises the SizeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSizeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SizeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SizeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSizeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SizeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGmlTextSymbolsReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlFont.ClassInstance)).Resolve("GmlTextSymbols")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GmlTextSymbols property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlTextSymbolsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("GmlTextSymbols", e, _gmlTextSymbolsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GmlTextSymbols property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlTextSymbolsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GmlTextSymbols", e, _gmlTextSymbolsReference);
        }
        
        private static ITypedElement RetrieveGmlColourReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlFont.ClassInstance)).Resolve("GmlColour")));
        }
        
        /// <summary>
        /// Raises the GmlColourChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlColourChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlColourChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GmlColourChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlColourChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlColourChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GmlColour property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGmlColour(object sender, System.EventArgs eventArgs)
        {
            this.GmlColour = null;
        }
        
        private static ITypedElement RetrieveGmlSvgParametersReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlFont.ClassInstance)).Resolve("GmlSvgParameters")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GmlSvgParameters property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlSvgParametersCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("GmlSvgParameters", e, _gmlSvgParametersReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GmlSvgParameters property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlSvgParametersCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GmlSvgParameters", e, _gmlSvgParametersReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "WEIGHT"))
            {
                return this.Weight;
            }
            if ((attribute == "FAMILY"))
            {
                return this.Family;
            }
            if ((attribute == "STYLE"))
            {
                return this.Style;
            }
            if ((attribute == "ABSOLUTESIZE"))
            {
                return this.AbsoluteSize;
            }
            if ((attribute == "SIZE"))
            {
                return this.Size;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "GMLTEXTSYMBOLS"))
            {
                return this._gmlTextSymbols;
            }
            if ((feature == "GMLSVGPARAMETERS"))
            {
                return this._gmlSvgParameters;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "GMLCOLOUR"))
            {
                this.GmlColour = ((IGmlColour)(value));
                return;
            }
            if ((feature == "WEIGHT"))
            {
                this.Weight = ((string)(value));
                return;
            }
            if ((feature == "FAMILY"))
            {
                this.Family = ((string)(value));
                return;
            }
            if ((feature == "STYLE"))
            {
                this.Style = ((string)(value));
                return;
            }
            if ((feature == "ABSOLUTESIZE"))
            {
                this.AbsoluteSize = ((bool)(value));
                return;
            }
            if ((feature == "SIZE"))
            {
                this.Size = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "GmlColour"))
            {
                return new GmlColourProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "GmlColour"))
            {
                return new GmlColourProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
                        "Font")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the GmlFont class
        /// </summary>
        public class GmlFontReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private GmlFont _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public GmlFontReferencedElementsCollection(GmlFont parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.GmlTextSymbols.Count);
                    if ((this._parent.GmlColour != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.GmlSvgParameters.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.GmlTextSymbols.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.GmlColourChanged += this.PropagateValueChanges;
                this._parent.GmlSvgParameters.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.GmlTextSymbols.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.GmlColourChanged -= this.PropagateValueChanges;
                this._parent.GmlSvgParameters.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IGmlTextSymbol gmlTextSymbolsCasted = item.As<IGmlTextSymbol>();
                if ((gmlTextSymbolsCasted != null))
                {
                    this._parent.GmlTextSymbols.Add(gmlTextSymbolsCasted);
                }
                if ((this._parent.GmlColour == null))
                {
                    IGmlColour gmlColourCasted = item.As<IGmlColour>();
                    if ((gmlColourCasted != null))
                    {
                        this._parent.GmlColour = gmlColourCasted;
                        return;
                    }
                }
                IGmlSvgParameter gmlSvgParametersCasted = item.As<IGmlSvgParameter>();
                if ((gmlSvgParametersCasted != null))
                {
                    this._parent.GmlSvgParameters.Add(gmlSvgParametersCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.GmlTextSymbols.Clear();
                this._parent.GmlColour = null;
                this._parent.GmlSvgParameters.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.GmlTextSymbols.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.GmlColour))
                {
                    return true;
                }
                if (this._parent.GmlSvgParameters.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> gmlTextSymbolsEnumerator = this._parent.GmlTextSymbols.GetEnumerator();
                try
                {
                    for (
                    ; gmlTextSymbolsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = gmlTextSymbolsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    gmlTextSymbolsEnumerator.Dispose();
                }
                if ((this._parent.GmlColour != null))
                {
                    array[arrayIndex] = this._parent.GmlColour;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> gmlSvgParametersEnumerator = this._parent.GmlSvgParameters.GetEnumerator();
                try
                {
                    for (
                    ; gmlSvgParametersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = gmlSvgParametersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    gmlSvgParametersEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IGmlTextSymbol gmlTextSymbolItem = item.As<IGmlTextSymbol>();
                if (((gmlTextSymbolItem != null) 
                            && this._parent.GmlTextSymbols.Remove(gmlTextSymbolItem)))
                {
                    return true;
                }
                if ((this._parent.GmlColour == item))
                {
                    this._parent.GmlColour = null;
                    return true;
                }
                IGmlSvgParameter gmlSvgParameterItem = item.As<IGmlSvgParameter>();
                if (((gmlSvgParameterItem != null) 
                            && this._parent.GmlSvgParameters.Remove(gmlSvgParameterItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.GmlTextSymbols).Concat(this._parent.GmlColour).Concat(this._parent.GmlSvgParameters).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the weight property
        /// </summary>
        private sealed class WeightProxy : ModelPropertyChange<IGmlFont, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WeightProxy(IGmlFont modelElement) : 
                    base(modelElement, "weight")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Weight;
                }
                set
                {
                    this.ModelElement.Weight = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the family property
        /// </summary>
        private sealed class FamilyProxy : ModelPropertyChange<IGmlFont, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FamilyProxy(IGmlFont modelElement) : 
                    base(modelElement, "family")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Family;
                }
                set
                {
                    this.ModelElement.Family = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the style property
        /// </summary>
        private sealed class StyleProxy : ModelPropertyChange<IGmlFont, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StyleProxy(IGmlFont modelElement) : 
                    base(modelElement, "style")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Style;
                }
                set
                {
                    this.ModelElement.Style = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the absoluteSize property
        /// </summary>
        private sealed class AbsoluteSizeProxy : ModelPropertyChange<IGmlFont, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AbsoluteSizeProxy(IGmlFont modelElement) : 
                    base(modelElement, "absoluteSize")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.AbsoluteSize;
                }
                set
                {
                    this.ModelElement.AbsoluteSize = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the size property
        /// </summary>
        private sealed class SizeProxy : ModelPropertyChange<IGmlFont, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SizeProxy(IGmlFont modelElement) : 
                    base(modelElement, "size")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Size;
                }
                set
                {
                    this.ModelElement.Size = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GmlColour property
        /// </summary>
        private sealed class GmlColourProxy : ModelPropertyChange<IGmlFont, IGmlColour>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GmlColourProxy(IGmlFont modelElement) : 
                    base(modelElement, "GmlColour")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGmlColour Value
            {
                get
                {
                    return this.ModelElement.GmlColour;
                }
                set
                {
                    this.ModelElement.GmlColour = value;
                }
            }
        }
    }
}

