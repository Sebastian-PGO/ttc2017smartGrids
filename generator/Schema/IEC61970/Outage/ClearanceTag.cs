//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Outage
{
    
    
    /// <summary>
    /// The default implementation of the ClearanceTag class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Outage")]
    [XmlNamespacePrefixAttribute("cimOutage")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Outage/ClearanceTag")]
    [DebuggerDisplayAttribute("ClearanceTag {UUID}")]
    public partial class ClearanceTag : IdentifiedObject, IClearanceTag, IModelElement
    {
        
        /// <summary>
        /// The backing field for the GroundReqFlag property
        /// </summary>
        private bool _groundReqFlag;
        
        private static Lazy<ITypedElement> _groundReqFlagAttribute = new Lazy<ITypedElement>(RetrieveGroundReqFlagAttribute);
        
        /// <summary>
        /// The backing field for the TagIssueTime property
        /// </summary>
        private DateTime _tagIssueTime;
        
        private static Lazy<ITypedElement> _tagIssueTimeAttribute = new Lazy<ITypedElement>(RetrieveTagIssueTimeAttribute);
        
        /// <summary>
        /// The backing field for the WorkEndTime property
        /// </summary>
        private DateTime _workEndTime;
        
        private static Lazy<ITypedElement> _workEndTimeAttribute = new Lazy<ITypedElement>(RetrieveWorkEndTimeAttribute);
        
        /// <summary>
        /// The backing field for the AuthorityName property
        /// </summary>
        private string _authorityName;
        
        private static Lazy<ITypedElement> _authorityNameAttribute = new Lazy<ITypedElement>(RetrieveAuthorityNameAttribute);
        
        /// <summary>
        /// The backing field for the PhaseCheckReqFlag property
        /// </summary>
        private bool _phaseCheckReqFlag;
        
        private static Lazy<ITypedElement> _phaseCheckReqFlagAttribute = new Lazy<ITypedElement>(RetrievePhaseCheckReqFlagAttribute);
        
        /// <summary>
        /// The backing field for the DeenergizeReqFlag property
        /// </summary>
        private bool _deenergizeReqFlag;
        
        private static Lazy<ITypedElement> _deenergizeReqFlagAttribute = new Lazy<ITypedElement>(RetrieveDeenergizeReqFlagAttribute);
        
        /// <summary>
        /// The backing field for the WorkStartTime property
        /// </summary>
        private DateTime _workStartTime;
        
        private static Lazy<ITypedElement> _workStartTimeAttribute = new Lazy<ITypedElement>(RetrieveWorkStartTimeAttribute);
        
        /// <summary>
        /// The backing field for the WorkDescription property
        /// </summary>
        private string _workDescription;
        
        private static Lazy<ITypedElement> _workDescriptionAttribute = new Lazy<ITypedElement>(RetrieveWorkDescriptionAttribute);
        
        private static Lazy<ITypedElement> _safetyDocumentReference = new Lazy<ITypedElement>(RetrieveSafetyDocumentReference);
        
        /// <summary>
        /// The backing field for the SafetyDocument property
        /// </summary>
        private ISafetyDocument _safetyDocument;
        
        private static Lazy<ITypedElement> _clearanceTagTypeReference = new Lazy<ITypedElement>(RetrieveClearanceTagTypeReference);
        
        /// <summary>
        /// The backing field for the ClearanceTagType property
        /// </summary>
        private IClearanceTagType _clearanceTagType;
        
        private static Lazy<ITypedElement> _conductingEquipmentReference = new Lazy<ITypedElement>(RetrieveConductingEquipmentReference);
        
        /// <summary>
        /// The backing field for the ConductingEquipment property
        /// </summary>
        private IConductingEquipment _conductingEquipment;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The groundReqFlag property
        /// </summary>
        [XmlElementNameAttribute("groundReqFlag")]
        [XmlAttributeAttribute(true)]
        public virtual bool GroundReqFlag
        {
            get
            {
                return this._groundReqFlag;
            }
            set
            {
                if ((this._groundReqFlag != value))
                {
                    bool old = this._groundReqFlag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGroundReqFlagChanging(e);
                    this.OnPropertyChanging("GroundReqFlag", e, _groundReqFlagAttribute);
                    this._groundReqFlag = value;
                    this.OnGroundReqFlagChanged(e);
                    this.OnPropertyChanged("GroundReqFlag", e, _groundReqFlagAttribute);
                }
            }
        }
        
        /// <summary>
        /// The tagIssueTime property
        /// </summary>
        [XmlElementNameAttribute("tagIssueTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime TagIssueTime
        {
            get
            {
                return this._tagIssueTime;
            }
            set
            {
                if ((this._tagIssueTime != value))
                {
                    DateTime old = this._tagIssueTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTagIssueTimeChanging(e);
                    this.OnPropertyChanging("TagIssueTime", e, _tagIssueTimeAttribute);
                    this._tagIssueTime = value;
                    this.OnTagIssueTimeChanged(e);
                    this.OnPropertyChanged("TagIssueTime", e, _tagIssueTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The workEndTime property
        /// </summary>
        [XmlElementNameAttribute("workEndTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime WorkEndTime
        {
            get
            {
                return this._workEndTime;
            }
            set
            {
                if ((this._workEndTime != value))
                {
                    DateTime old = this._workEndTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWorkEndTimeChanging(e);
                    this.OnPropertyChanging("WorkEndTime", e, _workEndTimeAttribute);
                    this._workEndTime = value;
                    this.OnWorkEndTimeChanged(e);
                    this.OnPropertyChanged("WorkEndTime", e, _workEndTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The authorityName property
        /// </summary>
        [XmlElementNameAttribute("authorityName")]
        [XmlAttributeAttribute(true)]
        public virtual string AuthorityName
        {
            get
            {
                return this._authorityName;
            }
            set
            {
                if ((this._authorityName != value))
                {
                    string old = this._authorityName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAuthorityNameChanging(e);
                    this.OnPropertyChanging("AuthorityName", e, _authorityNameAttribute);
                    this._authorityName = value;
                    this.OnAuthorityNameChanged(e);
                    this.OnPropertyChanged("AuthorityName", e, _authorityNameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The phaseCheckReqFlag property
        /// </summary>
        [XmlElementNameAttribute("phaseCheckReqFlag")]
        [XmlAttributeAttribute(true)]
        public virtual bool PhaseCheckReqFlag
        {
            get
            {
                return this._phaseCheckReqFlag;
            }
            set
            {
                if ((this._phaseCheckReqFlag != value))
                {
                    bool old = this._phaseCheckReqFlag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhaseCheckReqFlagChanging(e);
                    this.OnPropertyChanging("PhaseCheckReqFlag", e, _phaseCheckReqFlagAttribute);
                    this._phaseCheckReqFlag = value;
                    this.OnPhaseCheckReqFlagChanged(e);
                    this.OnPropertyChanged("PhaseCheckReqFlag", e, _phaseCheckReqFlagAttribute);
                }
            }
        }
        
        /// <summary>
        /// The deenergizeReqFlag property
        /// </summary>
        [XmlElementNameAttribute("deenergizeReqFlag")]
        [XmlAttributeAttribute(true)]
        public virtual bool DeenergizeReqFlag
        {
            get
            {
                return this._deenergizeReqFlag;
            }
            set
            {
                if ((this._deenergizeReqFlag != value))
                {
                    bool old = this._deenergizeReqFlag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDeenergizeReqFlagChanging(e);
                    this.OnPropertyChanging("DeenergizeReqFlag", e, _deenergizeReqFlagAttribute);
                    this._deenergizeReqFlag = value;
                    this.OnDeenergizeReqFlagChanged(e);
                    this.OnPropertyChanged("DeenergizeReqFlag", e, _deenergizeReqFlagAttribute);
                }
            }
        }
        
        /// <summary>
        /// The workStartTime property
        /// </summary>
        [XmlElementNameAttribute("workStartTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime WorkStartTime
        {
            get
            {
                return this._workStartTime;
            }
            set
            {
                if ((this._workStartTime != value))
                {
                    DateTime old = this._workStartTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWorkStartTimeChanging(e);
                    this.OnPropertyChanging("WorkStartTime", e, _workStartTimeAttribute);
                    this._workStartTime = value;
                    this.OnWorkStartTimeChanged(e);
                    this.OnPropertyChanged("WorkStartTime", e, _workStartTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The workDescription property
        /// </summary>
        [XmlElementNameAttribute("workDescription")]
        [XmlAttributeAttribute(true)]
        public virtual string WorkDescription
        {
            get
            {
                return this._workDescription;
            }
            set
            {
                if ((this._workDescription != value))
                {
                    string old = this._workDescription;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWorkDescriptionChanging(e);
                    this.OnPropertyChanging("WorkDescription", e, _workDescriptionAttribute);
                    this._workDescription = value;
                    this.OnWorkDescriptionChanged(e);
                    this.OnPropertyChanged("WorkDescription", e, _workDescriptionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The SafetyDocument property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ClearanceTags")]
        public virtual ISafetyDocument SafetyDocument
        {
            get
            {
                return this._safetyDocument;
            }
            set
            {
                if ((this._safetyDocument != value))
                {
                    ISafetyDocument old = this._safetyDocument;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSafetyDocumentChanging(e);
                    this.OnPropertyChanging("SafetyDocument", e, _safetyDocumentReference);
                    this._safetyDocument = value;
                    if ((old != null))
                    {
                        old.ClearanceTags.Remove(this);
                        old.Deleted -= this.OnResetSafetyDocument;
                    }
                    if ((value != null))
                    {
                        value.ClearanceTags.Add(this);
                        value.Deleted += this.OnResetSafetyDocument;
                    }
                    this.OnSafetyDocumentChanged(e);
                    this.OnPropertyChanged("SafetyDocument", e, _safetyDocumentReference);
                }
            }
        }
        
        /// <summary>
        /// The ClearanceTagType property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ClearanceTags")]
        public virtual IClearanceTagType ClearanceTagType
        {
            get
            {
                return this._clearanceTagType;
            }
            set
            {
                if ((this._clearanceTagType != value))
                {
                    IClearanceTagType old = this._clearanceTagType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnClearanceTagTypeChanging(e);
                    this.OnPropertyChanging("ClearanceTagType", e, _clearanceTagTypeReference);
                    this._clearanceTagType = value;
                    if ((old != null))
                    {
                        old.ClearanceTags.Remove(this);
                        old.Deleted -= this.OnResetClearanceTagType;
                    }
                    if ((value != null))
                    {
                        value.ClearanceTags.Add(this);
                        value.Deleted += this.OnResetClearanceTagType;
                    }
                    this.OnClearanceTagTypeChanged(e);
                    this.OnPropertyChanged("ClearanceTagType", e, _clearanceTagTypeReference);
                }
            }
        }
        
        /// <summary>
        /// The ConductingEquipment property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ClearanceTags")]
        public virtual IConductingEquipment ConductingEquipment
        {
            get
            {
                return this._conductingEquipment;
            }
            set
            {
                if ((this._conductingEquipment != value))
                {
                    IConductingEquipment old = this._conductingEquipment;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConductingEquipmentChanging(e);
                    this.OnPropertyChanging("ConductingEquipment", e, _conductingEquipmentReference);
                    this._conductingEquipment = value;
                    if ((old != null))
                    {
                        old.ClearanceTags.Remove(this);
                        old.Deleted -= this.OnResetConductingEquipment;
                    }
                    if ((value != null))
                    {
                        value.ClearanceTags.Add(this);
                        value.Deleted += this.OnResetConductingEquipment;
                    }
                    this.OnConductingEquipmentChanged(e);
                    this.OnPropertyChanged("ConductingEquipment", e, _conductingEquipmentReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ClearanceTagReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Outage/ClearanceTag")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the GroundReqFlag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GroundReqFlagChanging;
        
        /// <summary>
        /// Gets fired when the GroundReqFlag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GroundReqFlagChanged;
        
        /// <summary>
        /// Gets fired before the TagIssueTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TagIssueTimeChanging;
        
        /// <summary>
        /// Gets fired when the TagIssueTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TagIssueTimeChanged;
        
        /// <summary>
        /// Gets fired before the WorkEndTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkEndTimeChanging;
        
        /// <summary>
        /// Gets fired when the WorkEndTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkEndTimeChanged;
        
        /// <summary>
        /// Gets fired before the AuthorityName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AuthorityNameChanging;
        
        /// <summary>
        /// Gets fired when the AuthorityName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AuthorityNameChanged;
        
        /// <summary>
        /// Gets fired before the PhaseCheckReqFlag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseCheckReqFlagChanging;
        
        /// <summary>
        /// Gets fired when the PhaseCheckReqFlag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseCheckReqFlagChanged;
        
        /// <summary>
        /// Gets fired before the DeenergizeReqFlag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeenergizeReqFlagChanging;
        
        /// <summary>
        /// Gets fired when the DeenergizeReqFlag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeenergizeReqFlagChanged;
        
        /// <summary>
        /// Gets fired before the WorkStartTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkStartTimeChanging;
        
        /// <summary>
        /// Gets fired when the WorkStartTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkStartTimeChanged;
        
        /// <summary>
        /// Gets fired before the WorkDescription property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkDescriptionChanging;
        
        /// <summary>
        /// Gets fired when the WorkDescription property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkDescriptionChanged;
        
        /// <summary>
        /// Gets fired before the SafetyDocument property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SafetyDocumentChanging;
        
        /// <summary>
        /// Gets fired when the SafetyDocument property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SafetyDocumentChanged;
        
        /// <summary>
        /// Gets fired before the ClearanceTagType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClearanceTagTypeChanging;
        
        /// <summary>
        /// Gets fired when the ClearanceTagType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClearanceTagTypeChanged;
        
        /// <summary>
        /// Gets fired before the ConductingEquipment property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConductingEquipmentChanging;
        
        /// <summary>
        /// Gets fired when the ConductingEquipment property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConductingEquipmentChanged;
        
        private static ITypedElement RetrieveGroundReqFlagAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ClearanceTag.ClassInstance)).Resolve("groundReqFlag")));
        }
        
        /// <summary>
        /// Raises the GroundReqFlagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGroundReqFlagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GroundReqFlagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GroundReqFlagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGroundReqFlagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GroundReqFlagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTagIssueTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ClearanceTag.ClassInstance)).Resolve("tagIssueTime")));
        }
        
        /// <summary>
        /// Raises the TagIssueTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTagIssueTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TagIssueTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TagIssueTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTagIssueTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TagIssueTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveWorkEndTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ClearanceTag.ClassInstance)).Resolve("workEndTime")));
        }
        
        /// <summary>
        /// Raises the WorkEndTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkEndTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkEndTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WorkEndTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkEndTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkEndTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAuthorityNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ClearanceTag.ClassInstance)).Resolve("authorityName")));
        }
        
        /// <summary>
        /// Raises the AuthorityNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuthorityNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AuthorityNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AuthorityNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuthorityNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AuthorityNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePhaseCheckReqFlagAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ClearanceTag.ClassInstance)).Resolve("phaseCheckReqFlag")));
        }
        
        /// <summary>
        /// Raises the PhaseCheckReqFlagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseCheckReqFlagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseCheckReqFlagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhaseCheckReqFlagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseCheckReqFlagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseCheckReqFlagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDeenergizeReqFlagAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ClearanceTag.ClassInstance)).Resolve("deenergizeReqFlag")));
        }
        
        /// <summary>
        /// Raises the DeenergizeReqFlagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeenergizeReqFlagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeenergizeReqFlagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DeenergizeReqFlagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeenergizeReqFlagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeenergizeReqFlagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveWorkStartTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ClearanceTag.ClassInstance)).Resolve("workStartTime")));
        }
        
        /// <summary>
        /// Raises the WorkStartTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkStartTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkStartTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WorkStartTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkStartTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkStartTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveWorkDescriptionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ClearanceTag.ClassInstance)).Resolve("workDescription")));
        }
        
        /// <summary>
        /// Raises the WorkDescriptionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkDescriptionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkDescriptionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WorkDescriptionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkDescriptionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkDescriptionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSafetyDocumentReference()
        {
            return ((ITypedElement)(((ModelElement)(ClearanceTag.ClassInstance)).Resolve("SafetyDocument")));
        }
        
        /// <summary>
        /// Raises the SafetyDocumentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSafetyDocumentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SafetyDocumentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SafetyDocumentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSafetyDocumentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SafetyDocumentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SafetyDocument property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSafetyDocument(object sender, System.EventArgs eventArgs)
        {
            this.SafetyDocument = null;
        }
        
        private static ITypedElement RetrieveClearanceTagTypeReference()
        {
            return ((ITypedElement)(((ModelElement)(ClearanceTag.ClassInstance)).Resolve("ClearanceTagType")));
        }
        
        /// <summary>
        /// Raises the ClearanceTagTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClearanceTagTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClearanceTagTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClearanceTagTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClearanceTagTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClearanceTagTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ClearanceTagType property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetClearanceTagType(object sender, System.EventArgs eventArgs)
        {
            this.ClearanceTagType = null;
        }
        
        private static ITypedElement RetrieveConductingEquipmentReference()
        {
            return ((ITypedElement)(((ModelElement)(ClearanceTag.ClassInstance)).Resolve("ConductingEquipment")));
        }
        
        /// <summary>
        /// Raises the ConductingEquipmentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConductingEquipmentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConductingEquipmentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConductingEquipmentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConductingEquipmentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConductingEquipmentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ConductingEquipment property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetConductingEquipment(object sender, System.EventArgs eventArgs)
        {
            this.ConductingEquipment = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "GROUNDREQFLAG"))
            {
                return this.GroundReqFlag;
            }
            if ((attribute == "TAGISSUETIME"))
            {
                return this.TagIssueTime;
            }
            if ((attribute == "WORKENDTIME"))
            {
                return this.WorkEndTime;
            }
            if ((attribute == "AUTHORITYNAME"))
            {
                return this.AuthorityName;
            }
            if ((attribute == "PHASECHECKREQFLAG"))
            {
                return this.PhaseCheckReqFlag;
            }
            if ((attribute == "DEENERGIZEREQFLAG"))
            {
                return this.DeenergizeReqFlag;
            }
            if ((attribute == "WORKSTARTTIME"))
            {
                return this.WorkStartTime;
            }
            if ((attribute == "WORKDESCRIPTION"))
            {
                return this.WorkDescription;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SAFETYDOCUMENT"))
            {
                this.SafetyDocument = ((ISafetyDocument)(value));
                return;
            }
            if ((feature == "CLEARANCETAGTYPE"))
            {
                this.ClearanceTagType = ((IClearanceTagType)(value));
                return;
            }
            if ((feature == "CONDUCTINGEQUIPMENT"))
            {
                this.ConductingEquipment = ((IConductingEquipment)(value));
                return;
            }
            if ((feature == "GROUNDREQFLAG"))
            {
                this.GroundReqFlag = ((bool)(value));
                return;
            }
            if ((feature == "TAGISSUETIME"))
            {
                this.TagIssueTime = ((DateTime)(value));
                return;
            }
            if ((feature == "WORKENDTIME"))
            {
                this.WorkEndTime = ((DateTime)(value));
                return;
            }
            if ((feature == "AUTHORITYNAME"))
            {
                this.AuthorityName = ((string)(value));
                return;
            }
            if ((feature == "PHASECHECKREQFLAG"))
            {
                this.PhaseCheckReqFlag = ((bool)(value));
                return;
            }
            if ((feature == "DEENERGIZEREQFLAG"))
            {
                this.DeenergizeReqFlag = ((bool)(value));
                return;
            }
            if ((feature == "WORKSTARTTIME"))
            {
                this.WorkStartTime = ((DateTime)(value));
                return;
            }
            if ((feature == "WORKDESCRIPTION"))
            {
                this.WorkDescription = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SafetyDocument"))
            {
                return new SafetyDocumentProxy(this);
            }
            if ((attribute == "ClearanceTagType"))
            {
                return new ClearanceTagTypeProxy(this);
            }
            if ((attribute == "ConductingEquipment"))
            {
                return new ConductingEquipmentProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SafetyDocument"))
            {
                return new SafetyDocumentProxy(this);
            }
            if ((reference == "ClearanceTagType"))
            {
                return new ClearanceTagTypeProxy(this);
            }
            if ((reference == "ConductingEquipment"))
            {
                return new ConductingEquipmentProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Outage/ClearanceTag")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ClearanceTag class
        /// </summary>
        public class ClearanceTagReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ClearanceTag _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ClearanceTagReferencedElementsCollection(ClearanceTag parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.SafetyDocument != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ClearanceTagType != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ConductingEquipment != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SafetyDocumentChanged += this.PropagateValueChanges;
                this._parent.ClearanceTagTypeChanged += this.PropagateValueChanges;
                this._parent.ConductingEquipmentChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SafetyDocumentChanged -= this.PropagateValueChanges;
                this._parent.ClearanceTagTypeChanged -= this.PropagateValueChanges;
                this._parent.ConductingEquipmentChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.SafetyDocument == null))
                {
                    ISafetyDocument safetyDocumentCasted = item.As<ISafetyDocument>();
                    if ((safetyDocumentCasted != null))
                    {
                        this._parent.SafetyDocument = safetyDocumentCasted;
                        return;
                    }
                }
                if ((this._parent.ClearanceTagType == null))
                {
                    IClearanceTagType clearanceTagTypeCasted = item.As<IClearanceTagType>();
                    if ((clearanceTagTypeCasted != null))
                    {
                        this._parent.ClearanceTagType = clearanceTagTypeCasted;
                        return;
                    }
                }
                if ((this._parent.ConductingEquipment == null))
                {
                    IConductingEquipment conductingEquipmentCasted = item.As<IConductingEquipment>();
                    if ((conductingEquipmentCasted != null))
                    {
                        this._parent.ConductingEquipment = conductingEquipmentCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SafetyDocument = null;
                this._parent.ClearanceTagType = null;
                this._parent.ConductingEquipment = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.SafetyDocument))
                {
                    return true;
                }
                if ((item == this._parent.ClearanceTagType))
                {
                    return true;
                }
                if ((item == this._parent.ConductingEquipment))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.SafetyDocument != null))
                {
                    array[arrayIndex] = this._parent.SafetyDocument;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ClearanceTagType != null))
                {
                    array[arrayIndex] = this._parent.ClearanceTagType;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ConductingEquipment != null))
                {
                    array[arrayIndex] = this._parent.ConductingEquipment;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.SafetyDocument == item))
                {
                    this._parent.SafetyDocument = null;
                    return true;
                }
                if ((this._parent.ClearanceTagType == item))
                {
                    this._parent.ClearanceTagType = null;
                    return true;
                }
                if ((this._parent.ConductingEquipment == item))
                {
                    this._parent.ConductingEquipment = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SafetyDocument).Concat(this._parent.ClearanceTagType).Concat(this._parent.ConductingEquipment).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the groundReqFlag property
        /// </summary>
        private sealed class GroundReqFlagProxy : ModelPropertyChange<IClearanceTag, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GroundReqFlagProxy(IClearanceTag modelElement) : 
                    base(modelElement, "groundReqFlag")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.GroundReqFlag;
                }
                set
                {
                    this.ModelElement.GroundReqFlag = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the tagIssueTime property
        /// </summary>
        private sealed class TagIssueTimeProxy : ModelPropertyChange<IClearanceTag, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TagIssueTimeProxy(IClearanceTag modelElement) : 
                    base(modelElement, "tagIssueTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.TagIssueTime;
                }
                set
                {
                    this.ModelElement.TagIssueTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the workEndTime property
        /// </summary>
        private sealed class WorkEndTimeProxy : ModelPropertyChange<IClearanceTag, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WorkEndTimeProxy(IClearanceTag modelElement) : 
                    base(modelElement, "workEndTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.WorkEndTime;
                }
                set
                {
                    this.ModelElement.WorkEndTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the authorityName property
        /// </summary>
        private sealed class AuthorityNameProxy : ModelPropertyChange<IClearanceTag, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AuthorityNameProxy(IClearanceTag modelElement) : 
                    base(modelElement, "authorityName")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AuthorityName;
                }
                set
                {
                    this.ModelElement.AuthorityName = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phaseCheckReqFlag property
        /// </summary>
        private sealed class PhaseCheckReqFlagProxy : ModelPropertyChange<IClearanceTag, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhaseCheckReqFlagProxy(IClearanceTag modelElement) : 
                    base(modelElement, "phaseCheckReqFlag")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.PhaseCheckReqFlag;
                }
                set
                {
                    this.ModelElement.PhaseCheckReqFlag = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the deenergizeReqFlag property
        /// </summary>
        private sealed class DeenergizeReqFlagProxy : ModelPropertyChange<IClearanceTag, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DeenergizeReqFlagProxy(IClearanceTag modelElement) : 
                    base(modelElement, "deenergizeReqFlag")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.DeenergizeReqFlag;
                }
                set
                {
                    this.ModelElement.DeenergizeReqFlag = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the workStartTime property
        /// </summary>
        private sealed class WorkStartTimeProxy : ModelPropertyChange<IClearanceTag, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WorkStartTimeProxy(IClearanceTag modelElement) : 
                    base(modelElement, "workStartTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.WorkStartTime;
                }
                set
                {
                    this.ModelElement.WorkStartTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the workDescription property
        /// </summary>
        private sealed class WorkDescriptionProxy : ModelPropertyChange<IClearanceTag, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WorkDescriptionProxy(IClearanceTag modelElement) : 
                    base(modelElement, "workDescription")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.WorkDescription;
                }
                set
                {
                    this.ModelElement.WorkDescription = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SafetyDocument property
        /// </summary>
        private sealed class SafetyDocumentProxy : ModelPropertyChange<IClearanceTag, ISafetyDocument>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SafetyDocumentProxy(IClearanceTag modelElement) : 
                    base(modelElement, "SafetyDocument")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISafetyDocument Value
            {
                get
                {
                    return this.ModelElement.SafetyDocument;
                }
                set
                {
                    this.ModelElement.SafetyDocument = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ClearanceTagType property
        /// </summary>
        private sealed class ClearanceTagTypeProxy : ModelPropertyChange<IClearanceTag, IClearanceTagType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ClearanceTagTypeProxy(IClearanceTag modelElement) : 
                    base(modelElement, "ClearanceTagType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IClearanceTagType Value
            {
                get
                {
                    return this.ModelElement.ClearanceTagType;
                }
                set
                {
                    this.ModelElement.ClearanceTagType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ConductingEquipment property
        /// </summary>
        private sealed class ConductingEquipmentProxy : ModelPropertyChange<IClearanceTag, IConductingEquipment>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConductingEquipmentProxy(IClearanceTag modelElement) : 
                    base(modelElement, "ConductingEquipment")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IConductingEquipment Value
            {
                get
                {
                    return this.ModelElement.ConductingEquipment;
                }
                set
                {
                    this.ModelElement.ConductingEquipment = value;
                }
            }
        }
    }
}

