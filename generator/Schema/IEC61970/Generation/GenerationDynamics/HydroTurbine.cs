//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics
{
    
    
    /// <summary>
    /// The default implementation of the HydroTurbine class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#GenerationDynamics")]
    [XmlNamespacePrefixAttribute("cimGenerationDynamics")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/GenerationDynamics" +
        "/HydroTurbine")]
    [DebuggerDisplayAttribute("HydroTurbine {UUID}")]
    public partial class HydroTurbine : PrimeMover, IHydroTurbine, IModelElement
    {
        
        /// <summary>
        /// The backing field for the MaxHeadMaxP property
        /// </summary>
        private float _maxHeadMaxP;
        
        private static Lazy<ITypedElement> _maxHeadMaxPAttribute = new Lazy<ITypedElement>(RetrieveMaxHeadMaxPAttribute);
        
        /// <summary>
        /// The backing field for the TransientDroopTime property
        /// </summary>
        private float _transientDroopTime;
        
        private static Lazy<ITypedElement> _transientDroopTimeAttribute = new Lazy<ITypedElement>(RetrieveTransientDroopTimeAttribute);
        
        /// <summary>
        /// The backing field for the GateUpperLimit property
        /// </summary>
        private float _gateUpperLimit;
        
        private static Lazy<ITypedElement> _gateUpperLimitAttribute = new Lazy<ITypedElement>(RetrieveGateUpperLimitAttribute);
        
        /// <summary>
        /// The backing field for the MinHeadMaxP property
        /// </summary>
        private float _minHeadMaxP;
        
        private static Lazy<ITypedElement> _minHeadMaxPAttribute = new Lazy<ITypedElement>(RetrieveMinHeadMaxPAttribute);
        
        /// <summary>
        /// The backing field for the TurbineRating property
        /// </summary>
        private float _turbineRating;
        
        private static Lazy<ITypedElement> _turbineRatingAttribute = new Lazy<ITypedElement>(RetrieveTurbineRatingAttribute);
        
        /// <summary>
        /// The backing field for the TurbineType property
        /// </summary>
        private Nullable<TurbineType> _turbineType;
        
        private static Lazy<ITypedElement> _turbineTypeAttribute = new Lazy<ITypedElement>(RetrieveTurbineTypeAttribute);
        
        /// <summary>
        /// The backing field for the SpeedRating property
        /// </summary>
        private float _speedRating;
        
        private static Lazy<ITypedElement> _speedRatingAttribute = new Lazy<ITypedElement>(RetrieveSpeedRatingAttribute);
        
        /// <summary>
        /// The backing field for the GateRateLimit property
        /// </summary>
        private float _gateRateLimit;
        
        private static Lazy<ITypedElement> _gateRateLimitAttribute = new Lazy<ITypedElement>(RetrieveGateRateLimitAttribute);
        
        /// <summary>
        /// The backing field for the WaterStartingTime property
        /// </summary>
        private float _waterStartingTime;
        
        private static Lazy<ITypedElement> _waterStartingTimeAttribute = new Lazy<ITypedElement>(RetrieveWaterStartingTimeAttribute);
        
        /// <summary>
        /// The backing field for the TransientRegulation property
        /// </summary>
        private float _transientRegulation;
        
        private static Lazy<ITypedElement> _transientRegulationAttribute = new Lazy<ITypedElement>(RetrieveTransientRegulationAttribute);
        
        /// <summary>
        /// The backing field for the SpeedRegulation property
        /// </summary>
        private float _speedRegulation;
        
        private static Lazy<ITypedElement> _speedRegulationAttribute = new Lazy<ITypedElement>(RetrieveSpeedRegulationAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The maxHeadMaxP property
        /// </summary>
        [XmlElementNameAttribute("maxHeadMaxP")]
        [XmlAttributeAttribute(true)]
        public virtual float MaxHeadMaxP
        {
            get
            {
                return this._maxHeadMaxP;
            }
            set
            {
                if ((this._maxHeadMaxP != value))
                {
                    float old = this._maxHeadMaxP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxHeadMaxPChanging(e);
                    this.OnPropertyChanging("MaxHeadMaxP", e, _maxHeadMaxPAttribute);
                    this._maxHeadMaxP = value;
                    this.OnMaxHeadMaxPChanged(e);
                    this.OnPropertyChanged("MaxHeadMaxP", e, _maxHeadMaxPAttribute);
                }
            }
        }
        
        /// <summary>
        /// The transientDroopTime property
        /// </summary>
        [XmlElementNameAttribute("transientDroopTime")]
        [XmlAttributeAttribute(true)]
        public virtual float TransientDroopTime
        {
            get
            {
                return this._transientDroopTime;
            }
            set
            {
                if ((this._transientDroopTime != value))
                {
                    float old = this._transientDroopTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransientDroopTimeChanging(e);
                    this.OnPropertyChanging("TransientDroopTime", e, _transientDroopTimeAttribute);
                    this._transientDroopTime = value;
                    this.OnTransientDroopTimeChanged(e);
                    this.OnPropertyChanged("TransientDroopTime", e, _transientDroopTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The gateUpperLimit property
        /// </summary>
        [XmlElementNameAttribute("gateUpperLimit")]
        [XmlAttributeAttribute(true)]
        public virtual float GateUpperLimit
        {
            get
            {
                return this._gateUpperLimit;
            }
            set
            {
                if ((this._gateUpperLimit != value))
                {
                    float old = this._gateUpperLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGateUpperLimitChanging(e);
                    this.OnPropertyChanging("GateUpperLimit", e, _gateUpperLimitAttribute);
                    this._gateUpperLimit = value;
                    this.OnGateUpperLimitChanged(e);
                    this.OnPropertyChanged("GateUpperLimit", e, _gateUpperLimitAttribute);
                }
            }
        }
        
        /// <summary>
        /// The minHeadMaxP property
        /// </summary>
        [XmlElementNameAttribute("minHeadMaxP")]
        [XmlAttributeAttribute(true)]
        public virtual float MinHeadMaxP
        {
            get
            {
                return this._minHeadMaxP;
            }
            set
            {
                if ((this._minHeadMaxP != value))
                {
                    float old = this._minHeadMaxP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinHeadMaxPChanging(e);
                    this.OnPropertyChanging("MinHeadMaxP", e, _minHeadMaxPAttribute);
                    this._minHeadMaxP = value;
                    this.OnMinHeadMaxPChanged(e);
                    this.OnPropertyChanged("MinHeadMaxP", e, _minHeadMaxPAttribute);
                }
            }
        }
        
        /// <summary>
        /// The turbineRating property
        /// </summary>
        [XmlElementNameAttribute("turbineRating")]
        [XmlAttributeAttribute(true)]
        public virtual float TurbineRating
        {
            get
            {
                return this._turbineRating;
            }
            set
            {
                if ((this._turbineRating != value))
                {
                    float old = this._turbineRating;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTurbineRatingChanging(e);
                    this.OnPropertyChanging("TurbineRating", e, _turbineRatingAttribute);
                    this._turbineRating = value;
                    this.OnTurbineRatingChanged(e);
                    this.OnPropertyChanged("TurbineRating", e, _turbineRatingAttribute);
                }
            }
        }
        
        /// <summary>
        /// The turbineType property
        /// </summary>
        [XmlElementNameAttribute("turbineType")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<TurbineType> TurbineType
        {
            get
            {
                return this._turbineType;
            }
            set
            {
                if ((this._turbineType != value))
                {
                    Nullable<TurbineType> old = this._turbineType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTurbineTypeChanging(e);
                    this.OnPropertyChanging("TurbineType", e, _turbineTypeAttribute);
                    this._turbineType = value;
                    this.OnTurbineTypeChanged(e);
                    this.OnPropertyChanged("TurbineType", e, _turbineTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The speedRating property
        /// </summary>
        [XmlElementNameAttribute("speedRating")]
        [XmlAttributeAttribute(true)]
        public virtual float SpeedRating
        {
            get
            {
                return this._speedRating;
            }
            set
            {
                if ((this._speedRating != value))
                {
                    float old = this._speedRating;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSpeedRatingChanging(e);
                    this.OnPropertyChanging("SpeedRating", e, _speedRatingAttribute);
                    this._speedRating = value;
                    this.OnSpeedRatingChanged(e);
                    this.OnPropertyChanged("SpeedRating", e, _speedRatingAttribute);
                }
            }
        }
        
        /// <summary>
        /// The gateRateLimit property
        /// </summary>
        [XmlElementNameAttribute("gateRateLimit")]
        [XmlAttributeAttribute(true)]
        public virtual float GateRateLimit
        {
            get
            {
                return this._gateRateLimit;
            }
            set
            {
                if ((this._gateRateLimit != value))
                {
                    float old = this._gateRateLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGateRateLimitChanging(e);
                    this.OnPropertyChanging("GateRateLimit", e, _gateRateLimitAttribute);
                    this._gateRateLimit = value;
                    this.OnGateRateLimitChanged(e);
                    this.OnPropertyChanged("GateRateLimit", e, _gateRateLimitAttribute);
                }
            }
        }
        
        /// <summary>
        /// The waterStartingTime property
        /// </summary>
        [XmlElementNameAttribute("waterStartingTime")]
        [XmlAttributeAttribute(true)]
        public virtual float WaterStartingTime
        {
            get
            {
                return this._waterStartingTime;
            }
            set
            {
                if ((this._waterStartingTime != value))
                {
                    float old = this._waterStartingTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWaterStartingTimeChanging(e);
                    this.OnPropertyChanging("WaterStartingTime", e, _waterStartingTimeAttribute);
                    this._waterStartingTime = value;
                    this.OnWaterStartingTimeChanged(e);
                    this.OnPropertyChanged("WaterStartingTime", e, _waterStartingTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The transientRegulation property
        /// </summary>
        [XmlElementNameAttribute("transientRegulation")]
        [XmlAttributeAttribute(true)]
        public virtual float TransientRegulation
        {
            get
            {
                return this._transientRegulation;
            }
            set
            {
                if ((this._transientRegulation != value))
                {
                    float old = this._transientRegulation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransientRegulationChanging(e);
                    this.OnPropertyChanging("TransientRegulation", e, _transientRegulationAttribute);
                    this._transientRegulation = value;
                    this.OnTransientRegulationChanged(e);
                    this.OnPropertyChanged("TransientRegulation", e, _transientRegulationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The speedRegulation property
        /// </summary>
        [XmlElementNameAttribute("speedRegulation")]
        [XmlAttributeAttribute(true)]
        public virtual float SpeedRegulation
        {
            get
            {
                return this._speedRegulation;
            }
            set
            {
                if ((this._speedRegulation != value))
                {
                    float old = this._speedRegulation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSpeedRegulationChanging(e);
                    this.OnPropertyChanging("SpeedRegulation", e, _speedRegulationAttribute);
                    this._speedRegulation = value;
                    this.OnSpeedRegulationChanged(e);
                    this.OnPropertyChanged("SpeedRegulation", e, _speedRegulationAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/GenerationDynamics" +
                            "/HydroTurbine")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the MaxHeadMaxP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxHeadMaxPChanging;
        
        /// <summary>
        /// Gets fired when the MaxHeadMaxP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxHeadMaxPChanged;
        
        /// <summary>
        /// Gets fired before the TransientDroopTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransientDroopTimeChanging;
        
        /// <summary>
        /// Gets fired when the TransientDroopTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransientDroopTimeChanged;
        
        /// <summary>
        /// Gets fired before the GateUpperLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GateUpperLimitChanging;
        
        /// <summary>
        /// Gets fired when the GateUpperLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GateUpperLimitChanged;
        
        /// <summary>
        /// Gets fired before the MinHeadMaxP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinHeadMaxPChanging;
        
        /// <summary>
        /// Gets fired when the MinHeadMaxP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinHeadMaxPChanged;
        
        /// <summary>
        /// Gets fired before the TurbineRating property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TurbineRatingChanging;
        
        /// <summary>
        /// Gets fired when the TurbineRating property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TurbineRatingChanged;
        
        /// <summary>
        /// Gets fired before the TurbineType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TurbineTypeChanging;
        
        /// <summary>
        /// Gets fired when the TurbineType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TurbineTypeChanged;
        
        /// <summary>
        /// Gets fired before the SpeedRating property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpeedRatingChanging;
        
        /// <summary>
        /// Gets fired when the SpeedRating property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpeedRatingChanged;
        
        /// <summary>
        /// Gets fired before the GateRateLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GateRateLimitChanging;
        
        /// <summary>
        /// Gets fired when the GateRateLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GateRateLimitChanged;
        
        /// <summary>
        /// Gets fired before the WaterStartingTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WaterStartingTimeChanging;
        
        /// <summary>
        /// Gets fired when the WaterStartingTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WaterStartingTimeChanged;
        
        /// <summary>
        /// Gets fired before the TransientRegulation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransientRegulationChanging;
        
        /// <summary>
        /// Gets fired when the TransientRegulation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransientRegulationChanged;
        
        /// <summary>
        /// Gets fired before the SpeedRegulation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpeedRegulationChanging;
        
        /// <summary>
        /// Gets fired when the SpeedRegulation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpeedRegulationChanged;
        
        private static ITypedElement RetrieveMaxHeadMaxPAttribute()
        {
            return ((ITypedElement)(((ModelElement)(HydroTurbine.ClassInstance)).Resolve("maxHeadMaxP")));
        }
        
        /// <summary>
        /// Raises the MaxHeadMaxPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxHeadMaxPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxHeadMaxPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxHeadMaxPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxHeadMaxPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxHeadMaxPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransientDroopTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(HydroTurbine.ClassInstance)).Resolve("transientDroopTime")));
        }
        
        /// <summary>
        /// Raises the TransientDroopTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransientDroopTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransientDroopTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransientDroopTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransientDroopTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransientDroopTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGateUpperLimitAttribute()
        {
            return ((ITypedElement)(((ModelElement)(HydroTurbine.ClassInstance)).Resolve("gateUpperLimit")));
        }
        
        /// <summary>
        /// Raises the GateUpperLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGateUpperLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GateUpperLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GateUpperLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGateUpperLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GateUpperLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMinHeadMaxPAttribute()
        {
            return ((ITypedElement)(((ModelElement)(HydroTurbine.ClassInstance)).Resolve("minHeadMaxP")));
        }
        
        /// <summary>
        /// Raises the MinHeadMaxPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinHeadMaxPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinHeadMaxPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinHeadMaxPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinHeadMaxPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinHeadMaxPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTurbineRatingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(HydroTurbine.ClassInstance)).Resolve("turbineRating")));
        }
        
        /// <summary>
        /// Raises the TurbineRatingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTurbineRatingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TurbineRatingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TurbineRatingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTurbineRatingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TurbineRatingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTurbineTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(HydroTurbine.ClassInstance)).Resolve("turbineType")));
        }
        
        /// <summary>
        /// Raises the TurbineTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTurbineTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TurbineTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TurbineTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTurbineTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TurbineTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSpeedRatingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(HydroTurbine.ClassInstance)).Resolve("speedRating")));
        }
        
        /// <summary>
        /// Raises the SpeedRatingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpeedRatingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpeedRatingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpeedRatingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpeedRatingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpeedRatingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGateRateLimitAttribute()
        {
            return ((ITypedElement)(((ModelElement)(HydroTurbine.ClassInstance)).Resolve("gateRateLimit")));
        }
        
        /// <summary>
        /// Raises the GateRateLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGateRateLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GateRateLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GateRateLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGateRateLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GateRateLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveWaterStartingTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(HydroTurbine.ClassInstance)).Resolve("waterStartingTime")));
        }
        
        /// <summary>
        /// Raises the WaterStartingTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWaterStartingTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WaterStartingTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WaterStartingTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWaterStartingTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WaterStartingTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransientRegulationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(HydroTurbine.ClassInstance)).Resolve("transientRegulation")));
        }
        
        /// <summary>
        /// Raises the TransientRegulationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransientRegulationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransientRegulationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransientRegulationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransientRegulationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransientRegulationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSpeedRegulationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(HydroTurbine.ClassInstance)).Resolve("speedRegulation")));
        }
        
        /// <summary>
        /// Raises the SpeedRegulationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpeedRegulationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpeedRegulationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpeedRegulationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpeedRegulationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpeedRegulationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MAXHEADMAXP"))
            {
                return this.MaxHeadMaxP;
            }
            if ((attribute == "TRANSIENTDROOPTIME"))
            {
                return this.TransientDroopTime;
            }
            if ((attribute == "GATEUPPERLIMIT"))
            {
                return this.GateUpperLimit;
            }
            if ((attribute == "MINHEADMAXP"))
            {
                return this.MinHeadMaxP;
            }
            if ((attribute == "TURBINERATING"))
            {
                return this.TurbineRating;
            }
            if ((attribute == "TURBINETYPE"))
            {
                return this.TurbineType;
            }
            if ((attribute == "SPEEDRATING"))
            {
                return this.SpeedRating;
            }
            if ((attribute == "GATERATELIMIT"))
            {
                return this.GateRateLimit;
            }
            if ((attribute == "WATERSTARTINGTIME"))
            {
                return this.WaterStartingTime;
            }
            if ((attribute == "TRANSIENTREGULATION"))
            {
                return this.TransientRegulation;
            }
            if ((attribute == "SPEEDREGULATION"))
            {
                return this.SpeedRegulation;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MAXHEADMAXP"))
            {
                this.MaxHeadMaxP = ((float)(value));
                return;
            }
            if ((feature == "TRANSIENTDROOPTIME"))
            {
                this.TransientDroopTime = ((float)(value));
                return;
            }
            if ((feature == "GATEUPPERLIMIT"))
            {
                this.GateUpperLimit = ((float)(value));
                return;
            }
            if ((feature == "MINHEADMAXP"))
            {
                this.MinHeadMaxP = ((float)(value));
                return;
            }
            if ((feature == "TURBINERATING"))
            {
                this.TurbineRating = ((float)(value));
                return;
            }
            if ((feature == "TURBINETYPE"))
            {
                this.TurbineType = ((TurbineType)(value));
                return;
            }
            if ((feature == "SPEEDRATING"))
            {
                this.SpeedRating = ((float)(value));
                return;
            }
            if ((feature == "GATERATELIMIT"))
            {
                this.GateRateLimit = ((float)(value));
                return;
            }
            if ((feature == "WATERSTARTINGTIME"))
            {
                this.WaterStartingTime = ((float)(value));
                return;
            }
            if ((feature == "TRANSIENTREGULATION"))
            {
                this.TransientRegulation = ((float)(value));
                return;
            }
            if ((feature == "SPEEDREGULATION"))
            {
                this.SpeedRegulation = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/GenerationDynamics" +
                        "/HydroTurbine")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maxHeadMaxP property
        /// </summary>
        private sealed class MaxHeadMaxPProxy : ModelPropertyChange<IHydroTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxHeadMaxPProxy(IHydroTurbine modelElement) : 
                    base(modelElement, "maxHeadMaxP")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MaxHeadMaxP;
                }
                set
                {
                    this.ModelElement.MaxHeadMaxP = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the transientDroopTime property
        /// </summary>
        private sealed class TransientDroopTimeProxy : ModelPropertyChange<IHydroTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransientDroopTimeProxy(IHydroTurbine modelElement) : 
                    base(modelElement, "transientDroopTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TransientDroopTime;
                }
                set
                {
                    this.ModelElement.TransientDroopTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the gateUpperLimit property
        /// </summary>
        private sealed class GateUpperLimitProxy : ModelPropertyChange<IHydroTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GateUpperLimitProxy(IHydroTurbine modelElement) : 
                    base(modelElement, "gateUpperLimit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.GateUpperLimit;
                }
                set
                {
                    this.ModelElement.GateUpperLimit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minHeadMaxP property
        /// </summary>
        private sealed class MinHeadMaxPProxy : ModelPropertyChange<IHydroTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinHeadMaxPProxy(IHydroTurbine modelElement) : 
                    base(modelElement, "minHeadMaxP")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinHeadMaxP;
                }
                set
                {
                    this.ModelElement.MinHeadMaxP = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the turbineRating property
        /// </summary>
        private sealed class TurbineRatingProxy : ModelPropertyChange<IHydroTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TurbineRatingProxy(IHydroTurbine modelElement) : 
                    base(modelElement, "turbineRating")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TurbineRating;
                }
                set
                {
                    this.ModelElement.TurbineRating = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the turbineType property
        /// </summary>
        private sealed class TurbineTypeProxy : ModelPropertyChange<IHydroTurbine, Nullable<TurbineType>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TurbineTypeProxy(IHydroTurbine modelElement) : 
                    base(modelElement, "turbineType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<TurbineType> Value
            {
                get
                {
                    return this.ModelElement.TurbineType;
                }
                set
                {
                    this.ModelElement.TurbineType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the speedRating property
        /// </summary>
        private sealed class SpeedRatingProxy : ModelPropertyChange<IHydroTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpeedRatingProxy(IHydroTurbine modelElement) : 
                    base(modelElement, "speedRating")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SpeedRating;
                }
                set
                {
                    this.ModelElement.SpeedRating = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the gateRateLimit property
        /// </summary>
        private sealed class GateRateLimitProxy : ModelPropertyChange<IHydroTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GateRateLimitProxy(IHydroTurbine modelElement) : 
                    base(modelElement, "gateRateLimit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.GateRateLimit;
                }
                set
                {
                    this.ModelElement.GateRateLimit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the waterStartingTime property
        /// </summary>
        private sealed class WaterStartingTimeProxy : ModelPropertyChange<IHydroTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WaterStartingTimeProxy(IHydroTurbine modelElement) : 
                    base(modelElement, "waterStartingTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.WaterStartingTime;
                }
                set
                {
                    this.ModelElement.WaterStartingTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the transientRegulation property
        /// </summary>
        private sealed class TransientRegulationProxy : ModelPropertyChange<IHydroTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransientRegulationProxy(IHydroTurbine modelElement) : 
                    base(modelElement, "transientRegulation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TransientRegulation;
                }
                set
                {
                    this.ModelElement.TransientRegulation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the speedRegulation property
        /// </summary>
        private sealed class SpeedRegulationProxy : ModelPropertyChange<IHydroTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpeedRegulationProxy(IHydroTurbine modelElement) : 
                    base(modelElement, "speedRegulation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SpeedRegulation;
                }
                set
                {
                    this.ModelElement.SpeedRegulation = value;
                }
            }
        }
    }
}

