//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.Production
{
    
    
    /// <summary>
    /// The public interface for HydroPowerPlant
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(HydroPowerPlant))]
    [XmlDefaultImplementationTypeAttribute(typeof(HydroPowerPlant))]
    public interface IHydroPowerPlant : IModelElement, IPowerSystemResource
    {
        
        /// <summary>
        /// The genRatedP property
        /// </summary>
        float GenRatedP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The surgeTankCrestLevel property
        /// </summary>
        float SurgeTankCrestLevel
        {
            get;
            set;
        }
        
        /// <summary>
        /// The dischargeTravelDelay property
        /// </summary>
        float DischargeTravelDelay
        {
            get;
            set;
        }
        
        /// <summary>
        /// The pumpRatedP property
        /// </summary>
        float PumpRatedP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The penstockType property
        /// </summary>
        Nullable<PenstockType> PenstockType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The hydroPlantType property
        /// </summary>
        Nullable<HydroPlantType> HydroPlantType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The plantRatedHead property
        /// </summary>
        float PlantRatedHead
        {
            get;
            set;
        }
        
        /// <summary>
        /// The surgeTankCode property
        /// </summary>
        Nullable<SurgeTankCode> SurgeTankCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The plantDischargeCapacity property
        /// </summary>
        float PlantDischargeCapacity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The GenSourcePumpDischargeReservoir property
        /// </summary>
        IReservoir GenSourcePumpDischargeReservoir
        {
            get;
            set;
        }
        
        /// <summary>
        /// The HydroGeneratingUnits property
        /// </summary>
        IOrderedSetExpression<IHydroGeneratingUnit> HydroGeneratingUnits
        {
            get;
        }
        
        /// <summary>
        /// The HydroPumps property
        /// </summary>
        IOrderedSetExpression<IHydroPump> HydroPumps
        {
            get;
        }
        
        /// <summary>
        /// The Reservoir property
        /// </summary>
        IReservoir Reservoir
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the GenRatedP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GenRatedPChanging;
        
        /// <summary>
        /// Gets fired when the GenRatedP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GenRatedPChanged;
        
        /// <summary>
        /// Gets fired before the SurgeTankCrestLevel property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SurgeTankCrestLevelChanging;
        
        /// <summary>
        /// Gets fired when the SurgeTankCrestLevel property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SurgeTankCrestLevelChanged;
        
        /// <summary>
        /// Gets fired before the DischargeTravelDelay property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DischargeTravelDelayChanging;
        
        /// <summary>
        /// Gets fired when the DischargeTravelDelay property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DischargeTravelDelayChanged;
        
        /// <summary>
        /// Gets fired before the PumpRatedP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PumpRatedPChanging;
        
        /// <summary>
        /// Gets fired when the PumpRatedP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PumpRatedPChanged;
        
        /// <summary>
        /// Gets fired before the PenstockType property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PenstockTypeChanging;
        
        /// <summary>
        /// Gets fired when the PenstockType property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PenstockTypeChanged;
        
        /// <summary>
        /// Gets fired before the HydroPlantType property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HydroPlantTypeChanging;
        
        /// <summary>
        /// Gets fired when the HydroPlantType property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HydroPlantTypeChanged;
        
        /// <summary>
        /// Gets fired before the PlantRatedHead property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PlantRatedHeadChanging;
        
        /// <summary>
        /// Gets fired when the PlantRatedHead property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PlantRatedHeadChanged;
        
        /// <summary>
        /// Gets fired before the SurgeTankCode property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SurgeTankCodeChanging;
        
        /// <summary>
        /// Gets fired when the SurgeTankCode property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SurgeTankCodeChanged;
        
        /// <summary>
        /// Gets fired before the PlantDischargeCapacity property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PlantDischargeCapacityChanging;
        
        /// <summary>
        /// Gets fired when the PlantDischargeCapacity property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PlantDischargeCapacityChanged;
        
        /// <summary>
        /// Gets fired before the GenSourcePumpDischargeReservoir property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GenSourcePumpDischargeReservoirChanging;
        
        /// <summary>
        /// Gets fired when the GenSourcePumpDischargeReservoir property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GenSourcePumpDischargeReservoirChanged;
        
        /// <summary>
        /// Gets fired before the Reservoir property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReservoirChanging;
        
        /// <summary>
        /// Gets fired when the Reservoir property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReservoirChanged;
    }
}

