//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.Production
{
    
    
    /// <summary>
    /// The default implementation of the ThermalGeneratingUnit class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Production")]
    [XmlNamespacePrefixAttribute("cimProduction")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/Thermal" +
        "GeneratingUnit")]
    [DebuggerDisplayAttribute("ThermalGeneratingUnit {UUID}")]
    public partial class ThermalGeneratingUnit : GeneratingUnit, IThermalGeneratingUnit, IModelElement
    {
        
        /// <summary>
        /// The backing field for the OMCost property
        /// </summary>
        private float _oMCost;
        
        private static Lazy<ITypedElement> _oMCostAttribute = new Lazy<ITypedElement>(RetrieveOMCostAttribute);
        
        private static Lazy<ITypedElement> _combinedCyclePlantReference = new Lazy<ITypedElement>(RetrieveCombinedCyclePlantReference);
        
        /// <summary>
        /// The backing field for the CombinedCyclePlant property
        /// </summary>
        private ICombinedCyclePlant _combinedCyclePlant;
        
        private static Lazy<ITypedElement> _cAESPlantReference = new Lazy<ITypedElement>(RetrieveCAESPlantReference);
        
        /// <summary>
        /// The backing field for the CAESPlant property
        /// </summary>
        private ICAESPlant _cAESPlant;
        
        private static Lazy<ITypedElement> _emissionCurvesReference = new Lazy<ITypedElement>(RetrieveEmissionCurvesReference);
        
        /// <summary>
        /// The backing field for the EmissionCurves property
        /// </summary>
        private ThermalGeneratingUnitEmissionCurvesCollection _emissionCurves;
        
        private static Lazy<ITypedElement> _heatInputCurveReference = new Lazy<ITypedElement>(RetrieveHeatInputCurveReference);
        
        /// <summary>
        /// The backing field for the HeatInputCurve property
        /// </summary>
        private IHeatInputCurve _heatInputCurve;
        
        private static Lazy<ITypedElement> _shutdownCurveReference = new Lazy<ITypedElement>(RetrieveShutdownCurveReference);
        
        /// <summary>
        /// The backing field for the ShutdownCurve property
        /// </summary>
        private IShutdownCurve _shutdownCurve;
        
        private static Lazy<ITypedElement> _heatRateCurveReference = new Lazy<ITypedElement>(RetrieveHeatRateCurveReference);
        
        /// <summary>
        /// The backing field for the HeatRateCurve property
        /// </summary>
        private IHeatRateCurve _heatRateCurve;
        
        private static Lazy<ITypedElement> _incrementalHeatRateCurveReference = new Lazy<ITypedElement>(RetrieveIncrementalHeatRateCurveReference);
        
        /// <summary>
        /// The backing field for the IncrementalHeatRateCurve property
        /// </summary>
        private IIncrementalHeatRateCurve _incrementalHeatRateCurve;
        
        private static Lazy<ITypedElement> _cogenerationPlantReference = new Lazy<ITypedElement>(RetrieveCogenerationPlantReference);
        
        /// <summary>
        /// The backing field for the CogenerationPlant property
        /// </summary>
        private ICogenerationPlant _cogenerationPlant;
        
        private static Lazy<ITypedElement> _fossilFuelsReference = new Lazy<ITypedElement>(RetrieveFossilFuelsReference);
        
        /// <summary>
        /// The backing field for the FossilFuels property
        /// </summary>
        private ThermalGeneratingUnitFossilFuelsCollection _fossilFuels;
        
        private static Lazy<ITypedElement> _startupModelReference = new Lazy<ITypedElement>(RetrieveStartupModelReference);
        
        /// <summary>
        /// The backing field for the StartupModel property
        /// </summary>
        private IStartupModel _startupModel;
        
        private static Lazy<ITypedElement> _fuelAllocationSchedulesReference = new Lazy<ITypedElement>(RetrieveFuelAllocationSchedulesReference);
        
        /// <summary>
        /// The backing field for the FuelAllocationSchedules property
        /// </summary>
        private ThermalGeneratingUnitFuelAllocationSchedulesCollection _fuelAllocationSchedules;
        
        private static Lazy<ITypedElement> _emmissionAccountsReference = new Lazy<ITypedElement>(RetrieveEmmissionAccountsReference);
        
        /// <summary>
        /// The backing field for the EmmissionAccounts property
        /// </summary>
        private ThermalGeneratingUnitEmmissionAccountsCollection _emmissionAccounts;
        
        private static IClass _classInstance;
        
        public ThermalGeneratingUnit()
        {
            this._emissionCurves = new ThermalGeneratingUnitEmissionCurvesCollection(this);
            this._emissionCurves.CollectionChanging += this.EmissionCurvesCollectionChanging;
            this._emissionCurves.CollectionChanged += this.EmissionCurvesCollectionChanged;
            this._fossilFuels = new ThermalGeneratingUnitFossilFuelsCollection(this);
            this._fossilFuels.CollectionChanging += this.FossilFuelsCollectionChanging;
            this._fossilFuels.CollectionChanged += this.FossilFuelsCollectionChanged;
            this._fuelAllocationSchedules = new ThermalGeneratingUnitFuelAllocationSchedulesCollection(this);
            this._fuelAllocationSchedules.CollectionChanging += this.FuelAllocationSchedulesCollectionChanging;
            this._fuelAllocationSchedules.CollectionChanged += this.FuelAllocationSchedulesCollectionChanged;
            this._emmissionAccounts = new ThermalGeneratingUnitEmmissionAccountsCollection(this);
            this._emmissionAccounts.CollectionChanging += this.EmmissionAccountsCollectionChanging;
            this._emmissionAccounts.CollectionChanged += this.EmmissionAccountsCollectionChanged;
        }
        
        /// <summary>
        /// The oMCost property
        /// </summary>
        [XmlElementNameAttribute("oMCost")]
        [XmlAttributeAttribute(true)]
        public virtual float OMCost
        {
            get
            {
                return this._oMCost;
            }
            set
            {
                if ((this._oMCost != value))
                {
                    float old = this._oMCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOMCostChanging(e);
                    this.OnPropertyChanging("OMCost", e, _oMCostAttribute);
                    this._oMCost = value;
                    this.OnOMCostChanged(e);
                    this.OnPropertyChanged("OMCost", e, _oMCostAttribute);
                }
            }
        }
        
        /// <summary>
        /// The CombinedCyclePlant property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ThermalGeneratingUnits")]
        public virtual ICombinedCyclePlant CombinedCyclePlant
        {
            get
            {
                return this._combinedCyclePlant;
            }
            set
            {
                if ((this._combinedCyclePlant != value))
                {
                    ICombinedCyclePlant old = this._combinedCyclePlant;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCombinedCyclePlantChanging(e);
                    this.OnPropertyChanging("CombinedCyclePlant", e, _combinedCyclePlantReference);
                    this._combinedCyclePlant = value;
                    if ((old != null))
                    {
                        old.ThermalGeneratingUnits.Remove(this);
                        old.Deleted -= this.OnResetCombinedCyclePlant;
                    }
                    if ((value != null))
                    {
                        value.ThermalGeneratingUnits.Add(this);
                        value.Deleted += this.OnResetCombinedCyclePlant;
                    }
                    this.OnCombinedCyclePlantChanged(e);
                    this.OnPropertyChanged("CombinedCyclePlant", e, _combinedCyclePlantReference);
                }
            }
        }
        
        /// <summary>
        /// The CAESPlant property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ThermalGeneratingUnit")]
        public virtual ICAESPlant CAESPlant
        {
            get
            {
                return this._cAESPlant;
            }
            set
            {
                if ((this._cAESPlant != value))
                {
                    ICAESPlant old = this._cAESPlant;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCAESPlantChanging(e);
                    this.OnPropertyChanging("CAESPlant", e, _cAESPlantReference);
                    this._cAESPlant = value;
                    if ((old != null))
                    {
                        old.ThermalGeneratingUnit = null;
                        old.Deleted -= this.OnResetCAESPlant;
                    }
                    if ((value != null))
                    {
                        value.ThermalGeneratingUnit = this;
                        value.Deleted += this.OnResetCAESPlant;
                    }
                    this.OnCAESPlantChanged(e);
                    this.OnPropertyChanged("CAESPlant", e, _cAESPlantReference);
                }
            }
        }
        
        /// <summary>
        /// The EmissionCurves property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ThermalGeneratingUnit")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEmissionCurve> EmissionCurves
        {
            get
            {
                return this._emissionCurves;
            }
        }
        
        /// <summary>
        /// The HeatInputCurve property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ThermalGeneratingUnit")]
        public virtual IHeatInputCurve HeatInputCurve
        {
            get
            {
                return this._heatInputCurve;
            }
            set
            {
                if ((this._heatInputCurve != value))
                {
                    IHeatInputCurve old = this._heatInputCurve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHeatInputCurveChanging(e);
                    this.OnPropertyChanging("HeatInputCurve", e, _heatInputCurveReference);
                    this._heatInputCurve = value;
                    if ((old != null))
                    {
                        old.ThermalGeneratingUnit = null;
                        old.Deleted -= this.OnResetHeatInputCurve;
                    }
                    if ((value != null))
                    {
                        value.ThermalGeneratingUnit = this;
                        value.Deleted += this.OnResetHeatInputCurve;
                    }
                    this.OnHeatInputCurveChanged(e);
                    this.OnPropertyChanged("HeatInputCurve", e, _heatInputCurveReference);
                }
            }
        }
        
        /// <summary>
        /// The ShutdownCurve property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ThermalGeneratingUnit")]
        public virtual IShutdownCurve ShutdownCurve
        {
            get
            {
                return this._shutdownCurve;
            }
            set
            {
                if ((this._shutdownCurve != value))
                {
                    IShutdownCurve old = this._shutdownCurve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnShutdownCurveChanging(e);
                    this.OnPropertyChanging("ShutdownCurve", e, _shutdownCurveReference);
                    this._shutdownCurve = value;
                    if ((old != null))
                    {
                        old.ThermalGeneratingUnit = null;
                        old.Deleted -= this.OnResetShutdownCurve;
                    }
                    if ((value != null))
                    {
                        value.ThermalGeneratingUnit = this;
                        value.Deleted += this.OnResetShutdownCurve;
                    }
                    this.OnShutdownCurveChanged(e);
                    this.OnPropertyChanged("ShutdownCurve", e, _shutdownCurveReference);
                }
            }
        }
        
        /// <summary>
        /// The HeatRateCurve property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ThermalGeneratingUnit")]
        public virtual IHeatRateCurve HeatRateCurve
        {
            get
            {
                return this._heatRateCurve;
            }
            set
            {
                if ((this._heatRateCurve != value))
                {
                    IHeatRateCurve old = this._heatRateCurve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHeatRateCurveChanging(e);
                    this.OnPropertyChanging("HeatRateCurve", e, _heatRateCurveReference);
                    this._heatRateCurve = value;
                    if ((old != null))
                    {
                        old.ThermalGeneratingUnit = null;
                        old.Deleted -= this.OnResetHeatRateCurve;
                    }
                    if ((value != null))
                    {
                        value.ThermalGeneratingUnit = this;
                        value.Deleted += this.OnResetHeatRateCurve;
                    }
                    this.OnHeatRateCurveChanged(e);
                    this.OnPropertyChanged("HeatRateCurve", e, _heatRateCurveReference);
                }
            }
        }
        
        /// <summary>
        /// The IncrementalHeatRateCurve property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ThermalGeneratingUnit")]
        public virtual IIncrementalHeatRateCurve IncrementalHeatRateCurve
        {
            get
            {
                return this._incrementalHeatRateCurve;
            }
            set
            {
                if ((this._incrementalHeatRateCurve != value))
                {
                    IIncrementalHeatRateCurve old = this._incrementalHeatRateCurve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIncrementalHeatRateCurveChanging(e);
                    this.OnPropertyChanging("IncrementalHeatRateCurve", e, _incrementalHeatRateCurveReference);
                    this._incrementalHeatRateCurve = value;
                    if ((old != null))
                    {
                        old.ThermalGeneratingUnit = null;
                        old.Deleted -= this.OnResetIncrementalHeatRateCurve;
                    }
                    if ((value != null))
                    {
                        value.ThermalGeneratingUnit = this;
                        value.Deleted += this.OnResetIncrementalHeatRateCurve;
                    }
                    this.OnIncrementalHeatRateCurveChanged(e);
                    this.OnPropertyChanged("IncrementalHeatRateCurve", e, _incrementalHeatRateCurveReference);
                }
            }
        }
        
        /// <summary>
        /// The CogenerationPlant property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ThermalGeneratingUnits")]
        public virtual ICogenerationPlant CogenerationPlant
        {
            get
            {
                return this._cogenerationPlant;
            }
            set
            {
                if ((this._cogenerationPlant != value))
                {
                    ICogenerationPlant old = this._cogenerationPlant;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCogenerationPlantChanging(e);
                    this.OnPropertyChanging("CogenerationPlant", e, _cogenerationPlantReference);
                    this._cogenerationPlant = value;
                    if ((old != null))
                    {
                        old.ThermalGeneratingUnits.Remove(this);
                        old.Deleted -= this.OnResetCogenerationPlant;
                    }
                    if ((value != null))
                    {
                        value.ThermalGeneratingUnits.Add(this);
                        value.Deleted += this.OnResetCogenerationPlant;
                    }
                    this.OnCogenerationPlantChanged(e);
                    this.OnPropertyChanged("CogenerationPlant", e, _cogenerationPlantReference);
                }
            }
        }
        
        /// <summary>
        /// The FossilFuels property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ThermalGeneratingUnit")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IFossilFuel> FossilFuels
        {
            get
            {
                return this._fossilFuels;
            }
        }
        
        /// <summary>
        /// The StartupModel property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ThermalGeneratingUnit")]
        public virtual IStartupModel StartupModel
        {
            get
            {
                return this._startupModel;
            }
            set
            {
                if ((this._startupModel != value))
                {
                    IStartupModel old = this._startupModel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStartupModelChanging(e);
                    this.OnPropertyChanging("StartupModel", e, _startupModelReference);
                    this._startupModel = value;
                    if ((old != null))
                    {
                        old.ThermalGeneratingUnit = null;
                        old.Deleted -= this.OnResetStartupModel;
                    }
                    if ((value != null))
                    {
                        value.ThermalGeneratingUnit = this;
                        value.Deleted += this.OnResetStartupModel;
                    }
                    this.OnStartupModelChanged(e);
                    this.OnPropertyChanged("StartupModel", e, _startupModelReference);
                }
            }
        }
        
        /// <summary>
        /// The FuelAllocationSchedules property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ThermalGeneratingUnit")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IFuelAllocationSchedule> FuelAllocationSchedules
        {
            get
            {
                return this._fuelAllocationSchedules;
            }
        }
        
        /// <summary>
        /// The EmmissionAccounts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ThermalGeneratingUnit")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEmissionAccount> EmmissionAccounts
        {
            get
            {
                return this._emmissionAccounts;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ThermalGeneratingUnitReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/Thermal" +
                            "GeneratingUnit")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the OMCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OMCostChanging;
        
        /// <summary>
        /// Gets fired when the OMCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OMCostChanged;
        
        /// <summary>
        /// Gets fired before the CombinedCyclePlant property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CombinedCyclePlantChanging;
        
        /// <summary>
        /// Gets fired when the CombinedCyclePlant property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CombinedCyclePlantChanged;
        
        /// <summary>
        /// Gets fired before the CAESPlant property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CAESPlantChanging;
        
        /// <summary>
        /// Gets fired when the CAESPlant property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CAESPlantChanged;
        
        /// <summary>
        /// Gets fired before the HeatInputCurve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HeatInputCurveChanging;
        
        /// <summary>
        /// Gets fired when the HeatInputCurve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HeatInputCurveChanged;
        
        /// <summary>
        /// Gets fired before the ShutdownCurve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShutdownCurveChanging;
        
        /// <summary>
        /// Gets fired when the ShutdownCurve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShutdownCurveChanged;
        
        /// <summary>
        /// Gets fired before the HeatRateCurve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HeatRateCurveChanging;
        
        /// <summary>
        /// Gets fired when the HeatRateCurve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HeatRateCurveChanged;
        
        /// <summary>
        /// Gets fired before the IncrementalHeatRateCurve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IncrementalHeatRateCurveChanging;
        
        /// <summary>
        /// Gets fired when the IncrementalHeatRateCurve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IncrementalHeatRateCurveChanged;
        
        /// <summary>
        /// Gets fired before the CogenerationPlant property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CogenerationPlantChanging;
        
        /// <summary>
        /// Gets fired when the CogenerationPlant property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CogenerationPlantChanged;
        
        /// <summary>
        /// Gets fired before the StartupModel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartupModelChanging;
        
        /// <summary>
        /// Gets fired when the StartupModel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartupModelChanged;
        
        private static ITypedElement RetrieveOMCostAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ThermalGeneratingUnit.ClassInstance)).Resolve("oMCost")));
        }
        
        /// <summary>
        /// Raises the OMCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOMCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OMCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OMCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOMCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OMCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCombinedCyclePlantReference()
        {
            return ((ITypedElement)(((ModelElement)(ThermalGeneratingUnit.ClassInstance)).Resolve("CombinedCyclePlant")));
        }
        
        /// <summary>
        /// Raises the CombinedCyclePlantChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCombinedCyclePlantChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CombinedCyclePlantChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CombinedCyclePlantChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCombinedCyclePlantChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CombinedCyclePlantChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CombinedCyclePlant property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCombinedCyclePlant(object sender, System.EventArgs eventArgs)
        {
            this.CombinedCyclePlant = null;
        }
        
        private static ITypedElement RetrieveCAESPlantReference()
        {
            return ((ITypedElement)(((ModelElement)(ThermalGeneratingUnit.ClassInstance)).Resolve("CAESPlant")));
        }
        
        /// <summary>
        /// Raises the CAESPlantChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCAESPlantChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CAESPlantChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CAESPlantChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCAESPlantChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CAESPlantChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CAESPlant property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCAESPlant(object sender, System.EventArgs eventArgs)
        {
            this.CAESPlant = null;
        }
        
        private static ITypedElement RetrieveEmissionCurvesReference()
        {
            return ((ITypedElement)(((ModelElement)(ThermalGeneratingUnit.ClassInstance)).Resolve("EmissionCurves")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EmissionCurves property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EmissionCurvesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("EmissionCurves", e, _emissionCurvesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EmissionCurves property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EmissionCurvesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EmissionCurves", e, _emissionCurvesReference);
        }
        
        private static ITypedElement RetrieveHeatInputCurveReference()
        {
            return ((ITypedElement)(((ModelElement)(ThermalGeneratingUnit.ClassInstance)).Resolve("HeatInputCurve")));
        }
        
        /// <summary>
        /// Raises the HeatInputCurveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHeatInputCurveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HeatInputCurveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HeatInputCurveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHeatInputCurveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HeatInputCurveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HeatInputCurve property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHeatInputCurve(object sender, System.EventArgs eventArgs)
        {
            this.HeatInputCurve = null;
        }
        
        private static ITypedElement RetrieveShutdownCurveReference()
        {
            return ((ITypedElement)(((ModelElement)(ThermalGeneratingUnit.ClassInstance)).Resolve("ShutdownCurve")));
        }
        
        /// <summary>
        /// Raises the ShutdownCurveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShutdownCurveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShutdownCurveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ShutdownCurveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShutdownCurveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShutdownCurveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ShutdownCurve property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetShutdownCurve(object sender, System.EventArgs eventArgs)
        {
            this.ShutdownCurve = null;
        }
        
        private static ITypedElement RetrieveHeatRateCurveReference()
        {
            return ((ITypedElement)(((ModelElement)(ThermalGeneratingUnit.ClassInstance)).Resolve("HeatRateCurve")));
        }
        
        /// <summary>
        /// Raises the HeatRateCurveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHeatRateCurveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HeatRateCurveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HeatRateCurveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHeatRateCurveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HeatRateCurveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HeatRateCurve property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHeatRateCurve(object sender, System.EventArgs eventArgs)
        {
            this.HeatRateCurve = null;
        }
        
        private static ITypedElement RetrieveIncrementalHeatRateCurveReference()
        {
            return ((ITypedElement)(((ModelElement)(ThermalGeneratingUnit.ClassInstance)).Resolve("IncrementalHeatRateCurve")));
        }
        
        /// <summary>
        /// Raises the IncrementalHeatRateCurveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIncrementalHeatRateCurveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IncrementalHeatRateCurveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IncrementalHeatRateCurveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIncrementalHeatRateCurveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IncrementalHeatRateCurveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the IncrementalHeatRateCurve property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetIncrementalHeatRateCurve(object sender, System.EventArgs eventArgs)
        {
            this.IncrementalHeatRateCurve = null;
        }
        
        private static ITypedElement RetrieveCogenerationPlantReference()
        {
            return ((ITypedElement)(((ModelElement)(ThermalGeneratingUnit.ClassInstance)).Resolve("CogenerationPlant")));
        }
        
        /// <summary>
        /// Raises the CogenerationPlantChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCogenerationPlantChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CogenerationPlantChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CogenerationPlantChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCogenerationPlantChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CogenerationPlantChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CogenerationPlant property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCogenerationPlant(object sender, System.EventArgs eventArgs)
        {
            this.CogenerationPlant = null;
        }
        
        private static ITypedElement RetrieveFossilFuelsReference()
        {
            return ((ITypedElement)(((ModelElement)(ThermalGeneratingUnit.ClassInstance)).Resolve("FossilFuels")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the FossilFuels property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FossilFuelsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("FossilFuels", e, _fossilFuelsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the FossilFuels property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FossilFuelsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("FossilFuels", e, _fossilFuelsReference);
        }
        
        private static ITypedElement RetrieveStartupModelReference()
        {
            return ((ITypedElement)(((ModelElement)(ThermalGeneratingUnit.ClassInstance)).Resolve("StartupModel")));
        }
        
        /// <summary>
        /// Raises the StartupModelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartupModelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartupModelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartupModelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartupModelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartupModelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the StartupModel property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStartupModel(object sender, System.EventArgs eventArgs)
        {
            this.StartupModel = null;
        }
        
        private static ITypedElement RetrieveFuelAllocationSchedulesReference()
        {
            return ((ITypedElement)(((ModelElement)(ThermalGeneratingUnit.ClassInstance)).Resolve("FuelAllocationSchedules")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the FuelAllocationSchedules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FuelAllocationSchedulesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("FuelAllocationSchedules", e, _fuelAllocationSchedulesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the FuelAllocationSchedules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FuelAllocationSchedulesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("FuelAllocationSchedules", e, _fuelAllocationSchedulesReference);
        }
        
        private static ITypedElement RetrieveEmmissionAccountsReference()
        {
            return ((ITypedElement)(((ModelElement)(ThermalGeneratingUnit.ClassInstance)).Resolve("EmmissionAccounts")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EmmissionAccounts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EmmissionAccountsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("EmmissionAccounts", e, _emmissionAccountsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EmmissionAccounts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EmmissionAccountsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EmmissionAccounts", e, _emmissionAccountsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "OMCOST"))
            {
                return this.OMCost;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "EMISSIONCURVES"))
            {
                return this._emissionCurves;
            }
            if ((feature == "FOSSILFUELS"))
            {
                return this._fossilFuels;
            }
            if ((feature == "FUELALLOCATIONSCHEDULES"))
            {
                return this._fuelAllocationSchedules;
            }
            if ((feature == "EMMISSIONACCOUNTS"))
            {
                return this._emmissionAccounts;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "COMBINEDCYCLEPLANT"))
            {
                this.CombinedCyclePlant = ((ICombinedCyclePlant)(value));
                return;
            }
            if ((feature == "CAESPLANT"))
            {
                this.CAESPlant = ((ICAESPlant)(value));
                return;
            }
            if ((feature == "HEATINPUTCURVE"))
            {
                this.HeatInputCurve = ((IHeatInputCurve)(value));
                return;
            }
            if ((feature == "SHUTDOWNCURVE"))
            {
                this.ShutdownCurve = ((IShutdownCurve)(value));
                return;
            }
            if ((feature == "HEATRATECURVE"))
            {
                this.HeatRateCurve = ((IHeatRateCurve)(value));
                return;
            }
            if ((feature == "INCREMENTALHEATRATECURVE"))
            {
                this.IncrementalHeatRateCurve = ((IIncrementalHeatRateCurve)(value));
                return;
            }
            if ((feature == "COGENERATIONPLANT"))
            {
                this.CogenerationPlant = ((ICogenerationPlant)(value));
                return;
            }
            if ((feature == "STARTUPMODEL"))
            {
                this.StartupModel = ((IStartupModel)(value));
                return;
            }
            if ((feature == "OMCOST"))
            {
                this.OMCost = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CombinedCyclePlant"))
            {
                return new CombinedCyclePlantProxy(this);
            }
            if ((attribute == "CAESPlant"))
            {
                return new CAESPlantProxy(this);
            }
            if ((attribute == "HeatInputCurve"))
            {
                return new HeatInputCurveProxy(this);
            }
            if ((attribute == "ShutdownCurve"))
            {
                return new ShutdownCurveProxy(this);
            }
            if ((attribute == "HeatRateCurve"))
            {
                return new HeatRateCurveProxy(this);
            }
            if ((attribute == "IncrementalHeatRateCurve"))
            {
                return new IncrementalHeatRateCurveProxy(this);
            }
            if ((attribute == "CogenerationPlant"))
            {
                return new CogenerationPlantProxy(this);
            }
            if ((attribute == "StartupModel"))
            {
                return new StartupModelProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CombinedCyclePlant"))
            {
                return new CombinedCyclePlantProxy(this);
            }
            if ((reference == "CAESPlant"))
            {
                return new CAESPlantProxy(this);
            }
            if ((reference == "HeatInputCurve"))
            {
                return new HeatInputCurveProxy(this);
            }
            if ((reference == "ShutdownCurve"))
            {
                return new ShutdownCurveProxy(this);
            }
            if ((reference == "HeatRateCurve"))
            {
                return new HeatRateCurveProxy(this);
            }
            if ((reference == "IncrementalHeatRateCurve"))
            {
                return new IncrementalHeatRateCurveProxy(this);
            }
            if ((reference == "CogenerationPlant"))
            {
                return new CogenerationPlantProxy(this);
            }
            if ((reference == "StartupModel"))
            {
                return new StartupModelProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/Thermal" +
                        "GeneratingUnit")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ThermalGeneratingUnit class
        /// </summary>
        public class ThermalGeneratingUnitReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ThermalGeneratingUnit _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ThermalGeneratingUnitReferencedElementsCollection(ThermalGeneratingUnit parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.CombinedCyclePlant != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CAESPlant != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.EmissionCurves.Count);
                    if ((this._parent.HeatInputCurve != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ShutdownCurve != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HeatRateCurve != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.IncrementalHeatRateCurve != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CogenerationPlant != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.FossilFuels.Count);
                    if ((this._parent.StartupModel != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.FuelAllocationSchedules.Count);
                    count = (count + this._parent.EmmissionAccounts.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CombinedCyclePlantChanged += this.PropagateValueChanges;
                this._parent.CAESPlantChanged += this.PropagateValueChanges;
                this._parent.EmissionCurves.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.HeatInputCurveChanged += this.PropagateValueChanges;
                this._parent.ShutdownCurveChanged += this.PropagateValueChanges;
                this._parent.HeatRateCurveChanged += this.PropagateValueChanges;
                this._parent.IncrementalHeatRateCurveChanged += this.PropagateValueChanges;
                this._parent.CogenerationPlantChanged += this.PropagateValueChanges;
                this._parent.FossilFuels.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.StartupModelChanged += this.PropagateValueChanges;
                this._parent.FuelAllocationSchedules.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.EmmissionAccounts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CombinedCyclePlantChanged -= this.PropagateValueChanges;
                this._parent.CAESPlantChanged -= this.PropagateValueChanges;
                this._parent.EmissionCurves.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.HeatInputCurveChanged -= this.PropagateValueChanges;
                this._parent.ShutdownCurveChanged -= this.PropagateValueChanges;
                this._parent.HeatRateCurveChanged -= this.PropagateValueChanges;
                this._parent.IncrementalHeatRateCurveChanged -= this.PropagateValueChanges;
                this._parent.CogenerationPlantChanged -= this.PropagateValueChanges;
                this._parent.FossilFuels.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.StartupModelChanged -= this.PropagateValueChanges;
                this._parent.FuelAllocationSchedules.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.EmmissionAccounts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.CombinedCyclePlant == null))
                {
                    ICombinedCyclePlant combinedCyclePlantCasted = item.As<ICombinedCyclePlant>();
                    if ((combinedCyclePlantCasted != null))
                    {
                        this._parent.CombinedCyclePlant = combinedCyclePlantCasted;
                        return;
                    }
                }
                if ((this._parent.CAESPlant == null))
                {
                    ICAESPlant cAESPlantCasted = item.As<ICAESPlant>();
                    if ((cAESPlantCasted != null))
                    {
                        this._parent.CAESPlant = cAESPlantCasted;
                        return;
                    }
                }
                IEmissionCurve emissionCurvesCasted = item.As<IEmissionCurve>();
                if ((emissionCurvesCasted != null))
                {
                    this._parent.EmissionCurves.Add(emissionCurvesCasted);
                }
                if ((this._parent.HeatInputCurve == null))
                {
                    IHeatInputCurve heatInputCurveCasted = item.As<IHeatInputCurve>();
                    if ((heatInputCurveCasted != null))
                    {
                        this._parent.HeatInputCurve = heatInputCurveCasted;
                        return;
                    }
                }
                if ((this._parent.ShutdownCurve == null))
                {
                    IShutdownCurve shutdownCurveCasted = item.As<IShutdownCurve>();
                    if ((shutdownCurveCasted != null))
                    {
                        this._parent.ShutdownCurve = shutdownCurveCasted;
                        return;
                    }
                }
                if ((this._parent.HeatRateCurve == null))
                {
                    IHeatRateCurve heatRateCurveCasted = item.As<IHeatRateCurve>();
                    if ((heatRateCurveCasted != null))
                    {
                        this._parent.HeatRateCurve = heatRateCurveCasted;
                        return;
                    }
                }
                if ((this._parent.IncrementalHeatRateCurve == null))
                {
                    IIncrementalHeatRateCurve incrementalHeatRateCurveCasted = item.As<IIncrementalHeatRateCurve>();
                    if ((incrementalHeatRateCurveCasted != null))
                    {
                        this._parent.IncrementalHeatRateCurve = incrementalHeatRateCurveCasted;
                        return;
                    }
                }
                if ((this._parent.CogenerationPlant == null))
                {
                    ICogenerationPlant cogenerationPlantCasted = item.As<ICogenerationPlant>();
                    if ((cogenerationPlantCasted != null))
                    {
                        this._parent.CogenerationPlant = cogenerationPlantCasted;
                        return;
                    }
                }
                IFossilFuel fossilFuelsCasted = item.As<IFossilFuel>();
                if ((fossilFuelsCasted != null))
                {
                    this._parent.FossilFuels.Add(fossilFuelsCasted);
                }
                if ((this._parent.StartupModel == null))
                {
                    IStartupModel startupModelCasted = item.As<IStartupModel>();
                    if ((startupModelCasted != null))
                    {
                        this._parent.StartupModel = startupModelCasted;
                        return;
                    }
                }
                IFuelAllocationSchedule fuelAllocationSchedulesCasted = item.As<IFuelAllocationSchedule>();
                if ((fuelAllocationSchedulesCasted != null))
                {
                    this._parent.FuelAllocationSchedules.Add(fuelAllocationSchedulesCasted);
                }
                IEmissionAccount emmissionAccountsCasted = item.As<IEmissionAccount>();
                if ((emmissionAccountsCasted != null))
                {
                    this._parent.EmmissionAccounts.Add(emmissionAccountsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CombinedCyclePlant = null;
                this._parent.CAESPlant = null;
                this._parent.EmissionCurves.Clear();
                this._parent.HeatInputCurve = null;
                this._parent.ShutdownCurve = null;
                this._parent.HeatRateCurve = null;
                this._parent.IncrementalHeatRateCurve = null;
                this._parent.CogenerationPlant = null;
                this._parent.FossilFuels.Clear();
                this._parent.StartupModel = null;
                this._parent.FuelAllocationSchedules.Clear();
                this._parent.EmmissionAccounts.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.CombinedCyclePlant))
                {
                    return true;
                }
                if ((item == this._parent.CAESPlant))
                {
                    return true;
                }
                if (this._parent.EmissionCurves.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.HeatInputCurve))
                {
                    return true;
                }
                if ((item == this._parent.ShutdownCurve))
                {
                    return true;
                }
                if ((item == this._parent.HeatRateCurve))
                {
                    return true;
                }
                if ((item == this._parent.IncrementalHeatRateCurve))
                {
                    return true;
                }
                if ((item == this._parent.CogenerationPlant))
                {
                    return true;
                }
                if (this._parent.FossilFuels.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.StartupModel))
                {
                    return true;
                }
                if (this._parent.FuelAllocationSchedules.Contains(item))
                {
                    return true;
                }
                if (this._parent.EmmissionAccounts.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.CombinedCyclePlant != null))
                {
                    array[arrayIndex] = this._parent.CombinedCyclePlant;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CAESPlant != null))
                {
                    array[arrayIndex] = this._parent.CAESPlant;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> emissionCurvesEnumerator = this._parent.EmissionCurves.GetEnumerator();
                try
                {
                    for (
                    ; emissionCurvesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = emissionCurvesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    emissionCurvesEnumerator.Dispose();
                }
                if ((this._parent.HeatInputCurve != null))
                {
                    array[arrayIndex] = this._parent.HeatInputCurve;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ShutdownCurve != null))
                {
                    array[arrayIndex] = this._parent.ShutdownCurve;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HeatRateCurve != null))
                {
                    array[arrayIndex] = this._parent.HeatRateCurve;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.IncrementalHeatRateCurve != null))
                {
                    array[arrayIndex] = this._parent.IncrementalHeatRateCurve;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CogenerationPlant != null))
                {
                    array[arrayIndex] = this._parent.CogenerationPlant;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> fossilFuelsEnumerator = this._parent.FossilFuels.GetEnumerator();
                try
                {
                    for (
                    ; fossilFuelsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = fossilFuelsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    fossilFuelsEnumerator.Dispose();
                }
                if ((this._parent.StartupModel != null))
                {
                    array[arrayIndex] = this._parent.StartupModel;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> fuelAllocationSchedulesEnumerator = this._parent.FuelAllocationSchedules.GetEnumerator();
                try
                {
                    for (
                    ; fuelAllocationSchedulesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = fuelAllocationSchedulesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    fuelAllocationSchedulesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> emmissionAccountsEnumerator = this._parent.EmmissionAccounts.GetEnumerator();
                try
                {
                    for (
                    ; emmissionAccountsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = emmissionAccountsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    emmissionAccountsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.CombinedCyclePlant == item))
                {
                    this._parent.CombinedCyclePlant = null;
                    return true;
                }
                if ((this._parent.CAESPlant == item))
                {
                    this._parent.CAESPlant = null;
                    return true;
                }
                IEmissionCurve emissionCurveItem = item.As<IEmissionCurve>();
                if (((emissionCurveItem != null) 
                            && this._parent.EmissionCurves.Remove(emissionCurveItem)))
                {
                    return true;
                }
                if ((this._parent.HeatInputCurve == item))
                {
                    this._parent.HeatInputCurve = null;
                    return true;
                }
                if ((this._parent.ShutdownCurve == item))
                {
                    this._parent.ShutdownCurve = null;
                    return true;
                }
                if ((this._parent.HeatRateCurve == item))
                {
                    this._parent.HeatRateCurve = null;
                    return true;
                }
                if ((this._parent.IncrementalHeatRateCurve == item))
                {
                    this._parent.IncrementalHeatRateCurve = null;
                    return true;
                }
                if ((this._parent.CogenerationPlant == item))
                {
                    this._parent.CogenerationPlant = null;
                    return true;
                }
                IFossilFuel fossilFuelItem = item.As<IFossilFuel>();
                if (((fossilFuelItem != null) 
                            && this._parent.FossilFuels.Remove(fossilFuelItem)))
                {
                    return true;
                }
                if ((this._parent.StartupModel == item))
                {
                    this._parent.StartupModel = null;
                    return true;
                }
                IFuelAllocationSchedule fuelAllocationScheduleItem = item.As<IFuelAllocationSchedule>();
                if (((fuelAllocationScheduleItem != null) 
                            && this._parent.FuelAllocationSchedules.Remove(fuelAllocationScheduleItem)))
                {
                    return true;
                }
                IEmissionAccount emissionAccountItem = item.As<IEmissionAccount>();
                if (((emissionAccountItem != null) 
                            && this._parent.EmmissionAccounts.Remove(emissionAccountItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CombinedCyclePlant).Concat(this._parent.CAESPlant).Concat(this._parent.EmissionCurves).Concat(this._parent.HeatInputCurve).Concat(this._parent.ShutdownCurve).Concat(this._parent.HeatRateCurve).Concat(this._parent.IncrementalHeatRateCurve).Concat(this._parent.CogenerationPlant).Concat(this._parent.FossilFuels).Concat(this._parent.StartupModel).Concat(this._parent.FuelAllocationSchedules).Concat(this._parent.EmmissionAccounts).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the oMCost property
        /// </summary>
        private sealed class OMCostProxy : ModelPropertyChange<IThermalGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OMCostProxy(IThermalGeneratingUnit modelElement) : 
                    base(modelElement, "oMCost")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.OMCost;
                }
                set
                {
                    this.ModelElement.OMCost = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CombinedCyclePlant property
        /// </summary>
        private sealed class CombinedCyclePlantProxy : ModelPropertyChange<IThermalGeneratingUnit, ICombinedCyclePlant>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CombinedCyclePlantProxy(IThermalGeneratingUnit modelElement) : 
                    base(modelElement, "CombinedCyclePlant")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICombinedCyclePlant Value
            {
                get
                {
                    return this.ModelElement.CombinedCyclePlant;
                }
                set
                {
                    this.ModelElement.CombinedCyclePlant = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CAESPlant property
        /// </summary>
        private sealed class CAESPlantProxy : ModelPropertyChange<IThermalGeneratingUnit, ICAESPlant>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CAESPlantProxy(IThermalGeneratingUnit modelElement) : 
                    base(modelElement, "CAESPlant")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICAESPlant Value
            {
                get
                {
                    return this.ModelElement.CAESPlant;
                }
                set
                {
                    this.ModelElement.CAESPlant = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HeatInputCurve property
        /// </summary>
        private sealed class HeatInputCurveProxy : ModelPropertyChange<IThermalGeneratingUnit, IHeatInputCurve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HeatInputCurveProxy(IThermalGeneratingUnit modelElement) : 
                    base(modelElement, "HeatInputCurve")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHeatInputCurve Value
            {
                get
                {
                    return this.ModelElement.HeatInputCurve;
                }
                set
                {
                    this.ModelElement.HeatInputCurve = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ShutdownCurve property
        /// </summary>
        private sealed class ShutdownCurveProxy : ModelPropertyChange<IThermalGeneratingUnit, IShutdownCurve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ShutdownCurveProxy(IThermalGeneratingUnit modelElement) : 
                    base(modelElement, "ShutdownCurve")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IShutdownCurve Value
            {
                get
                {
                    return this.ModelElement.ShutdownCurve;
                }
                set
                {
                    this.ModelElement.ShutdownCurve = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HeatRateCurve property
        /// </summary>
        private sealed class HeatRateCurveProxy : ModelPropertyChange<IThermalGeneratingUnit, IHeatRateCurve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HeatRateCurveProxy(IThermalGeneratingUnit modelElement) : 
                    base(modelElement, "HeatRateCurve")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHeatRateCurve Value
            {
                get
                {
                    return this.ModelElement.HeatRateCurve;
                }
                set
                {
                    this.ModelElement.HeatRateCurve = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IncrementalHeatRateCurve property
        /// </summary>
        private sealed class IncrementalHeatRateCurveProxy : ModelPropertyChange<IThermalGeneratingUnit, IIncrementalHeatRateCurve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IncrementalHeatRateCurveProxy(IThermalGeneratingUnit modelElement) : 
                    base(modelElement, "IncrementalHeatRateCurve")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IIncrementalHeatRateCurve Value
            {
                get
                {
                    return this.ModelElement.IncrementalHeatRateCurve;
                }
                set
                {
                    this.ModelElement.IncrementalHeatRateCurve = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CogenerationPlant property
        /// </summary>
        private sealed class CogenerationPlantProxy : ModelPropertyChange<IThermalGeneratingUnit, ICogenerationPlant>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CogenerationPlantProxy(IThermalGeneratingUnit modelElement) : 
                    base(modelElement, "CogenerationPlant")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICogenerationPlant Value
            {
                get
                {
                    return this.ModelElement.CogenerationPlant;
                }
                set
                {
                    this.ModelElement.CogenerationPlant = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the StartupModel property
        /// </summary>
        private sealed class StartupModelProxy : ModelPropertyChange<IThermalGeneratingUnit, IStartupModel>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartupModelProxy(IThermalGeneratingUnit modelElement) : 
                    base(modelElement, "StartupModel")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStartupModel Value
            {
                get
                {
                    return this.ModelElement.StartupModel;
                }
                set
                {
                    this.ModelElement.StartupModel = value;
                }
            }
        }
    }
}

