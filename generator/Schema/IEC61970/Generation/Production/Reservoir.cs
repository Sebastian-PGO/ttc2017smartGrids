//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.Production
{
    
    
    /// <summary>
    /// The default implementation of the Reservoir class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Production")]
    [XmlNamespacePrefixAttribute("cimProduction")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/Reservo" +
        "ir")]
    [DebuggerDisplayAttribute("Reservoir {UUID}")]
    public partial class Reservoir : PowerSystemResource, IReservoir, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ActiveStorageCapacity property
        /// </summary>
        private float _activeStorageCapacity;
        
        private static Lazy<ITypedElement> _activeStorageCapacityAttribute = new Lazy<ITypedElement>(RetrieveActiveStorageCapacityAttribute);
        
        /// <summary>
        /// The backing field for the SpillTravelDelay property
        /// </summary>
        private float _spillTravelDelay;
        
        private static Lazy<ITypedElement> _spillTravelDelayAttribute = new Lazy<ITypedElement>(RetrieveSpillTravelDelayAttribute);
        
        /// <summary>
        /// The backing field for the RiverOutletWorks property
        /// </summary>
        private string _riverOutletWorks;
        
        private static Lazy<ITypedElement> _riverOutletWorksAttribute = new Lazy<ITypedElement>(RetrieveRiverOutletWorksAttribute);
        
        /// <summary>
        /// The backing field for the NormalMinOperateLevel property
        /// </summary>
        private float _normalMinOperateLevel;
        
        private static Lazy<ITypedElement> _normalMinOperateLevelAttribute = new Lazy<ITypedElement>(RetrieveNormalMinOperateLevelAttribute);
        
        /// <summary>
        /// The backing field for the SpillwayCrestLevel property
        /// </summary>
        private float _spillwayCrestLevel;
        
        private static Lazy<ITypedElement> _spillwayCrestLevelAttribute = new Lazy<ITypedElement>(RetrieveSpillwayCrestLevelAttribute);
        
        /// <summary>
        /// The backing field for the FullSupplyLevel property
        /// </summary>
        private float _fullSupplyLevel;
        
        private static Lazy<ITypedElement> _fullSupplyLevelAttribute = new Lazy<ITypedElement>(RetrieveFullSupplyLevelAttribute);
        
        /// <summary>
        /// The backing field for the SpillwayCapacity property
        /// </summary>
        private float _spillwayCapacity;
        
        private static Lazy<ITypedElement> _spillwayCapacityAttribute = new Lazy<ITypedElement>(RetrieveSpillwayCapacityAttribute);
        
        /// <summary>
        /// The backing field for the SpillWayGateType property
        /// </summary>
        private Nullable<SpillwayGateType> _spillWayGateType;
        
        private static Lazy<ITypedElement> _spillWayGateTypeAttribute = new Lazy<ITypedElement>(RetrieveSpillWayGateTypeAttribute);
        
        /// <summary>
        /// The backing field for the SpillwayCrestLength property
        /// </summary>
        private float _spillwayCrestLength;
        
        private static Lazy<ITypedElement> _spillwayCrestLengthAttribute = new Lazy<ITypedElement>(RetrieveSpillwayCrestLengthAttribute);
        
        /// <summary>
        /// The backing field for the EnergyStorageRating property
        /// </summary>
        private float _energyStorageRating;
        
        private static Lazy<ITypedElement> _energyStorageRatingAttribute = new Lazy<ITypedElement>(RetrieveEnergyStorageRatingAttribute);
        
        /// <summary>
        /// The backing field for the GrossCapacity property
        /// </summary>
        private float _grossCapacity;
        
        private static Lazy<ITypedElement> _grossCapacityAttribute = new Lazy<ITypedElement>(RetrieveGrossCapacityAttribute);
        
        private static Lazy<ITypedElement> _upstreamFromHydroPowerPlantsReference = new Lazy<ITypedElement>(RetrieveUpstreamFromHydroPowerPlantsReference);
        
        /// <summary>
        /// The backing field for the UpstreamFromHydroPowerPlants property
        /// </summary>
        private ReservoirUpstreamFromHydroPowerPlantsCollection _upstreamFromHydroPowerPlants;
        
        private static Lazy<ITypedElement> _spillsIntoReservoirsReference = new Lazy<ITypedElement>(RetrieveSpillsIntoReservoirsReference);
        
        /// <summary>
        /// The backing field for the SpillsIntoReservoirs property
        /// </summary>
        private ReservoirSpillsIntoReservoirsCollection _spillsIntoReservoirs;
        
        private static Lazy<ITypedElement> _spillsFromReservoirReference = new Lazy<ITypedElement>(RetrieveSpillsFromReservoirReference);
        
        /// <summary>
        /// The backing field for the SpillsFromReservoir property
        /// </summary>
        private IReservoir _spillsFromReservoir;
        
        private static Lazy<ITypedElement> _levelVsVolumeCurvesReference = new Lazy<ITypedElement>(RetrieveLevelVsVolumeCurvesReference);
        
        /// <summary>
        /// The backing field for the LevelVsVolumeCurves property
        /// </summary>
        private ReservoirLevelVsVolumeCurvesCollection _levelVsVolumeCurves;
        
        private static Lazy<ITypedElement> _inflowForecastsReference = new Lazy<ITypedElement>(RetrieveInflowForecastsReference);
        
        /// <summary>
        /// The backing field for the InflowForecasts property
        /// </summary>
        private ReservoirInflowForecastsCollection _inflowForecasts;
        
        private static Lazy<ITypedElement> _targetLevelScheduleReference = new Lazy<ITypedElement>(RetrieveTargetLevelScheduleReference);
        
        /// <summary>
        /// The backing field for the TargetLevelSchedule property
        /// </summary>
        private ITargetLevelSchedule _targetLevelSchedule;
        
        private static Lazy<ITypedElement> _hydroPowerPlantsReference = new Lazy<ITypedElement>(RetrieveHydroPowerPlantsReference);
        
        /// <summary>
        /// The backing field for the HydroPowerPlants property
        /// </summary>
        private ReservoirHydroPowerPlantsCollection _hydroPowerPlants;
        
        private static IClass _classInstance;
        
        public Reservoir()
        {
            this._upstreamFromHydroPowerPlants = new ReservoirUpstreamFromHydroPowerPlantsCollection(this);
            this._upstreamFromHydroPowerPlants.CollectionChanging += this.UpstreamFromHydroPowerPlantsCollectionChanging;
            this._upstreamFromHydroPowerPlants.CollectionChanged += this.UpstreamFromHydroPowerPlantsCollectionChanged;
            this._spillsIntoReservoirs = new ReservoirSpillsIntoReservoirsCollection(this);
            this._spillsIntoReservoirs.CollectionChanging += this.SpillsIntoReservoirsCollectionChanging;
            this._spillsIntoReservoirs.CollectionChanged += this.SpillsIntoReservoirsCollectionChanged;
            this._levelVsVolumeCurves = new ReservoirLevelVsVolumeCurvesCollection(this);
            this._levelVsVolumeCurves.CollectionChanging += this.LevelVsVolumeCurvesCollectionChanging;
            this._levelVsVolumeCurves.CollectionChanged += this.LevelVsVolumeCurvesCollectionChanged;
            this._inflowForecasts = new ReservoirInflowForecastsCollection(this);
            this._inflowForecasts.CollectionChanging += this.InflowForecastsCollectionChanging;
            this._inflowForecasts.CollectionChanged += this.InflowForecastsCollectionChanged;
            this._hydroPowerPlants = new ReservoirHydroPowerPlantsCollection(this);
            this._hydroPowerPlants.CollectionChanging += this.HydroPowerPlantsCollectionChanging;
            this._hydroPowerPlants.CollectionChanged += this.HydroPowerPlantsCollectionChanged;
        }
        
        /// <summary>
        /// The activeStorageCapacity property
        /// </summary>
        [XmlElementNameAttribute("activeStorageCapacity")]
        [XmlAttributeAttribute(true)]
        public virtual float ActiveStorageCapacity
        {
            get
            {
                return this._activeStorageCapacity;
            }
            set
            {
                if ((this._activeStorageCapacity != value))
                {
                    float old = this._activeStorageCapacity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActiveStorageCapacityChanging(e);
                    this.OnPropertyChanging("ActiveStorageCapacity", e, _activeStorageCapacityAttribute);
                    this._activeStorageCapacity = value;
                    this.OnActiveStorageCapacityChanged(e);
                    this.OnPropertyChanged("ActiveStorageCapacity", e, _activeStorageCapacityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The spillTravelDelay property
        /// </summary>
        [XmlElementNameAttribute("spillTravelDelay")]
        [XmlAttributeAttribute(true)]
        public virtual float SpillTravelDelay
        {
            get
            {
                return this._spillTravelDelay;
            }
            set
            {
                if ((this._spillTravelDelay != value))
                {
                    float old = this._spillTravelDelay;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSpillTravelDelayChanging(e);
                    this.OnPropertyChanging("SpillTravelDelay", e, _spillTravelDelayAttribute);
                    this._spillTravelDelay = value;
                    this.OnSpillTravelDelayChanged(e);
                    this.OnPropertyChanged("SpillTravelDelay", e, _spillTravelDelayAttribute);
                }
            }
        }
        
        /// <summary>
        /// The riverOutletWorks property
        /// </summary>
        [XmlElementNameAttribute("riverOutletWorks")]
        [XmlAttributeAttribute(true)]
        public virtual string RiverOutletWorks
        {
            get
            {
                return this._riverOutletWorks;
            }
            set
            {
                if ((this._riverOutletWorks != value))
                {
                    string old = this._riverOutletWorks;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRiverOutletWorksChanging(e);
                    this.OnPropertyChanging("RiverOutletWorks", e, _riverOutletWorksAttribute);
                    this._riverOutletWorks = value;
                    this.OnRiverOutletWorksChanged(e);
                    this.OnPropertyChanged("RiverOutletWorks", e, _riverOutletWorksAttribute);
                }
            }
        }
        
        /// <summary>
        /// The normalMinOperateLevel property
        /// </summary>
        [XmlElementNameAttribute("normalMinOperateLevel")]
        [XmlAttributeAttribute(true)]
        public virtual float NormalMinOperateLevel
        {
            get
            {
                return this._normalMinOperateLevel;
            }
            set
            {
                if ((this._normalMinOperateLevel != value))
                {
                    float old = this._normalMinOperateLevel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNormalMinOperateLevelChanging(e);
                    this.OnPropertyChanging("NormalMinOperateLevel", e, _normalMinOperateLevelAttribute);
                    this._normalMinOperateLevel = value;
                    this.OnNormalMinOperateLevelChanged(e);
                    this.OnPropertyChanged("NormalMinOperateLevel", e, _normalMinOperateLevelAttribute);
                }
            }
        }
        
        /// <summary>
        /// The spillwayCrestLevel property
        /// </summary>
        [XmlElementNameAttribute("spillwayCrestLevel")]
        [XmlAttributeAttribute(true)]
        public virtual float SpillwayCrestLevel
        {
            get
            {
                return this._spillwayCrestLevel;
            }
            set
            {
                if ((this._spillwayCrestLevel != value))
                {
                    float old = this._spillwayCrestLevel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSpillwayCrestLevelChanging(e);
                    this.OnPropertyChanging("SpillwayCrestLevel", e, _spillwayCrestLevelAttribute);
                    this._spillwayCrestLevel = value;
                    this.OnSpillwayCrestLevelChanged(e);
                    this.OnPropertyChanged("SpillwayCrestLevel", e, _spillwayCrestLevelAttribute);
                }
            }
        }
        
        /// <summary>
        /// The fullSupplyLevel property
        /// </summary>
        [XmlElementNameAttribute("fullSupplyLevel")]
        [XmlAttributeAttribute(true)]
        public virtual float FullSupplyLevel
        {
            get
            {
                return this._fullSupplyLevel;
            }
            set
            {
                if ((this._fullSupplyLevel != value))
                {
                    float old = this._fullSupplyLevel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFullSupplyLevelChanging(e);
                    this.OnPropertyChanging("FullSupplyLevel", e, _fullSupplyLevelAttribute);
                    this._fullSupplyLevel = value;
                    this.OnFullSupplyLevelChanged(e);
                    this.OnPropertyChanged("FullSupplyLevel", e, _fullSupplyLevelAttribute);
                }
            }
        }
        
        /// <summary>
        /// The spillwayCapacity property
        /// </summary>
        [XmlElementNameAttribute("spillwayCapacity")]
        [XmlAttributeAttribute(true)]
        public virtual float SpillwayCapacity
        {
            get
            {
                return this._spillwayCapacity;
            }
            set
            {
                if ((this._spillwayCapacity != value))
                {
                    float old = this._spillwayCapacity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSpillwayCapacityChanging(e);
                    this.OnPropertyChanging("SpillwayCapacity", e, _spillwayCapacityAttribute);
                    this._spillwayCapacity = value;
                    this.OnSpillwayCapacityChanged(e);
                    this.OnPropertyChanged("SpillwayCapacity", e, _spillwayCapacityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The spillWayGateType property
        /// </summary>
        [XmlElementNameAttribute("spillWayGateType")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<SpillwayGateType> SpillWayGateType
        {
            get
            {
                return this._spillWayGateType;
            }
            set
            {
                if ((this._spillWayGateType != value))
                {
                    Nullable<SpillwayGateType> old = this._spillWayGateType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSpillWayGateTypeChanging(e);
                    this.OnPropertyChanging("SpillWayGateType", e, _spillWayGateTypeAttribute);
                    this._spillWayGateType = value;
                    this.OnSpillWayGateTypeChanged(e);
                    this.OnPropertyChanged("SpillWayGateType", e, _spillWayGateTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The spillwayCrestLength property
        /// </summary>
        [XmlElementNameAttribute("spillwayCrestLength")]
        [XmlAttributeAttribute(true)]
        public virtual float SpillwayCrestLength
        {
            get
            {
                return this._spillwayCrestLength;
            }
            set
            {
                if ((this._spillwayCrestLength != value))
                {
                    float old = this._spillwayCrestLength;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSpillwayCrestLengthChanging(e);
                    this.OnPropertyChanging("SpillwayCrestLength", e, _spillwayCrestLengthAttribute);
                    this._spillwayCrestLength = value;
                    this.OnSpillwayCrestLengthChanged(e);
                    this.OnPropertyChanged("SpillwayCrestLength", e, _spillwayCrestLengthAttribute);
                }
            }
        }
        
        /// <summary>
        /// The energyStorageRating property
        /// </summary>
        [XmlElementNameAttribute("energyStorageRating")]
        [XmlAttributeAttribute(true)]
        public virtual float EnergyStorageRating
        {
            get
            {
                return this._energyStorageRating;
            }
            set
            {
                if ((this._energyStorageRating != value))
                {
                    float old = this._energyStorageRating;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEnergyStorageRatingChanging(e);
                    this.OnPropertyChanging("EnergyStorageRating", e, _energyStorageRatingAttribute);
                    this._energyStorageRating = value;
                    this.OnEnergyStorageRatingChanged(e);
                    this.OnPropertyChanged("EnergyStorageRating", e, _energyStorageRatingAttribute);
                }
            }
        }
        
        /// <summary>
        /// The grossCapacity property
        /// </summary>
        [XmlElementNameAttribute("grossCapacity")]
        [XmlAttributeAttribute(true)]
        public virtual float GrossCapacity
        {
            get
            {
                return this._grossCapacity;
            }
            set
            {
                if ((this._grossCapacity != value))
                {
                    float old = this._grossCapacity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGrossCapacityChanging(e);
                    this.OnPropertyChanging("GrossCapacity", e, _grossCapacityAttribute);
                    this._grossCapacity = value;
                    this.OnGrossCapacityChanged(e);
                    this.OnPropertyChanged("GrossCapacity", e, _grossCapacityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The UpstreamFromHydroPowerPlants property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GenSourcePumpDischargeReservoir")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IHydroPowerPlant> UpstreamFromHydroPowerPlants
        {
            get
            {
                return this._upstreamFromHydroPowerPlants;
            }
        }
        
        /// <summary>
        /// The SpillsIntoReservoirs property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SpillsFromReservoir")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IReservoir> SpillsIntoReservoirs
        {
            get
            {
                return this._spillsIntoReservoirs;
            }
        }
        
        /// <summary>
        /// The SpillsFromReservoir property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SpillsIntoReservoirs")]
        public virtual IReservoir SpillsFromReservoir
        {
            get
            {
                return this._spillsFromReservoir;
            }
            set
            {
                if ((this._spillsFromReservoir != value))
                {
                    IReservoir old = this._spillsFromReservoir;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSpillsFromReservoirChanging(e);
                    this.OnPropertyChanging("SpillsFromReservoir", e, _spillsFromReservoirReference);
                    this._spillsFromReservoir = value;
                    if ((old != null))
                    {
                        old.SpillsIntoReservoirs.Remove(this);
                        old.Deleted -= this.OnResetSpillsFromReservoir;
                    }
                    if ((value != null))
                    {
                        value.SpillsIntoReservoirs.Add(this);
                        value.Deleted += this.OnResetSpillsFromReservoir;
                    }
                    this.OnSpillsFromReservoirChanged(e);
                    this.OnPropertyChanged("SpillsFromReservoir", e, _spillsFromReservoirReference);
                }
            }
        }
        
        /// <summary>
        /// The LevelVsVolumeCurves property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Reservoir")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILevelVsVolumeCurve> LevelVsVolumeCurves
        {
            get
            {
                return this._levelVsVolumeCurves;
            }
        }
        
        /// <summary>
        /// The InflowForecasts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Reservoir")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IInflowForecast> InflowForecasts
        {
            get
            {
                return this._inflowForecasts;
            }
        }
        
        /// <summary>
        /// The TargetLevelSchedule property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Reservoir")]
        public virtual ITargetLevelSchedule TargetLevelSchedule
        {
            get
            {
                return this._targetLevelSchedule;
            }
            set
            {
                if ((this._targetLevelSchedule != value))
                {
                    ITargetLevelSchedule old = this._targetLevelSchedule;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTargetLevelScheduleChanging(e);
                    this.OnPropertyChanging("TargetLevelSchedule", e, _targetLevelScheduleReference);
                    this._targetLevelSchedule = value;
                    if ((old != null))
                    {
                        old.Reservoir = null;
                        old.Deleted -= this.OnResetTargetLevelSchedule;
                    }
                    if ((value != null))
                    {
                        value.Reservoir = this;
                        value.Deleted += this.OnResetTargetLevelSchedule;
                    }
                    this.OnTargetLevelScheduleChanged(e);
                    this.OnPropertyChanged("TargetLevelSchedule", e, _targetLevelScheduleReference);
                }
            }
        }
        
        /// <summary>
        /// The HydroPowerPlants property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Reservoir")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IHydroPowerPlant> HydroPowerPlants
        {
            get
            {
                return this._hydroPowerPlants;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ReservoirReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/Reservo" +
                            "ir")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ActiveStorageCapacity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActiveStorageCapacityChanging;
        
        /// <summary>
        /// Gets fired when the ActiveStorageCapacity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActiveStorageCapacityChanged;
        
        /// <summary>
        /// Gets fired before the SpillTravelDelay property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpillTravelDelayChanging;
        
        /// <summary>
        /// Gets fired when the SpillTravelDelay property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpillTravelDelayChanged;
        
        /// <summary>
        /// Gets fired before the RiverOutletWorks property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RiverOutletWorksChanging;
        
        /// <summary>
        /// Gets fired when the RiverOutletWorks property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RiverOutletWorksChanged;
        
        /// <summary>
        /// Gets fired before the NormalMinOperateLevel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormalMinOperateLevelChanging;
        
        /// <summary>
        /// Gets fired when the NormalMinOperateLevel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormalMinOperateLevelChanged;
        
        /// <summary>
        /// Gets fired before the SpillwayCrestLevel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpillwayCrestLevelChanging;
        
        /// <summary>
        /// Gets fired when the SpillwayCrestLevel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpillwayCrestLevelChanged;
        
        /// <summary>
        /// Gets fired before the FullSupplyLevel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FullSupplyLevelChanging;
        
        /// <summary>
        /// Gets fired when the FullSupplyLevel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FullSupplyLevelChanged;
        
        /// <summary>
        /// Gets fired before the SpillwayCapacity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpillwayCapacityChanging;
        
        /// <summary>
        /// Gets fired when the SpillwayCapacity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpillwayCapacityChanged;
        
        /// <summary>
        /// Gets fired before the SpillWayGateType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpillWayGateTypeChanging;
        
        /// <summary>
        /// Gets fired when the SpillWayGateType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpillWayGateTypeChanged;
        
        /// <summary>
        /// Gets fired before the SpillwayCrestLength property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpillwayCrestLengthChanging;
        
        /// <summary>
        /// Gets fired when the SpillwayCrestLength property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpillwayCrestLengthChanged;
        
        /// <summary>
        /// Gets fired before the EnergyStorageRating property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyStorageRatingChanging;
        
        /// <summary>
        /// Gets fired when the EnergyStorageRating property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyStorageRatingChanged;
        
        /// <summary>
        /// Gets fired before the GrossCapacity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GrossCapacityChanging;
        
        /// <summary>
        /// Gets fired when the GrossCapacity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GrossCapacityChanged;
        
        /// <summary>
        /// Gets fired before the SpillsFromReservoir property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpillsFromReservoirChanging;
        
        /// <summary>
        /// Gets fired when the SpillsFromReservoir property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpillsFromReservoirChanged;
        
        /// <summary>
        /// Gets fired before the TargetLevelSchedule property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TargetLevelScheduleChanging;
        
        /// <summary>
        /// Gets fired when the TargetLevelSchedule property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TargetLevelScheduleChanged;
        
        private static ITypedElement RetrieveActiveStorageCapacityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Reservoir.ClassInstance)).Resolve("activeStorageCapacity")));
        }
        
        /// <summary>
        /// Raises the ActiveStorageCapacityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveStorageCapacityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActiveStorageCapacityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActiveStorageCapacityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActiveStorageCapacityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActiveStorageCapacityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSpillTravelDelayAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Reservoir.ClassInstance)).Resolve("spillTravelDelay")));
        }
        
        /// <summary>
        /// Raises the SpillTravelDelayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpillTravelDelayChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpillTravelDelayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpillTravelDelayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpillTravelDelayChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpillTravelDelayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRiverOutletWorksAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Reservoir.ClassInstance)).Resolve("riverOutletWorks")));
        }
        
        /// <summary>
        /// Raises the RiverOutletWorksChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRiverOutletWorksChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RiverOutletWorksChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RiverOutletWorksChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRiverOutletWorksChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RiverOutletWorksChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNormalMinOperateLevelAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Reservoir.ClassInstance)).Resolve("normalMinOperateLevel")));
        }
        
        /// <summary>
        /// Raises the NormalMinOperateLevelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormalMinOperateLevelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormalMinOperateLevelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NormalMinOperateLevelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormalMinOperateLevelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormalMinOperateLevelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSpillwayCrestLevelAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Reservoir.ClassInstance)).Resolve("spillwayCrestLevel")));
        }
        
        /// <summary>
        /// Raises the SpillwayCrestLevelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpillwayCrestLevelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpillwayCrestLevelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpillwayCrestLevelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpillwayCrestLevelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpillwayCrestLevelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFullSupplyLevelAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Reservoir.ClassInstance)).Resolve("fullSupplyLevel")));
        }
        
        /// <summary>
        /// Raises the FullSupplyLevelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFullSupplyLevelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FullSupplyLevelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FullSupplyLevelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFullSupplyLevelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FullSupplyLevelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSpillwayCapacityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Reservoir.ClassInstance)).Resolve("spillwayCapacity")));
        }
        
        /// <summary>
        /// Raises the SpillwayCapacityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpillwayCapacityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpillwayCapacityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpillwayCapacityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpillwayCapacityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpillwayCapacityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSpillWayGateTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Reservoir.ClassInstance)).Resolve("spillWayGateType")));
        }
        
        /// <summary>
        /// Raises the SpillWayGateTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpillWayGateTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpillWayGateTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpillWayGateTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpillWayGateTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpillWayGateTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSpillwayCrestLengthAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Reservoir.ClassInstance)).Resolve("spillwayCrestLength")));
        }
        
        /// <summary>
        /// Raises the SpillwayCrestLengthChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpillwayCrestLengthChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpillwayCrestLengthChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpillwayCrestLengthChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpillwayCrestLengthChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpillwayCrestLengthChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEnergyStorageRatingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Reservoir.ClassInstance)).Resolve("energyStorageRating")));
        }
        
        /// <summary>
        /// Raises the EnergyStorageRatingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyStorageRatingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyStorageRatingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnergyStorageRatingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyStorageRatingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyStorageRatingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGrossCapacityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Reservoir.ClassInstance)).Resolve("grossCapacity")));
        }
        
        /// <summary>
        /// Raises the GrossCapacityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGrossCapacityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GrossCapacityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GrossCapacityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGrossCapacityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GrossCapacityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUpstreamFromHydroPowerPlantsReference()
        {
            return ((ITypedElement)(((ModelElement)(Reservoir.ClassInstance)).Resolve("UpstreamFromHydroPowerPlants")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the UpstreamFromHydroPowerPlants property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UpstreamFromHydroPowerPlantsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("UpstreamFromHydroPowerPlants", e, _upstreamFromHydroPowerPlantsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the UpstreamFromHydroPowerPlants property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UpstreamFromHydroPowerPlantsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("UpstreamFromHydroPowerPlants", e, _upstreamFromHydroPowerPlantsReference);
        }
        
        private static ITypedElement RetrieveSpillsIntoReservoirsReference()
        {
            return ((ITypedElement)(((ModelElement)(Reservoir.ClassInstance)).Resolve("SpillsIntoReservoirs")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SpillsIntoReservoirs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SpillsIntoReservoirsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("SpillsIntoReservoirs", e, _spillsIntoReservoirsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SpillsIntoReservoirs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SpillsIntoReservoirsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SpillsIntoReservoirs", e, _spillsIntoReservoirsReference);
        }
        
        private static ITypedElement RetrieveSpillsFromReservoirReference()
        {
            return ((ITypedElement)(((ModelElement)(Reservoir.ClassInstance)).Resolve("SpillsFromReservoir")));
        }
        
        /// <summary>
        /// Raises the SpillsFromReservoirChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpillsFromReservoirChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpillsFromReservoirChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpillsFromReservoirChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpillsFromReservoirChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpillsFromReservoirChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SpillsFromReservoir property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSpillsFromReservoir(object sender, System.EventArgs eventArgs)
        {
            this.SpillsFromReservoir = null;
        }
        
        private static ITypedElement RetrieveLevelVsVolumeCurvesReference()
        {
            return ((ITypedElement)(((ModelElement)(Reservoir.ClassInstance)).Resolve("LevelVsVolumeCurves")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the LevelVsVolumeCurves property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LevelVsVolumeCurvesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("LevelVsVolumeCurves", e, _levelVsVolumeCurvesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the LevelVsVolumeCurves property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LevelVsVolumeCurvesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("LevelVsVolumeCurves", e, _levelVsVolumeCurvesReference);
        }
        
        private static ITypedElement RetrieveInflowForecastsReference()
        {
            return ((ITypedElement)(((ModelElement)(Reservoir.ClassInstance)).Resolve("InflowForecasts")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the InflowForecasts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InflowForecastsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("InflowForecasts", e, _inflowForecastsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the InflowForecasts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InflowForecastsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("InflowForecasts", e, _inflowForecastsReference);
        }
        
        private static ITypedElement RetrieveTargetLevelScheduleReference()
        {
            return ((ITypedElement)(((ModelElement)(Reservoir.ClassInstance)).Resolve("TargetLevelSchedule")));
        }
        
        /// <summary>
        /// Raises the TargetLevelScheduleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetLevelScheduleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TargetLevelScheduleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TargetLevelScheduleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetLevelScheduleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TargetLevelScheduleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TargetLevelSchedule property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTargetLevelSchedule(object sender, System.EventArgs eventArgs)
        {
            this.TargetLevelSchedule = null;
        }
        
        private static ITypedElement RetrieveHydroPowerPlantsReference()
        {
            return ((ITypedElement)(((ModelElement)(Reservoir.ClassInstance)).Resolve("HydroPowerPlants")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the HydroPowerPlants property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HydroPowerPlantsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("HydroPowerPlants", e, _hydroPowerPlantsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the HydroPowerPlants property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HydroPowerPlantsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("HydroPowerPlants", e, _hydroPowerPlantsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ACTIVESTORAGECAPACITY"))
            {
                return this.ActiveStorageCapacity;
            }
            if ((attribute == "SPILLTRAVELDELAY"))
            {
                return this.SpillTravelDelay;
            }
            if ((attribute == "RIVEROUTLETWORKS"))
            {
                return this.RiverOutletWorks;
            }
            if ((attribute == "NORMALMINOPERATELEVEL"))
            {
                return this.NormalMinOperateLevel;
            }
            if ((attribute == "SPILLWAYCRESTLEVEL"))
            {
                return this.SpillwayCrestLevel;
            }
            if ((attribute == "FULLSUPPLYLEVEL"))
            {
                return this.FullSupplyLevel;
            }
            if ((attribute == "SPILLWAYCAPACITY"))
            {
                return this.SpillwayCapacity;
            }
            if ((attribute == "SPILLWAYGATETYPE"))
            {
                return this.SpillWayGateType;
            }
            if ((attribute == "SPILLWAYCRESTLENGTH"))
            {
                return this.SpillwayCrestLength;
            }
            if ((attribute == "ENERGYSTORAGERATING"))
            {
                return this.EnergyStorageRating;
            }
            if ((attribute == "GROSSCAPACITY"))
            {
                return this.GrossCapacity;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "UPSTREAMFROMHYDROPOWERPLANTS"))
            {
                return this._upstreamFromHydroPowerPlants;
            }
            if ((feature == "SPILLSINTORESERVOIRS"))
            {
                return this._spillsIntoReservoirs;
            }
            if ((feature == "LEVELVSVOLUMECURVES"))
            {
                return this._levelVsVolumeCurves;
            }
            if ((feature == "INFLOWFORECASTS"))
            {
                return this._inflowForecasts;
            }
            if ((feature == "HYDROPOWERPLANTS"))
            {
                return this._hydroPowerPlants;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SPILLSFROMRESERVOIR"))
            {
                this.SpillsFromReservoir = ((IReservoir)(value));
                return;
            }
            if ((feature == "TARGETLEVELSCHEDULE"))
            {
                this.TargetLevelSchedule = ((ITargetLevelSchedule)(value));
                return;
            }
            if ((feature == "ACTIVESTORAGECAPACITY"))
            {
                this.ActiveStorageCapacity = ((float)(value));
                return;
            }
            if ((feature == "SPILLTRAVELDELAY"))
            {
                this.SpillTravelDelay = ((float)(value));
                return;
            }
            if ((feature == "RIVEROUTLETWORKS"))
            {
                this.RiverOutletWorks = ((string)(value));
                return;
            }
            if ((feature == "NORMALMINOPERATELEVEL"))
            {
                this.NormalMinOperateLevel = ((float)(value));
                return;
            }
            if ((feature == "SPILLWAYCRESTLEVEL"))
            {
                this.SpillwayCrestLevel = ((float)(value));
                return;
            }
            if ((feature == "FULLSUPPLYLEVEL"))
            {
                this.FullSupplyLevel = ((float)(value));
                return;
            }
            if ((feature == "SPILLWAYCAPACITY"))
            {
                this.SpillwayCapacity = ((float)(value));
                return;
            }
            if ((feature == "SPILLWAYGATETYPE"))
            {
                this.SpillWayGateType = ((SpillwayGateType)(value));
                return;
            }
            if ((feature == "SPILLWAYCRESTLENGTH"))
            {
                this.SpillwayCrestLength = ((float)(value));
                return;
            }
            if ((feature == "ENERGYSTORAGERATING"))
            {
                this.EnergyStorageRating = ((float)(value));
                return;
            }
            if ((feature == "GROSSCAPACITY"))
            {
                this.GrossCapacity = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SpillsFromReservoir"))
            {
                return new SpillsFromReservoirProxy(this);
            }
            if ((attribute == "TargetLevelSchedule"))
            {
                return new TargetLevelScheduleProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SpillsFromReservoir"))
            {
                return new SpillsFromReservoirProxy(this);
            }
            if ((reference == "TargetLevelSchedule"))
            {
                return new TargetLevelScheduleProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/Reservo" +
                        "ir")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Reservoir class
        /// </summary>
        public class ReservoirReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Reservoir _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ReservoirReferencedElementsCollection(Reservoir parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.UpstreamFromHydroPowerPlants.Count);
                    count = (count + this._parent.SpillsIntoReservoirs.Count);
                    if ((this._parent.SpillsFromReservoir != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.LevelVsVolumeCurves.Count);
                    count = (count + this._parent.InflowForecasts.Count);
                    if ((this._parent.TargetLevelSchedule != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.HydroPowerPlants.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.UpstreamFromHydroPowerPlants.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SpillsIntoReservoirs.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SpillsFromReservoirChanged += this.PropagateValueChanges;
                this._parent.LevelVsVolumeCurves.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.InflowForecasts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TargetLevelScheduleChanged += this.PropagateValueChanges;
                this._parent.HydroPowerPlants.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.UpstreamFromHydroPowerPlants.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SpillsIntoReservoirs.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SpillsFromReservoirChanged -= this.PropagateValueChanges;
                this._parent.LevelVsVolumeCurves.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.InflowForecasts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TargetLevelScheduleChanged -= this.PropagateValueChanges;
                this._parent.HydroPowerPlants.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IHydroPowerPlant upstreamFromHydroPowerPlantsCasted = item.As<IHydroPowerPlant>();
                if ((upstreamFromHydroPowerPlantsCasted != null))
                {
                    this._parent.UpstreamFromHydroPowerPlants.Add(upstreamFromHydroPowerPlantsCasted);
                }
                IReservoir spillsIntoReservoirsCasted = item.As<IReservoir>();
                if ((spillsIntoReservoirsCasted != null))
                {
                    this._parent.SpillsIntoReservoirs.Add(spillsIntoReservoirsCasted);
                }
                if ((this._parent.SpillsFromReservoir == null))
                {
                    IReservoir spillsFromReservoirCasted = item.As<IReservoir>();
                    if ((spillsFromReservoirCasted != null))
                    {
                        this._parent.SpillsFromReservoir = spillsFromReservoirCasted;
                        return;
                    }
                }
                ILevelVsVolumeCurve levelVsVolumeCurvesCasted = item.As<ILevelVsVolumeCurve>();
                if ((levelVsVolumeCurvesCasted != null))
                {
                    this._parent.LevelVsVolumeCurves.Add(levelVsVolumeCurvesCasted);
                }
                IInflowForecast inflowForecastsCasted = item.As<IInflowForecast>();
                if ((inflowForecastsCasted != null))
                {
                    this._parent.InflowForecasts.Add(inflowForecastsCasted);
                }
                if ((this._parent.TargetLevelSchedule == null))
                {
                    ITargetLevelSchedule targetLevelScheduleCasted = item.As<ITargetLevelSchedule>();
                    if ((targetLevelScheduleCasted != null))
                    {
                        this._parent.TargetLevelSchedule = targetLevelScheduleCasted;
                        return;
                    }
                }
                IHydroPowerPlant hydroPowerPlantsCasted = item.As<IHydroPowerPlant>();
                if ((hydroPowerPlantsCasted != null))
                {
                    this._parent.HydroPowerPlants.Add(hydroPowerPlantsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.UpstreamFromHydroPowerPlants.Clear();
                this._parent.SpillsIntoReservoirs.Clear();
                this._parent.SpillsFromReservoir = null;
                this._parent.LevelVsVolumeCurves.Clear();
                this._parent.InflowForecasts.Clear();
                this._parent.TargetLevelSchedule = null;
                this._parent.HydroPowerPlants.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.UpstreamFromHydroPowerPlants.Contains(item))
                {
                    return true;
                }
                if (this._parent.SpillsIntoReservoirs.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.SpillsFromReservoir))
                {
                    return true;
                }
                if (this._parent.LevelVsVolumeCurves.Contains(item))
                {
                    return true;
                }
                if (this._parent.InflowForecasts.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.TargetLevelSchedule))
                {
                    return true;
                }
                if (this._parent.HydroPowerPlants.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> upstreamFromHydroPowerPlantsEnumerator = this._parent.UpstreamFromHydroPowerPlants.GetEnumerator();
                try
                {
                    for (
                    ; upstreamFromHydroPowerPlantsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = upstreamFromHydroPowerPlantsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    upstreamFromHydroPowerPlantsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> spillsIntoReservoirsEnumerator = this._parent.SpillsIntoReservoirs.GetEnumerator();
                try
                {
                    for (
                    ; spillsIntoReservoirsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = spillsIntoReservoirsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    spillsIntoReservoirsEnumerator.Dispose();
                }
                if ((this._parent.SpillsFromReservoir != null))
                {
                    array[arrayIndex] = this._parent.SpillsFromReservoir;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> levelVsVolumeCurvesEnumerator = this._parent.LevelVsVolumeCurves.GetEnumerator();
                try
                {
                    for (
                    ; levelVsVolumeCurvesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = levelVsVolumeCurvesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    levelVsVolumeCurvesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> inflowForecastsEnumerator = this._parent.InflowForecasts.GetEnumerator();
                try
                {
                    for (
                    ; inflowForecastsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = inflowForecastsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    inflowForecastsEnumerator.Dispose();
                }
                if ((this._parent.TargetLevelSchedule != null))
                {
                    array[arrayIndex] = this._parent.TargetLevelSchedule;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> hydroPowerPlantsEnumerator = this._parent.HydroPowerPlants.GetEnumerator();
                try
                {
                    for (
                    ; hydroPowerPlantsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = hydroPowerPlantsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    hydroPowerPlantsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IHydroPowerPlant hydroPowerPlantItem = item.As<IHydroPowerPlant>();
                if (((hydroPowerPlantItem != null) 
                            && this._parent.UpstreamFromHydroPowerPlants.Remove(hydroPowerPlantItem)))
                {
                    return true;
                }
                IReservoir reservoirItem = item.As<IReservoir>();
                if (((reservoirItem != null) 
                            && this._parent.SpillsIntoReservoirs.Remove(reservoirItem)))
                {
                    return true;
                }
                if ((this._parent.SpillsFromReservoir == item))
                {
                    this._parent.SpillsFromReservoir = null;
                    return true;
                }
                ILevelVsVolumeCurve levelVsVolumeCurveItem = item.As<ILevelVsVolumeCurve>();
                if (((levelVsVolumeCurveItem != null) 
                            && this._parent.LevelVsVolumeCurves.Remove(levelVsVolumeCurveItem)))
                {
                    return true;
                }
                IInflowForecast inflowForecastItem = item.As<IInflowForecast>();
                if (((inflowForecastItem != null) 
                            && this._parent.InflowForecasts.Remove(inflowForecastItem)))
                {
                    return true;
                }
                if ((this._parent.TargetLevelSchedule == item))
                {
                    this._parent.TargetLevelSchedule = null;
                    return true;
                }
                if (((hydroPowerPlantItem != null) 
                            && this._parent.HydroPowerPlants.Remove(hydroPowerPlantItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.UpstreamFromHydroPowerPlants).Concat(this._parent.SpillsIntoReservoirs).Concat(this._parent.SpillsFromReservoir).Concat(this._parent.LevelVsVolumeCurves).Concat(this._parent.InflowForecasts).Concat(this._parent.TargetLevelSchedule).Concat(this._parent.HydroPowerPlants).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the activeStorageCapacity property
        /// </summary>
        private sealed class ActiveStorageCapacityProxy : ModelPropertyChange<IReservoir, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActiveStorageCapacityProxy(IReservoir modelElement) : 
                    base(modelElement, "activeStorageCapacity")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ActiveStorageCapacity;
                }
                set
                {
                    this.ModelElement.ActiveStorageCapacity = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the spillTravelDelay property
        /// </summary>
        private sealed class SpillTravelDelayProxy : ModelPropertyChange<IReservoir, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpillTravelDelayProxy(IReservoir modelElement) : 
                    base(modelElement, "spillTravelDelay")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SpillTravelDelay;
                }
                set
                {
                    this.ModelElement.SpillTravelDelay = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the riverOutletWorks property
        /// </summary>
        private sealed class RiverOutletWorksProxy : ModelPropertyChange<IReservoir, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RiverOutletWorksProxy(IReservoir modelElement) : 
                    base(modelElement, "riverOutletWorks")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.RiverOutletWorks;
                }
                set
                {
                    this.ModelElement.RiverOutletWorks = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the normalMinOperateLevel property
        /// </summary>
        private sealed class NormalMinOperateLevelProxy : ModelPropertyChange<IReservoir, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NormalMinOperateLevelProxy(IReservoir modelElement) : 
                    base(modelElement, "normalMinOperateLevel")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NormalMinOperateLevel;
                }
                set
                {
                    this.ModelElement.NormalMinOperateLevel = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the spillwayCrestLevel property
        /// </summary>
        private sealed class SpillwayCrestLevelProxy : ModelPropertyChange<IReservoir, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpillwayCrestLevelProxy(IReservoir modelElement) : 
                    base(modelElement, "spillwayCrestLevel")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SpillwayCrestLevel;
                }
                set
                {
                    this.ModelElement.SpillwayCrestLevel = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fullSupplyLevel property
        /// </summary>
        private sealed class FullSupplyLevelProxy : ModelPropertyChange<IReservoir, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FullSupplyLevelProxy(IReservoir modelElement) : 
                    base(modelElement, "fullSupplyLevel")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.FullSupplyLevel;
                }
                set
                {
                    this.ModelElement.FullSupplyLevel = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the spillwayCapacity property
        /// </summary>
        private sealed class SpillwayCapacityProxy : ModelPropertyChange<IReservoir, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpillwayCapacityProxy(IReservoir modelElement) : 
                    base(modelElement, "spillwayCapacity")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SpillwayCapacity;
                }
                set
                {
                    this.ModelElement.SpillwayCapacity = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the spillWayGateType property
        /// </summary>
        private sealed class SpillWayGateTypeProxy : ModelPropertyChange<IReservoir, Nullable<SpillwayGateType>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpillWayGateTypeProxy(IReservoir modelElement) : 
                    base(modelElement, "spillWayGateType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<SpillwayGateType> Value
            {
                get
                {
                    return this.ModelElement.SpillWayGateType;
                }
                set
                {
                    this.ModelElement.SpillWayGateType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the spillwayCrestLength property
        /// </summary>
        private sealed class SpillwayCrestLengthProxy : ModelPropertyChange<IReservoir, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpillwayCrestLengthProxy(IReservoir modelElement) : 
                    base(modelElement, "spillwayCrestLength")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SpillwayCrestLength;
                }
                set
                {
                    this.ModelElement.SpillwayCrestLength = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the energyStorageRating property
        /// </summary>
        private sealed class EnergyStorageRatingProxy : ModelPropertyChange<IReservoir, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnergyStorageRatingProxy(IReservoir modelElement) : 
                    base(modelElement, "energyStorageRating")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.EnergyStorageRating;
                }
                set
                {
                    this.ModelElement.EnergyStorageRating = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the grossCapacity property
        /// </summary>
        private sealed class GrossCapacityProxy : ModelPropertyChange<IReservoir, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GrossCapacityProxy(IReservoir modelElement) : 
                    base(modelElement, "grossCapacity")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.GrossCapacity;
                }
                set
                {
                    this.ModelElement.GrossCapacity = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SpillsFromReservoir property
        /// </summary>
        private sealed class SpillsFromReservoirProxy : ModelPropertyChange<IReservoir, IReservoir>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpillsFromReservoirProxy(IReservoir modelElement) : 
                    base(modelElement, "SpillsFromReservoir")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReservoir Value
            {
                get
                {
                    return this.ModelElement.SpillsFromReservoir;
                }
                set
                {
                    this.ModelElement.SpillsFromReservoir = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TargetLevelSchedule property
        /// </summary>
        private sealed class TargetLevelScheduleProxy : ModelPropertyChange<IReservoir, ITargetLevelSchedule>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TargetLevelScheduleProxy(IReservoir modelElement) : 
                    base(modelElement, "TargetLevelSchedule")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITargetLevelSchedule Value
            {
                get
                {
                    return this.ModelElement.TargetLevelSchedule;
                }
                set
                {
                    this.ModelElement.TargetLevelSchedule = value;
                }
            }
        }
    }
}

