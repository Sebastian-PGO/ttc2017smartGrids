//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.Production
{
    
    
    /// <summary>
    /// The default implementation of the HydroPowerPlant class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Production")]
    [XmlNamespacePrefixAttribute("cimProduction")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/HydroPo" +
        "werPlant")]
    [DebuggerDisplayAttribute("HydroPowerPlant {UUID}")]
    public class HydroPowerPlant : PowerSystemResource, IHydroPowerPlant, IModelElement
    {
        
        /// <summary>
        /// The backing field for the GenRatedP property
        /// </summary>
        private float _genRatedP;
        
        /// <summary>
        /// The backing field for the SurgeTankCrestLevel property
        /// </summary>
        private float _surgeTankCrestLevel;
        
        /// <summary>
        /// The backing field for the DischargeTravelDelay property
        /// </summary>
        private float _dischargeTravelDelay;
        
        /// <summary>
        /// The backing field for the PumpRatedP property
        /// </summary>
        private float _pumpRatedP;
        
        /// <summary>
        /// The backing field for the PenstockType property
        /// </summary>
        private Nullable<PenstockType> _penstockType;
        
        /// <summary>
        /// The backing field for the HydroPlantType property
        /// </summary>
        private Nullable<HydroPlantType> _hydroPlantType;
        
        /// <summary>
        /// The backing field for the PlantRatedHead property
        /// </summary>
        private float _plantRatedHead;
        
        /// <summary>
        /// The backing field for the SurgeTankCode property
        /// </summary>
        private Nullable<SurgeTankCode> _surgeTankCode;
        
        /// <summary>
        /// The backing field for the PlantDischargeCapacity property
        /// </summary>
        private float _plantDischargeCapacity;
        
        /// <summary>
        /// The backing field for the GenSourcePumpDischargeReservoir property
        /// </summary>
        private IReservoir _genSourcePumpDischargeReservoir;
        
        /// <summary>
        /// The backing field for the HydroGeneratingUnits property
        /// </summary>
        private HydroPowerPlantHydroGeneratingUnitsCollection _hydroGeneratingUnits;
        
        /// <summary>
        /// The backing field for the HydroPumps property
        /// </summary>
        private HydroPowerPlantHydroPumpsCollection _hydroPumps;
        
        /// <summary>
        /// The backing field for the Reservoir property
        /// </summary>
        private IReservoir _reservoir;
        
        private static IClass _classInstance;
        
        public HydroPowerPlant()
        {
            this._hydroGeneratingUnits = new HydroPowerPlantHydroGeneratingUnitsCollection(this);
            this._hydroGeneratingUnits.CollectionChanging += this.HydroGeneratingUnitsCollectionChanging;
            this._hydroGeneratingUnits.CollectionChanged += this.HydroGeneratingUnitsCollectionChanged;
            this._hydroPumps = new HydroPowerPlantHydroPumpsCollection(this);
            this._hydroPumps.CollectionChanging += this.HydroPumpsCollectionChanging;
            this._hydroPumps.CollectionChanged += this.HydroPumpsCollectionChanged;
        }
        
        /// <summary>
        /// The genRatedP property
        /// </summary>
        [XmlElementNameAttribute("genRatedP")]
        [XmlAttributeAttribute(true)]
        public virtual float GenRatedP
        {
            get
            {
                return this._genRatedP;
            }
            set
            {
                if ((this._genRatedP != value))
                {
                    float old = this._genRatedP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGenRatedPChanging(e);
                    this.OnPropertyChanging("GenRatedP", e);
                    this._genRatedP = value;
                    this.OnGenRatedPChanged(e);
                    this.OnPropertyChanged("GenRatedP", e);
                }
            }
        }
        
        /// <summary>
        /// The surgeTankCrestLevel property
        /// </summary>
        [XmlElementNameAttribute("surgeTankCrestLevel")]
        [XmlAttributeAttribute(true)]
        public virtual float SurgeTankCrestLevel
        {
            get
            {
                return this._surgeTankCrestLevel;
            }
            set
            {
                if ((this._surgeTankCrestLevel != value))
                {
                    float old = this._surgeTankCrestLevel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSurgeTankCrestLevelChanging(e);
                    this.OnPropertyChanging("SurgeTankCrestLevel", e);
                    this._surgeTankCrestLevel = value;
                    this.OnSurgeTankCrestLevelChanged(e);
                    this.OnPropertyChanged("SurgeTankCrestLevel", e);
                }
            }
        }
        
        /// <summary>
        /// The dischargeTravelDelay property
        /// </summary>
        [XmlElementNameAttribute("dischargeTravelDelay")]
        [XmlAttributeAttribute(true)]
        public virtual float DischargeTravelDelay
        {
            get
            {
                return this._dischargeTravelDelay;
            }
            set
            {
                if ((this._dischargeTravelDelay != value))
                {
                    float old = this._dischargeTravelDelay;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDischargeTravelDelayChanging(e);
                    this.OnPropertyChanging("DischargeTravelDelay", e);
                    this._dischargeTravelDelay = value;
                    this.OnDischargeTravelDelayChanged(e);
                    this.OnPropertyChanged("DischargeTravelDelay", e);
                }
            }
        }
        
        /// <summary>
        /// The pumpRatedP property
        /// </summary>
        [XmlElementNameAttribute("pumpRatedP")]
        [XmlAttributeAttribute(true)]
        public virtual float PumpRatedP
        {
            get
            {
                return this._pumpRatedP;
            }
            set
            {
                if ((this._pumpRatedP != value))
                {
                    float old = this._pumpRatedP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPumpRatedPChanging(e);
                    this.OnPropertyChanging("PumpRatedP", e);
                    this._pumpRatedP = value;
                    this.OnPumpRatedPChanged(e);
                    this.OnPropertyChanged("PumpRatedP", e);
                }
            }
        }
        
        /// <summary>
        /// The penstockType property
        /// </summary>
        [XmlElementNameAttribute("penstockType")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<PenstockType> PenstockType
        {
            get
            {
                return this._penstockType;
            }
            set
            {
                if ((this._penstockType != value))
                {
                    Nullable<PenstockType> old = this._penstockType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPenstockTypeChanging(e);
                    this.OnPropertyChanging("PenstockType", e);
                    this._penstockType = value;
                    this.OnPenstockTypeChanged(e);
                    this.OnPropertyChanged("PenstockType", e);
                }
            }
        }
        
        /// <summary>
        /// The hydroPlantType property
        /// </summary>
        [XmlElementNameAttribute("hydroPlantType")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<HydroPlantType> HydroPlantType
        {
            get
            {
                return this._hydroPlantType;
            }
            set
            {
                if ((this._hydroPlantType != value))
                {
                    Nullable<HydroPlantType> old = this._hydroPlantType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHydroPlantTypeChanging(e);
                    this.OnPropertyChanging("HydroPlantType", e);
                    this._hydroPlantType = value;
                    this.OnHydroPlantTypeChanged(e);
                    this.OnPropertyChanged("HydroPlantType", e);
                }
            }
        }
        
        /// <summary>
        /// The plantRatedHead property
        /// </summary>
        [XmlElementNameAttribute("plantRatedHead")]
        [XmlAttributeAttribute(true)]
        public virtual float PlantRatedHead
        {
            get
            {
                return this._plantRatedHead;
            }
            set
            {
                if ((this._plantRatedHead != value))
                {
                    float old = this._plantRatedHead;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPlantRatedHeadChanging(e);
                    this.OnPropertyChanging("PlantRatedHead", e);
                    this._plantRatedHead = value;
                    this.OnPlantRatedHeadChanged(e);
                    this.OnPropertyChanged("PlantRatedHead", e);
                }
            }
        }
        
        /// <summary>
        /// The surgeTankCode property
        /// </summary>
        [XmlElementNameAttribute("surgeTankCode")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<SurgeTankCode> SurgeTankCode
        {
            get
            {
                return this._surgeTankCode;
            }
            set
            {
                if ((this._surgeTankCode != value))
                {
                    Nullable<SurgeTankCode> old = this._surgeTankCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSurgeTankCodeChanging(e);
                    this.OnPropertyChanging("SurgeTankCode", e);
                    this._surgeTankCode = value;
                    this.OnSurgeTankCodeChanged(e);
                    this.OnPropertyChanged("SurgeTankCode", e);
                }
            }
        }
        
        /// <summary>
        /// The plantDischargeCapacity property
        /// </summary>
        [XmlElementNameAttribute("plantDischargeCapacity")]
        [XmlAttributeAttribute(true)]
        public virtual float PlantDischargeCapacity
        {
            get
            {
                return this._plantDischargeCapacity;
            }
            set
            {
                if ((this._plantDischargeCapacity != value))
                {
                    float old = this._plantDischargeCapacity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPlantDischargeCapacityChanging(e);
                    this.OnPropertyChanging("PlantDischargeCapacity", e);
                    this._plantDischargeCapacity = value;
                    this.OnPlantDischargeCapacityChanged(e);
                    this.OnPropertyChanged("PlantDischargeCapacity", e);
                }
            }
        }
        
        /// <summary>
        /// The GenSourcePumpDischargeReservoir property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("UpstreamFromHydroPowerPlants")]
        public virtual IReservoir GenSourcePumpDischargeReservoir
        {
            get
            {
                return this._genSourcePumpDischargeReservoir;
            }
            set
            {
                if ((this._genSourcePumpDischargeReservoir != value))
                {
                    IReservoir old = this._genSourcePumpDischargeReservoir;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGenSourcePumpDischargeReservoirChanging(e);
                    this.OnPropertyChanging("GenSourcePumpDischargeReservoir", e);
                    this._genSourcePumpDischargeReservoir = value;
                    if ((old != null))
                    {
                        old.UpstreamFromHydroPowerPlants.Remove(this);
                        old.Deleted -= this.OnResetGenSourcePumpDischargeReservoir;
                    }
                    if ((value != null))
                    {
                        value.UpstreamFromHydroPowerPlants.Add(this);
                        value.Deleted += this.OnResetGenSourcePumpDischargeReservoir;
                    }
                    this.OnGenSourcePumpDischargeReservoirChanged(e);
                    this.OnPropertyChanged("GenSourcePumpDischargeReservoir", e);
                }
            }
        }
        
        /// <summary>
        /// The HydroGeneratingUnits property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("HydroPowerPlant")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IHydroGeneratingUnit> HydroGeneratingUnits
        {
            get
            {
                return this._hydroGeneratingUnits;
            }
        }
        
        /// <summary>
        /// The HydroPumps property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("HydroPowerPlant")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IHydroPump> HydroPumps
        {
            get
            {
                return this._hydroPumps;
            }
        }
        
        /// <summary>
        /// The Reservoir property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("HydroPowerPlants")]
        public virtual IReservoir Reservoir
        {
            get
            {
                return this._reservoir;
            }
            set
            {
                if ((this._reservoir != value))
                {
                    IReservoir old = this._reservoir;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReservoirChanging(e);
                    this.OnPropertyChanging("Reservoir", e);
                    this._reservoir = value;
                    if ((old != null))
                    {
                        old.HydroPowerPlants.Remove(this);
                        old.Deleted -= this.OnResetReservoir;
                    }
                    if ((value != null))
                    {
                        value.HydroPowerPlants.Add(this);
                        value.Deleted += this.OnResetReservoir;
                    }
                    this.OnReservoirChanged(e);
                    this.OnPropertyChanged("Reservoir", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new HydroPowerPlantReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/HydroPo" +
                            "werPlant")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the GenRatedP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GenRatedPChanging;
        
        /// <summary>
        /// Gets fired when the GenRatedP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GenRatedPChanged;
        
        /// <summary>
        /// Gets fired before the SurgeTankCrestLevel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SurgeTankCrestLevelChanging;
        
        /// <summary>
        /// Gets fired when the SurgeTankCrestLevel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SurgeTankCrestLevelChanged;
        
        /// <summary>
        /// Gets fired before the DischargeTravelDelay property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DischargeTravelDelayChanging;
        
        /// <summary>
        /// Gets fired when the DischargeTravelDelay property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DischargeTravelDelayChanged;
        
        /// <summary>
        /// Gets fired before the PumpRatedP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PumpRatedPChanging;
        
        /// <summary>
        /// Gets fired when the PumpRatedP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PumpRatedPChanged;
        
        /// <summary>
        /// Gets fired before the PenstockType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PenstockTypeChanging;
        
        /// <summary>
        /// Gets fired when the PenstockType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PenstockTypeChanged;
        
        /// <summary>
        /// Gets fired before the HydroPlantType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HydroPlantTypeChanging;
        
        /// <summary>
        /// Gets fired when the HydroPlantType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HydroPlantTypeChanged;
        
        /// <summary>
        /// Gets fired before the PlantRatedHead property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PlantRatedHeadChanging;
        
        /// <summary>
        /// Gets fired when the PlantRatedHead property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PlantRatedHeadChanged;
        
        /// <summary>
        /// Gets fired before the SurgeTankCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SurgeTankCodeChanging;
        
        /// <summary>
        /// Gets fired when the SurgeTankCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SurgeTankCodeChanged;
        
        /// <summary>
        /// Gets fired before the PlantDischargeCapacity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PlantDischargeCapacityChanging;
        
        /// <summary>
        /// Gets fired when the PlantDischargeCapacity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PlantDischargeCapacityChanged;
        
        /// <summary>
        /// Gets fired before the GenSourcePumpDischargeReservoir property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GenSourcePumpDischargeReservoirChanging;
        
        /// <summary>
        /// Gets fired when the GenSourcePumpDischargeReservoir property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GenSourcePumpDischargeReservoirChanged;
        
        /// <summary>
        /// Gets fired before the Reservoir property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReservoirChanging;
        
        /// <summary>
        /// Gets fired when the Reservoir property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReservoirChanged;
        
        /// <summary>
        /// Raises the GenRatedPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGenRatedPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GenRatedPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GenRatedPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGenRatedPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GenRatedPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SurgeTankCrestLevelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSurgeTankCrestLevelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SurgeTankCrestLevelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SurgeTankCrestLevelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSurgeTankCrestLevelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SurgeTankCrestLevelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DischargeTravelDelayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDischargeTravelDelayChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DischargeTravelDelayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DischargeTravelDelayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDischargeTravelDelayChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DischargeTravelDelayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PumpRatedPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPumpRatedPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PumpRatedPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PumpRatedPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPumpRatedPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PumpRatedPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PenstockTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPenstockTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PenstockTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PenstockTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPenstockTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PenstockTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HydroPlantTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHydroPlantTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HydroPlantTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HydroPlantTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHydroPlantTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HydroPlantTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PlantRatedHeadChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPlantRatedHeadChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PlantRatedHeadChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PlantRatedHeadChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPlantRatedHeadChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PlantRatedHeadChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SurgeTankCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSurgeTankCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SurgeTankCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SurgeTankCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSurgeTankCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SurgeTankCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PlantDischargeCapacityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPlantDischargeCapacityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PlantDischargeCapacityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PlantDischargeCapacityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPlantDischargeCapacityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PlantDischargeCapacityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GenSourcePumpDischargeReservoirChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGenSourcePumpDischargeReservoirChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GenSourcePumpDischargeReservoirChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GenSourcePumpDischargeReservoirChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGenSourcePumpDischargeReservoirChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GenSourcePumpDischargeReservoirChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GenSourcePumpDischargeReservoir property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGenSourcePumpDischargeReservoir(object sender, System.EventArgs eventArgs)
        {
            this.GenSourcePumpDischargeReservoir = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the HydroGeneratingUnits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HydroGeneratingUnitsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("HydroGeneratingUnits", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the HydroGeneratingUnits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HydroGeneratingUnitsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("HydroGeneratingUnits", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the HydroPumps property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HydroPumpsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("HydroPumps", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the HydroPumps property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HydroPumpsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("HydroPumps", e);
        }
        
        /// <summary>
        /// Raises the ReservoirChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReservoirChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReservoirChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReservoirChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReservoirChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReservoirChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Reservoir property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReservoir(object sender, System.EventArgs eventArgs)
        {
            this.Reservoir = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "GENRATEDP"))
            {
                return this.GenRatedP;
            }
            if ((attribute == "SURGETANKCRESTLEVEL"))
            {
                return this.SurgeTankCrestLevel;
            }
            if ((attribute == "DISCHARGETRAVELDELAY"))
            {
                return this.DischargeTravelDelay;
            }
            if ((attribute == "PUMPRATEDP"))
            {
                return this.PumpRatedP;
            }
            if ((attribute == "PENSTOCKTYPE"))
            {
                return this.PenstockType;
            }
            if ((attribute == "HYDROPLANTTYPE"))
            {
                return this.HydroPlantType;
            }
            if ((attribute == "PLANTRATEDHEAD"))
            {
                return this.PlantRatedHead;
            }
            if ((attribute == "SURGETANKCODE"))
            {
                return this.SurgeTankCode;
            }
            if ((attribute == "PLANTDISCHARGECAPACITY"))
            {
                return this.PlantDischargeCapacity;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "HYDROGENERATINGUNITS"))
            {
                return this._hydroGeneratingUnits;
            }
            if ((feature == "HYDROPUMPS"))
            {
                return this._hydroPumps;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "GENSOURCEPUMPDISCHARGERESERVOIR"))
            {
                this.GenSourcePumpDischargeReservoir = ((IReservoir)(value));
                return;
            }
            if ((feature == "RESERVOIR"))
            {
                this.Reservoir = ((IReservoir)(value));
                return;
            }
            if ((feature == "GENRATEDP"))
            {
                this.GenRatedP = ((float)(value));
                return;
            }
            if ((feature == "SURGETANKCRESTLEVEL"))
            {
                this.SurgeTankCrestLevel = ((float)(value));
                return;
            }
            if ((feature == "DISCHARGETRAVELDELAY"))
            {
                this.DischargeTravelDelay = ((float)(value));
                return;
            }
            if ((feature == "PUMPRATEDP"))
            {
                this.PumpRatedP = ((float)(value));
                return;
            }
            if ((feature == "PENSTOCKTYPE"))
            {
                this.PenstockType = ((PenstockType)(value));
                return;
            }
            if ((feature == "HYDROPLANTTYPE"))
            {
                this.HydroPlantType = ((HydroPlantType)(value));
                return;
            }
            if ((feature == "PLANTRATEDHEAD"))
            {
                this.PlantRatedHead = ((float)(value));
                return;
            }
            if ((feature == "SURGETANKCODE"))
            {
                this.SurgeTankCode = ((SurgeTankCode)(value));
                return;
            }
            if ((feature == "PLANTDISCHARGECAPACITY"))
            {
                this.PlantDischargeCapacity = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "GenSourcePumpDischargeReservoir"))
            {
                return new GenSourcePumpDischargeReservoirProxy(this);
            }
            if ((attribute == "Reservoir"))
            {
                return new ReservoirProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "GenSourcePumpDischargeReservoir"))
            {
                return new GenSourcePumpDischargeReservoirProxy(this);
            }
            if ((reference == "Reservoir"))
            {
                return new ReservoirProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/HydroPo" +
                        "werPlant")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the HydroPowerPlant class
        /// </summary>
        public class HydroPowerPlantReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private HydroPowerPlant _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public HydroPowerPlantReferencedElementsCollection(HydroPowerPlant parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.GenSourcePumpDischargeReservoir != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.HydroGeneratingUnits.Count);
                    count = (count + this._parent.HydroPumps.Count);
                    if ((this._parent.Reservoir != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.GenSourcePumpDischargeReservoirChanged += this.PropagateValueChanges;
                this._parent.HydroGeneratingUnits.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.HydroPumps.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ReservoirChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.GenSourcePumpDischargeReservoirChanged -= this.PropagateValueChanges;
                this._parent.HydroGeneratingUnits.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.HydroPumps.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ReservoirChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.GenSourcePumpDischargeReservoir == null))
                {
                    IReservoir genSourcePumpDischargeReservoirCasted = item.As<IReservoir>();
                    if ((genSourcePumpDischargeReservoirCasted != null))
                    {
                        this._parent.GenSourcePumpDischargeReservoir = genSourcePumpDischargeReservoirCasted;
                        return;
                    }
                }
                IHydroGeneratingUnit hydroGeneratingUnitsCasted = item.As<IHydroGeneratingUnit>();
                if ((hydroGeneratingUnitsCasted != null))
                {
                    this._parent.HydroGeneratingUnits.Add(hydroGeneratingUnitsCasted);
                }
                IHydroPump hydroPumpsCasted = item.As<IHydroPump>();
                if ((hydroPumpsCasted != null))
                {
                    this._parent.HydroPumps.Add(hydroPumpsCasted);
                }
                if ((this._parent.Reservoir == null))
                {
                    IReservoir reservoirCasted = item.As<IReservoir>();
                    if ((reservoirCasted != null))
                    {
                        this._parent.Reservoir = reservoirCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.GenSourcePumpDischargeReservoir = null;
                this._parent.HydroGeneratingUnits.Clear();
                this._parent.HydroPumps.Clear();
                this._parent.Reservoir = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.GenSourcePumpDischargeReservoir))
                {
                    return true;
                }
                if (this._parent.HydroGeneratingUnits.Contains(item))
                {
                    return true;
                }
                if (this._parent.HydroPumps.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Reservoir))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.GenSourcePumpDischargeReservoir != null))
                {
                    array[arrayIndex] = this._parent.GenSourcePumpDischargeReservoir;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> hydroGeneratingUnitsEnumerator = this._parent.HydroGeneratingUnits.GetEnumerator();
                try
                {
                    for (
                    ; hydroGeneratingUnitsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = hydroGeneratingUnitsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    hydroGeneratingUnitsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> hydroPumpsEnumerator = this._parent.HydroPumps.GetEnumerator();
                try
                {
                    for (
                    ; hydroPumpsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = hydroPumpsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    hydroPumpsEnumerator.Dispose();
                }
                if ((this._parent.Reservoir != null))
                {
                    array[arrayIndex] = this._parent.Reservoir;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.GenSourcePumpDischargeReservoir == item))
                {
                    this._parent.GenSourcePumpDischargeReservoir = null;
                    return true;
                }
                IHydroGeneratingUnit hydroGeneratingUnitItem = item.As<IHydroGeneratingUnit>();
                if (((hydroGeneratingUnitItem != null) 
                            && this._parent.HydroGeneratingUnits.Remove(hydroGeneratingUnitItem)))
                {
                    return true;
                }
                IHydroPump hydroPumpItem = item.As<IHydroPump>();
                if (((hydroPumpItem != null) 
                            && this._parent.HydroPumps.Remove(hydroPumpItem)))
                {
                    return true;
                }
                if ((this._parent.Reservoir == item))
                {
                    this._parent.Reservoir = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.GenSourcePumpDischargeReservoir).Concat(this._parent.HydroGeneratingUnits).Concat(this._parent.HydroPumps).Concat(this._parent.Reservoir).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the genRatedP property
        /// </summary>
        private sealed class GenRatedPProxy : ModelPropertyChange<IHydroPowerPlant, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GenRatedPProxy(IHydroPowerPlant modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.GenRatedP;
                }
                set
                {
                    this.ModelElement.GenRatedP = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GenRatedPChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GenRatedPChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the surgeTankCrestLevel property
        /// </summary>
        private sealed class SurgeTankCrestLevelProxy : ModelPropertyChange<IHydroPowerPlant, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SurgeTankCrestLevelProxy(IHydroPowerPlant modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SurgeTankCrestLevel;
                }
                set
                {
                    this.ModelElement.SurgeTankCrestLevel = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SurgeTankCrestLevelChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SurgeTankCrestLevelChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dischargeTravelDelay property
        /// </summary>
        private sealed class DischargeTravelDelayProxy : ModelPropertyChange<IHydroPowerPlant, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DischargeTravelDelayProxy(IHydroPowerPlant modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.DischargeTravelDelay;
                }
                set
                {
                    this.ModelElement.DischargeTravelDelay = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DischargeTravelDelayChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DischargeTravelDelayChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pumpRatedP property
        /// </summary>
        private sealed class PumpRatedPProxy : ModelPropertyChange<IHydroPowerPlant, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PumpRatedPProxy(IHydroPowerPlant modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PumpRatedP;
                }
                set
                {
                    this.ModelElement.PumpRatedP = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PumpRatedPChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PumpRatedPChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the penstockType property
        /// </summary>
        private sealed class PenstockTypeProxy : ModelPropertyChange<IHydroPowerPlant, Nullable<PenstockType>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PenstockTypeProxy(IHydroPowerPlant modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<PenstockType> Value
            {
                get
                {
                    return this.ModelElement.PenstockType;
                }
                set
                {
                    this.ModelElement.PenstockType = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PenstockTypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PenstockTypeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the hydroPlantType property
        /// </summary>
        private sealed class HydroPlantTypeProxy : ModelPropertyChange<IHydroPowerPlant, Nullable<HydroPlantType>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HydroPlantTypeProxy(IHydroPowerPlant modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<HydroPlantType> Value
            {
                get
                {
                    return this.ModelElement.HydroPlantType;
                }
                set
                {
                    this.ModelElement.HydroPlantType = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HydroPlantTypeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HydroPlantTypeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the plantRatedHead property
        /// </summary>
        private sealed class PlantRatedHeadProxy : ModelPropertyChange<IHydroPowerPlant, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PlantRatedHeadProxy(IHydroPowerPlant modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PlantRatedHead;
                }
                set
                {
                    this.ModelElement.PlantRatedHead = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PlantRatedHeadChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PlantRatedHeadChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the surgeTankCode property
        /// </summary>
        private sealed class SurgeTankCodeProxy : ModelPropertyChange<IHydroPowerPlant, Nullable<SurgeTankCode>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SurgeTankCodeProxy(IHydroPowerPlant modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<SurgeTankCode> Value
            {
                get
                {
                    return this.ModelElement.SurgeTankCode;
                }
                set
                {
                    this.ModelElement.SurgeTankCode = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SurgeTankCodeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SurgeTankCodeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the plantDischargeCapacity property
        /// </summary>
        private sealed class PlantDischargeCapacityProxy : ModelPropertyChange<IHydroPowerPlant, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PlantDischargeCapacityProxy(IHydroPowerPlant modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PlantDischargeCapacity;
                }
                set
                {
                    this.ModelElement.PlantDischargeCapacity = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PlantDischargeCapacityChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PlantDischargeCapacityChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GenSourcePumpDischargeReservoir property
        /// </summary>
        private sealed class GenSourcePumpDischargeReservoirProxy : ModelPropertyChange<IHydroPowerPlant, IReservoir>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GenSourcePumpDischargeReservoirProxy(IHydroPowerPlant modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReservoir Value
            {
                get
                {
                    return this.ModelElement.GenSourcePumpDischargeReservoir;
                }
                set
                {
                    this.ModelElement.GenSourcePumpDischargeReservoir = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GenSourcePumpDischargeReservoirChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GenSourcePumpDischargeReservoirChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reservoir property
        /// </summary>
        private sealed class ReservoirProxy : ModelPropertyChange<IHydroPowerPlant, IReservoir>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReservoirProxy(IHydroPowerPlant modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReservoir Value
            {
                get
                {
                    return this.ModelElement.Reservoir;
                }
                set
                {
                    this.ModelElement.Reservoir = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReservoirChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReservoirChanged -= handler;
            }
        }
    }
}

