//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.Production
{
    
    
    /// <summary>
    /// The default implementation of the GeneratingUnit class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Production")]
    [XmlNamespacePrefixAttribute("cimProduction")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/Generat" +
        "ingUnit")]
    [DebuggerDisplayAttribute("GeneratingUnit {UUID}")]
    public class GeneratingUnit : Equipment, IGeneratingUnit, IModelElement
    {
        
        /// <summary>
        /// The backing field for the HighControlLimit property
        /// </summary>
        private float _highControlLimit;
        
        /// <summary>
        /// The backing field for the RaiseRampRate property
        /// </summary>
        private float _raiseRampRate;
        
        /// <summary>
        /// The backing field for the GenOperatingMode property
        /// </summary>
        private Nullable<GeneratorOperatingMode> _genOperatingMode;
        
        /// <summary>
        /// The backing field for the AutoCntrlMarginP property
        /// </summary>
        private float _autoCntrlMarginP;
        
        /// <summary>
        /// The backing field for the ControlPulseLow property
        /// </summary>
        private float _controlPulseLow;
        
        /// <summary>
        /// The backing field for the GovernorMPL property
        /// </summary>
        private float _governorMPL;
        
        /// <summary>
        /// The backing field for the RatedGrossMaxP property
        /// </summary>
        private float _ratedGrossMaxP;
        
        /// <summary>
        /// The backing field for the AllocSpinResP property
        /// </summary>
        private float _allocSpinResP;
        
        /// <summary>
        /// The backing field for the StepChange property
        /// </summary>
        private float _stepChange;
        
        /// <summary>
        /// The backing field for the StartupCost property
        /// </summary>
        private float _startupCost;
        
        /// <summary>
        /// The backing field for the SpinReserveRamp property
        /// </summary>
        private float _spinReserveRamp;
        
        /// <summary>
        /// The backing field for the NominalP property
        /// </summary>
        private float _nominalP;
        
        /// <summary>
        /// The backing field for the GovernorSCD property
        /// </summary>
        private float _governorSCD;
        
        /// <summary>
        /// The backing field for the PenaltyFactor property
        /// </summary>
        private float _penaltyFactor;
        
        /// <summary>
        /// The backing field for the ControlPulseHigh property
        /// </summary>
        private float _controlPulseHigh;
        
        /// <summary>
        /// The backing field for the EnergyMinP property
        /// </summary>
        private float _energyMinP;
        
        /// <summary>
        /// The backing field for the StartupTime property
        /// </summary>
        private float _startupTime;
        
        /// <summary>
        /// The backing field for the TieLinePF property
        /// </summary>
        private float _tieLinePF;
        
        /// <summary>
        /// The backing field for the LowerRampRate property
        /// </summary>
        private float _lowerRampRate;
        
        /// <summary>
        /// The backing field for the InitialP property
        /// </summary>
        private float _initialP;
        
        /// <summary>
        /// The backing field for the ControlResponseRate property
        /// </summary>
        private float _controlResponseRate;
        
        /// <summary>
        /// The backing field for the MinEconomicP property
        /// </summary>
        private float _minEconomicP;
        
        /// <summary>
        /// The backing field for the ModelDetail property
        /// </summary>
        private object _modelDetail;
        
        /// <summary>
        /// The backing field for the FuelPriority property
        /// </summary>
        private int _fuelPriority;
        
        /// <summary>
        /// The backing field for the MaxEconomicP property
        /// </summary>
        private float _maxEconomicP;
        
        /// <summary>
        /// The backing field for the GenControlSource property
        /// </summary>
        private Nullable<GeneratorControlSource> _genControlSource;
        
        /// <summary>
        /// The backing field for the RatedGrossMinP property
        /// </summary>
        private float _ratedGrossMinP;
        
        /// <summary>
        /// The backing field for the VariableCost property
        /// </summary>
        private float _variableCost;
        
        /// <summary>
        /// The backing field for the MinOperatingP property
        /// </summary>
        private float _minOperatingP;
        
        /// <summary>
        /// The backing field for the BaseP property
        /// </summary>
        private float _baseP;
        
        /// <summary>
        /// The backing field for the ShortPF property
        /// </summary>
        private float _shortPF;
        
        /// <summary>
        /// The backing field for the LowControlLimit property
        /// </summary>
        private float _lowControlLimit;
        
        /// <summary>
        /// The backing field for the LongPF property
        /// </summary>
        private float _longPF;
        
        /// <summary>
        /// The backing field for the MaxOperatingP property
        /// </summary>
        private float _maxOperatingP;
        
        /// <summary>
        /// The backing field for the FastStartFlag property
        /// </summary>
        private bool _fastStartFlag;
        
        /// <summary>
        /// The backing field for the GenControlMode property
        /// </summary>
        private Nullable<GeneratorControlMode> _genControlMode;
        
        /// <summary>
        /// The backing field for the RatedNetMaxP property
        /// </summary>
        private float _ratedNetMaxP;
        
        /// <summary>
        /// The backing field for the Efficiency property
        /// </summary>
        private float _efficiency;
        
        /// <summary>
        /// The backing field for the MinimumOffTime property
        /// </summary>
        private float _minimumOffTime;
        
        /// <summary>
        /// The backing field for the DispReserveFlag property
        /// </summary>
        private bool _dispReserveFlag;
        
        /// <summary>
        /// The backing field for the MaximumAllowableSpinningReserve property
        /// </summary>
        private float _maximumAllowableSpinningReserve;
        
        /// <summary>
        /// The backing field for the ControlDeadband property
        /// </summary>
        private float _controlDeadband;
        
        /// <summary>
        /// The backing field for the NormalPF property
        /// </summary>
        private float _normalPF;
        
        /// <summary>
        /// The backing field for the OperatedBy_GenerationProvider property
        /// </summary>
        private IGenerationProvider _operatedBy_GenerationProvider;
        
        /// <summary>
        /// The backing field for the GenUnitOpSchedule property
        /// </summary>
        private IGenUnitOpSchedule _genUnitOpSchedule;
        
        /// <summary>
        /// The backing field for the ControlAreaGeneratingUnit property
        /// </summary>
        private GeneratingUnitControlAreaGeneratingUnitCollection _controlAreaGeneratingUnit;
        
        /// <summary>
        /// The backing field for the GrossToNetActivePowerCurves property
        /// </summary>
        private GeneratingUnitGrossToNetActivePowerCurvesCollection _grossToNetActivePowerCurves;
        
        /// <summary>
        /// The backing field for the GenUnitOpCostCurves property
        /// </summary>
        private GeneratingUnitGenUnitOpCostCurvesCollection _genUnitOpCostCurves;
        
        /// <summary>
        /// The backing field for the SynchronousMachines property
        /// </summary>
        private GeneratingUnitSynchronousMachinesCollection _synchronousMachines;
        
        /// <summary>
        /// The backing field for the RegisteredGenerator property
        /// </summary>
        private IRegisteredGenerator _registeredGenerator;
        
        /// <summary>
        /// The backing field for the SubControlArea property
        /// </summary>
        private ISubControlArea _subControlArea;
        
        private static IClass _classInstance;
        
        public GeneratingUnit()
        {
            this._controlAreaGeneratingUnit = new GeneratingUnitControlAreaGeneratingUnitCollection(this);
            this._controlAreaGeneratingUnit.CollectionChanging += this.ControlAreaGeneratingUnitCollectionChanging;
            this._controlAreaGeneratingUnit.CollectionChanged += this.ControlAreaGeneratingUnitCollectionChanged;
            this._grossToNetActivePowerCurves = new GeneratingUnitGrossToNetActivePowerCurvesCollection(this);
            this._grossToNetActivePowerCurves.CollectionChanging += this.GrossToNetActivePowerCurvesCollectionChanging;
            this._grossToNetActivePowerCurves.CollectionChanged += this.GrossToNetActivePowerCurvesCollectionChanged;
            this._genUnitOpCostCurves = new GeneratingUnitGenUnitOpCostCurvesCollection(this);
            this._genUnitOpCostCurves.CollectionChanging += this.GenUnitOpCostCurvesCollectionChanging;
            this._genUnitOpCostCurves.CollectionChanged += this.GenUnitOpCostCurvesCollectionChanged;
            this._synchronousMachines = new GeneratingUnitSynchronousMachinesCollection(this);
            this._synchronousMachines.CollectionChanging += this.SynchronousMachinesCollectionChanging;
            this._synchronousMachines.CollectionChanged += this.SynchronousMachinesCollectionChanged;
        }
        
        /// <summary>
        /// The highControlLimit property
        /// </summary>
        [XmlElementNameAttribute("highControlLimit")]
        [XmlAttributeAttribute(true)]
        public virtual float HighControlLimit
        {
            get
            {
                return this._highControlLimit;
            }
            set
            {
                if ((this._highControlLimit != value))
                {
                    float old = this._highControlLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHighControlLimitChanging(e);
                    this.OnPropertyChanging("HighControlLimit", e);
                    this._highControlLimit = value;
                    this.OnHighControlLimitChanged(e);
                    this.OnPropertyChanged("HighControlLimit", e);
                }
            }
        }
        
        /// <summary>
        /// The raiseRampRate property
        /// </summary>
        [XmlElementNameAttribute("raiseRampRate")]
        [XmlAttributeAttribute(true)]
        public virtual float RaiseRampRate
        {
            get
            {
                return this._raiseRampRate;
            }
            set
            {
                if ((this._raiseRampRate != value))
                {
                    float old = this._raiseRampRate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRaiseRampRateChanging(e);
                    this.OnPropertyChanging("RaiseRampRate", e);
                    this._raiseRampRate = value;
                    this.OnRaiseRampRateChanged(e);
                    this.OnPropertyChanged("RaiseRampRate", e);
                }
            }
        }
        
        /// <summary>
        /// The genOperatingMode property
        /// </summary>
        [XmlElementNameAttribute("genOperatingMode")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<GeneratorOperatingMode> GenOperatingMode
        {
            get
            {
                return this._genOperatingMode;
            }
            set
            {
                if ((this._genOperatingMode != value))
                {
                    Nullable<GeneratorOperatingMode> old = this._genOperatingMode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGenOperatingModeChanging(e);
                    this.OnPropertyChanging("GenOperatingMode", e);
                    this._genOperatingMode = value;
                    this.OnGenOperatingModeChanged(e);
                    this.OnPropertyChanged("GenOperatingMode", e);
                }
            }
        }
        
        /// <summary>
        /// The autoCntrlMarginP property
        /// </summary>
        [XmlElementNameAttribute("autoCntrlMarginP")]
        [XmlAttributeAttribute(true)]
        public virtual float AutoCntrlMarginP
        {
            get
            {
                return this._autoCntrlMarginP;
            }
            set
            {
                if ((this._autoCntrlMarginP != value))
                {
                    float old = this._autoCntrlMarginP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAutoCntrlMarginPChanging(e);
                    this.OnPropertyChanging("AutoCntrlMarginP", e);
                    this._autoCntrlMarginP = value;
                    this.OnAutoCntrlMarginPChanged(e);
                    this.OnPropertyChanged("AutoCntrlMarginP", e);
                }
            }
        }
        
        /// <summary>
        /// The controlPulseLow property
        /// </summary>
        [XmlElementNameAttribute("controlPulseLow")]
        [XmlAttributeAttribute(true)]
        public virtual float ControlPulseLow
        {
            get
            {
                return this._controlPulseLow;
            }
            set
            {
                if ((this._controlPulseLow != value))
                {
                    float old = this._controlPulseLow;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnControlPulseLowChanging(e);
                    this.OnPropertyChanging("ControlPulseLow", e);
                    this._controlPulseLow = value;
                    this.OnControlPulseLowChanged(e);
                    this.OnPropertyChanged("ControlPulseLow", e);
                }
            }
        }
        
        /// <summary>
        /// The governorMPL property
        /// </summary>
        [XmlElementNameAttribute("governorMPL")]
        [XmlAttributeAttribute(true)]
        public virtual float GovernorMPL
        {
            get
            {
                return this._governorMPL;
            }
            set
            {
                if ((this._governorMPL != value))
                {
                    float old = this._governorMPL;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGovernorMPLChanging(e);
                    this.OnPropertyChanging("GovernorMPL", e);
                    this._governorMPL = value;
                    this.OnGovernorMPLChanged(e);
                    this.OnPropertyChanged("GovernorMPL", e);
                }
            }
        }
        
        /// <summary>
        /// The ratedGrossMaxP property
        /// </summary>
        [XmlElementNameAttribute("ratedGrossMaxP")]
        [XmlAttributeAttribute(true)]
        public virtual float RatedGrossMaxP
        {
            get
            {
                return this._ratedGrossMaxP;
            }
            set
            {
                if ((this._ratedGrossMaxP != value))
                {
                    float old = this._ratedGrossMaxP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatedGrossMaxPChanging(e);
                    this.OnPropertyChanging("RatedGrossMaxP", e);
                    this._ratedGrossMaxP = value;
                    this.OnRatedGrossMaxPChanged(e);
                    this.OnPropertyChanged("RatedGrossMaxP", e);
                }
            }
        }
        
        /// <summary>
        /// The allocSpinResP property
        /// </summary>
        [XmlElementNameAttribute("allocSpinResP")]
        [XmlAttributeAttribute(true)]
        public virtual float AllocSpinResP
        {
            get
            {
                return this._allocSpinResP;
            }
            set
            {
                if ((this._allocSpinResP != value))
                {
                    float old = this._allocSpinResP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAllocSpinResPChanging(e);
                    this.OnPropertyChanging("AllocSpinResP", e);
                    this._allocSpinResP = value;
                    this.OnAllocSpinResPChanged(e);
                    this.OnPropertyChanged("AllocSpinResP", e);
                }
            }
        }
        
        /// <summary>
        /// The stepChange property
        /// </summary>
        [XmlElementNameAttribute("stepChange")]
        [XmlAttributeAttribute(true)]
        public virtual float StepChange
        {
            get
            {
                return this._stepChange;
            }
            set
            {
                if ((this._stepChange != value))
                {
                    float old = this._stepChange;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStepChangeChanging(e);
                    this.OnPropertyChanging("StepChange", e);
                    this._stepChange = value;
                    this.OnStepChangeChanged(e);
                    this.OnPropertyChanged("StepChange", e);
                }
            }
        }
        
        /// <summary>
        /// The startupCost property
        /// </summary>
        [XmlElementNameAttribute("startupCost")]
        [XmlAttributeAttribute(true)]
        public virtual float StartupCost
        {
            get
            {
                return this._startupCost;
            }
            set
            {
                if ((this._startupCost != value))
                {
                    float old = this._startupCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStartupCostChanging(e);
                    this.OnPropertyChanging("StartupCost", e);
                    this._startupCost = value;
                    this.OnStartupCostChanged(e);
                    this.OnPropertyChanged("StartupCost", e);
                }
            }
        }
        
        /// <summary>
        /// The spinReserveRamp property
        /// </summary>
        [XmlElementNameAttribute("spinReserveRamp")]
        [XmlAttributeAttribute(true)]
        public virtual float SpinReserveRamp
        {
            get
            {
                return this._spinReserveRamp;
            }
            set
            {
                if ((this._spinReserveRamp != value))
                {
                    float old = this._spinReserveRamp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSpinReserveRampChanging(e);
                    this.OnPropertyChanging("SpinReserveRamp", e);
                    this._spinReserveRamp = value;
                    this.OnSpinReserveRampChanged(e);
                    this.OnPropertyChanged("SpinReserveRamp", e);
                }
            }
        }
        
        /// <summary>
        /// The nominalP property
        /// </summary>
        [XmlElementNameAttribute("nominalP")]
        [XmlAttributeAttribute(true)]
        public virtual float NominalP
        {
            get
            {
                return this._nominalP;
            }
            set
            {
                if ((this._nominalP != value))
                {
                    float old = this._nominalP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNominalPChanging(e);
                    this.OnPropertyChanging("NominalP", e);
                    this._nominalP = value;
                    this.OnNominalPChanged(e);
                    this.OnPropertyChanged("NominalP", e);
                }
            }
        }
        
        /// <summary>
        /// The governorSCD property
        /// </summary>
        [XmlElementNameAttribute("governorSCD")]
        [XmlAttributeAttribute(true)]
        public virtual float GovernorSCD
        {
            get
            {
                return this._governorSCD;
            }
            set
            {
                if ((this._governorSCD != value))
                {
                    float old = this._governorSCD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGovernorSCDChanging(e);
                    this.OnPropertyChanging("GovernorSCD", e);
                    this._governorSCD = value;
                    this.OnGovernorSCDChanged(e);
                    this.OnPropertyChanged("GovernorSCD", e);
                }
            }
        }
        
        /// <summary>
        /// The penaltyFactor property
        /// </summary>
        [XmlElementNameAttribute("penaltyFactor")]
        [XmlAttributeAttribute(true)]
        public virtual float PenaltyFactor
        {
            get
            {
                return this._penaltyFactor;
            }
            set
            {
                if ((this._penaltyFactor != value))
                {
                    float old = this._penaltyFactor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPenaltyFactorChanging(e);
                    this.OnPropertyChanging("PenaltyFactor", e);
                    this._penaltyFactor = value;
                    this.OnPenaltyFactorChanged(e);
                    this.OnPropertyChanged("PenaltyFactor", e);
                }
            }
        }
        
        /// <summary>
        /// The controlPulseHigh property
        /// </summary>
        [XmlElementNameAttribute("controlPulseHigh")]
        [XmlAttributeAttribute(true)]
        public virtual float ControlPulseHigh
        {
            get
            {
                return this._controlPulseHigh;
            }
            set
            {
                if ((this._controlPulseHigh != value))
                {
                    float old = this._controlPulseHigh;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnControlPulseHighChanging(e);
                    this.OnPropertyChanging("ControlPulseHigh", e);
                    this._controlPulseHigh = value;
                    this.OnControlPulseHighChanged(e);
                    this.OnPropertyChanged("ControlPulseHigh", e);
                }
            }
        }
        
        /// <summary>
        /// The energyMinP property
        /// </summary>
        [XmlElementNameAttribute("energyMinP")]
        [XmlAttributeAttribute(true)]
        public virtual float EnergyMinP
        {
            get
            {
                return this._energyMinP;
            }
            set
            {
                if ((this._energyMinP != value))
                {
                    float old = this._energyMinP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEnergyMinPChanging(e);
                    this.OnPropertyChanging("EnergyMinP", e);
                    this._energyMinP = value;
                    this.OnEnergyMinPChanged(e);
                    this.OnPropertyChanged("EnergyMinP", e);
                }
            }
        }
        
        /// <summary>
        /// The startupTime property
        /// </summary>
        [XmlElementNameAttribute("startupTime")]
        [XmlAttributeAttribute(true)]
        public virtual float StartupTime
        {
            get
            {
                return this._startupTime;
            }
            set
            {
                if ((this._startupTime != value))
                {
                    float old = this._startupTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStartupTimeChanging(e);
                    this.OnPropertyChanging("StartupTime", e);
                    this._startupTime = value;
                    this.OnStartupTimeChanged(e);
                    this.OnPropertyChanged("StartupTime", e);
                }
            }
        }
        
        /// <summary>
        /// The tieLinePF property
        /// </summary>
        [XmlElementNameAttribute("tieLinePF")]
        [XmlAttributeAttribute(true)]
        public virtual float TieLinePF
        {
            get
            {
                return this._tieLinePF;
            }
            set
            {
                if ((this._tieLinePF != value))
                {
                    float old = this._tieLinePF;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTieLinePFChanging(e);
                    this.OnPropertyChanging("TieLinePF", e);
                    this._tieLinePF = value;
                    this.OnTieLinePFChanged(e);
                    this.OnPropertyChanged("TieLinePF", e);
                }
            }
        }
        
        /// <summary>
        /// The lowerRampRate property
        /// </summary>
        [XmlElementNameAttribute("lowerRampRate")]
        [XmlAttributeAttribute(true)]
        public virtual float LowerRampRate
        {
            get
            {
                return this._lowerRampRate;
            }
            set
            {
                if ((this._lowerRampRate != value))
                {
                    float old = this._lowerRampRate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLowerRampRateChanging(e);
                    this.OnPropertyChanging("LowerRampRate", e);
                    this._lowerRampRate = value;
                    this.OnLowerRampRateChanged(e);
                    this.OnPropertyChanged("LowerRampRate", e);
                }
            }
        }
        
        /// <summary>
        /// The initialP property
        /// </summary>
        [XmlElementNameAttribute("initialP")]
        [XmlAttributeAttribute(true)]
        public virtual float InitialP
        {
            get
            {
                return this._initialP;
            }
            set
            {
                if ((this._initialP != value))
                {
                    float old = this._initialP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInitialPChanging(e);
                    this.OnPropertyChanging("InitialP", e);
                    this._initialP = value;
                    this.OnInitialPChanged(e);
                    this.OnPropertyChanged("InitialP", e);
                }
            }
        }
        
        /// <summary>
        /// The controlResponseRate property
        /// </summary>
        [XmlElementNameAttribute("controlResponseRate")]
        [XmlAttributeAttribute(true)]
        public virtual float ControlResponseRate
        {
            get
            {
                return this._controlResponseRate;
            }
            set
            {
                if ((this._controlResponseRate != value))
                {
                    float old = this._controlResponseRate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnControlResponseRateChanging(e);
                    this.OnPropertyChanging("ControlResponseRate", e);
                    this._controlResponseRate = value;
                    this.OnControlResponseRateChanged(e);
                    this.OnPropertyChanged("ControlResponseRate", e);
                }
            }
        }
        
        /// <summary>
        /// The minEconomicP property
        /// </summary>
        [XmlElementNameAttribute("minEconomicP")]
        [XmlAttributeAttribute(true)]
        public virtual float MinEconomicP
        {
            get
            {
                return this._minEconomicP;
            }
            set
            {
                if ((this._minEconomicP != value))
                {
                    float old = this._minEconomicP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinEconomicPChanging(e);
                    this.OnPropertyChanging("MinEconomicP", e);
                    this._minEconomicP = value;
                    this.OnMinEconomicPChanged(e);
                    this.OnPropertyChanged("MinEconomicP", e);
                }
            }
        }
        
        /// <summary>
        /// The modelDetail property
        /// </summary>
        [XmlElementNameAttribute("modelDetail")]
        [XmlAttributeAttribute(true)]
        public virtual object ModelDetail
        {
            get
            {
                return this._modelDetail;
            }
            set
            {
                if ((this._modelDetail != value))
                {
                    object old = this._modelDetail;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnModelDetailChanging(e);
                    this.OnPropertyChanging("ModelDetail", e);
                    this._modelDetail = value;
                    this.OnModelDetailChanged(e);
                    this.OnPropertyChanged("ModelDetail", e);
                }
            }
        }
        
        /// <summary>
        /// The fuelPriority property
        /// </summary>
        [XmlElementNameAttribute("fuelPriority")]
        [XmlAttributeAttribute(true)]
        public virtual int FuelPriority
        {
            get
            {
                return this._fuelPriority;
            }
            set
            {
                if ((this._fuelPriority != value))
                {
                    int old = this._fuelPriority;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFuelPriorityChanging(e);
                    this.OnPropertyChanging("FuelPriority", e);
                    this._fuelPriority = value;
                    this.OnFuelPriorityChanged(e);
                    this.OnPropertyChanged("FuelPriority", e);
                }
            }
        }
        
        /// <summary>
        /// The maxEconomicP property
        /// </summary>
        [XmlElementNameAttribute("maxEconomicP")]
        [XmlAttributeAttribute(true)]
        public virtual float MaxEconomicP
        {
            get
            {
                return this._maxEconomicP;
            }
            set
            {
                if ((this._maxEconomicP != value))
                {
                    float old = this._maxEconomicP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxEconomicPChanging(e);
                    this.OnPropertyChanging("MaxEconomicP", e);
                    this._maxEconomicP = value;
                    this.OnMaxEconomicPChanged(e);
                    this.OnPropertyChanged("MaxEconomicP", e);
                }
            }
        }
        
        /// <summary>
        /// The genControlSource property
        /// </summary>
        [XmlElementNameAttribute("genControlSource")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<GeneratorControlSource> GenControlSource
        {
            get
            {
                return this._genControlSource;
            }
            set
            {
                if ((this._genControlSource != value))
                {
                    Nullable<GeneratorControlSource> old = this._genControlSource;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGenControlSourceChanging(e);
                    this.OnPropertyChanging("GenControlSource", e);
                    this._genControlSource = value;
                    this.OnGenControlSourceChanged(e);
                    this.OnPropertyChanged("GenControlSource", e);
                }
            }
        }
        
        /// <summary>
        /// The ratedGrossMinP property
        /// </summary>
        [XmlElementNameAttribute("ratedGrossMinP")]
        [XmlAttributeAttribute(true)]
        public virtual float RatedGrossMinP
        {
            get
            {
                return this._ratedGrossMinP;
            }
            set
            {
                if ((this._ratedGrossMinP != value))
                {
                    float old = this._ratedGrossMinP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatedGrossMinPChanging(e);
                    this.OnPropertyChanging("RatedGrossMinP", e);
                    this._ratedGrossMinP = value;
                    this.OnRatedGrossMinPChanged(e);
                    this.OnPropertyChanged("RatedGrossMinP", e);
                }
            }
        }
        
        /// <summary>
        /// The variableCost property
        /// </summary>
        [XmlElementNameAttribute("variableCost")]
        [XmlAttributeAttribute(true)]
        public virtual float VariableCost
        {
            get
            {
                return this._variableCost;
            }
            set
            {
                if ((this._variableCost != value))
                {
                    float old = this._variableCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVariableCostChanging(e);
                    this.OnPropertyChanging("VariableCost", e);
                    this._variableCost = value;
                    this.OnVariableCostChanged(e);
                    this.OnPropertyChanged("VariableCost", e);
                }
            }
        }
        
        /// <summary>
        /// The minOperatingP property
        /// </summary>
        [XmlElementNameAttribute("minOperatingP")]
        [XmlAttributeAttribute(true)]
        public virtual float MinOperatingP
        {
            get
            {
                return this._minOperatingP;
            }
            set
            {
                if ((this._minOperatingP != value))
                {
                    float old = this._minOperatingP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinOperatingPChanging(e);
                    this.OnPropertyChanging("MinOperatingP", e);
                    this._minOperatingP = value;
                    this.OnMinOperatingPChanged(e);
                    this.OnPropertyChanged("MinOperatingP", e);
                }
            }
        }
        
        /// <summary>
        /// The baseP property
        /// </summary>
        [XmlElementNameAttribute("baseP")]
        [XmlAttributeAttribute(true)]
        public virtual float BaseP
        {
            get
            {
                return this._baseP;
            }
            set
            {
                if ((this._baseP != value))
                {
                    float old = this._baseP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBasePChanging(e);
                    this.OnPropertyChanging("BaseP", e);
                    this._baseP = value;
                    this.OnBasePChanged(e);
                    this.OnPropertyChanged("BaseP", e);
                }
            }
        }
        
        /// <summary>
        /// The shortPF property
        /// </summary>
        [XmlElementNameAttribute("shortPF")]
        [XmlAttributeAttribute(true)]
        public virtual float ShortPF
        {
            get
            {
                return this._shortPF;
            }
            set
            {
                if ((this._shortPF != value))
                {
                    float old = this._shortPF;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnShortPFChanging(e);
                    this.OnPropertyChanging("ShortPF", e);
                    this._shortPF = value;
                    this.OnShortPFChanged(e);
                    this.OnPropertyChanged("ShortPF", e);
                }
            }
        }
        
        /// <summary>
        /// The lowControlLimit property
        /// </summary>
        [XmlElementNameAttribute("lowControlLimit")]
        [XmlAttributeAttribute(true)]
        public virtual float LowControlLimit
        {
            get
            {
                return this._lowControlLimit;
            }
            set
            {
                if ((this._lowControlLimit != value))
                {
                    float old = this._lowControlLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLowControlLimitChanging(e);
                    this.OnPropertyChanging("LowControlLimit", e);
                    this._lowControlLimit = value;
                    this.OnLowControlLimitChanged(e);
                    this.OnPropertyChanged("LowControlLimit", e);
                }
            }
        }
        
        /// <summary>
        /// The longPF property
        /// </summary>
        [XmlElementNameAttribute("longPF")]
        [XmlAttributeAttribute(true)]
        public virtual float LongPF
        {
            get
            {
                return this._longPF;
            }
            set
            {
                if ((this._longPF != value))
                {
                    float old = this._longPF;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLongPFChanging(e);
                    this.OnPropertyChanging("LongPF", e);
                    this._longPF = value;
                    this.OnLongPFChanged(e);
                    this.OnPropertyChanged("LongPF", e);
                }
            }
        }
        
        /// <summary>
        /// The maxOperatingP property
        /// </summary>
        [XmlElementNameAttribute("maxOperatingP")]
        [XmlAttributeAttribute(true)]
        public virtual float MaxOperatingP
        {
            get
            {
                return this._maxOperatingP;
            }
            set
            {
                if ((this._maxOperatingP != value))
                {
                    float old = this._maxOperatingP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxOperatingPChanging(e);
                    this.OnPropertyChanging("MaxOperatingP", e);
                    this._maxOperatingP = value;
                    this.OnMaxOperatingPChanged(e);
                    this.OnPropertyChanged("MaxOperatingP", e);
                }
            }
        }
        
        /// <summary>
        /// The fastStartFlag property
        /// </summary>
        [XmlElementNameAttribute("fastStartFlag")]
        [XmlAttributeAttribute(true)]
        public virtual bool FastStartFlag
        {
            get
            {
                return this._fastStartFlag;
            }
            set
            {
                if ((this._fastStartFlag != value))
                {
                    bool old = this._fastStartFlag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFastStartFlagChanging(e);
                    this.OnPropertyChanging("FastStartFlag", e);
                    this._fastStartFlag = value;
                    this.OnFastStartFlagChanged(e);
                    this.OnPropertyChanged("FastStartFlag", e);
                }
            }
        }
        
        /// <summary>
        /// The genControlMode property
        /// </summary>
        [XmlElementNameAttribute("genControlMode")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<GeneratorControlMode> GenControlMode
        {
            get
            {
                return this._genControlMode;
            }
            set
            {
                if ((this._genControlMode != value))
                {
                    Nullable<GeneratorControlMode> old = this._genControlMode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGenControlModeChanging(e);
                    this.OnPropertyChanging("GenControlMode", e);
                    this._genControlMode = value;
                    this.OnGenControlModeChanged(e);
                    this.OnPropertyChanged("GenControlMode", e);
                }
            }
        }
        
        /// <summary>
        /// The ratedNetMaxP property
        /// </summary>
        [XmlElementNameAttribute("ratedNetMaxP")]
        [XmlAttributeAttribute(true)]
        public virtual float RatedNetMaxP
        {
            get
            {
                return this._ratedNetMaxP;
            }
            set
            {
                if ((this._ratedNetMaxP != value))
                {
                    float old = this._ratedNetMaxP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatedNetMaxPChanging(e);
                    this.OnPropertyChanging("RatedNetMaxP", e);
                    this._ratedNetMaxP = value;
                    this.OnRatedNetMaxPChanged(e);
                    this.OnPropertyChanged("RatedNetMaxP", e);
                }
            }
        }
        
        /// <summary>
        /// The efficiency property
        /// </summary>
        [XmlElementNameAttribute("efficiency")]
        [XmlAttributeAttribute(true)]
        public virtual float Efficiency
        {
            get
            {
                return this._efficiency;
            }
            set
            {
                if ((this._efficiency != value))
                {
                    float old = this._efficiency;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEfficiencyChanging(e);
                    this.OnPropertyChanging("Efficiency", e);
                    this._efficiency = value;
                    this.OnEfficiencyChanged(e);
                    this.OnPropertyChanged("Efficiency", e);
                }
            }
        }
        
        /// <summary>
        /// The minimumOffTime property
        /// </summary>
        [XmlElementNameAttribute("minimumOffTime")]
        [XmlAttributeAttribute(true)]
        public virtual float MinimumOffTime
        {
            get
            {
                return this._minimumOffTime;
            }
            set
            {
                if ((this._minimumOffTime != value))
                {
                    float old = this._minimumOffTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinimumOffTimeChanging(e);
                    this.OnPropertyChanging("MinimumOffTime", e);
                    this._minimumOffTime = value;
                    this.OnMinimumOffTimeChanged(e);
                    this.OnPropertyChanged("MinimumOffTime", e);
                }
            }
        }
        
        /// <summary>
        /// The dispReserveFlag property
        /// </summary>
        [XmlElementNameAttribute("dispReserveFlag")]
        [XmlAttributeAttribute(true)]
        public virtual bool DispReserveFlag
        {
            get
            {
                return this._dispReserveFlag;
            }
            set
            {
                if ((this._dispReserveFlag != value))
                {
                    bool old = this._dispReserveFlag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDispReserveFlagChanging(e);
                    this.OnPropertyChanging("DispReserveFlag", e);
                    this._dispReserveFlag = value;
                    this.OnDispReserveFlagChanged(e);
                    this.OnPropertyChanged("DispReserveFlag", e);
                }
            }
        }
        
        /// <summary>
        /// The maximumAllowableSpinningReserve property
        /// </summary>
        [XmlElementNameAttribute("maximumAllowableSpinningReserve")]
        [XmlAttributeAttribute(true)]
        public virtual float MaximumAllowableSpinningReserve
        {
            get
            {
                return this._maximumAllowableSpinningReserve;
            }
            set
            {
                if ((this._maximumAllowableSpinningReserve != value))
                {
                    float old = this._maximumAllowableSpinningReserve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaximumAllowableSpinningReserveChanging(e);
                    this.OnPropertyChanging("MaximumAllowableSpinningReserve", e);
                    this._maximumAllowableSpinningReserve = value;
                    this.OnMaximumAllowableSpinningReserveChanged(e);
                    this.OnPropertyChanged("MaximumAllowableSpinningReserve", e);
                }
            }
        }
        
        /// <summary>
        /// The controlDeadband property
        /// </summary>
        [XmlElementNameAttribute("controlDeadband")]
        [XmlAttributeAttribute(true)]
        public virtual float ControlDeadband
        {
            get
            {
                return this._controlDeadband;
            }
            set
            {
                if ((this._controlDeadband != value))
                {
                    float old = this._controlDeadband;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnControlDeadbandChanging(e);
                    this.OnPropertyChanging("ControlDeadband", e);
                    this._controlDeadband = value;
                    this.OnControlDeadbandChanged(e);
                    this.OnPropertyChanged("ControlDeadband", e);
                }
            }
        }
        
        /// <summary>
        /// The normalPF property
        /// </summary>
        [XmlElementNameAttribute("normalPF")]
        [XmlAttributeAttribute(true)]
        public virtual float NormalPF
        {
            get
            {
                return this._normalPF;
            }
            set
            {
                if ((this._normalPF != value))
                {
                    float old = this._normalPF;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNormalPFChanging(e);
                    this.OnPropertyChanging("NormalPF", e);
                    this._normalPF = value;
                    this.OnNormalPFChanged(e);
                    this.OnPropertyChanged("NormalPF", e);
                }
            }
        }
        
        /// <summary>
        /// The OperatedBy_GenerationProvider property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GeneratingUnits")]
        public virtual IGenerationProvider OperatedBy_GenerationProvider
        {
            get
            {
                return this._operatedBy_GenerationProvider;
            }
            set
            {
                if ((this._operatedBy_GenerationProvider != value))
                {
                    IGenerationProvider old = this._operatedBy_GenerationProvider;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOperatedBy_GenerationProviderChanging(e);
                    this.OnPropertyChanging("OperatedBy_GenerationProvider", e);
                    this._operatedBy_GenerationProvider = value;
                    if ((old != null))
                    {
                        old.GeneratingUnits.Remove(this);
                        old.Deleted -= this.OnResetOperatedBy_GenerationProvider;
                    }
                    if ((value != null))
                    {
                        value.GeneratingUnits.Add(this);
                        value.Deleted += this.OnResetOperatedBy_GenerationProvider;
                    }
                    this.OnOperatedBy_GenerationProviderChanged(e);
                    this.OnPropertyChanged("OperatedBy_GenerationProvider", e);
                }
            }
        }
        
        /// <summary>
        /// The GenUnitOpSchedule property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GeneratingUnit")]
        public virtual IGenUnitOpSchedule GenUnitOpSchedule
        {
            get
            {
                return this._genUnitOpSchedule;
            }
            set
            {
                if ((this._genUnitOpSchedule != value))
                {
                    IGenUnitOpSchedule old = this._genUnitOpSchedule;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGenUnitOpScheduleChanging(e);
                    this.OnPropertyChanging("GenUnitOpSchedule", e);
                    this._genUnitOpSchedule = value;
                    if ((old != null))
                    {
                        old.GeneratingUnit = null;
                        old.Deleted -= this.OnResetGenUnitOpSchedule;
                    }
                    if ((value != null))
                    {
                        value.GeneratingUnit = this;
                        value.Deleted += this.OnResetGenUnitOpSchedule;
                    }
                    this.OnGenUnitOpScheduleChanged(e);
                    this.OnPropertyChanged("GenUnitOpSchedule", e);
                }
            }
        }
        
        /// <summary>
        /// The ControlAreaGeneratingUnit property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GeneratingUnit")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IControlAreaGeneratingUnit> ControlAreaGeneratingUnit
        {
            get
            {
                return this._controlAreaGeneratingUnit;
            }
        }
        
        /// <summary>
        /// The GrossToNetActivePowerCurves property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GeneratingUnit")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGrossToNetActivePowerCurve> GrossToNetActivePowerCurves
        {
            get
            {
                return this._grossToNetActivePowerCurves;
            }
        }
        
        /// <summary>
        /// The GenUnitOpCostCurves property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GeneratingUnit")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGenUnitOpCostCurve> GenUnitOpCostCurves
        {
            get
            {
                return this._genUnitOpCostCurves;
            }
        }
        
        /// <summary>
        /// The SynchronousMachines property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GeneratingUnit")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISynchronousMachine> SynchronousMachines
        {
            get
            {
                return this._synchronousMachines;
            }
        }
        
        /// <summary>
        /// The RegisteredGenerator property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GeneratingUnit")]
        public virtual IRegisteredGenerator RegisteredGenerator
        {
            get
            {
                return this._registeredGenerator;
            }
            set
            {
                if ((this._registeredGenerator != value))
                {
                    IRegisteredGenerator old = this._registeredGenerator;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRegisteredGeneratorChanging(e);
                    this.OnPropertyChanging("RegisteredGenerator", e);
                    this._registeredGenerator = value;
                    if ((old != null))
                    {
                        old.GeneratingUnit = null;
                        old.Deleted -= this.OnResetRegisteredGenerator;
                    }
                    if ((value != null))
                    {
                        value.GeneratingUnit = this;
                        value.Deleted += this.OnResetRegisteredGenerator;
                    }
                    this.OnRegisteredGeneratorChanged(e);
                    this.OnPropertyChanged("RegisteredGenerator", e);
                }
            }
        }
        
        /// <summary>
        /// The SubControlArea property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GeneratingUnits")]
        public virtual ISubControlArea SubControlArea
        {
            get
            {
                return this._subControlArea;
            }
            set
            {
                if ((this._subControlArea != value))
                {
                    ISubControlArea old = this._subControlArea;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubControlAreaChanging(e);
                    this.OnPropertyChanging("SubControlArea", e);
                    this._subControlArea = value;
                    if ((old != null))
                    {
                        old.GeneratingUnits.Remove(this);
                        old.Deleted -= this.OnResetSubControlArea;
                    }
                    if ((value != null))
                    {
                        value.GeneratingUnits.Add(this);
                        value.Deleted += this.OnResetSubControlArea;
                    }
                    this.OnSubControlAreaChanged(e);
                    this.OnPropertyChanged("SubControlArea", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new GeneratingUnitReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/Generat" +
                            "ingUnit")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the HighControlLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HighControlLimitChanging;
        
        /// <summary>
        /// Gets fired when the HighControlLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HighControlLimitChanged;
        
        /// <summary>
        /// Gets fired before the RaiseRampRate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RaiseRampRateChanging;
        
        /// <summary>
        /// Gets fired when the RaiseRampRate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RaiseRampRateChanged;
        
        /// <summary>
        /// Gets fired before the GenOperatingMode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GenOperatingModeChanging;
        
        /// <summary>
        /// Gets fired when the GenOperatingMode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GenOperatingModeChanged;
        
        /// <summary>
        /// Gets fired before the AutoCntrlMarginP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AutoCntrlMarginPChanging;
        
        /// <summary>
        /// Gets fired when the AutoCntrlMarginP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AutoCntrlMarginPChanged;
        
        /// <summary>
        /// Gets fired before the ControlPulseLow property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ControlPulseLowChanging;
        
        /// <summary>
        /// Gets fired when the ControlPulseLow property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ControlPulseLowChanged;
        
        /// <summary>
        /// Gets fired before the GovernorMPL property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GovernorMPLChanging;
        
        /// <summary>
        /// Gets fired when the GovernorMPL property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GovernorMPLChanged;
        
        /// <summary>
        /// Gets fired before the RatedGrossMaxP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedGrossMaxPChanging;
        
        /// <summary>
        /// Gets fired when the RatedGrossMaxP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedGrossMaxPChanged;
        
        /// <summary>
        /// Gets fired before the AllocSpinResP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AllocSpinResPChanging;
        
        /// <summary>
        /// Gets fired when the AllocSpinResP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AllocSpinResPChanged;
        
        /// <summary>
        /// Gets fired before the StepChange property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StepChangeChanging;
        
        /// <summary>
        /// Gets fired when the StepChange property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StepChangeChanged;
        
        /// <summary>
        /// Gets fired before the StartupCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartupCostChanging;
        
        /// <summary>
        /// Gets fired when the StartupCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartupCostChanged;
        
        /// <summary>
        /// Gets fired before the SpinReserveRamp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpinReserveRampChanging;
        
        /// <summary>
        /// Gets fired when the SpinReserveRamp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpinReserveRampChanged;
        
        /// <summary>
        /// Gets fired before the NominalP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NominalPChanging;
        
        /// <summary>
        /// Gets fired when the NominalP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NominalPChanged;
        
        /// <summary>
        /// Gets fired before the GovernorSCD property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GovernorSCDChanging;
        
        /// <summary>
        /// Gets fired when the GovernorSCD property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GovernorSCDChanged;
        
        /// <summary>
        /// Gets fired before the PenaltyFactor property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PenaltyFactorChanging;
        
        /// <summary>
        /// Gets fired when the PenaltyFactor property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PenaltyFactorChanged;
        
        /// <summary>
        /// Gets fired before the ControlPulseHigh property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ControlPulseHighChanging;
        
        /// <summary>
        /// Gets fired when the ControlPulseHigh property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ControlPulseHighChanged;
        
        /// <summary>
        /// Gets fired before the EnergyMinP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyMinPChanging;
        
        /// <summary>
        /// Gets fired when the EnergyMinP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyMinPChanged;
        
        /// <summary>
        /// Gets fired before the StartupTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartupTimeChanging;
        
        /// <summary>
        /// Gets fired when the StartupTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartupTimeChanged;
        
        /// <summary>
        /// Gets fired before the TieLinePF property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TieLinePFChanging;
        
        /// <summary>
        /// Gets fired when the TieLinePF property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TieLinePFChanged;
        
        /// <summary>
        /// Gets fired before the LowerRampRate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowerRampRateChanging;
        
        /// <summary>
        /// Gets fired when the LowerRampRate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowerRampRateChanged;
        
        /// <summary>
        /// Gets fired before the InitialP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InitialPChanging;
        
        /// <summary>
        /// Gets fired when the InitialP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InitialPChanged;
        
        /// <summary>
        /// Gets fired before the ControlResponseRate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ControlResponseRateChanging;
        
        /// <summary>
        /// Gets fired when the ControlResponseRate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ControlResponseRateChanged;
        
        /// <summary>
        /// Gets fired before the MinEconomicP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinEconomicPChanging;
        
        /// <summary>
        /// Gets fired when the MinEconomicP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinEconomicPChanged;
        
        /// <summary>
        /// Gets fired before the ModelDetail property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ModelDetailChanging;
        
        /// <summary>
        /// Gets fired when the ModelDetail property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ModelDetailChanged;
        
        /// <summary>
        /// Gets fired before the FuelPriority property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FuelPriorityChanging;
        
        /// <summary>
        /// Gets fired when the FuelPriority property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FuelPriorityChanged;
        
        /// <summary>
        /// Gets fired before the MaxEconomicP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxEconomicPChanging;
        
        /// <summary>
        /// Gets fired when the MaxEconomicP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxEconomicPChanged;
        
        /// <summary>
        /// Gets fired before the GenControlSource property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GenControlSourceChanging;
        
        /// <summary>
        /// Gets fired when the GenControlSource property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GenControlSourceChanged;
        
        /// <summary>
        /// Gets fired before the RatedGrossMinP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedGrossMinPChanging;
        
        /// <summary>
        /// Gets fired when the RatedGrossMinP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedGrossMinPChanged;
        
        /// <summary>
        /// Gets fired before the VariableCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VariableCostChanging;
        
        /// <summary>
        /// Gets fired when the VariableCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VariableCostChanged;
        
        /// <summary>
        /// Gets fired before the MinOperatingP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinOperatingPChanging;
        
        /// <summary>
        /// Gets fired when the MinOperatingP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinOperatingPChanged;
        
        /// <summary>
        /// Gets fired before the BaseP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BasePChanging;
        
        /// <summary>
        /// Gets fired when the BaseP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BasePChanged;
        
        /// <summary>
        /// Gets fired before the ShortPF property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShortPFChanging;
        
        /// <summary>
        /// Gets fired when the ShortPF property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShortPFChanged;
        
        /// <summary>
        /// Gets fired before the LowControlLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowControlLimitChanging;
        
        /// <summary>
        /// Gets fired when the LowControlLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowControlLimitChanged;
        
        /// <summary>
        /// Gets fired before the LongPF property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LongPFChanging;
        
        /// <summary>
        /// Gets fired when the LongPF property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LongPFChanged;
        
        /// <summary>
        /// Gets fired before the MaxOperatingP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxOperatingPChanging;
        
        /// <summary>
        /// Gets fired when the MaxOperatingP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxOperatingPChanged;
        
        /// <summary>
        /// Gets fired before the FastStartFlag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FastStartFlagChanging;
        
        /// <summary>
        /// Gets fired when the FastStartFlag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FastStartFlagChanged;
        
        /// <summary>
        /// Gets fired before the GenControlMode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GenControlModeChanging;
        
        /// <summary>
        /// Gets fired when the GenControlMode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GenControlModeChanged;
        
        /// <summary>
        /// Gets fired before the RatedNetMaxP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedNetMaxPChanging;
        
        /// <summary>
        /// Gets fired when the RatedNetMaxP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedNetMaxPChanged;
        
        /// <summary>
        /// Gets fired before the Efficiency property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EfficiencyChanging;
        
        /// <summary>
        /// Gets fired when the Efficiency property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EfficiencyChanged;
        
        /// <summary>
        /// Gets fired before the MinimumOffTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinimumOffTimeChanging;
        
        /// <summary>
        /// Gets fired when the MinimumOffTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinimumOffTimeChanged;
        
        /// <summary>
        /// Gets fired before the DispReserveFlag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DispReserveFlagChanging;
        
        /// <summary>
        /// Gets fired when the DispReserveFlag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DispReserveFlagChanged;
        
        /// <summary>
        /// Gets fired before the MaximumAllowableSpinningReserve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaximumAllowableSpinningReserveChanging;
        
        /// <summary>
        /// Gets fired when the MaximumAllowableSpinningReserve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaximumAllowableSpinningReserveChanged;
        
        /// <summary>
        /// Gets fired before the ControlDeadband property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ControlDeadbandChanging;
        
        /// <summary>
        /// Gets fired when the ControlDeadband property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ControlDeadbandChanged;
        
        /// <summary>
        /// Gets fired before the NormalPF property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormalPFChanging;
        
        /// <summary>
        /// Gets fired when the NormalPF property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormalPFChanged;
        
        /// <summary>
        /// Gets fired before the OperatedBy_GenerationProvider property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperatedBy_GenerationProviderChanging;
        
        /// <summary>
        /// Gets fired when the OperatedBy_GenerationProvider property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperatedBy_GenerationProviderChanged;
        
        /// <summary>
        /// Gets fired before the GenUnitOpSchedule property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GenUnitOpScheduleChanging;
        
        /// <summary>
        /// Gets fired when the GenUnitOpSchedule property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GenUnitOpScheduleChanged;
        
        /// <summary>
        /// Gets fired before the RegisteredGenerator property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegisteredGeneratorChanging;
        
        /// <summary>
        /// Gets fired when the RegisteredGenerator property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegisteredGeneratorChanged;
        
        /// <summary>
        /// Gets fired before the SubControlArea property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubControlAreaChanging;
        
        /// <summary>
        /// Gets fired when the SubControlArea property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubControlAreaChanged;
        
        /// <summary>
        /// Raises the HighControlLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHighControlLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HighControlLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HighControlLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHighControlLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HighControlLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RaiseRampRateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRaiseRampRateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RaiseRampRateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RaiseRampRateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRaiseRampRateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RaiseRampRateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GenOperatingModeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGenOperatingModeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GenOperatingModeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GenOperatingModeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGenOperatingModeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GenOperatingModeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AutoCntrlMarginPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAutoCntrlMarginPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AutoCntrlMarginPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AutoCntrlMarginPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAutoCntrlMarginPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AutoCntrlMarginPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ControlPulseLowChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnControlPulseLowChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ControlPulseLowChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ControlPulseLowChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnControlPulseLowChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ControlPulseLowChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GovernorMPLChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGovernorMPLChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GovernorMPLChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GovernorMPLChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGovernorMPLChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GovernorMPLChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedGrossMaxPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedGrossMaxPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedGrossMaxPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedGrossMaxPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedGrossMaxPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedGrossMaxPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AllocSpinResPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAllocSpinResPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AllocSpinResPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AllocSpinResPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAllocSpinResPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AllocSpinResPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StepChangeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStepChangeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StepChangeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StepChangeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStepChangeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StepChangeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartupCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartupCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartupCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartupCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartupCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartupCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpinReserveRampChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpinReserveRampChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpinReserveRampChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpinReserveRampChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpinReserveRampChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpinReserveRampChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NominalPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NominalPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NominalPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NominalPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GovernorSCDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGovernorSCDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GovernorSCDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GovernorSCDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGovernorSCDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GovernorSCDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PenaltyFactorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPenaltyFactorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PenaltyFactorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PenaltyFactorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPenaltyFactorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PenaltyFactorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ControlPulseHighChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnControlPulseHighChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ControlPulseHighChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ControlPulseHighChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnControlPulseHighChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ControlPulseHighChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnergyMinPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyMinPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyMinPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnergyMinPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyMinPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyMinPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartupTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartupTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartupTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartupTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartupTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartupTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TieLinePFChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTieLinePFChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TieLinePFChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TieLinePFChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTieLinePFChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TieLinePFChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowerRampRateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerRampRateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowerRampRateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowerRampRateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerRampRateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowerRampRateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InitialPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInitialPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InitialPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InitialPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInitialPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InitialPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ControlResponseRateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnControlResponseRateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ControlResponseRateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ControlResponseRateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnControlResponseRateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ControlResponseRateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinEconomicPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinEconomicPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinEconomicPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinEconomicPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinEconomicPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinEconomicPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ModelDetailChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnModelDetailChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ModelDetailChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ModelDetailChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnModelDetailChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ModelDetailChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FuelPriorityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFuelPriorityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FuelPriorityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FuelPriorityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFuelPriorityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FuelPriorityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxEconomicPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxEconomicPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxEconomicPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxEconomicPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxEconomicPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxEconomicPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GenControlSourceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGenControlSourceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GenControlSourceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GenControlSourceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGenControlSourceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GenControlSourceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedGrossMinPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedGrossMinPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedGrossMinPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedGrossMinPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedGrossMinPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedGrossMinPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VariableCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVariableCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VariableCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VariableCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVariableCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VariableCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinOperatingPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinOperatingPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinOperatingPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinOperatingPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinOperatingPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinOperatingPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BasePChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBasePChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BasePChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BasePChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBasePChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BasePChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ShortPFChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShortPFChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShortPFChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ShortPFChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShortPFChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShortPFChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowControlLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowControlLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowControlLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowControlLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowControlLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowControlLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LongPFChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLongPFChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LongPFChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LongPFChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLongPFChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LongPFChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxOperatingPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxOperatingPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxOperatingPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxOperatingPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxOperatingPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxOperatingPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FastStartFlagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFastStartFlagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FastStartFlagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FastStartFlagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFastStartFlagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FastStartFlagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GenControlModeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGenControlModeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GenControlModeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GenControlModeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGenControlModeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GenControlModeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedNetMaxPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedNetMaxPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedNetMaxPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedNetMaxPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedNetMaxPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedNetMaxPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EfficiencyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEfficiencyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EfficiencyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EfficiencyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEfficiencyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EfficiencyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinimumOffTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimumOffTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinimumOffTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinimumOffTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimumOffTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinimumOffTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DispReserveFlagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDispReserveFlagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DispReserveFlagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DispReserveFlagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDispReserveFlagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DispReserveFlagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaximumAllowableSpinningReserveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximumAllowableSpinningReserveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaximumAllowableSpinningReserveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaximumAllowableSpinningReserveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximumAllowableSpinningReserveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaximumAllowableSpinningReserveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ControlDeadbandChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnControlDeadbandChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ControlDeadbandChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ControlDeadbandChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnControlDeadbandChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ControlDeadbandChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NormalPFChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormalPFChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormalPFChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NormalPFChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormalPFChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormalPFChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OperatedBy_GenerationProviderChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperatedBy_GenerationProviderChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperatedBy_GenerationProviderChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OperatedBy_GenerationProviderChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperatedBy_GenerationProviderChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperatedBy_GenerationProviderChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OperatedBy_GenerationProvider property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOperatedBy_GenerationProvider(object sender, System.EventArgs eventArgs)
        {
            this.OperatedBy_GenerationProvider = null;
        }
        
        /// <summary>
        /// Raises the GenUnitOpScheduleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGenUnitOpScheduleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GenUnitOpScheduleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GenUnitOpScheduleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGenUnitOpScheduleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GenUnitOpScheduleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GenUnitOpSchedule property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGenUnitOpSchedule(object sender, System.EventArgs eventArgs)
        {
            this.GenUnitOpSchedule = null;
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ControlAreaGeneratingUnit property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ControlAreaGeneratingUnitCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ControlAreaGeneratingUnit", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ControlAreaGeneratingUnit property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ControlAreaGeneratingUnitCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ControlAreaGeneratingUnit", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GrossToNetActivePowerCurves property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GrossToNetActivePowerCurvesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("GrossToNetActivePowerCurves", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GrossToNetActivePowerCurves property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GrossToNetActivePowerCurvesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GrossToNetActivePowerCurves", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GenUnitOpCostCurves property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GenUnitOpCostCurvesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("GenUnitOpCostCurves", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GenUnitOpCostCurves property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GenUnitOpCostCurvesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GenUnitOpCostCurves", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SynchronousMachines property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SynchronousMachinesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("SynchronousMachines", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SynchronousMachines property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SynchronousMachinesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SynchronousMachines", e);
        }
        
        /// <summary>
        /// Raises the RegisteredGeneratorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegisteredGeneratorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegisteredGeneratorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RegisteredGeneratorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegisteredGeneratorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegisteredGeneratorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RegisteredGenerator property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRegisteredGenerator(object sender, System.EventArgs eventArgs)
        {
            this.RegisteredGenerator = null;
        }
        
        /// <summary>
        /// Raises the SubControlAreaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubControlAreaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubControlAreaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubControlAreaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubControlAreaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubControlAreaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SubControlArea property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSubControlArea(object sender, System.EventArgs eventArgs)
        {
            this.SubControlArea = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "HIGHCONTROLLIMIT"))
            {
                return this.HighControlLimit;
            }
            if ((attribute == "RAISERAMPRATE"))
            {
                return this.RaiseRampRate;
            }
            if ((attribute == "GENOPERATINGMODE"))
            {
                return this.GenOperatingMode;
            }
            if ((attribute == "AUTOCNTRLMARGINP"))
            {
                return this.AutoCntrlMarginP;
            }
            if ((attribute == "CONTROLPULSELOW"))
            {
                return this.ControlPulseLow;
            }
            if ((attribute == "GOVERNORMPL"))
            {
                return this.GovernorMPL;
            }
            if ((attribute == "RATEDGROSSMAXP"))
            {
                return this.RatedGrossMaxP;
            }
            if ((attribute == "ALLOCSPINRESP"))
            {
                return this.AllocSpinResP;
            }
            if ((attribute == "STEPCHANGE"))
            {
                return this.StepChange;
            }
            if ((attribute == "STARTUPCOST"))
            {
                return this.StartupCost;
            }
            if ((attribute == "SPINRESERVERAMP"))
            {
                return this.SpinReserveRamp;
            }
            if ((attribute == "NOMINALP"))
            {
                return this.NominalP;
            }
            if ((attribute == "GOVERNORSCD"))
            {
                return this.GovernorSCD;
            }
            if ((attribute == "PENALTYFACTOR"))
            {
                return this.PenaltyFactor;
            }
            if ((attribute == "CONTROLPULSEHIGH"))
            {
                return this.ControlPulseHigh;
            }
            if ((attribute == "ENERGYMINP"))
            {
                return this.EnergyMinP;
            }
            if ((attribute == "STARTUPTIME"))
            {
                return this.StartupTime;
            }
            if ((attribute == "TIELINEPF"))
            {
                return this.TieLinePF;
            }
            if ((attribute == "LOWERRAMPRATE"))
            {
                return this.LowerRampRate;
            }
            if ((attribute == "INITIALP"))
            {
                return this.InitialP;
            }
            if ((attribute == "CONTROLRESPONSERATE"))
            {
                return this.ControlResponseRate;
            }
            if ((attribute == "MINECONOMICP"))
            {
                return this.MinEconomicP;
            }
            if ((attribute == "MODELDETAIL"))
            {
                return this.ModelDetail;
            }
            if ((attribute == "FUELPRIORITY"))
            {
                return this.FuelPriority;
            }
            if ((attribute == "MAXECONOMICP"))
            {
                return this.MaxEconomicP;
            }
            if ((attribute == "GENCONTROLSOURCE"))
            {
                return this.GenControlSource;
            }
            if ((attribute == "RATEDGROSSMINP"))
            {
                return this.RatedGrossMinP;
            }
            if ((attribute == "VARIABLECOST"))
            {
                return this.VariableCost;
            }
            if ((attribute == "MINOPERATINGP"))
            {
                return this.MinOperatingP;
            }
            if ((attribute == "BASEP"))
            {
                return this.BaseP;
            }
            if ((attribute == "SHORTPF"))
            {
                return this.ShortPF;
            }
            if ((attribute == "LOWCONTROLLIMIT"))
            {
                return this.LowControlLimit;
            }
            if ((attribute == "LONGPF"))
            {
                return this.LongPF;
            }
            if ((attribute == "MAXOPERATINGP"))
            {
                return this.MaxOperatingP;
            }
            if ((attribute == "FASTSTARTFLAG"))
            {
                return this.FastStartFlag;
            }
            if ((attribute == "GENCONTROLMODE"))
            {
                return this.GenControlMode;
            }
            if ((attribute == "RATEDNETMAXP"))
            {
                return this.RatedNetMaxP;
            }
            if ((attribute == "EFFICIENCY"))
            {
                return this.Efficiency;
            }
            if ((attribute == "MINIMUMOFFTIME"))
            {
                return this.MinimumOffTime;
            }
            if ((attribute == "DISPRESERVEFLAG"))
            {
                return this.DispReserveFlag;
            }
            if ((attribute == "MAXIMUMALLOWABLESPINNINGRESERVE"))
            {
                return this.MaximumAllowableSpinningReserve;
            }
            if ((attribute == "CONTROLDEADBAND"))
            {
                return this.ControlDeadband;
            }
            if ((attribute == "NORMALPF"))
            {
                return this.NormalPF;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CONTROLAREAGENERATINGUNIT"))
            {
                return this._controlAreaGeneratingUnit;
            }
            if ((feature == "GROSSTONETACTIVEPOWERCURVES"))
            {
                return this._grossToNetActivePowerCurves;
            }
            if ((feature == "GENUNITOPCOSTCURVES"))
            {
                return this._genUnitOpCostCurves;
            }
            if ((feature == "SYNCHRONOUSMACHINES"))
            {
                return this._synchronousMachines;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OPERATEDBY_GENERATIONPROVIDER"))
            {
                this.OperatedBy_GenerationProvider = ((IGenerationProvider)(value));
                return;
            }
            if ((feature == "GENUNITOPSCHEDULE"))
            {
                this.GenUnitOpSchedule = ((IGenUnitOpSchedule)(value));
                return;
            }
            if ((feature == "REGISTEREDGENERATOR"))
            {
                this.RegisteredGenerator = ((IRegisteredGenerator)(value));
                return;
            }
            if ((feature == "SUBCONTROLAREA"))
            {
                this.SubControlArea = ((ISubControlArea)(value));
                return;
            }
            if ((feature == "HIGHCONTROLLIMIT"))
            {
                this.HighControlLimit = ((float)(value));
                return;
            }
            if ((feature == "RAISERAMPRATE"))
            {
                this.RaiseRampRate = ((float)(value));
                return;
            }
            if ((feature == "GENOPERATINGMODE"))
            {
                this.GenOperatingMode = ((GeneratorOperatingMode)(value));
                return;
            }
            if ((feature == "AUTOCNTRLMARGINP"))
            {
                this.AutoCntrlMarginP = ((float)(value));
                return;
            }
            if ((feature == "CONTROLPULSELOW"))
            {
                this.ControlPulseLow = ((float)(value));
                return;
            }
            if ((feature == "GOVERNORMPL"))
            {
                this.GovernorMPL = ((float)(value));
                return;
            }
            if ((feature == "RATEDGROSSMAXP"))
            {
                this.RatedGrossMaxP = ((float)(value));
                return;
            }
            if ((feature == "ALLOCSPINRESP"))
            {
                this.AllocSpinResP = ((float)(value));
                return;
            }
            if ((feature == "STEPCHANGE"))
            {
                this.StepChange = ((float)(value));
                return;
            }
            if ((feature == "STARTUPCOST"))
            {
                this.StartupCost = ((float)(value));
                return;
            }
            if ((feature == "SPINRESERVERAMP"))
            {
                this.SpinReserveRamp = ((float)(value));
                return;
            }
            if ((feature == "NOMINALP"))
            {
                this.NominalP = ((float)(value));
                return;
            }
            if ((feature == "GOVERNORSCD"))
            {
                this.GovernorSCD = ((float)(value));
                return;
            }
            if ((feature == "PENALTYFACTOR"))
            {
                this.PenaltyFactor = ((float)(value));
                return;
            }
            if ((feature == "CONTROLPULSEHIGH"))
            {
                this.ControlPulseHigh = ((float)(value));
                return;
            }
            if ((feature == "ENERGYMINP"))
            {
                this.EnergyMinP = ((float)(value));
                return;
            }
            if ((feature == "STARTUPTIME"))
            {
                this.StartupTime = ((float)(value));
                return;
            }
            if ((feature == "TIELINEPF"))
            {
                this.TieLinePF = ((float)(value));
                return;
            }
            if ((feature == "LOWERRAMPRATE"))
            {
                this.LowerRampRate = ((float)(value));
                return;
            }
            if ((feature == "INITIALP"))
            {
                this.InitialP = ((float)(value));
                return;
            }
            if ((feature == "CONTROLRESPONSERATE"))
            {
                this.ControlResponseRate = ((float)(value));
                return;
            }
            if ((feature == "MINECONOMICP"))
            {
                this.MinEconomicP = ((float)(value));
                return;
            }
            if ((feature == "MODELDETAIL"))
            {
                this.ModelDetail = ((object)(value));
                return;
            }
            if ((feature == "FUELPRIORITY"))
            {
                this.FuelPriority = ((int)(value));
                return;
            }
            if ((feature == "MAXECONOMICP"))
            {
                this.MaxEconomicP = ((float)(value));
                return;
            }
            if ((feature == "GENCONTROLSOURCE"))
            {
                this.GenControlSource = ((GeneratorControlSource)(value));
                return;
            }
            if ((feature == "RATEDGROSSMINP"))
            {
                this.RatedGrossMinP = ((float)(value));
                return;
            }
            if ((feature == "VARIABLECOST"))
            {
                this.VariableCost = ((float)(value));
                return;
            }
            if ((feature == "MINOPERATINGP"))
            {
                this.MinOperatingP = ((float)(value));
                return;
            }
            if ((feature == "BASEP"))
            {
                this.BaseP = ((float)(value));
                return;
            }
            if ((feature == "SHORTPF"))
            {
                this.ShortPF = ((float)(value));
                return;
            }
            if ((feature == "LOWCONTROLLIMIT"))
            {
                this.LowControlLimit = ((float)(value));
                return;
            }
            if ((feature == "LONGPF"))
            {
                this.LongPF = ((float)(value));
                return;
            }
            if ((feature == "MAXOPERATINGP"))
            {
                this.MaxOperatingP = ((float)(value));
                return;
            }
            if ((feature == "FASTSTARTFLAG"))
            {
                this.FastStartFlag = ((bool)(value));
                return;
            }
            if ((feature == "GENCONTROLMODE"))
            {
                this.GenControlMode = ((GeneratorControlMode)(value));
                return;
            }
            if ((feature == "RATEDNETMAXP"))
            {
                this.RatedNetMaxP = ((float)(value));
                return;
            }
            if ((feature == "EFFICIENCY"))
            {
                this.Efficiency = ((float)(value));
                return;
            }
            if ((feature == "MINIMUMOFFTIME"))
            {
                this.MinimumOffTime = ((float)(value));
                return;
            }
            if ((feature == "DISPRESERVEFLAG"))
            {
                this.DispReserveFlag = ((bool)(value));
                return;
            }
            if ((feature == "MAXIMUMALLOWABLESPINNINGRESERVE"))
            {
                this.MaximumAllowableSpinningReserve = ((float)(value));
                return;
            }
            if ((feature == "CONTROLDEADBAND"))
            {
                this.ControlDeadband = ((float)(value));
                return;
            }
            if ((feature == "NORMALPF"))
            {
                this.NormalPF = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "OperatedBy_GenerationProvider"))
            {
                return new OperatedBy_GenerationProviderProxy(this);
            }
            if ((attribute == "GenUnitOpSchedule"))
            {
                return new GenUnitOpScheduleProxy(this);
            }
            if ((attribute == "RegisteredGenerator"))
            {
                return new RegisteredGeneratorProxy(this);
            }
            if ((attribute == "SubControlArea"))
            {
                return new SubControlAreaProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OperatedBy_GenerationProvider"))
            {
                return new OperatedBy_GenerationProviderProxy(this);
            }
            if ((reference == "GenUnitOpSchedule"))
            {
                return new GenUnitOpScheduleProxy(this);
            }
            if ((reference == "RegisteredGenerator"))
            {
                return new RegisteredGeneratorProxy(this);
            }
            if ((reference == "SubControlArea"))
            {
                return new SubControlAreaProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/Generat" +
                        "ingUnit")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the GeneratingUnit class
        /// </summary>
        public class GeneratingUnitReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private GeneratingUnit _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public GeneratingUnitReferencedElementsCollection(GeneratingUnit parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.OperatedBy_GenerationProvider != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.GenUnitOpSchedule != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ControlAreaGeneratingUnit.Count);
                    count = (count + this._parent.GrossToNetActivePowerCurves.Count);
                    count = (count + this._parent.GenUnitOpCostCurves.Count);
                    count = (count + this._parent.SynchronousMachines.Count);
                    if ((this._parent.RegisteredGenerator != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SubControlArea != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OperatedBy_GenerationProviderChanged += this.PropagateValueChanges;
                this._parent.GenUnitOpScheduleChanged += this.PropagateValueChanges;
                this._parent.ControlAreaGeneratingUnit.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.GrossToNetActivePowerCurves.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.GenUnitOpCostCurves.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SynchronousMachines.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RegisteredGeneratorChanged += this.PropagateValueChanges;
                this._parent.SubControlAreaChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OperatedBy_GenerationProviderChanged -= this.PropagateValueChanges;
                this._parent.GenUnitOpScheduleChanged -= this.PropagateValueChanges;
                this._parent.ControlAreaGeneratingUnit.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.GrossToNetActivePowerCurves.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.GenUnitOpCostCurves.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SynchronousMachines.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RegisteredGeneratorChanged -= this.PropagateValueChanges;
                this._parent.SubControlAreaChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.OperatedBy_GenerationProvider == null))
                {
                    IGenerationProvider operatedBy_GenerationProviderCasted = item.As<IGenerationProvider>();
                    if ((operatedBy_GenerationProviderCasted != null))
                    {
                        this._parent.OperatedBy_GenerationProvider = operatedBy_GenerationProviderCasted;
                        return;
                    }
                }
                if ((this._parent.GenUnitOpSchedule == null))
                {
                    IGenUnitOpSchedule genUnitOpScheduleCasted = item.As<IGenUnitOpSchedule>();
                    if ((genUnitOpScheduleCasted != null))
                    {
                        this._parent.GenUnitOpSchedule = genUnitOpScheduleCasted;
                        return;
                    }
                }
                IControlAreaGeneratingUnit controlAreaGeneratingUnitCasted = item.As<IControlAreaGeneratingUnit>();
                if ((controlAreaGeneratingUnitCasted != null))
                {
                    this._parent.ControlAreaGeneratingUnit.Add(controlAreaGeneratingUnitCasted);
                }
                IGrossToNetActivePowerCurve grossToNetActivePowerCurvesCasted = item.As<IGrossToNetActivePowerCurve>();
                if ((grossToNetActivePowerCurvesCasted != null))
                {
                    this._parent.GrossToNetActivePowerCurves.Add(grossToNetActivePowerCurvesCasted);
                }
                IGenUnitOpCostCurve genUnitOpCostCurvesCasted = item.As<IGenUnitOpCostCurve>();
                if ((genUnitOpCostCurvesCasted != null))
                {
                    this._parent.GenUnitOpCostCurves.Add(genUnitOpCostCurvesCasted);
                }
                ISynchronousMachine synchronousMachinesCasted = item.As<ISynchronousMachine>();
                if ((synchronousMachinesCasted != null))
                {
                    this._parent.SynchronousMachines.Add(synchronousMachinesCasted);
                }
                if ((this._parent.RegisteredGenerator == null))
                {
                    IRegisteredGenerator registeredGeneratorCasted = item.As<IRegisteredGenerator>();
                    if ((registeredGeneratorCasted != null))
                    {
                        this._parent.RegisteredGenerator = registeredGeneratorCasted;
                        return;
                    }
                }
                if ((this._parent.SubControlArea == null))
                {
                    ISubControlArea subControlAreaCasted = item.As<ISubControlArea>();
                    if ((subControlAreaCasted != null))
                    {
                        this._parent.SubControlArea = subControlAreaCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OperatedBy_GenerationProvider = null;
                this._parent.GenUnitOpSchedule = null;
                this._parent.ControlAreaGeneratingUnit.Clear();
                this._parent.GrossToNetActivePowerCurves.Clear();
                this._parent.GenUnitOpCostCurves.Clear();
                this._parent.SynchronousMachines.Clear();
                this._parent.RegisteredGenerator = null;
                this._parent.SubControlArea = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.OperatedBy_GenerationProvider))
                {
                    return true;
                }
                if ((item == this._parent.GenUnitOpSchedule))
                {
                    return true;
                }
                if (this._parent.ControlAreaGeneratingUnit.Contains(item))
                {
                    return true;
                }
                if (this._parent.GrossToNetActivePowerCurves.Contains(item))
                {
                    return true;
                }
                if (this._parent.GenUnitOpCostCurves.Contains(item))
                {
                    return true;
                }
                if (this._parent.SynchronousMachines.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.RegisteredGenerator))
                {
                    return true;
                }
                if ((item == this._parent.SubControlArea))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.OperatedBy_GenerationProvider != null))
                {
                    array[arrayIndex] = this._parent.OperatedBy_GenerationProvider;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.GenUnitOpSchedule != null))
                {
                    array[arrayIndex] = this._parent.GenUnitOpSchedule;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> controlAreaGeneratingUnitEnumerator = this._parent.ControlAreaGeneratingUnit.GetEnumerator();
                try
                {
                    for (
                    ; controlAreaGeneratingUnitEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = controlAreaGeneratingUnitEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    controlAreaGeneratingUnitEnumerator.Dispose();
                }
                IEnumerator<IModelElement> grossToNetActivePowerCurvesEnumerator = this._parent.GrossToNetActivePowerCurves.GetEnumerator();
                try
                {
                    for (
                    ; grossToNetActivePowerCurvesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = grossToNetActivePowerCurvesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    grossToNetActivePowerCurvesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> genUnitOpCostCurvesEnumerator = this._parent.GenUnitOpCostCurves.GetEnumerator();
                try
                {
                    for (
                    ; genUnitOpCostCurvesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = genUnitOpCostCurvesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    genUnitOpCostCurvesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> synchronousMachinesEnumerator = this._parent.SynchronousMachines.GetEnumerator();
                try
                {
                    for (
                    ; synchronousMachinesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = synchronousMachinesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    synchronousMachinesEnumerator.Dispose();
                }
                if ((this._parent.RegisteredGenerator != null))
                {
                    array[arrayIndex] = this._parent.RegisteredGenerator;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SubControlArea != null))
                {
                    array[arrayIndex] = this._parent.SubControlArea;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.OperatedBy_GenerationProvider == item))
                {
                    this._parent.OperatedBy_GenerationProvider = null;
                    return true;
                }
                if ((this._parent.GenUnitOpSchedule == item))
                {
                    this._parent.GenUnitOpSchedule = null;
                    return true;
                }
                IControlAreaGeneratingUnit controlAreaGeneratingUnitItem = item.As<IControlAreaGeneratingUnit>();
                if (((controlAreaGeneratingUnitItem != null) 
                            && this._parent.ControlAreaGeneratingUnit.Remove(controlAreaGeneratingUnitItem)))
                {
                    return true;
                }
                IGrossToNetActivePowerCurve grossToNetActivePowerCurveItem = item.As<IGrossToNetActivePowerCurve>();
                if (((grossToNetActivePowerCurveItem != null) 
                            && this._parent.GrossToNetActivePowerCurves.Remove(grossToNetActivePowerCurveItem)))
                {
                    return true;
                }
                IGenUnitOpCostCurve genUnitOpCostCurveItem = item.As<IGenUnitOpCostCurve>();
                if (((genUnitOpCostCurveItem != null) 
                            && this._parent.GenUnitOpCostCurves.Remove(genUnitOpCostCurveItem)))
                {
                    return true;
                }
                ISynchronousMachine synchronousMachineItem = item.As<ISynchronousMachine>();
                if (((synchronousMachineItem != null) 
                            && this._parent.SynchronousMachines.Remove(synchronousMachineItem)))
                {
                    return true;
                }
                if ((this._parent.RegisteredGenerator == item))
                {
                    this._parent.RegisteredGenerator = null;
                    return true;
                }
                if ((this._parent.SubControlArea == item))
                {
                    this._parent.SubControlArea = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OperatedBy_GenerationProvider).Concat(this._parent.GenUnitOpSchedule).Concat(this._parent.ControlAreaGeneratingUnit).Concat(this._parent.GrossToNetActivePowerCurves).Concat(this._parent.GenUnitOpCostCurves).Concat(this._parent.SynchronousMachines).Concat(this._parent.RegisteredGenerator).Concat(this._parent.SubControlArea).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the highControlLimit property
        /// </summary>
        private sealed class HighControlLimitProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HighControlLimitProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.HighControlLimit;
                }
                set
                {
                    this.ModelElement.HighControlLimit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HighControlLimitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HighControlLimitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the raiseRampRate property
        /// </summary>
        private sealed class RaiseRampRateProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RaiseRampRateProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RaiseRampRate;
                }
                set
                {
                    this.ModelElement.RaiseRampRate = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RaiseRampRateChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RaiseRampRateChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the genOperatingMode property
        /// </summary>
        private sealed class GenOperatingModeProxy : ModelPropertyChange<IGeneratingUnit, Nullable<GeneratorOperatingMode>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GenOperatingModeProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<GeneratorOperatingMode> Value
            {
                get
                {
                    return this.ModelElement.GenOperatingMode;
                }
                set
                {
                    this.ModelElement.GenOperatingMode = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GenOperatingModeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GenOperatingModeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the autoCntrlMarginP property
        /// </summary>
        private sealed class AutoCntrlMarginPProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AutoCntrlMarginPProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.AutoCntrlMarginP;
                }
                set
                {
                    this.ModelElement.AutoCntrlMarginP = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AutoCntrlMarginPChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AutoCntrlMarginPChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the controlPulseLow property
        /// </summary>
        private sealed class ControlPulseLowProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ControlPulseLowProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ControlPulseLow;
                }
                set
                {
                    this.ModelElement.ControlPulseLow = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ControlPulseLowChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ControlPulseLowChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the governorMPL property
        /// </summary>
        private sealed class GovernorMPLProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GovernorMPLProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.GovernorMPL;
                }
                set
                {
                    this.ModelElement.GovernorMPL = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GovernorMPLChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GovernorMPLChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ratedGrossMaxP property
        /// </summary>
        private sealed class RatedGrossMaxPProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatedGrossMaxPProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RatedGrossMaxP;
                }
                set
                {
                    this.ModelElement.RatedGrossMaxP = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RatedGrossMaxPChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RatedGrossMaxPChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the allocSpinResP property
        /// </summary>
        private sealed class AllocSpinResPProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AllocSpinResPProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.AllocSpinResP;
                }
                set
                {
                    this.ModelElement.AllocSpinResP = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AllocSpinResPChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.AllocSpinResPChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the stepChange property
        /// </summary>
        private sealed class StepChangeProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StepChangeProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.StepChange;
                }
                set
                {
                    this.ModelElement.StepChange = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StepChangeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StepChangeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the startupCost property
        /// </summary>
        private sealed class StartupCostProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartupCostProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.StartupCost;
                }
                set
                {
                    this.ModelElement.StartupCost = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StartupCostChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StartupCostChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the spinReserveRamp property
        /// </summary>
        private sealed class SpinReserveRampProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpinReserveRampProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SpinReserveRamp;
                }
                set
                {
                    this.ModelElement.SpinReserveRamp = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SpinReserveRampChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SpinReserveRampChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the nominalP property
        /// </summary>
        private sealed class NominalPProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NominalPProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NominalP;
                }
                set
                {
                    this.ModelElement.NominalP = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NominalPChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NominalPChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the governorSCD property
        /// </summary>
        private sealed class GovernorSCDProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GovernorSCDProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.GovernorSCD;
                }
                set
                {
                    this.ModelElement.GovernorSCD = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GovernorSCDChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GovernorSCDChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the penaltyFactor property
        /// </summary>
        private sealed class PenaltyFactorProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PenaltyFactorProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PenaltyFactor;
                }
                set
                {
                    this.ModelElement.PenaltyFactor = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PenaltyFactorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.PenaltyFactorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the controlPulseHigh property
        /// </summary>
        private sealed class ControlPulseHighProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ControlPulseHighProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ControlPulseHigh;
                }
                set
                {
                    this.ModelElement.ControlPulseHigh = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ControlPulseHighChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ControlPulseHighChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the energyMinP property
        /// </summary>
        private sealed class EnergyMinPProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnergyMinPProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.EnergyMinP;
                }
                set
                {
                    this.ModelElement.EnergyMinP = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EnergyMinPChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EnergyMinPChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the startupTime property
        /// </summary>
        private sealed class StartupTimeProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartupTimeProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.StartupTime;
                }
                set
                {
                    this.ModelElement.StartupTime = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StartupTimeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.StartupTimeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the tieLinePF property
        /// </summary>
        private sealed class TieLinePFProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TieLinePFProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TieLinePF;
                }
                set
                {
                    this.ModelElement.TieLinePF = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TieLinePFChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.TieLinePFChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lowerRampRate property
        /// </summary>
        private sealed class LowerRampRateProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowerRampRateProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.LowerRampRate;
                }
                set
                {
                    this.ModelElement.LowerRampRate = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowerRampRateChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowerRampRateChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the initialP property
        /// </summary>
        private sealed class InitialPProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InitialPProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.InitialP;
                }
                set
                {
                    this.ModelElement.InitialP = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InitialPChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.InitialPChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the controlResponseRate property
        /// </summary>
        private sealed class ControlResponseRateProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ControlResponseRateProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ControlResponseRate;
                }
                set
                {
                    this.ModelElement.ControlResponseRate = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ControlResponseRateChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ControlResponseRateChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minEconomicP property
        /// </summary>
        private sealed class MinEconomicPProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinEconomicPProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinEconomicP;
                }
                set
                {
                    this.ModelElement.MinEconomicP = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinEconomicPChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinEconomicPChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the modelDetail property
        /// </summary>
        private sealed class ModelDetailProxy : ModelPropertyChange<IGeneratingUnit, object>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ModelDetailProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override object Value
            {
                get
                {
                    return this.ModelElement.ModelDetail;
                }
                set
                {
                    this.ModelElement.ModelDetail = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ModelDetailChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ModelDetailChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fuelPriority property
        /// </summary>
        private sealed class FuelPriorityProxy : ModelPropertyChange<IGeneratingUnit, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FuelPriorityProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.FuelPriority;
                }
                set
                {
                    this.ModelElement.FuelPriority = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FuelPriorityChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FuelPriorityChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maxEconomicP property
        /// </summary>
        private sealed class MaxEconomicPProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxEconomicPProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MaxEconomicP;
                }
                set
                {
                    this.ModelElement.MaxEconomicP = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxEconomicPChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxEconomicPChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the genControlSource property
        /// </summary>
        private sealed class GenControlSourceProxy : ModelPropertyChange<IGeneratingUnit, Nullable<GeneratorControlSource>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GenControlSourceProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<GeneratorControlSource> Value
            {
                get
                {
                    return this.ModelElement.GenControlSource;
                }
                set
                {
                    this.ModelElement.GenControlSource = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GenControlSourceChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GenControlSourceChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ratedGrossMinP property
        /// </summary>
        private sealed class RatedGrossMinPProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatedGrossMinPProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RatedGrossMinP;
                }
                set
                {
                    this.ModelElement.RatedGrossMinP = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RatedGrossMinPChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RatedGrossMinPChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the variableCost property
        /// </summary>
        private sealed class VariableCostProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VariableCostProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.VariableCost;
                }
                set
                {
                    this.ModelElement.VariableCost = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VariableCostChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.VariableCostChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minOperatingP property
        /// </summary>
        private sealed class MinOperatingPProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinOperatingPProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinOperatingP;
                }
                set
                {
                    this.ModelElement.MinOperatingP = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinOperatingPChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinOperatingPChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the baseP property
        /// </summary>
        private sealed class BasePProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BasePProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.BaseP;
                }
                set
                {
                    this.ModelElement.BaseP = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BasePChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.BasePChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the shortPF property
        /// </summary>
        private sealed class ShortPFProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ShortPFProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ShortPF;
                }
                set
                {
                    this.ModelElement.ShortPF = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ShortPFChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ShortPFChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lowControlLimit property
        /// </summary>
        private sealed class LowControlLimitProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowControlLimitProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.LowControlLimit;
                }
                set
                {
                    this.ModelElement.LowControlLimit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowControlLimitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowControlLimitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the longPF property
        /// </summary>
        private sealed class LongPFProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LongPFProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.LongPF;
                }
                set
                {
                    this.ModelElement.LongPF = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LongPFChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LongPFChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maxOperatingP property
        /// </summary>
        private sealed class MaxOperatingPProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxOperatingPProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MaxOperatingP;
                }
                set
                {
                    this.ModelElement.MaxOperatingP = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxOperatingPChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaxOperatingPChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fastStartFlag property
        /// </summary>
        private sealed class FastStartFlagProxy : ModelPropertyChange<IGeneratingUnit, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FastStartFlagProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.FastStartFlag;
                }
                set
                {
                    this.ModelElement.FastStartFlag = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FastStartFlagChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.FastStartFlagChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the genControlMode property
        /// </summary>
        private sealed class GenControlModeProxy : ModelPropertyChange<IGeneratingUnit, Nullable<GeneratorControlMode>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GenControlModeProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<GeneratorControlMode> Value
            {
                get
                {
                    return this.ModelElement.GenControlMode;
                }
                set
                {
                    this.ModelElement.GenControlMode = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GenControlModeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GenControlModeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ratedNetMaxP property
        /// </summary>
        private sealed class RatedNetMaxPProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatedNetMaxPProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RatedNetMaxP;
                }
                set
                {
                    this.ModelElement.RatedNetMaxP = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RatedNetMaxPChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RatedNetMaxPChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the efficiency property
        /// </summary>
        private sealed class EfficiencyProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EfficiencyProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Efficiency;
                }
                set
                {
                    this.ModelElement.Efficiency = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EfficiencyChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.EfficiencyChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minimumOffTime property
        /// </summary>
        private sealed class MinimumOffTimeProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinimumOffTimeProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinimumOffTime;
                }
                set
                {
                    this.ModelElement.MinimumOffTime = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinimumOffTimeChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MinimumOffTimeChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dispReserveFlag property
        /// </summary>
        private sealed class DispReserveFlagProxy : ModelPropertyChange<IGeneratingUnit, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DispReserveFlagProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.DispReserveFlag;
                }
                set
                {
                    this.ModelElement.DispReserveFlag = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DispReserveFlagChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.DispReserveFlagChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maximumAllowableSpinningReserve property
        /// </summary>
        private sealed class MaximumAllowableSpinningReserveProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaximumAllowableSpinningReserveProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MaximumAllowableSpinningReserve;
                }
                set
                {
                    this.ModelElement.MaximumAllowableSpinningReserve = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaximumAllowableSpinningReserveChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.MaximumAllowableSpinningReserveChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the controlDeadband property
        /// </summary>
        private sealed class ControlDeadbandProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ControlDeadbandProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ControlDeadband;
                }
                set
                {
                    this.ModelElement.ControlDeadband = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ControlDeadbandChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ControlDeadbandChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the normalPF property
        /// </summary>
        private sealed class NormalPFProxy : ModelPropertyChange<IGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NormalPFProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NormalPF;
                }
                set
                {
                    this.ModelElement.NormalPF = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NormalPFChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NormalPFChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OperatedBy_GenerationProvider property
        /// </summary>
        private sealed class OperatedBy_GenerationProviderProxy : ModelPropertyChange<IGeneratingUnit, IGenerationProvider>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OperatedBy_GenerationProviderProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGenerationProvider Value
            {
                get
                {
                    return this.ModelElement.OperatedBy_GenerationProvider;
                }
                set
                {
                    this.ModelElement.OperatedBy_GenerationProvider = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OperatedBy_GenerationProviderChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.OperatedBy_GenerationProviderChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GenUnitOpSchedule property
        /// </summary>
        private sealed class GenUnitOpScheduleProxy : ModelPropertyChange<IGeneratingUnit, IGenUnitOpSchedule>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GenUnitOpScheduleProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGenUnitOpSchedule Value
            {
                get
                {
                    return this.ModelElement.GenUnitOpSchedule;
                }
                set
                {
                    this.ModelElement.GenUnitOpSchedule = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GenUnitOpScheduleChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.GenUnitOpScheduleChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RegisteredGenerator property
        /// </summary>
        private sealed class RegisteredGeneratorProxy : ModelPropertyChange<IGeneratingUnit, IRegisteredGenerator>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RegisteredGeneratorProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRegisteredGenerator Value
            {
                get
                {
                    return this.ModelElement.RegisteredGenerator;
                }
                set
                {
                    this.ModelElement.RegisteredGenerator = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RegisteredGeneratorChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.RegisteredGeneratorChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SubControlArea property
        /// </summary>
        private sealed class SubControlAreaProxy : ModelPropertyChange<IGeneratingUnit, ISubControlArea>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubControlAreaProxy(IGeneratingUnit modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISubControlArea Value
            {
                get
                {
                    return this.ModelElement.SubControlArea;
                }
                set
                {
                    this.ModelElement.SubControlArea = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubControlAreaChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.SubControlAreaChanged -= handler;
            }
        }
    }
}

