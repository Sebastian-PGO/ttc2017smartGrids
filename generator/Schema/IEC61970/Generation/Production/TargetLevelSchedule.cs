//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.Production
{
    
    
    /// <summary>
    /// The default implementation of the TargetLevelSchedule class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Production")]
    [XmlNamespacePrefixAttribute("cimProduction")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/TargetL" +
        "evelSchedule")]
    [DebuggerDisplayAttribute("TargetLevelSchedule {UUID}")]
    public class TargetLevelSchedule : Curve, ITargetLevelSchedule, IModelElement
    {
        
        /// <summary>
        /// The backing field for the HighLevelLimit property
        /// </summary>
        private float _highLevelLimit;
        
        /// <summary>
        /// The backing field for the LowLevelLimit property
        /// </summary>
        private float _lowLevelLimit;
        
        /// <summary>
        /// The backing field for the Reservoir property
        /// </summary>
        private IReservoir _reservoir;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The highLevelLimit property
        /// </summary>
        [XmlElementNameAttribute("highLevelLimit")]
        [XmlAttributeAttribute(true)]
        public virtual float HighLevelLimit
        {
            get
            {
                return this._highLevelLimit;
            }
            set
            {
                if ((this._highLevelLimit != value))
                {
                    float old = this._highLevelLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHighLevelLimitChanging(e);
                    this.OnPropertyChanging("HighLevelLimit", e);
                    this._highLevelLimit = value;
                    this.OnHighLevelLimitChanged(e);
                    this.OnPropertyChanged("HighLevelLimit", e);
                }
            }
        }
        
        /// <summary>
        /// The lowLevelLimit property
        /// </summary>
        [XmlElementNameAttribute("lowLevelLimit")]
        [XmlAttributeAttribute(true)]
        public virtual float LowLevelLimit
        {
            get
            {
                return this._lowLevelLimit;
            }
            set
            {
                if ((this._lowLevelLimit != value))
                {
                    float old = this._lowLevelLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLowLevelLimitChanging(e);
                    this.OnPropertyChanging("LowLevelLimit", e);
                    this._lowLevelLimit = value;
                    this.OnLowLevelLimitChanged(e);
                    this.OnPropertyChanged("LowLevelLimit", e);
                }
            }
        }
        
        /// <summary>
        /// The Reservoir property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TargetLevelSchedule")]
        public virtual IReservoir Reservoir
        {
            get
            {
                return this._reservoir;
            }
            set
            {
                if ((this._reservoir != value))
                {
                    IReservoir old = this._reservoir;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReservoirChanging(e);
                    this.OnPropertyChanging("Reservoir", e);
                    this._reservoir = value;
                    if ((old != null))
                    {
                        old.TargetLevelSchedule = null;
                        old.Deleted -= this.OnResetReservoir;
                    }
                    if ((value != null))
                    {
                        value.TargetLevelSchedule = this;
                        value.Deleted += this.OnResetReservoir;
                    }
                    this.OnReservoirChanged(e);
                    this.OnPropertyChanged("Reservoir", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TargetLevelScheduleReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/TargetL" +
                            "evelSchedule")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the HighLevelLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HighLevelLimitChanging;
        
        /// <summary>
        /// Gets fired when the HighLevelLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HighLevelLimitChanged;
        
        /// <summary>
        /// Gets fired before the LowLevelLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowLevelLimitChanging;
        
        /// <summary>
        /// Gets fired when the LowLevelLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowLevelLimitChanged;
        
        /// <summary>
        /// Gets fired before the Reservoir property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReservoirChanging;
        
        /// <summary>
        /// Gets fired when the Reservoir property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReservoirChanged;
        
        /// <summary>
        /// Raises the HighLevelLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHighLevelLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HighLevelLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HighLevelLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHighLevelLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HighLevelLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowLevelLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowLevelLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowLevelLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowLevelLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowLevelLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowLevelLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReservoirChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReservoirChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReservoirChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReservoirChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReservoirChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReservoirChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Reservoir property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReservoir(object sender, System.EventArgs eventArgs)
        {
            this.Reservoir = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "HIGHLEVELLIMIT"))
            {
                return this.HighLevelLimit;
            }
            if ((attribute == "LOWLEVELLIMIT"))
            {
                return this.LowLevelLimit;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RESERVOIR"))
            {
                this.Reservoir = ((IReservoir)(value));
                return;
            }
            if ((feature == "HIGHLEVELLIMIT"))
            {
                this.HighLevelLimit = ((float)(value));
                return;
            }
            if ((feature == "LOWLEVELLIMIT"))
            {
                this.LowLevelLimit = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Reservoir"))
            {
                return new ReservoirProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Reservoir"))
            {
                return new ReservoirProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/TargetL" +
                        "evelSchedule")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TargetLevelSchedule class
        /// </summary>
        public class TargetLevelScheduleReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TargetLevelSchedule _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TargetLevelScheduleReferencedElementsCollection(TargetLevelSchedule parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Reservoir != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ReservoirChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ReservoirChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Reservoir == null))
                {
                    IReservoir reservoirCasted = item.As<IReservoir>();
                    if ((reservoirCasted != null))
                    {
                        this._parent.Reservoir = reservoirCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Reservoir = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Reservoir))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Reservoir != null))
                {
                    array[arrayIndex] = this._parent.Reservoir;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Reservoir == item))
                {
                    this._parent.Reservoir = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Reservoir).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the highLevelLimit property
        /// </summary>
        private sealed class HighLevelLimitProxy : ModelPropertyChange<ITargetLevelSchedule, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HighLevelLimitProxy(ITargetLevelSchedule modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.HighLevelLimit;
                }
                set
                {
                    this.ModelElement.HighLevelLimit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HighLevelLimitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HighLevelLimitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lowLevelLimit property
        /// </summary>
        private sealed class LowLevelLimitProxy : ModelPropertyChange<ITargetLevelSchedule, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowLevelLimitProxy(ITargetLevelSchedule modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.LowLevelLimit;
                }
                set
                {
                    this.ModelElement.LowLevelLimit = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowLevelLimitChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.LowLevelLimitChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Reservoir property
        /// </summary>
        private sealed class ReservoirProxy : ModelPropertyChange<ITargetLevelSchedule, IReservoir>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReservoirProxy(ITargetLevelSchedule modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReservoir Value
            {
                get
                {
                    return this.ModelElement.Reservoir;
                }
                set
                {
                    this.ModelElement.Reservoir = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReservoirChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.ReservoirChanged -= handler;
            }
        }
    }
}

