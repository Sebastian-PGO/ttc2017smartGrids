//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.Production
{
    
    
    /// <summary>
    /// The default implementation of the CogenerationPlant class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Production")]
    [XmlNamespacePrefixAttribute("cimProduction")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/Cogener" +
        "ationPlant")]
    [DebuggerDisplayAttribute("CogenerationPlant {UUID}")]
    public partial class CogenerationPlant : PowerSystemResource, ICogenerationPlant, IModelElement
    {
        
        /// <summary>
        /// The backing field for the CogenLPSteamRating property
        /// </summary>
        private float _cogenLPSteamRating;
        
        private static Lazy<ITypedElement> _cogenLPSteamRatingAttribute = new Lazy<ITypedElement>(RetrieveCogenLPSteamRatingAttribute);
        
        /// <summary>
        /// The backing field for the CogenHPSteamRating property
        /// </summary>
        private float _cogenHPSteamRating;
        
        private static Lazy<ITypedElement> _cogenHPSteamRatingAttribute = new Lazy<ITypedElement>(RetrieveCogenHPSteamRatingAttribute);
        
        /// <summary>
        /// The backing field for the CogenHPSendoutRating property
        /// </summary>
        private float _cogenHPSendoutRating;
        
        private static Lazy<ITypedElement> _cogenHPSendoutRatingAttribute = new Lazy<ITypedElement>(RetrieveCogenHPSendoutRatingAttribute);
        
        /// <summary>
        /// The backing field for the CogenLPSendoutRating property
        /// </summary>
        private float _cogenLPSendoutRating;
        
        private static Lazy<ITypedElement> _cogenLPSendoutRatingAttribute = new Lazy<ITypedElement>(RetrieveCogenLPSendoutRatingAttribute);
        
        /// <summary>
        /// The backing field for the RatedP property
        /// </summary>
        private float _ratedP;
        
        private static Lazy<ITypedElement> _ratedPAttribute = new Lazy<ITypedElement>(RetrieveRatedPAttribute);
        
        private static Lazy<ITypedElement> _steamSendoutScheduleReference = new Lazy<ITypedElement>(RetrieveSteamSendoutScheduleReference);
        
        /// <summary>
        /// The backing field for the SteamSendoutSchedule property
        /// </summary>
        private ISteamSendoutSchedule _steamSendoutSchedule;
        
        private static Lazy<ITypedElement> _thermalGeneratingUnitsReference = new Lazy<ITypedElement>(RetrieveThermalGeneratingUnitsReference);
        
        /// <summary>
        /// The backing field for the ThermalGeneratingUnits property
        /// </summary>
        private CogenerationPlantThermalGeneratingUnitsCollection _thermalGeneratingUnits;
        
        private static IClass _classInstance;
        
        public CogenerationPlant()
        {
            this._thermalGeneratingUnits = new CogenerationPlantThermalGeneratingUnitsCollection(this);
            this._thermalGeneratingUnits.CollectionChanging += this.ThermalGeneratingUnitsCollectionChanging;
            this._thermalGeneratingUnits.CollectionChanged += this.ThermalGeneratingUnitsCollectionChanged;
        }
        
        /// <summary>
        /// The cogenLPSteamRating property
        /// </summary>
        [XmlElementNameAttribute("cogenLPSteamRating")]
        [XmlAttributeAttribute(true)]
        public virtual float CogenLPSteamRating
        {
            get
            {
                return this._cogenLPSteamRating;
            }
            set
            {
                if ((this._cogenLPSteamRating != value))
                {
                    float old = this._cogenLPSteamRating;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCogenLPSteamRatingChanging(e);
                    this.OnPropertyChanging("CogenLPSteamRating", e, _cogenLPSteamRatingAttribute);
                    this._cogenLPSteamRating = value;
                    this.OnCogenLPSteamRatingChanged(e);
                    this.OnPropertyChanged("CogenLPSteamRating", e, _cogenLPSteamRatingAttribute);
                }
            }
        }
        
        /// <summary>
        /// The cogenHPSteamRating property
        /// </summary>
        [XmlElementNameAttribute("cogenHPSteamRating")]
        [XmlAttributeAttribute(true)]
        public virtual float CogenHPSteamRating
        {
            get
            {
                return this._cogenHPSteamRating;
            }
            set
            {
                if ((this._cogenHPSteamRating != value))
                {
                    float old = this._cogenHPSteamRating;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCogenHPSteamRatingChanging(e);
                    this.OnPropertyChanging("CogenHPSteamRating", e, _cogenHPSteamRatingAttribute);
                    this._cogenHPSteamRating = value;
                    this.OnCogenHPSteamRatingChanged(e);
                    this.OnPropertyChanged("CogenHPSteamRating", e, _cogenHPSteamRatingAttribute);
                }
            }
        }
        
        /// <summary>
        /// The cogenHPSendoutRating property
        /// </summary>
        [XmlElementNameAttribute("cogenHPSendoutRating")]
        [XmlAttributeAttribute(true)]
        public virtual float CogenHPSendoutRating
        {
            get
            {
                return this._cogenHPSendoutRating;
            }
            set
            {
                if ((this._cogenHPSendoutRating != value))
                {
                    float old = this._cogenHPSendoutRating;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCogenHPSendoutRatingChanging(e);
                    this.OnPropertyChanging("CogenHPSendoutRating", e, _cogenHPSendoutRatingAttribute);
                    this._cogenHPSendoutRating = value;
                    this.OnCogenHPSendoutRatingChanged(e);
                    this.OnPropertyChanged("CogenHPSendoutRating", e, _cogenHPSendoutRatingAttribute);
                }
            }
        }
        
        /// <summary>
        /// The cogenLPSendoutRating property
        /// </summary>
        [XmlElementNameAttribute("cogenLPSendoutRating")]
        [XmlAttributeAttribute(true)]
        public virtual float CogenLPSendoutRating
        {
            get
            {
                return this._cogenLPSendoutRating;
            }
            set
            {
                if ((this._cogenLPSendoutRating != value))
                {
                    float old = this._cogenLPSendoutRating;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCogenLPSendoutRatingChanging(e);
                    this.OnPropertyChanging("CogenLPSendoutRating", e, _cogenLPSendoutRatingAttribute);
                    this._cogenLPSendoutRating = value;
                    this.OnCogenLPSendoutRatingChanged(e);
                    this.OnPropertyChanged("CogenLPSendoutRating", e, _cogenLPSendoutRatingAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ratedP property
        /// </summary>
        [XmlElementNameAttribute("ratedP")]
        [XmlAttributeAttribute(true)]
        public virtual float RatedP
        {
            get
            {
                return this._ratedP;
            }
            set
            {
                if ((this._ratedP != value))
                {
                    float old = this._ratedP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatedPChanging(e);
                    this.OnPropertyChanging("RatedP", e, _ratedPAttribute);
                    this._ratedP = value;
                    this.OnRatedPChanged(e);
                    this.OnPropertyChanged("RatedP", e, _ratedPAttribute);
                }
            }
        }
        
        /// <summary>
        /// The SteamSendoutSchedule property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CogenerationPlant")]
        public virtual ISteamSendoutSchedule SteamSendoutSchedule
        {
            get
            {
                return this._steamSendoutSchedule;
            }
            set
            {
                if ((this._steamSendoutSchedule != value))
                {
                    ISteamSendoutSchedule old = this._steamSendoutSchedule;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSteamSendoutScheduleChanging(e);
                    this.OnPropertyChanging("SteamSendoutSchedule", e, _steamSendoutScheduleReference);
                    this._steamSendoutSchedule = value;
                    if ((old != null))
                    {
                        old.CogenerationPlant = null;
                        old.Deleted -= this.OnResetSteamSendoutSchedule;
                    }
                    if ((value != null))
                    {
                        value.CogenerationPlant = this;
                        value.Deleted += this.OnResetSteamSendoutSchedule;
                    }
                    this.OnSteamSendoutScheduleChanged(e);
                    this.OnPropertyChanged("SteamSendoutSchedule", e, _steamSendoutScheduleReference);
                }
            }
        }
        
        /// <summary>
        /// The ThermalGeneratingUnits property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CogenerationPlant")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IThermalGeneratingUnit> ThermalGeneratingUnits
        {
            get
            {
                return this._thermalGeneratingUnits;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CogenerationPlantReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/Cogener" +
                            "ationPlant")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the CogenLPSteamRating property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CogenLPSteamRatingChanging;
        
        /// <summary>
        /// Gets fired when the CogenLPSteamRating property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CogenLPSteamRatingChanged;
        
        /// <summary>
        /// Gets fired before the CogenHPSteamRating property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CogenHPSteamRatingChanging;
        
        /// <summary>
        /// Gets fired when the CogenHPSteamRating property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CogenHPSteamRatingChanged;
        
        /// <summary>
        /// Gets fired before the CogenHPSendoutRating property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CogenHPSendoutRatingChanging;
        
        /// <summary>
        /// Gets fired when the CogenHPSendoutRating property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CogenHPSendoutRatingChanged;
        
        /// <summary>
        /// Gets fired before the CogenLPSendoutRating property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CogenLPSendoutRatingChanging;
        
        /// <summary>
        /// Gets fired when the CogenLPSendoutRating property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CogenLPSendoutRatingChanged;
        
        /// <summary>
        /// Gets fired before the RatedP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedPChanging;
        
        /// <summary>
        /// Gets fired when the RatedP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedPChanged;
        
        /// <summary>
        /// Gets fired before the SteamSendoutSchedule property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SteamSendoutScheduleChanging;
        
        /// <summary>
        /// Gets fired when the SteamSendoutSchedule property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SteamSendoutScheduleChanged;
        
        private static ITypedElement RetrieveCogenLPSteamRatingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CogenerationPlant.ClassInstance)).Resolve("cogenLPSteamRating")));
        }
        
        /// <summary>
        /// Raises the CogenLPSteamRatingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCogenLPSteamRatingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CogenLPSteamRatingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CogenLPSteamRatingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCogenLPSteamRatingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CogenLPSteamRatingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCogenHPSteamRatingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CogenerationPlant.ClassInstance)).Resolve("cogenHPSteamRating")));
        }
        
        /// <summary>
        /// Raises the CogenHPSteamRatingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCogenHPSteamRatingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CogenHPSteamRatingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CogenHPSteamRatingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCogenHPSteamRatingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CogenHPSteamRatingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCogenHPSendoutRatingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CogenerationPlant.ClassInstance)).Resolve("cogenHPSendoutRating")));
        }
        
        /// <summary>
        /// Raises the CogenHPSendoutRatingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCogenHPSendoutRatingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CogenHPSendoutRatingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CogenHPSendoutRatingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCogenHPSendoutRatingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CogenHPSendoutRatingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCogenLPSendoutRatingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CogenerationPlant.ClassInstance)).Resolve("cogenLPSendoutRating")));
        }
        
        /// <summary>
        /// Raises the CogenLPSendoutRatingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCogenLPSendoutRatingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CogenLPSendoutRatingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CogenLPSendoutRatingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCogenLPSendoutRatingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CogenLPSendoutRatingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRatedPAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CogenerationPlant.ClassInstance)).Resolve("ratedP")));
        }
        
        /// <summary>
        /// Raises the RatedPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSteamSendoutScheduleReference()
        {
            return ((ITypedElement)(((ModelElement)(CogenerationPlant.ClassInstance)).Resolve("SteamSendoutSchedule")));
        }
        
        /// <summary>
        /// Raises the SteamSendoutScheduleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSteamSendoutScheduleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SteamSendoutScheduleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SteamSendoutScheduleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSteamSendoutScheduleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SteamSendoutScheduleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SteamSendoutSchedule property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSteamSendoutSchedule(object sender, System.EventArgs eventArgs)
        {
            this.SteamSendoutSchedule = null;
        }
        
        private static ITypedElement RetrieveThermalGeneratingUnitsReference()
        {
            return ((ITypedElement)(((ModelElement)(CogenerationPlant.ClassInstance)).Resolve("ThermalGeneratingUnits")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ThermalGeneratingUnits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ThermalGeneratingUnitsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ThermalGeneratingUnits", e, _thermalGeneratingUnitsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ThermalGeneratingUnits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ThermalGeneratingUnitsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ThermalGeneratingUnits", e, _thermalGeneratingUnitsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "COGENLPSTEAMRATING"))
            {
                return this.CogenLPSteamRating;
            }
            if ((attribute == "COGENHPSTEAMRATING"))
            {
                return this.CogenHPSteamRating;
            }
            if ((attribute == "COGENHPSENDOUTRATING"))
            {
                return this.CogenHPSendoutRating;
            }
            if ((attribute == "COGENLPSENDOUTRATING"))
            {
                return this.CogenLPSendoutRating;
            }
            if ((attribute == "RATEDP"))
            {
                return this.RatedP;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "THERMALGENERATINGUNITS"))
            {
                return this._thermalGeneratingUnits;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STEAMSENDOUTSCHEDULE"))
            {
                this.SteamSendoutSchedule = ((ISteamSendoutSchedule)(value));
                return;
            }
            if ((feature == "COGENLPSTEAMRATING"))
            {
                this.CogenLPSteamRating = ((float)(value));
                return;
            }
            if ((feature == "COGENHPSTEAMRATING"))
            {
                this.CogenHPSteamRating = ((float)(value));
                return;
            }
            if ((feature == "COGENHPSENDOUTRATING"))
            {
                this.CogenHPSendoutRating = ((float)(value));
                return;
            }
            if ((feature == "COGENLPSENDOUTRATING"))
            {
                this.CogenLPSendoutRating = ((float)(value));
                return;
            }
            if ((feature == "RATEDP"))
            {
                this.RatedP = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SteamSendoutSchedule"))
            {
                return new SteamSendoutScheduleProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SteamSendoutSchedule"))
            {
                return new SteamSendoutScheduleProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/Cogener" +
                        "ationPlant")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CogenerationPlant class
        /// </summary>
        public class CogenerationPlantReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CogenerationPlant _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CogenerationPlantReferencedElementsCollection(CogenerationPlant parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.SteamSendoutSchedule != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ThermalGeneratingUnits.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SteamSendoutScheduleChanged += this.PropagateValueChanges;
                this._parent.ThermalGeneratingUnits.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SteamSendoutScheduleChanged -= this.PropagateValueChanges;
                this._parent.ThermalGeneratingUnits.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.SteamSendoutSchedule == null))
                {
                    ISteamSendoutSchedule steamSendoutScheduleCasted = item.As<ISteamSendoutSchedule>();
                    if ((steamSendoutScheduleCasted != null))
                    {
                        this._parent.SteamSendoutSchedule = steamSendoutScheduleCasted;
                        return;
                    }
                }
                IThermalGeneratingUnit thermalGeneratingUnitsCasted = item.As<IThermalGeneratingUnit>();
                if ((thermalGeneratingUnitsCasted != null))
                {
                    this._parent.ThermalGeneratingUnits.Add(thermalGeneratingUnitsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SteamSendoutSchedule = null;
                this._parent.ThermalGeneratingUnits.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.SteamSendoutSchedule))
                {
                    return true;
                }
                if (this._parent.ThermalGeneratingUnits.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.SteamSendoutSchedule != null))
                {
                    array[arrayIndex] = this._parent.SteamSendoutSchedule;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> thermalGeneratingUnitsEnumerator = this._parent.ThermalGeneratingUnits.GetEnumerator();
                try
                {
                    for (
                    ; thermalGeneratingUnitsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = thermalGeneratingUnitsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    thermalGeneratingUnitsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.SteamSendoutSchedule == item))
                {
                    this._parent.SteamSendoutSchedule = null;
                    return true;
                }
                IThermalGeneratingUnit thermalGeneratingUnitItem = item.As<IThermalGeneratingUnit>();
                if (((thermalGeneratingUnitItem != null) 
                            && this._parent.ThermalGeneratingUnits.Remove(thermalGeneratingUnitItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SteamSendoutSchedule).Concat(this._parent.ThermalGeneratingUnits).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the cogenLPSteamRating property
        /// </summary>
        private sealed class CogenLPSteamRatingProxy : ModelPropertyChange<ICogenerationPlant, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CogenLPSteamRatingProxy(ICogenerationPlant modelElement) : 
                    base(modelElement, "cogenLPSteamRating")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CogenLPSteamRating;
                }
                set
                {
                    this.ModelElement.CogenLPSteamRating = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the cogenHPSteamRating property
        /// </summary>
        private sealed class CogenHPSteamRatingProxy : ModelPropertyChange<ICogenerationPlant, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CogenHPSteamRatingProxy(ICogenerationPlant modelElement) : 
                    base(modelElement, "cogenHPSteamRating")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CogenHPSteamRating;
                }
                set
                {
                    this.ModelElement.CogenHPSteamRating = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the cogenHPSendoutRating property
        /// </summary>
        private sealed class CogenHPSendoutRatingProxy : ModelPropertyChange<ICogenerationPlant, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CogenHPSendoutRatingProxy(ICogenerationPlant modelElement) : 
                    base(modelElement, "cogenHPSendoutRating")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CogenHPSendoutRating;
                }
                set
                {
                    this.ModelElement.CogenHPSendoutRating = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the cogenLPSendoutRating property
        /// </summary>
        private sealed class CogenLPSendoutRatingProxy : ModelPropertyChange<ICogenerationPlant, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CogenLPSendoutRatingProxy(ICogenerationPlant modelElement) : 
                    base(modelElement, "cogenLPSendoutRating")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CogenLPSendoutRating;
                }
                set
                {
                    this.ModelElement.CogenLPSendoutRating = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ratedP property
        /// </summary>
        private sealed class RatedPProxy : ModelPropertyChange<ICogenerationPlant, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatedPProxy(ICogenerationPlant modelElement) : 
                    base(modelElement, "ratedP")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RatedP;
                }
                set
                {
                    this.ModelElement.RatedP = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SteamSendoutSchedule property
        /// </summary>
        private sealed class SteamSendoutScheduleProxy : ModelPropertyChange<ICogenerationPlant, ISteamSendoutSchedule>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SteamSendoutScheduleProxy(ICogenerationPlant modelElement) : 
                    base(modelElement, "SteamSendoutSchedule")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISteamSendoutSchedule Value
            {
                get
                {
                    return this.ModelElement.SteamSendoutSchedule;
                }
                set
                {
                    this.ModelElement.SteamSendoutSchedule = value;
                }
            }
        }
    }
}

