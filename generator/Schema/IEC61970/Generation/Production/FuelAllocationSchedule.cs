//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.Production
{
    
    
    /// <summary>
    /// The default implementation of the FuelAllocationSchedule class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Production")]
    [XmlNamespacePrefixAttribute("cimProduction")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/FuelAll" +
        "ocationSchedule")]
    [DebuggerDisplayAttribute("FuelAllocationSchedule {UUID}")]
    public partial class FuelAllocationSchedule : Curve, IFuelAllocationSchedule, IModelElement
    {
        
        /// <summary>
        /// The backing field for the FuelType property
        /// </summary>
        private Nullable<FuelType> _fuelType;
        
        private static Lazy<ITypedElement> _fuelTypeAttribute = new Lazy<ITypedElement>(RetrieveFuelTypeAttribute);
        
        /// <summary>
        /// The backing field for the MaxFuelAllocation property
        /// </summary>
        private float _maxFuelAllocation;
        
        private static Lazy<ITypedElement> _maxFuelAllocationAttribute = new Lazy<ITypedElement>(RetrieveMaxFuelAllocationAttribute);
        
        /// <summary>
        /// The backing field for the FuelAllocationStartDate property
        /// </summary>
        private DateTime _fuelAllocationStartDate;
        
        private static Lazy<ITypedElement> _fuelAllocationStartDateAttribute = new Lazy<ITypedElement>(RetrieveFuelAllocationStartDateAttribute);
        
        /// <summary>
        /// The backing field for the MinFuelAllocation property
        /// </summary>
        private float _minFuelAllocation;
        
        private static Lazy<ITypedElement> _minFuelAllocationAttribute = new Lazy<ITypedElement>(RetrieveMinFuelAllocationAttribute);
        
        /// <summary>
        /// The backing field for the FuelAllocationEndDate property
        /// </summary>
        private DateTime _fuelAllocationEndDate;
        
        private static Lazy<ITypedElement> _fuelAllocationEndDateAttribute = new Lazy<ITypedElement>(RetrieveFuelAllocationEndDateAttribute);
        
        private static Lazy<ITypedElement> _fossilFuelReference = new Lazy<ITypedElement>(RetrieveFossilFuelReference);
        
        /// <summary>
        /// The backing field for the FossilFuel property
        /// </summary>
        private IFossilFuel _fossilFuel;
        
        private static Lazy<ITypedElement> _thermalGeneratingUnitReference = new Lazy<ITypedElement>(RetrieveThermalGeneratingUnitReference);
        
        /// <summary>
        /// The backing field for the ThermalGeneratingUnit property
        /// </summary>
        private IThermalGeneratingUnit _thermalGeneratingUnit;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The fuelType property
        /// </summary>
        [XmlElementNameAttribute("fuelType")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<FuelType> FuelType
        {
            get
            {
                return this._fuelType;
            }
            set
            {
                if ((this._fuelType != value))
                {
                    Nullable<FuelType> old = this._fuelType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFuelTypeChanging(e);
                    this.OnPropertyChanging("FuelType", e, _fuelTypeAttribute);
                    this._fuelType = value;
                    this.OnFuelTypeChanged(e);
                    this.OnPropertyChanged("FuelType", e, _fuelTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The maxFuelAllocation property
        /// </summary>
        [XmlElementNameAttribute("maxFuelAllocation")]
        [XmlAttributeAttribute(true)]
        public virtual float MaxFuelAllocation
        {
            get
            {
                return this._maxFuelAllocation;
            }
            set
            {
                if ((this._maxFuelAllocation != value))
                {
                    float old = this._maxFuelAllocation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxFuelAllocationChanging(e);
                    this.OnPropertyChanging("MaxFuelAllocation", e, _maxFuelAllocationAttribute);
                    this._maxFuelAllocation = value;
                    this.OnMaxFuelAllocationChanged(e);
                    this.OnPropertyChanged("MaxFuelAllocation", e, _maxFuelAllocationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The fuelAllocationStartDate property
        /// </summary>
        [XmlElementNameAttribute("fuelAllocationStartDate")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime FuelAllocationStartDate
        {
            get
            {
                return this._fuelAllocationStartDate;
            }
            set
            {
                if ((this._fuelAllocationStartDate != value))
                {
                    DateTime old = this._fuelAllocationStartDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFuelAllocationStartDateChanging(e);
                    this.OnPropertyChanging("FuelAllocationStartDate", e, _fuelAllocationStartDateAttribute);
                    this._fuelAllocationStartDate = value;
                    this.OnFuelAllocationStartDateChanged(e);
                    this.OnPropertyChanged("FuelAllocationStartDate", e, _fuelAllocationStartDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The minFuelAllocation property
        /// </summary>
        [XmlElementNameAttribute("minFuelAllocation")]
        [XmlAttributeAttribute(true)]
        public virtual float MinFuelAllocation
        {
            get
            {
                return this._minFuelAllocation;
            }
            set
            {
                if ((this._minFuelAllocation != value))
                {
                    float old = this._minFuelAllocation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinFuelAllocationChanging(e);
                    this.OnPropertyChanging("MinFuelAllocation", e, _minFuelAllocationAttribute);
                    this._minFuelAllocation = value;
                    this.OnMinFuelAllocationChanged(e);
                    this.OnPropertyChanged("MinFuelAllocation", e, _minFuelAllocationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The fuelAllocationEndDate property
        /// </summary>
        [XmlElementNameAttribute("fuelAllocationEndDate")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime FuelAllocationEndDate
        {
            get
            {
                return this._fuelAllocationEndDate;
            }
            set
            {
                if ((this._fuelAllocationEndDate != value))
                {
                    DateTime old = this._fuelAllocationEndDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFuelAllocationEndDateChanging(e);
                    this.OnPropertyChanging("FuelAllocationEndDate", e, _fuelAllocationEndDateAttribute);
                    this._fuelAllocationEndDate = value;
                    this.OnFuelAllocationEndDateChanged(e);
                    this.OnPropertyChanged("FuelAllocationEndDate", e, _fuelAllocationEndDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The FossilFuel property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("FuelAllocationSchedules")]
        public virtual IFossilFuel FossilFuel
        {
            get
            {
                return this._fossilFuel;
            }
            set
            {
                if ((this._fossilFuel != value))
                {
                    IFossilFuel old = this._fossilFuel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFossilFuelChanging(e);
                    this.OnPropertyChanging("FossilFuel", e, _fossilFuelReference);
                    this._fossilFuel = value;
                    if ((old != null))
                    {
                        old.FuelAllocationSchedules.Remove(this);
                        old.Deleted -= this.OnResetFossilFuel;
                    }
                    if ((value != null))
                    {
                        value.FuelAllocationSchedules.Add(this);
                        value.Deleted += this.OnResetFossilFuel;
                    }
                    this.OnFossilFuelChanged(e);
                    this.OnPropertyChanged("FossilFuel", e, _fossilFuelReference);
                }
            }
        }
        
        /// <summary>
        /// The ThermalGeneratingUnit property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("FuelAllocationSchedules")]
        public virtual IThermalGeneratingUnit ThermalGeneratingUnit
        {
            get
            {
                return this._thermalGeneratingUnit;
            }
            set
            {
                if ((this._thermalGeneratingUnit != value))
                {
                    IThermalGeneratingUnit old = this._thermalGeneratingUnit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThermalGeneratingUnitChanging(e);
                    this.OnPropertyChanging("ThermalGeneratingUnit", e, _thermalGeneratingUnitReference);
                    this._thermalGeneratingUnit = value;
                    if ((old != null))
                    {
                        old.FuelAllocationSchedules.Remove(this);
                        old.Deleted -= this.OnResetThermalGeneratingUnit;
                    }
                    if ((value != null))
                    {
                        value.FuelAllocationSchedules.Add(this);
                        value.Deleted += this.OnResetThermalGeneratingUnit;
                    }
                    this.OnThermalGeneratingUnitChanged(e);
                    this.OnPropertyChanged("ThermalGeneratingUnit", e, _thermalGeneratingUnitReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new FuelAllocationScheduleReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/FuelAll" +
                            "ocationSchedule")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the FuelType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FuelTypeChanging;
        
        /// <summary>
        /// Gets fired when the FuelType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FuelTypeChanged;
        
        /// <summary>
        /// Gets fired before the MaxFuelAllocation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxFuelAllocationChanging;
        
        /// <summary>
        /// Gets fired when the MaxFuelAllocation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxFuelAllocationChanged;
        
        /// <summary>
        /// Gets fired before the FuelAllocationStartDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FuelAllocationStartDateChanging;
        
        /// <summary>
        /// Gets fired when the FuelAllocationStartDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FuelAllocationStartDateChanged;
        
        /// <summary>
        /// Gets fired before the MinFuelAllocation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinFuelAllocationChanging;
        
        /// <summary>
        /// Gets fired when the MinFuelAllocation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinFuelAllocationChanged;
        
        /// <summary>
        /// Gets fired before the FuelAllocationEndDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FuelAllocationEndDateChanging;
        
        /// <summary>
        /// Gets fired when the FuelAllocationEndDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FuelAllocationEndDateChanged;
        
        /// <summary>
        /// Gets fired before the FossilFuel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FossilFuelChanging;
        
        /// <summary>
        /// Gets fired when the FossilFuel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FossilFuelChanged;
        
        /// <summary>
        /// Gets fired before the ThermalGeneratingUnit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThermalGeneratingUnitChanging;
        
        /// <summary>
        /// Gets fired when the ThermalGeneratingUnit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThermalGeneratingUnitChanged;
        
        private static ITypedElement RetrieveFuelTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FuelAllocationSchedule.ClassInstance)).Resolve("fuelType")));
        }
        
        /// <summary>
        /// Raises the FuelTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFuelTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FuelTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FuelTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFuelTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FuelTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaxFuelAllocationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FuelAllocationSchedule.ClassInstance)).Resolve("maxFuelAllocation")));
        }
        
        /// <summary>
        /// Raises the MaxFuelAllocationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxFuelAllocationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxFuelAllocationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxFuelAllocationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxFuelAllocationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxFuelAllocationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFuelAllocationStartDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FuelAllocationSchedule.ClassInstance)).Resolve("fuelAllocationStartDate")));
        }
        
        /// <summary>
        /// Raises the FuelAllocationStartDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFuelAllocationStartDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FuelAllocationStartDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FuelAllocationStartDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFuelAllocationStartDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FuelAllocationStartDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMinFuelAllocationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FuelAllocationSchedule.ClassInstance)).Resolve("minFuelAllocation")));
        }
        
        /// <summary>
        /// Raises the MinFuelAllocationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinFuelAllocationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinFuelAllocationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinFuelAllocationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinFuelAllocationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinFuelAllocationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFuelAllocationEndDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FuelAllocationSchedule.ClassInstance)).Resolve("fuelAllocationEndDate")));
        }
        
        /// <summary>
        /// Raises the FuelAllocationEndDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFuelAllocationEndDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FuelAllocationEndDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FuelAllocationEndDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFuelAllocationEndDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FuelAllocationEndDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFossilFuelReference()
        {
            return ((ITypedElement)(((ModelElement)(FuelAllocationSchedule.ClassInstance)).Resolve("FossilFuel")));
        }
        
        /// <summary>
        /// Raises the FossilFuelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFossilFuelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FossilFuelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FossilFuelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFossilFuelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FossilFuelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FossilFuel property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFossilFuel(object sender, System.EventArgs eventArgs)
        {
            this.FossilFuel = null;
        }
        
        private static ITypedElement RetrieveThermalGeneratingUnitReference()
        {
            return ((ITypedElement)(((ModelElement)(FuelAllocationSchedule.ClassInstance)).Resolve("ThermalGeneratingUnit")));
        }
        
        /// <summary>
        /// Raises the ThermalGeneratingUnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThermalGeneratingUnitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThermalGeneratingUnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThermalGeneratingUnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThermalGeneratingUnitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThermalGeneratingUnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThermalGeneratingUnit property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThermalGeneratingUnit(object sender, System.EventArgs eventArgs)
        {
            this.ThermalGeneratingUnit = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "FUELTYPE"))
            {
                return this.FuelType;
            }
            if ((attribute == "MAXFUELALLOCATION"))
            {
                return this.MaxFuelAllocation;
            }
            if ((attribute == "FUELALLOCATIONSTARTDATE"))
            {
                return this.FuelAllocationStartDate;
            }
            if ((attribute == "MINFUELALLOCATION"))
            {
                return this.MinFuelAllocation;
            }
            if ((attribute == "FUELALLOCATIONENDDATE"))
            {
                return this.FuelAllocationEndDate;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FOSSILFUEL"))
            {
                this.FossilFuel = ((IFossilFuel)(value));
                return;
            }
            if ((feature == "THERMALGENERATINGUNIT"))
            {
                this.ThermalGeneratingUnit = ((IThermalGeneratingUnit)(value));
                return;
            }
            if ((feature == "FUELTYPE"))
            {
                this.FuelType = ((FuelType)(value));
                return;
            }
            if ((feature == "MAXFUELALLOCATION"))
            {
                this.MaxFuelAllocation = ((float)(value));
                return;
            }
            if ((feature == "FUELALLOCATIONSTARTDATE"))
            {
                this.FuelAllocationStartDate = ((DateTime)(value));
                return;
            }
            if ((feature == "MINFUELALLOCATION"))
            {
                this.MinFuelAllocation = ((float)(value));
                return;
            }
            if ((feature == "FUELALLOCATIONENDDATE"))
            {
                this.FuelAllocationEndDate = ((DateTime)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "FossilFuel"))
            {
                return new FossilFuelProxy(this);
            }
            if ((attribute == "ThermalGeneratingUnit"))
            {
                return new ThermalGeneratingUnitProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "FossilFuel"))
            {
                return new FossilFuelProxy(this);
            }
            if ((reference == "ThermalGeneratingUnit"))
            {
                return new ThermalGeneratingUnitProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/FuelAll" +
                        "ocationSchedule")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the FuelAllocationSchedule class
        /// </summary>
        public class FuelAllocationScheduleReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private FuelAllocationSchedule _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FuelAllocationScheduleReferencedElementsCollection(FuelAllocationSchedule parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.FossilFuel != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThermalGeneratingUnit != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.FossilFuelChanged += this.PropagateValueChanges;
                this._parent.ThermalGeneratingUnitChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.FossilFuelChanged -= this.PropagateValueChanges;
                this._parent.ThermalGeneratingUnitChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.FossilFuel == null))
                {
                    IFossilFuel fossilFuelCasted = item.As<IFossilFuel>();
                    if ((fossilFuelCasted != null))
                    {
                        this._parent.FossilFuel = fossilFuelCasted;
                        return;
                    }
                }
                if ((this._parent.ThermalGeneratingUnit == null))
                {
                    IThermalGeneratingUnit thermalGeneratingUnitCasted = item.As<IThermalGeneratingUnit>();
                    if ((thermalGeneratingUnitCasted != null))
                    {
                        this._parent.ThermalGeneratingUnit = thermalGeneratingUnitCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.FossilFuel = null;
                this._parent.ThermalGeneratingUnit = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.FossilFuel))
                {
                    return true;
                }
                if ((item == this._parent.ThermalGeneratingUnit))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.FossilFuel != null))
                {
                    array[arrayIndex] = this._parent.FossilFuel;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThermalGeneratingUnit != null))
                {
                    array[arrayIndex] = this._parent.ThermalGeneratingUnit;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.FossilFuel == item))
                {
                    this._parent.FossilFuel = null;
                    return true;
                }
                if ((this._parent.ThermalGeneratingUnit == item))
                {
                    this._parent.ThermalGeneratingUnit = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.FossilFuel).Concat(this._parent.ThermalGeneratingUnit).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fuelType property
        /// </summary>
        private sealed class FuelTypeProxy : ModelPropertyChange<IFuelAllocationSchedule, Nullable<FuelType>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FuelTypeProxy(IFuelAllocationSchedule modelElement) : 
                    base(modelElement, "fuelType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<FuelType> Value
            {
                get
                {
                    return this.ModelElement.FuelType;
                }
                set
                {
                    this.ModelElement.FuelType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maxFuelAllocation property
        /// </summary>
        private sealed class MaxFuelAllocationProxy : ModelPropertyChange<IFuelAllocationSchedule, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxFuelAllocationProxy(IFuelAllocationSchedule modelElement) : 
                    base(modelElement, "maxFuelAllocation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MaxFuelAllocation;
                }
                set
                {
                    this.ModelElement.MaxFuelAllocation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fuelAllocationStartDate property
        /// </summary>
        private sealed class FuelAllocationStartDateProxy : ModelPropertyChange<IFuelAllocationSchedule, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FuelAllocationStartDateProxy(IFuelAllocationSchedule modelElement) : 
                    base(modelElement, "fuelAllocationStartDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.FuelAllocationStartDate;
                }
                set
                {
                    this.ModelElement.FuelAllocationStartDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minFuelAllocation property
        /// </summary>
        private sealed class MinFuelAllocationProxy : ModelPropertyChange<IFuelAllocationSchedule, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinFuelAllocationProxy(IFuelAllocationSchedule modelElement) : 
                    base(modelElement, "minFuelAllocation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinFuelAllocation;
                }
                set
                {
                    this.ModelElement.MinFuelAllocation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fuelAllocationEndDate property
        /// </summary>
        private sealed class FuelAllocationEndDateProxy : ModelPropertyChange<IFuelAllocationSchedule, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FuelAllocationEndDateProxy(IFuelAllocationSchedule modelElement) : 
                    base(modelElement, "fuelAllocationEndDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.FuelAllocationEndDate;
                }
                set
                {
                    this.ModelElement.FuelAllocationEndDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FossilFuel property
        /// </summary>
        private sealed class FossilFuelProxy : ModelPropertyChange<IFuelAllocationSchedule, IFossilFuel>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FossilFuelProxy(IFuelAllocationSchedule modelElement) : 
                    base(modelElement, "FossilFuel")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFossilFuel Value
            {
                get
                {
                    return this.ModelElement.FossilFuel;
                }
                set
                {
                    this.ModelElement.FossilFuel = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThermalGeneratingUnit property
        /// </summary>
        private sealed class ThermalGeneratingUnitProxy : ModelPropertyChange<IFuelAllocationSchedule, IThermalGeneratingUnit>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThermalGeneratingUnitProxy(IFuelAllocationSchedule modelElement) : 
                    base(modelElement, "ThermalGeneratingUnit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IThermalGeneratingUnit Value
            {
                get
                {
                    return this.ModelElement.ThermalGeneratingUnit;
                }
                set
                {
                    this.ModelElement.ThermalGeneratingUnit = value;
                }
            }
        }
    }
}

