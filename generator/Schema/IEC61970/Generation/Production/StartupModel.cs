//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.Production
{
    
    
    /// <summary>
    /// The default implementation of the StartupModel class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Production")]
    [XmlNamespacePrefixAttribute("cimProduction")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/Startup" +
        "Model")]
    [DebuggerDisplayAttribute("StartupModel {UUID}")]
    public partial class StartupModel : IdentifiedObject, IStartupModel, IModelElement
    {
        
        /// <summary>
        /// The backing field for the FixedMaintCost property
        /// </summary>
        private float _fixedMaintCost;
        
        private static Lazy<ITypedElement> _fixedMaintCostAttribute = new Lazy<ITypedElement>(RetrieveFixedMaintCostAttribute);
        
        /// <summary>
        /// The backing field for the RiskFactorCost property
        /// </summary>
        private float _riskFactorCost;
        
        private static Lazy<ITypedElement> _riskFactorCostAttribute = new Lazy<ITypedElement>(RetrieveRiskFactorCostAttribute);
        
        /// <summary>
        /// The backing field for the StbyAuxP property
        /// </summary>
        private float _stbyAuxP;
        
        private static Lazy<ITypedElement> _stbyAuxPAttribute = new Lazy<ITypedElement>(RetrieveStbyAuxPAttribute);
        
        /// <summary>
        /// The backing field for the StartupDate property
        /// </summary>
        private DateTime _startupDate;
        
        private static Lazy<ITypedElement> _startupDateAttribute = new Lazy<ITypedElement>(RetrieveStartupDateAttribute);
        
        /// <summary>
        /// The backing field for the MinimumDownTime property
        /// </summary>
        private float _minimumDownTime;
        
        private static Lazy<ITypedElement> _minimumDownTimeAttribute = new Lazy<ITypedElement>(RetrieveMinimumDownTimeAttribute);
        
        /// <summary>
        /// The backing field for the MinimumRunTime property
        /// </summary>
        private float _minimumRunTime;
        
        private static Lazy<ITypedElement> _minimumRunTimeAttribute = new Lazy<ITypedElement>(RetrieveMinimumRunTimeAttribute);
        
        /// <summary>
        /// The backing field for the StartupPriority property
        /// </summary>
        private int _startupPriority;
        
        private static Lazy<ITypedElement> _startupPriorityAttribute = new Lazy<ITypedElement>(RetrieveStartupPriorityAttribute);
        
        /// <summary>
        /// The backing field for the StartupCost property
        /// </summary>
        private float _startupCost;
        
        private static Lazy<ITypedElement> _startupCostAttribute = new Lazy<ITypedElement>(RetrieveStartupCostAttribute);
        
        /// <summary>
        /// The backing field for the HotStandbyHeat property
        /// </summary>
        private float _hotStandbyHeat;
        
        private static Lazy<ITypedElement> _hotStandbyHeatAttribute = new Lazy<ITypedElement>(RetrieveHotStandbyHeatAttribute);
        
        /// <summary>
        /// The backing field for the IncrementalMaintCost property
        /// </summary>
        private float _incrementalMaintCost;
        
        private static Lazy<ITypedElement> _incrementalMaintCostAttribute = new Lazy<ITypedElement>(RetrieveIncrementalMaintCostAttribute);
        
        private static Lazy<ITypedElement> _startIgnFuelCurveReference = new Lazy<ITypedElement>(RetrieveStartIgnFuelCurveReference);
        
        /// <summary>
        /// The backing field for the StartIgnFuelCurve property
        /// </summary>
        private IStartIgnFuelCurve _startIgnFuelCurve;
        
        private static Lazy<ITypedElement> _startRampCurveReference = new Lazy<ITypedElement>(RetrieveStartRampCurveReference);
        
        /// <summary>
        /// The backing field for the StartRampCurve property
        /// </summary>
        private IStartRampCurve _startRampCurve;
        
        private static Lazy<ITypedElement> _startMainFuelCurveReference = new Lazy<ITypedElement>(RetrieveStartMainFuelCurveReference);
        
        /// <summary>
        /// The backing field for the StartMainFuelCurve property
        /// </summary>
        private IStartMainFuelCurve _startMainFuelCurve;
        
        private static Lazy<ITypedElement> _thermalGeneratingUnitReference = new Lazy<ITypedElement>(RetrieveThermalGeneratingUnitReference);
        
        /// <summary>
        /// The backing field for the ThermalGeneratingUnit property
        /// </summary>
        private IThermalGeneratingUnit _thermalGeneratingUnit;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The fixedMaintCost property
        /// </summary>
        [XmlElementNameAttribute("fixedMaintCost")]
        [XmlAttributeAttribute(true)]
        public virtual float FixedMaintCost
        {
            get
            {
                return this._fixedMaintCost;
            }
            set
            {
                if ((this._fixedMaintCost != value))
                {
                    float old = this._fixedMaintCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFixedMaintCostChanging(e);
                    this.OnPropertyChanging("FixedMaintCost", e, _fixedMaintCostAttribute);
                    this._fixedMaintCost = value;
                    this.OnFixedMaintCostChanged(e);
                    this.OnPropertyChanged("FixedMaintCost", e, _fixedMaintCostAttribute);
                }
            }
        }
        
        /// <summary>
        /// The riskFactorCost property
        /// </summary>
        [XmlElementNameAttribute("riskFactorCost")]
        [XmlAttributeAttribute(true)]
        public virtual float RiskFactorCost
        {
            get
            {
                return this._riskFactorCost;
            }
            set
            {
                if ((this._riskFactorCost != value))
                {
                    float old = this._riskFactorCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRiskFactorCostChanging(e);
                    this.OnPropertyChanging("RiskFactorCost", e, _riskFactorCostAttribute);
                    this._riskFactorCost = value;
                    this.OnRiskFactorCostChanged(e);
                    this.OnPropertyChanged("RiskFactorCost", e, _riskFactorCostAttribute);
                }
            }
        }
        
        /// <summary>
        /// The stbyAuxP property
        /// </summary>
        [XmlElementNameAttribute("stbyAuxP")]
        [XmlAttributeAttribute(true)]
        public virtual float StbyAuxP
        {
            get
            {
                return this._stbyAuxP;
            }
            set
            {
                if ((this._stbyAuxP != value))
                {
                    float old = this._stbyAuxP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStbyAuxPChanging(e);
                    this.OnPropertyChanging("StbyAuxP", e, _stbyAuxPAttribute);
                    this._stbyAuxP = value;
                    this.OnStbyAuxPChanged(e);
                    this.OnPropertyChanged("StbyAuxP", e, _stbyAuxPAttribute);
                }
            }
        }
        
        /// <summary>
        /// The startupDate property
        /// </summary>
        [XmlElementNameAttribute("startupDate")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime StartupDate
        {
            get
            {
                return this._startupDate;
            }
            set
            {
                if ((this._startupDate != value))
                {
                    DateTime old = this._startupDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStartupDateChanging(e);
                    this.OnPropertyChanging("StartupDate", e, _startupDateAttribute);
                    this._startupDate = value;
                    this.OnStartupDateChanged(e);
                    this.OnPropertyChanged("StartupDate", e, _startupDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The minimumDownTime property
        /// </summary>
        [XmlElementNameAttribute("minimumDownTime")]
        [XmlAttributeAttribute(true)]
        public virtual float MinimumDownTime
        {
            get
            {
                return this._minimumDownTime;
            }
            set
            {
                if ((this._minimumDownTime != value))
                {
                    float old = this._minimumDownTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinimumDownTimeChanging(e);
                    this.OnPropertyChanging("MinimumDownTime", e, _minimumDownTimeAttribute);
                    this._minimumDownTime = value;
                    this.OnMinimumDownTimeChanged(e);
                    this.OnPropertyChanged("MinimumDownTime", e, _minimumDownTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The minimumRunTime property
        /// </summary>
        [XmlElementNameAttribute("minimumRunTime")]
        [XmlAttributeAttribute(true)]
        public virtual float MinimumRunTime
        {
            get
            {
                return this._minimumRunTime;
            }
            set
            {
                if ((this._minimumRunTime != value))
                {
                    float old = this._minimumRunTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinimumRunTimeChanging(e);
                    this.OnPropertyChanging("MinimumRunTime", e, _minimumRunTimeAttribute);
                    this._minimumRunTime = value;
                    this.OnMinimumRunTimeChanged(e);
                    this.OnPropertyChanged("MinimumRunTime", e, _minimumRunTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The startupPriority property
        /// </summary>
        [XmlElementNameAttribute("startupPriority")]
        [XmlAttributeAttribute(true)]
        public virtual int StartupPriority
        {
            get
            {
                return this._startupPriority;
            }
            set
            {
                if ((this._startupPriority != value))
                {
                    int old = this._startupPriority;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStartupPriorityChanging(e);
                    this.OnPropertyChanging("StartupPriority", e, _startupPriorityAttribute);
                    this._startupPriority = value;
                    this.OnStartupPriorityChanged(e);
                    this.OnPropertyChanged("StartupPriority", e, _startupPriorityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The startupCost property
        /// </summary>
        [XmlElementNameAttribute("startupCost")]
        [XmlAttributeAttribute(true)]
        public virtual float StartupCost
        {
            get
            {
                return this._startupCost;
            }
            set
            {
                if ((this._startupCost != value))
                {
                    float old = this._startupCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStartupCostChanging(e);
                    this.OnPropertyChanging("StartupCost", e, _startupCostAttribute);
                    this._startupCost = value;
                    this.OnStartupCostChanged(e);
                    this.OnPropertyChanged("StartupCost", e, _startupCostAttribute);
                }
            }
        }
        
        /// <summary>
        /// The hotStandbyHeat property
        /// </summary>
        [XmlElementNameAttribute("hotStandbyHeat")]
        [XmlAttributeAttribute(true)]
        public virtual float HotStandbyHeat
        {
            get
            {
                return this._hotStandbyHeat;
            }
            set
            {
                if ((this._hotStandbyHeat != value))
                {
                    float old = this._hotStandbyHeat;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHotStandbyHeatChanging(e);
                    this.OnPropertyChanging("HotStandbyHeat", e, _hotStandbyHeatAttribute);
                    this._hotStandbyHeat = value;
                    this.OnHotStandbyHeatChanged(e);
                    this.OnPropertyChanged("HotStandbyHeat", e, _hotStandbyHeatAttribute);
                }
            }
        }
        
        /// <summary>
        /// The incrementalMaintCost property
        /// </summary>
        [XmlElementNameAttribute("incrementalMaintCost")]
        [XmlAttributeAttribute(true)]
        public virtual float IncrementalMaintCost
        {
            get
            {
                return this._incrementalMaintCost;
            }
            set
            {
                if ((this._incrementalMaintCost != value))
                {
                    float old = this._incrementalMaintCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIncrementalMaintCostChanging(e);
                    this.OnPropertyChanging("IncrementalMaintCost", e, _incrementalMaintCostAttribute);
                    this._incrementalMaintCost = value;
                    this.OnIncrementalMaintCostChanged(e);
                    this.OnPropertyChanged("IncrementalMaintCost", e, _incrementalMaintCostAttribute);
                }
            }
        }
        
        /// <summary>
        /// The StartIgnFuelCurve property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("StartupModel")]
        public virtual IStartIgnFuelCurve StartIgnFuelCurve
        {
            get
            {
                return this._startIgnFuelCurve;
            }
            set
            {
                if ((this._startIgnFuelCurve != value))
                {
                    IStartIgnFuelCurve old = this._startIgnFuelCurve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStartIgnFuelCurveChanging(e);
                    this.OnPropertyChanging("StartIgnFuelCurve", e, _startIgnFuelCurveReference);
                    this._startIgnFuelCurve = value;
                    if ((old != null))
                    {
                        old.StartupModel = null;
                        old.Deleted -= this.OnResetStartIgnFuelCurve;
                    }
                    if ((value != null))
                    {
                        value.StartupModel = this;
                        value.Deleted += this.OnResetStartIgnFuelCurve;
                    }
                    this.OnStartIgnFuelCurveChanged(e);
                    this.OnPropertyChanged("StartIgnFuelCurve", e, _startIgnFuelCurveReference);
                }
            }
        }
        
        /// <summary>
        /// The StartRampCurve property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("StartupModel")]
        public virtual IStartRampCurve StartRampCurve
        {
            get
            {
                return this._startRampCurve;
            }
            set
            {
                if ((this._startRampCurve != value))
                {
                    IStartRampCurve old = this._startRampCurve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStartRampCurveChanging(e);
                    this.OnPropertyChanging("StartRampCurve", e, _startRampCurveReference);
                    this._startRampCurve = value;
                    if ((old != null))
                    {
                        old.StartupModel = null;
                        old.Deleted -= this.OnResetStartRampCurve;
                    }
                    if ((value != null))
                    {
                        value.StartupModel = this;
                        value.Deleted += this.OnResetStartRampCurve;
                    }
                    this.OnStartRampCurveChanged(e);
                    this.OnPropertyChanged("StartRampCurve", e, _startRampCurveReference);
                }
            }
        }
        
        /// <summary>
        /// The StartMainFuelCurve property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("StartupModel")]
        public virtual IStartMainFuelCurve StartMainFuelCurve
        {
            get
            {
                return this._startMainFuelCurve;
            }
            set
            {
                if ((this._startMainFuelCurve != value))
                {
                    IStartMainFuelCurve old = this._startMainFuelCurve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStartMainFuelCurveChanging(e);
                    this.OnPropertyChanging("StartMainFuelCurve", e, _startMainFuelCurveReference);
                    this._startMainFuelCurve = value;
                    if ((old != null))
                    {
                        old.StartupModel = null;
                        old.Deleted -= this.OnResetStartMainFuelCurve;
                    }
                    if ((value != null))
                    {
                        value.StartupModel = this;
                        value.Deleted += this.OnResetStartMainFuelCurve;
                    }
                    this.OnStartMainFuelCurveChanged(e);
                    this.OnPropertyChanged("StartMainFuelCurve", e, _startMainFuelCurveReference);
                }
            }
        }
        
        /// <summary>
        /// The ThermalGeneratingUnit property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("StartupModel")]
        public virtual IThermalGeneratingUnit ThermalGeneratingUnit
        {
            get
            {
                return this._thermalGeneratingUnit;
            }
            set
            {
                if ((this._thermalGeneratingUnit != value))
                {
                    IThermalGeneratingUnit old = this._thermalGeneratingUnit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThermalGeneratingUnitChanging(e);
                    this.OnPropertyChanging("ThermalGeneratingUnit", e, _thermalGeneratingUnitReference);
                    this._thermalGeneratingUnit = value;
                    if ((old != null))
                    {
                        old.StartupModel = null;
                        old.Deleted -= this.OnResetThermalGeneratingUnit;
                    }
                    if ((value != null))
                    {
                        value.StartupModel = this;
                        value.Deleted += this.OnResetThermalGeneratingUnit;
                    }
                    this.OnThermalGeneratingUnitChanged(e);
                    this.OnPropertyChanged("ThermalGeneratingUnit", e, _thermalGeneratingUnitReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new StartupModelReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/Startup" +
                            "Model")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the FixedMaintCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FixedMaintCostChanging;
        
        /// <summary>
        /// Gets fired when the FixedMaintCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FixedMaintCostChanged;
        
        /// <summary>
        /// Gets fired before the RiskFactorCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RiskFactorCostChanging;
        
        /// <summary>
        /// Gets fired when the RiskFactorCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RiskFactorCostChanged;
        
        /// <summary>
        /// Gets fired before the StbyAuxP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StbyAuxPChanging;
        
        /// <summary>
        /// Gets fired when the StbyAuxP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StbyAuxPChanged;
        
        /// <summary>
        /// Gets fired before the StartupDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartupDateChanging;
        
        /// <summary>
        /// Gets fired when the StartupDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartupDateChanged;
        
        /// <summary>
        /// Gets fired before the MinimumDownTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinimumDownTimeChanging;
        
        /// <summary>
        /// Gets fired when the MinimumDownTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinimumDownTimeChanged;
        
        /// <summary>
        /// Gets fired before the MinimumRunTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinimumRunTimeChanging;
        
        /// <summary>
        /// Gets fired when the MinimumRunTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinimumRunTimeChanged;
        
        /// <summary>
        /// Gets fired before the StartupPriority property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartupPriorityChanging;
        
        /// <summary>
        /// Gets fired when the StartupPriority property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartupPriorityChanged;
        
        /// <summary>
        /// Gets fired before the StartupCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartupCostChanging;
        
        /// <summary>
        /// Gets fired when the StartupCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartupCostChanged;
        
        /// <summary>
        /// Gets fired before the HotStandbyHeat property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HotStandbyHeatChanging;
        
        /// <summary>
        /// Gets fired when the HotStandbyHeat property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HotStandbyHeatChanged;
        
        /// <summary>
        /// Gets fired before the IncrementalMaintCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IncrementalMaintCostChanging;
        
        /// <summary>
        /// Gets fired when the IncrementalMaintCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IncrementalMaintCostChanged;
        
        /// <summary>
        /// Gets fired before the StartIgnFuelCurve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartIgnFuelCurveChanging;
        
        /// <summary>
        /// Gets fired when the StartIgnFuelCurve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartIgnFuelCurveChanged;
        
        /// <summary>
        /// Gets fired before the StartRampCurve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartRampCurveChanging;
        
        /// <summary>
        /// Gets fired when the StartRampCurve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartRampCurveChanged;
        
        /// <summary>
        /// Gets fired before the StartMainFuelCurve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartMainFuelCurveChanging;
        
        /// <summary>
        /// Gets fired when the StartMainFuelCurve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartMainFuelCurveChanged;
        
        /// <summary>
        /// Gets fired before the ThermalGeneratingUnit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThermalGeneratingUnitChanging;
        
        /// <summary>
        /// Gets fired when the ThermalGeneratingUnit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThermalGeneratingUnitChanged;
        
        private static ITypedElement RetrieveFixedMaintCostAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StartupModel.ClassInstance)).Resolve("fixedMaintCost")));
        }
        
        /// <summary>
        /// Raises the FixedMaintCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFixedMaintCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FixedMaintCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FixedMaintCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFixedMaintCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FixedMaintCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRiskFactorCostAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StartupModel.ClassInstance)).Resolve("riskFactorCost")));
        }
        
        /// <summary>
        /// Raises the RiskFactorCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRiskFactorCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RiskFactorCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RiskFactorCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRiskFactorCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RiskFactorCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStbyAuxPAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StartupModel.ClassInstance)).Resolve("stbyAuxP")));
        }
        
        /// <summary>
        /// Raises the StbyAuxPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStbyAuxPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StbyAuxPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StbyAuxPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStbyAuxPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StbyAuxPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStartupDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StartupModel.ClassInstance)).Resolve("startupDate")));
        }
        
        /// <summary>
        /// Raises the StartupDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartupDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartupDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartupDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartupDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartupDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMinimumDownTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StartupModel.ClassInstance)).Resolve("minimumDownTime")));
        }
        
        /// <summary>
        /// Raises the MinimumDownTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimumDownTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinimumDownTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinimumDownTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimumDownTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinimumDownTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMinimumRunTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StartupModel.ClassInstance)).Resolve("minimumRunTime")));
        }
        
        /// <summary>
        /// Raises the MinimumRunTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimumRunTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinimumRunTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinimumRunTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimumRunTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinimumRunTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStartupPriorityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StartupModel.ClassInstance)).Resolve("startupPriority")));
        }
        
        /// <summary>
        /// Raises the StartupPriorityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartupPriorityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartupPriorityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartupPriorityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartupPriorityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartupPriorityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStartupCostAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StartupModel.ClassInstance)).Resolve("startupCost")));
        }
        
        /// <summary>
        /// Raises the StartupCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartupCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartupCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartupCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartupCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartupCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveHotStandbyHeatAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StartupModel.ClassInstance)).Resolve("hotStandbyHeat")));
        }
        
        /// <summary>
        /// Raises the HotStandbyHeatChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHotStandbyHeatChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HotStandbyHeatChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HotStandbyHeatChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHotStandbyHeatChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HotStandbyHeatChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIncrementalMaintCostAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StartupModel.ClassInstance)).Resolve("incrementalMaintCost")));
        }
        
        /// <summary>
        /// Raises the IncrementalMaintCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIncrementalMaintCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IncrementalMaintCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IncrementalMaintCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIncrementalMaintCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IncrementalMaintCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStartIgnFuelCurveReference()
        {
            return ((ITypedElement)(((ModelElement)(StartupModel.ClassInstance)).Resolve("StartIgnFuelCurve")));
        }
        
        /// <summary>
        /// Raises the StartIgnFuelCurveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartIgnFuelCurveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartIgnFuelCurveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartIgnFuelCurveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartIgnFuelCurveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartIgnFuelCurveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the StartIgnFuelCurve property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStartIgnFuelCurve(object sender, System.EventArgs eventArgs)
        {
            this.StartIgnFuelCurve = null;
        }
        
        private static ITypedElement RetrieveStartRampCurveReference()
        {
            return ((ITypedElement)(((ModelElement)(StartupModel.ClassInstance)).Resolve("StartRampCurve")));
        }
        
        /// <summary>
        /// Raises the StartRampCurveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartRampCurveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartRampCurveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartRampCurveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartRampCurveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartRampCurveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the StartRampCurve property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStartRampCurve(object sender, System.EventArgs eventArgs)
        {
            this.StartRampCurve = null;
        }
        
        private static ITypedElement RetrieveStartMainFuelCurveReference()
        {
            return ((ITypedElement)(((ModelElement)(StartupModel.ClassInstance)).Resolve("StartMainFuelCurve")));
        }
        
        /// <summary>
        /// Raises the StartMainFuelCurveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartMainFuelCurveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartMainFuelCurveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartMainFuelCurveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartMainFuelCurveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartMainFuelCurveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the StartMainFuelCurve property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStartMainFuelCurve(object sender, System.EventArgs eventArgs)
        {
            this.StartMainFuelCurve = null;
        }
        
        private static ITypedElement RetrieveThermalGeneratingUnitReference()
        {
            return ((ITypedElement)(((ModelElement)(StartupModel.ClassInstance)).Resolve("ThermalGeneratingUnit")));
        }
        
        /// <summary>
        /// Raises the ThermalGeneratingUnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThermalGeneratingUnitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThermalGeneratingUnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThermalGeneratingUnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThermalGeneratingUnitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThermalGeneratingUnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThermalGeneratingUnit property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThermalGeneratingUnit(object sender, System.EventArgs eventArgs)
        {
            this.ThermalGeneratingUnit = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "FIXEDMAINTCOST"))
            {
                return this.FixedMaintCost;
            }
            if ((attribute == "RISKFACTORCOST"))
            {
                return this.RiskFactorCost;
            }
            if ((attribute == "STBYAUXP"))
            {
                return this.StbyAuxP;
            }
            if ((attribute == "STARTUPDATE"))
            {
                return this.StartupDate;
            }
            if ((attribute == "MINIMUMDOWNTIME"))
            {
                return this.MinimumDownTime;
            }
            if ((attribute == "MINIMUMRUNTIME"))
            {
                return this.MinimumRunTime;
            }
            if ((attribute == "STARTUPPRIORITY"))
            {
                return this.StartupPriority;
            }
            if ((attribute == "STARTUPCOST"))
            {
                return this.StartupCost;
            }
            if ((attribute == "HOTSTANDBYHEAT"))
            {
                return this.HotStandbyHeat;
            }
            if ((attribute == "INCREMENTALMAINTCOST"))
            {
                return this.IncrementalMaintCost;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STARTIGNFUELCURVE"))
            {
                this.StartIgnFuelCurve = ((IStartIgnFuelCurve)(value));
                return;
            }
            if ((feature == "STARTRAMPCURVE"))
            {
                this.StartRampCurve = ((IStartRampCurve)(value));
                return;
            }
            if ((feature == "STARTMAINFUELCURVE"))
            {
                this.StartMainFuelCurve = ((IStartMainFuelCurve)(value));
                return;
            }
            if ((feature == "THERMALGENERATINGUNIT"))
            {
                this.ThermalGeneratingUnit = ((IThermalGeneratingUnit)(value));
                return;
            }
            if ((feature == "FIXEDMAINTCOST"))
            {
                this.FixedMaintCost = ((float)(value));
                return;
            }
            if ((feature == "RISKFACTORCOST"))
            {
                this.RiskFactorCost = ((float)(value));
                return;
            }
            if ((feature == "STBYAUXP"))
            {
                this.StbyAuxP = ((float)(value));
                return;
            }
            if ((feature == "STARTUPDATE"))
            {
                this.StartupDate = ((DateTime)(value));
                return;
            }
            if ((feature == "MINIMUMDOWNTIME"))
            {
                this.MinimumDownTime = ((float)(value));
                return;
            }
            if ((feature == "MINIMUMRUNTIME"))
            {
                this.MinimumRunTime = ((float)(value));
                return;
            }
            if ((feature == "STARTUPPRIORITY"))
            {
                this.StartupPriority = ((int)(value));
                return;
            }
            if ((feature == "STARTUPCOST"))
            {
                this.StartupCost = ((float)(value));
                return;
            }
            if ((feature == "HOTSTANDBYHEAT"))
            {
                this.HotStandbyHeat = ((float)(value));
                return;
            }
            if ((feature == "INCREMENTALMAINTCOST"))
            {
                this.IncrementalMaintCost = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "StartIgnFuelCurve"))
            {
                return new StartIgnFuelCurveProxy(this);
            }
            if ((attribute == "StartRampCurve"))
            {
                return new StartRampCurveProxy(this);
            }
            if ((attribute == "StartMainFuelCurve"))
            {
                return new StartMainFuelCurveProxy(this);
            }
            if ((attribute == "ThermalGeneratingUnit"))
            {
                return new ThermalGeneratingUnitProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "StartIgnFuelCurve"))
            {
                return new StartIgnFuelCurveProxy(this);
            }
            if ((reference == "StartRampCurve"))
            {
                return new StartRampCurveProxy(this);
            }
            if ((reference == "StartMainFuelCurve"))
            {
                return new StartMainFuelCurveProxy(this);
            }
            if ((reference == "ThermalGeneratingUnit"))
            {
                return new ThermalGeneratingUnitProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/Startup" +
                        "Model")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the StartupModel class
        /// </summary>
        public class StartupModelReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private StartupModel _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public StartupModelReferencedElementsCollection(StartupModel parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.StartIgnFuelCurve != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.StartRampCurve != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.StartMainFuelCurve != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ThermalGeneratingUnit != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.StartIgnFuelCurveChanged += this.PropagateValueChanges;
                this._parent.StartRampCurveChanged += this.PropagateValueChanges;
                this._parent.StartMainFuelCurveChanged += this.PropagateValueChanges;
                this._parent.ThermalGeneratingUnitChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.StartIgnFuelCurveChanged -= this.PropagateValueChanges;
                this._parent.StartRampCurveChanged -= this.PropagateValueChanges;
                this._parent.StartMainFuelCurveChanged -= this.PropagateValueChanges;
                this._parent.ThermalGeneratingUnitChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.StartIgnFuelCurve == null))
                {
                    IStartIgnFuelCurve startIgnFuelCurveCasted = item.As<IStartIgnFuelCurve>();
                    if ((startIgnFuelCurveCasted != null))
                    {
                        this._parent.StartIgnFuelCurve = startIgnFuelCurveCasted;
                        return;
                    }
                }
                if ((this._parent.StartRampCurve == null))
                {
                    IStartRampCurve startRampCurveCasted = item.As<IStartRampCurve>();
                    if ((startRampCurveCasted != null))
                    {
                        this._parent.StartRampCurve = startRampCurveCasted;
                        return;
                    }
                }
                if ((this._parent.StartMainFuelCurve == null))
                {
                    IStartMainFuelCurve startMainFuelCurveCasted = item.As<IStartMainFuelCurve>();
                    if ((startMainFuelCurveCasted != null))
                    {
                        this._parent.StartMainFuelCurve = startMainFuelCurveCasted;
                        return;
                    }
                }
                if ((this._parent.ThermalGeneratingUnit == null))
                {
                    IThermalGeneratingUnit thermalGeneratingUnitCasted = item.As<IThermalGeneratingUnit>();
                    if ((thermalGeneratingUnitCasted != null))
                    {
                        this._parent.ThermalGeneratingUnit = thermalGeneratingUnitCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.StartIgnFuelCurve = null;
                this._parent.StartRampCurve = null;
                this._parent.StartMainFuelCurve = null;
                this._parent.ThermalGeneratingUnit = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.StartIgnFuelCurve))
                {
                    return true;
                }
                if ((item == this._parent.StartRampCurve))
                {
                    return true;
                }
                if ((item == this._parent.StartMainFuelCurve))
                {
                    return true;
                }
                if ((item == this._parent.ThermalGeneratingUnit))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.StartIgnFuelCurve != null))
                {
                    array[arrayIndex] = this._parent.StartIgnFuelCurve;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.StartRampCurve != null))
                {
                    array[arrayIndex] = this._parent.StartRampCurve;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.StartMainFuelCurve != null))
                {
                    array[arrayIndex] = this._parent.StartMainFuelCurve;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ThermalGeneratingUnit != null))
                {
                    array[arrayIndex] = this._parent.ThermalGeneratingUnit;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.StartIgnFuelCurve == item))
                {
                    this._parent.StartIgnFuelCurve = null;
                    return true;
                }
                if ((this._parent.StartRampCurve == item))
                {
                    this._parent.StartRampCurve = null;
                    return true;
                }
                if ((this._parent.StartMainFuelCurve == item))
                {
                    this._parent.StartMainFuelCurve = null;
                    return true;
                }
                if ((this._parent.ThermalGeneratingUnit == item))
                {
                    this._parent.ThermalGeneratingUnit = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.StartIgnFuelCurve).Concat(this._parent.StartRampCurve).Concat(this._parent.StartMainFuelCurve).Concat(this._parent.ThermalGeneratingUnit).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fixedMaintCost property
        /// </summary>
        private sealed class FixedMaintCostProxy : ModelPropertyChange<IStartupModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FixedMaintCostProxy(IStartupModel modelElement) : 
                    base(modelElement, "fixedMaintCost")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.FixedMaintCost;
                }
                set
                {
                    this.ModelElement.FixedMaintCost = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the riskFactorCost property
        /// </summary>
        private sealed class RiskFactorCostProxy : ModelPropertyChange<IStartupModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RiskFactorCostProxy(IStartupModel modelElement) : 
                    base(modelElement, "riskFactorCost")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RiskFactorCost;
                }
                set
                {
                    this.ModelElement.RiskFactorCost = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the stbyAuxP property
        /// </summary>
        private sealed class StbyAuxPProxy : ModelPropertyChange<IStartupModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StbyAuxPProxy(IStartupModel modelElement) : 
                    base(modelElement, "stbyAuxP")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.StbyAuxP;
                }
                set
                {
                    this.ModelElement.StbyAuxP = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the startupDate property
        /// </summary>
        private sealed class StartupDateProxy : ModelPropertyChange<IStartupModel, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartupDateProxy(IStartupModel modelElement) : 
                    base(modelElement, "startupDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.StartupDate;
                }
                set
                {
                    this.ModelElement.StartupDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minimumDownTime property
        /// </summary>
        private sealed class MinimumDownTimeProxy : ModelPropertyChange<IStartupModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinimumDownTimeProxy(IStartupModel modelElement) : 
                    base(modelElement, "minimumDownTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinimumDownTime;
                }
                set
                {
                    this.ModelElement.MinimumDownTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minimumRunTime property
        /// </summary>
        private sealed class MinimumRunTimeProxy : ModelPropertyChange<IStartupModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinimumRunTimeProxy(IStartupModel modelElement) : 
                    base(modelElement, "minimumRunTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinimumRunTime;
                }
                set
                {
                    this.ModelElement.MinimumRunTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the startupPriority property
        /// </summary>
        private sealed class StartupPriorityProxy : ModelPropertyChange<IStartupModel, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartupPriorityProxy(IStartupModel modelElement) : 
                    base(modelElement, "startupPriority")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.StartupPriority;
                }
                set
                {
                    this.ModelElement.StartupPriority = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the startupCost property
        /// </summary>
        private sealed class StartupCostProxy : ModelPropertyChange<IStartupModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartupCostProxy(IStartupModel modelElement) : 
                    base(modelElement, "startupCost")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.StartupCost;
                }
                set
                {
                    this.ModelElement.StartupCost = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the hotStandbyHeat property
        /// </summary>
        private sealed class HotStandbyHeatProxy : ModelPropertyChange<IStartupModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HotStandbyHeatProxy(IStartupModel modelElement) : 
                    base(modelElement, "hotStandbyHeat")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.HotStandbyHeat;
                }
                set
                {
                    this.ModelElement.HotStandbyHeat = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the incrementalMaintCost property
        /// </summary>
        private sealed class IncrementalMaintCostProxy : ModelPropertyChange<IStartupModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IncrementalMaintCostProxy(IStartupModel modelElement) : 
                    base(modelElement, "incrementalMaintCost")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.IncrementalMaintCost;
                }
                set
                {
                    this.ModelElement.IncrementalMaintCost = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the StartIgnFuelCurve property
        /// </summary>
        private sealed class StartIgnFuelCurveProxy : ModelPropertyChange<IStartupModel, IStartIgnFuelCurve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartIgnFuelCurveProxy(IStartupModel modelElement) : 
                    base(modelElement, "StartIgnFuelCurve")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStartIgnFuelCurve Value
            {
                get
                {
                    return this.ModelElement.StartIgnFuelCurve;
                }
                set
                {
                    this.ModelElement.StartIgnFuelCurve = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the StartRampCurve property
        /// </summary>
        private sealed class StartRampCurveProxy : ModelPropertyChange<IStartupModel, IStartRampCurve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartRampCurveProxy(IStartupModel modelElement) : 
                    base(modelElement, "StartRampCurve")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStartRampCurve Value
            {
                get
                {
                    return this.ModelElement.StartRampCurve;
                }
                set
                {
                    this.ModelElement.StartRampCurve = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the StartMainFuelCurve property
        /// </summary>
        private sealed class StartMainFuelCurveProxy : ModelPropertyChange<IStartupModel, IStartMainFuelCurve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartMainFuelCurveProxy(IStartupModel modelElement) : 
                    base(modelElement, "StartMainFuelCurve")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStartMainFuelCurve Value
            {
                get
                {
                    return this.ModelElement.StartMainFuelCurve;
                }
                set
                {
                    this.ModelElement.StartMainFuelCurve = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThermalGeneratingUnit property
        /// </summary>
        private sealed class ThermalGeneratingUnitProxy : ModelPropertyChange<IStartupModel, IThermalGeneratingUnit>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThermalGeneratingUnitProxy(IStartupModel modelElement) : 
                    base(modelElement, "ThermalGeneratingUnit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IThermalGeneratingUnit Value
            {
                get
                {
                    return this.ModelElement.ThermalGeneratingUnit;
                }
                set
                {
                    this.ModelElement.ThermalGeneratingUnit = value;
                }
            }
        }
    }
}

