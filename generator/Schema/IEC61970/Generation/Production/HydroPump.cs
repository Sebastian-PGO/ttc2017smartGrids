//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.Production
{
    
    
    /// <summary>
    /// The default implementation of the HydroPump class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Production")]
    [XmlNamespacePrefixAttribute("cimProduction")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/HydroPu" +
        "mp")]
    [DebuggerDisplayAttribute("HydroPump {UUID}")]
    public partial class HydroPump : PowerSystemResource, IHydroPump, IModelElement
    {
        
        /// <summary>
        /// The backing field for the PumpDischAtMinHead property
        /// </summary>
        private float _pumpDischAtMinHead;
        
        private static Lazy<ITypedElement> _pumpDischAtMinHeadAttribute = new Lazy<ITypedElement>(RetrievePumpDischAtMinHeadAttribute);
        
        /// <summary>
        /// The backing field for the PumpPowerAtMinHead property
        /// </summary>
        private float _pumpPowerAtMinHead;
        
        private static Lazy<ITypedElement> _pumpPowerAtMinHeadAttribute = new Lazy<ITypedElement>(RetrievePumpPowerAtMinHeadAttribute);
        
        /// <summary>
        /// The backing field for the PumpPowerAtMaxHead property
        /// </summary>
        private float _pumpPowerAtMaxHead;
        
        private static Lazy<ITypedElement> _pumpPowerAtMaxHeadAttribute = new Lazy<ITypedElement>(RetrievePumpPowerAtMaxHeadAttribute);
        
        /// <summary>
        /// The backing field for the PumpDischAtMaxHead property
        /// </summary>
        private float _pumpDischAtMaxHead;
        
        private static Lazy<ITypedElement> _pumpDischAtMaxHeadAttribute = new Lazy<ITypedElement>(RetrievePumpDischAtMaxHeadAttribute);
        
        private static Lazy<ITypedElement> _hydroPowerPlantReference = new Lazy<ITypedElement>(RetrieveHydroPowerPlantReference);
        
        /// <summary>
        /// The backing field for the HydroPowerPlant property
        /// </summary>
        private IHydroPowerPlant _hydroPowerPlant;
        
        private static Lazy<ITypedElement> _synchronousMachineReference = new Lazy<ITypedElement>(RetrieveSynchronousMachineReference);
        
        /// <summary>
        /// The backing field for the SynchronousMachine property
        /// </summary>
        private ISynchronousMachine _synchronousMachine;
        
        private static Lazy<ITypedElement> _hydroPumpOpScheduleReference = new Lazy<ITypedElement>(RetrieveHydroPumpOpScheduleReference);
        
        /// <summary>
        /// The backing field for the HydroPumpOpSchedule property
        /// </summary>
        private IHydroPumpOpSchedule _hydroPumpOpSchedule;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The pumpDischAtMinHead property
        /// </summary>
        [XmlElementNameAttribute("pumpDischAtMinHead")]
        [XmlAttributeAttribute(true)]
        public virtual float PumpDischAtMinHead
        {
            get
            {
                return this._pumpDischAtMinHead;
            }
            set
            {
                if ((this._pumpDischAtMinHead != value))
                {
                    float old = this._pumpDischAtMinHead;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPumpDischAtMinHeadChanging(e);
                    this.OnPropertyChanging("PumpDischAtMinHead", e, _pumpDischAtMinHeadAttribute);
                    this._pumpDischAtMinHead = value;
                    this.OnPumpDischAtMinHeadChanged(e);
                    this.OnPropertyChanged("PumpDischAtMinHead", e, _pumpDischAtMinHeadAttribute);
                }
            }
        }
        
        /// <summary>
        /// The pumpPowerAtMinHead property
        /// </summary>
        [XmlElementNameAttribute("pumpPowerAtMinHead")]
        [XmlAttributeAttribute(true)]
        public virtual float PumpPowerAtMinHead
        {
            get
            {
                return this._pumpPowerAtMinHead;
            }
            set
            {
                if ((this._pumpPowerAtMinHead != value))
                {
                    float old = this._pumpPowerAtMinHead;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPumpPowerAtMinHeadChanging(e);
                    this.OnPropertyChanging("PumpPowerAtMinHead", e, _pumpPowerAtMinHeadAttribute);
                    this._pumpPowerAtMinHead = value;
                    this.OnPumpPowerAtMinHeadChanged(e);
                    this.OnPropertyChanged("PumpPowerAtMinHead", e, _pumpPowerAtMinHeadAttribute);
                }
            }
        }
        
        /// <summary>
        /// The pumpPowerAtMaxHead property
        /// </summary>
        [XmlElementNameAttribute("pumpPowerAtMaxHead")]
        [XmlAttributeAttribute(true)]
        public virtual float PumpPowerAtMaxHead
        {
            get
            {
                return this._pumpPowerAtMaxHead;
            }
            set
            {
                if ((this._pumpPowerAtMaxHead != value))
                {
                    float old = this._pumpPowerAtMaxHead;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPumpPowerAtMaxHeadChanging(e);
                    this.OnPropertyChanging("PumpPowerAtMaxHead", e, _pumpPowerAtMaxHeadAttribute);
                    this._pumpPowerAtMaxHead = value;
                    this.OnPumpPowerAtMaxHeadChanged(e);
                    this.OnPropertyChanged("PumpPowerAtMaxHead", e, _pumpPowerAtMaxHeadAttribute);
                }
            }
        }
        
        /// <summary>
        /// The pumpDischAtMaxHead property
        /// </summary>
        [XmlElementNameAttribute("pumpDischAtMaxHead")]
        [XmlAttributeAttribute(true)]
        public virtual float PumpDischAtMaxHead
        {
            get
            {
                return this._pumpDischAtMaxHead;
            }
            set
            {
                if ((this._pumpDischAtMaxHead != value))
                {
                    float old = this._pumpDischAtMaxHead;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPumpDischAtMaxHeadChanging(e);
                    this.OnPropertyChanging("PumpDischAtMaxHead", e, _pumpDischAtMaxHeadAttribute);
                    this._pumpDischAtMaxHead = value;
                    this.OnPumpDischAtMaxHeadChanged(e);
                    this.OnPropertyChanged("PumpDischAtMaxHead", e, _pumpDischAtMaxHeadAttribute);
                }
            }
        }
        
        /// <summary>
        /// The HydroPowerPlant property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("HydroPumps")]
        public virtual IHydroPowerPlant HydroPowerPlant
        {
            get
            {
                return this._hydroPowerPlant;
            }
            set
            {
                if ((this._hydroPowerPlant != value))
                {
                    IHydroPowerPlant old = this._hydroPowerPlant;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHydroPowerPlantChanging(e);
                    this.OnPropertyChanging("HydroPowerPlant", e, _hydroPowerPlantReference);
                    this._hydroPowerPlant = value;
                    if ((old != null))
                    {
                        old.HydroPumps.Remove(this);
                        old.Deleted -= this.OnResetHydroPowerPlant;
                    }
                    if ((value != null))
                    {
                        value.HydroPumps.Add(this);
                        value.Deleted += this.OnResetHydroPowerPlant;
                    }
                    this.OnHydroPowerPlantChanged(e);
                    this.OnPropertyChanged("HydroPowerPlant", e, _hydroPowerPlantReference);
                }
            }
        }
        
        /// <summary>
        /// The SynchronousMachine property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("HydroPump")]
        public virtual ISynchronousMachine SynchronousMachine
        {
            get
            {
                return this._synchronousMachine;
            }
            set
            {
                if ((this._synchronousMachine != value))
                {
                    ISynchronousMachine old = this._synchronousMachine;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSynchronousMachineChanging(e);
                    this.OnPropertyChanging("SynchronousMachine", e, _synchronousMachineReference);
                    this._synchronousMachine = value;
                    if ((old != null))
                    {
                        old.HydroPump = null;
                        old.Deleted -= this.OnResetSynchronousMachine;
                    }
                    if ((value != null))
                    {
                        value.HydroPump = this;
                        value.Deleted += this.OnResetSynchronousMachine;
                    }
                    this.OnSynchronousMachineChanged(e);
                    this.OnPropertyChanged("SynchronousMachine", e, _synchronousMachineReference);
                }
            }
        }
        
        /// <summary>
        /// The HydroPumpOpSchedule property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("HydroPump")]
        public virtual IHydroPumpOpSchedule HydroPumpOpSchedule
        {
            get
            {
                return this._hydroPumpOpSchedule;
            }
            set
            {
                if ((this._hydroPumpOpSchedule != value))
                {
                    IHydroPumpOpSchedule old = this._hydroPumpOpSchedule;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHydroPumpOpScheduleChanging(e);
                    this.OnPropertyChanging("HydroPumpOpSchedule", e, _hydroPumpOpScheduleReference);
                    this._hydroPumpOpSchedule = value;
                    if ((old != null))
                    {
                        old.HydroPump = null;
                        old.Deleted -= this.OnResetHydroPumpOpSchedule;
                    }
                    if ((value != null))
                    {
                        value.HydroPump = this;
                        value.Deleted += this.OnResetHydroPumpOpSchedule;
                    }
                    this.OnHydroPumpOpScheduleChanged(e);
                    this.OnPropertyChanged("HydroPumpOpSchedule", e, _hydroPumpOpScheduleReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new HydroPumpReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/HydroPu" +
                            "mp")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PumpDischAtMinHead property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PumpDischAtMinHeadChanging;
        
        /// <summary>
        /// Gets fired when the PumpDischAtMinHead property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PumpDischAtMinHeadChanged;
        
        /// <summary>
        /// Gets fired before the PumpPowerAtMinHead property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PumpPowerAtMinHeadChanging;
        
        /// <summary>
        /// Gets fired when the PumpPowerAtMinHead property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PumpPowerAtMinHeadChanged;
        
        /// <summary>
        /// Gets fired before the PumpPowerAtMaxHead property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PumpPowerAtMaxHeadChanging;
        
        /// <summary>
        /// Gets fired when the PumpPowerAtMaxHead property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PumpPowerAtMaxHeadChanged;
        
        /// <summary>
        /// Gets fired before the PumpDischAtMaxHead property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PumpDischAtMaxHeadChanging;
        
        /// <summary>
        /// Gets fired when the PumpDischAtMaxHead property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PumpDischAtMaxHeadChanged;
        
        /// <summary>
        /// Gets fired before the HydroPowerPlant property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HydroPowerPlantChanging;
        
        /// <summary>
        /// Gets fired when the HydroPowerPlant property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HydroPowerPlantChanged;
        
        /// <summary>
        /// Gets fired before the SynchronousMachine property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SynchronousMachineChanging;
        
        /// <summary>
        /// Gets fired when the SynchronousMachine property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SynchronousMachineChanged;
        
        /// <summary>
        /// Gets fired before the HydroPumpOpSchedule property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HydroPumpOpScheduleChanging;
        
        /// <summary>
        /// Gets fired when the HydroPumpOpSchedule property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HydroPumpOpScheduleChanged;
        
        private static ITypedElement RetrievePumpDischAtMinHeadAttribute()
        {
            return ((ITypedElement)(((ModelElement)(HydroPump.ClassInstance)).Resolve("pumpDischAtMinHead")));
        }
        
        /// <summary>
        /// Raises the PumpDischAtMinHeadChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPumpDischAtMinHeadChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PumpDischAtMinHeadChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PumpDischAtMinHeadChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPumpDischAtMinHeadChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PumpDischAtMinHeadChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePumpPowerAtMinHeadAttribute()
        {
            return ((ITypedElement)(((ModelElement)(HydroPump.ClassInstance)).Resolve("pumpPowerAtMinHead")));
        }
        
        /// <summary>
        /// Raises the PumpPowerAtMinHeadChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPumpPowerAtMinHeadChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PumpPowerAtMinHeadChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PumpPowerAtMinHeadChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPumpPowerAtMinHeadChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PumpPowerAtMinHeadChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePumpPowerAtMaxHeadAttribute()
        {
            return ((ITypedElement)(((ModelElement)(HydroPump.ClassInstance)).Resolve("pumpPowerAtMaxHead")));
        }
        
        /// <summary>
        /// Raises the PumpPowerAtMaxHeadChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPumpPowerAtMaxHeadChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PumpPowerAtMaxHeadChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PumpPowerAtMaxHeadChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPumpPowerAtMaxHeadChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PumpPowerAtMaxHeadChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePumpDischAtMaxHeadAttribute()
        {
            return ((ITypedElement)(((ModelElement)(HydroPump.ClassInstance)).Resolve("pumpDischAtMaxHead")));
        }
        
        /// <summary>
        /// Raises the PumpDischAtMaxHeadChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPumpDischAtMaxHeadChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PumpDischAtMaxHeadChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PumpDischAtMaxHeadChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPumpDischAtMaxHeadChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PumpDischAtMaxHeadChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveHydroPowerPlantReference()
        {
            return ((ITypedElement)(((ModelElement)(HydroPump.ClassInstance)).Resolve("HydroPowerPlant")));
        }
        
        /// <summary>
        /// Raises the HydroPowerPlantChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHydroPowerPlantChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HydroPowerPlantChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HydroPowerPlantChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHydroPowerPlantChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HydroPowerPlantChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HydroPowerPlant property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHydroPowerPlant(object sender, System.EventArgs eventArgs)
        {
            this.HydroPowerPlant = null;
        }
        
        private static ITypedElement RetrieveSynchronousMachineReference()
        {
            return ((ITypedElement)(((ModelElement)(HydroPump.ClassInstance)).Resolve("SynchronousMachine")));
        }
        
        /// <summary>
        /// Raises the SynchronousMachineChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSynchronousMachineChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SynchronousMachineChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SynchronousMachineChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSynchronousMachineChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SynchronousMachineChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SynchronousMachine property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSynchronousMachine(object sender, System.EventArgs eventArgs)
        {
            this.SynchronousMachine = null;
        }
        
        private static ITypedElement RetrieveHydroPumpOpScheduleReference()
        {
            return ((ITypedElement)(((ModelElement)(HydroPump.ClassInstance)).Resolve("HydroPumpOpSchedule")));
        }
        
        /// <summary>
        /// Raises the HydroPumpOpScheduleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHydroPumpOpScheduleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HydroPumpOpScheduleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HydroPumpOpScheduleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHydroPumpOpScheduleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HydroPumpOpScheduleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HydroPumpOpSchedule property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHydroPumpOpSchedule(object sender, System.EventArgs eventArgs)
        {
            this.HydroPumpOpSchedule = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PUMPDISCHATMINHEAD"))
            {
                return this.PumpDischAtMinHead;
            }
            if ((attribute == "PUMPPOWERATMINHEAD"))
            {
                return this.PumpPowerAtMinHead;
            }
            if ((attribute == "PUMPPOWERATMAXHEAD"))
            {
                return this.PumpPowerAtMaxHead;
            }
            if ((attribute == "PUMPDISCHATMAXHEAD"))
            {
                return this.PumpDischAtMaxHead;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "HYDROPOWERPLANT"))
            {
                this.HydroPowerPlant = ((IHydroPowerPlant)(value));
                return;
            }
            if ((feature == "SYNCHRONOUSMACHINE"))
            {
                this.SynchronousMachine = ((ISynchronousMachine)(value));
                return;
            }
            if ((feature == "HYDROPUMPOPSCHEDULE"))
            {
                this.HydroPumpOpSchedule = ((IHydroPumpOpSchedule)(value));
                return;
            }
            if ((feature == "PUMPDISCHATMINHEAD"))
            {
                this.PumpDischAtMinHead = ((float)(value));
                return;
            }
            if ((feature == "PUMPPOWERATMINHEAD"))
            {
                this.PumpPowerAtMinHead = ((float)(value));
                return;
            }
            if ((feature == "PUMPPOWERATMAXHEAD"))
            {
                this.PumpPowerAtMaxHead = ((float)(value));
                return;
            }
            if ((feature == "PUMPDISCHATMAXHEAD"))
            {
                this.PumpDischAtMaxHead = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "HydroPowerPlant"))
            {
                return new HydroPowerPlantProxy(this);
            }
            if ((attribute == "SynchronousMachine"))
            {
                return new SynchronousMachineProxy(this);
            }
            if ((attribute == "HydroPumpOpSchedule"))
            {
                return new HydroPumpOpScheduleProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "HydroPowerPlant"))
            {
                return new HydroPowerPlantProxy(this);
            }
            if ((reference == "SynchronousMachine"))
            {
                return new SynchronousMachineProxy(this);
            }
            if ((reference == "HydroPumpOpSchedule"))
            {
                return new HydroPumpOpScheduleProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/HydroPu" +
                        "mp")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the HydroPump class
        /// </summary>
        public class HydroPumpReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private HydroPump _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public HydroPumpReferencedElementsCollection(HydroPump parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.HydroPowerPlant != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.SynchronousMachine != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.HydroPumpOpSchedule != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.HydroPowerPlantChanged += this.PropagateValueChanges;
                this._parent.SynchronousMachineChanged += this.PropagateValueChanges;
                this._parent.HydroPumpOpScheduleChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.HydroPowerPlantChanged -= this.PropagateValueChanges;
                this._parent.SynchronousMachineChanged -= this.PropagateValueChanges;
                this._parent.HydroPumpOpScheduleChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.HydroPowerPlant == null))
                {
                    IHydroPowerPlant hydroPowerPlantCasted = item.As<IHydroPowerPlant>();
                    if ((hydroPowerPlantCasted != null))
                    {
                        this._parent.HydroPowerPlant = hydroPowerPlantCasted;
                        return;
                    }
                }
                if ((this._parent.SynchronousMachine == null))
                {
                    ISynchronousMachine synchronousMachineCasted = item.As<ISynchronousMachine>();
                    if ((synchronousMachineCasted != null))
                    {
                        this._parent.SynchronousMachine = synchronousMachineCasted;
                        return;
                    }
                }
                if ((this._parent.HydroPumpOpSchedule == null))
                {
                    IHydroPumpOpSchedule hydroPumpOpScheduleCasted = item.As<IHydroPumpOpSchedule>();
                    if ((hydroPumpOpScheduleCasted != null))
                    {
                        this._parent.HydroPumpOpSchedule = hydroPumpOpScheduleCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.HydroPowerPlant = null;
                this._parent.SynchronousMachine = null;
                this._parent.HydroPumpOpSchedule = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.HydroPowerPlant))
                {
                    return true;
                }
                if ((item == this._parent.SynchronousMachine))
                {
                    return true;
                }
                if ((item == this._parent.HydroPumpOpSchedule))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.HydroPowerPlant != null))
                {
                    array[arrayIndex] = this._parent.HydroPowerPlant;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.SynchronousMachine != null))
                {
                    array[arrayIndex] = this._parent.SynchronousMachine;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.HydroPumpOpSchedule != null))
                {
                    array[arrayIndex] = this._parent.HydroPumpOpSchedule;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.HydroPowerPlant == item))
                {
                    this._parent.HydroPowerPlant = null;
                    return true;
                }
                if ((this._parent.SynchronousMachine == item))
                {
                    this._parent.SynchronousMachine = null;
                    return true;
                }
                if ((this._parent.HydroPumpOpSchedule == item))
                {
                    this._parent.HydroPumpOpSchedule = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.HydroPowerPlant).Concat(this._parent.SynchronousMachine).Concat(this._parent.HydroPumpOpSchedule).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pumpDischAtMinHead property
        /// </summary>
        private sealed class PumpDischAtMinHeadProxy : ModelPropertyChange<IHydroPump, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PumpDischAtMinHeadProxy(IHydroPump modelElement) : 
                    base(modelElement, "pumpDischAtMinHead")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PumpDischAtMinHead;
                }
                set
                {
                    this.ModelElement.PumpDischAtMinHead = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pumpPowerAtMinHead property
        /// </summary>
        private sealed class PumpPowerAtMinHeadProxy : ModelPropertyChange<IHydroPump, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PumpPowerAtMinHeadProxy(IHydroPump modelElement) : 
                    base(modelElement, "pumpPowerAtMinHead")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PumpPowerAtMinHead;
                }
                set
                {
                    this.ModelElement.PumpPowerAtMinHead = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pumpPowerAtMaxHead property
        /// </summary>
        private sealed class PumpPowerAtMaxHeadProxy : ModelPropertyChange<IHydroPump, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PumpPowerAtMaxHeadProxy(IHydroPump modelElement) : 
                    base(modelElement, "pumpPowerAtMaxHead")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PumpPowerAtMaxHead;
                }
                set
                {
                    this.ModelElement.PumpPowerAtMaxHead = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pumpDischAtMaxHead property
        /// </summary>
        private sealed class PumpDischAtMaxHeadProxy : ModelPropertyChange<IHydroPump, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PumpDischAtMaxHeadProxy(IHydroPump modelElement) : 
                    base(modelElement, "pumpDischAtMaxHead")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PumpDischAtMaxHead;
                }
                set
                {
                    this.ModelElement.PumpDischAtMaxHead = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HydroPowerPlant property
        /// </summary>
        private sealed class HydroPowerPlantProxy : ModelPropertyChange<IHydroPump, IHydroPowerPlant>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HydroPowerPlantProxy(IHydroPump modelElement) : 
                    base(modelElement, "HydroPowerPlant")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHydroPowerPlant Value
            {
                get
                {
                    return this.ModelElement.HydroPowerPlant;
                }
                set
                {
                    this.ModelElement.HydroPowerPlant = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SynchronousMachine property
        /// </summary>
        private sealed class SynchronousMachineProxy : ModelPropertyChange<IHydroPump, ISynchronousMachine>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SynchronousMachineProxy(IHydroPump modelElement) : 
                    base(modelElement, "SynchronousMachine")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISynchronousMachine Value
            {
                get
                {
                    return this.ModelElement.SynchronousMachine;
                }
                set
                {
                    this.ModelElement.SynchronousMachine = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HydroPumpOpSchedule property
        /// </summary>
        private sealed class HydroPumpOpScheduleProxy : ModelPropertyChange<IHydroPump, IHydroPumpOpSchedule>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HydroPumpOpScheduleProxy(IHydroPump modelElement) : 
                    base(modelElement, "HydroPumpOpSchedule")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHydroPumpOpSchedule Value
            {
                get
                {
                    return this.ModelElement.HydroPumpOpSchedule;
                }
                set
                {
                    this.ModelElement.HydroPumpOpSchedule = value;
                }
            }
        }
    }
}

