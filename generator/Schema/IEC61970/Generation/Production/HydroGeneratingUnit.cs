//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.Production
{
    
    
    /// <summary>
    /// The default implementation of the HydroGeneratingUnit class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Production")]
    [XmlNamespacePrefixAttribute("cimProduction")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/HydroGe" +
        "neratingUnit")]
    [DebuggerDisplayAttribute("HydroGeneratingUnit {UUID}")]
    public partial class HydroGeneratingUnit : GeneratingUnit, IHydroGeneratingUnit, IModelElement
    {
        
        /// <summary>
        /// The backing field for the EnergyConversionCapability property
        /// </summary>
        private Nullable<HydroEnergyConversionKind> _energyConversionCapability;
        
        private static Lazy<ITypedElement> _energyConversionCapabilityAttribute = new Lazy<ITypedElement>(RetrieveEnergyConversionCapabilityAttribute);
        
        /// <summary>
        /// The backing field for the HydroUnitWaterCost property
        /// </summary>
        private float _hydroUnitWaterCost;
        
        private static Lazy<ITypedElement> _hydroUnitWaterCostAttribute = new Lazy<ITypedElement>(RetrieveHydroUnitWaterCostAttribute);
        
        private static Lazy<ITypedElement> _tailbayLossCurveReference = new Lazy<ITypedElement>(RetrieveTailbayLossCurveReference);
        
        /// <summary>
        /// The backing field for the TailbayLossCurve property
        /// </summary>
        private HydroGeneratingUnitTailbayLossCurveCollection _tailbayLossCurve;
        
        private static Lazy<ITypedElement> _hydroPowerPlantReference = new Lazy<ITypedElement>(RetrieveHydroPowerPlantReference);
        
        /// <summary>
        /// The backing field for the HydroPowerPlant property
        /// </summary>
        private IHydroPowerPlant _hydroPowerPlant;
        
        private static Lazy<ITypedElement> _hydroGeneratingEfficiencyCurvesReference = new Lazy<ITypedElement>(RetrieveHydroGeneratingEfficiencyCurvesReference);
        
        /// <summary>
        /// The backing field for the HydroGeneratingEfficiencyCurves property
        /// </summary>
        private HydroGeneratingUnitHydroGeneratingEfficiencyCurvesCollection _hydroGeneratingEfficiencyCurves;
        
        private static Lazy<ITypedElement> _penstockLossCurveReference = new Lazy<ITypedElement>(RetrievePenstockLossCurveReference);
        
        /// <summary>
        /// The backing field for the PenstockLossCurve property
        /// </summary>
        private IPenstockLossCurve _penstockLossCurve;
        
        private static IClass _classInstance;
        
        public HydroGeneratingUnit()
        {
            this._tailbayLossCurve = new HydroGeneratingUnitTailbayLossCurveCollection(this);
            this._tailbayLossCurve.CollectionChanging += this.TailbayLossCurveCollectionChanging;
            this._tailbayLossCurve.CollectionChanged += this.TailbayLossCurveCollectionChanged;
            this._hydroGeneratingEfficiencyCurves = new HydroGeneratingUnitHydroGeneratingEfficiencyCurvesCollection(this);
            this._hydroGeneratingEfficiencyCurves.CollectionChanging += this.HydroGeneratingEfficiencyCurvesCollectionChanging;
            this._hydroGeneratingEfficiencyCurves.CollectionChanged += this.HydroGeneratingEfficiencyCurvesCollectionChanged;
        }
        
        /// <summary>
        /// The energyConversionCapability property
        /// </summary>
        [XmlElementNameAttribute("energyConversionCapability")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<HydroEnergyConversionKind> EnergyConversionCapability
        {
            get
            {
                return this._energyConversionCapability;
            }
            set
            {
                if ((this._energyConversionCapability != value))
                {
                    Nullable<HydroEnergyConversionKind> old = this._energyConversionCapability;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEnergyConversionCapabilityChanging(e);
                    this.OnPropertyChanging("EnergyConversionCapability", e, _energyConversionCapabilityAttribute);
                    this._energyConversionCapability = value;
                    this.OnEnergyConversionCapabilityChanged(e);
                    this.OnPropertyChanged("EnergyConversionCapability", e, _energyConversionCapabilityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The hydroUnitWaterCost property
        /// </summary>
        [XmlElementNameAttribute("hydroUnitWaterCost")]
        [XmlAttributeAttribute(true)]
        public virtual float HydroUnitWaterCost
        {
            get
            {
                return this._hydroUnitWaterCost;
            }
            set
            {
                if ((this._hydroUnitWaterCost != value))
                {
                    float old = this._hydroUnitWaterCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHydroUnitWaterCostChanging(e);
                    this.OnPropertyChanging("HydroUnitWaterCost", e, _hydroUnitWaterCostAttribute);
                    this._hydroUnitWaterCost = value;
                    this.OnHydroUnitWaterCostChanged(e);
                    this.OnPropertyChanged("HydroUnitWaterCost", e, _hydroUnitWaterCostAttribute);
                }
            }
        }
        
        /// <summary>
        /// The TailbayLossCurve property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("HydroGeneratingUnit")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITailbayLossCurve> TailbayLossCurve
        {
            get
            {
                return this._tailbayLossCurve;
            }
        }
        
        /// <summary>
        /// The HydroPowerPlant property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("HydroGeneratingUnits")]
        public virtual IHydroPowerPlant HydroPowerPlant
        {
            get
            {
                return this._hydroPowerPlant;
            }
            set
            {
                if ((this._hydroPowerPlant != value))
                {
                    IHydroPowerPlant old = this._hydroPowerPlant;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHydroPowerPlantChanging(e);
                    this.OnPropertyChanging("HydroPowerPlant", e, _hydroPowerPlantReference);
                    this._hydroPowerPlant = value;
                    if ((old != null))
                    {
                        old.HydroGeneratingUnits.Remove(this);
                        old.Deleted -= this.OnResetHydroPowerPlant;
                    }
                    if ((value != null))
                    {
                        value.HydroGeneratingUnits.Add(this);
                        value.Deleted += this.OnResetHydroPowerPlant;
                    }
                    this.OnHydroPowerPlantChanged(e);
                    this.OnPropertyChanged("HydroPowerPlant", e, _hydroPowerPlantReference);
                }
            }
        }
        
        /// <summary>
        /// The HydroGeneratingEfficiencyCurves property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("HydroGeneratingUnit")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IHydroGeneratingEfficiencyCurve> HydroGeneratingEfficiencyCurves
        {
            get
            {
                return this._hydroGeneratingEfficiencyCurves;
            }
        }
        
        /// <summary>
        /// The PenstockLossCurve property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("HydroGeneratingUnit")]
        public virtual IPenstockLossCurve PenstockLossCurve
        {
            get
            {
                return this._penstockLossCurve;
            }
            set
            {
                if ((this._penstockLossCurve != value))
                {
                    IPenstockLossCurve old = this._penstockLossCurve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPenstockLossCurveChanging(e);
                    this.OnPropertyChanging("PenstockLossCurve", e, _penstockLossCurveReference);
                    this._penstockLossCurve = value;
                    if ((old != null))
                    {
                        old.HydroGeneratingUnit = null;
                        old.Deleted -= this.OnResetPenstockLossCurve;
                    }
                    if ((value != null))
                    {
                        value.HydroGeneratingUnit = this;
                        value.Deleted += this.OnResetPenstockLossCurve;
                    }
                    this.OnPenstockLossCurveChanged(e);
                    this.OnPropertyChanged("PenstockLossCurve", e, _penstockLossCurveReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new HydroGeneratingUnitReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/HydroGe" +
                            "neratingUnit")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the EnergyConversionCapability property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyConversionCapabilityChanging;
        
        /// <summary>
        /// Gets fired when the EnergyConversionCapability property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyConversionCapabilityChanged;
        
        /// <summary>
        /// Gets fired before the HydroUnitWaterCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HydroUnitWaterCostChanging;
        
        /// <summary>
        /// Gets fired when the HydroUnitWaterCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HydroUnitWaterCostChanged;
        
        /// <summary>
        /// Gets fired before the HydroPowerPlant property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HydroPowerPlantChanging;
        
        /// <summary>
        /// Gets fired when the HydroPowerPlant property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HydroPowerPlantChanged;
        
        /// <summary>
        /// Gets fired before the PenstockLossCurve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PenstockLossCurveChanging;
        
        /// <summary>
        /// Gets fired when the PenstockLossCurve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PenstockLossCurveChanged;
        
        private static ITypedElement RetrieveEnergyConversionCapabilityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(HydroGeneratingUnit.ClassInstance)).Resolve("energyConversionCapability")));
        }
        
        /// <summary>
        /// Raises the EnergyConversionCapabilityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyConversionCapabilityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyConversionCapabilityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnergyConversionCapabilityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyConversionCapabilityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyConversionCapabilityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveHydroUnitWaterCostAttribute()
        {
            return ((ITypedElement)(((ModelElement)(HydroGeneratingUnit.ClassInstance)).Resolve("hydroUnitWaterCost")));
        }
        
        /// <summary>
        /// Raises the HydroUnitWaterCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHydroUnitWaterCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HydroUnitWaterCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HydroUnitWaterCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHydroUnitWaterCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HydroUnitWaterCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTailbayLossCurveReference()
        {
            return ((ITypedElement)(((ModelElement)(HydroGeneratingUnit.ClassInstance)).Resolve("TailbayLossCurve")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TailbayLossCurve property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TailbayLossCurveCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("TailbayLossCurve", e, _tailbayLossCurveReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TailbayLossCurve property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TailbayLossCurveCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TailbayLossCurve", e, _tailbayLossCurveReference);
        }
        
        private static ITypedElement RetrieveHydroPowerPlantReference()
        {
            return ((ITypedElement)(((ModelElement)(HydroGeneratingUnit.ClassInstance)).Resolve("HydroPowerPlant")));
        }
        
        /// <summary>
        /// Raises the HydroPowerPlantChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHydroPowerPlantChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HydroPowerPlantChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HydroPowerPlantChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHydroPowerPlantChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HydroPowerPlantChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HydroPowerPlant property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHydroPowerPlant(object sender, System.EventArgs eventArgs)
        {
            this.HydroPowerPlant = null;
        }
        
        private static ITypedElement RetrieveHydroGeneratingEfficiencyCurvesReference()
        {
            return ((ITypedElement)(((ModelElement)(HydroGeneratingUnit.ClassInstance)).Resolve("HydroGeneratingEfficiencyCurves")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the HydroGeneratingEfficiencyCurves property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HydroGeneratingEfficiencyCurvesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("HydroGeneratingEfficiencyCurves", e, _hydroGeneratingEfficiencyCurvesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the HydroGeneratingEfficiencyCurves property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HydroGeneratingEfficiencyCurvesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("HydroGeneratingEfficiencyCurves", e, _hydroGeneratingEfficiencyCurvesReference);
        }
        
        private static ITypedElement RetrievePenstockLossCurveReference()
        {
            return ((ITypedElement)(((ModelElement)(HydroGeneratingUnit.ClassInstance)).Resolve("PenstockLossCurve")));
        }
        
        /// <summary>
        /// Raises the PenstockLossCurveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPenstockLossCurveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PenstockLossCurveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PenstockLossCurveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPenstockLossCurveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PenstockLossCurveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PenstockLossCurve property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPenstockLossCurve(object sender, System.EventArgs eventArgs)
        {
            this.PenstockLossCurve = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ENERGYCONVERSIONCAPABILITY"))
            {
                return this.EnergyConversionCapability;
            }
            if ((attribute == "HYDROUNITWATERCOST"))
            {
                return this.HydroUnitWaterCost;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "TAILBAYLOSSCURVE"))
            {
                return this._tailbayLossCurve;
            }
            if ((feature == "HYDROGENERATINGEFFICIENCYCURVES"))
            {
                return this._hydroGeneratingEfficiencyCurves;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "HYDROPOWERPLANT"))
            {
                this.HydroPowerPlant = ((IHydroPowerPlant)(value));
                return;
            }
            if ((feature == "PENSTOCKLOSSCURVE"))
            {
                this.PenstockLossCurve = ((IPenstockLossCurve)(value));
                return;
            }
            if ((feature == "ENERGYCONVERSIONCAPABILITY"))
            {
                this.EnergyConversionCapability = ((HydroEnergyConversionKind)(value));
                return;
            }
            if ((feature == "HYDROUNITWATERCOST"))
            {
                this.HydroUnitWaterCost = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "HydroPowerPlant"))
            {
                return new HydroPowerPlantProxy(this);
            }
            if ((attribute == "PenstockLossCurve"))
            {
                return new PenstockLossCurveProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "HydroPowerPlant"))
            {
                return new HydroPowerPlantProxy(this);
            }
            if ((reference == "PenstockLossCurve"))
            {
                return new PenstockLossCurveProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/HydroGe" +
                        "neratingUnit")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the HydroGeneratingUnit class
        /// </summary>
        public class HydroGeneratingUnitReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private HydroGeneratingUnit _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public HydroGeneratingUnitReferencedElementsCollection(HydroGeneratingUnit parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.TailbayLossCurve.Count);
                    if ((this._parent.HydroPowerPlant != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.HydroGeneratingEfficiencyCurves.Count);
                    if ((this._parent.PenstockLossCurve != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TailbayLossCurve.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.HydroPowerPlantChanged += this.PropagateValueChanges;
                this._parent.HydroGeneratingEfficiencyCurves.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PenstockLossCurveChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TailbayLossCurve.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.HydroPowerPlantChanged -= this.PropagateValueChanges;
                this._parent.HydroGeneratingEfficiencyCurves.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PenstockLossCurveChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITailbayLossCurve tailbayLossCurveCasted = item.As<ITailbayLossCurve>();
                if ((tailbayLossCurveCasted != null))
                {
                    this._parent.TailbayLossCurve.Add(tailbayLossCurveCasted);
                }
                if ((this._parent.HydroPowerPlant == null))
                {
                    IHydroPowerPlant hydroPowerPlantCasted = item.As<IHydroPowerPlant>();
                    if ((hydroPowerPlantCasted != null))
                    {
                        this._parent.HydroPowerPlant = hydroPowerPlantCasted;
                        return;
                    }
                }
                IHydroGeneratingEfficiencyCurve hydroGeneratingEfficiencyCurvesCasted = item.As<IHydroGeneratingEfficiencyCurve>();
                if ((hydroGeneratingEfficiencyCurvesCasted != null))
                {
                    this._parent.HydroGeneratingEfficiencyCurves.Add(hydroGeneratingEfficiencyCurvesCasted);
                }
                if ((this._parent.PenstockLossCurve == null))
                {
                    IPenstockLossCurve penstockLossCurveCasted = item.As<IPenstockLossCurve>();
                    if ((penstockLossCurveCasted != null))
                    {
                        this._parent.PenstockLossCurve = penstockLossCurveCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TailbayLossCurve.Clear();
                this._parent.HydroPowerPlant = null;
                this._parent.HydroGeneratingEfficiencyCurves.Clear();
                this._parent.PenstockLossCurve = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.TailbayLossCurve.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.HydroPowerPlant))
                {
                    return true;
                }
                if (this._parent.HydroGeneratingEfficiencyCurves.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.PenstockLossCurve))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> tailbayLossCurveEnumerator = this._parent.TailbayLossCurve.GetEnumerator();
                try
                {
                    for (
                    ; tailbayLossCurveEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = tailbayLossCurveEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    tailbayLossCurveEnumerator.Dispose();
                }
                if ((this._parent.HydroPowerPlant != null))
                {
                    array[arrayIndex] = this._parent.HydroPowerPlant;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> hydroGeneratingEfficiencyCurvesEnumerator = this._parent.HydroGeneratingEfficiencyCurves.GetEnumerator();
                try
                {
                    for (
                    ; hydroGeneratingEfficiencyCurvesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = hydroGeneratingEfficiencyCurvesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    hydroGeneratingEfficiencyCurvesEnumerator.Dispose();
                }
                if ((this._parent.PenstockLossCurve != null))
                {
                    array[arrayIndex] = this._parent.PenstockLossCurve;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITailbayLossCurve tailbayLossCurveItem = item.As<ITailbayLossCurve>();
                if (((tailbayLossCurveItem != null) 
                            && this._parent.TailbayLossCurve.Remove(tailbayLossCurveItem)))
                {
                    return true;
                }
                if ((this._parent.HydroPowerPlant == item))
                {
                    this._parent.HydroPowerPlant = null;
                    return true;
                }
                IHydroGeneratingEfficiencyCurve hydroGeneratingEfficiencyCurveItem = item.As<IHydroGeneratingEfficiencyCurve>();
                if (((hydroGeneratingEfficiencyCurveItem != null) 
                            && this._parent.HydroGeneratingEfficiencyCurves.Remove(hydroGeneratingEfficiencyCurveItem)))
                {
                    return true;
                }
                if ((this._parent.PenstockLossCurve == item))
                {
                    this._parent.PenstockLossCurve = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TailbayLossCurve).Concat(this._parent.HydroPowerPlant).Concat(this._parent.HydroGeneratingEfficiencyCurves).Concat(this._parent.PenstockLossCurve).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the energyConversionCapability property
        /// </summary>
        private sealed class EnergyConversionCapabilityProxy : ModelPropertyChange<IHydroGeneratingUnit, Nullable<HydroEnergyConversionKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnergyConversionCapabilityProxy(IHydroGeneratingUnit modelElement) : 
                    base(modelElement, "energyConversionCapability")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<HydroEnergyConversionKind> Value
            {
                get
                {
                    return this.ModelElement.EnergyConversionCapability;
                }
                set
                {
                    this.ModelElement.EnergyConversionCapability = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the hydroUnitWaterCost property
        /// </summary>
        private sealed class HydroUnitWaterCostProxy : ModelPropertyChange<IHydroGeneratingUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HydroUnitWaterCostProxy(IHydroGeneratingUnit modelElement) : 
                    base(modelElement, "hydroUnitWaterCost")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.HydroUnitWaterCost;
                }
                set
                {
                    this.ModelElement.HydroUnitWaterCost = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HydroPowerPlant property
        /// </summary>
        private sealed class HydroPowerPlantProxy : ModelPropertyChange<IHydroGeneratingUnit, IHydroPowerPlant>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HydroPowerPlantProxy(IHydroGeneratingUnit modelElement) : 
                    base(modelElement, "HydroPowerPlant")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHydroPowerPlant Value
            {
                get
                {
                    return this.ModelElement.HydroPowerPlant;
                }
                set
                {
                    this.ModelElement.HydroPowerPlant = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PenstockLossCurve property
        /// </summary>
        private sealed class PenstockLossCurveProxy : ModelPropertyChange<IHydroGeneratingUnit, IPenstockLossCurve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PenstockLossCurveProxy(IHydroGeneratingUnit modelElement) : 
                    base(modelElement, "PenstockLossCurve")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPenstockLossCurve Value
            {
                get
                {
                    return this.ModelElement.PenstockLossCurve;
                }
                set
                {
                    this.ModelElement.PenstockLossCurve = value;
                }
            }
        }
    }
}

