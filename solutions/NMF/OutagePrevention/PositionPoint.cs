//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2017.SmartGrids.OutagePreventionJointarget
{
    
    
    /// <summary>
    /// The default implementation of the PositionPoint class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/VoltagePhaseMeasurement" +
        "s")]
    [XmlNamespacePrefixAttribute("outagePreventionJt")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/VoltagePhaseMeasurement" +
        "s#//PositionPoint")]
    public partial class PositionPoint : ModelElement, IPositionPoint, IModelElement
    {
        
        /// <summary>
        /// The backing field for the XPosition property
        /// </summary>
        private string _xPosition;
        
        private static Lazy<ITypedElement> _xPositionAttribute = new Lazy<ITypedElement>(RetrieveXPositionAttribute);
        
        /// <summary>
        /// The backing field for the YPosition property
        /// </summary>
        private string _yPosition;
        
        private static Lazy<ITypedElement> _yPositionAttribute = new Lazy<ITypedElement>(RetrieveYPositionAttribute);
        
        /// <summary>
        /// The backing field for the ZPosition property
        /// </summary>
        private string _zPosition;
        
        private static Lazy<ITypedElement> _zPositionAttribute = new Lazy<ITypedElement>(RetrieveZPositionAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The xPosition property
        /// </summary>
        [XmlElementNameAttribute("xPosition")]
        [XmlAttributeAttribute(true)]
        public string XPosition
        {
            get
            {
                return this._xPosition;
            }
            set
            {
                if ((this._xPosition != value))
                {
                    string old = this._xPosition;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXPositionChanging(e);
                    this.OnPropertyChanging("XPosition", e, _xPositionAttribute);
                    this._xPosition = value;
                    this.OnXPositionChanged(e);
                    this.OnPropertyChanged("XPosition", e, _xPositionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The yPosition property
        /// </summary>
        [XmlElementNameAttribute("yPosition")]
        [XmlAttributeAttribute(true)]
        public string YPosition
        {
            get
            {
                return this._yPosition;
            }
            set
            {
                if ((this._yPosition != value))
                {
                    string old = this._yPosition;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnYPositionChanging(e);
                    this.OnPropertyChanging("YPosition", e, _yPositionAttribute);
                    this._yPosition = value;
                    this.OnYPositionChanged(e);
                    this.OnPropertyChanged("YPosition", e, _yPositionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The zPosition property
        /// </summary>
        [XmlElementNameAttribute("zPosition")]
        [XmlAttributeAttribute(true)]
        public string ZPosition
        {
            get
            {
                return this._zPosition;
            }
            set
            {
                if ((this._zPosition != value))
                {
                    string old = this._zPosition;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnZPositionChanging(e);
                    this.OnPropertyChanging("ZPosition", e, _zPositionAttribute);
                    this._zPosition = value;
                    this.OnZPositionChanged(e);
                    this.OnPropertyChanged("ZPosition", e, _zPositionAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/VoltagePhaseMeasurement" +
                            "s#//PositionPoint")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the XPosition property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XPositionChanging;
        
        /// <summary>
        /// Gets fired when the XPosition property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XPositionChanged;
        
        /// <summary>
        /// Gets fired before the YPosition property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> YPositionChanging;
        
        /// <summary>
        /// Gets fired when the YPosition property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> YPositionChanged;
        
        /// <summary>
        /// Gets fired before the ZPosition property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ZPositionChanging;
        
        /// <summary>
        /// Gets fired when the ZPosition property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ZPositionChanged;
        
        private static ITypedElement RetrieveXPositionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.SmartGrids.OutagePreventionJointarget.PositionPoint.ClassInstance)).Resolve("xPosition")));
        }
        
        /// <summary>
        /// Raises the XPositionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXPositionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XPositionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XPositionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXPositionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XPositionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveYPositionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.SmartGrids.OutagePreventionJointarget.PositionPoint.ClassInstance)).Resolve("yPosition")));
        }
        
        /// <summary>
        /// Raises the YPositionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnYPositionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.YPositionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the YPositionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnYPositionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.YPositionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveZPositionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.SmartGrids.OutagePreventionJointarget.PositionPoint.ClassInstance)).Resolve("zPosition")));
        }
        
        /// <summary>
        /// Raises the ZPositionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZPositionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ZPositionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ZPositionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZPositionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ZPositionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "XPOSITION"))
            {
                return this.XPosition;
            }
            if ((attribute == "YPOSITION"))
            {
                return this.YPosition;
            }
            if ((attribute == "ZPOSITION"))
            {
                return this.ZPosition;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "XPOSITION"))
            {
                this.XPosition = ((string)(value));
                return;
            }
            if ((feature == "YPOSITION"))
            {
                this.YPosition = ((string)(value));
                return;
            }
            if ((feature == "ZPOSITION"))
            {
                this.ZPosition = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/VoltagePhaseMeasurement" +
                        "s#//PositionPoint")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xPosition property
        /// </summary>
        private sealed class XPositionProxy : ModelPropertyChange<IPositionPoint, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XPositionProxy(IPositionPoint modelElement) : 
                    base(modelElement, "xPosition")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.XPosition;
                }
                set
                {
                    this.ModelElement.XPosition = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the yPosition property
        /// </summary>
        private sealed class YPositionProxy : ModelPropertyChange<IPositionPoint, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public YPositionProxy(IPositionPoint modelElement) : 
                    base(modelElement, "yPosition")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.YPosition;
                }
                set
                {
                    this.ModelElement.YPosition = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the zPosition property
        /// </summary>
        private sealed class ZPositionProxy : ModelPropertyChange<IPositionPoint, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ZPositionProxy(IPositionPoint modelElement) : 
                    base(modelElement, "zPosition")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ZPosition;
                }
                set
                {
                    this.ModelElement.ZPosition = value;
                }
            }
        }
    }
}

