//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace TTC2017.SmartGrids.OutagePreventionJointarget
{
    
    
    /// <summary>
    /// The default implementation of the PMUVoltageMeter class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/VoltagePhaseMeasurement" +
        "s")]
    [XmlNamespacePrefixAttribute("outagePreventionJt")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/VoltagePhaseMeasurement" +
        "s#//PMUVoltageMeter")]
    public partial class PMUVoltageMeter : Asset, IPMUVoltageMeter, IModelElement
    {
        
        /// <summary>
        /// The backing field for the MRID property
        /// </summary>
        private string _mRID;
        
        private static Lazy<ITypedElement> _mRIDAttribute = new Lazy<ITypedElement>(RetrieveMRIDAttribute);
        
        /// <summary>
        /// The backing field for the VoltageAMag property
        /// </summary>
        private Nullable<double> _voltageAMag;
        
        private static Lazy<ITypedElement> _voltageAMagAttribute = new Lazy<ITypedElement>(RetrieveVoltageAMagAttribute);
        
        /// <summary>
        /// The backing field for the VoltageAAng property
        /// </summary>
        private Nullable<double> _voltageAAng;
        
        private static Lazy<ITypedElement> _voltageAAngAttribute = new Lazy<ITypedElement>(RetrieveVoltageAAngAttribute);
        
        /// <summary>
        /// The backing field for the VoltageBMag property
        /// </summary>
        private Nullable<double> _voltageBMag;
        
        private static Lazy<ITypedElement> _voltageBMagAttribute = new Lazy<ITypedElement>(RetrieveVoltageBMagAttribute);
        
        /// <summary>
        /// The backing field for the VoltageBAng property
        /// </summary>
        private Nullable<double> _voltageBAng;
        
        private static Lazy<ITypedElement> _voltageBAngAttribute = new Lazy<ITypedElement>(RetrieveVoltageBAngAttribute);
        
        /// <summary>
        /// The backing field for the VoltageCMag property
        /// </summary>
        private Nullable<double> _voltageCMag;
        
        private static Lazy<ITypedElement> _voltageCMagAttribute = new Lazy<ITypedElement>(RetrieveVoltageCMagAttribute);
        
        /// <summary>
        /// The backing field for the VoltageCAng property
        /// </summary>
        private Nullable<double> _voltageCAng;
        
        private static Lazy<ITypedElement> _voltageCAngAttribute = new Lazy<ITypedElement>(RetrieveVoltageCAngAttribute);
        
        /// <summary>
        /// The backing field for the VoltageNeutMag property
        /// </summary>
        private Nullable<double> _voltageNeutMag;
        
        private static Lazy<ITypedElement> _voltageNeutMagAttribute = new Lazy<ITypedElement>(RetrieveVoltageNeutMagAttribute);
        
        /// <summary>
        /// The backing field for the VoltageNeutAng property
        /// </summary>
        private Nullable<double> _voltageNeutAng;
        
        private static Lazy<ITypedElement> _voltageNeutAngAttribute = new Lazy<ITypedElement>(RetrieveVoltageNeutAngAttribute);
        
        /// <summary>
        /// The backing field for the VoltageNetMag property
        /// </summary>
        private Nullable<double> _voltageNetMag;
        
        private static Lazy<ITypedElement> _voltageNetMagAttribute = new Lazy<ITypedElement>(RetrieveVoltageNetMagAttribute);
        
        /// <summary>
        /// The backing field for the VoltageNetAng property
        /// </summary>
        private Nullable<double> _voltageNetAng;
        
        private static Lazy<ITypedElement> _voltageNetAngAttribute = new Lazy<ITypedElement>(RetrieveVoltageNetAngAttribute);
        
        /// <summary>
        /// The backing field for the VoltageResMag property
        /// </summary>
        private Nullable<double> _voltageResMag;
        
        private static Lazy<ITypedElement> _voltageResMagAttribute = new Lazy<ITypedElement>(RetrieveVoltageResMagAttribute);
        
        /// <summary>
        /// The backing field for the VoltageResAng property
        /// </summary>
        private Nullable<double> _voltageResAng;
        
        private static Lazy<ITypedElement> _voltageResAngAttribute = new Lazy<ITypedElement>(RetrieveVoltageResAngAttribute);
        
        private static Lazy<ITypedElement> _serviceDeliveryPointReference = new Lazy<ITypedElement>(RetrieveServiceDeliveryPointReference);
        
        /// <summary>
        /// The backing field for the ServiceDeliveryPoint property
        /// </summary>
        private IServiceDeliveryPoint _serviceDeliveryPoint;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The mRID property
        /// </summary>
        [XmlElementNameAttribute("mRID")]
        [XmlAttributeAttribute(true)]
        public string MRID
        {
            get
            {
                return this._mRID;
            }
            set
            {
                if ((this._mRID != value))
                {
                    string old = this._mRID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMRIDChanging(e);
                    this.OnPropertyChanging("MRID", e, _mRIDAttribute);
                    this._mRID = value;
                    this.OnMRIDChanged(e);
                    this.OnPropertyChanged("MRID", e, _mRIDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The VoltageAMag property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public Nullable<double> VoltageAMag
        {
            get
            {
                return this._voltageAMag;
            }
            set
            {
                if ((this._voltageAMag != value))
                {
                    Nullable<double> old = this._voltageAMag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageAMagChanging(e);
                    this.OnPropertyChanging("VoltageAMag", e, _voltageAMagAttribute);
                    this._voltageAMag = value;
                    this.OnVoltageAMagChanged(e);
                    this.OnPropertyChanged("VoltageAMag", e, _voltageAMagAttribute);
                }
            }
        }
        
        /// <summary>
        /// The VoltageAAng property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public Nullable<double> VoltageAAng
        {
            get
            {
                return this._voltageAAng;
            }
            set
            {
                if ((this._voltageAAng != value))
                {
                    Nullable<double> old = this._voltageAAng;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageAAngChanging(e);
                    this.OnPropertyChanging("VoltageAAng", e, _voltageAAngAttribute);
                    this._voltageAAng = value;
                    this.OnVoltageAAngChanged(e);
                    this.OnPropertyChanged("VoltageAAng", e, _voltageAAngAttribute);
                }
            }
        }
        
        /// <summary>
        /// The VoltageBMag property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public Nullable<double> VoltageBMag
        {
            get
            {
                return this._voltageBMag;
            }
            set
            {
                if ((this._voltageBMag != value))
                {
                    Nullable<double> old = this._voltageBMag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageBMagChanging(e);
                    this.OnPropertyChanging("VoltageBMag", e, _voltageBMagAttribute);
                    this._voltageBMag = value;
                    this.OnVoltageBMagChanged(e);
                    this.OnPropertyChanged("VoltageBMag", e, _voltageBMagAttribute);
                }
            }
        }
        
        /// <summary>
        /// The VoltageBAng property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public Nullable<double> VoltageBAng
        {
            get
            {
                return this._voltageBAng;
            }
            set
            {
                if ((this._voltageBAng != value))
                {
                    Nullable<double> old = this._voltageBAng;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageBAngChanging(e);
                    this.OnPropertyChanging("VoltageBAng", e, _voltageBAngAttribute);
                    this._voltageBAng = value;
                    this.OnVoltageBAngChanged(e);
                    this.OnPropertyChanged("VoltageBAng", e, _voltageBAngAttribute);
                }
            }
        }
        
        /// <summary>
        /// The VoltageCMag property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public Nullable<double> VoltageCMag
        {
            get
            {
                return this._voltageCMag;
            }
            set
            {
                if ((this._voltageCMag != value))
                {
                    Nullable<double> old = this._voltageCMag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageCMagChanging(e);
                    this.OnPropertyChanging("VoltageCMag", e, _voltageCMagAttribute);
                    this._voltageCMag = value;
                    this.OnVoltageCMagChanged(e);
                    this.OnPropertyChanged("VoltageCMag", e, _voltageCMagAttribute);
                }
            }
        }
        
        /// <summary>
        /// The VoltageCAng property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public Nullable<double> VoltageCAng
        {
            get
            {
                return this._voltageCAng;
            }
            set
            {
                if ((this._voltageCAng != value))
                {
                    Nullable<double> old = this._voltageCAng;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageCAngChanging(e);
                    this.OnPropertyChanging("VoltageCAng", e, _voltageCAngAttribute);
                    this._voltageCAng = value;
                    this.OnVoltageCAngChanged(e);
                    this.OnPropertyChanged("VoltageCAng", e, _voltageCAngAttribute);
                }
            }
        }
        
        /// <summary>
        /// The VoltageNeutMag property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public Nullable<double> VoltageNeutMag
        {
            get
            {
                return this._voltageNeutMag;
            }
            set
            {
                if ((this._voltageNeutMag != value))
                {
                    Nullable<double> old = this._voltageNeutMag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageNeutMagChanging(e);
                    this.OnPropertyChanging("VoltageNeutMag", e, _voltageNeutMagAttribute);
                    this._voltageNeutMag = value;
                    this.OnVoltageNeutMagChanged(e);
                    this.OnPropertyChanged("VoltageNeutMag", e, _voltageNeutMagAttribute);
                }
            }
        }
        
        /// <summary>
        /// The VoltageNeutAng property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public Nullable<double> VoltageNeutAng
        {
            get
            {
                return this._voltageNeutAng;
            }
            set
            {
                if ((this._voltageNeutAng != value))
                {
                    Nullable<double> old = this._voltageNeutAng;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageNeutAngChanging(e);
                    this.OnPropertyChanging("VoltageNeutAng", e, _voltageNeutAngAttribute);
                    this._voltageNeutAng = value;
                    this.OnVoltageNeutAngChanged(e);
                    this.OnPropertyChanged("VoltageNeutAng", e, _voltageNeutAngAttribute);
                }
            }
        }
        
        /// <summary>
        /// The VoltageNetMag property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public Nullable<double> VoltageNetMag
        {
            get
            {
                return this._voltageNetMag;
            }
            set
            {
                if ((this._voltageNetMag != value))
                {
                    Nullable<double> old = this._voltageNetMag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageNetMagChanging(e);
                    this.OnPropertyChanging("VoltageNetMag", e, _voltageNetMagAttribute);
                    this._voltageNetMag = value;
                    this.OnVoltageNetMagChanged(e);
                    this.OnPropertyChanged("VoltageNetMag", e, _voltageNetMagAttribute);
                }
            }
        }
        
        /// <summary>
        /// The VoltageNetAng property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public Nullable<double> VoltageNetAng
        {
            get
            {
                return this._voltageNetAng;
            }
            set
            {
                if ((this._voltageNetAng != value))
                {
                    Nullable<double> old = this._voltageNetAng;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageNetAngChanging(e);
                    this.OnPropertyChanging("VoltageNetAng", e, _voltageNetAngAttribute);
                    this._voltageNetAng = value;
                    this.OnVoltageNetAngChanged(e);
                    this.OnPropertyChanged("VoltageNetAng", e, _voltageNetAngAttribute);
                }
            }
        }
        
        /// <summary>
        /// The VoltageResMag property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public Nullable<double> VoltageResMag
        {
            get
            {
                return this._voltageResMag;
            }
            set
            {
                if ((this._voltageResMag != value))
                {
                    Nullable<double> old = this._voltageResMag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageResMagChanging(e);
                    this.OnPropertyChanging("VoltageResMag", e, _voltageResMagAttribute);
                    this._voltageResMag = value;
                    this.OnVoltageResMagChanged(e);
                    this.OnPropertyChanged("VoltageResMag", e, _voltageResMagAttribute);
                }
            }
        }
        
        /// <summary>
        /// The VoltageResAng property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public Nullable<double> VoltageResAng
        {
            get
            {
                return this._voltageResAng;
            }
            set
            {
                if ((this._voltageResAng != value))
                {
                    Nullable<double> old = this._voltageResAng;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageResAngChanging(e);
                    this.OnPropertyChanging("VoltageResAng", e, _voltageResAngAttribute);
                    this._voltageResAng = value;
                    this.OnVoltageResAngChanged(e);
                    this.OnPropertyChanged("VoltageResAng", e, _voltageResAngAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ServiceDeliveryPoint property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public IServiceDeliveryPoint ServiceDeliveryPoint
        {
            get
            {
                return this._serviceDeliveryPoint;
            }
            set
            {
                if ((this._serviceDeliveryPoint != value))
                {
                    IServiceDeliveryPoint old = this._serviceDeliveryPoint;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnServiceDeliveryPointChanging(e);
                    this.OnPropertyChanging("ServiceDeliveryPoint", e, _serviceDeliveryPointReference);
                    this._serviceDeliveryPoint = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetServiceDeliveryPoint;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetServiceDeliveryPoint;
                    }
                    this.OnServiceDeliveryPointChanged(e);
                    this.OnPropertyChanged("ServiceDeliveryPoint", e, _serviceDeliveryPointReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new PMUVoltageMeterChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/VoltagePhaseMeasurement" +
                            "s#//PMUVoltageMeter")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the MRID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MRIDChanging;
        
        /// <summary>
        /// Gets fired when the MRID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MRIDChanged;
        
        /// <summary>
        /// Gets fired before the VoltageAMag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageAMagChanging;
        
        /// <summary>
        /// Gets fired when the VoltageAMag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageAMagChanged;
        
        /// <summary>
        /// Gets fired before the VoltageAAng property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageAAngChanging;
        
        /// <summary>
        /// Gets fired when the VoltageAAng property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageAAngChanged;
        
        /// <summary>
        /// Gets fired before the VoltageBMag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageBMagChanging;
        
        /// <summary>
        /// Gets fired when the VoltageBMag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageBMagChanged;
        
        /// <summary>
        /// Gets fired before the VoltageBAng property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageBAngChanging;
        
        /// <summary>
        /// Gets fired when the VoltageBAng property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageBAngChanged;
        
        /// <summary>
        /// Gets fired before the VoltageCMag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageCMagChanging;
        
        /// <summary>
        /// Gets fired when the VoltageCMag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageCMagChanged;
        
        /// <summary>
        /// Gets fired before the VoltageCAng property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageCAngChanging;
        
        /// <summary>
        /// Gets fired when the VoltageCAng property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageCAngChanged;
        
        /// <summary>
        /// Gets fired before the VoltageNeutMag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageNeutMagChanging;
        
        /// <summary>
        /// Gets fired when the VoltageNeutMag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageNeutMagChanged;
        
        /// <summary>
        /// Gets fired before the VoltageNeutAng property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageNeutAngChanging;
        
        /// <summary>
        /// Gets fired when the VoltageNeutAng property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageNeutAngChanged;
        
        /// <summary>
        /// Gets fired before the VoltageNetMag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageNetMagChanging;
        
        /// <summary>
        /// Gets fired when the VoltageNetMag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageNetMagChanged;
        
        /// <summary>
        /// Gets fired before the VoltageNetAng property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageNetAngChanging;
        
        /// <summary>
        /// Gets fired when the VoltageNetAng property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageNetAngChanged;
        
        /// <summary>
        /// Gets fired before the VoltageResMag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageResMagChanging;
        
        /// <summary>
        /// Gets fired when the VoltageResMag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageResMagChanged;
        
        /// <summary>
        /// Gets fired before the VoltageResAng property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageResAngChanging;
        
        /// <summary>
        /// Gets fired when the VoltageResAng property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageResAngChanged;
        
        /// <summary>
        /// Gets fired before the ServiceDeliveryPoint property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceDeliveryPointChanging;
        
        /// <summary>
        /// Gets fired when the ServiceDeliveryPoint property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceDeliveryPointChanged;
        
        private static ITypedElement RetrieveMRIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.SmartGrids.OutagePreventionJointarget.PMUVoltageMeter.ClassInstance)).Resolve("mRID")));
        }
        
        /// <summary>
        /// Raises the MRIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMRIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MRIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MRIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMRIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MRIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVoltageAMagAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.SmartGrids.OutagePreventionJointarget.PMUVoltageMeter.ClassInstance)).Resolve("VoltageAMag")));
        }
        
        /// <summary>
        /// Raises the VoltageAMagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageAMagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageAMagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageAMagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageAMagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageAMagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVoltageAAngAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.SmartGrids.OutagePreventionJointarget.PMUVoltageMeter.ClassInstance)).Resolve("VoltageAAng")));
        }
        
        /// <summary>
        /// Raises the VoltageAAngChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageAAngChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageAAngChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageAAngChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageAAngChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageAAngChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVoltageBMagAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.SmartGrids.OutagePreventionJointarget.PMUVoltageMeter.ClassInstance)).Resolve("VoltageBMag")));
        }
        
        /// <summary>
        /// Raises the VoltageBMagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageBMagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageBMagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageBMagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageBMagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageBMagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVoltageBAngAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.SmartGrids.OutagePreventionJointarget.PMUVoltageMeter.ClassInstance)).Resolve("VoltageBAng")));
        }
        
        /// <summary>
        /// Raises the VoltageBAngChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageBAngChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageBAngChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageBAngChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageBAngChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageBAngChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVoltageCMagAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.SmartGrids.OutagePreventionJointarget.PMUVoltageMeter.ClassInstance)).Resolve("VoltageCMag")));
        }
        
        /// <summary>
        /// Raises the VoltageCMagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageCMagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageCMagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageCMagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageCMagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageCMagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVoltageCAngAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.SmartGrids.OutagePreventionJointarget.PMUVoltageMeter.ClassInstance)).Resolve("VoltageCAng")));
        }
        
        /// <summary>
        /// Raises the VoltageCAngChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageCAngChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageCAngChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageCAngChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageCAngChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageCAngChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVoltageNeutMagAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.SmartGrids.OutagePreventionJointarget.PMUVoltageMeter.ClassInstance)).Resolve("VoltageNeutMag")));
        }
        
        /// <summary>
        /// Raises the VoltageNeutMagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageNeutMagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageNeutMagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageNeutMagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageNeutMagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageNeutMagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVoltageNeutAngAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.SmartGrids.OutagePreventionJointarget.PMUVoltageMeter.ClassInstance)).Resolve("VoltageNeutAng")));
        }
        
        /// <summary>
        /// Raises the VoltageNeutAngChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageNeutAngChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageNeutAngChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageNeutAngChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageNeutAngChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageNeutAngChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVoltageNetMagAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.SmartGrids.OutagePreventionJointarget.PMUVoltageMeter.ClassInstance)).Resolve("VoltageNetMag")));
        }
        
        /// <summary>
        /// Raises the VoltageNetMagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageNetMagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageNetMagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageNetMagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageNetMagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageNetMagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVoltageNetAngAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.SmartGrids.OutagePreventionJointarget.PMUVoltageMeter.ClassInstance)).Resolve("VoltageNetAng")));
        }
        
        /// <summary>
        /// Raises the VoltageNetAngChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageNetAngChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageNetAngChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageNetAngChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageNetAngChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageNetAngChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVoltageResMagAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.SmartGrids.OutagePreventionJointarget.PMUVoltageMeter.ClassInstance)).Resolve("VoltageResMag")));
        }
        
        /// <summary>
        /// Raises the VoltageResMagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageResMagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageResMagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageResMagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageResMagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageResMagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVoltageResAngAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.SmartGrids.OutagePreventionJointarget.PMUVoltageMeter.ClassInstance)).Resolve("VoltageResAng")));
        }
        
        /// <summary>
        /// Raises the VoltageResAngChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageResAngChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageResAngChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageResAngChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageResAngChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageResAngChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveServiceDeliveryPointReference()
        {
            return ((ITypedElement)(((ModelElement)(TTC2017.SmartGrids.OutagePreventionJointarget.EndDeviceAsset.ClassInstance)).Resolve("ServiceDeliveryPoint")));
        }
        
        /// <summary>
        /// Raises the ServiceDeliveryPointChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceDeliveryPointChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceDeliveryPointChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServiceDeliveryPointChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceDeliveryPointChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceDeliveryPointChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ServiceDeliveryPoint property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetServiceDeliveryPoint(object sender, System.EventArgs eventArgs)
        {
            this.ServiceDeliveryPoint = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MRID"))
            {
                return this.MRID;
            }
            if ((attribute == "VOLTAGEAMAG"))
            {
                return this.VoltageAMag;
            }
            if ((attribute == "VOLTAGEAANG"))
            {
                return this.VoltageAAng;
            }
            if ((attribute == "VOLTAGEBMAG"))
            {
                return this.VoltageBMag;
            }
            if ((attribute == "VOLTAGEBANG"))
            {
                return this.VoltageBAng;
            }
            if ((attribute == "VOLTAGECMAG"))
            {
                return this.VoltageCMag;
            }
            if ((attribute == "VOLTAGECANG"))
            {
                return this.VoltageCAng;
            }
            if ((attribute == "VOLTAGENEUTMAG"))
            {
                return this.VoltageNeutMag;
            }
            if ((attribute == "VOLTAGENEUTANG"))
            {
                return this.VoltageNeutAng;
            }
            if ((attribute == "VOLTAGENETMAG"))
            {
                return this.VoltageNetMag;
            }
            if ((attribute == "VOLTAGENETANG"))
            {
                return this.VoltageNetAng;
            }
            if ((attribute == "VOLTAGERESMAG"))
            {
                return this.VoltageResMag;
            }
            if ((attribute == "VOLTAGERESANG"))
            {
                return this.VoltageResAng;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SERVICEDELIVERYPOINT"))
            {
                this.ServiceDeliveryPoint = ((IServiceDeliveryPoint)(value));
                return;
            }
            if ((feature == "MRID"))
            {
                this.MRID = ((string)(value));
                return;
            }
            if ((feature == "VOLTAGEAMAG"))
            {
                this.VoltageAMag = ((double)(value));
                return;
            }
            if ((feature == "VOLTAGEAANG"))
            {
                this.VoltageAAng = ((double)(value));
                return;
            }
            if ((feature == "VOLTAGEBMAG"))
            {
                this.VoltageBMag = ((double)(value));
                return;
            }
            if ((feature == "VOLTAGEBANG"))
            {
                this.VoltageBAng = ((double)(value));
                return;
            }
            if ((feature == "VOLTAGECMAG"))
            {
                this.VoltageCMag = ((double)(value));
                return;
            }
            if ((feature == "VOLTAGECANG"))
            {
                this.VoltageCAng = ((double)(value));
                return;
            }
            if ((feature == "VOLTAGENEUTMAG"))
            {
                this.VoltageNeutMag = ((double)(value));
                return;
            }
            if ((feature == "VOLTAGENEUTANG"))
            {
                this.VoltageNeutAng = ((double)(value));
                return;
            }
            if ((feature == "VOLTAGENETMAG"))
            {
                this.VoltageNetMag = ((double)(value));
                return;
            }
            if ((feature == "VOLTAGENETANG"))
            {
                this.VoltageNetAng = ((double)(value));
                return;
            }
            if ((feature == "VOLTAGERESMAG"))
            {
                this.VoltageResMag = ((double)(value));
                return;
            }
            if ((feature == "VOLTAGERESANG"))
            {
                this.VoltageResAng = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ServiceDeliveryPoint"))
            {
                return new ServiceDeliveryPointProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ServiceDeliveryPoint"))
            {
                return new ServiceDeliveryPointProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/VoltagePhaseMeasurement" +
                        "s#//PMUVoltageMeter")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PMUVoltageMeter class
        /// </summary>
        public class PMUVoltageMeterChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PMUVoltageMeter _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PMUVoltageMeterChildrenCollection(PMUVoltageMeter parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
            }
            
            protected override void DetachCore()
            {
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the mRID property
        /// </summary>
        private sealed class MRIDProxy : ModelPropertyChange<IPMUVoltageMeter, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MRIDProxy(IPMUVoltageMeter modelElement) : 
                    base(modelElement, "mRID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.MRID;
                }
                set
                {
                    this.ModelElement.MRID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VoltageAMag property
        /// </summary>
        private sealed class VoltageAMagProxy : ModelPropertyChange<IPMUVoltageMeter, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageAMagProxy(IPMUVoltageMeter modelElement) : 
                    base(modelElement, "VoltageAMag")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.VoltageAMag;
                }
                set
                {
                    this.ModelElement.VoltageAMag = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VoltageAAng property
        /// </summary>
        private sealed class VoltageAAngProxy : ModelPropertyChange<IPMUVoltageMeter, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageAAngProxy(IPMUVoltageMeter modelElement) : 
                    base(modelElement, "VoltageAAng")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.VoltageAAng;
                }
                set
                {
                    this.ModelElement.VoltageAAng = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VoltageBMag property
        /// </summary>
        private sealed class VoltageBMagProxy : ModelPropertyChange<IPMUVoltageMeter, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageBMagProxy(IPMUVoltageMeter modelElement) : 
                    base(modelElement, "VoltageBMag")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.VoltageBMag;
                }
                set
                {
                    this.ModelElement.VoltageBMag = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VoltageBAng property
        /// </summary>
        private sealed class VoltageBAngProxy : ModelPropertyChange<IPMUVoltageMeter, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageBAngProxy(IPMUVoltageMeter modelElement) : 
                    base(modelElement, "VoltageBAng")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.VoltageBAng;
                }
                set
                {
                    this.ModelElement.VoltageBAng = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VoltageCMag property
        /// </summary>
        private sealed class VoltageCMagProxy : ModelPropertyChange<IPMUVoltageMeter, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageCMagProxy(IPMUVoltageMeter modelElement) : 
                    base(modelElement, "VoltageCMag")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.VoltageCMag;
                }
                set
                {
                    this.ModelElement.VoltageCMag = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VoltageCAng property
        /// </summary>
        private sealed class VoltageCAngProxy : ModelPropertyChange<IPMUVoltageMeter, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageCAngProxy(IPMUVoltageMeter modelElement) : 
                    base(modelElement, "VoltageCAng")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.VoltageCAng;
                }
                set
                {
                    this.ModelElement.VoltageCAng = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VoltageNeutMag property
        /// </summary>
        private sealed class VoltageNeutMagProxy : ModelPropertyChange<IPMUVoltageMeter, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageNeutMagProxy(IPMUVoltageMeter modelElement) : 
                    base(modelElement, "VoltageNeutMag")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.VoltageNeutMag;
                }
                set
                {
                    this.ModelElement.VoltageNeutMag = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VoltageNeutAng property
        /// </summary>
        private sealed class VoltageNeutAngProxy : ModelPropertyChange<IPMUVoltageMeter, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageNeutAngProxy(IPMUVoltageMeter modelElement) : 
                    base(modelElement, "VoltageNeutAng")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.VoltageNeutAng;
                }
                set
                {
                    this.ModelElement.VoltageNeutAng = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VoltageNetMag property
        /// </summary>
        private sealed class VoltageNetMagProxy : ModelPropertyChange<IPMUVoltageMeter, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageNetMagProxy(IPMUVoltageMeter modelElement) : 
                    base(modelElement, "VoltageNetMag")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.VoltageNetMag;
                }
                set
                {
                    this.ModelElement.VoltageNetMag = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VoltageNetAng property
        /// </summary>
        private sealed class VoltageNetAngProxy : ModelPropertyChange<IPMUVoltageMeter, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageNetAngProxy(IPMUVoltageMeter modelElement) : 
                    base(modelElement, "VoltageNetAng")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.VoltageNetAng;
                }
                set
                {
                    this.ModelElement.VoltageNetAng = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VoltageResMag property
        /// </summary>
        private sealed class VoltageResMagProxy : ModelPropertyChange<IPMUVoltageMeter, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageResMagProxy(IPMUVoltageMeter modelElement) : 
                    base(modelElement, "VoltageResMag")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.VoltageResMag;
                }
                set
                {
                    this.ModelElement.VoltageResMag = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VoltageResAng property
        /// </summary>
        private sealed class VoltageResAngProxy : ModelPropertyChange<IPMUVoltageMeter, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageResAngProxy(IPMUVoltageMeter modelElement) : 
                    base(modelElement, "VoltageResAng")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.VoltageResAng;
                }
                set
                {
                    this.ModelElement.VoltageResAng = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ServiceDeliveryPoint property
        /// </summary>
        private sealed class ServiceDeliveryPointProxy : ModelPropertyChange<IEndDeviceAsset, IServiceDeliveryPoint>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ServiceDeliveryPointProxy(IEndDeviceAsset modelElement) : 
                    base(modelElement, "ServiceDeliveryPoint")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IServiceDeliveryPoint Value
            {
                get
                {
                    return this.ModelElement.ServiceDeliveryPoint;
                }
                set
                {
                    this.ModelElement.ServiceDeliveryPoint = value;
                }
            }
        }
    }
}

