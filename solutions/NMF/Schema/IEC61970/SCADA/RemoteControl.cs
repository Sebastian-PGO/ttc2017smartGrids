//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.SCADA
{
    
    
    /// <summary>
    /// The default implementation of the RemoteControl class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#SCADA")]
    [XmlNamespacePrefixAttribute("cimSCADA")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/SCADA/RemoteControl")]
    [DebuggerDisplayAttribute("RemoteControl {UUID}")]
    public partial class RemoteControl : RemotePoint, IRemoteControl, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ActuatorMaximum property
        /// </summary>
        private float _actuatorMaximum;
        
        private static Lazy<ITypedElement> _actuatorMaximumAttribute = new Lazy<ITypedElement>(RetrieveActuatorMaximumAttribute);
        
        /// <summary>
        /// The backing field for the RemoteControlled property
        /// </summary>
        private bool _remoteControlled;
        
        private static Lazy<ITypedElement> _remoteControlledAttribute = new Lazy<ITypedElement>(RetrieveRemoteControlledAttribute);
        
        /// <summary>
        /// The backing field for the ActuatorMinimum property
        /// </summary>
        private float _actuatorMinimum;
        
        private static Lazy<ITypedElement> _actuatorMinimumAttribute = new Lazy<ITypedElement>(RetrieveActuatorMinimumAttribute);
        
        private static Lazy<ITypedElement> _controlReference = new Lazy<ITypedElement>(RetrieveControlReference);
        
        /// <summary>
        /// The backing field for the Control property
        /// </summary>
        private IControl _control;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The actuatorMaximum property
        /// </summary>
        [XmlElementNameAttribute("actuatorMaximum")]
        [XmlAttributeAttribute(true)]
        public virtual float ActuatorMaximum
        {
            get
            {
                return this._actuatorMaximum;
            }
            set
            {
                if ((this._actuatorMaximum != value))
                {
                    float old = this._actuatorMaximum;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActuatorMaximumChanging(e);
                    this.OnPropertyChanging("ActuatorMaximum", e, _actuatorMaximumAttribute);
                    this._actuatorMaximum = value;
                    this.OnActuatorMaximumChanged(e);
                    this.OnPropertyChanged("ActuatorMaximum", e, _actuatorMaximumAttribute);
                }
            }
        }
        
        /// <summary>
        /// The remoteControlled property
        /// </summary>
        [XmlElementNameAttribute("remoteControlled")]
        [XmlAttributeAttribute(true)]
        public virtual bool RemoteControlled
        {
            get
            {
                return this._remoteControlled;
            }
            set
            {
                if ((this._remoteControlled != value))
                {
                    bool old = this._remoteControlled;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRemoteControlledChanging(e);
                    this.OnPropertyChanging("RemoteControlled", e, _remoteControlledAttribute);
                    this._remoteControlled = value;
                    this.OnRemoteControlledChanged(e);
                    this.OnPropertyChanged("RemoteControlled", e, _remoteControlledAttribute);
                }
            }
        }
        
        /// <summary>
        /// The actuatorMinimum property
        /// </summary>
        [XmlElementNameAttribute("actuatorMinimum")]
        [XmlAttributeAttribute(true)]
        public virtual float ActuatorMinimum
        {
            get
            {
                return this._actuatorMinimum;
            }
            set
            {
                if ((this._actuatorMinimum != value))
                {
                    float old = this._actuatorMinimum;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActuatorMinimumChanging(e);
                    this.OnPropertyChanging("ActuatorMinimum", e, _actuatorMinimumAttribute);
                    this._actuatorMinimum = value;
                    this.OnActuatorMinimumChanged(e);
                    this.OnPropertyChanged("ActuatorMinimum", e, _actuatorMinimumAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Control property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("RemoteControl")]
        public virtual IControl Control
        {
            get
            {
                return this._control;
            }
            set
            {
                if ((this._control != value))
                {
                    IControl old = this._control;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnControlChanging(e);
                    this.OnPropertyChanging("Control", e, _controlReference);
                    this._control = value;
                    if ((old != null))
                    {
                        old.RemoteControl = null;
                        old.Deleted -= this.OnResetControl;
                    }
                    if ((value != null))
                    {
                        value.RemoteControl = this;
                        value.Deleted += this.OnResetControl;
                    }
                    this.OnControlChanged(e);
                    this.OnPropertyChanged("Control", e, _controlReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RemoteControlReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/SCADA/RemoteControl")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ActuatorMaximum property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActuatorMaximumChanging;
        
        /// <summary>
        /// Gets fired when the ActuatorMaximum property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActuatorMaximumChanged;
        
        /// <summary>
        /// Gets fired before the RemoteControlled property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RemoteControlledChanging;
        
        /// <summary>
        /// Gets fired when the RemoteControlled property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RemoteControlledChanged;
        
        /// <summary>
        /// Gets fired before the ActuatorMinimum property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActuatorMinimumChanging;
        
        /// <summary>
        /// Gets fired when the ActuatorMinimum property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActuatorMinimumChanged;
        
        /// <summary>
        /// Gets fired before the Control property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ControlChanging;
        
        /// <summary>
        /// Gets fired when the Control property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ControlChanged;
        
        private static ITypedElement RetrieveActuatorMaximumAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RemoteControl.ClassInstance)).Resolve("actuatorMaximum")));
        }
        
        /// <summary>
        /// Raises the ActuatorMaximumChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActuatorMaximumChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActuatorMaximumChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActuatorMaximumChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActuatorMaximumChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActuatorMaximumChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRemoteControlledAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RemoteControl.ClassInstance)).Resolve("remoteControlled")));
        }
        
        /// <summary>
        /// Raises the RemoteControlledChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemoteControlledChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RemoteControlledChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RemoteControlledChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemoteControlledChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RemoteControlledChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActuatorMinimumAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RemoteControl.ClassInstance)).Resolve("actuatorMinimum")));
        }
        
        /// <summary>
        /// Raises the ActuatorMinimumChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActuatorMinimumChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActuatorMinimumChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActuatorMinimumChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActuatorMinimumChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActuatorMinimumChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveControlReference()
        {
            return ((ITypedElement)(((ModelElement)(RemoteControl.ClassInstance)).Resolve("Control")));
        }
        
        /// <summary>
        /// Raises the ControlChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnControlChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ControlChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ControlChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnControlChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ControlChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Control property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetControl(object sender, System.EventArgs eventArgs)
        {
            this.Control = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ACTUATORMAXIMUM"))
            {
                return this.ActuatorMaximum;
            }
            if ((attribute == "REMOTECONTROLLED"))
            {
                return this.RemoteControlled;
            }
            if ((attribute == "ACTUATORMINIMUM"))
            {
                return this.ActuatorMinimum;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CONTROL"))
            {
                this.Control = ((IControl)(value));
                return;
            }
            if ((feature == "ACTUATORMAXIMUM"))
            {
                this.ActuatorMaximum = ((float)(value));
                return;
            }
            if ((feature == "REMOTECONTROLLED"))
            {
                this.RemoteControlled = ((bool)(value));
                return;
            }
            if ((feature == "ACTUATORMINIMUM"))
            {
                this.ActuatorMinimum = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Control"))
            {
                return new ControlProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Control"))
            {
                return new ControlProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/SCADA/RemoteControl")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RemoteControl class
        /// </summary>
        public class RemoteControlReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RemoteControl _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RemoteControlReferencedElementsCollection(RemoteControl parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Control != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ControlChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ControlChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Control == null))
                {
                    IControl controlCasted = item.As<IControl>();
                    if ((controlCasted != null))
                    {
                        this._parent.Control = controlCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Control = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Control))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Control != null))
                {
                    array[arrayIndex] = this._parent.Control;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Control == item))
                {
                    this._parent.Control = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Control).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the actuatorMaximum property
        /// </summary>
        private sealed class ActuatorMaximumProxy : ModelPropertyChange<IRemoteControl, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActuatorMaximumProxy(IRemoteControl modelElement) : 
                    base(modelElement, "actuatorMaximum")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ActuatorMaximum;
                }
                set
                {
                    this.ModelElement.ActuatorMaximum = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the remoteControlled property
        /// </summary>
        private sealed class RemoteControlledProxy : ModelPropertyChange<IRemoteControl, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RemoteControlledProxy(IRemoteControl modelElement) : 
                    base(modelElement, "remoteControlled")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.RemoteControlled;
                }
                set
                {
                    this.ModelElement.RemoteControlled = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the actuatorMinimum property
        /// </summary>
        private sealed class ActuatorMinimumProxy : ModelPropertyChange<IRemoteControl, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActuatorMinimumProxy(IRemoteControl modelElement) : 
                    base(modelElement, "actuatorMinimum")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ActuatorMinimum;
                }
                set
                {
                    this.ModelElement.ActuatorMinimum = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Control property
        /// </summary>
        private sealed class ControlProxy : ModelPropertyChange<IRemoteControl, IControl>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ControlProxy(IRemoteControl modelElement) : 
                    base(modelElement, "Control")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IControl Value
            {
                get
                {
                    return this.ModelElement.Control;
                }
                set
                {
                    this.ModelElement.Control = value;
                }
            }
        }
    }
}

