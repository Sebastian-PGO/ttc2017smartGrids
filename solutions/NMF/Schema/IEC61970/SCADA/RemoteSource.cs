using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.SCADA
{
    
    
    /// <summary>
    /// The default implementation of the RemoteSource class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#SCADA")]
    [XmlNamespacePrefixAttribute("cimSCADA")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/SCADA/RemoteSource")]
    [DebuggerDisplayAttribute("RemoteSource {UUID}")]
    public partial class RemoteSource : RemotePoint, IRemoteSource, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Deadband property
        /// </summary>
        private float _deadband;
        
        private static Lazy<ITypedElement> _deadbandAttribute = new Lazy<ITypedElement>(RetrieveDeadbandAttribute);
        
        /// <summary>
        /// The backing field for the SensorMinimum property
        /// </summary>
        private float _sensorMinimum;
        
        private static Lazy<ITypedElement> _sensorMinimumAttribute = new Lazy<ITypedElement>(RetrieveSensorMinimumAttribute);
        
        /// <summary>
        /// The backing field for the ScanInterval property
        /// </summary>
        private float _scanInterval;
        
        private static Lazy<ITypedElement> _scanIntervalAttribute = new Lazy<ITypedElement>(RetrieveScanIntervalAttribute);
        
        /// <summary>
        /// The backing field for the SensorMaximum property
        /// </summary>
        private float _sensorMaximum;
        
        private static Lazy<ITypedElement> _sensorMaximumAttribute = new Lazy<ITypedElement>(RetrieveSensorMaximumAttribute);
        
        private static Lazy<ITypedElement> _measurementValueReference = new Lazy<ITypedElement>(RetrieveMeasurementValueReference);
        
        /// <summary>
        /// The backing field for the MeasurementValue property
        /// </summary>
        private IMeasurementValue _measurementValue;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The deadband property
        /// </summary>
        [XmlElementNameAttribute("deadband")]
        [XmlAttributeAttribute(true)]
        public virtual float Deadband
        {
            get
            {
                return this._deadband;
            }
            set
            {
                if ((this._deadband != value))
                {
                    float old = this._deadband;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDeadbandChanging(e);
                    this.OnPropertyChanging("Deadband", e, _deadbandAttribute);
                    this._deadband = value;
                    this.OnDeadbandChanged(e);
                    this.OnPropertyChanged("Deadband", e, _deadbandAttribute);
                }
            }
        }
        
        /// <summary>
        /// The sensorMinimum property
        /// </summary>
        [XmlElementNameAttribute("sensorMinimum")]
        [XmlAttributeAttribute(true)]
        public virtual float SensorMinimum
        {
            get
            {
                return this._sensorMinimum;
            }
            set
            {
                if ((this._sensorMinimum != value))
                {
                    float old = this._sensorMinimum;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSensorMinimumChanging(e);
                    this.OnPropertyChanging("SensorMinimum", e, _sensorMinimumAttribute);
                    this._sensorMinimum = value;
                    this.OnSensorMinimumChanged(e);
                    this.OnPropertyChanged("SensorMinimum", e, _sensorMinimumAttribute);
                }
            }
        }
        
        /// <summary>
        /// The scanInterval property
        /// </summary>
        [XmlElementNameAttribute("scanInterval")]
        [XmlAttributeAttribute(true)]
        public virtual float ScanInterval
        {
            get
            {
                return this._scanInterval;
            }
            set
            {
                if ((this._scanInterval != value))
                {
                    float old = this._scanInterval;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnScanIntervalChanging(e);
                    this.OnPropertyChanging("ScanInterval", e, _scanIntervalAttribute);
                    this._scanInterval = value;
                    this.OnScanIntervalChanged(e);
                    this.OnPropertyChanged("ScanInterval", e, _scanIntervalAttribute);
                }
            }
        }
        
        /// <summary>
        /// The sensorMaximum property
        /// </summary>
        [XmlElementNameAttribute("sensorMaximum")]
        [XmlAttributeAttribute(true)]
        public virtual float SensorMaximum
        {
            get
            {
                return this._sensorMaximum;
            }
            set
            {
                if ((this._sensorMaximum != value))
                {
                    float old = this._sensorMaximum;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSensorMaximumChanging(e);
                    this.OnPropertyChanging("SensorMaximum", e, _sensorMaximumAttribute);
                    this._sensorMaximum = value;
                    this.OnSensorMaximumChanged(e);
                    this.OnPropertyChanged("SensorMaximum", e, _sensorMaximumAttribute);
                }
            }
        }
        
        /// <summary>
        /// The MeasurementValue property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("RemoteSource")]
        public virtual IMeasurementValue MeasurementValue
        {
            get
            {
                return this._measurementValue;
            }
            set
            {
                if ((this._measurementValue != value))
                {
                    IMeasurementValue old = this._measurementValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurementValueChanging(e);
                    this.OnPropertyChanging("MeasurementValue", e, _measurementValueReference);
                    this._measurementValue = value;
                    if ((old != null))
                    {
                        old.RemoteSource = null;
                        old.Deleted -= this.OnResetMeasurementValue;
                    }
                    if ((value != null))
                    {
                        value.RemoteSource = this;
                        value.Deleted += this.OnResetMeasurementValue;
                    }
                    this.OnMeasurementValueChanged(e);
                    this.OnPropertyChanged("MeasurementValue", e, _measurementValueReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RemoteSourceReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/SCADA/RemoteSource")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Deadband property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeadbandChanging;
        
        /// <summary>
        /// Gets fired when the Deadband property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeadbandChanged;
        
        /// <summary>
        /// Gets fired before the SensorMinimum property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SensorMinimumChanging;
        
        /// <summary>
        /// Gets fired when the SensorMinimum property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SensorMinimumChanged;
        
        /// <summary>
        /// Gets fired before the ScanInterval property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ScanIntervalChanging;
        
        /// <summary>
        /// Gets fired when the ScanInterval property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ScanIntervalChanged;
        
        /// <summary>
        /// Gets fired before the SensorMaximum property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SensorMaximumChanging;
        
        /// <summary>
        /// Gets fired when the SensorMaximum property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SensorMaximumChanged;
        
        /// <summary>
        /// Gets fired before the MeasurementValue property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeasurementValueChanging;
        
        /// <summary>
        /// Gets fired when the MeasurementValue property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeasurementValueChanged;
        
        private static ITypedElement RetrieveDeadbandAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RemoteSource.ClassInstance)).Resolve("deadband")));
        }
        
        /// <summary>
        /// Raises the DeadbandChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeadbandChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeadbandChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DeadbandChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeadbandChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeadbandChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSensorMinimumAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RemoteSource.ClassInstance)).Resolve("sensorMinimum")));
        }
        
        /// <summary>
        /// Raises the SensorMinimumChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSensorMinimumChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SensorMinimumChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SensorMinimumChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSensorMinimumChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SensorMinimumChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveScanIntervalAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RemoteSource.ClassInstance)).Resolve("scanInterval")));
        }
        
        /// <summary>
        /// Raises the ScanIntervalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScanIntervalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ScanIntervalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ScanIntervalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScanIntervalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ScanIntervalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSensorMaximumAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RemoteSource.ClassInstance)).Resolve("sensorMaximum")));
        }
        
        /// <summary>
        /// Raises the SensorMaximumChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSensorMaximumChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SensorMaximumChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SensorMaximumChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSensorMaximumChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SensorMaximumChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMeasurementValueReference()
        {
            return ((ITypedElement)(((ModelElement)(RemoteSource.ClassInstance)).Resolve("MeasurementValue")));
        }
        
        /// <summary>
        /// Raises the MeasurementValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeasurementValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeasurementValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeasurementValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MeasurementValue property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeasurementValue(object sender, System.EventArgs eventArgs)
        {
            this.MeasurementValue = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "DEADBAND"))
            {
                return this.Deadband;
            }
            if ((attribute == "SENSORMINIMUM"))
            {
                return this.SensorMinimum;
            }
            if ((attribute == "SCANINTERVAL"))
            {
                return this.ScanInterval;
            }
            if ((attribute == "SENSORMAXIMUM"))
            {
                return this.SensorMaximum;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MEASUREMENTVALUE"))
            {
                this.MeasurementValue = ((IMeasurementValue)(value));
                return;
            }
            if ((feature == "DEADBAND"))
            {
                this.Deadband = ((float)(value));
                return;
            }
            if ((feature == "SENSORMINIMUM"))
            {
                this.SensorMinimum = ((float)(value));
                return;
            }
            if ((feature == "SCANINTERVAL"))
            {
                this.ScanInterval = ((float)(value));
                return;
            }
            if ((feature == "SENSORMAXIMUM"))
            {
                this.SensorMaximum = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "MeasurementValue"))
            {
                return new MeasurementValueProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "MeasurementValue"))
            {
                return new MeasurementValueProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/SCADA/RemoteSource")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RemoteSource class
        /// </summary>
        public class RemoteSourceReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RemoteSource _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RemoteSourceReferencedElementsCollection(RemoteSource parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.MeasurementValue != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.MeasurementValueChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.MeasurementValueChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.MeasurementValue == null))
                {
                    IMeasurementValue measurementValueCasted = item.As<IMeasurementValue>();
                    if ((measurementValueCasted != null))
                    {
                        this._parent.MeasurementValue = measurementValueCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.MeasurementValue = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.MeasurementValue))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.MeasurementValue != null))
                {
                    array[arrayIndex] = this._parent.MeasurementValue;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.MeasurementValue == item))
                {
                    this._parent.MeasurementValue = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.MeasurementValue).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the deadband property
        /// </summary>
        private sealed class DeadbandProxy : ModelPropertyChange<IRemoteSource, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DeadbandProxy(IRemoteSource modelElement) : 
                    base(modelElement, "deadband")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Deadband;
                }
                set
                {
                    this.ModelElement.Deadband = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sensorMinimum property
        /// </summary>
        private sealed class SensorMinimumProxy : ModelPropertyChange<IRemoteSource, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SensorMinimumProxy(IRemoteSource modelElement) : 
                    base(modelElement, "sensorMinimum")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SensorMinimum;
                }
                set
                {
                    this.ModelElement.SensorMinimum = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the scanInterval property
        /// </summary>
        private sealed class ScanIntervalProxy : ModelPropertyChange<IRemoteSource, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ScanIntervalProxy(IRemoteSource modelElement) : 
                    base(modelElement, "scanInterval")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ScanInterval;
                }
                set
                {
                    this.ModelElement.ScanInterval = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sensorMaximum property
        /// </summary>
        private sealed class SensorMaximumProxy : ModelPropertyChange<IRemoteSource, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SensorMaximumProxy(IRemoteSource modelElement) : 
                    base(modelElement, "sensorMaximum")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SensorMaximum;
                }
                set
                {
                    this.ModelElement.SensorMaximum = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeasurementValue property
        /// </summary>
        private sealed class MeasurementValueProxy : ModelPropertyChange<IRemoteSource, IMeasurementValue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeasurementValueProxy(IRemoteSource modelElement) : 
                    base(modelElement, "MeasurementValue")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeasurementValue Value
            {
                get
                {
                    return this.ModelElement.MeasurementValue;
                }
                set
                {
                    this.ModelElement.MeasurementValue = value;
                }
            }
        }
    }
}

