using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.LoadModel
{
    
    
    /// <summary>
    /// The default implementation of the PowerCutZone class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#LoadModel")]
    [XmlNamespacePrefixAttribute("cimLoadModel")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/LoadModel/PowerCutZone")]
    [DebuggerDisplayAttribute("PowerCutZone {UUID}")]
    public partial class PowerCutZone : PowerSystemResource, IPowerCutZone, IModelElement
    {
        
        /// <summary>
        /// The backing field for the CutLevel1 property
        /// </summary>
        private float _cutLevel1;
        
        private static Lazy<ITypedElement> _cutLevel1Attribute = new Lazy<ITypedElement>(RetrieveCutLevel1Attribute);
        
        /// <summary>
        /// The backing field for the CutLevel2 property
        /// </summary>
        private float _cutLevel2;
        
        private static Lazy<ITypedElement> _cutLevel2Attribute = new Lazy<ITypedElement>(RetrieveCutLevel2Attribute);
        
        private static Lazy<ITypedElement> _energyConsumersReference = new Lazy<ITypedElement>(RetrieveEnergyConsumersReference);
        
        /// <summary>
        /// The backing field for the EnergyConsumers property
        /// </summary>
        private PowerCutZoneEnergyConsumersCollection _energyConsumers;
        
        private static IClass _classInstance;
        
        public PowerCutZone()
        {
            this._energyConsumers = new PowerCutZoneEnergyConsumersCollection(this);
            this._energyConsumers.CollectionChanging += this.EnergyConsumersCollectionChanging;
            this._energyConsumers.CollectionChanged += this.EnergyConsumersCollectionChanged;
        }
        
        /// <summary>
        /// The cutLevel1 property
        /// </summary>
        [XmlElementNameAttribute("cutLevel1")]
        [XmlAttributeAttribute(true)]
        public virtual float CutLevel1
        {
            get
            {
                return this._cutLevel1;
            }
            set
            {
                if ((this._cutLevel1 != value))
                {
                    float old = this._cutLevel1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCutLevel1Changing(e);
                    this.OnPropertyChanging("CutLevel1", e, _cutLevel1Attribute);
                    this._cutLevel1 = value;
                    this.OnCutLevel1Changed(e);
                    this.OnPropertyChanged("CutLevel1", e, _cutLevel1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The cutLevel2 property
        /// </summary>
        [XmlElementNameAttribute("cutLevel2")]
        [XmlAttributeAttribute(true)]
        public virtual float CutLevel2
        {
            get
            {
                return this._cutLevel2;
            }
            set
            {
                if ((this._cutLevel2 != value))
                {
                    float old = this._cutLevel2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCutLevel2Changing(e);
                    this.OnPropertyChanging("CutLevel2", e, _cutLevel2Attribute);
                    this._cutLevel2 = value;
                    this.OnCutLevel2Changed(e);
                    this.OnPropertyChanged("CutLevel2", e, _cutLevel2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The EnergyConsumers property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PowerCutZone")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEnergyConsumer> EnergyConsumers
        {
            get
            {
                return this._energyConsumers;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PowerCutZoneReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/LoadModel/PowerCutZone")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the CutLevel1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CutLevel1Changing;
        
        /// <summary>
        /// Gets fired when the CutLevel1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CutLevel1Changed;
        
        /// <summary>
        /// Gets fired before the CutLevel2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CutLevel2Changing;
        
        /// <summary>
        /// Gets fired when the CutLevel2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CutLevel2Changed;
        
        private static ITypedElement RetrieveCutLevel1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(PowerCutZone.ClassInstance)).Resolve("cutLevel1")));
        }
        
        /// <summary>
        /// Raises the CutLevel1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCutLevel1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CutLevel1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CutLevel1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCutLevel1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CutLevel1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCutLevel2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(PowerCutZone.ClassInstance)).Resolve("cutLevel2")));
        }
        
        /// <summary>
        /// Raises the CutLevel2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCutLevel2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CutLevel2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CutLevel2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCutLevel2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CutLevel2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEnergyConsumersReference()
        {
            return ((ITypedElement)(((ModelElement)(PowerCutZone.ClassInstance)).Resolve("EnergyConsumers")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EnergyConsumers property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EnergyConsumersCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("EnergyConsumers", e, _energyConsumersReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EnergyConsumers property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EnergyConsumersCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EnergyConsumers", e, _energyConsumersReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CUTLEVEL1"))
            {
                return this.CutLevel1;
            }
            if ((attribute == "CUTLEVEL2"))
            {
                return this.CutLevel2;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ENERGYCONSUMERS"))
            {
                return this._energyConsumers;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CUTLEVEL1"))
            {
                this.CutLevel1 = ((float)(value));
                return;
            }
            if ((feature == "CUTLEVEL2"))
            {
                this.CutLevel2 = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/LoadModel/PowerCutZone")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PowerCutZone class
        /// </summary>
        public class PowerCutZoneReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PowerCutZone _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PowerCutZoneReferencedElementsCollection(PowerCutZone parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.EnergyConsumers.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.EnergyConsumers.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.EnergyConsumers.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IEnergyConsumer energyConsumersCasted = item.As<IEnergyConsumer>();
                if ((energyConsumersCasted != null))
                {
                    this._parent.EnergyConsumers.Add(energyConsumersCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EnergyConsumers.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.EnergyConsumers.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> energyConsumersEnumerator = this._parent.EnergyConsumers.GetEnumerator();
                try
                {
                    for (
                    ; energyConsumersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = energyConsumersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    energyConsumersEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IEnergyConsumer energyConsumerItem = item.As<IEnergyConsumer>();
                if (((energyConsumerItem != null) 
                            && this._parent.EnergyConsumers.Remove(energyConsumerItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EnergyConsumers).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the cutLevel1 property
        /// </summary>
        private sealed class CutLevel1Proxy : ModelPropertyChange<IPowerCutZone, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CutLevel1Proxy(IPowerCutZone modelElement) : 
                    base(modelElement, "cutLevel1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CutLevel1;
                }
                set
                {
                    this.ModelElement.CutLevel1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the cutLevel2 property
        /// </summary>
        private sealed class CutLevel2Proxy : ModelPropertyChange<IPowerCutZone, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CutLevel2Proxy(IPowerCutZone modelElement) : 
                    base(modelElement, "cutLevel2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CutLevel2;
                }
                set
                {
                    this.ModelElement.CutLevel2 = value;
                }
            }
        }
    }
}

