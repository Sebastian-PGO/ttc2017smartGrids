//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.LoadModel
{
    
    
    /// <summary>
    /// The default implementation of the NonConformLoadGroup class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#LoadModel")]
    [XmlNamespacePrefixAttribute("cimLoadModel")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/LoadModel/NonConformLoadGroup" +
        "")]
    [DebuggerDisplayAttribute("NonConformLoadGroup {UUID}")]
    public partial class NonConformLoadGroup : LoadGroup, INonConformLoadGroup, IModelElement
    {
        
        private static Lazy<ITypedElement> _nonConformLoadSchedulesReference = new Lazy<ITypedElement>(RetrieveNonConformLoadSchedulesReference);
        
        /// <summary>
        /// The backing field for the NonConformLoadSchedules property
        /// </summary>
        private NonConformLoadGroupNonConformLoadSchedulesCollection _nonConformLoadSchedules;
        
        private static Lazy<ITypedElement> _energyConsumersReference = new Lazy<ITypedElement>(RetrieveEnergyConsumersReference);
        
        /// <summary>
        /// The backing field for the EnergyConsumers property
        /// </summary>
        private NonConformLoadGroupEnergyConsumersCollection _energyConsumers;
        
        private static IClass _classInstance;
        
        public NonConformLoadGroup()
        {
            this._nonConformLoadSchedules = new NonConformLoadGroupNonConformLoadSchedulesCollection(this);
            this._nonConformLoadSchedules.CollectionChanging += this.NonConformLoadSchedulesCollectionChanging;
            this._nonConformLoadSchedules.CollectionChanged += this.NonConformLoadSchedulesCollectionChanged;
            this._energyConsumers = new NonConformLoadGroupEnergyConsumersCollection(this);
            this._energyConsumers.CollectionChanging += this.EnergyConsumersCollectionChanging;
            this._energyConsumers.CollectionChanged += this.EnergyConsumersCollectionChanged;
        }
        
        /// <summary>
        /// The NonConformLoadSchedules property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("NonConformLoadGroup")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<INonConformLoadSchedule> NonConformLoadSchedules
        {
            get
            {
                return this._nonConformLoadSchedules;
            }
        }
        
        /// <summary>
        /// The EnergyConsumers property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("LoadGroup")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<INonConformLoad> EnergyConsumers
        {
            get
            {
                return this._energyConsumers;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new NonConformLoadGroupReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/LoadModel/NonConformLoadGroup" +
                            "")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveNonConformLoadSchedulesReference()
        {
            return ((ITypedElement)(((ModelElement)(NonConformLoadGroup.ClassInstance)).Resolve("NonConformLoadSchedules")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the NonConformLoadSchedules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NonConformLoadSchedulesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("NonConformLoadSchedules", e, _nonConformLoadSchedulesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the NonConformLoadSchedules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NonConformLoadSchedulesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("NonConformLoadSchedules", e, _nonConformLoadSchedulesReference);
        }
        
        private static ITypedElement RetrieveEnergyConsumersReference()
        {
            return ((ITypedElement)(((ModelElement)(NonConformLoadGroup.ClassInstance)).Resolve("EnergyConsumers")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EnergyConsumers property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EnergyConsumersCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("EnergyConsumers", e, _energyConsumersReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EnergyConsumers property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EnergyConsumersCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EnergyConsumers", e, _energyConsumersReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "NONCONFORMLOADSCHEDULES"))
            {
                return this._nonConformLoadSchedules;
            }
            if ((feature == "ENERGYCONSUMERS"))
            {
                return this._energyConsumers;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/LoadModel/NonConformLoadGroup" +
                        "")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the NonConformLoadGroup class
        /// </summary>
        public class NonConformLoadGroupReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private NonConformLoadGroup _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public NonConformLoadGroupReferencedElementsCollection(NonConformLoadGroup parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.NonConformLoadSchedules.Count);
                    count = (count + this._parent.EnergyConsumers.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.NonConformLoadSchedules.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.EnergyConsumers.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.NonConformLoadSchedules.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.EnergyConsumers.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                INonConformLoadSchedule nonConformLoadSchedulesCasted = item.As<INonConformLoadSchedule>();
                if ((nonConformLoadSchedulesCasted != null))
                {
                    this._parent.NonConformLoadSchedules.Add(nonConformLoadSchedulesCasted);
                }
                INonConformLoad energyConsumersCasted = item.As<INonConformLoad>();
                if ((energyConsumersCasted != null))
                {
                    this._parent.EnergyConsumers.Add(energyConsumersCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.NonConformLoadSchedules.Clear();
                this._parent.EnergyConsumers.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.NonConformLoadSchedules.Contains(item))
                {
                    return true;
                }
                if (this._parent.EnergyConsumers.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> nonConformLoadSchedulesEnumerator = this._parent.NonConformLoadSchedules.GetEnumerator();
                try
                {
                    for (
                    ; nonConformLoadSchedulesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = nonConformLoadSchedulesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    nonConformLoadSchedulesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> energyConsumersEnumerator = this._parent.EnergyConsumers.GetEnumerator();
                try
                {
                    for (
                    ; energyConsumersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = energyConsumersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    energyConsumersEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                INonConformLoadSchedule nonConformLoadScheduleItem = item.As<INonConformLoadSchedule>();
                if (((nonConformLoadScheduleItem != null) 
                            && this._parent.NonConformLoadSchedules.Remove(nonConformLoadScheduleItem)))
                {
                    return true;
                }
                INonConformLoad nonConformLoadItem = item.As<INonConformLoad>();
                if (((nonConformLoadItem != null) 
                            && this._parent.EnergyConsumers.Remove(nonConformLoadItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.NonConformLoadSchedules).Concat(this._parent.EnergyConsumers).GetEnumerator();
            }
        }
    }
}

