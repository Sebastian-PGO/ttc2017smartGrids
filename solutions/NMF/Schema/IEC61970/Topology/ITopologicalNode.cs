//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Topology
{
    
    
    /// <summary>
    /// The public interface for TopologicalNode
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(TopologicalNode))]
    [XmlDefaultImplementationTypeAttribute(typeof(TopologicalNode))]
    public interface ITopologicalNode : IModelElement, IIdentifiedObject
    {
        
        /// <summary>
        /// The ReportingGroup property
        /// </summary>
        IReportingGroup ReportingGroup
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TopologicalIsland property
        /// </summary>
        ITopologicalIsland TopologicalIsland
        {
            get;
            set;
        }
        
        /// <summary>
        /// The SvInjection property
        /// </summary>
        ISvInjection SvInjection
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Terminal property
        /// </summary>
        IOrderedSetExpression<ITerminal> Terminal
        {
            get;
        }
        
        /// <summary>
        /// The ConnectivityNodeContainer property
        /// </summary>
        IConnectivityNodeContainer ConnectivityNodeContainer
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ConnectivityNodes property
        /// </summary>
        IOrderedSetExpression<IConnectivityNode> ConnectivityNodes
        {
            get;
        }
        
        /// <summary>
        /// The BaseVoltage property
        /// </summary>
        IBaseVoltage BaseVoltage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The SvVoltage property
        /// </summary>
        ISvVoltage SvVoltage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The SvShortCircuit property
        /// </summary>
        ISvShortCircuit SvShortCircuit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The AngleRef_TopologicalIsland property
        /// </summary>
        ITopologicalIsland AngleRef_TopologicalIsland
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the ReportingGroup property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReportingGroupChanging;
        
        /// <summary>
        /// Gets fired when the ReportingGroup property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReportingGroupChanged;
        
        /// <summary>
        /// Gets fired before the TopologicalIsland property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TopologicalIslandChanging;
        
        /// <summary>
        /// Gets fired when the TopologicalIsland property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TopologicalIslandChanged;
        
        /// <summary>
        /// Gets fired before the SvInjection property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SvInjectionChanging;
        
        /// <summary>
        /// Gets fired when the SvInjection property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SvInjectionChanged;
        
        /// <summary>
        /// Gets fired before the ConnectivityNodeContainer property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ConnectivityNodeContainerChanging;
        
        /// <summary>
        /// Gets fired when the ConnectivityNodeContainer property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ConnectivityNodeContainerChanged;
        
        /// <summary>
        /// Gets fired before the BaseVoltage property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BaseVoltageChanging;
        
        /// <summary>
        /// Gets fired when the BaseVoltage property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BaseVoltageChanged;
        
        /// <summary>
        /// Gets fired before the SvVoltage property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SvVoltageChanging;
        
        /// <summary>
        /// Gets fired when the SvVoltage property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SvVoltageChanged;
        
        /// <summary>
        /// Gets fired before the SvShortCircuit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SvShortCircuitChanging;
        
        /// <summary>
        /// Gets fired when the SvShortCircuit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SvShortCircuitChanged;
        
        /// <summary>
        /// Gets fired before the AngleRef_TopologicalIsland property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AngleRef_TopologicalIslandChanging;
        
        /// <summary>
        /// Gets fired when the AngleRef_TopologicalIsland property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AngleRef_TopologicalIslandChanged;
    }
}

