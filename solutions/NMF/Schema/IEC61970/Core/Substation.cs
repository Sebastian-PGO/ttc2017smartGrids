using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCore;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;
using TTC2017.SmartGrids.CIM.IEC61970.Topology;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Core
{
    
    
    /// <summary>
    /// The default implementation of the Substation class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Core")]
    [XmlNamespacePrefixAttribute("cimCore")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/Substation")]
    [DebuggerDisplayAttribute("Substation {UUID}")]
    public partial class Substation : EquipmentContainer, ISubstation, IModelElement
    {
        
        private static Lazy<ITypedElement> _baysReference = new Lazy<ITypedElement>(RetrieveBaysReference);
        
        /// <summary>
        /// The backing field for the Bays property
        /// </summary>
        private SubstationBaysCollection _bays;
        
        private static Lazy<ITypedElement> _regionReference = new Lazy<ITypedElement>(RetrieveRegionReference);
        
        /// <summary>
        /// The backing field for the Region property
        /// </summary>
        private ISubGeographicalRegion _region;
        
        private static Lazy<ITypedElement> _voltageLevelsReference = new Lazy<ITypedElement>(RetrieveVoltageLevelsReference);
        
        /// <summary>
        /// The backing field for the VoltageLevels property
        /// </summary>
        private SubstationVoltageLevelsCollection _voltageLevels;
        
        private static IClass _classInstance;
        
        public Substation()
        {
            this._bays = new SubstationBaysCollection(this);
            this._bays.CollectionChanging += this.BaysCollectionChanging;
            this._bays.CollectionChanged += this.BaysCollectionChanged;
            this._voltageLevels = new SubstationVoltageLevelsCollection(this);
            this._voltageLevels.CollectionChanging += this.VoltageLevelsCollectionChanging;
            this._voltageLevels.CollectionChanged += this.VoltageLevelsCollectionChanged;
        }
        
        /// <summary>
        /// The Bays property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Substation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IBay> Bays
        {
            get
            {
                return this._bays;
            }
        }
        
        /// <summary>
        /// The Region property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Substations")]
        public virtual ISubGeographicalRegion Region
        {
            get
            {
                return this._region;
            }
            set
            {
                if ((this._region != value))
                {
                    ISubGeographicalRegion old = this._region;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRegionChanging(e);
                    this.OnPropertyChanging("Region", e, _regionReference);
                    this._region = value;
                    if ((old != null))
                    {
                        old.Substations.Remove(this);
                        old.Deleted -= this.OnResetRegion;
                    }
                    if ((value != null))
                    {
                        value.Substations.Add(this);
                        value.Deleted += this.OnResetRegion;
                    }
                    this.OnRegionChanged(e);
                    this.OnPropertyChanged("Region", e, _regionReference);
                }
            }
        }
        
        /// <summary>
        /// The VoltageLevels property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Substation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IVoltageLevel> VoltageLevels
        {
            get
            {
                return this._voltageLevels;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SubstationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/Substation")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Region property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegionChanging;
        
        /// <summary>
        /// Gets fired when the Region property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegionChanged;
        
        private static ITypedElement RetrieveBaysReference()
        {
            return ((ITypedElement)(((ModelElement)(Substation.ClassInstance)).Resolve("Bays")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Bays property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BaysCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Bays", e, _baysReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Bays property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BaysCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Bays", e, _baysReference);
        }
        
        private static ITypedElement RetrieveRegionReference()
        {
            return ((ITypedElement)(((ModelElement)(Substation.ClassInstance)).Resolve("Region")));
        }
        
        /// <summary>
        /// Raises the RegionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RegionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Region property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRegion(object sender, System.EventArgs eventArgs)
        {
            this.Region = null;
        }
        
        private static ITypedElement RetrieveVoltageLevelsReference()
        {
            return ((ITypedElement)(((ModelElement)(Substation.ClassInstance)).Resolve("VoltageLevels")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the VoltageLevels property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VoltageLevelsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("VoltageLevels", e, _voltageLevelsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the VoltageLevels property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VoltageLevelsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("VoltageLevels", e, _voltageLevelsReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "BAYS"))
            {
                return this._bays;
            }
            if ((feature == "VOLTAGELEVELS"))
            {
                return this._voltageLevels;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REGION"))
            {
                this.Region = ((ISubGeographicalRegion)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Region"))
            {
                return new RegionProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Region"))
            {
                return new RegionProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/Substation")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Substation class
        /// </summary>
        public class SubstationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Substation _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SubstationReferencedElementsCollection(Substation parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Bays.Count);
                    if ((this._parent.Region != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.VoltageLevels.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Bays.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RegionChanged += this.PropagateValueChanges;
                this._parent.VoltageLevels.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Bays.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RegionChanged -= this.PropagateValueChanges;
                this._parent.VoltageLevels.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IBay baysCasted = item.As<IBay>();
                if ((baysCasted != null))
                {
                    this._parent.Bays.Add(baysCasted);
                }
                if ((this._parent.Region == null))
                {
                    ISubGeographicalRegion regionCasted = item.As<ISubGeographicalRegion>();
                    if ((regionCasted != null))
                    {
                        this._parent.Region = regionCasted;
                        return;
                    }
                }
                IVoltageLevel voltageLevelsCasted = item.As<IVoltageLevel>();
                if ((voltageLevelsCasted != null))
                {
                    this._parent.VoltageLevels.Add(voltageLevelsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Bays.Clear();
                this._parent.Region = null;
                this._parent.VoltageLevels.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Bays.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Region))
                {
                    return true;
                }
                if (this._parent.VoltageLevels.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> baysEnumerator = this._parent.Bays.GetEnumerator();
                try
                {
                    for (
                    ; baysEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = baysEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    baysEnumerator.Dispose();
                }
                if ((this._parent.Region != null))
                {
                    array[arrayIndex] = this._parent.Region;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> voltageLevelsEnumerator = this._parent.VoltageLevels.GetEnumerator();
                try
                {
                    for (
                    ; voltageLevelsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = voltageLevelsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    voltageLevelsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IBay bayItem = item.As<IBay>();
                if (((bayItem != null) 
                            && this._parent.Bays.Remove(bayItem)))
                {
                    return true;
                }
                if ((this._parent.Region == item))
                {
                    this._parent.Region = null;
                    return true;
                }
                IVoltageLevel voltageLevelItem = item.As<IVoltageLevel>();
                if (((voltageLevelItem != null) 
                            && this._parent.VoltageLevels.Remove(voltageLevelItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Bays).Concat(this._parent.Region).Concat(this._parent.VoltageLevels).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Region property
        /// </summary>
        private sealed class RegionProxy : ModelPropertyChange<ISubstation, ISubGeographicalRegion>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RegionProxy(ISubstation modelElement) : 
                    base(modelElement, "Region")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISubGeographicalRegion Value
            {
                get
                {
                    return this.ModelElement.Region;
                }
                set
                {
                    this.ModelElement.Region = value;
                }
            }
        }
    }
}

