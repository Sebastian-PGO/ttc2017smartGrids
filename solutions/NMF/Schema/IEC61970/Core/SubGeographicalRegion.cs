using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCore;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;
using TTC2017.SmartGrids.CIM.IEC61970.Topology;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Core
{
    
    
    /// <summary>
    /// The default implementation of the SubGeographicalRegion class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Core")]
    [XmlNamespacePrefixAttribute("cimCore")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/SubGeographicalRegion")]
    [DebuggerDisplayAttribute("SubGeographicalRegion {UUID}")]
    public partial class SubGeographicalRegion : IdentifiedObject, ISubGeographicalRegion, IModelElement
    {
        
        private static Lazy<ITypedElement> _linesReference = new Lazy<ITypedElement>(RetrieveLinesReference);
        
        /// <summary>
        /// The backing field for the Lines property
        /// </summary>
        private SubGeographicalRegionLinesCollection _lines;
        
        private static Lazy<ITypedElement> _regionReference = new Lazy<ITypedElement>(RetrieveRegionReference);
        
        /// <summary>
        /// The backing field for the Region property
        /// </summary>
        private IGeographicalRegion _region;
        
        private static Lazy<ITypedElement> _substationsReference = new Lazy<ITypedElement>(RetrieveSubstationsReference);
        
        /// <summary>
        /// The backing field for the Substations property
        /// </summary>
        private SubGeographicalRegionSubstationsCollection _substations;
        
        private static IClass _classInstance;
        
        public SubGeographicalRegion()
        {
            this._lines = new SubGeographicalRegionLinesCollection(this);
            this._lines.CollectionChanging += this.LinesCollectionChanging;
            this._lines.CollectionChanged += this.LinesCollectionChanged;
            this._substations = new SubGeographicalRegionSubstationsCollection(this);
            this._substations.CollectionChanging += this.SubstationsCollectionChanging;
            this._substations.CollectionChanged += this.SubstationsCollectionChanged;
        }
        
        /// <summary>
        /// The Lines property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Region")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILine> Lines
        {
            get
            {
                return this._lines;
            }
        }
        
        /// <summary>
        /// The Region property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Regions")]
        public virtual IGeographicalRegion Region
        {
            get
            {
                return this._region;
            }
            set
            {
                if ((this._region != value))
                {
                    IGeographicalRegion old = this._region;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRegionChanging(e);
                    this.OnPropertyChanging("Region", e, _regionReference);
                    this._region = value;
                    if ((old != null))
                    {
                        old.Regions.Remove(this);
                        old.Deleted -= this.OnResetRegion;
                    }
                    if ((value != null))
                    {
                        value.Regions.Add(this);
                        value.Deleted += this.OnResetRegion;
                    }
                    this.OnRegionChanged(e);
                    this.OnPropertyChanged("Region", e, _regionReference);
                }
            }
        }
        
        /// <summary>
        /// The Substations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Region")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISubstation> Substations
        {
            get
            {
                return this._substations;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SubGeographicalRegionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/SubGeographicalRegion")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Region property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegionChanging;
        
        /// <summary>
        /// Gets fired when the Region property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegionChanged;
        
        private static ITypedElement RetrieveLinesReference()
        {
            return ((ITypedElement)(((ModelElement)(SubGeographicalRegion.ClassInstance)).Resolve("Lines")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Lines property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LinesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Lines", e, _linesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Lines property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LinesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Lines", e, _linesReference);
        }
        
        private static ITypedElement RetrieveRegionReference()
        {
            return ((ITypedElement)(((ModelElement)(SubGeographicalRegion.ClassInstance)).Resolve("Region")));
        }
        
        /// <summary>
        /// Raises the RegionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RegionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Region property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRegion(object sender, System.EventArgs eventArgs)
        {
            this.Region = null;
        }
        
        private static ITypedElement RetrieveSubstationsReference()
        {
            return ((ITypedElement)(((ModelElement)(SubGeographicalRegion.ClassInstance)).Resolve("Substations")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Substations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SubstationsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Substations", e, _substationsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Substations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SubstationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Substations", e, _substationsReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "LINES"))
            {
                return this._lines;
            }
            if ((feature == "SUBSTATIONS"))
            {
                return this._substations;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REGION"))
            {
                this.Region = ((IGeographicalRegion)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Region"))
            {
                return new RegionProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Region"))
            {
                return new RegionProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/SubGeographicalRegion")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SubGeographicalRegion class
        /// </summary>
        public class SubGeographicalRegionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SubGeographicalRegion _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SubGeographicalRegionReferencedElementsCollection(SubGeographicalRegion parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Lines.Count);
                    if ((this._parent.Region != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Substations.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Lines.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RegionChanged += this.PropagateValueChanges;
                this._parent.Substations.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Lines.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RegionChanged -= this.PropagateValueChanges;
                this._parent.Substations.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ILine linesCasted = item.As<ILine>();
                if ((linesCasted != null))
                {
                    this._parent.Lines.Add(linesCasted);
                }
                if ((this._parent.Region == null))
                {
                    IGeographicalRegion regionCasted = item.As<IGeographicalRegion>();
                    if ((regionCasted != null))
                    {
                        this._parent.Region = regionCasted;
                        return;
                    }
                }
                ISubstation substationsCasted = item.As<ISubstation>();
                if ((substationsCasted != null))
                {
                    this._parent.Substations.Add(substationsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Lines.Clear();
                this._parent.Region = null;
                this._parent.Substations.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Lines.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Region))
                {
                    return true;
                }
                if (this._parent.Substations.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> linesEnumerator = this._parent.Lines.GetEnumerator();
                try
                {
                    for (
                    ; linesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = linesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    linesEnumerator.Dispose();
                }
                if ((this._parent.Region != null))
                {
                    array[arrayIndex] = this._parent.Region;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> substationsEnumerator = this._parent.Substations.GetEnumerator();
                try
                {
                    for (
                    ; substationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = substationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    substationsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ILine lineItem = item.As<ILine>();
                if (((lineItem != null) 
                            && this._parent.Lines.Remove(lineItem)))
                {
                    return true;
                }
                if ((this._parent.Region == item))
                {
                    this._parent.Region = null;
                    return true;
                }
                ISubstation substationItem = item.As<ISubstation>();
                if (((substationItem != null) 
                            && this._parent.Substations.Remove(substationItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Lines).Concat(this._parent.Region).Concat(this._parent.Substations).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Region property
        /// </summary>
        private sealed class RegionProxy : ModelPropertyChange<ISubGeographicalRegion, IGeographicalRegion>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RegionProxy(ISubGeographicalRegion modelElement) : 
                    base(modelElement, "Region")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGeographicalRegion Value
            {
                get
                {
                    return this.ModelElement.Region;
                }
                set
                {
                    this.ModelElement.Region = value;
                }
            }
        }
    }
}

