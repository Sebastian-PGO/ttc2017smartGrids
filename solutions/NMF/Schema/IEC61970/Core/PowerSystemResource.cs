//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCore;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;
using TTC2017.SmartGrids.CIM.IEC61970.Topology;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Core
{
    
    
    /// <summary>
    /// The default implementation of the PowerSystemResource class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Core")]
    [XmlNamespacePrefixAttribute("cimCore")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/PowerSystemResource")]
    [DebuggerDisplayAttribute("PowerSystemResource {UUID}")]
    public partial class PowerSystemResource : IdentifiedObject, IPowerSystemResource, IModelElement
    {
        
        private static Lazy<ITypedElement> _reportingGroupReference = new Lazy<ITypedElement>(RetrieveReportingGroupReference);
        
        /// <summary>
        /// The backing field for the ReportingGroup property
        /// </summary>
        private PowerSystemResourceReportingGroupCollection _reportingGroup;
        
        private static Lazy<ITypedElement> _networkDataSetsReference = new Lazy<ITypedElement>(RetrieveNetworkDataSetsReference);
        
        /// <summary>
        /// The backing field for the NetworkDataSets property
        /// </summary>
        private PowerSystemResourceNetworkDataSetsCollection _networkDataSets;
        
        private static Lazy<ITypedElement> _locationReference = new Lazy<ITypedElement>(RetrieveLocationReference);
        
        /// <summary>
        /// The backing field for the Location property
        /// </summary>
        private ILocation _location;
        
        private static Lazy<ITypedElement> _outageScheduleReference = new Lazy<ITypedElement>(RetrieveOutageScheduleReference);
        
        /// <summary>
        /// The backing field for the OutageSchedule property
        /// </summary>
        private IOutageSchedule _outageSchedule;
        
        private static Lazy<ITypedElement> _pSREventReference = new Lazy<ITypedElement>(RetrievePSREventReference);
        
        /// <summary>
        /// The backing field for the PSREvent property
        /// </summary>
        private PowerSystemResourcePSREventCollection _pSREvent;
        
        private static Lazy<ITypedElement> _safetyDocumentsReference = new Lazy<ITypedElement>(RetrieveSafetyDocumentsReference);
        
        /// <summary>
        /// The backing field for the SafetyDocuments property
        /// </summary>
        private PowerSystemResourceSafetyDocumentsCollection _safetyDocuments;
        
        private static Lazy<ITypedElement> _erpOrganisationRolesReference = new Lazy<ITypedElement>(RetrieveErpOrganisationRolesReference);
        
        /// <summary>
        /// The backing field for the ErpOrganisationRoles property
        /// </summary>
        private PowerSystemResourceErpOrganisationRolesCollection _erpOrganisationRoles;
        
        private static Lazy<ITypedElement> _circuitSectionsReference = new Lazy<ITypedElement>(RetrieveCircuitSectionsReference);
        
        /// <summary>
        /// The backing field for the CircuitSections property
        /// </summary>
        private PowerSystemResourceCircuitSectionsCollection _circuitSections;
        
        private static Lazy<ITypedElement> _measurementsReference = new Lazy<ITypedElement>(RetrieveMeasurementsReference);
        
        /// <summary>
        /// The backing field for the Measurements property
        /// </summary>
        private PowerSystemResourceMeasurementsCollection _measurements;
        
        private static Lazy<ITypedElement> _assetsReference = new Lazy<ITypedElement>(RetrieveAssetsReference);
        
        /// <summary>
        /// The backing field for the Assets property
        /// </summary>
        private PowerSystemResourceAssetsCollection _assets;
        
        private static Lazy<ITypedElement> _scheduleStepsReference = new Lazy<ITypedElement>(RetrieveScheduleStepsReference);
        
        /// <summary>
        /// The backing field for the ScheduleSteps property
        /// </summary>
        private PowerSystemResourceScheduleStepsCollection _scheduleSteps;
        
        private static Lazy<ITypedElement> _pSRTypeReference = new Lazy<ITypedElement>(RetrievePSRTypeReference);
        
        /// <summary>
        /// The backing field for the PSRType property
        /// </summary>
        private IPSRType _pSRType;
        
        private static Lazy<ITypedElement> _psrListsReference = new Lazy<ITypedElement>(RetrievePsrListsReference);
        
        /// <summary>
        /// The backing field for the PsrLists property
        /// </summary>
        private PowerSystemResourcePsrListsCollection _psrLists;
        
        private static Lazy<ITypedElement> _operatingShareReference = new Lazy<ITypedElement>(RetrieveOperatingShareReference);
        
        /// <summary>
        /// The backing field for the OperatingShare property
        /// </summary>
        private PowerSystemResourceOperatingShareCollection _operatingShare;
        
        private static Lazy<ITypedElement> _changeItemsReference = new Lazy<ITypedElement>(RetrieveChangeItemsReference);
        
        /// <summary>
        /// The backing field for the ChangeItems property
        /// </summary>
        private PowerSystemResourceChangeItemsCollection _changeItems;
        
        private static Lazy<ITypedElement> _documentRolesReference = new Lazy<ITypedElement>(RetrieveDocumentRolesReference);
        
        /// <summary>
        /// The backing field for the DocumentRoles property
        /// </summary>
        private PowerSystemResourceDocumentRolesCollection _documentRoles;
        
        private static IClass _classInstance;
        
        public PowerSystemResource()
        {
            this._reportingGroup = new PowerSystemResourceReportingGroupCollection(this);
            this._reportingGroup.CollectionChanging += this.ReportingGroupCollectionChanging;
            this._reportingGroup.CollectionChanged += this.ReportingGroupCollectionChanged;
            this._networkDataSets = new PowerSystemResourceNetworkDataSetsCollection(this);
            this._networkDataSets.CollectionChanging += this.NetworkDataSetsCollectionChanging;
            this._networkDataSets.CollectionChanged += this.NetworkDataSetsCollectionChanged;
            this._pSREvent = new PowerSystemResourcePSREventCollection(this);
            this._pSREvent.CollectionChanging += this.PSREventCollectionChanging;
            this._pSREvent.CollectionChanged += this.PSREventCollectionChanged;
            this._safetyDocuments = new PowerSystemResourceSafetyDocumentsCollection(this);
            this._safetyDocuments.CollectionChanging += this.SafetyDocumentsCollectionChanging;
            this._safetyDocuments.CollectionChanged += this.SafetyDocumentsCollectionChanged;
            this._erpOrganisationRoles = new PowerSystemResourceErpOrganisationRolesCollection(this);
            this._erpOrganisationRoles.CollectionChanging += this.ErpOrganisationRolesCollectionChanging;
            this._erpOrganisationRoles.CollectionChanged += this.ErpOrganisationRolesCollectionChanged;
            this._circuitSections = new PowerSystemResourceCircuitSectionsCollection(this);
            this._circuitSections.CollectionChanging += this.CircuitSectionsCollectionChanging;
            this._circuitSections.CollectionChanged += this.CircuitSectionsCollectionChanged;
            this._measurements = new PowerSystemResourceMeasurementsCollection(this);
            this._measurements.CollectionChanging += this.MeasurementsCollectionChanging;
            this._measurements.CollectionChanged += this.MeasurementsCollectionChanged;
            this._assets = new PowerSystemResourceAssetsCollection(this);
            this._assets.CollectionChanging += this.AssetsCollectionChanging;
            this._assets.CollectionChanged += this.AssetsCollectionChanged;
            this._scheduleSteps = new PowerSystemResourceScheduleStepsCollection(this);
            this._scheduleSteps.CollectionChanging += this.ScheduleStepsCollectionChanging;
            this._scheduleSteps.CollectionChanged += this.ScheduleStepsCollectionChanged;
            this._psrLists = new PowerSystemResourcePsrListsCollection(this);
            this._psrLists.CollectionChanging += this.PsrListsCollectionChanging;
            this._psrLists.CollectionChanged += this.PsrListsCollectionChanged;
            this._operatingShare = new PowerSystemResourceOperatingShareCollection(this);
            this._operatingShare.CollectionChanging += this.OperatingShareCollectionChanging;
            this._operatingShare.CollectionChanged += this.OperatingShareCollectionChanged;
            this._changeItems = new PowerSystemResourceChangeItemsCollection(this);
            this._changeItems.CollectionChanging += this.ChangeItemsCollectionChanging;
            this._changeItems.CollectionChanged += this.ChangeItemsCollectionChanged;
            this._documentRoles = new PowerSystemResourceDocumentRolesCollection(this);
            this._documentRoles.CollectionChanging += this.DocumentRolesCollectionChanging;
            this._documentRoles.CollectionChanged += this.DocumentRolesCollectionChanged;
        }
        
        /// <summary>
        /// The ReportingGroup property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PowerSystemResource")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IReportingGroup> ReportingGroup
        {
            get
            {
                return this._reportingGroup;
            }
        }
        
        /// <summary>
        /// The NetworkDataSets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PowerSystemResources")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<INetworkDataSet> NetworkDataSets
        {
            get
            {
                return this._networkDataSets;
            }
        }
        
        /// <summary>
        /// The Location property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PowerSystemResources")]
        public virtual ILocation Location
        {
            get
            {
                return this._location;
            }
            set
            {
                if ((this._location != value))
                {
                    ILocation old = this._location;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocationChanging(e);
                    this.OnPropertyChanging("Location", e, _locationReference);
                    this._location = value;
                    if ((old != null))
                    {
                        old.PowerSystemResources.Remove(this);
                        old.Deleted -= this.OnResetLocation;
                    }
                    if ((value != null))
                    {
                        value.PowerSystemResources.Add(this);
                        value.Deleted += this.OnResetLocation;
                    }
                    this.OnLocationChanged(e);
                    this.OnPropertyChanged("Location", e, _locationReference);
                }
            }
        }
        
        /// <summary>
        /// The OutageSchedule property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PowerSystemResource")]
        public virtual IOutageSchedule OutageSchedule
        {
            get
            {
                return this._outageSchedule;
            }
            set
            {
                if ((this._outageSchedule != value))
                {
                    IOutageSchedule old = this._outageSchedule;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOutageScheduleChanging(e);
                    this.OnPropertyChanging("OutageSchedule", e, _outageScheduleReference);
                    this._outageSchedule = value;
                    if ((old != null))
                    {
                        old.PowerSystemResource = null;
                        old.Deleted -= this.OnResetOutageSchedule;
                    }
                    if ((value != null))
                    {
                        value.PowerSystemResource = this;
                        value.Deleted += this.OnResetOutageSchedule;
                    }
                    this.OnOutageScheduleChanged(e);
                    this.OnPropertyChanged("OutageSchedule", e, _outageScheduleReference);
                }
            }
        }
        
        /// <summary>
        /// The PSREvent property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PowerSystemResource")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IPSREvent> PSREvent
        {
            get
            {
                return this._pSREvent;
            }
        }
        
        /// <summary>
        /// The SafetyDocuments property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PowerSystemResource")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISafetyDocument> SafetyDocuments
        {
            get
            {
                return this._safetyDocuments;
            }
        }
        
        /// <summary>
        /// The ErpOrganisationRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PowerSystemResource")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IOrgPsrRole> ErpOrganisationRoles
        {
            get
            {
                return this._erpOrganisationRoles;
            }
        }
        
        /// <summary>
        /// The CircuitSections property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PowerSystemResources")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICircuitSection> CircuitSections
        {
            get
            {
                return this._circuitSections;
            }
        }
        
        /// <summary>
        /// The Measurements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PowerSystemResource")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMeasurement> Measurements
        {
            get
            {
                return this._measurements;
            }
        }
        
        /// <summary>
        /// The Assets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PowerSystemResources")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAsset> Assets
        {
            get
            {
                return this._assets;
            }
        }
        
        /// <summary>
        /// The ScheduleSteps property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PowerSystemResources")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISwitchingStep> ScheduleSteps
        {
            get
            {
                return this._scheduleSteps;
            }
        }
        
        /// <summary>
        /// The PSRType property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PowerSystemResources")]
        public virtual IPSRType PSRType
        {
            get
            {
                return this._pSRType;
            }
            set
            {
                if ((this._pSRType != value))
                {
                    IPSRType old = this._pSRType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPSRTypeChanging(e);
                    this.OnPropertyChanging("PSRType", e, _pSRTypeReference);
                    this._pSRType = value;
                    if ((old != null))
                    {
                        old.PowerSystemResources.Remove(this);
                        old.Deleted -= this.OnResetPSRType;
                    }
                    if ((value != null))
                    {
                        value.PowerSystemResources.Add(this);
                        value.Deleted += this.OnResetPSRType;
                    }
                    this.OnPSRTypeChanged(e);
                    this.OnPropertyChanged("PSRType", e, _pSRTypeReference);
                }
            }
        }
        
        /// <summary>
        /// The PsrLists property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PowerSystemResources")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IPsrList> PsrLists
        {
            get
            {
                return this._psrLists;
            }
        }
        
        /// <summary>
        /// The OperatingShare property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PowerSystemResource")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IOperatingShare> OperatingShare
        {
            get
            {
                return this._operatingShare;
            }
        }
        
        /// <summary>
        /// The ChangeItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PowerSystemResource")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IChangeItem> ChangeItems
        {
            get
            {
                return this._changeItems;
            }
        }
        
        /// <summary>
        /// The DocumentRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PowerSystemResource")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDocPsrRole> DocumentRoles
        {
            get
            {
                return this._documentRoles;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PowerSystemResourceReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/PowerSystemResource")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Location property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocationChanging;
        
        /// <summary>
        /// Gets fired when the Location property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocationChanged;
        
        /// <summary>
        /// Gets fired before the OutageSchedule property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OutageScheduleChanging;
        
        /// <summary>
        /// Gets fired when the OutageSchedule property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OutageScheduleChanged;
        
        /// <summary>
        /// Gets fired before the PSRType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PSRTypeChanging;
        
        /// <summary>
        /// Gets fired when the PSRType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PSRTypeChanged;
        
        private static ITypedElement RetrieveReportingGroupReference()
        {
            return ((ITypedElement)(((ModelElement)(PowerSystemResource.ClassInstance)).Resolve("ReportingGroup")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ReportingGroup property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReportingGroupCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ReportingGroup", e, _reportingGroupReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ReportingGroup property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReportingGroupCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ReportingGroup", e, _reportingGroupReference);
        }
        
        private static ITypedElement RetrieveNetworkDataSetsReference()
        {
            return ((ITypedElement)(((ModelElement)(PowerSystemResource.ClassInstance)).Resolve("NetworkDataSets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the NetworkDataSets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NetworkDataSetsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("NetworkDataSets", e, _networkDataSetsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the NetworkDataSets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NetworkDataSetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("NetworkDataSets", e, _networkDataSetsReference);
        }
        
        private static ITypedElement RetrieveLocationReference()
        {
            return ((ITypedElement)(((ModelElement)(PowerSystemResource.ClassInstance)).Resolve("Location")));
        }
        
        /// <summary>
        /// Raises the LocationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Location property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLocation(object sender, System.EventArgs eventArgs)
        {
            this.Location = null;
        }
        
        private static ITypedElement RetrieveOutageScheduleReference()
        {
            return ((ITypedElement)(((ModelElement)(PowerSystemResource.ClassInstance)).Resolve("OutageSchedule")));
        }
        
        /// <summary>
        /// Raises the OutageScheduleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutageScheduleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OutageScheduleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OutageScheduleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutageScheduleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OutageScheduleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OutageSchedule property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOutageSchedule(object sender, System.EventArgs eventArgs)
        {
            this.OutageSchedule = null;
        }
        
        private static ITypedElement RetrievePSREventReference()
        {
            return ((ITypedElement)(((ModelElement)(PowerSystemResource.ClassInstance)).Resolve("PSREvent")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PSREvent property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PSREventCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("PSREvent", e, _pSREventReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PSREvent property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PSREventCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PSREvent", e, _pSREventReference);
        }
        
        private static ITypedElement RetrieveSafetyDocumentsReference()
        {
            return ((ITypedElement)(((ModelElement)(PowerSystemResource.ClassInstance)).Resolve("SafetyDocuments")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SafetyDocuments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SafetyDocumentsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("SafetyDocuments", e, _safetyDocumentsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SafetyDocuments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SafetyDocumentsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SafetyDocuments", e, _safetyDocumentsReference);
        }
        
        private static ITypedElement RetrieveErpOrganisationRolesReference()
        {
            return ((ITypedElement)(((ModelElement)(PowerSystemResource.ClassInstance)).Resolve("ErpOrganisationRoles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpOrganisationRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpOrganisationRolesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpOrganisationRoles", e, _erpOrganisationRolesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpOrganisationRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpOrganisationRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpOrganisationRoles", e, _erpOrganisationRolesReference);
        }
        
        private static ITypedElement RetrieveCircuitSectionsReference()
        {
            return ((ITypedElement)(((ModelElement)(PowerSystemResource.ClassInstance)).Resolve("CircuitSections")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CircuitSections property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CircuitSectionsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("CircuitSections", e, _circuitSectionsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CircuitSections property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CircuitSectionsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CircuitSections", e, _circuitSectionsReference);
        }
        
        private static ITypedElement RetrieveMeasurementsReference()
        {
            return ((ITypedElement)(((ModelElement)(PowerSystemResource.ClassInstance)).Resolve("Measurements")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Measurements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeasurementsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Measurements", e, _measurementsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Measurements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeasurementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Measurements", e, _measurementsReference);
        }
        
        private static ITypedElement RetrieveAssetsReference()
        {
            return ((ITypedElement)(((ModelElement)(PowerSystemResource.ClassInstance)).Resolve("Assets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Assets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Assets", e, _assetsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Assets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Assets", e, _assetsReference);
        }
        
        private static ITypedElement RetrieveScheduleStepsReference()
        {
            return ((ITypedElement)(((ModelElement)(PowerSystemResource.ClassInstance)).Resolve("ScheduleSteps")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ScheduleSteps property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ScheduleStepsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ScheduleSteps", e, _scheduleStepsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ScheduleSteps property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ScheduleStepsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ScheduleSteps", e, _scheduleStepsReference);
        }
        
        private static ITypedElement RetrievePSRTypeReference()
        {
            return ((ITypedElement)(((ModelElement)(PowerSystemResource.ClassInstance)).Resolve("PSRType")));
        }
        
        /// <summary>
        /// Raises the PSRTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPSRTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PSRTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PSRTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPSRTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PSRTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PSRType property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPSRType(object sender, System.EventArgs eventArgs)
        {
            this.PSRType = null;
        }
        
        private static ITypedElement RetrievePsrListsReference()
        {
            return ((ITypedElement)(((ModelElement)(PowerSystemResource.ClassInstance)).Resolve("PsrLists")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PsrLists property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PsrListsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("PsrLists", e, _psrListsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PsrLists property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PsrListsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PsrLists", e, _psrListsReference);
        }
        
        private static ITypedElement RetrieveOperatingShareReference()
        {
            return ((ITypedElement)(((ModelElement)(PowerSystemResource.ClassInstance)).Resolve("OperatingShare")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OperatingShare property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OperatingShareCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("OperatingShare", e, _operatingShareReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OperatingShare property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OperatingShareCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OperatingShare", e, _operatingShareReference);
        }
        
        private static ITypedElement RetrieveChangeItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(PowerSystemResource.ClassInstance)).Resolve("ChangeItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ChangeItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChangeItemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ChangeItems", e, _changeItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ChangeItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChangeItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ChangeItems", e, _changeItemsReference);
        }
        
        private static ITypedElement RetrieveDocumentRolesReference()
        {
            return ((ITypedElement)(((ModelElement)(PowerSystemResource.ClassInstance)).Resolve("DocumentRoles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DocumentRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DocumentRolesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("DocumentRoles", e, _documentRolesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DocumentRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DocumentRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DocumentRoles", e, _documentRolesReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "REPORTINGGROUP"))
            {
                return this._reportingGroup;
            }
            if ((feature == "NETWORKDATASETS"))
            {
                return this._networkDataSets;
            }
            if ((feature == "PSREVENT"))
            {
                return this._pSREvent;
            }
            if ((feature == "SAFETYDOCUMENTS"))
            {
                return this._safetyDocuments;
            }
            if ((feature == "ERPORGANISATIONROLES"))
            {
                return this._erpOrganisationRoles;
            }
            if ((feature == "CIRCUITSECTIONS"))
            {
                return this._circuitSections;
            }
            if ((feature == "MEASUREMENTS"))
            {
                return this._measurements;
            }
            if ((feature == "ASSETS"))
            {
                return this._assets;
            }
            if ((feature == "SCHEDULESTEPS"))
            {
                return this._scheduleSteps;
            }
            if ((feature == "PSRLISTS"))
            {
                return this._psrLists;
            }
            if ((feature == "OPERATINGSHARE"))
            {
                return this._operatingShare;
            }
            if ((feature == "CHANGEITEMS"))
            {
                return this._changeItems;
            }
            if ((feature == "DOCUMENTROLES"))
            {
                return this._documentRoles;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "LOCATION"))
            {
                this.Location = ((ILocation)(value));
                return;
            }
            if ((feature == "OUTAGESCHEDULE"))
            {
                this.OutageSchedule = ((IOutageSchedule)(value));
                return;
            }
            if ((feature == "PSRTYPE"))
            {
                this.PSRType = ((IPSRType)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Location"))
            {
                return new LocationProxy(this);
            }
            if ((attribute == "OutageSchedule"))
            {
                return new OutageScheduleProxy(this);
            }
            if ((attribute == "PSRType"))
            {
                return new PSRTypeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Location"))
            {
                return new LocationProxy(this);
            }
            if ((reference == "OutageSchedule"))
            {
                return new OutageScheduleProxy(this);
            }
            if ((reference == "PSRType"))
            {
                return new PSRTypeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/PowerSystemResource")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PowerSystemResource class
        /// </summary>
        public class PowerSystemResourceReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PowerSystemResource _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PowerSystemResourceReferencedElementsCollection(PowerSystemResource parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ReportingGroup.Count);
                    count = (count + this._parent.NetworkDataSets.Count);
                    if ((this._parent.Location != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OutageSchedule != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.PSREvent.Count);
                    count = (count + this._parent.SafetyDocuments.Count);
                    count = (count + this._parent.ErpOrganisationRoles.Count);
                    count = (count + this._parent.CircuitSections.Count);
                    count = (count + this._parent.Measurements.Count);
                    count = (count + this._parent.Assets.Count);
                    count = (count + this._parent.ScheduleSteps.Count);
                    if ((this._parent.PSRType != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.PsrLists.Count);
                    count = (count + this._parent.OperatingShare.Count);
                    count = (count + this._parent.ChangeItems.Count);
                    count = (count + this._parent.DocumentRoles.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ReportingGroup.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.NetworkDataSets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.LocationChanged += this.PropagateValueChanges;
                this._parent.OutageScheduleChanged += this.PropagateValueChanges;
                this._parent.PSREvent.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SafetyDocuments.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpOrganisationRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CircuitSections.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Measurements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Assets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ScheduleSteps.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PSRTypeChanged += this.PropagateValueChanges;
                this._parent.PsrLists.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OperatingShare.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ChangeItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DocumentRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ReportingGroup.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.NetworkDataSets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.LocationChanged -= this.PropagateValueChanges;
                this._parent.OutageScheduleChanged -= this.PropagateValueChanges;
                this._parent.PSREvent.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SafetyDocuments.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpOrganisationRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CircuitSections.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Measurements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Assets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ScheduleSteps.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PSRTypeChanged -= this.PropagateValueChanges;
                this._parent.PsrLists.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OperatingShare.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ChangeItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DocumentRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IReportingGroup reportingGroupCasted = item.As<IReportingGroup>();
                if ((reportingGroupCasted != null))
                {
                    this._parent.ReportingGroup.Add(reportingGroupCasted);
                }
                INetworkDataSet networkDataSetsCasted = item.As<INetworkDataSet>();
                if ((networkDataSetsCasted != null))
                {
                    this._parent.NetworkDataSets.Add(networkDataSetsCasted);
                }
                if ((this._parent.Location == null))
                {
                    ILocation locationCasted = item.As<ILocation>();
                    if ((locationCasted != null))
                    {
                        this._parent.Location = locationCasted;
                        return;
                    }
                }
                if ((this._parent.OutageSchedule == null))
                {
                    IOutageSchedule outageScheduleCasted = item.As<IOutageSchedule>();
                    if ((outageScheduleCasted != null))
                    {
                        this._parent.OutageSchedule = outageScheduleCasted;
                        return;
                    }
                }
                IPSREvent pSREventCasted = item.As<IPSREvent>();
                if ((pSREventCasted != null))
                {
                    this._parent.PSREvent.Add(pSREventCasted);
                }
                ISafetyDocument safetyDocumentsCasted = item.As<ISafetyDocument>();
                if ((safetyDocumentsCasted != null))
                {
                    this._parent.SafetyDocuments.Add(safetyDocumentsCasted);
                }
                IOrgPsrRole erpOrganisationRolesCasted = item.As<IOrgPsrRole>();
                if ((erpOrganisationRolesCasted != null))
                {
                    this._parent.ErpOrganisationRoles.Add(erpOrganisationRolesCasted);
                }
                ICircuitSection circuitSectionsCasted = item.As<ICircuitSection>();
                if ((circuitSectionsCasted != null))
                {
                    this._parent.CircuitSections.Add(circuitSectionsCasted);
                }
                IMeasurement measurementsCasted = item.As<IMeasurement>();
                if ((measurementsCasted != null))
                {
                    this._parent.Measurements.Add(measurementsCasted);
                }
                IAsset assetsCasted = item.As<IAsset>();
                if ((assetsCasted != null))
                {
                    this._parent.Assets.Add(assetsCasted);
                }
                ISwitchingStep scheduleStepsCasted = item.As<ISwitchingStep>();
                if ((scheduleStepsCasted != null))
                {
                    this._parent.ScheduleSteps.Add(scheduleStepsCasted);
                }
                if ((this._parent.PSRType == null))
                {
                    IPSRType pSRTypeCasted = item.As<IPSRType>();
                    if ((pSRTypeCasted != null))
                    {
                        this._parent.PSRType = pSRTypeCasted;
                        return;
                    }
                }
                IPsrList psrListsCasted = item.As<IPsrList>();
                if ((psrListsCasted != null))
                {
                    this._parent.PsrLists.Add(psrListsCasted);
                }
                IOperatingShare operatingShareCasted = item.As<IOperatingShare>();
                if ((operatingShareCasted != null))
                {
                    this._parent.OperatingShare.Add(operatingShareCasted);
                }
                IChangeItem changeItemsCasted = item.As<IChangeItem>();
                if ((changeItemsCasted != null))
                {
                    this._parent.ChangeItems.Add(changeItemsCasted);
                }
                IDocPsrRole documentRolesCasted = item.As<IDocPsrRole>();
                if ((documentRolesCasted != null))
                {
                    this._parent.DocumentRoles.Add(documentRolesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ReportingGroup.Clear();
                this._parent.NetworkDataSets.Clear();
                this._parent.Location = null;
                this._parent.OutageSchedule = null;
                this._parent.PSREvent.Clear();
                this._parent.SafetyDocuments.Clear();
                this._parent.ErpOrganisationRoles.Clear();
                this._parent.CircuitSections.Clear();
                this._parent.Measurements.Clear();
                this._parent.Assets.Clear();
                this._parent.ScheduleSteps.Clear();
                this._parent.PSRType = null;
                this._parent.PsrLists.Clear();
                this._parent.OperatingShare.Clear();
                this._parent.ChangeItems.Clear();
                this._parent.DocumentRoles.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ReportingGroup.Contains(item))
                {
                    return true;
                }
                if (this._parent.NetworkDataSets.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Location))
                {
                    return true;
                }
                if ((item == this._parent.OutageSchedule))
                {
                    return true;
                }
                if (this._parent.PSREvent.Contains(item))
                {
                    return true;
                }
                if (this._parent.SafetyDocuments.Contains(item))
                {
                    return true;
                }
                if (this._parent.ErpOrganisationRoles.Contains(item))
                {
                    return true;
                }
                if (this._parent.CircuitSections.Contains(item))
                {
                    return true;
                }
                if (this._parent.Measurements.Contains(item))
                {
                    return true;
                }
                if (this._parent.Assets.Contains(item))
                {
                    return true;
                }
                if (this._parent.ScheduleSteps.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.PSRType))
                {
                    return true;
                }
                if (this._parent.PsrLists.Contains(item))
                {
                    return true;
                }
                if (this._parent.OperatingShare.Contains(item))
                {
                    return true;
                }
                if (this._parent.ChangeItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.DocumentRoles.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> reportingGroupEnumerator = this._parent.ReportingGroup.GetEnumerator();
                try
                {
                    for (
                    ; reportingGroupEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = reportingGroupEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    reportingGroupEnumerator.Dispose();
                }
                IEnumerator<IModelElement> networkDataSetsEnumerator = this._parent.NetworkDataSets.GetEnumerator();
                try
                {
                    for (
                    ; networkDataSetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = networkDataSetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    networkDataSetsEnumerator.Dispose();
                }
                if ((this._parent.Location != null))
                {
                    array[arrayIndex] = this._parent.Location;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OutageSchedule != null))
                {
                    array[arrayIndex] = this._parent.OutageSchedule;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> pSREventEnumerator = this._parent.PSREvent.GetEnumerator();
                try
                {
                    for (
                    ; pSREventEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = pSREventEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    pSREventEnumerator.Dispose();
                }
                IEnumerator<IModelElement> safetyDocumentsEnumerator = this._parent.SafetyDocuments.GetEnumerator();
                try
                {
                    for (
                    ; safetyDocumentsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = safetyDocumentsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    safetyDocumentsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> erpOrganisationRolesEnumerator = this._parent.ErpOrganisationRoles.GetEnumerator();
                try
                {
                    for (
                    ; erpOrganisationRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpOrganisationRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpOrganisationRolesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> circuitSectionsEnumerator = this._parent.CircuitSections.GetEnumerator();
                try
                {
                    for (
                    ; circuitSectionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = circuitSectionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    circuitSectionsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> measurementsEnumerator = this._parent.Measurements.GetEnumerator();
                try
                {
                    for (
                    ; measurementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = measurementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    measurementsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> assetsEnumerator = this._parent.Assets.GetEnumerator();
                try
                {
                    for (
                    ; assetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = assetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    assetsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> scheduleStepsEnumerator = this._parent.ScheduleSteps.GetEnumerator();
                try
                {
                    for (
                    ; scheduleStepsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = scheduleStepsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    scheduleStepsEnumerator.Dispose();
                }
                if ((this._parent.PSRType != null))
                {
                    array[arrayIndex] = this._parent.PSRType;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> psrListsEnumerator = this._parent.PsrLists.GetEnumerator();
                try
                {
                    for (
                    ; psrListsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = psrListsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    psrListsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> operatingShareEnumerator = this._parent.OperatingShare.GetEnumerator();
                try
                {
                    for (
                    ; operatingShareEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = operatingShareEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    operatingShareEnumerator.Dispose();
                }
                IEnumerator<IModelElement> changeItemsEnumerator = this._parent.ChangeItems.GetEnumerator();
                try
                {
                    for (
                    ; changeItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = changeItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    changeItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> documentRolesEnumerator = this._parent.DocumentRoles.GetEnumerator();
                try
                {
                    for (
                    ; documentRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = documentRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    documentRolesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IReportingGroup reportingGroupItem = item.As<IReportingGroup>();
                if (((reportingGroupItem != null) 
                            && this._parent.ReportingGroup.Remove(reportingGroupItem)))
                {
                    return true;
                }
                INetworkDataSet networkDataSetItem = item.As<INetworkDataSet>();
                if (((networkDataSetItem != null) 
                            && this._parent.NetworkDataSets.Remove(networkDataSetItem)))
                {
                    return true;
                }
                if ((this._parent.Location == item))
                {
                    this._parent.Location = null;
                    return true;
                }
                if ((this._parent.OutageSchedule == item))
                {
                    this._parent.OutageSchedule = null;
                    return true;
                }
                IPSREvent pSREventItem = item.As<IPSREvent>();
                if (((pSREventItem != null) 
                            && this._parent.PSREvent.Remove(pSREventItem)))
                {
                    return true;
                }
                ISafetyDocument safetyDocumentItem = item.As<ISafetyDocument>();
                if (((safetyDocumentItem != null) 
                            && this._parent.SafetyDocuments.Remove(safetyDocumentItem)))
                {
                    return true;
                }
                IOrgPsrRole orgPsrRoleItem = item.As<IOrgPsrRole>();
                if (((orgPsrRoleItem != null) 
                            && this._parent.ErpOrganisationRoles.Remove(orgPsrRoleItem)))
                {
                    return true;
                }
                ICircuitSection circuitSectionItem = item.As<ICircuitSection>();
                if (((circuitSectionItem != null) 
                            && this._parent.CircuitSections.Remove(circuitSectionItem)))
                {
                    return true;
                }
                IMeasurement measurementItem = item.As<IMeasurement>();
                if (((measurementItem != null) 
                            && this._parent.Measurements.Remove(measurementItem)))
                {
                    return true;
                }
                IAsset assetItem = item.As<IAsset>();
                if (((assetItem != null) 
                            && this._parent.Assets.Remove(assetItem)))
                {
                    return true;
                }
                ISwitchingStep switchingStepItem = item.As<ISwitchingStep>();
                if (((switchingStepItem != null) 
                            && this._parent.ScheduleSteps.Remove(switchingStepItem)))
                {
                    return true;
                }
                if ((this._parent.PSRType == item))
                {
                    this._parent.PSRType = null;
                    return true;
                }
                IPsrList psrListItem = item.As<IPsrList>();
                if (((psrListItem != null) 
                            && this._parent.PsrLists.Remove(psrListItem)))
                {
                    return true;
                }
                IOperatingShare operatingShareItem = item.As<IOperatingShare>();
                if (((operatingShareItem != null) 
                            && this._parent.OperatingShare.Remove(operatingShareItem)))
                {
                    return true;
                }
                IChangeItem changeItemItem = item.As<IChangeItem>();
                if (((changeItemItem != null) 
                            && this._parent.ChangeItems.Remove(changeItemItem)))
                {
                    return true;
                }
                IDocPsrRole docPsrRoleItem = item.As<IDocPsrRole>();
                if (((docPsrRoleItem != null) 
                            && this._parent.DocumentRoles.Remove(docPsrRoleItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ReportingGroup).Concat(this._parent.NetworkDataSets).Concat(this._parent.Location).Concat(this._parent.OutageSchedule).Concat(this._parent.PSREvent).Concat(this._parent.SafetyDocuments).Concat(this._parent.ErpOrganisationRoles).Concat(this._parent.CircuitSections).Concat(this._parent.Measurements).Concat(this._parent.Assets).Concat(this._parent.ScheduleSteps).Concat(this._parent.PSRType).Concat(this._parent.PsrLists).Concat(this._parent.OperatingShare).Concat(this._parent.ChangeItems).Concat(this._parent.DocumentRoles).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Location property
        /// </summary>
        private sealed class LocationProxy : ModelPropertyChange<IPowerSystemResource, ILocation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocationProxy(IPowerSystemResource modelElement) : 
                    base(modelElement, "Location")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ILocation Value
            {
                get
                {
                    return this.ModelElement.Location;
                }
                set
                {
                    this.ModelElement.Location = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OutageSchedule property
        /// </summary>
        private sealed class OutageScheduleProxy : ModelPropertyChange<IPowerSystemResource, IOutageSchedule>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OutageScheduleProxy(IPowerSystemResource modelElement) : 
                    base(modelElement, "OutageSchedule")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOutageSchedule Value
            {
                get
                {
                    return this.ModelElement.OutageSchedule;
                }
                set
                {
                    this.ModelElement.OutageSchedule = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PSRType property
        /// </summary>
        private sealed class PSRTypeProxy : ModelPropertyChange<IPowerSystemResource, IPSRType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PSRTypeProxy(IPowerSystemResource modelElement) : 
                    base(modelElement, "PSRType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPSRType Value
            {
                get
                {
                    return this.ModelElement.PSRType;
                }
                set
                {
                    this.ModelElement.PSRType = value;
                }
            }
        }
    }
}

