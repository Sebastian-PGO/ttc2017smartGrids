using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCore;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;
using TTC2017.SmartGrids.CIM.IEC61970.Topology;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Core
{
    
    
    /// <summary>
    /// The public interface for VoltageLevel
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(VoltageLevel))]
    [XmlDefaultImplementationTypeAttribute(typeof(VoltageLevel))]
    public interface IVoltageLevel : IModelElement, IEquipmentContainer
    {
        
        /// <summary>
        /// The lowVoltageLimit property
        /// </summary>
        float LowVoltageLimit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The highVoltageLimit property
        /// </summary>
        float HighVoltageLimit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Bays property
        /// </summary>
        IOrderedSetExpression<IBay> Bays
        {
            get;
        }
        
        /// <summary>
        /// The BaseVoltage property
        /// </summary>
        IBaseVoltage BaseVoltage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Substation property
        /// </summary>
        ISubstation Substation
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the LowVoltageLimit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowVoltageLimitChanging;
        
        /// <summary>
        /// Gets fired when the LowVoltageLimit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowVoltageLimitChanged;
        
        /// <summary>
        /// Gets fired before the HighVoltageLimit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HighVoltageLimitChanging;
        
        /// <summary>
        /// Gets fired when the HighVoltageLimit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HighVoltageLimitChanged;
        
        /// <summary>
        /// Gets fired before the BaseVoltage property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BaseVoltageChanging;
        
        /// <summary>
        /// Gets fired when the BaseVoltage property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BaseVoltageChanged;
        
        /// <summary>
        /// Gets fired before the Substation property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SubstationChanging;
        
        /// <summary>
        /// Gets fired when the Substation property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SubstationChanged;
    }
}

