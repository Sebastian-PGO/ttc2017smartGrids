using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCore;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;
using TTC2017.SmartGrids.CIM.IEC61970.Topology;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Core
{
    
    
    /// <summary>
    /// The default implementation of the Equipment class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Core")]
    [XmlNamespacePrefixAttribute("cimCore")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/Equipment")]
    [DebuggerDisplayAttribute("Equipment {UUID}")]
    public partial class Equipment : PowerSystemResource, IEquipment, IModelElement
    {
        
        /// <summary>
        /// The backing field for the NormaIlyInService property
        /// </summary>
        private bool _normaIlyInService;
        
        private static Lazy<ITypedElement> _normaIlyInServiceAttribute = new Lazy<ITypedElement>(RetrieveNormaIlyInServiceAttribute);
        
        /// <summary>
        /// The backing field for the Aggregate property
        /// </summary>
        private bool _aggregate;
        
        private static Lazy<ITypedElement> _aggregateAttribute = new Lazy<ITypedElement>(RetrieveAggregateAttribute);
        
        private static Lazy<ITypedElement> _operationalLimitSetReference = new Lazy<ITypedElement>(RetrieveOperationalLimitSetReference);
        
        /// <summary>
        /// The backing field for the OperationalLimitSet property
        /// </summary>
        private EquipmentOperationalLimitSetCollection _operationalLimitSet;
        
        private static Lazy<ITypedElement> _contingencyEquipmentReference = new Lazy<ITypedElement>(RetrieveContingencyEquipmentReference);
        
        /// <summary>
        /// The backing field for the ContingencyEquipment property
        /// </summary>
        private EquipmentContingencyEquipmentCollection _contingencyEquipment;
        
        private static Lazy<ITypedElement> _customerAgreementsReference = new Lazy<ITypedElement>(RetrieveCustomerAgreementsReference);
        
        /// <summary>
        /// The backing field for the CustomerAgreements property
        /// </summary>
        private EquipmentCustomerAgreementsCollection _customerAgreements;
        
        private static Lazy<ITypedElement> _equipmentContainerReference = new Lazy<ITypedElement>(RetrieveEquipmentContainerReference);
        
        /// <summary>
        /// The backing field for the EquipmentContainer property
        /// </summary>
        private IEquipmentContainer _equipmentContainer;
        
        private static IClass _classInstance;
        
        public Equipment()
        {
            this._operationalLimitSet = new EquipmentOperationalLimitSetCollection(this);
            this._operationalLimitSet.CollectionChanging += this.OperationalLimitSetCollectionChanging;
            this._operationalLimitSet.CollectionChanged += this.OperationalLimitSetCollectionChanged;
            this._contingencyEquipment = new EquipmentContingencyEquipmentCollection(this);
            this._contingencyEquipment.CollectionChanging += this.ContingencyEquipmentCollectionChanging;
            this._contingencyEquipment.CollectionChanged += this.ContingencyEquipmentCollectionChanged;
            this._customerAgreements = new EquipmentCustomerAgreementsCollection(this);
            this._customerAgreements.CollectionChanging += this.CustomerAgreementsCollectionChanging;
            this._customerAgreements.CollectionChanged += this.CustomerAgreementsCollectionChanged;
        }
        
        /// <summary>
        /// The normaIlyInService property
        /// </summary>
        [XmlElementNameAttribute("normaIlyInService")]
        [XmlAttributeAttribute(true)]
        public virtual bool NormaIlyInService
        {
            get
            {
                return this._normaIlyInService;
            }
            set
            {
                if ((this._normaIlyInService != value))
                {
                    bool old = this._normaIlyInService;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNormaIlyInServiceChanging(e);
                    this.OnPropertyChanging("NormaIlyInService", e, _normaIlyInServiceAttribute);
                    this._normaIlyInService = value;
                    this.OnNormaIlyInServiceChanged(e);
                    this.OnPropertyChanged("NormaIlyInService", e, _normaIlyInServiceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The aggregate property
        /// </summary>
        [XmlElementNameAttribute("aggregate")]
        [XmlAttributeAttribute(true)]
        public virtual bool Aggregate
        {
            get
            {
                return this._aggregate;
            }
            set
            {
                if ((this._aggregate != value))
                {
                    bool old = this._aggregate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAggregateChanging(e);
                    this.OnPropertyChanging("Aggregate", e, _aggregateAttribute);
                    this._aggregate = value;
                    this.OnAggregateChanged(e);
                    this.OnPropertyChanged("Aggregate", e, _aggregateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The OperationalLimitSet property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Equipment")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IOperationalLimitSet> OperationalLimitSet
        {
            get
            {
                return this._operationalLimitSet;
            }
        }
        
        /// <summary>
        /// The ContingencyEquipment property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Equipment")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IContingencyEquipment> ContingencyEquipment
        {
            get
            {
                return this._contingencyEquipment;
            }
        }
        
        /// <summary>
        /// The CustomerAgreements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Equipments")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICustomerAgreement> CustomerAgreements
        {
            get
            {
                return this._customerAgreements;
            }
        }
        
        /// <summary>
        /// The EquipmentContainer property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Equipments")]
        public virtual IEquipmentContainer EquipmentContainer
        {
            get
            {
                return this._equipmentContainer;
            }
            set
            {
                if ((this._equipmentContainer != value))
                {
                    IEquipmentContainer old = this._equipmentContainer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEquipmentContainerChanging(e);
                    this.OnPropertyChanging("EquipmentContainer", e, _equipmentContainerReference);
                    this._equipmentContainer = value;
                    if ((old != null))
                    {
                        old.Equipments.Remove(this);
                        old.Deleted -= this.OnResetEquipmentContainer;
                    }
                    if ((value != null))
                    {
                        value.Equipments.Add(this);
                        value.Deleted += this.OnResetEquipmentContainer;
                    }
                    this.OnEquipmentContainerChanged(e);
                    this.OnPropertyChanged("EquipmentContainer", e, _equipmentContainerReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new EquipmentReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/Equipment")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the NormaIlyInService property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormaIlyInServiceChanging;
        
        /// <summary>
        /// Gets fired when the NormaIlyInService property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormaIlyInServiceChanged;
        
        /// <summary>
        /// Gets fired before the Aggregate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AggregateChanging;
        
        /// <summary>
        /// Gets fired when the Aggregate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AggregateChanged;
        
        /// <summary>
        /// Gets fired before the EquipmentContainer property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EquipmentContainerChanging;
        
        /// <summary>
        /// Gets fired when the EquipmentContainer property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EquipmentContainerChanged;
        
        private static ITypedElement RetrieveNormaIlyInServiceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Equipment.ClassInstance)).Resolve("normaIlyInService")));
        }
        
        /// <summary>
        /// Raises the NormaIlyInServiceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormaIlyInServiceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormaIlyInServiceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NormaIlyInServiceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormaIlyInServiceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormaIlyInServiceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAggregateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Equipment.ClassInstance)).Resolve("aggregate")));
        }
        
        /// <summary>
        /// Raises the AggregateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAggregateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AggregateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AggregateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAggregateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AggregateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOperationalLimitSetReference()
        {
            return ((ITypedElement)(((ModelElement)(Equipment.ClassInstance)).Resolve("OperationalLimitSet")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OperationalLimitSet property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OperationalLimitSetCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("OperationalLimitSet", e, _operationalLimitSetReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OperationalLimitSet property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OperationalLimitSetCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OperationalLimitSet", e, _operationalLimitSetReference);
        }
        
        private static ITypedElement RetrieveContingencyEquipmentReference()
        {
            return ((ITypedElement)(((ModelElement)(Equipment.ClassInstance)).Resolve("ContingencyEquipment")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ContingencyEquipment property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ContingencyEquipmentCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ContingencyEquipment", e, _contingencyEquipmentReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ContingencyEquipment property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ContingencyEquipmentCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ContingencyEquipment", e, _contingencyEquipmentReference);
        }
        
        private static ITypedElement RetrieveCustomerAgreementsReference()
        {
            return ((ITypedElement)(((ModelElement)(Equipment.ClassInstance)).Resolve("CustomerAgreements")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CustomerAgreements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CustomerAgreementsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("CustomerAgreements", e, _customerAgreementsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CustomerAgreements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CustomerAgreementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CustomerAgreements", e, _customerAgreementsReference);
        }
        
        private static ITypedElement RetrieveEquipmentContainerReference()
        {
            return ((ITypedElement)(((ModelElement)(Equipment.ClassInstance)).Resolve("EquipmentContainer")));
        }
        
        /// <summary>
        /// Raises the EquipmentContainerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEquipmentContainerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EquipmentContainerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EquipmentContainerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEquipmentContainerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EquipmentContainerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EquipmentContainer property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEquipmentContainer(object sender, System.EventArgs eventArgs)
        {
            this.EquipmentContainer = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NORMAILYINSERVICE"))
            {
                return this.NormaIlyInService;
            }
            if ((attribute == "AGGREGATE"))
            {
                return this.Aggregate;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "OPERATIONALLIMITSET"))
            {
                return this._operationalLimitSet;
            }
            if ((feature == "CONTINGENCYEQUIPMENT"))
            {
                return this._contingencyEquipment;
            }
            if ((feature == "CUSTOMERAGREEMENTS"))
            {
                return this._customerAgreements;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "EQUIPMENTCONTAINER"))
            {
                this.EquipmentContainer = ((IEquipmentContainer)(value));
                return;
            }
            if ((feature == "NORMAILYINSERVICE"))
            {
                this.NormaIlyInService = ((bool)(value));
                return;
            }
            if ((feature == "AGGREGATE"))
            {
                this.Aggregate = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "EquipmentContainer"))
            {
                return new EquipmentContainerProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "EquipmentContainer"))
            {
                return new EquipmentContainerProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/Equipment")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Equipment class
        /// </summary>
        public class EquipmentReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Equipment _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EquipmentReferencedElementsCollection(Equipment parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.OperationalLimitSet.Count);
                    count = (count + this._parent.ContingencyEquipment.Count);
                    count = (count + this._parent.CustomerAgreements.Count);
                    if ((this._parent.EquipmentContainer != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OperationalLimitSet.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ContingencyEquipment.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CustomerAgreements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.EquipmentContainerChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OperationalLimitSet.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ContingencyEquipment.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CustomerAgreements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.EquipmentContainerChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IOperationalLimitSet operationalLimitSetCasted = item.As<IOperationalLimitSet>();
                if ((operationalLimitSetCasted != null))
                {
                    this._parent.OperationalLimitSet.Add(operationalLimitSetCasted);
                }
                IContingencyEquipment contingencyEquipmentCasted = item.As<IContingencyEquipment>();
                if ((contingencyEquipmentCasted != null))
                {
                    this._parent.ContingencyEquipment.Add(contingencyEquipmentCasted);
                }
                ICustomerAgreement customerAgreementsCasted = item.As<ICustomerAgreement>();
                if ((customerAgreementsCasted != null))
                {
                    this._parent.CustomerAgreements.Add(customerAgreementsCasted);
                }
                if ((this._parent.EquipmentContainer == null))
                {
                    IEquipmentContainer equipmentContainerCasted = item.As<IEquipmentContainer>();
                    if ((equipmentContainerCasted != null))
                    {
                        this._parent.EquipmentContainer = equipmentContainerCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OperationalLimitSet.Clear();
                this._parent.ContingencyEquipment.Clear();
                this._parent.CustomerAgreements.Clear();
                this._parent.EquipmentContainer = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.OperationalLimitSet.Contains(item))
                {
                    return true;
                }
                if (this._parent.ContingencyEquipment.Contains(item))
                {
                    return true;
                }
                if (this._parent.CustomerAgreements.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.EquipmentContainer))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> operationalLimitSetEnumerator = this._parent.OperationalLimitSet.GetEnumerator();
                try
                {
                    for (
                    ; operationalLimitSetEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = operationalLimitSetEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    operationalLimitSetEnumerator.Dispose();
                }
                IEnumerator<IModelElement> contingencyEquipmentEnumerator = this._parent.ContingencyEquipment.GetEnumerator();
                try
                {
                    for (
                    ; contingencyEquipmentEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = contingencyEquipmentEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    contingencyEquipmentEnumerator.Dispose();
                }
                IEnumerator<IModelElement> customerAgreementsEnumerator = this._parent.CustomerAgreements.GetEnumerator();
                try
                {
                    for (
                    ; customerAgreementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = customerAgreementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    customerAgreementsEnumerator.Dispose();
                }
                if ((this._parent.EquipmentContainer != null))
                {
                    array[arrayIndex] = this._parent.EquipmentContainer;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IOperationalLimitSet operationalLimitSetItem = item.As<IOperationalLimitSet>();
                if (((operationalLimitSetItem != null) 
                            && this._parent.OperationalLimitSet.Remove(operationalLimitSetItem)))
                {
                    return true;
                }
                IContingencyEquipment contingencyEquipmentItem = item.As<IContingencyEquipment>();
                if (((contingencyEquipmentItem != null) 
                            && this._parent.ContingencyEquipment.Remove(contingencyEquipmentItem)))
                {
                    return true;
                }
                ICustomerAgreement customerAgreementItem = item.As<ICustomerAgreement>();
                if (((customerAgreementItem != null) 
                            && this._parent.CustomerAgreements.Remove(customerAgreementItem)))
                {
                    return true;
                }
                if ((this._parent.EquipmentContainer == item))
                {
                    this._parent.EquipmentContainer = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OperationalLimitSet).Concat(this._parent.ContingencyEquipment).Concat(this._parent.CustomerAgreements).Concat(this._parent.EquipmentContainer).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the normaIlyInService property
        /// </summary>
        private sealed class NormaIlyInServiceProxy : ModelPropertyChange<IEquipment, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NormaIlyInServiceProxy(IEquipment modelElement) : 
                    base(modelElement, "normaIlyInService")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.NormaIlyInService;
                }
                set
                {
                    this.ModelElement.NormaIlyInService = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the aggregate property
        /// </summary>
        private sealed class AggregateProxy : ModelPropertyChange<IEquipment, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AggregateProxy(IEquipment modelElement) : 
                    base(modelElement, "aggregate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Aggregate;
                }
                set
                {
                    this.ModelElement.Aggregate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EquipmentContainer property
        /// </summary>
        private sealed class EquipmentContainerProxy : ModelPropertyChange<IEquipment, IEquipmentContainer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EquipmentContainerProxy(IEquipment modelElement) : 
                    base(modelElement, "EquipmentContainer")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEquipmentContainer Value
            {
                get
                {
                    return this.ModelElement.EquipmentContainer;
                }
                set
                {
                    this.ModelElement.EquipmentContainer = value;
                }
            }
        }
    }
}

