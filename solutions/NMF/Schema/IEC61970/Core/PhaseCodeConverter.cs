using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCore;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;
using TTC2017.SmartGrids.CIM.IEC61970.Topology;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Core
{
    
    
    public class PhaseCodeConverter : System.ComponentModel.TypeConverter
    {
        
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
        {
            return (sourceType == typeof(string));
        }
        
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType)
        {
            return (destinationType == typeof(string));
        }
        
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
        {
            if ((value == null))
            {
                return default(PhaseCode);
            }
            string valueString = value.ToString();
            if ((valueString == "ABC"))
            {
                return PhaseCode.ABC;
            }
            if ((valueString == "splitSecondary2N"))
            {
                return PhaseCode.SplitSecondary2N;
            }
            if ((valueString == "ABN"))
            {
                return PhaseCode.ABN;
            }
            if ((valueString == "CN"))
            {
                return PhaseCode.CN;
            }
            if ((valueString == "ACN"))
            {
                return PhaseCode.ACN;
            }
            if ((valueString == "BC"))
            {
                return PhaseCode.BC;
            }
            if ((valueString == "AN"))
            {
                return PhaseCode.AN;
            }
            if ((valueString == "AB"))
            {
                return PhaseCode.AB;
            }
            if ((valueString == "BN"))
            {
                return PhaseCode.BN;
            }
            if ((valueString == "splitSecondary1N"))
            {
                return PhaseCode.SplitSecondary1N;
            }
            if ((valueString == "N"))
            {
                return PhaseCode.N;
            }
            if ((valueString == "AC"))
            {
                return PhaseCode.AC;
            }
            if ((valueString == "C"))
            {
                return PhaseCode.C;
            }
            if ((valueString == "ABCN"))
            {
                return PhaseCode.ABCN;
            }
            if ((valueString == "splitSecondary12N"))
            {
                return PhaseCode.SplitSecondary12N;
            }
            if ((valueString == "A"))
            {
                return PhaseCode.A;
            }
            if ((valueString == "B"))
            {
                return PhaseCode.B;
            }
            if ((valueString == "BCN"))
            {
                return PhaseCode.BCN;
            }
            return default(PhaseCode);
        }
        
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType)
        {
            if ((value == null))
            {
                return null;
            }
            PhaseCode valueCasted = ((PhaseCode)(value));
            if ((valueCasted == PhaseCode.ABC))
            {
                return "ABC";
            }
            if ((valueCasted == PhaseCode.SplitSecondary2N))
            {
                return "splitSecondary2N";
            }
            if ((valueCasted == PhaseCode.ABN))
            {
                return "ABN";
            }
            if ((valueCasted == PhaseCode.CN))
            {
                return "CN";
            }
            if ((valueCasted == PhaseCode.ACN))
            {
                return "ACN";
            }
            if ((valueCasted == PhaseCode.BC))
            {
                return "BC";
            }
            if ((valueCasted == PhaseCode.AN))
            {
                return "AN";
            }
            if ((valueCasted == PhaseCode.AB))
            {
                return "AB";
            }
            if ((valueCasted == PhaseCode.BN))
            {
                return "BN";
            }
            if ((valueCasted == PhaseCode.SplitSecondary1N))
            {
                return "splitSecondary1N";
            }
            if ((valueCasted == PhaseCode.N))
            {
                return "N";
            }
            if ((valueCasted == PhaseCode.AC))
            {
                return "AC";
            }
            if ((valueCasted == PhaseCode.C))
            {
                return "C";
            }
            if ((valueCasted == PhaseCode.ABCN))
            {
                return "ABCN";
            }
            if ((valueCasted == PhaseCode.SplitSecondary12N))
            {
                return "splitSecondary12N";
            }
            if ((valueCasted == PhaseCode.A))
            {
                return "A";
            }
            if ((valueCasted == PhaseCode.B))
            {
                return "B";
            }
            if ((valueCasted == PhaseCode.BCN))
            {
                return "BCN";
            }
            throw new ArgumentOutOfRangeException("value");
        }
    }
}

