using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCore;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;
using TTC2017.SmartGrids.CIM.IEC61970.Topology;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Core
{
    
    
    /// <summary>
    /// The default implementation of the IrregularTimePoint class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Core")]
    [XmlNamespacePrefixAttribute("cimCore")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/IrregularTimePoint")]
    [DebuggerDisplayAttribute("IrregularTimePoint {UUID}")]
    public partial class IrregularTimePoint : Element, IIrregularTimePoint, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Value1 property
        /// </summary>
        private float _value1;
        
        private static Lazy<ITypedElement> _value1Attribute = new Lazy<ITypedElement>(RetrieveValue1Attribute);
        
        /// <summary>
        /// The backing field for the Value2 property
        /// </summary>
        private float _value2;
        
        private static Lazy<ITypedElement> _value2Attribute = new Lazy<ITypedElement>(RetrieveValue2Attribute);
        
        /// <summary>
        /// The backing field for the Time property
        /// </summary>
        private float _time;
        
        private static Lazy<ITypedElement> _timeAttribute = new Lazy<ITypedElement>(RetrieveTimeAttribute);
        
        private static Lazy<ITypedElement> _intervalScheduleReference = new Lazy<ITypedElement>(RetrieveIntervalScheduleReference);
        
        /// <summary>
        /// The backing field for the IntervalSchedule property
        /// </summary>
        private IIrregularIntervalSchedule _intervalSchedule;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The value1 property
        /// </summary>
        [XmlElementNameAttribute("value1")]
        [XmlAttributeAttribute(true)]
        public virtual float Value1
        {
            get
            {
                return this._value1;
            }
            set
            {
                if ((this._value1 != value))
                {
                    float old = this._value1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValue1Changing(e);
                    this.OnPropertyChanging("Value1", e, _value1Attribute);
                    this._value1 = value;
                    this.OnValue1Changed(e);
                    this.OnPropertyChanged("Value1", e, _value1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The value2 property
        /// </summary>
        [XmlElementNameAttribute("value2")]
        [XmlAttributeAttribute(true)]
        public virtual float Value2
        {
            get
            {
                return this._value2;
            }
            set
            {
                if ((this._value2 != value))
                {
                    float old = this._value2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValue2Changing(e);
                    this.OnPropertyChanging("Value2", e, _value2Attribute);
                    this._value2 = value;
                    this.OnValue2Changed(e);
                    this.OnPropertyChanged("Value2", e, _value2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The time property
        /// </summary>
        [XmlElementNameAttribute("time")]
        [XmlAttributeAttribute(true)]
        public virtual float Time
        {
            get
            {
                return this._time;
            }
            set
            {
                if ((this._time != value))
                {
                    float old = this._time;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeChanging(e);
                    this.OnPropertyChanging("Time", e, _timeAttribute);
                    this._time = value;
                    this.OnTimeChanged(e);
                    this.OnPropertyChanged("Time", e, _timeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The IntervalSchedule property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TimePoints")]
        public virtual IIrregularIntervalSchedule IntervalSchedule
        {
            get
            {
                return this._intervalSchedule;
            }
            set
            {
                if ((this._intervalSchedule != value))
                {
                    IIrregularIntervalSchedule old = this._intervalSchedule;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIntervalScheduleChanging(e);
                    this.OnPropertyChanging("IntervalSchedule", e, _intervalScheduleReference);
                    this._intervalSchedule = value;
                    if ((old != null))
                    {
                        old.TimePoints.Remove(this);
                        old.Deleted -= this.OnResetIntervalSchedule;
                    }
                    if ((value != null))
                    {
                        value.TimePoints.Add(this);
                        value.Deleted += this.OnResetIntervalSchedule;
                    }
                    this.OnIntervalScheduleChanged(e);
                    this.OnPropertyChanged("IntervalSchedule", e, _intervalScheduleReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new IrregularTimePointReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/IrregularTimePoint")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Value1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Value1Changing;
        
        /// <summary>
        /// Gets fired when the Value1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Value1Changed;
        
        /// <summary>
        /// Gets fired before the Value2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Value2Changing;
        
        /// <summary>
        /// Gets fired when the Value2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Value2Changed;
        
        /// <summary>
        /// Gets fired before the Time property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeChanging;
        
        /// <summary>
        /// Gets fired when the Time property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeChanged;
        
        /// <summary>
        /// Gets fired before the IntervalSchedule property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IntervalScheduleChanging;
        
        /// <summary>
        /// Gets fired when the IntervalSchedule property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IntervalScheduleChanged;
        
        private static ITypedElement RetrieveValue1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(IrregularTimePoint.ClassInstance)).Resolve("value1")));
        }
        
        /// <summary>
        /// Raises the Value1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValue1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Value1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Value1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValue1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Value1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveValue2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(IrregularTimePoint.ClassInstance)).Resolve("value2")));
        }
        
        /// <summary>
        /// Raises the Value2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValue2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Value2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Value2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValue2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Value2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(IrregularTimePoint.ClassInstance)).Resolve("time")));
        }
        
        /// <summary>
        /// Raises the TimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIntervalScheduleReference()
        {
            return ((ITypedElement)(((ModelElement)(IrregularTimePoint.ClassInstance)).Resolve("IntervalSchedule")));
        }
        
        /// <summary>
        /// Raises the IntervalScheduleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIntervalScheduleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IntervalScheduleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IntervalScheduleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIntervalScheduleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IntervalScheduleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the IntervalSchedule property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetIntervalSchedule(object sender, System.EventArgs eventArgs)
        {
            this.IntervalSchedule = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VALUE1"))
            {
                return this.Value1;
            }
            if ((attribute == "VALUE2"))
            {
                return this.Value2;
            }
            if ((attribute == "TIME"))
            {
                return this.Time;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "INTERVALSCHEDULE"))
            {
                this.IntervalSchedule = ((IIrregularIntervalSchedule)(value));
                return;
            }
            if ((feature == "VALUE1"))
            {
                this.Value1 = ((float)(value));
                return;
            }
            if ((feature == "VALUE2"))
            {
                this.Value2 = ((float)(value));
                return;
            }
            if ((feature == "TIME"))
            {
                this.Time = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "IntervalSchedule"))
            {
                return new IntervalScheduleProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "IntervalSchedule"))
            {
                return new IntervalScheduleProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/IrregularTimePoint")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the IrregularTimePoint class
        /// </summary>
        public class IrregularTimePointReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private IrregularTimePoint _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public IrregularTimePointReferencedElementsCollection(IrregularTimePoint parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.IntervalSchedule != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.IntervalScheduleChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.IntervalScheduleChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.IntervalSchedule == null))
                {
                    IIrregularIntervalSchedule intervalScheduleCasted = item.As<IIrregularIntervalSchedule>();
                    if ((intervalScheduleCasted != null))
                    {
                        this._parent.IntervalSchedule = intervalScheduleCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.IntervalSchedule = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.IntervalSchedule))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.IntervalSchedule != null))
                {
                    array[arrayIndex] = this._parent.IntervalSchedule;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.IntervalSchedule == item))
                {
                    this._parent.IntervalSchedule = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.IntervalSchedule).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value1 property
        /// </summary>
        private sealed class Value1Proxy : ModelPropertyChange<IIrregularTimePoint, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Value1Proxy(IIrregularTimePoint modelElement) : 
                    base(modelElement, "value1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Value1;
                }
                set
                {
                    this.ModelElement.Value1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value2 property
        /// </summary>
        private sealed class Value2Proxy : ModelPropertyChange<IIrregularTimePoint, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Value2Proxy(IIrregularTimePoint modelElement) : 
                    base(modelElement, "value2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Value2;
                }
                set
                {
                    this.ModelElement.Value2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the time property
        /// </summary>
        private sealed class TimeProxy : ModelPropertyChange<IIrregularTimePoint, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeProxy(IIrregularTimePoint modelElement) : 
                    base(modelElement, "time")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Time;
                }
                set
                {
                    this.ModelElement.Time = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IntervalSchedule property
        /// </summary>
        private sealed class IntervalScheduleProxy : ModelPropertyChange<IIrregularTimePoint, IIrregularIntervalSchedule>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IntervalScheduleProxy(IIrregularTimePoint modelElement) : 
                    base(modelElement, "IntervalSchedule")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IIrregularIntervalSchedule Value
            {
                get
                {
                    return this.ModelElement.IntervalSchedule;
                }
                set
                {
                    this.ModelElement.IntervalSchedule = value;
                }
            }
        }
    }
}

