//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCore;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;
using TTC2017.SmartGrids.CIM.IEC61970.Topology;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Core
{
    
    
    /// <summary>
    /// The default implementation of the BaseVoltage class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Core")]
    [XmlNamespacePrefixAttribute("cimCore")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/BaseVoltage")]
    [DebuggerDisplayAttribute("BaseVoltage {UUID}")]
    public partial class BaseVoltage : IdentifiedObject, IBaseVoltage, IModelElement
    {
        
        /// <summary>
        /// The backing field for the NominalVoltage property
        /// </summary>
        private float _nominalVoltage;
        
        private static Lazy<ITypedElement> _nominalVoltageAttribute = new Lazy<ITypedElement>(RetrieveNominalVoltageAttribute);
        
        /// <summary>
        /// The backing field for the IsDC property
        /// </summary>
        private bool _isDC;
        
        private static Lazy<ITypedElement> _isDCAttribute = new Lazy<ITypedElement>(RetrieveIsDCAttribute);
        
        private static Lazy<ITypedElement> _topologicalNodeReference = new Lazy<ITypedElement>(RetrieveTopologicalNodeReference);
        
        /// <summary>
        /// The backing field for the TopologicalNode property
        /// </summary>
        private BaseVoltageTopologicalNodeCollection _topologicalNode;
        
        private static Lazy<ITypedElement> _voltageLevelReference = new Lazy<ITypedElement>(RetrieveVoltageLevelReference);
        
        /// <summary>
        /// The backing field for the VoltageLevel property
        /// </summary>
        private BaseVoltageVoltageLevelCollection _voltageLevel;
        
        private static Lazy<ITypedElement> _conductingEquipmentReference = new Lazy<ITypedElement>(RetrieveConductingEquipmentReference);
        
        /// <summary>
        /// The backing field for the ConductingEquipment property
        /// </summary>
        private BaseVoltageConductingEquipmentCollection _conductingEquipment;
        
        private static IClass _classInstance;
        
        public BaseVoltage()
        {
            this._topologicalNode = new BaseVoltageTopologicalNodeCollection(this);
            this._topologicalNode.CollectionChanging += this.TopologicalNodeCollectionChanging;
            this._topologicalNode.CollectionChanged += this.TopologicalNodeCollectionChanged;
            this._voltageLevel = new BaseVoltageVoltageLevelCollection(this);
            this._voltageLevel.CollectionChanging += this.VoltageLevelCollectionChanging;
            this._voltageLevel.CollectionChanged += this.VoltageLevelCollectionChanged;
            this._conductingEquipment = new BaseVoltageConductingEquipmentCollection(this);
            this._conductingEquipment.CollectionChanging += this.ConductingEquipmentCollectionChanging;
            this._conductingEquipment.CollectionChanged += this.ConductingEquipmentCollectionChanged;
        }
        
        /// <summary>
        /// The nominalVoltage property
        /// </summary>
        [XmlElementNameAttribute("nominalVoltage")]
        [XmlAttributeAttribute(true)]
        public virtual float NominalVoltage
        {
            get
            {
                return this._nominalVoltage;
            }
            set
            {
                if ((this._nominalVoltage != value))
                {
                    float old = this._nominalVoltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNominalVoltageChanging(e);
                    this.OnPropertyChanging("NominalVoltage", e, _nominalVoltageAttribute);
                    this._nominalVoltage = value;
                    this.OnNominalVoltageChanged(e);
                    this.OnPropertyChanged("NominalVoltage", e, _nominalVoltageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The isDC property
        /// </summary>
        [XmlElementNameAttribute("isDC")]
        [XmlAttributeAttribute(true)]
        public virtual bool IsDC
        {
            get
            {
                return this._isDC;
            }
            set
            {
                if ((this._isDC != value))
                {
                    bool old = this._isDC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsDCChanging(e);
                    this.OnPropertyChanging("IsDC", e, _isDCAttribute);
                    this._isDC = value;
                    this.OnIsDCChanged(e);
                    this.OnPropertyChanged("IsDC", e, _isDCAttribute);
                }
            }
        }
        
        /// <summary>
        /// The TopologicalNode property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("BaseVoltage")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITopologicalNode> TopologicalNode
        {
            get
            {
                return this._topologicalNode;
            }
        }
        
        /// <summary>
        /// The VoltageLevel property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("BaseVoltage")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IVoltageLevel> VoltageLevel
        {
            get
            {
                return this._voltageLevel;
            }
        }
        
        /// <summary>
        /// The ConductingEquipment property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("BaseVoltage")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IConductingEquipment> ConductingEquipment
        {
            get
            {
                return this._conductingEquipment;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new BaseVoltageReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/BaseVoltage")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the NominalVoltage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NominalVoltageChanging;
        
        /// <summary>
        /// Gets fired when the NominalVoltage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NominalVoltageChanged;
        
        /// <summary>
        /// Gets fired before the IsDC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsDCChanging;
        
        /// <summary>
        /// Gets fired when the IsDC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsDCChanged;
        
        private static ITypedElement RetrieveNominalVoltageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BaseVoltage.ClassInstance)).Resolve("nominalVoltage")));
        }
        
        /// <summary>
        /// Raises the NominalVoltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalVoltageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NominalVoltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NominalVoltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalVoltageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NominalVoltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIsDCAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BaseVoltage.ClassInstance)).Resolve("isDC")));
        }
        
        /// <summary>
        /// Raises the IsDCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsDCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsDCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsDCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsDCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsDCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTopologicalNodeReference()
        {
            return ((ITypedElement)(((ModelElement)(BaseVoltage.ClassInstance)).Resolve("TopologicalNode")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TopologicalNode property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TopologicalNodeCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("TopologicalNode", e, _topologicalNodeReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TopologicalNode property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TopologicalNodeCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TopologicalNode", e, _topologicalNodeReference);
        }
        
        private static ITypedElement RetrieveVoltageLevelReference()
        {
            return ((ITypedElement)(((ModelElement)(BaseVoltage.ClassInstance)).Resolve("VoltageLevel")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the VoltageLevel property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VoltageLevelCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("VoltageLevel", e, _voltageLevelReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the VoltageLevel property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VoltageLevelCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("VoltageLevel", e, _voltageLevelReference);
        }
        
        private static ITypedElement RetrieveConductingEquipmentReference()
        {
            return ((ITypedElement)(((ModelElement)(BaseVoltage.ClassInstance)).Resolve("ConductingEquipment")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ConductingEquipment property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConductingEquipmentCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ConductingEquipment", e, _conductingEquipmentReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ConductingEquipment property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConductingEquipmentCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ConductingEquipment", e, _conductingEquipmentReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NOMINALVOLTAGE"))
            {
                return this.NominalVoltage;
            }
            if ((attribute == "ISDC"))
            {
                return this.IsDC;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "TOPOLOGICALNODE"))
            {
                return this._topologicalNode;
            }
            if ((feature == "VOLTAGELEVEL"))
            {
                return this._voltageLevel;
            }
            if ((feature == "CONDUCTINGEQUIPMENT"))
            {
                return this._conductingEquipment;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NOMINALVOLTAGE"))
            {
                this.NominalVoltage = ((float)(value));
                return;
            }
            if ((feature == "ISDC"))
            {
                this.IsDC = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Core/BaseVoltage")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the BaseVoltage class
        /// </summary>
        public class BaseVoltageReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private BaseVoltage _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BaseVoltageReferencedElementsCollection(BaseVoltage parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.TopologicalNode.Count);
                    count = (count + this._parent.VoltageLevel.Count);
                    count = (count + this._parent.ConductingEquipment.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TopologicalNode.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.VoltageLevel.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ConductingEquipment.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TopologicalNode.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.VoltageLevel.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ConductingEquipment.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITopologicalNode topologicalNodeCasted = item.As<ITopologicalNode>();
                if ((topologicalNodeCasted != null))
                {
                    this._parent.TopologicalNode.Add(topologicalNodeCasted);
                }
                IVoltageLevel voltageLevelCasted = item.As<IVoltageLevel>();
                if ((voltageLevelCasted != null))
                {
                    this._parent.VoltageLevel.Add(voltageLevelCasted);
                }
                IConductingEquipment conductingEquipmentCasted = item.As<IConductingEquipment>();
                if ((conductingEquipmentCasted != null))
                {
                    this._parent.ConductingEquipment.Add(conductingEquipmentCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TopologicalNode.Clear();
                this._parent.VoltageLevel.Clear();
                this._parent.ConductingEquipment.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.TopologicalNode.Contains(item))
                {
                    return true;
                }
                if (this._parent.VoltageLevel.Contains(item))
                {
                    return true;
                }
                if (this._parent.ConductingEquipment.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> topologicalNodeEnumerator = this._parent.TopologicalNode.GetEnumerator();
                try
                {
                    for (
                    ; topologicalNodeEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = topologicalNodeEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    topologicalNodeEnumerator.Dispose();
                }
                IEnumerator<IModelElement> voltageLevelEnumerator = this._parent.VoltageLevel.GetEnumerator();
                try
                {
                    for (
                    ; voltageLevelEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = voltageLevelEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    voltageLevelEnumerator.Dispose();
                }
                IEnumerator<IModelElement> conductingEquipmentEnumerator = this._parent.ConductingEquipment.GetEnumerator();
                try
                {
                    for (
                    ; conductingEquipmentEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = conductingEquipmentEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    conductingEquipmentEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITopologicalNode topologicalNodeItem = item.As<ITopologicalNode>();
                if (((topologicalNodeItem != null) 
                            && this._parent.TopologicalNode.Remove(topologicalNodeItem)))
                {
                    return true;
                }
                IVoltageLevel voltageLevelItem = item.As<IVoltageLevel>();
                if (((voltageLevelItem != null) 
                            && this._parent.VoltageLevel.Remove(voltageLevelItem)))
                {
                    return true;
                }
                IConductingEquipment conductingEquipmentItem = item.As<IConductingEquipment>();
                if (((conductingEquipmentItem != null) 
                            && this._parent.ConductingEquipment.Remove(conductingEquipmentItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TopologicalNode).Concat(this._parent.VoltageLevel).Concat(this._parent.ConductingEquipment).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the nominalVoltage property
        /// </summary>
        private sealed class NominalVoltageProxy : ModelPropertyChange<IBaseVoltage, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NominalVoltageProxy(IBaseVoltage modelElement) : 
                    base(modelElement, "nominalVoltage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NominalVoltage;
                }
                set
                {
                    this.ModelElement.NominalVoltage = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isDC property
        /// </summary>
        private sealed class IsDCProxy : ModelPropertyChange<IBaseVoltage, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsDCProxy(IBaseVoltage modelElement) : 
                    base(modelElement, "isDC")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsDC;
                }
                set
                {
                    this.ModelElement.IsDC = value;
                }
            }
        }
    }
}

