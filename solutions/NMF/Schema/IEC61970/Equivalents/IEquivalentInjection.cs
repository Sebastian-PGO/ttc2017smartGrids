using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;

namespace TTC2017.SmartGrids.CIM.IEC61970.Equivalents
{
    
    
    /// <summary>
    /// The public interface for EquivalentInjection
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(EquivalentInjection))]
    [XmlDefaultImplementationTypeAttribute(typeof(EquivalentInjection))]
    public interface IEquivalentInjection : IModelElement, IEquivalentEquipment
    {
        
        /// <summary>
        /// The regulationStatus property
        /// </summary>
        bool RegulationStatus
        {
            get;
            set;
        }
        
        /// <summary>
        /// The regulationCapability property
        /// </summary>
        bool RegulationCapability
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minP property
        /// </summary>
        float MinP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The maxP property
        /// </summary>
        float MaxP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The regulationTarget property
        /// </summary>
        float RegulationTarget
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the RegulationStatus property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RegulationStatusChanging;
        
        /// <summary>
        /// Gets fired when the RegulationStatus property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RegulationStatusChanged;
        
        /// <summary>
        /// Gets fired before the RegulationCapability property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RegulationCapabilityChanging;
        
        /// <summary>
        /// Gets fired when the RegulationCapability property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RegulationCapabilityChanged;
        
        /// <summary>
        /// Gets fired before the MinP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinPChanging;
        
        /// <summary>
        /// Gets fired when the MinP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinPChanged;
        
        /// <summary>
        /// Gets fired before the MaxP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxPChanging;
        
        /// <summary>
        /// Gets fired when the MaxP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxPChanged;
        
        /// <summary>
        /// Gets fired before the RegulationTarget property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RegulationTargetChanging;
        
        /// <summary>
        /// Gets fired when the RegulationTarget property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RegulationTargetChanged;
    }
}

