using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Outage
{
    
    
    /// <summary>
    /// The default implementation of the OutageSchedule class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Outage")]
    [XmlNamespacePrefixAttribute("cimOutage")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Outage/OutageSchedule")]
    [DebuggerDisplayAttribute("OutageSchedule {UUID}")]
    public partial class OutageSchedule : IrregularIntervalSchedule, IOutageSchedule, IModelElement
    {
        
        private static Lazy<ITypedElement> _plannedOutageReference = new Lazy<ITypedElement>(RetrievePlannedOutageReference);
        
        /// <summary>
        /// The backing field for the PlannedOutage property
        /// </summary>
        private IPlannedOutage _plannedOutage;
        
        private static Lazy<ITypedElement> _powerSystemResourceReference = new Lazy<ITypedElement>(RetrievePowerSystemResourceReference);
        
        /// <summary>
        /// The backing field for the PowerSystemResource property
        /// </summary>
        private IPowerSystemResource _powerSystemResource;
        
        private static Lazy<ITypedElement> _switchingOperationsReference = new Lazy<ITypedElement>(RetrieveSwitchingOperationsReference);
        
        /// <summary>
        /// The backing field for the SwitchingOperations property
        /// </summary>
        private OutageScheduleSwitchingOperationsCollection _switchingOperations;
        
        private static IClass _classInstance;
        
        public OutageSchedule()
        {
            this._switchingOperations = new OutageScheduleSwitchingOperationsCollection(this);
            this._switchingOperations.CollectionChanging += this.SwitchingOperationsCollectionChanging;
            this._switchingOperations.CollectionChanged += this.SwitchingOperationsCollectionChanged;
        }
        
        /// <summary>
        /// The PlannedOutage property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("OutageSchedules")]
        public virtual IPlannedOutage PlannedOutage
        {
            get
            {
                return this._plannedOutage;
            }
            set
            {
                if ((this._plannedOutage != value))
                {
                    IPlannedOutage old = this._plannedOutage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPlannedOutageChanging(e);
                    this.OnPropertyChanging("PlannedOutage", e, _plannedOutageReference);
                    this._plannedOutage = value;
                    if ((old != null))
                    {
                        old.OutageSchedules.Remove(this);
                        old.Deleted -= this.OnResetPlannedOutage;
                    }
                    if ((value != null))
                    {
                        value.OutageSchedules.Add(this);
                        value.Deleted += this.OnResetPlannedOutage;
                    }
                    this.OnPlannedOutageChanged(e);
                    this.OnPropertyChanged("PlannedOutage", e, _plannedOutageReference);
                }
            }
        }
        
        /// <summary>
        /// The PowerSystemResource property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("OutageSchedule")]
        public virtual IPowerSystemResource PowerSystemResource
        {
            get
            {
                return this._powerSystemResource;
            }
            set
            {
                if ((this._powerSystemResource != value))
                {
                    IPowerSystemResource old = this._powerSystemResource;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPowerSystemResourceChanging(e);
                    this.OnPropertyChanging("PowerSystemResource", e, _powerSystemResourceReference);
                    this._powerSystemResource = value;
                    if ((old != null))
                    {
                        old.OutageSchedule = null;
                        old.Deleted -= this.OnResetPowerSystemResource;
                    }
                    if ((value != null))
                    {
                        value.OutageSchedule = this;
                        value.Deleted += this.OnResetPowerSystemResource;
                    }
                    this.OnPowerSystemResourceChanged(e);
                    this.OnPropertyChanged("PowerSystemResource", e, _powerSystemResourceReference);
                }
            }
        }
        
        /// <summary>
        /// The SwitchingOperations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("OutageSchedule")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISwitchingOperation> SwitchingOperations
        {
            get
            {
                return this._switchingOperations;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new OutageScheduleReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Outage/OutageSchedule")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PlannedOutage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PlannedOutageChanging;
        
        /// <summary>
        /// Gets fired when the PlannedOutage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PlannedOutageChanged;
        
        /// <summary>
        /// Gets fired before the PowerSystemResource property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerSystemResourceChanging;
        
        /// <summary>
        /// Gets fired when the PowerSystemResource property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerSystemResourceChanged;
        
        private static ITypedElement RetrievePlannedOutageReference()
        {
            return ((ITypedElement)(((ModelElement)(OutageSchedule.ClassInstance)).Resolve("PlannedOutage")));
        }
        
        /// <summary>
        /// Raises the PlannedOutageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPlannedOutageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PlannedOutageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PlannedOutageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPlannedOutageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PlannedOutageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PlannedOutage property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPlannedOutage(object sender, System.EventArgs eventArgs)
        {
            this.PlannedOutage = null;
        }
        
        private static ITypedElement RetrievePowerSystemResourceReference()
        {
            return ((ITypedElement)(((ModelElement)(OutageSchedule.ClassInstance)).Resolve("PowerSystemResource")));
        }
        
        /// <summary>
        /// Raises the PowerSystemResourceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerSystemResourceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerSystemResourceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerSystemResourceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerSystemResourceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerSystemResourceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PowerSystemResource property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPowerSystemResource(object sender, System.EventArgs eventArgs)
        {
            this.PowerSystemResource = null;
        }
        
        private static ITypedElement RetrieveSwitchingOperationsReference()
        {
            return ((ITypedElement)(((ModelElement)(OutageSchedule.ClassInstance)).Resolve("SwitchingOperations")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SwitchingOperations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SwitchingOperationsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("SwitchingOperations", e, _switchingOperationsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SwitchingOperations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SwitchingOperationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SwitchingOperations", e, _switchingOperationsReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SWITCHINGOPERATIONS"))
            {
                return this._switchingOperations;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PLANNEDOUTAGE"))
            {
                this.PlannedOutage = ((IPlannedOutage)(value));
                return;
            }
            if ((feature == "POWERSYSTEMRESOURCE"))
            {
                this.PowerSystemResource = ((IPowerSystemResource)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "PlannedOutage"))
            {
                return new PlannedOutageProxy(this);
            }
            if ((attribute == "PowerSystemResource"))
            {
                return new PowerSystemResourceProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PlannedOutage"))
            {
                return new PlannedOutageProxy(this);
            }
            if ((reference == "PowerSystemResource"))
            {
                return new PowerSystemResourceProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Outage/OutageSchedule")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the OutageSchedule class
        /// </summary>
        public class OutageScheduleReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private OutageSchedule _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OutageScheduleReferencedElementsCollection(OutageSchedule parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.PlannedOutage != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PowerSystemResource != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.SwitchingOperations.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PlannedOutageChanged += this.PropagateValueChanges;
                this._parent.PowerSystemResourceChanged += this.PropagateValueChanges;
                this._parent.SwitchingOperations.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PlannedOutageChanged -= this.PropagateValueChanges;
                this._parent.PowerSystemResourceChanged -= this.PropagateValueChanges;
                this._parent.SwitchingOperations.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.PlannedOutage == null))
                {
                    IPlannedOutage plannedOutageCasted = item.As<IPlannedOutage>();
                    if ((plannedOutageCasted != null))
                    {
                        this._parent.PlannedOutage = plannedOutageCasted;
                        return;
                    }
                }
                if ((this._parent.PowerSystemResource == null))
                {
                    IPowerSystemResource powerSystemResourceCasted = item.As<IPowerSystemResource>();
                    if ((powerSystemResourceCasted != null))
                    {
                        this._parent.PowerSystemResource = powerSystemResourceCasted;
                        return;
                    }
                }
                ISwitchingOperation switchingOperationsCasted = item.As<ISwitchingOperation>();
                if ((switchingOperationsCasted != null))
                {
                    this._parent.SwitchingOperations.Add(switchingOperationsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PlannedOutage = null;
                this._parent.PowerSystemResource = null;
                this._parent.SwitchingOperations.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.PlannedOutage))
                {
                    return true;
                }
                if ((item == this._parent.PowerSystemResource))
                {
                    return true;
                }
                if (this._parent.SwitchingOperations.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.PlannedOutage != null))
                {
                    array[arrayIndex] = this._parent.PlannedOutage;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PowerSystemResource != null))
                {
                    array[arrayIndex] = this._parent.PowerSystemResource;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> switchingOperationsEnumerator = this._parent.SwitchingOperations.GetEnumerator();
                try
                {
                    for (
                    ; switchingOperationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = switchingOperationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    switchingOperationsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.PlannedOutage == item))
                {
                    this._parent.PlannedOutage = null;
                    return true;
                }
                if ((this._parent.PowerSystemResource == item))
                {
                    this._parent.PowerSystemResource = null;
                    return true;
                }
                ISwitchingOperation switchingOperationItem = item.As<ISwitchingOperation>();
                if (((switchingOperationItem != null) 
                            && this._parent.SwitchingOperations.Remove(switchingOperationItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PlannedOutage).Concat(this._parent.PowerSystemResource).Concat(this._parent.SwitchingOperations).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PlannedOutage property
        /// </summary>
        private sealed class PlannedOutageProxy : ModelPropertyChange<IOutageSchedule, IPlannedOutage>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PlannedOutageProxy(IOutageSchedule modelElement) : 
                    base(modelElement, "PlannedOutage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPlannedOutage Value
            {
                get
                {
                    return this.ModelElement.PlannedOutage;
                }
                set
                {
                    this.ModelElement.PlannedOutage = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PowerSystemResource property
        /// </summary>
        private sealed class PowerSystemResourceProxy : ModelPropertyChange<IOutageSchedule, IPowerSystemResource>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PowerSystemResourceProxy(IOutageSchedule modelElement) : 
                    base(modelElement, "PowerSystemResource")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPowerSystemResource Value
            {
                get
                {
                    return this.ModelElement.PowerSystemResource;
                }
                set
                {
                    this.ModelElement.PowerSystemResource = value;
                }
            }
        }
    }
}

