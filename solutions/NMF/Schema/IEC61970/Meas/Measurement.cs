using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;
using TTC2017.SmartGrids.CIM.IEC61970.SCADA;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Meas
{
    
    
    /// <summary>
    /// The default implementation of the Measurement class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Meas")]
    [XmlNamespacePrefixAttribute("cimMeas")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/Measurement")]
    [DebuggerDisplayAttribute("Measurement {UUID}")]
    public partial class Measurement : IdentifiedObject, IMeasurement, IModelElement
    {
        
        /// <summary>
        /// The backing field for the MeasurementType property
        /// </summary>
        private string _measurementType;
        
        private static Lazy<ITypedElement> _measurementTypeAttribute = new Lazy<ITypedElement>(RetrieveMeasurementTypeAttribute);
        
        private static Lazy<ITypedElement> _by_TiePointReference = new Lazy<ITypedElement>(RetrieveBy_TiePointReference);
        
        /// <summary>
        /// The backing field for the By_TiePoint property
        /// </summary>
        private ITiePoint _by_TiePoint;
        
        private static Lazy<ITypedElement> _terminalReference = new Lazy<ITypedElement>(RetrieveTerminalReference);
        
        /// <summary>
        /// The backing field for the Terminal property
        /// </summary>
        private ITerminal _terminal;
        
        private static Lazy<ITypedElement> _dynamicSchedulesReference = new Lazy<ITypedElement>(RetrieveDynamicSchedulesReference);
        
        /// <summary>
        /// The backing field for the DynamicSchedules property
        /// </summary>
        private MeasurementDynamicSchedulesCollection _dynamicSchedules;
        
        private static Lazy<ITypedElement> _locationsReference = new Lazy<ITypedElement>(RetrieveLocationsReference);
        
        /// <summary>
        /// The backing field for the Locations property
        /// </summary>
        private MeasurementLocationsCollection _locations;
        
        private static Lazy<ITypedElement> _assetReference = new Lazy<ITypedElement>(RetrieveAssetReference);
        
        /// <summary>
        /// The backing field for the Asset property
        /// </summary>
        private IAsset _asset;
        
        private static Lazy<ITypedElement> _violationLimitsReference = new Lazy<ITypedElement>(RetrieveViolationLimitsReference);
        
        /// <summary>
        /// The backing field for the ViolationLimits property
        /// </summary>
        private MeasurementViolationLimitsCollection _violationLimits;
        
        private static Lazy<ITypedElement> _documentsReference = new Lazy<ITypedElement>(RetrieveDocumentsReference);
        
        /// <summary>
        /// The backing field for the Documents property
        /// </summary>
        private MeasurementDocumentsCollection _documents;
        
        private static Lazy<ITypedElement> _pnodeReference = new Lazy<ITypedElement>(RetrievePnodeReference);
        
        /// <summary>
        /// The backing field for the Pnode property
        /// </summary>
        private IPnode _pnode;
        
        private static Lazy<ITypedElement> _powerSystemResourceReference = new Lazy<ITypedElement>(RetrievePowerSystemResourceReference);
        
        /// <summary>
        /// The backing field for the PowerSystemResource property
        /// </summary>
        private IPowerSystemResource _powerSystemResource;
        
        private static Lazy<ITypedElement> _unitReference = new Lazy<ITypedElement>(RetrieveUnitReference);
        
        /// <summary>
        /// The backing field for the Unit property
        /// </summary>
        private IUnit _unit;
        
        private static Lazy<ITypedElement> _for_TiePointReference = new Lazy<ITypedElement>(RetrieveFor_TiePointReference);
        
        /// <summary>
        /// The backing field for the For_TiePoint property
        /// </summary>
        private ITiePoint _for_TiePoint;
        
        private static IClass _classInstance;
        
        public Measurement()
        {
            this._dynamicSchedules = new MeasurementDynamicSchedulesCollection(this);
            this._dynamicSchedules.CollectionChanging += this.DynamicSchedulesCollectionChanging;
            this._dynamicSchedules.CollectionChanged += this.DynamicSchedulesCollectionChanged;
            this._locations = new MeasurementLocationsCollection(this);
            this._locations.CollectionChanging += this.LocationsCollectionChanging;
            this._locations.CollectionChanged += this.LocationsCollectionChanged;
            this._violationLimits = new MeasurementViolationLimitsCollection(this);
            this._violationLimits.CollectionChanging += this.ViolationLimitsCollectionChanging;
            this._violationLimits.CollectionChanged += this.ViolationLimitsCollectionChanged;
            this._documents = new MeasurementDocumentsCollection(this);
            this._documents.CollectionChanging += this.DocumentsCollectionChanging;
            this._documents.CollectionChanged += this.DocumentsCollectionChanged;
        }
        
        /// <summary>
        /// The measurementType property
        /// </summary>
        [XmlElementNameAttribute("measurementType")]
        [XmlAttributeAttribute(true)]
        public virtual string MeasurementType
        {
            get
            {
                return this._measurementType;
            }
            set
            {
                if ((this._measurementType != value))
                {
                    string old = this._measurementType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurementTypeChanging(e);
                    this.OnPropertyChanging("MeasurementType", e, _measurementTypeAttribute);
                    this._measurementType = value;
                    this.OnMeasurementTypeChanged(e);
                    this.OnPropertyChanged("MeasurementType", e, _measurementTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The By_TiePoint property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("By_Measurements")]
        public virtual ITiePoint By_TiePoint
        {
            get
            {
                return this._by_TiePoint;
            }
            set
            {
                if ((this._by_TiePoint != value))
                {
                    ITiePoint old = this._by_TiePoint;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBy_TiePointChanging(e);
                    this.OnPropertyChanging("By_TiePoint", e, _by_TiePointReference);
                    this._by_TiePoint = value;
                    if ((old != null))
                    {
                        old.By_Measurements.Remove(this);
                        old.Deleted -= this.OnResetBy_TiePoint;
                    }
                    if ((value != null))
                    {
                        value.By_Measurements.Add(this);
                        value.Deleted += this.OnResetBy_TiePoint;
                    }
                    this.OnBy_TiePointChanged(e);
                    this.OnPropertyChanged("By_TiePoint", e, _by_TiePointReference);
                }
            }
        }
        
        /// <summary>
        /// The Terminal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Measurements")]
        public virtual ITerminal Terminal
        {
            get
            {
                return this._terminal;
            }
            set
            {
                if ((this._terminal != value))
                {
                    ITerminal old = this._terminal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTerminalChanging(e);
                    this.OnPropertyChanging("Terminal", e, _terminalReference);
                    this._terminal = value;
                    if ((old != null))
                    {
                        old.Measurements.Remove(this);
                        old.Deleted -= this.OnResetTerminal;
                    }
                    if ((value != null))
                    {
                        value.Measurements.Add(this);
                        value.Deleted += this.OnResetTerminal;
                    }
                    this.OnTerminalChanged(e);
                    this.OnPropertyChanged("Terminal", e, _terminalReference);
                }
            }
        }
        
        /// <summary>
        /// The DynamicSchedules property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Measurement")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDynamicSchedule> DynamicSchedules
        {
            get
            {
                return this._dynamicSchedules;
            }
        }
        
        /// <summary>
        /// The Locations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Measurements")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILocation> Locations
        {
            get
            {
                return this._locations;
            }
        }
        
        /// <summary>
        /// The Asset property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Measurements")]
        public virtual IAsset Asset
        {
            get
            {
                return this._asset;
            }
            set
            {
                if ((this._asset != value))
                {
                    IAsset old = this._asset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAssetChanging(e);
                    this.OnPropertyChanging("Asset", e, _assetReference);
                    this._asset = value;
                    if ((old != null))
                    {
                        old.Measurements.Remove(this);
                        old.Deleted -= this.OnResetAsset;
                    }
                    if ((value != null))
                    {
                        value.Measurements.Add(this);
                        value.Deleted += this.OnResetAsset;
                    }
                    this.OnAssetChanged(e);
                    this.OnPropertyChanged("Asset", e, _assetReference);
                }
            }
        }
        
        /// <summary>
        /// The ViolationLimits property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Measurement")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IViolationLimit> ViolationLimits
        {
            get
            {
                return this._violationLimits;
            }
        }
        
        /// <summary>
        /// The Documents property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Measurements")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDocument> Documents
        {
            get
            {
                return this._documents;
            }
        }
        
        /// <summary>
        /// The Pnode property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Measurements")]
        public virtual IPnode Pnode
        {
            get
            {
                return this._pnode;
            }
            set
            {
                if ((this._pnode != value))
                {
                    IPnode old = this._pnode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPnodeChanging(e);
                    this.OnPropertyChanging("Pnode", e, _pnodeReference);
                    this._pnode = value;
                    if ((old != null))
                    {
                        old.Measurements.Remove(this);
                        old.Deleted -= this.OnResetPnode;
                    }
                    if ((value != null))
                    {
                        value.Measurements.Add(this);
                        value.Deleted += this.OnResetPnode;
                    }
                    this.OnPnodeChanged(e);
                    this.OnPropertyChanged("Pnode", e, _pnodeReference);
                }
            }
        }
        
        /// <summary>
        /// The PowerSystemResource property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Measurements")]
        public virtual IPowerSystemResource PowerSystemResource
        {
            get
            {
                return this._powerSystemResource;
            }
            set
            {
                if ((this._powerSystemResource != value))
                {
                    IPowerSystemResource old = this._powerSystemResource;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPowerSystemResourceChanging(e);
                    this.OnPropertyChanging("PowerSystemResource", e, _powerSystemResourceReference);
                    this._powerSystemResource = value;
                    if ((old != null))
                    {
                        old.Measurements.Remove(this);
                        old.Deleted -= this.OnResetPowerSystemResource;
                    }
                    if ((value != null))
                    {
                        value.Measurements.Add(this);
                        value.Deleted += this.OnResetPowerSystemResource;
                    }
                    this.OnPowerSystemResourceChanged(e);
                    this.OnPropertyChanged("PowerSystemResource", e, _powerSystemResourceReference);
                }
            }
        }
        
        /// <summary>
        /// The Unit property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Measurements")]
        public virtual IUnit Unit
        {
            get
            {
                return this._unit;
            }
            set
            {
                if ((this._unit != value))
                {
                    IUnit old = this._unit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnitChanging(e);
                    this.OnPropertyChanging("Unit", e, _unitReference);
                    this._unit = value;
                    if ((old != null))
                    {
                        old.Measurements.Remove(this);
                        old.Deleted -= this.OnResetUnit;
                    }
                    if ((value != null))
                    {
                        value.Measurements.Add(this);
                        value.Deleted += this.OnResetUnit;
                    }
                    this.OnUnitChanged(e);
                    this.OnPropertyChanged("Unit", e, _unitReference);
                }
            }
        }
        
        /// <summary>
        /// The For_TiePoint property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("For_Measurements")]
        public virtual ITiePoint For_TiePoint
        {
            get
            {
                return this._for_TiePoint;
            }
            set
            {
                if ((this._for_TiePoint != value))
                {
                    ITiePoint old = this._for_TiePoint;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFor_TiePointChanging(e);
                    this.OnPropertyChanging("For_TiePoint", e, _for_TiePointReference);
                    this._for_TiePoint = value;
                    if ((old != null))
                    {
                        old.For_Measurements.Remove(this);
                        old.Deleted -= this.OnResetFor_TiePoint;
                    }
                    if ((value != null))
                    {
                        value.For_Measurements.Add(this);
                        value.Deleted += this.OnResetFor_TiePoint;
                    }
                    this.OnFor_TiePointChanged(e);
                    this.OnPropertyChanged("For_TiePoint", e, _for_TiePointReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MeasurementReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/Measurement")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the MeasurementType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeasurementTypeChanging;
        
        /// <summary>
        /// Gets fired when the MeasurementType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeasurementTypeChanged;
        
        /// <summary>
        /// Gets fired before the By_TiePoint property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> By_TiePointChanging;
        
        /// <summary>
        /// Gets fired when the By_TiePoint property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> By_TiePointChanged;
        
        /// <summary>
        /// Gets fired before the Terminal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TerminalChanging;
        
        /// <summary>
        /// Gets fired when the Terminal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TerminalChanged;
        
        /// <summary>
        /// Gets fired before the Asset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetChanging;
        
        /// <summary>
        /// Gets fired when the Asset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetChanged;
        
        /// <summary>
        /// Gets fired before the Pnode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PnodeChanging;
        
        /// <summary>
        /// Gets fired when the Pnode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PnodeChanged;
        
        /// <summary>
        /// Gets fired before the PowerSystemResource property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerSystemResourceChanging;
        
        /// <summary>
        /// Gets fired when the PowerSystemResource property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerSystemResourceChanged;
        
        /// <summary>
        /// Gets fired before the Unit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitChanging;
        
        /// <summary>
        /// Gets fired when the Unit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitChanged;
        
        /// <summary>
        /// Gets fired before the For_TiePoint property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> For_TiePointChanging;
        
        /// <summary>
        /// Gets fired when the For_TiePoint property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> For_TiePointChanged;
        
        private static ITypedElement RetrieveMeasurementTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Measurement.ClassInstance)).Resolve("measurementType")));
        }
        
        /// <summary>
        /// Raises the MeasurementTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeasurementTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeasurementTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeasurementTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBy_TiePointReference()
        {
            return ((ITypedElement)(((ModelElement)(Measurement.ClassInstance)).Resolve("By_TiePoint")));
        }
        
        /// <summary>
        /// Raises the By_TiePointChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBy_TiePointChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.By_TiePointChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the By_TiePointChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBy_TiePointChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.By_TiePointChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the By_TiePoint property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBy_TiePoint(object sender, System.EventArgs eventArgs)
        {
            this.By_TiePoint = null;
        }
        
        private static ITypedElement RetrieveTerminalReference()
        {
            return ((ITypedElement)(((ModelElement)(Measurement.ClassInstance)).Resolve("Terminal")));
        }
        
        /// <summary>
        /// Raises the TerminalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TerminalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TerminalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TerminalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Terminal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTerminal(object sender, System.EventArgs eventArgs)
        {
            this.Terminal = null;
        }
        
        private static ITypedElement RetrieveDynamicSchedulesReference()
        {
            return ((ITypedElement)(((ModelElement)(Measurement.ClassInstance)).Resolve("DynamicSchedules")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DynamicSchedules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DynamicSchedulesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("DynamicSchedules", e, _dynamicSchedulesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DynamicSchedules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DynamicSchedulesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DynamicSchedules", e, _dynamicSchedulesReference);
        }
        
        private static ITypedElement RetrieveLocationsReference()
        {
            return ((ITypedElement)(((ModelElement)(Measurement.ClassInstance)).Resolve("Locations")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Locations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LocationsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Locations", e, _locationsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Locations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LocationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Locations", e, _locationsReference);
        }
        
        private static ITypedElement RetrieveAssetReference()
        {
            return ((ITypedElement)(((ModelElement)(Measurement.ClassInstance)).Resolve("Asset")));
        }
        
        /// <summary>
        /// Raises the AssetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AssetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Asset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAsset(object sender, System.EventArgs eventArgs)
        {
            this.Asset = null;
        }
        
        private static ITypedElement RetrieveViolationLimitsReference()
        {
            return ((ITypedElement)(((ModelElement)(Measurement.ClassInstance)).Resolve("ViolationLimits")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ViolationLimits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ViolationLimitsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ViolationLimits", e, _violationLimitsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ViolationLimits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ViolationLimitsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ViolationLimits", e, _violationLimitsReference);
        }
        
        private static ITypedElement RetrieveDocumentsReference()
        {
            return ((ITypedElement)(((ModelElement)(Measurement.ClassInstance)).Resolve("Documents")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Documents property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DocumentsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Documents", e, _documentsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Documents property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DocumentsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Documents", e, _documentsReference);
        }
        
        private static ITypedElement RetrievePnodeReference()
        {
            return ((ITypedElement)(((ModelElement)(Measurement.ClassInstance)).Resolve("Pnode")));
        }
        
        /// <summary>
        /// Raises the PnodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPnodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PnodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PnodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPnodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PnodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Pnode property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPnode(object sender, System.EventArgs eventArgs)
        {
            this.Pnode = null;
        }
        
        private static ITypedElement RetrievePowerSystemResourceReference()
        {
            return ((ITypedElement)(((ModelElement)(Measurement.ClassInstance)).Resolve("PowerSystemResource")));
        }
        
        /// <summary>
        /// Raises the PowerSystemResourceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerSystemResourceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerSystemResourceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerSystemResourceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerSystemResourceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerSystemResourceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PowerSystemResource property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPowerSystemResource(object sender, System.EventArgs eventArgs)
        {
            this.PowerSystemResource = null;
        }
        
        private static ITypedElement RetrieveUnitReference()
        {
            return ((ITypedElement)(((ModelElement)(Measurement.ClassInstance)).Resolve("Unit")));
        }
        
        /// <summary>
        /// Raises the UnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Unit property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetUnit(object sender, System.EventArgs eventArgs)
        {
            this.Unit = null;
        }
        
        private static ITypedElement RetrieveFor_TiePointReference()
        {
            return ((ITypedElement)(((ModelElement)(Measurement.ClassInstance)).Resolve("For_TiePoint")));
        }
        
        /// <summary>
        /// Raises the For_TiePointChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFor_TiePointChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.For_TiePointChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the For_TiePointChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFor_TiePointChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.For_TiePointChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the For_TiePoint property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFor_TiePoint(object sender, System.EventArgs eventArgs)
        {
            this.For_TiePoint = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MEASUREMENTTYPE"))
            {
                return this.MeasurementType;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "DYNAMICSCHEDULES"))
            {
                return this._dynamicSchedules;
            }
            if ((feature == "LOCATIONS"))
            {
                return this._locations;
            }
            if ((feature == "VIOLATIONLIMITS"))
            {
                return this._violationLimits;
            }
            if ((feature == "DOCUMENTS"))
            {
                return this._documents;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "BY_TIEPOINT"))
            {
                this.By_TiePoint = ((ITiePoint)(value));
                return;
            }
            if ((feature == "TERMINAL"))
            {
                this.Terminal = ((ITerminal)(value));
                return;
            }
            if ((feature == "ASSET"))
            {
                this.Asset = ((IAsset)(value));
                return;
            }
            if ((feature == "PNODE"))
            {
                this.Pnode = ((IPnode)(value));
                return;
            }
            if ((feature == "POWERSYSTEMRESOURCE"))
            {
                this.PowerSystemResource = ((IPowerSystemResource)(value));
                return;
            }
            if ((feature == "UNIT"))
            {
                this.Unit = ((IUnit)(value));
                return;
            }
            if ((feature == "FOR_TIEPOINT"))
            {
                this.For_TiePoint = ((ITiePoint)(value));
                return;
            }
            if ((feature == "MEASUREMENTTYPE"))
            {
                this.MeasurementType = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "By_TiePoint"))
            {
                return new By_TiePointProxy(this);
            }
            if ((attribute == "Terminal"))
            {
                return new TerminalProxy(this);
            }
            if ((attribute == "Asset"))
            {
                return new AssetProxy(this);
            }
            if ((attribute == "Pnode"))
            {
                return new PnodeProxy(this);
            }
            if ((attribute == "PowerSystemResource"))
            {
                return new PowerSystemResourceProxy(this);
            }
            if ((attribute == "Unit"))
            {
                return new UnitProxy(this);
            }
            if ((attribute == "For_TiePoint"))
            {
                return new For_TiePointProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "By_TiePoint"))
            {
                return new By_TiePointProxy(this);
            }
            if ((reference == "Terminal"))
            {
                return new TerminalProxy(this);
            }
            if ((reference == "Asset"))
            {
                return new AssetProxy(this);
            }
            if ((reference == "Pnode"))
            {
                return new PnodeProxy(this);
            }
            if ((reference == "PowerSystemResource"))
            {
                return new PowerSystemResourceProxy(this);
            }
            if ((reference == "Unit"))
            {
                return new UnitProxy(this);
            }
            if ((reference == "For_TiePoint"))
            {
                return new For_TiePointProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/Measurement")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Measurement class
        /// </summary>
        public class MeasurementReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Measurement _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MeasurementReferencedElementsCollection(Measurement parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.By_TiePoint != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Terminal != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.DynamicSchedules.Count);
                    count = (count + this._parent.Locations.Count);
                    if ((this._parent.Asset != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ViolationLimits.Count);
                    count = (count + this._parent.Documents.Count);
                    if ((this._parent.Pnode != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PowerSystemResource != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Unit != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.For_TiePoint != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.By_TiePointChanged += this.PropagateValueChanges;
                this._parent.TerminalChanged += this.PropagateValueChanges;
                this._parent.DynamicSchedules.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Locations.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AssetChanged += this.PropagateValueChanges;
                this._parent.ViolationLimits.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Documents.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PnodeChanged += this.PropagateValueChanges;
                this._parent.PowerSystemResourceChanged += this.PropagateValueChanges;
                this._parent.UnitChanged += this.PropagateValueChanges;
                this._parent.For_TiePointChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.By_TiePointChanged -= this.PropagateValueChanges;
                this._parent.TerminalChanged -= this.PropagateValueChanges;
                this._parent.DynamicSchedules.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Locations.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AssetChanged -= this.PropagateValueChanges;
                this._parent.ViolationLimits.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Documents.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PnodeChanged -= this.PropagateValueChanges;
                this._parent.PowerSystemResourceChanged -= this.PropagateValueChanges;
                this._parent.UnitChanged -= this.PropagateValueChanges;
                this._parent.For_TiePointChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.By_TiePoint == null))
                {
                    ITiePoint by_TiePointCasted = item.As<ITiePoint>();
                    if ((by_TiePointCasted != null))
                    {
                        this._parent.By_TiePoint = by_TiePointCasted;
                        return;
                    }
                }
                if ((this._parent.Terminal == null))
                {
                    ITerminal terminalCasted = item.As<ITerminal>();
                    if ((terminalCasted != null))
                    {
                        this._parent.Terminal = terminalCasted;
                        return;
                    }
                }
                IDynamicSchedule dynamicSchedulesCasted = item.As<IDynamicSchedule>();
                if ((dynamicSchedulesCasted != null))
                {
                    this._parent.DynamicSchedules.Add(dynamicSchedulesCasted);
                }
                ILocation locationsCasted = item.As<ILocation>();
                if ((locationsCasted != null))
                {
                    this._parent.Locations.Add(locationsCasted);
                }
                if ((this._parent.Asset == null))
                {
                    IAsset assetCasted = item.As<IAsset>();
                    if ((assetCasted != null))
                    {
                        this._parent.Asset = assetCasted;
                        return;
                    }
                }
                IViolationLimit violationLimitsCasted = item.As<IViolationLimit>();
                if ((violationLimitsCasted != null))
                {
                    this._parent.ViolationLimits.Add(violationLimitsCasted);
                }
                IDocument documentsCasted = item.As<IDocument>();
                if ((documentsCasted != null))
                {
                    this._parent.Documents.Add(documentsCasted);
                }
                if ((this._parent.Pnode == null))
                {
                    IPnode pnodeCasted = item.As<IPnode>();
                    if ((pnodeCasted != null))
                    {
                        this._parent.Pnode = pnodeCasted;
                        return;
                    }
                }
                if ((this._parent.PowerSystemResource == null))
                {
                    IPowerSystemResource powerSystemResourceCasted = item.As<IPowerSystemResource>();
                    if ((powerSystemResourceCasted != null))
                    {
                        this._parent.PowerSystemResource = powerSystemResourceCasted;
                        return;
                    }
                }
                if ((this._parent.Unit == null))
                {
                    IUnit unitCasted = item.As<IUnit>();
                    if ((unitCasted != null))
                    {
                        this._parent.Unit = unitCasted;
                        return;
                    }
                }
                if ((this._parent.For_TiePoint == null))
                {
                    ITiePoint for_TiePointCasted = item.As<ITiePoint>();
                    if ((for_TiePointCasted != null))
                    {
                        this._parent.For_TiePoint = for_TiePointCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.By_TiePoint = null;
                this._parent.Terminal = null;
                this._parent.DynamicSchedules.Clear();
                this._parent.Locations.Clear();
                this._parent.Asset = null;
                this._parent.ViolationLimits.Clear();
                this._parent.Documents.Clear();
                this._parent.Pnode = null;
                this._parent.PowerSystemResource = null;
                this._parent.Unit = null;
                this._parent.For_TiePoint = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.By_TiePoint))
                {
                    return true;
                }
                if ((item == this._parent.Terminal))
                {
                    return true;
                }
                if (this._parent.DynamicSchedules.Contains(item))
                {
                    return true;
                }
                if (this._parent.Locations.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Asset))
                {
                    return true;
                }
                if (this._parent.ViolationLimits.Contains(item))
                {
                    return true;
                }
                if (this._parent.Documents.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Pnode))
                {
                    return true;
                }
                if ((item == this._parent.PowerSystemResource))
                {
                    return true;
                }
                if ((item == this._parent.Unit))
                {
                    return true;
                }
                if ((item == this._parent.For_TiePoint))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.By_TiePoint != null))
                {
                    array[arrayIndex] = this._parent.By_TiePoint;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Terminal != null))
                {
                    array[arrayIndex] = this._parent.Terminal;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> dynamicSchedulesEnumerator = this._parent.DynamicSchedules.GetEnumerator();
                try
                {
                    for (
                    ; dynamicSchedulesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = dynamicSchedulesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    dynamicSchedulesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> locationsEnumerator = this._parent.Locations.GetEnumerator();
                try
                {
                    for (
                    ; locationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = locationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    locationsEnumerator.Dispose();
                }
                if ((this._parent.Asset != null))
                {
                    array[arrayIndex] = this._parent.Asset;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> violationLimitsEnumerator = this._parent.ViolationLimits.GetEnumerator();
                try
                {
                    for (
                    ; violationLimitsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = violationLimitsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    violationLimitsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> documentsEnumerator = this._parent.Documents.GetEnumerator();
                try
                {
                    for (
                    ; documentsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = documentsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    documentsEnumerator.Dispose();
                }
                if ((this._parent.Pnode != null))
                {
                    array[arrayIndex] = this._parent.Pnode;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PowerSystemResource != null))
                {
                    array[arrayIndex] = this._parent.PowerSystemResource;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Unit != null))
                {
                    array[arrayIndex] = this._parent.Unit;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.For_TiePoint != null))
                {
                    array[arrayIndex] = this._parent.For_TiePoint;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.By_TiePoint == item))
                {
                    this._parent.By_TiePoint = null;
                    return true;
                }
                if ((this._parent.Terminal == item))
                {
                    this._parent.Terminal = null;
                    return true;
                }
                IDynamicSchedule dynamicScheduleItem = item.As<IDynamicSchedule>();
                if (((dynamicScheduleItem != null) 
                            && this._parent.DynamicSchedules.Remove(dynamicScheduleItem)))
                {
                    return true;
                }
                ILocation locationItem = item.As<ILocation>();
                if (((locationItem != null) 
                            && this._parent.Locations.Remove(locationItem)))
                {
                    return true;
                }
                if ((this._parent.Asset == item))
                {
                    this._parent.Asset = null;
                    return true;
                }
                IViolationLimit violationLimitItem = item.As<IViolationLimit>();
                if (((violationLimitItem != null) 
                            && this._parent.ViolationLimits.Remove(violationLimitItem)))
                {
                    return true;
                }
                IDocument documentItem = item.As<IDocument>();
                if (((documentItem != null) 
                            && this._parent.Documents.Remove(documentItem)))
                {
                    return true;
                }
                if ((this._parent.Pnode == item))
                {
                    this._parent.Pnode = null;
                    return true;
                }
                if ((this._parent.PowerSystemResource == item))
                {
                    this._parent.PowerSystemResource = null;
                    return true;
                }
                if ((this._parent.Unit == item))
                {
                    this._parent.Unit = null;
                    return true;
                }
                if ((this._parent.For_TiePoint == item))
                {
                    this._parent.For_TiePoint = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.By_TiePoint).Concat(this._parent.Terminal).Concat(this._parent.DynamicSchedules).Concat(this._parent.Locations).Concat(this._parent.Asset).Concat(this._parent.ViolationLimits).Concat(this._parent.Documents).Concat(this._parent.Pnode).Concat(this._parent.PowerSystemResource).Concat(this._parent.Unit).Concat(this._parent.For_TiePoint).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the measurementType property
        /// </summary>
        private sealed class MeasurementTypeProxy : ModelPropertyChange<IMeasurement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeasurementTypeProxy(IMeasurement modelElement) : 
                    base(modelElement, "measurementType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.MeasurementType;
                }
                set
                {
                    this.ModelElement.MeasurementType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the By_TiePoint property
        /// </summary>
        private sealed class By_TiePointProxy : ModelPropertyChange<IMeasurement, ITiePoint>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public By_TiePointProxy(IMeasurement modelElement) : 
                    base(modelElement, "By_TiePoint")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITiePoint Value
            {
                get
                {
                    return this.ModelElement.By_TiePoint;
                }
                set
                {
                    this.ModelElement.By_TiePoint = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Terminal property
        /// </summary>
        private sealed class TerminalProxy : ModelPropertyChange<IMeasurement, ITerminal>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TerminalProxy(IMeasurement modelElement) : 
                    base(modelElement, "Terminal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITerminal Value
            {
                get
                {
                    return this.ModelElement.Terminal;
                }
                set
                {
                    this.ModelElement.Terminal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Asset property
        /// </summary>
        private sealed class AssetProxy : ModelPropertyChange<IMeasurement, IAsset>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssetProxy(IMeasurement modelElement) : 
                    base(modelElement, "Asset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAsset Value
            {
                get
                {
                    return this.ModelElement.Asset;
                }
                set
                {
                    this.ModelElement.Asset = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Pnode property
        /// </summary>
        private sealed class PnodeProxy : ModelPropertyChange<IMeasurement, IPnode>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PnodeProxy(IMeasurement modelElement) : 
                    base(modelElement, "Pnode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPnode Value
            {
                get
                {
                    return this.ModelElement.Pnode;
                }
                set
                {
                    this.ModelElement.Pnode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PowerSystemResource property
        /// </summary>
        private sealed class PowerSystemResourceProxy : ModelPropertyChange<IMeasurement, IPowerSystemResource>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PowerSystemResourceProxy(IMeasurement modelElement) : 
                    base(modelElement, "PowerSystemResource")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPowerSystemResource Value
            {
                get
                {
                    return this.ModelElement.PowerSystemResource;
                }
                set
                {
                    this.ModelElement.PowerSystemResource = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Unit property
        /// </summary>
        private sealed class UnitProxy : ModelPropertyChange<IMeasurement, IUnit>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UnitProxy(IMeasurement modelElement) : 
                    base(modelElement, "Unit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IUnit Value
            {
                get
                {
                    return this.ModelElement.Unit;
                }
                set
                {
                    this.ModelElement.Unit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the For_TiePoint property
        /// </summary>
        private sealed class For_TiePointProxy : ModelPropertyChange<IMeasurement, ITiePoint>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public For_TiePointProxy(IMeasurement modelElement) : 
                    base(modelElement, "For_TiePoint")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITiePoint Value
            {
                get
                {
                    return this.ModelElement.For_TiePoint;
                }
                set
                {
                    this.ModelElement.For_TiePoint = value;
                }
            }
        }
    }
}

