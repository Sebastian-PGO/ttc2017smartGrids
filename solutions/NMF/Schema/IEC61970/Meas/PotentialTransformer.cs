using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;
using TTC2017.SmartGrids.CIM.IEC61970.SCADA;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Meas
{
    
    
    /// <summary>
    /// The default implementation of the PotentialTransformer class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Meas")]
    [XmlNamespacePrefixAttribute("cimMeas")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/PotentialTransformer")]
    [DebuggerDisplayAttribute("PotentialTransformer {UUID}")]
    public partial class PotentialTransformer : Equipment, IPotentialTransformer, IModelElement
    {
        
        /// <summary>
        /// The backing field for the NominalRatio property
        /// </summary>
        private float _nominalRatio;
        
        private static Lazy<ITypedElement> _nominalRatioAttribute = new Lazy<ITypedElement>(RetrieveNominalRatioAttribute);
        
        /// <summary>
        /// The backing field for the PtClass property
        /// </summary>
        private string _ptClass;
        
        private static Lazy<ITypedElement> _ptClassAttribute = new Lazy<ITypedElement>(RetrievePtClassAttribute);
        
        /// <summary>
        /// The backing field for the AccuracyClass property
        /// </summary>
        private string _accuracyClass;
        
        private static Lazy<ITypedElement> _accuracyClassAttribute = new Lazy<ITypedElement>(RetrieveAccuracyClassAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The nominalRatio property
        /// </summary>
        [XmlElementNameAttribute("nominalRatio")]
        [XmlAttributeAttribute(true)]
        public virtual float NominalRatio
        {
            get
            {
                return this._nominalRatio;
            }
            set
            {
                if ((this._nominalRatio != value))
                {
                    float old = this._nominalRatio;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNominalRatioChanging(e);
                    this.OnPropertyChanging("NominalRatio", e, _nominalRatioAttribute);
                    this._nominalRatio = value;
                    this.OnNominalRatioChanged(e);
                    this.OnPropertyChanged("NominalRatio", e, _nominalRatioAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ptClass property
        /// </summary>
        [XmlElementNameAttribute("ptClass")]
        [XmlAttributeAttribute(true)]
        public virtual string PtClass
        {
            get
            {
                return this._ptClass;
            }
            set
            {
                if ((this._ptClass != value))
                {
                    string old = this._ptClass;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPtClassChanging(e);
                    this.OnPropertyChanging("PtClass", e, _ptClassAttribute);
                    this._ptClass = value;
                    this.OnPtClassChanged(e);
                    this.OnPropertyChanged("PtClass", e, _ptClassAttribute);
                }
            }
        }
        
        /// <summary>
        /// The accuracyClass property
        /// </summary>
        [XmlElementNameAttribute("accuracyClass")]
        [XmlAttributeAttribute(true)]
        public virtual string AccuracyClass
        {
            get
            {
                return this._accuracyClass;
            }
            set
            {
                if ((this._accuracyClass != value))
                {
                    string old = this._accuracyClass;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAccuracyClassChanging(e);
                    this.OnPropertyChanging("AccuracyClass", e, _accuracyClassAttribute);
                    this._accuracyClass = value;
                    this.OnAccuracyClassChanged(e);
                    this.OnPropertyChanged("AccuracyClass", e, _accuracyClassAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/PotentialTransformer")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the NominalRatio property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NominalRatioChanging;
        
        /// <summary>
        /// Gets fired when the NominalRatio property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NominalRatioChanged;
        
        /// <summary>
        /// Gets fired before the PtClass property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PtClassChanging;
        
        /// <summary>
        /// Gets fired when the PtClass property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PtClassChanged;
        
        /// <summary>
        /// Gets fired before the AccuracyClass property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccuracyClassChanging;
        
        /// <summary>
        /// Gets fired when the AccuracyClass property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccuracyClassChanged;
        
        private static ITypedElement RetrieveNominalRatioAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PotentialTransformer.ClassInstance)).Resolve("nominalRatio")));
        }
        
        /// <summary>
        /// Raises the NominalRatioChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalRatioChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NominalRatioChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NominalRatioChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalRatioChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NominalRatioChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePtClassAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PotentialTransformer.ClassInstance)).Resolve("ptClass")));
        }
        
        /// <summary>
        /// Raises the PtClassChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPtClassChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PtClassChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PtClassChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPtClassChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PtClassChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAccuracyClassAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PotentialTransformer.ClassInstance)).Resolve("accuracyClass")));
        }
        
        /// <summary>
        /// Raises the AccuracyClassChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccuracyClassChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccuracyClassChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AccuracyClassChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccuracyClassChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccuracyClassChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NOMINALRATIO"))
            {
                return this.NominalRatio;
            }
            if ((attribute == "PTCLASS"))
            {
                return this.PtClass;
            }
            if ((attribute == "ACCURACYCLASS"))
            {
                return this.AccuracyClass;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NOMINALRATIO"))
            {
                this.NominalRatio = ((float)(value));
                return;
            }
            if ((feature == "PTCLASS"))
            {
                this.PtClass = ((string)(value));
                return;
            }
            if ((feature == "ACCURACYCLASS"))
            {
                this.AccuracyClass = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/PotentialTransformer")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the nominalRatio property
        /// </summary>
        private sealed class NominalRatioProxy : ModelPropertyChange<IPotentialTransformer, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NominalRatioProxy(IPotentialTransformer modelElement) : 
                    base(modelElement, "nominalRatio")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NominalRatio;
                }
                set
                {
                    this.ModelElement.NominalRatio = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ptClass property
        /// </summary>
        private sealed class PtClassProxy : ModelPropertyChange<IPotentialTransformer, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PtClassProxy(IPotentialTransformer modelElement) : 
                    base(modelElement, "ptClass")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.PtClass;
                }
                set
                {
                    this.ModelElement.PtClass = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the accuracyClass property
        /// </summary>
        private sealed class AccuracyClassProxy : ModelPropertyChange<IPotentialTransformer, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AccuracyClassProxy(IPotentialTransformer modelElement) : 
                    base(modelElement, "accuracyClass")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AccuracyClass;
                }
                set
                {
                    this.ModelElement.AccuracyClass = value;
                }
            }
        }
    }
}

