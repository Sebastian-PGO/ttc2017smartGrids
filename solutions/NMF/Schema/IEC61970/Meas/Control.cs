using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;
using TTC2017.SmartGrids.CIM.IEC61970.SCADA;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Meas
{
    
    
    /// <summary>
    /// The default implementation of the Control class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Meas")]
    [XmlNamespacePrefixAttribute("cimMeas")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/Control")]
    [DebuggerDisplayAttribute("Control {UUID}")]
    public partial class Control : IdentifiedObject, IControl, IModelElement
    {
        
        /// <summary>
        /// The backing field for the OperationInProgress property
        /// </summary>
        private bool _operationInProgress;
        
        private static Lazy<ITypedElement> _operationInProgressAttribute = new Lazy<ITypedElement>(RetrieveOperationInProgressAttribute);
        
        /// <summary>
        /// The backing field for the TimeStamp property
        /// </summary>
        private DateTime _timeStamp;
        
        private static Lazy<ITypedElement> _timeStampAttribute = new Lazy<ITypedElement>(RetrieveTimeStampAttribute);
        
        private static Lazy<ITypedElement> _regulatingCondEqReference = new Lazy<ITypedElement>(RetrieveRegulatingCondEqReference);
        
        /// <summary>
        /// The backing field for the RegulatingCondEq property
        /// </summary>
        private IRegulatingCondEq _regulatingCondEq;
        
        private static Lazy<ITypedElement> _controlTypeReference = new Lazy<ITypedElement>(RetrieveControlTypeReference);
        
        /// <summary>
        /// The backing field for the ControlType property
        /// </summary>
        private IControlType _controlType;
        
        private static Lazy<ITypedElement> _unitReference = new Lazy<ITypedElement>(RetrieveUnitReference);
        
        /// <summary>
        /// The backing field for the Unit property
        /// </summary>
        private IUnit _unit;
        
        private static Lazy<ITypedElement> _remoteControlReference = new Lazy<ITypedElement>(RetrieveRemoteControlReference);
        
        /// <summary>
        /// The backing field for the RemoteControl property
        /// </summary>
        private IRemoteControl _remoteControl;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The operationInProgress property
        /// </summary>
        [XmlElementNameAttribute("operationInProgress")]
        [XmlAttributeAttribute(true)]
        public virtual bool OperationInProgress
        {
            get
            {
                return this._operationInProgress;
            }
            set
            {
                if ((this._operationInProgress != value))
                {
                    bool old = this._operationInProgress;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOperationInProgressChanging(e);
                    this.OnPropertyChanging("OperationInProgress", e, _operationInProgressAttribute);
                    this._operationInProgress = value;
                    this.OnOperationInProgressChanged(e);
                    this.OnPropertyChanged("OperationInProgress", e, _operationInProgressAttribute);
                }
            }
        }
        
        /// <summary>
        /// The timeStamp property
        /// </summary>
        [XmlElementNameAttribute("timeStamp")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime TimeStamp
        {
            get
            {
                return this._timeStamp;
            }
            set
            {
                if ((this._timeStamp != value))
                {
                    DateTime old = this._timeStamp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeStampChanging(e);
                    this.OnPropertyChanging("TimeStamp", e, _timeStampAttribute);
                    this._timeStamp = value;
                    this.OnTimeStampChanged(e);
                    this.OnPropertyChanged("TimeStamp", e, _timeStampAttribute);
                }
            }
        }
        
        /// <summary>
        /// The RegulatingCondEq property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Controls")]
        public virtual IRegulatingCondEq RegulatingCondEq
        {
            get
            {
                return this._regulatingCondEq;
            }
            set
            {
                if ((this._regulatingCondEq != value))
                {
                    IRegulatingCondEq old = this._regulatingCondEq;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRegulatingCondEqChanging(e);
                    this.OnPropertyChanging("RegulatingCondEq", e, _regulatingCondEqReference);
                    this._regulatingCondEq = value;
                    if ((old != null))
                    {
                        old.Controls.Remove(this);
                        old.Deleted -= this.OnResetRegulatingCondEq;
                    }
                    if ((value != null))
                    {
                        value.Controls.Add(this);
                        value.Deleted += this.OnResetRegulatingCondEq;
                    }
                    this.OnRegulatingCondEqChanged(e);
                    this.OnPropertyChanged("RegulatingCondEq", e, _regulatingCondEqReference);
                }
            }
        }
        
        /// <summary>
        /// The ControlType property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Controls")]
        public virtual IControlType ControlType
        {
            get
            {
                return this._controlType;
            }
            set
            {
                if ((this._controlType != value))
                {
                    IControlType old = this._controlType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnControlTypeChanging(e);
                    this.OnPropertyChanging("ControlType", e, _controlTypeReference);
                    this._controlType = value;
                    if ((old != null))
                    {
                        old.Controls.Remove(this);
                        old.Deleted -= this.OnResetControlType;
                    }
                    if ((value != null))
                    {
                        value.Controls.Add(this);
                        value.Deleted += this.OnResetControlType;
                    }
                    this.OnControlTypeChanged(e);
                    this.OnPropertyChanged("ControlType", e, _controlTypeReference);
                }
            }
        }
        
        /// <summary>
        /// The Unit property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Controls")]
        public virtual IUnit Unit
        {
            get
            {
                return this._unit;
            }
            set
            {
                if ((this._unit != value))
                {
                    IUnit old = this._unit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnitChanging(e);
                    this.OnPropertyChanging("Unit", e, _unitReference);
                    this._unit = value;
                    if ((old != null))
                    {
                        old.Controls.Remove(this);
                        old.Deleted -= this.OnResetUnit;
                    }
                    if ((value != null))
                    {
                        value.Controls.Add(this);
                        value.Deleted += this.OnResetUnit;
                    }
                    this.OnUnitChanged(e);
                    this.OnPropertyChanged("Unit", e, _unitReference);
                }
            }
        }
        
        /// <summary>
        /// The RemoteControl property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Control")]
        public virtual IRemoteControl RemoteControl
        {
            get
            {
                return this._remoteControl;
            }
            set
            {
                if ((this._remoteControl != value))
                {
                    IRemoteControl old = this._remoteControl;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRemoteControlChanging(e);
                    this.OnPropertyChanging("RemoteControl", e, _remoteControlReference);
                    this._remoteControl = value;
                    if ((old != null))
                    {
                        old.Control = null;
                        old.Deleted -= this.OnResetRemoteControl;
                    }
                    if ((value != null))
                    {
                        value.Control = this;
                        value.Deleted += this.OnResetRemoteControl;
                    }
                    this.OnRemoteControlChanged(e);
                    this.OnPropertyChanged("RemoteControl", e, _remoteControlReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ControlReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/Control")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the OperationInProgress property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperationInProgressChanging;
        
        /// <summary>
        /// Gets fired when the OperationInProgress property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperationInProgressChanged;
        
        /// <summary>
        /// Gets fired before the TimeStamp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeStampChanging;
        
        /// <summary>
        /// Gets fired when the TimeStamp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeStampChanged;
        
        /// <summary>
        /// Gets fired before the RegulatingCondEq property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegulatingCondEqChanging;
        
        /// <summary>
        /// Gets fired when the RegulatingCondEq property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegulatingCondEqChanged;
        
        /// <summary>
        /// Gets fired before the ControlType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ControlTypeChanging;
        
        /// <summary>
        /// Gets fired when the ControlType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ControlTypeChanged;
        
        /// <summary>
        /// Gets fired before the Unit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitChanging;
        
        /// <summary>
        /// Gets fired when the Unit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitChanged;
        
        /// <summary>
        /// Gets fired before the RemoteControl property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RemoteControlChanging;
        
        /// <summary>
        /// Gets fired when the RemoteControl property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RemoteControlChanged;
        
        private static ITypedElement RetrieveOperationInProgressAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Control.ClassInstance)).Resolve("operationInProgress")));
        }
        
        /// <summary>
        /// Raises the OperationInProgressChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperationInProgressChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperationInProgressChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OperationInProgressChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperationInProgressChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperationInProgressChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTimeStampAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Control.ClassInstance)).Resolve("timeStamp")));
        }
        
        /// <summary>
        /// Raises the TimeStampChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeStampChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeStampChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeStampChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeStampChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeStampChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRegulatingCondEqReference()
        {
            return ((ITypedElement)(((ModelElement)(Control.ClassInstance)).Resolve("RegulatingCondEq")));
        }
        
        /// <summary>
        /// Raises the RegulatingCondEqChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegulatingCondEqChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegulatingCondEqChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RegulatingCondEqChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegulatingCondEqChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegulatingCondEqChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RegulatingCondEq property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRegulatingCondEq(object sender, System.EventArgs eventArgs)
        {
            this.RegulatingCondEq = null;
        }
        
        private static ITypedElement RetrieveControlTypeReference()
        {
            return ((ITypedElement)(((ModelElement)(Control.ClassInstance)).Resolve("ControlType")));
        }
        
        /// <summary>
        /// Raises the ControlTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnControlTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ControlTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ControlTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnControlTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ControlTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ControlType property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetControlType(object sender, System.EventArgs eventArgs)
        {
            this.ControlType = null;
        }
        
        private static ITypedElement RetrieveUnitReference()
        {
            return ((ITypedElement)(((ModelElement)(Control.ClassInstance)).Resolve("Unit")));
        }
        
        /// <summary>
        /// Raises the UnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Unit property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetUnit(object sender, System.EventArgs eventArgs)
        {
            this.Unit = null;
        }
        
        private static ITypedElement RetrieveRemoteControlReference()
        {
            return ((ITypedElement)(((ModelElement)(Control.ClassInstance)).Resolve("RemoteControl")));
        }
        
        /// <summary>
        /// Raises the RemoteControlChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemoteControlChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RemoteControlChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RemoteControlChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemoteControlChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RemoteControlChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RemoteControl property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRemoteControl(object sender, System.EventArgs eventArgs)
        {
            this.RemoteControl = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "OPERATIONINPROGRESS"))
            {
                return this.OperationInProgress;
            }
            if ((attribute == "TIMESTAMP"))
            {
                return this.TimeStamp;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REGULATINGCONDEQ"))
            {
                this.RegulatingCondEq = ((IRegulatingCondEq)(value));
                return;
            }
            if ((feature == "CONTROLTYPE"))
            {
                this.ControlType = ((IControlType)(value));
                return;
            }
            if ((feature == "UNIT"))
            {
                this.Unit = ((IUnit)(value));
                return;
            }
            if ((feature == "REMOTECONTROL"))
            {
                this.RemoteControl = ((IRemoteControl)(value));
                return;
            }
            if ((feature == "OPERATIONINPROGRESS"))
            {
                this.OperationInProgress = ((bool)(value));
                return;
            }
            if ((feature == "TIMESTAMP"))
            {
                this.TimeStamp = ((DateTime)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "RegulatingCondEq"))
            {
                return new RegulatingCondEqProxy(this);
            }
            if ((attribute == "ControlType"))
            {
                return new ControlTypeProxy(this);
            }
            if ((attribute == "Unit"))
            {
                return new UnitProxy(this);
            }
            if ((attribute == "RemoteControl"))
            {
                return new RemoteControlProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "RegulatingCondEq"))
            {
                return new RegulatingCondEqProxy(this);
            }
            if ((reference == "ControlType"))
            {
                return new ControlTypeProxy(this);
            }
            if ((reference == "Unit"))
            {
                return new UnitProxy(this);
            }
            if ((reference == "RemoteControl"))
            {
                return new RemoteControlProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/Control")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Control class
        /// </summary>
        public class ControlReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Control _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ControlReferencedElementsCollection(Control parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.RegulatingCondEq != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ControlType != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Unit != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RemoteControl != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.RegulatingCondEqChanged += this.PropagateValueChanges;
                this._parent.ControlTypeChanged += this.PropagateValueChanges;
                this._parent.UnitChanged += this.PropagateValueChanges;
                this._parent.RemoteControlChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.RegulatingCondEqChanged -= this.PropagateValueChanges;
                this._parent.ControlTypeChanged -= this.PropagateValueChanges;
                this._parent.UnitChanged -= this.PropagateValueChanges;
                this._parent.RemoteControlChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.RegulatingCondEq == null))
                {
                    IRegulatingCondEq regulatingCondEqCasted = item.As<IRegulatingCondEq>();
                    if ((regulatingCondEqCasted != null))
                    {
                        this._parent.RegulatingCondEq = regulatingCondEqCasted;
                        return;
                    }
                }
                if ((this._parent.ControlType == null))
                {
                    IControlType controlTypeCasted = item.As<IControlType>();
                    if ((controlTypeCasted != null))
                    {
                        this._parent.ControlType = controlTypeCasted;
                        return;
                    }
                }
                if ((this._parent.Unit == null))
                {
                    IUnit unitCasted = item.As<IUnit>();
                    if ((unitCasted != null))
                    {
                        this._parent.Unit = unitCasted;
                        return;
                    }
                }
                if ((this._parent.RemoteControl == null))
                {
                    IRemoteControl remoteControlCasted = item.As<IRemoteControl>();
                    if ((remoteControlCasted != null))
                    {
                        this._parent.RemoteControl = remoteControlCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.RegulatingCondEq = null;
                this._parent.ControlType = null;
                this._parent.Unit = null;
                this._parent.RemoteControl = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.RegulatingCondEq))
                {
                    return true;
                }
                if ((item == this._parent.ControlType))
                {
                    return true;
                }
                if ((item == this._parent.Unit))
                {
                    return true;
                }
                if ((item == this._parent.RemoteControl))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.RegulatingCondEq != null))
                {
                    array[arrayIndex] = this._parent.RegulatingCondEq;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ControlType != null))
                {
                    array[arrayIndex] = this._parent.ControlType;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Unit != null))
                {
                    array[arrayIndex] = this._parent.Unit;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RemoteControl != null))
                {
                    array[arrayIndex] = this._parent.RemoteControl;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.RegulatingCondEq == item))
                {
                    this._parent.RegulatingCondEq = null;
                    return true;
                }
                if ((this._parent.ControlType == item))
                {
                    this._parent.ControlType = null;
                    return true;
                }
                if ((this._parent.Unit == item))
                {
                    this._parent.Unit = null;
                    return true;
                }
                if ((this._parent.RemoteControl == item))
                {
                    this._parent.RemoteControl = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.RegulatingCondEq).Concat(this._parent.ControlType).Concat(this._parent.Unit).Concat(this._parent.RemoteControl).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the operationInProgress property
        /// </summary>
        private sealed class OperationInProgressProxy : ModelPropertyChange<IControl, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OperationInProgressProxy(IControl modelElement) : 
                    base(modelElement, "operationInProgress")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.OperationInProgress;
                }
                set
                {
                    this.ModelElement.OperationInProgress = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the timeStamp property
        /// </summary>
        private sealed class TimeStampProxy : ModelPropertyChange<IControl, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeStampProxy(IControl modelElement) : 
                    base(modelElement, "timeStamp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.TimeStamp;
                }
                set
                {
                    this.ModelElement.TimeStamp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RegulatingCondEq property
        /// </summary>
        private sealed class RegulatingCondEqProxy : ModelPropertyChange<IControl, IRegulatingCondEq>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RegulatingCondEqProxy(IControl modelElement) : 
                    base(modelElement, "RegulatingCondEq")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRegulatingCondEq Value
            {
                get
                {
                    return this.ModelElement.RegulatingCondEq;
                }
                set
                {
                    this.ModelElement.RegulatingCondEq = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ControlType property
        /// </summary>
        private sealed class ControlTypeProxy : ModelPropertyChange<IControl, IControlType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ControlTypeProxy(IControl modelElement) : 
                    base(modelElement, "ControlType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IControlType Value
            {
                get
                {
                    return this.ModelElement.ControlType;
                }
                set
                {
                    this.ModelElement.ControlType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Unit property
        /// </summary>
        private sealed class UnitProxy : ModelPropertyChange<IControl, IUnit>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UnitProxy(IControl modelElement) : 
                    base(modelElement, "Unit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IUnit Value
            {
                get
                {
                    return this.ModelElement.Unit;
                }
                set
                {
                    this.ModelElement.Unit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RemoteControl property
        /// </summary>
        private sealed class RemoteControlProxy : ModelPropertyChange<IControl, IRemoteControl>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RemoteControlProxy(IControl modelElement) : 
                    base(modelElement, "RemoteControl")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRemoteControl Value
            {
                get
                {
                    return this.ModelElement.RemoteControl;
                }
                set
                {
                    this.ModelElement.RemoteControl = value;
                }
            }
        }
    }
}

