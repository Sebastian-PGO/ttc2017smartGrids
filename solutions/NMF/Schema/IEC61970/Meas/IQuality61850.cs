using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;
using TTC2017.SmartGrids.CIM.IEC61970.SCADA;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Meas
{
    
    
    /// <summary>
    /// The public interface for Quality61850
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Quality61850))]
    [XmlDefaultImplementationTypeAttribute(typeof(Quality61850))]
    public interface IQuality61850 : IModelElement, IElement
    {
        
        /// <summary>
        /// The suspect property
        /// </summary>
        bool Suspect
        {
            get;
            set;
        }
        
        /// <summary>
        /// The estimatorReplaced property
        /// </summary>
        bool EstimatorReplaced
        {
            get;
            set;
        }
        
        /// <summary>
        /// The validity property
        /// </summary>
        Nullable<Validity> Validity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The badReference property
        /// </summary>
        bool BadReference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The oldData property
        /// </summary>
        bool OldData
        {
            get;
            set;
        }
        
        /// <summary>
        /// The failure property
        /// </summary>
        bool Failure
        {
            get;
            set;
        }
        
        /// <summary>
        /// The overFlow property
        /// </summary>
        bool OverFlow
        {
            get;
            set;
        }
        
        /// <summary>
        /// The source property
        /// </summary>
        Nullable<Source> Source
        {
            get;
            set;
        }
        
        /// <summary>
        /// The operatorBlocked property
        /// </summary>
        bool OperatorBlocked
        {
            get;
            set;
        }
        
        /// <summary>
        /// The test property
        /// </summary>
        bool Test
        {
            get;
            set;
        }
        
        /// <summary>
        /// The oscillatory property
        /// </summary>
        bool Oscillatory
        {
            get;
            set;
        }
        
        /// <summary>
        /// The outOfRange property
        /// </summary>
        bool OutOfRange
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Suspect property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SuspectChanging;
        
        /// <summary>
        /// Gets fired when the Suspect property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SuspectChanged;
        
        /// <summary>
        /// Gets fired before the EstimatorReplaced property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EstimatorReplacedChanging;
        
        /// <summary>
        /// Gets fired when the EstimatorReplaced property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EstimatorReplacedChanged;
        
        /// <summary>
        /// Gets fired before the Validity property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ValidityChanging;
        
        /// <summary>
        /// Gets fired when the Validity property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ValidityChanged;
        
        /// <summary>
        /// Gets fired before the BadReference property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BadReferenceChanging;
        
        /// <summary>
        /// Gets fired when the BadReference property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BadReferenceChanged;
        
        /// <summary>
        /// Gets fired before the OldData property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OldDataChanging;
        
        /// <summary>
        /// Gets fired when the OldData property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OldDataChanged;
        
        /// <summary>
        /// Gets fired before the Failure property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FailureChanging;
        
        /// <summary>
        /// Gets fired when the Failure property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FailureChanged;
        
        /// <summary>
        /// Gets fired before the OverFlow property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OverFlowChanging;
        
        /// <summary>
        /// Gets fired when the OverFlow property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OverFlowChanged;
        
        /// <summary>
        /// Gets fired before the Source property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SourceChanging;
        
        /// <summary>
        /// Gets fired when the Source property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SourceChanged;
        
        /// <summary>
        /// Gets fired before the OperatorBlocked property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OperatorBlockedChanging;
        
        /// <summary>
        /// Gets fired when the OperatorBlocked property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OperatorBlockedChanged;
        
        /// <summary>
        /// Gets fired before the Test property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TestChanging;
        
        /// <summary>
        /// Gets fired when the Test property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TestChanged;
        
        /// <summary>
        /// Gets fired before the Oscillatory property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OscillatoryChanging;
        
        /// <summary>
        /// Gets fired when the Oscillatory property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OscillatoryChanged;
        
        /// <summary>
        /// Gets fired before the OutOfRange property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OutOfRangeChanging;
        
        /// <summary>
        /// Gets fired when the OutOfRange property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OutOfRangeChanged;
    }
}

