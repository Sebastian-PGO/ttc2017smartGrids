//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;
using TTC2017.SmartGrids.CIM.IEC61970.SCADA;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Meas
{
    
    
    /// <summary>
    /// The default implementation of the Discrete class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Meas")]
    [XmlNamespacePrefixAttribute("cimMeas")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/Discrete")]
    [DebuggerDisplayAttribute("Discrete {UUID}")]
    public partial class Discrete : Measurement, IDiscrete, IModelElement
    {
        
        /// <summary>
        /// The backing field for the MinValue property
        /// </summary>
        private int _minValue;
        
        private static Lazy<ITypedElement> _minValueAttribute = new Lazy<ITypedElement>(RetrieveMinValueAttribute);
        
        /// <summary>
        /// The backing field for the MaxValue property
        /// </summary>
        private int _maxValue;
        
        private static Lazy<ITypedElement> _maxValueAttribute = new Lazy<ITypedElement>(RetrieveMaxValueAttribute);
        
        /// <summary>
        /// The backing field for the NormalValue property
        /// </summary>
        private int _normalValue;
        
        private static Lazy<ITypedElement> _normalValueAttribute = new Lazy<ITypedElement>(RetrieveNormalValueAttribute);
        
        private static Lazy<ITypedElement> _valueAliasSetReference = new Lazy<ITypedElement>(RetrieveValueAliasSetReference);
        
        /// <summary>
        /// The backing field for the ValueAliasSet property
        /// </summary>
        private IValueAliasSet _valueAliasSet;
        
        private static Lazy<ITypedElement> _commandReference = new Lazy<ITypedElement>(RetrieveCommandReference);
        
        /// <summary>
        /// The backing field for the Command property
        /// </summary>
        private ICommand _command;
        
        private static Lazy<ITypedElement> _discreteValuesReference = new Lazy<ITypedElement>(RetrieveDiscreteValuesReference);
        
        /// <summary>
        /// The backing field for the DiscreteValues property
        /// </summary>
        private DiscreteDiscreteValuesCollection _discreteValues;
        
        private static IClass _classInstance;
        
        public Discrete()
        {
            this._discreteValues = new DiscreteDiscreteValuesCollection(this);
            this._discreteValues.CollectionChanging += this.DiscreteValuesCollectionChanging;
            this._discreteValues.CollectionChanged += this.DiscreteValuesCollectionChanged;
        }
        
        /// <summary>
        /// The minValue property
        /// </summary>
        [XmlElementNameAttribute("minValue")]
        [XmlAttributeAttribute(true)]
        public virtual int MinValue
        {
            get
            {
                return this._minValue;
            }
            set
            {
                if ((this._minValue != value))
                {
                    int old = this._minValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinValueChanging(e);
                    this.OnPropertyChanging("MinValue", e, _minValueAttribute);
                    this._minValue = value;
                    this.OnMinValueChanged(e);
                    this.OnPropertyChanged("MinValue", e, _minValueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The maxValue property
        /// </summary>
        [XmlElementNameAttribute("maxValue")]
        [XmlAttributeAttribute(true)]
        public virtual int MaxValue
        {
            get
            {
                return this._maxValue;
            }
            set
            {
                if ((this._maxValue != value))
                {
                    int old = this._maxValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxValueChanging(e);
                    this.OnPropertyChanging("MaxValue", e, _maxValueAttribute);
                    this._maxValue = value;
                    this.OnMaxValueChanged(e);
                    this.OnPropertyChanged("MaxValue", e, _maxValueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The normalValue property
        /// </summary>
        [XmlElementNameAttribute("normalValue")]
        [XmlAttributeAttribute(true)]
        public virtual int NormalValue
        {
            get
            {
                return this._normalValue;
            }
            set
            {
                if ((this._normalValue != value))
                {
                    int old = this._normalValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNormalValueChanging(e);
                    this.OnPropertyChanging("NormalValue", e, _normalValueAttribute);
                    this._normalValue = value;
                    this.OnNormalValueChanged(e);
                    this.OnPropertyChanged("NormalValue", e, _normalValueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ValueAliasSet property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Discretes")]
        public virtual IValueAliasSet ValueAliasSet
        {
            get
            {
                return this._valueAliasSet;
            }
            set
            {
                if ((this._valueAliasSet != value))
                {
                    IValueAliasSet old = this._valueAliasSet;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueAliasSetChanging(e);
                    this.OnPropertyChanging("ValueAliasSet", e, _valueAliasSetReference);
                    this._valueAliasSet = value;
                    if ((old != null))
                    {
                        old.Discretes.Remove(this);
                        old.Deleted -= this.OnResetValueAliasSet;
                    }
                    if ((value != null))
                    {
                        value.Discretes.Add(this);
                        value.Deleted += this.OnResetValueAliasSet;
                    }
                    this.OnValueAliasSetChanged(e);
                    this.OnPropertyChanged("ValueAliasSet", e, _valueAliasSetReference);
                }
            }
        }
        
        /// <summary>
        /// The Command property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Discrete")]
        public virtual ICommand Command
        {
            get
            {
                return this._command;
            }
            set
            {
                if ((this._command != value))
                {
                    ICommand old = this._command;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCommandChanging(e);
                    this.OnPropertyChanging("Command", e, _commandReference);
                    this._command = value;
                    if ((old != null))
                    {
                        old.Discrete = null;
                        old.Deleted -= this.OnResetCommand;
                    }
                    if ((value != null))
                    {
                        value.Discrete = this;
                        value.Deleted += this.OnResetCommand;
                    }
                    this.OnCommandChanged(e);
                    this.OnPropertyChanged("Command", e, _commandReference);
                }
            }
        }
        
        /// <summary>
        /// The DiscreteValues property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Discrete")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDiscreteValue> DiscreteValues
        {
            get
            {
                return this._discreteValues;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new DiscreteReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/Discrete")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the MinValue property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinValueChanging;
        
        /// <summary>
        /// Gets fired when the MinValue property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinValueChanged;
        
        /// <summary>
        /// Gets fired before the MaxValue property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxValueChanging;
        
        /// <summary>
        /// Gets fired when the MaxValue property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxValueChanged;
        
        /// <summary>
        /// Gets fired before the NormalValue property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormalValueChanging;
        
        /// <summary>
        /// Gets fired when the NormalValue property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormalValueChanged;
        
        /// <summary>
        /// Gets fired before the ValueAliasSet property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueAliasSetChanging;
        
        /// <summary>
        /// Gets fired when the ValueAliasSet property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueAliasSetChanged;
        
        /// <summary>
        /// Gets fired before the Command property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CommandChanging;
        
        /// <summary>
        /// Gets fired when the Command property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CommandChanged;
        
        private static ITypedElement RetrieveMinValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Discrete.ClassInstance)).Resolve("minValue")));
        }
        
        /// <summary>
        /// Raises the MinValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaxValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Discrete.ClassInstance)).Resolve("maxValue")));
        }
        
        /// <summary>
        /// Raises the MaxValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNormalValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Discrete.ClassInstance)).Resolve("normalValue")));
        }
        
        /// <summary>
        /// Raises the NormalValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormalValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormalValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NormalValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormalValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormalValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveValueAliasSetReference()
        {
            return ((ITypedElement)(((ModelElement)(Discrete.ClassInstance)).Resolve("ValueAliasSet")));
        }
        
        /// <summary>
        /// Raises the ValueAliasSetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueAliasSetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueAliasSetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueAliasSetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueAliasSetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueAliasSetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ValueAliasSet property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetValueAliasSet(object sender, System.EventArgs eventArgs)
        {
            this.ValueAliasSet = null;
        }
        
        private static ITypedElement RetrieveCommandReference()
        {
            return ((ITypedElement)(((ModelElement)(Discrete.ClassInstance)).Resolve("Command")));
        }
        
        /// <summary>
        /// Raises the CommandChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommandChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CommandChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CommandChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCommandChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CommandChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Command property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCommand(object sender, System.EventArgs eventArgs)
        {
            this.Command = null;
        }
        
        private static ITypedElement RetrieveDiscreteValuesReference()
        {
            return ((ITypedElement)(((ModelElement)(Discrete.ClassInstance)).Resolve("DiscreteValues")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DiscreteValues property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DiscreteValuesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("DiscreteValues", e, _discreteValuesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DiscreteValues property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DiscreteValuesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DiscreteValues", e, _discreteValuesReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MINVALUE"))
            {
                return this.MinValue;
            }
            if ((attribute == "MAXVALUE"))
            {
                return this.MaxValue;
            }
            if ((attribute == "NORMALVALUE"))
            {
                return this.NormalValue;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "DISCRETEVALUES"))
            {
                return this._discreteValues;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUEALIASSET"))
            {
                this.ValueAliasSet = ((IValueAliasSet)(value));
                return;
            }
            if ((feature == "COMMAND"))
            {
                this.Command = ((ICommand)(value));
                return;
            }
            if ((feature == "MINVALUE"))
            {
                this.MinValue = ((int)(value));
                return;
            }
            if ((feature == "MAXVALUE"))
            {
                this.MaxValue = ((int)(value));
                return;
            }
            if ((feature == "NORMALVALUE"))
            {
                this.NormalValue = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ValueAliasSet"))
            {
                return new ValueAliasSetProxy(this);
            }
            if ((attribute == "Command"))
            {
                return new CommandProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ValueAliasSet"))
            {
                return new ValueAliasSetProxy(this);
            }
            if ((reference == "Command"))
            {
                return new CommandProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/Discrete")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Discrete class
        /// </summary>
        public class DiscreteReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Discrete _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public DiscreteReferencedElementsCollection(Discrete parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ValueAliasSet != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Command != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.DiscreteValues.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ValueAliasSetChanged += this.PropagateValueChanges;
                this._parent.CommandChanged += this.PropagateValueChanges;
                this._parent.DiscreteValues.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ValueAliasSetChanged -= this.PropagateValueChanges;
                this._parent.CommandChanged -= this.PropagateValueChanges;
                this._parent.DiscreteValues.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ValueAliasSet == null))
                {
                    IValueAliasSet valueAliasSetCasted = item.As<IValueAliasSet>();
                    if ((valueAliasSetCasted != null))
                    {
                        this._parent.ValueAliasSet = valueAliasSetCasted;
                        return;
                    }
                }
                if ((this._parent.Command == null))
                {
                    ICommand commandCasted = item.As<ICommand>();
                    if ((commandCasted != null))
                    {
                        this._parent.Command = commandCasted;
                        return;
                    }
                }
                IDiscreteValue discreteValuesCasted = item.As<IDiscreteValue>();
                if ((discreteValuesCasted != null))
                {
                    this._parent.DiscreteValues.Add(discreteValuesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ValueAliasSet = null;
                this._parent.Command = null;
                this._parent.DiscreteValues.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ValueAliasSet))
                {
                    return true;
                }
                if ((item == this._parent.Command))
                {
                    return true;
                }
                if (this._parent.DiscreteValues.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ValueAliasSet != null))
                {
                    array[arrayIndex] = this._parent.ValueAliasSet;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Command != null))
                {
                    array[arrayIndex] = this._parent.Command;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> discreteValuesEnumerator = this._parent.DiscreteValues.GetEnumerator();
                try
                {
                    for (
                    ; discreteValuesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = discreteValuesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    discreteValuesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ValueAliasSet == item))
                {
                    this._parent.ValueAliasSet = null;
                    return true;
                }
                if ((this._parent.Command == item))
                {
                    this._parent.Command = null;
                    return true;
                }
                IDiscreteValue discreteValueItem = item.As<IDiscreteValue>();
                if (((discreteValueItem != null) 
                            && this._parent.DiscreteValues.Remove(discreteValueItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ValueAliasSet).Concat(this._parent.Command).Concat(this._parent.DiscreteValues).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minValue property
        /// </summary>
        private sealed class MinValueProxy : ModelPropertyChange<IDiscrete, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinValueProxy(IDiscrete modelElement) : 
                    base(modelElement, "minValue")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.MinValue;
                }
                set
                {
                    this.ModelElement.MinValue = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maxValue property
        /// </summary>
        private sealed class MaxValueProxy : ModelPropertyChange<IDiscrete, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxValueProxy(IDiscrete modelElement) : 
                    base(modelElement, "maxValue")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.MaxValue;
                }
                set
                {
                    this.ModelElement.MaxValue = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the normalValue property
        /// </summary>
        private sealed class NormalValueProxy : ModelPropertyChange<IDiscrete, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NormalValueProxy(IDiscrete modelElement) : 
                    base(modelElement, "normalValue")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.NormalValue;
                }
                set
                {
                    this.ModelElement.NormalValue = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ValueAliasSet property
        /// </summary>
        private sealed class ValueAliasSetProxy : ModelPropertyChange<IDiscrete, IValueAliasSet>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueAliasSetProxy(IDiscrete modelElement) : 
                    base(modelElement, "ValueAliasSet")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IValueAliasSet Value
            {
                get
                {
                    return this.ModelElement.ValueAliasSet;
                }
                set
                {
                    this.ModelElement.ValueAliasSet = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Command property
        /// </summary>
        private sealed class CommandProxy : ModelPropertyChange<IDiscrete, ICommand>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CommandProxy(IDiscrete modelElement) : 
                    base(modelElement, "Command")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICommand Value
            {
                get
                {
                    return this.ModelElement.Command;
                }
                set
                {
                    this.ModelElement.Command = value;
                }
            }
        }
    }
}

