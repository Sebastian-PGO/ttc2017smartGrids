//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;
using TTC2017.SmartGrids.CIM.IEC61970.SCADA;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Meas
{
    
    
    /// <summary>
    /// The default implementation of the Command class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Meas")]
    [XmlNamespacePrefixAttribute("cimMeas")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/Command")]
    [DebuggerDisplayAttribute("Command {UUID}")]
    public partial class Command : Control, ICommand, IModelElement
    {
        
        /// <summary>
        /// The backing field for the NormalValue property
        /// </summary>
        private int _normalValue;
        
        private static Lazy<ITypedElement> _normalValueAttribute = new Lazy<ITypedElement>(RetrieveNormalValueAttribute);
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        private int _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        private static Lazy<ITypedElement> _valueAliasSetReference = new Lazy<ITypedElement>(RetrieveValueAliasSetReference);
        
        /// <summary>
        /// The backing field for the ValueAliasSet property
        /// </summary>
        private IValueAliasSet _valueAliasSet;
        
        private static Lazy<ITypedElement> _discreteReference = new Lazy<ITypedElement>(RetrieveDiscreteReference);
        
        /// <summary>
        /// The backing field for the Discrete property
        /// </summary>
        private IDiscrete _discrete;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The normalValue property
        /// </summary>
        [XmlElementNameAttribute("normalValue")]
        [XmlAttributeAttribute(true)]
        public virtual int NormalValue
        {
            get
            {
                return this._normalValue;
            }
            set
            {
                if ((this._normalValue != value))
                {
                    int old = this._normalValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNormalValueChanging(e);
                    this.OnPropertyChanging("NormalValue", e, _normalValueAttribute);
                    this._normalValue = value;
                    this.OnNormalValueChanged(e);
                    this.OnPropertyChanged("NormalValue", e, _normalValueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The value property
        /// </summary>
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public virtual int Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    int old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ValueAliasSet property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Commands")]
        public virtual IValueAliasSet ValueAliasSet
        {
            get
            {
                return this._valueAliasSet;
            }
            set
            {
                if ((this._valueAliasSet != value))
                {
                    IValueAliasSet old = this._valueAliasSet;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueAliasSetChanging(e);
                    this.OnPropertyChanging("ValueAliasSet", e, _valueAliasSetReference);
                    this._valueAliasSet = value;
                    if ((old != null))
                    {
                        old.Commands.Remove(this);
                        old.Deleted -= this.OnResetValueAliasSet;
                    }
                    if ((value != null))
                    {
                        value.Commands.Add(this);
                        value.Deleted += this.OnResetValueAliasSet;
                    }
                    this.OnValueAliasSetChanged(e);
                    this.OnPropertyChanged("ValueAliasSet", e, _valueAliasSetReference);
                }
            }
        }
        
        /// <summary>
        /// The Discrete property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Command")]
        public virtual IDiscrete Discrete
        {
            get
            {
                return this._discrete;
            }
            set
            {
                if ((this._discrete != value))
                {
                    IDiscrete old = this._discrete;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDiscreteChanging(e);
                    this.OnPropertyChanging("Discrete", e, _discreteReference);
                    this._discrete = value;
                    if ((old != null))
                    {
                        old.Command = null;
                        old.Deleted -= this.OnResetDiscrete;
                    }
                    if ((value != null))
                    {
                        value.Command = this;
                        value.Deleted += this.OnResetDiscrete;
                    }
                    this.OnDiscreteChanged(e);
                    this.OnPropertyChanged("Discrete", e, _discreteReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CommandReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/Command")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the NormalValue property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormalValueChanging;
        
        /// <summary>
        /// Gets fired when the NormalValue property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormalValueChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanging;
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the ValueAliasSet property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueAliasSetChanging;
        
        /// <summary>
        /// Gets fired when the ValueAliasSet property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueAliasSetChanged;
        
        /// <summary>
        /// Gets fired before the Discrete property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DiscreteChanging;
        
        /// <summary>
        /// Gets fired when the Discrete property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DiscreteChanged;
        
        private static ITypedElement RetrieveNormalValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Command.ClassInstance)).Resolve("normalValue")));
        }
        
        /// <summary>
        /// Raises the NormalValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormalValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormalValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NormalValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormalValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormalValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Command.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveValueAliasSetReference()
        {
            return ((ITypedElement)(((ModelElement)(Command.ClassInstance)).Resolve("ValueAliasSet")));
        }
        
        /// <summary>
        /// Raises the ValueAliasSetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueAliasSetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueAliasSetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueAliasSetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueAliasSetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueAliasSetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ValueAliasSet property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetValueAliasSet(object sender, System.EventArgs eventArgs)
        {
            this.ValueAliasSet = null;
        }
        
        private static ITypedElement RetrieveDiscreteReference()
        {
            return ((ITypedElement)(((ModelElement)(Command.ClassInstance)).Resolve("Discrete")));
        }
        
        /// <summary>
        /// Raises the DiscreteChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDiscreteChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DiscreteChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DiscreteChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDiscreteChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DiscreteChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Discrete property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDiscrete(object sender, System.EventArgs eventArgs)
        {
            this.Discrete = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NORMALVALUE"))
            {
                return this.NormalValue;
            }
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALUEALIASSET"))
            {
                this.ValueAliasSet = ((IValueAliasSet)(value));
                return;
            }
            if ((feature == "DISCRETE"))
            {
                this.Discrete = ((IDiscrete)(value));
                return;
            }
            if ((feature == "NORMALVALUE"))
            {
                this.NormalValue = ((int)(value));
                return;
            }
            if ((feature == "VALUE"))
            {
                this.Value = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ValueAliasSet"))
            {
                return new ValueAliasSetProxy(this);
            }
            if ((attribute == "Discrete"))
            {
                return new DiscreteProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ValueAliasSet"))
            {
                return new ValueAliasSetProxy(this);
            }
            if ((reference == "Discrete"))
            {
                return new DiscreteProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Meas/Command")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Command class
        /// </summary>
        public class CommandReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Command _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CommandReferencedElementsCollection(Command parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ValueAliasSet != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Discrete != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ValueAliasSetChanged += this.PropagateValueChanges;
                this._parent.DiscreteChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ValueAliasSetChanged -= this.PropagateValueChanges;
                this._parent.DiscreteChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ValueAliasSet == null))
                {
                    IValueAliasSet valueAliasSetCasted = item.As<IValueAliasSet>();
                    if ((valueAliasSetCasted != null))
                    {
                        this._parent.ValueAliasSet = valueAliasSetCasted;
                        return;
                    }
                }
                if ((this._parent.Discrete == null))
                {
                    IDiscrete discreteCasted = item.As<IDiscrete>();
                    if ((discreteCasted != null))
                    {
                        this._parent.Discrete = discreteCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ValueAliasSet = null;
                this._parent.Discrete = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ValueAliasSet))
                {
                    return true;
                }
                if ((item == this._parent.Discrete))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ValueAliasSet != null))
                {
                    array[arrayIndex] = this._parent.ValueAliasSet;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Discrete != null))
                {
                    array[arrayIndex] = this._parent.Discrete;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ValueAliasSet == item))
                {
                    this._parent.ValueAliasSet = null;
                    return true;
                }
                if ((this._parent.Discrete == item))
                {
                    this._parent.Discrete = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ValueAliasSet).Concat(this._parent.Discrete).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the normalValue property
        /// </summary>
        private sealed class NormalValueProxy : ModelPropertyChange<ICommand, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NormalValueProxy(ICommand modelElement) : 
                    base(modelElement, "normalValue")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.NormalValue;
                }
                set
                {
                    this.ModelElement.NormalValue = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<ICommand, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(ICommand modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ValueAliasSet property
        /// </summary>
        private sealed class ValueAliasSetProxy : ModelPropertyChange<ICommand, IValueAliasSet>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueAliasSetProxy(ICommand modelElement) : 
                    base(modelElement, "ValueAliasSet")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IValueAliasSet Value
            {
                get
                {
                    return this.ModelElement.ValueAliasSet;
                }
                set
                {
                    this.ModelElement.ValueAliasSet = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Discrete property
        /// </summary>
        private sealed class DiscreteProxy : ModelPropertyChange<ICommand, IDiscrete>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DiscreteProxy(ICommand modelElement) : 
                    base(modelElement, "Discrete")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDiscrete Value
            {
                get
                {
                    return this.ModelElement.Discrete;
                }
                set
                {
                    this.ModelElement.Discrete = value;
                }
            }
        }
    }
}

