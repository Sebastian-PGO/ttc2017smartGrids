using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling
{
    
    
    /// <summary>
    /// The default implementation of the EnergyProduct class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#EnergyScheduling")]
    [XmlNamespacePrefixAttribute("cimEnergyScheduling")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/EnergyScheduling/" +
        "EnergyProduct")]
    [DebuggerDisplayAttribute("EnergyProduct {UUID}")]
    public partial class EnergyProduct : Agreement, IEnergyProduct, IModelElement
    {
        
        private static Lazy<ITypedElement> _generationProviderReference = new Lazy<ITypedElement>(RetrieveGenerationProviderReference);
        
        /// <summary>
        /// The backing field for the GenerationProvider property
        /// </summary>
        private IGenerationProvider _generationProvider;
        
        private static Lazy<ITypedElement> _titleHeldBy_MarketerReference = new Lazy<ITypedElement>(RetrieveTitleHeldBy_MarketerReference);
        
        /// <summary>
        /// The backing field for the TitleHeldBy_Marketer property
        /// </summary>
        private IMarketer _titleHeldBy_Marketer;
        
        private static Lazy<ITypedElement> _energyTransactionsReference = new Lazy<ITypedElement>(RetrieveEnergyTransactionsReference);
        
        /// <summary>
        /// The backing field for the EnergyTransactions property
        /// </summary>
        private EnergyProductEnergyTransactionsCollection _energyTransactions;
        
        private static Lazy<ITypedElement> _resoldBy_MarketersReference = new Lazy<ITypedElement>(RetrieveResoldBy_MarketersReference);
        
        /// <summary>
        /// The backing field for the ResoldBy_Marketers property
        /// </summary>
        private EnergyProductResoldBy_MarketersCollection _resoldBy_Marketers;
        
        private static Lazy<ITypedElement> _servicePointReference = new Lazy<ITypedElement>(RetrieveServicePointReference);
        
        /// <summary>
        /// The backing field for the ServicePoint property
        /// </summary>
        private EnergyProductServicePointCollection _servicePoint;
        
        private static IClass _classInstance;
        
        public EnergyProduct()
        {
            this._energyTransactions = new EnergyProductEnergyTransactionsCollection(this);
            this._energyTransactions.CollectionChanging += this.EnergyTransactionsCollectionChanging;
            this._energyTransactions.CollectionChanged += this.EnergyTransactionsCollectionChanged;
            this._resoldBy_Marketers = new EnergyProductResoldBy_MarketersCollection(this);
            this._resoldBy_Marketers.CollectionChanging += this.ResoldBy_MarketersCollectionChanging;
            this._resoldBy_Marketers.CollectionChanged += this.ResoldBy_MarketersCollectionChanged;
            this._servicePoint = new EnergyProductServicePointCollection(this);
            this._servicePoint.CollectionChanging += this.ServicePointCollectionChanging;
            this._servicePoint.CollectionChanged += this.ServicePointCollectionChanged;
        }
        
        /// <summary>
        /// The GenerationProvider property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EnergyProducts")]
        public virtual IGenerationProvider GenerationProvider
        {
            get
            {
                return this._generationProvider;
            }
            set
            {
                if ((this._generationProvider != value))
                {
                    IGenerationProvider old = this._generationProvider;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGenerationProviderChanging(e);
                    this.OnPropertyChanging("GenerationProvider", e, _generationProviderReference);
                    this._generationProvider = value;
                    if ((old != null))
                    {
                        old.EnergyProducts.Remove(this);
                        old.Deleted -= this.OnResetGenerationProvider;
                    }
                    if ((value != null))
                    {
                        value.EnergyProducts.Add(this);
                        value.Deleted += this.OnResetGenerationProvider;
                    }
                    this.OnGenerationProviderChanged(e);
                    this.OnPropertyChanged("GenerationProvider", e, _generationProviderReference);
                }
            }
        }
        
        /// <summary>
        /// The TitleHeldBy_Marketer property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("HoldsTitleTo_EnergyProducts")]
        public virtual IMarketer TitleHeldBy_Marketer
        {
            get
            {
                return this._titleHeldBy_Marketer;
            }
            set
            {
                if ((this._titleHeldBy_Marketer != value))
                {
                    IMarketer old = this._titleHeldBy_Marketer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTitleHeldBy_MarketerChanging(e);
                    this.OnPropertyChanging("TitleHeldBy_Marketer", e, _titleHeldBy_MarketerReference);
                    this._titleHeldBy_Marketer = value;
                    if ((old != null))
                    {
                        old.HoldsTitleTo_EnergyProducts.Remove(this);
                        old.Deleted -= this.OnResetTitleHeldBy_Marketer;
                    }
                    if ((value != null))
                    {
                        value.HoldsTitleTo_EnergyProducts.Add(this);
                        value.Deleted += this.OnResetTitleHeldBy_Marketer;
                    }
                    this.OnTitleHeldBy_MarketerChanged(e);
                    this.OnPropertyChanged("TitleHeldBy_Marketer", e, _titleHeldBy_MarketerReference);
                }
            }
        }
        
        /// <summary>
        /// The EnergyTransactions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EnergyProduct")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEnergyTransaction> EnergyTransactions
        {
            get
            {
                return this._energyTransactions;
            }
        }
        
        /// <summary>
        /// The ResoldBy_Marketers property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Resells_EnergyProduct")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMarketer> ResoldBy_Marketers
        {
            get
            {
                return this._resoldBy_Marketers;
            }
        }
        
        /// <summary>
        /// The ServicePoint property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EnergyProducts")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IServicePoint> ServicePoint
        {
            get
            {
                return this._servicePoint;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new EnergyProductReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/EnergyScheduling/" +
                            "EnergyProduct")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the GenerationProvider property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GenerationProviderChanging;
        
        /// <summary>
        /// Gets fired when the GenerationProvider property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GenerationProviderChanged;
        
        /// <summary>
        /// Gets fired before the TitleHeldBy_Marketer property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TitleHeldBy_MarketerChanging;
        
        /// <summary>
        /// Gets fired when the TitleHeldBy_Marketer property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TitleHeldBy_MarketerChanged;
        
        private static ITypedElement RetrieveGenerationProviderReference()
        {
            return ((ITypedElement)(((ModelElement)(EnergyProduct.ClassInstance)).Resolve("GenerationProvider")));
        }
        
        /// <summary>
        /// Raises the GenerationProviderChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGenerationProviderChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GenerationProviderChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GenerationProviderChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGenerationProviderChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GenerationProviderChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GenerationProvider property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGenerationProvider(object sender, System.EventArgs eventArgs)
        {
            this.GenerationProvider = null;
        }
        
        private static ITypedElement RetrieveTitleHeldBy_MarketerReference()
        {
            return ((ITypedElement)(((ModelElement)(EnergyProduct.ClassInstance)).Resolve("TitleHeldBy_Marketer")));
        }
        
        /// <summary>
        /// Raises the TitleHeldBy_MarketerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTitleHeldBy_MarketerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TitleHeldBy_MarketerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TitleHeldBy_MarketerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTitleHeldBy_MarketerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TitleHeldBy_MarketerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TitleHeldBy_Marketer property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTitleHeldBy_Marketer(object sender, System.EventArgs eventArgs)
        {
            this.TitleHeldBy_Marketer = null;
        }
        
        private static ITypedElement RetrieveEnergyTransactionsReference()
        {
            return ((ITypedElement)(((ModelElement)(EnergyProduct.ClassInstance)).Resolve("EnergyTransactions")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EnergyTransactions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EnergyTransactionsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("EnergyTransactions", e, _energyTransactionsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EnergyTransactions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EnergyTransactionsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EnergyTransactions", e, _energyTransactionsReference);
        }
        
        private static ITypedElement RetrieveResoldBy_MarketersReference()
        {
            return ((ITypedElement)(((ModelElement)(EnergyProduct.ClassInstance)).Resolve("ResoldBy_Marketers")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ResoldBy_Marketers property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ResoldBy_MarketersCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ResoldBy_Marketers", e, _resoldBy_MarketersReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ResoldBy_Marketers property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ResoldBy_MarketersCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ResoldBy_Marketers", e, _resoldBy_MarketersReference);
        }
        
        private static ITypedElement RetrieveServicePointReference()
        {
            return ((ITypedElement)(((ModelElement)(EnergyProduct.ClassInstance)).Resolve("ServicePoint")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ServicePoint property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ServicePointCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ServicePoint", e, _servicePointReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ServicePoint property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ServicePointCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ServicePoint", e, _servicePointReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ENERGYTRANSACTIONS"))
            {
                return this._energyTransactions;
            }
            if ((feature == "RESOLDBY_MARKETERS"))
            {
                return this._resoldBy_Marketers;
            }
            if ((feature == "SERVICEPOINT"))
            {
                return this._servicePoint;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "GENERATIONPROVIDER"))
            {
                this.GenerationProvider = ((IGenerationProvider)(value));
                return;
            }
            if ((feature == "TITLEHELDBY_MARKETER"))
            {
                this.TitleHeldBy_Marketer = ((IMarketer)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "GenerationProvider"))
            {
                return new GenerationProviderProxy(this);
            }
            if ((attribute == "TitleHeldBy_Marketer"))
            {
                return new TitleHeldBy_MarketerProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "GenerationProvider"))
            {
                return new GenerationProviderProxy(this);
            }
            if ((reference == "TitleHeldBy_Marketer"))
            {
                return new TitleHeldBy_MarketerProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/EnergyScheduling/" +
                        "EnergyProduct")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EnergyProduct class
        /// </summary>
        public class EnergyProductReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EnergyProduct _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EnergyProductReferencedElementsCollection(EnergyProduct parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.GenerationProvider != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TitleHeldBy_Marketer != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.EnergyTransactions.Count);
                    count = (count + this._parent.ResoldBy_Marketers.Count);
                    count = (count + this._parent.ServicePoint.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.GenerationProviderChanged += this.PropagateValueChanges;
                this._parent.TitleHeldBy_MarketerChanged += this.PropagateValueChanges;
                this._parent.EnergyTransactions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ResoldBy_Marketers.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ServicePoint.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.GenerationProviderChanged -= this.PropagateValueChanges;
                this._parent.TitleHeldBy_MarketerChanged -= this.PropagateValueChanges;
                this._parent.EnergyTransactions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ResoldBy_Marketers.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ServicePoint.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.GenerationProvider == null))
                {
                    IGenerationProvider generationProviderCasted = item.As<IGenerationProvider>();
                    if ((generationProviderCasted != null))
                    {
                        this._parent.GenerationProvider = generationProviderCasted;
                        return;
                    }
                }
                if ((this._parent.TitleHeldBy_Marketer == null))
                {
                    IMarketer titleHeldBy_MarketerCasted = item.As<IMarketer>();
                    if ((titleHeldBy_MarketerCasted != null))
                    {
                        this._parent.TitleHeldBy_Marketer = titleHeldBy_MarketerCasted;
                        return;
                    }
                }
                IEnergyTransaction energyTransactionsCasted = item.As<IEnergyTransaction>();
                if ((energyTransactionsCasted != null))
                {
                    this._parent.EnergyTransactions.Add(energyTransactionsCasted);
                }
                IMarketer resoldBy_MarketersCasted = item.As<IMarketer>();
                if ((resoldBy_MarketersCasted != null))
                {
                    this._parent.ResoldBy_Marketers.Add(resoldBy_MarketersCasted);
                }
                IServicePoint servicePointCasted = item.As<IServicePoint>();
                if ((servicePointCasted != null))
                {
                    this._parent.ServicePoint.Add(servicePointCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.GenerationProvider = null;
                this._parent.TitleHeldBy_Marketer = null;
                this._parent.EnergyTransactions.Clear();
                this._parent.ResoldBy_Marketers.Clear();
                this._parent.ServicePoint.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.GenerationProvider))
                {
                    return true;
                }
                if ((item == this._parent.TitleHeldBy_Marketer))
                {
                    return true;
                }
                if (this._parent.EnergyTransactions.Contains(item))
                {
                    return true;
                }
                if (this._parent.ResoldBy_Marketers.Contains(item))
                {
                    return true;
                }
                if (this._parent.ServicePoint.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.GenerationProvider != null))
                {
                    array[arrayIndex] = this._parent.GenerationProvider;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TitleHeldBy_Marketer != null))
                {
                    array[arrayIndex] = this._parent.TitleHeldBy_Marketer;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> energyTransactionsEnumerator = this._parent.EnergyTransactions.GetEnumerator();
                try
                {
                    for (
                    ; energyTransactionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = energyTransactionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    energyTransactionsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> resoldBy_MarketersEnumerator = this._parent.ResoldBy_Marketers.GetEnumerator();
                try
                {
                    for (
                    ; resoldBy_MarketersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = resoldBy_MarketersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    resoldBy_MarketersEnumerator.Dispose();
                }
                IEnumerator<IModelElement> servicePointEnumerator = this._parent.ServicePoint.GetEnumerator();
                try
                {
                    for (
                    ; servicePointEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = servicePointEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    servicePointEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.GenerationProvider == item))
                {
                    this._parent.GenerationProvider = null;
                    return true;
                }
                if ((this._parent.TitleHeldBy_Marketer == item))
                {
                    this._parent.TitleHeldBy_Marketer = null;
                    return true;
                }
                IEnergyTransaction energyTransactionItem = item.As<IEnergyTransaction>();
                if (((energyTransactionItem != null) 
                            && this._parent.EnergyTransactions.Remove(energyTransactionItem)))
                {
                    return true;
                }
                IMarketer marketerItem = item.As<IMarketer>();
                if (((marketerItem != null) 
                            && this._parent.ResoldBy_Marketers.Remove(marketerItem)))
                {
                    return true;
                }
                IServicePoint servicePointItem = item.As<IServicePoint>();
                if (((servicePointItem != null) 
                            && this._parent.ServicePoint.Remove(servicePointItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.GenerationProvider).Concat(this._parent.TitleHeldBy_Marketer).Concat(this._parent.EnergyTransactions).Concat(this._parent.ResoldBy_Marketers).Concat(this._parent.ServicePoint).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GenerationProvider property
        /// </summary>
        private sealed class GenerationProviderProxy : ModelPropertyChange<IEnergyProduct, IGenerationProvider>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GenerationProviderProxy(IEnergyProduct modelElement) : 
                    base(modelElement, "GenerationProvider")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGenerationProvider Value
            {
                get
                {
                    return this.ModelElement.GenerationProvider;
                }
                set
                {
                    this.ModelElement.GenerationProvider = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TitleHeldBy_Marketer property
        /// </summary>
        private sealed class TitleHeldBy_MarketerProxy : ModelPropertyChange<IEnergyProduct, IMarketer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TitleHeldBy_MarketerProxy(IEnergyProduct modelElement) : 
                    base(modelElement, "TitleHeldBy_Marketer")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMarketer Value
            {
                get
                {
                    return this.ModelElement.TitleHeldBy_Marketer;
                }
                set
                {
                    this.ModelElement.TitleHeldBy_Marketer = value;
                }
            }
        }
    }
}

