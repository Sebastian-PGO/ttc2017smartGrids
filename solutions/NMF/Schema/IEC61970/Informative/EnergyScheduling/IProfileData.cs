using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling
{
    
    
    /// <summary>
    /// The public interface for ProfileData
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ProfileData))]
    [XmlDefaultImplementationTypeAttribute(typeof(ProfileData))]
    public interface IProfileData : IModelElement, IElement
    {
        
        /// <summary>
        /// The capacityLevel property
        /// </summary>
        float CapacityLevel
        {
            get;
            set;
        }
        
        /// <summary>
        /// The startDateTime property
        /// </summary>
        DateTime StartDateTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The sequenceNumber property
        /// </summary>
        int SequenceNumber
        {
            get;
            set;
        }
        
        /// <summary>
        /// The stopDateTime property
        /// </summary>
        DateTime StopDateTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The energyLevel property
        /// </summary>
        float EnergyLevel
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Profile property
        /// </summary>
        IOrderedSetExpression<IProfile> Profile
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the CapacityLevel property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CapacityLevelChanging;
        
        /// <summary>
        /// Gets fired when the CapacityLevel property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CapacityLevelChanged;
        
        /// <summary>
        /// Gets fired before the StartDateTime property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the StartDateTime property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the SequenceNumber property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SequenceNumberChanging;
        
        /// <summary>
        /// Gets fired when the SequenceNumber property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SequenceNumberChanged;
        
        /// <summary>
        /// Gets fired before the StopDateTime property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StopDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the StopDateTime property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StopDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the EnergyLevel property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EnergyLevelChanging;
        
        /// <summary>
        /// Gets fired when the EnergyLevel property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EnergyLevelChanged;
    }
}

