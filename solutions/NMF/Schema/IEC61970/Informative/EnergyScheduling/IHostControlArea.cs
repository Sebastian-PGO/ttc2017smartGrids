using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling
{
    
    
    /// <summary>
    /// The public interface for HostControlArea
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(HostControlArea))]
    [XmlDefaultImplementationTypeAttribute(typeof(HostControlArea))]
    public interface IHostControlArea : IModelElement, IIdentifiedObject
    {
        
        /// <summary>
        /// The frequencyBiasFactor property
        /// </summary>
        object FrequencyBiasFactor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The freqSetPoint property
        /// </summary>
        float FreqSetPoint
        {
            get;
            set;
        }
        
        /// <summary>
        /// The areaControlMode property
        /// </summary>
        Nullable<AreaControlMode> AreaControlMode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The SubControlAreas property
        /// </summary>
        IOrderedSetExpression<ISubControlArea> SubControlAreas
        {
            get;
        }
        
        /// <summary>
        /// The SideA_TieLines property
        /// </summary>
        IOrderedSetExpression<ITieLine> SideA_TieLines
        {
            get;
        }
        
        /// <summary>
        /// The Controls property
        /// </summary>
        IControlAreaOperator Controls
        {
            get;
            set;
        }
        
        /// <summary>
        /// The InadvertentAccounts property
        /// </summary>
        IOrderedSetExpression<IInadvertentAccount> InadvertentAccounts
        {
            get;
        }
        
        /// <summary>
        /// The SideB_TieLines property
        /// </summary>
        IOrderedSetExpression<ITieLine> SideB_TieLines
        {
            get;
        }
        
        /// <summary>
        /// The Receive_DynamicSchedules property
        /// </summary>
        IOrderedSetExpression<IDynamicSchedule> Receive_DynamicSchedules
        {
            get;
        }
        
        /// <summary>
        /// The AreaReserveSpec property
        /// </summary>
        IAreaReserveSpec AreaReserveSpec
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Send_DynamicSchedules property
        /// </summary>
        IOrderedSetExpression<IDynamicSchedule> Send_DynamicSchedules
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the FrequencyBiasFactor property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FrequencyBiasFactorChanging;
        
        /// <summary>
        /// Gets fired when the FrequencyBiasFactor property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FrequencyBiasFactorChanged;
        
        /// <summary>
        /// Gets fired before the FreqSetPoint property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FreqSetPointChanging;
        
        /// <summary>
        /// Gets fired when the FreqSetPoint property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FreqSetPointChanged;
        
        /// <summary>
        /// Gets fired before the AreaControlMode property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AreaControlModeChanging;
        
        /// <summary>
        /// Gets fired when the AreaControlMode property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AreaControlModeChanged;
        
        /// <summary>
        /// Gets fired before the Controls property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ControlsChanging;
        
        /// <summary>
        /// Gets fired when the Controls property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ControlsChanged;
        
        /// <summary>
        /// Gets fired before the AreaReserveSpec property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AreaReserveSpecChanging;
        
        /// <summary>
        /// Gets fired when the AreaReserveSpec property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AreaReserveSpecChanged;
    }
}

