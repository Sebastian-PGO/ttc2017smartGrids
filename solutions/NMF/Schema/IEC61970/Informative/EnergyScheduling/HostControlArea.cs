//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling
{
    
    
    /// <summary>
    /// The default implementation of the HostControlArea class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#EnergyScheduling")]
    [XmlNamespacePrefixAttribute("cimEnergyScheduling")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/EnergyScheduling/" +
        "HostControlArea")]
    [DebuggerDisplayAttribute("HostControlArea {UUID}")]
    public partial class HostControlArea : IdentifiedObject, IHostControlArea, IModelElement
    {
        
        /// <summary>
        /// The backing field for the FrequencyBiasFactor property
        /// </summary>
        private object _frequencyBiasFactor;
        
        private static Lazy<ITypedElement> _frequencyBiasFactorAttribute = new Lazy<ITypedElement>(RetrieveFrequencyBiasFactorAttribute);
        
        /// <summary>
        /// The backing field for the FreqSetPoint property
        /// </summary>
        private float _freqSetPoint;
        
        private static Lazy<ITypedElement> _freqSetPointAttribute = new Lazy<ITypedElement>(RetrieveFreqSetPointAttribute);
        
        /// <summary>
        /// The backing field for the AreaControlMode property
        /// </summary>
        private Nullable<AreaControlMode> _areaControlMode;
        
        private static Lazy<ITypedElement> _areaControlModeAttribute = new Lazy<ITypedElement>(RetrieveAreaControlModeAttribute);
        
        private static Lazy<ITypedElement> _subControlAreasReference = new Lazy<ITypedElement>(RetrieveSubControlAreasReference);
        
        /// <summary>
        /// The backing field for the SubControlAreas property
        /// </summary>
        private HostControlAreaSubControlAreasCollection _subControlAreas;
        
        private static Lazy<ITypedElement> _sideA_TieLinesReference = new Lazy<ITypedElement>(RetrieveSideA_TieLinesReference);
        
        /// <summary>
        /// The backing field for the SideA_TieLines property
        /// </summary>
        private HostControlAreaSideA_TieLinesCollection _sideA_TieLines;
        
        private static Lazy<ITypedElement> _controlsReference = new Lazy<ITypedElement>(RetrieveControlsReference);
        
        /// <summary>
        /// The backing field for the Controls property
        /// </summary>
        private IControlAreaOperator _controls;
        
        private static Lazy<ITypedElement> _inadvertentAccountsReference = new Lazy<ITypedElement>(RetrieveInadvertentAccountsReference);
        
        /// <summary>
        /// The backing field for the InadvertentAccounts property
        /// </summary>
        private HostControlAreaInadvertentAccountsCollection _inadvertentAccounts;
        
        private static Lazy<ITypedElement> _sideB_TieLinesReference = new Lazy<ITypedElement>(RetrieveSideB_TieLinesReference);
        
        /// <summary>
        /// The backing field for the SideB_TieLines property
        /// </summary>
        private HostControlAreaSideB_TieLinesCollection _sideB_TieLines;
        
        private static Lazy<ITypedElement> _receive_DynamicSchedulesReference = new Lazy<ITypedElement>(RetrieveReceive_DynamicSchedulesReference);
        
        /// <summary>
        /// The backing field for the Receive_DynamicSchedules property
        /// </summary>
        private HostControlAreaReceive_DynamicSchedulesCollection _receive_DynamicSchedules;
        
        private static Lazy<ITypedElement> _areaReserveSpecReference = new Lazy<ITypedElement>(RetrieveAreaReserveSpecReference);
        
        /// <summary>
        /// The backing field for the AreaReserveSpec property
        /// </summary>
        private IAreaReserveSpec _areaReserveSpec;
        
        private static Lazy<ITypedElement> _send_DynamicSchedulesReference = new Lazy<ITypedElement>(RetrieveSend_DynamicSchedulesReference);
        
        /// <summary>
        /// The backing field for the Send_DynamicSchedules property
        /// </summary>
        private HostControlAreaSend_DynamicSchedulesCollection _send_DynamicSchedules;
        
        private static IClass _classInstance;
        
        public HostControlArea()
        {
            this._subControlAreas = new HostControlAreaSubControlAreasCollection(this);
            this._subControlAreas.CollectionChanging += this.SubControlAreasCollectionChanging;
            this._subControlAreas.CollectionChanged += this.SubControlAreasCollectionChanged;
            this._sideA_TieLines = new HostControlAreaSideA_TieLinesCollection(this);
            this._sideA_TieLines.CollectionChanging += this.SideA_TieLinesCollectionChanging;
            this._sideA_TieLines.CollectionChanged += this.SideA_TieLinesCollectionChanged;
            this._inadvertentAccounts = new HostControlAreaInadvertentAccountsCollection(this);
            this._inadvertentAccounts.CollectionChanging += this.InadvertentAccountsCollectionChanging;
            this._inadvertentAccounts.CollectionChanged += this.InadvertentAccountsCollectionChanged;
            this._sideB_TieLines = new HostControlAreaSideB_TieLinesCollection(this);
            this._sideB_TieLines.CollectionChanging += this.SideB_TieLinesCollectionChanging;
            this._sideB_TieLines.CollectionChanged += this.SideB_TieLinesCollectionChanged;
            this._receive_DynamicSchedules = new HostControlAreaReceive_DynamicSchedulesCollection(this);
            this._receive_DynamicSchedules.CollectionChanging += this.Receive_DynamicSchedulesCollectionChanging;
            this._receive_DynamicSchedules.CollectionChanged += this.Receive_DynamicSchedulesCollectionChanged;
            this._send_DynamicSchedules = new HostControlAreaSend_DynamicSchedulesCollection(this);
            this._send_DynamicSchedules.CollectionChanging += this.Send_DynamicSchedulesCollectionChanging;
            this._send_DynamicSchedules.CollectionChanged += this.Send_DynamicSchedulesCollectionChanged;
        }
        
        /// <summary>
        /// The frequencyBiasFactor property
        /// </summary>
        [XmlElementNameAttribute("frequencyBiasFactor")]
        [XmlAttributeAttribute(true)]
        public virtual object FrequencyBiasFactor
        {
            get
            {
                return this._frequencyBiasFactor;
            }
            set
            {
                if ((this._frequencyBiasFactor != value))
                {
                    object old = this._frequencyBiasFactor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFrequencyBiasFactorChanging(e);
                    this.OnPropertyChanging("FrequencyBiasFactor", e, _frequencyBiasFactorAttribute);
                    this._frequencyBiasFactor = value;
                    this.OnFrequencyBiasFactorChanged(e);
                    this.OnPropertyChanged("FrequencyBiasFactor", e, _frequencyBiasFactorAttribute);
                }
            }
        }
        
        /// <summary>
        /// The freqSetPoint property
        /// </summary>
        [XmlElementNameAttribute("freqSetPoint")]
        [XmlAttributeAttribute(true)]
        public virtual float FreqSetPoint
        {
            get
            {
                return this._freqSetPoint;
            }
            set
            {
                if ((this._freqSetPoint != value))
                {
                    float old = this._freqSetPoint;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFreqSetPointChanging(e);
                    this.OnPropertyChanging("FreqSetPoint", e, _freqSetPointAttribute);
                    this._freqSetPoint = value;
                    this.OnFreqSetPointChanged(e);
                    this.OnPropertyChanged("FreqSetPoint", e, _freqSetPointAttribute);
                }
            }
        }
        
        /// <summary>
        /// The areaControlMode property
        /// </summary>
        [XmlElementNameAttribute("areaControlMode")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<AreaControlMode> AreaControlMode
        {
            get
            {
                return this._areaControlMode;
            }
            set
            {
                if ((this._areaControlMode != value))
                {
                    Nullable<AreaControlMode> old = this._areaControlMode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAreaControlModeChanging(e);
                    this.OnPropertyChanging("AreaControlMode", e, _areaControlModeAttribute);
                    this._areaControlMode = value;
                    this.OnAreaControlModeChanged(e);
                    this.OnPropertyChanged("AreaControlMode", e, _areaControlModeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The SubControlAreas property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("HostControlArea")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISubControlArea> SubControlAreas
        {
            get
            {
                return this._subControlAreas;
            }
        }
        
        /// <summary>
        /// The SideA_TieLines property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SideA_HostControlArea")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITieLine> SideA_TieLines
        {
            get
            {
                return this._sideA_TieLines;
            }
        }
        
        /// <summary>
        /// The Controls property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ControlledBy")]
        public virtual IControlAreaOperator Controls
        {
            get
            {
                return this._controls;
            }
            set
            {
                if ((this._controls != value))
                {
                    IControlAreaOperator old = this._controls;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnControlsChanging(e);
                    this.OnPropertyChanging("Controls", e, _controlsReference);
                    this._controls = value;
                    if ((old != null))
                    {
                        old.ControlledBy = null;
                        old.Deleted -= this.OnResetControls;
                    }
                    if ((value != null))
                    {
                        value.ControlledBy = this;
                        value.Deleted += this.OnResetControls;
                    }
                    this.OnControlsChanged(e);
                    this.OnPropertyChanged("Controls", e, _controlsReference);
                }
            }
        }
        
        /// <summary>
        /// The InadvertentAccounts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("HostControlArea")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IInadvertentAccount> InadvertentAccounts
        {
            get
            {
                return this._inadvertentAccounts;
            }
        }
        
        /// <summary>
        /// The SideB_TieLines property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SideB_HostControlArea")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITieLine> SideB_TieLines
        {
            get
            {
                return this._sideB_TieLines;
            }
        }
        
        /// <summary>
        /// The Receive_DynamicSchedules property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Receive_HostControlArea")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDynamicSchedule> Receive_DynamicSchedules
        {
            get
            {
                return this._receive_DynamicSchedules;
            }
        }
        
        /// <summary>
        /// The AreaReserveSpec property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("HostControlAreas")]
        public virtual IAreaReserveSpec AreaReserveSpec
        {
            get
            {
                return this._areaReserveSpec;
            }
            set
            {
                if ((this._areaReserveSpec != value))
                {
                    IAreaReserveSpec old = this._areaReserveSpec;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAreaReserveSpecChanging(e);
                    this.OnPropertyChanging("AreaReserveSpec", e, _areaReserveSpecReference);
                    this._areaReserveSpec = value;
                    if ((old != null))
                    {
                        old.HostControlAreas.Remove(this);
                        old.Deleted -= this.OnResetAreaReserveSpec;
                    }
                    if ((value != null))
                    {
                        value.HostControlAreas.Add(this);
                        value.Deleted += this.OnResetAreaReserveSpec;
                    }
                    this.OnAreaReserveSpecChanged(e);
                    this.OnPropertyChanged("AreaReserveSpec", e, _areaReserveSpecReference);
                }
            }
        }
        
        /// <summary>
        /// The Send_DynamicSchedules property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Send_HostControlArea")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDynamicSchedule> Send_DynamicSchedules
        {
            get
            {
                return this._send_DynamicSchedules;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new HostControlAreaReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/EnergyScheduling/" +
                            "HostControlArea")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the FrequencyBiasFactor property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrequencyBiasFactorChanging;
        
        /// <summary>
        /// Gets fired when the FrequencyBiasFactor property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrequencyBiasFactorChanged;
        
        /// <summary>
        /// Gets fired before the FreqSetPoint property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FreqSetPointChanging;
        
        /// <summary>
        /// Gets fired when the FreqSetPoint property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FreqSetPointChanged;
        
        /// <summary>
        /// Gets fired before the AreaControlMode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AreaControlModeChanging;
        
        /// <summary>
        /// Gets fired when the AreaControlMode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AreaControlModeChanged;
        
        /// <summary>
        /// Gets fired before the Controls property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ControlsChanging;
        
        /// <summary>
        /// Gets fired when the Controls property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ControlsChanged;
        
        /// <summary>
        /// Gets fired before the AreaReserveSpec property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AreaReserveSpecChanging;
        
        /// <summary>
        /// Gets fired when the AreaReserveSpec property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AreaReserveSpecChanged;
        
        private static ITypedElement RetrieveFrequencyBiasFactorAttribute()
        {
            return ((ITypedElement)(((ModelElement)(HostControlArea.ClassInstance)).Resolve("frequencyBiasFactor")));
        }
        
        /// <summary>
        /// Raises the FrequencyBiasFactorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrequencyBiasFactorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrequencyBiasFactorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FrequencyBiasFactorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrequencyBiasFactorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrequencyBiasFactorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFreqSetPointAttribute()
        {
            return ((ITypedElement)(((ModelElement)(HostControlArea.ClassInstance)).Resolve("freqSetPoint")));
        }
        
        /// <summary>
        /// Raises the FreqSetPointChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFreqSetPointChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FreqSetPointChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FreqSetPointChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFreqSetPointChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FreqSetPointChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAreaControlModeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(HostControlArea.ClassInstance)).Resolve("areaControlMode")));
        }
        
        /// <summary>
        /// Raises the AreaControlModeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAreaControlModeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AreaControlModeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AreaControlModeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAreaControlModeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AreaControlModeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSubControlAreasReference()
        {
            return ((ITypedElement)(((ModelElement)(HostControlArea.ClassInstance)).Resolve("SubControlAreas")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SubControlAreas property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SubControlAreasCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("SubControlAreas", e, _subControlAreasReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SubControlAreas property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SubControlAreasCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SubControlAreas", e, _subControlAreasReference);
        }
        
        private static ITypedElement RetrieveSideA_TieLinesReference()
        {
            return ((ITypedElement)(((ModelElement)(HostControlArea.ClassInstance)).Resolve("SideA_TieLines")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SideA_TieLines property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SideA_TieLinesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("SideA_TieLines", e, _sideA_TieLinesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SideA_TieLines property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SideA_TieLinesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SideA_TieLines", e, _sideA_TieLinesReference);
        }
        
        private static ITypedElement RetrieveControlsReference()
        {
            return ((ITypedElement)(((ModelElement)(HostControlArea.ClassInstance)).Resolve("Controls")));
        }
        
        /// <summary>
        /// Raises the ControlsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnControlsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ControlsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ControlsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnControlsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ControlsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Controls property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetControls(object sender, System.EventArgs eventArgs)
        {
            this.Controls = null;
        }
        
        private static ITypedElement RetrieveInadvertentAccountsReference()
        {
            return ((ITypedElement)(((ModelElement)(HostControlArea.ClassInstance)).Resolve("InadvertentAccounts")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the InadvertentAccounts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InadvertentAccountsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("InadvertentAccounts", e, _inadvertentAccountsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the InadvertentAccounts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void InadvertentAccountsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("InadvertentAccounts", e, _inadvertentAccountsReference);
        }
        
        private static ITypedElement RetrieveSideB_TieLinesReference()
        {
            return ((ITypedElement)(((ModelElement)(HostControlArea.ClassInstance)).Resolve("SideB_TieLines")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SideB_TieLines property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SideB_TieLinesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("SideB_TieLines", e, _sideB_TieLinesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SideB_TieLines property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SideB_TieLinesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SideB_TieLines", e, _sideB_TieLinesReference);
        }
        
        private static ITypedElement RetrieveReceive_DynamicSchedulesReference()
        {
            return ((ITypedElement)(((ModelElement)(HostControlArea.ClassInstance)).Resolve("Receive_DynamicSchedules")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Receive_DynamicSchedules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Receive_DynamicSchedulesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Receive_DynamicSchedules", e, _receive_DynamicSchedulesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Receive_DynamicSchedules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Receive_DynamicSchedulesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Receive_DynamicSchedules", e, _receive_DynamicSchedulesReference);
        }
        
        private static ITypedElement RetrieveAreaReserveSpecReference()
        {
            return ((ITypedElement)(((ModelElement)(HostControlArea.ClassInstance)).Resolve("AreaReserveSpec")));
        }
        
        /// <summary>
        /// Raises the AreaReserveSpecChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAreaReserveSpecChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AreaReserveSpecChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AreaReserveSpecChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAreaReserveSpecChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AreaReserveSpecChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AreaReserveSpec property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAreaReserveSpec(object sender, System.EventArgs eventArgs)
        {
            this.AreaReserveSpec = null;
        }
        
        private static ITypedElement RetrieveSend_DynamicSchedulesReference()
        {
            return ((ITypedElement)(((ModelElement)(HostControlArea.ClassInstance)).Resolve("Send_DynamicSchedules")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Send_DynamicSchedules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Send_DynamicSchedulesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Send_DynamicSchedules", e, _send_DynamicSchedulesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Send_DynamicSchedules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Send_DynamicSchedulesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Send_DynamicSchedules", e, _send_DynamicSchedulesReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "FREQUENCYBIASFACTOR"))
            {
                return this.FrequencyBiasFactor;
            }
            if ((attribute == "FREQSETPOINT"))
            {
                return this.FreqSetPoint;
            }
            if ((attribute == "AREACONTROLMODE"))
            {
                return this.AreaControlMode;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SUBCONTROLAREAS"))
            {
                return this._subControlAreas;
            }
            if ((feature == "SIDEA_TIELINES"))
            {
                return this._sideA_TieLines;
            }
            if ((feature == "INADVERTENTACCOUNTS"))
            {
                return this._inadvertentAccounts;
            }
            if ((feature == "SIDEB_TIELINES"))
            {
                return this._sideB_TieLines;
            }
            if ((feature == "RECEIVE_DYNAMICSCHEDULES"))
            {
                return this._receive_DynamicSchedules;
            }
            if ((feature == "SEND_DYNAMICSCHEDULES"))
            {
                return this._send_DynamicSchedules;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CONTROLS"))
            {
                this.Controls = ((IControlAreaOperator)(value));
                return;
            }
            if ((feature == "AREARESERVESPEC"))
            {
                this.AreaReserveSpec = ((IAreaReserveSpec)(value));
                return;
            }
            if ((feature == "FREQUENCYBIASFACTOR"))
            {
                this.FrequencyBiasFactor = ((object)(value));
                return;
            }
            if ((feature == "FREQSETPOINT"))
            {
                this.FreqSetPoint = ((float)(value));
                return;
            }
            if ((feature == "AREACONTROLMODE"))
            {
                this.AreaControlMode = ((AreaControlMode)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Controls"))
            {
                return new ControlsProxy(this);
            }
            if ((attribute == "AreaReserveSpec"))
            {
                return new AreaReserveSpecProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Controls"))
            {
                return new ControlsProxy(this);
            }
            if ((reference == "AreaReserveSpec"))
            {
                return new AreaReserveSpecProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/EnergyScheduling/" +
                        "HostControlArea")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the HostControlArea class
        /// </summary>
        public class HostControlAreaReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private HostControlArea _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public HostControlAreaReferencedElementsCollection(HostControlArea parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.SubControlAreas.Count);
                    count = (count + this._parent.SideA_TieLines.Count);
                    if ((this._parent.Controls != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.InadvertentAccounts.Count);
                    count = (count + this._parent.SideB_TieLines.Count);
                    count = (count + this._parent.Receive_DynamicSchedules.Count);
                    if ((this._parent.AreaReserveSpec != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Send_DynamicSchedules.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SubControlAreas.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SideA_TieLines.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ControlsChanged += this.PropagateValueChanges;
                this._parent.InadvertentAccounts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SideB_TieLines.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Receive_DynamicSchedules.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AreaReserveSpecChanged += this.PropagateValueChanges;
                this._parent.Send_DynamicSchedules.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SubControlAreas.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SideA_TieLines.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ControlsChanged -= this.PropagateValueChanges;
                this._parent.InadvertentAccounts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SideB_TieLines.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Receive_DynamicSchedules.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AreaReserveSpecChanged -= this.PropagateValueChanges;
                this._parent.Send_DynamicSchedules.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ISubControlArea subControlAreasCasted = item.As<ISubControlArea>();
                if ((subControlAreasCasted != null))
                {
                    this._parent.SubControlAreas.Add(subControlAreasCasted);
                }
                ITieLine sideA_TieLinesCasted = item.As<ITieLine>();
                if ((sideA_TieLinesCasted != null))
                {
                    this._parent.SideA_TieLines.Add(sideA_TieLinesCasted);
                }
                if ((this._parent.Controls == null))
                {
                    IControlAreaOperator controlsCasted = item.As<IControlAreaOperator>();
                    if ((controlsCasted != null))
                    {
                        this._parent.Controls = controlsCasted;
                        return;
                    }
                }
                IInadvertentAccount inadvertentAccountsCasted = item.As<IInadvertentAccount>();
                if ((inadvertentAccountsCasted != null))
                {
                    this._parent.InadvertentAccounts.Add(inadvertentAccountsCasted);
                }
                ITieLine sideB_TieLinesCasted = item.As<ITieLine>();
                if ((sideB_TieLinesCasted != null))
                {
                    this._parent.SideB_TieLines.Add(sideB_TieLinesCasted);
                }
                IDynamicSchedule receive_DynamicSchedulesCasted = item.As<IDynamicSchedule>();
                if ((receive_DynamicSchedulesCasted != null))
                {
                    this._parent.Receive_DynamicSchedules.Add(receive_DynamicSchedulesCasted);
                }
                if ((this._parent.AreaReserveSpec == null))
                {
                    IAreaReserveSpec areaReserveSpecCasted = item.As<IAreaReserveSpec>();
                    if ((areaReserveSpecCasted != null))
                    {
                        this._parent.AreaReserveSpec = areaReserveSpecCasted;
                        return;
                    }
                }
                IDynamicSchedule send_DynamicSchedulesCasted = item.As<IDynamicSchedule>();
                if ((send_DynamicSchedulesCasted != null))
                {
                    this._parent.Send_DynamicSchedules.Add(send_DynamicSchedulesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SubControlAreas.Clear();
                this._parent.SideA_TieLines.Clear();
                this._parent.Controls = null;
                this._parent.InadvertentAccounts.Clear();
                this._parent.SideB_TieLines.Clear();
                this._parent.Receive_DynamicSchedules.Clear();
                this._parent.AreaReserveSpec = null;
                this._parent.Send_DynamicSchedules.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.SubControlAreas.Contains(item))
                {
                    return true;
                }
                if (this._parent.SideA_TieLines.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Controls))
                {
                    return true;
                }
                if (this._parent.InadvertentAccounts.Contains(item))
                {
                    return true;
                }
                if (this._parent.SideB_TieLines.Contains(item))
                {
                    return true;
                }
                if (this._parent.Receive_DynamicSchedules.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.AreaReserveSpec))
                {
                    return true;
                }
                if (this._parent.Send_DynamicSchedules.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> subControlAreasEnumerator = this._parent.SubControlAreas.GetEnumerator();
                try
                {
                    for (
                    ; subControlAreasEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = subControlAreasEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    subControlAreasEnumerator.Dispose();
                }
                IEnumerator<IModelElement> sideA_TieLinesEnumerator = this._parent.SideA_TieLines.GetEnumerator();
                try
                {
                    for (
                    ; sideA_TieLinesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = sideA_TieLinesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    sideA_TieLinesEnumerator.Dispose();
                }
                if ((this._parent.Controls != null))
                {
                    array[arrayIndex] = this._parent.Controls;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> inadvertentAccountsEnumerator = this._parent.InadvertentAccounts.GetEnumerator();
                try
                {
                    for (
                    ; inadvertentAccountsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = inadvertentAccountsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    inadvertentAccountsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> sideB_TieLinesEnumerator = this._parent.SideB_TieLines.GetEnumerator();
                try
                {
                    for (
                    ; sideB_TieLinesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = sideB_TieLinesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    sideB_TieLinesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> receive_DynamicSchedulesEnumerator = this._parent.Receive_DynamicSchedules.GetEnumerator();
                try
                {
                    for (
                    ; receive_DynamicSchedulesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = receive_DynamicSchedulesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    receive_DynamicSchedulesEnumerator.Dispose();
                }
                if ((this._parent.AreaReserveSpec != null))
                {
                    array[arrayIndex] = this._parent.AreaReserveSpec;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> send_DynamicSchedulesEnumerator = this._parent.Send_DynamicSchedules.GetEnumerator();
                try
                {
                    for (
                    ; send_DynamicSchedulesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = send_DynamicSchedulesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    send_DynamicSchedulesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ISubControlArea subControlAreaItem = item.As<ISubControlArea>();
                if (((subControlAreaItem != null) 
                            && this._parent.SubControlAreas.Remove(subControlAreaItem)))
                {
                    return true;
                }
                ITieLine tieLineItem = item.As<ITieLine>();
                if (((tieLineItem != null) 
                            && this._parent.SideA_TieLines.Remove(tieLineItem)))
                {
                    return true;
                }
                if ((this._parent.Controls == item))
                {
                    this._parent.Controls = null;
                    return true;
                }
                IInadvertentAccount inadvertentAccountItem = item.As<IInadvertentAccount>();
                if (((inadvertentAccountItem != null) 
                            && this._parent.InadvertentAccounts.Remove(inadvertentAccountItem)))
                {
                    return true;
                }
                if (((tieLineItem != null) 
                            && this._parent.SideB_TieLines.Remove(tieLineItem)))
                {
                    return true;
                }
                IDynamicSchedule dynamicScheduleItem = item.As<IDynamicSchedule>();
                if (((dynamicScheduleItem != null) 
                            && this._parent.Receive_DynamicSchedules.Remove(dynamicScheduleItem)))
                {
                    return true;
                }
                if ((this._parent.AreaReserveSpec == item))
                {
                    this._parent.AreaReserveSpec = null;
                    return true;
                }
                if (((dynamicScheduleItem != null) 
                            && this._parent.Send_DynamicSchedules.Remove(dynamicScheduleItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SubControlAreas).Concat(this._parent.SideA_TieLines).Concat(this._parent.Controls).Concat(this._parent.InadvertentAccounts).Concat(this._parent.SideB_TieLines).Concat(this._parent.Receive_DynamicSchedules).Concat(this._parent.AreaReserveSpec).Concat(this._parent.Send_DynamicSchedules).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the frequencyBiasFactor property
        /// </summary>
        private sealed class FrequencyBiasFactorProxy : ModelPropertyChange<IHostControlArea, object>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FrequencyBiasFactorProxy(IHostControlArea modelElement) : 
                    base(modelElement, "frequencyBiasFactor")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override object Value
            {
                get
                {
                    return this.ModelElement.FrequencyBiasFactor;
                }
                set
                {
                    this.ModelElement.FrequencyBiasFactor = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the freqSetPoint property
        /// </summary>
        private sealed class FreqSetPointProxy : ModelPropertyChange<IHostControlArea, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FreqSetPointProxy(IHostControlArea modelElement) : 
                    base(modelElement, "freqSetPoint")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.FreqSetPoint;
                }
                set
                {
                    this.ModelElement.FreqSetPoint = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the areaControlMode property
        /// </summary>
        private sealed class AreaControlModeProxy : ModelPropertyChange<IHostControlArea, Nullable<AreaControlMode>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AreaControlModeProxy(IHostControlArea modelElement) : 
                    base(modelElement, "areaControlMode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<AreaControlMode> Value
            {
                get
                {
                    return this.ModelElement.AreaControlMode;
                }
                set
                {
                    this.ModelElement.AreaControlMode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Controls property
        /// </summary>
        private sealed class ControlsProxy : ModelPropertyChange<IHostControlArea, IControlAreaOperator>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ControlsProxy(IHostControlArea modelElement) : 
                    base(modelElement, "Controls")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IControlAreaOperator Value
            {
                get
                {
                    return this.ModelElement.Controls;
                }
                set
                {
                    this.ModelElement.Controls = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AreaReserveSpec property
        /// </summary>
        private sealed class AreaReserveSpecProxy : ModelPropertyChange<IHostControlArea, IAreaReserveSpec>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AreaReserveSpecProxy(IHostControlArea modelElement) : 
                    base(modelElement, "AreaReserveSpec")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAreaReserveSpec Value
            {
                get
                {
                    return this.ModelElement.AreaReserveSpec;
                }
                set
                {
                    this.ModelElement.AreaReserveSpec = value;
                }
            }
        }
    }
}

