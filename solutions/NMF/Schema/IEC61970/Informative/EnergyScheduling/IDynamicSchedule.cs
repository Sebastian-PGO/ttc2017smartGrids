using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling
{
    
    
    /// <summary>
    /// The public interface for DynamicSchedule
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(DynamicSchedule))]
    [XmlDefaultImplementationTypeAttribute(typeof(DynamicSchedule))]
    public interface IDynamicSchedule : IModelElement, IRegularIntervalSchedule
    {
        
        /// <summary>
        /// The dynSchedStatus property
        /// </summary>
        string DynSchedStatus
        {
            get;
            set;
        }
        
        /// <summary>
        /// The dynSchedSignRev property
        /// </summary>
        bool DynSchedSignRev
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Receive_HostControlArea property
        /// </summary>
        IHostControlArea Receive_HostControlArea
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Measurement property
        /// </summary>
        IMeasurement Measurement
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Send_HostControlArea property
        /// </summary>
        IHostControlArea Send_HostControlArea
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the DynSchedStatus property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DynSchedStatusChanging;
        
        /// <summary>
        /// Gets fired when the DynSchedStatus property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DynSchedStatusChanged;
        
        /// <summary>
        /// Gets fired before the DynSchedSignRev property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DynSchedSignRevChanging;
        
        /// <summary>
        /// Gets fired when the DynSchedSignRev property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DynSchedSignRevChanged;
        
        /// <summary>
        /// Gets fired before the Receive_HostControlArea property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Receive_HostControlAreaChanging;
        
        /// <summary>
        /// Gets fired when the Receive_HostControlArea property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Receive_HostControlAreaChanged;
        
        /// <summary>
        /// Gets fired before the Measurement property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MeasurementChanging;
        
        /// <summary>
        /// Gets fired when the Measurement property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MeasurementChanged;
        
        /// <summary>
        /// Gets fired before the Send_HostControlArea property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Send_HostControlAreaChanging;
        
        /// <summary>
        /// Gets fired when the Send_HostControlArea property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Send_HostControlAreaChanged;
    }
}

