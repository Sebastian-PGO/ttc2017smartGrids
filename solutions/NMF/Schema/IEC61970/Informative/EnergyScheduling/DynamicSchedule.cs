using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling
{
    
    
    /// <summary>
    /// The default implementation of the DynamicSchedule class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#EnergyScheduling")]
    [XmlNamespacePrefixAttribute("cimEnergyScheduling")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/EnergyScheduling/" +
        "DynamicSchedule")]
    [DebuggerDisplayAttribute("DynamicSchedule {UUID}")]
    public partial class DynamicSchedule : RegularIntervalSchedule, IDynamicSchedule, IModelElement
    {
        
        /// <summary>
        /// The backing field for the DynSchedStatus property
        /// </summary>
        private string _dynSchedStatus;
        
        private static Lazy<ITypedElement> _dynSchedStatusAttribute = new Lazy<ITypedElement>(RetrieveDynSchedStatusAttribute);
        
        /// <summary>
        /// The backing field for the DynSchedSignRev property
        /// </summary>
        private bool _dynSchedSignRev;
        
        private static Lazy<ITypedElement> _dynSchedSignRevAttribute = new Lazy<ITypedElement>(RetrieveDynSchedSignRevAttribute);
        
        private static Lazy<ITypedElement> _receive_HostControlAreaReference = new Lazy<ITypedElement>(RetrieveReceive_HostControlAreaReference);
        
        /// <summary>
        /// The backing field for the Receive_HostControlArea property
        /// </summary>
        private IHostControlArea _receive_HostControlArea;
        
        private static Lazy<ITypedElement> _measurementReference = new Lazy<ITypedElement>(RetrieveMeasurementReference);
        
        /// <summary>
        /// The backing field for the Measurement property
        /// </summary>
        private IMeasurement _measurement;
        
        private static Lazy<ITypedElement> _send_HostControlAreaReference = new Lazy<ITypedElement>(RetrieveSend_HostControlAreaReference);
        
        /// <summary>
        /// The backing field for the Send_HostControlArea property
        /// </summary>
        private IHostControlArea _send_HostControlArea;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The dynSchedStatus property
        /// </summary>
        [XmlElementNameAttribute("dynSchedStatus")]
        [XmlAttributeAttribute(true)]
        public virtual string DynSchedStatus
        {
            get
            {
                return this._dynSchedStatus;
            }
            set
            {
                if ((this._dynSchedStatus != value))
                {
                    string old = this._dynSchedStatus;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDynSchedStatusChanging(e);
                    this.OnPropertyChanging("DynSchedStatus", e, _dynSchedStatusAttribute);
                    this._dynSchedStatus = value;
                    this.OnDynSchedStatusChanged(e);
                    this.OnPropertyChanged("DynSchedStatus", e, _dynSchedStatusAttribute);
                }
            }
        }
        
        /// <summary>
        /// The dynSchedSignRev property
        /// </summary>
        [XmlElementNameAttribute("dynSchedSignRev")]
        [XmlAttributeAttribute(true)]
        public virtual bool DynSchedSignRev
        {
            get
            {
                return this._dynSchedSignRev;
            }
            set
            {
                if ((this._dynSchedSignRev != value))
                {
                    bool old = this._dynSchedSignRev;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDynSchedSignRevChanging(e);
                    this.OnPropertyChanging("DynSchedSignRev", e, _dynSchedSignRevAttribute);
                    this._dynSchedSignRev = value;
                    this.OnDynSchedSignRevChanged(e);
                    this.OnPropertyChanged("DynSchedSignRev", e, _dynSchedSignRevAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Receive_HostControlArea property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Receive_DynamicSchedules")]
        public virtual IHostControlArea Receive_HostControlArea
        {
            get
            {
                return this._receive_HostControlArea;
            }
            set
            {
                if ((this._receive_HostControlArea != value))
                {
                    IHostControlArea old = this._receive_HostControlArea;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReceive_HostControlAreaChanging(e);
                    this.OnPropertyChanging("Receive_HostControlArea", e, _receive_HostControlAreaReference);
                    this._receive_HostControlArea = value;
                    if ((old != null))
                    {
                        old.Receive_DynamicSchedules.Remove(this);
                        old.Deleted -= this.OnResetReceive_HostControlArea;
                    }
                    if ((value != null))
                    {
                        value.Receive_DynamicSchedules.Add(this);
                        value.Deleted += this.OnResetReceive_HostControlArea;
                    }
                    this.OnReceive_HostControlAreaChanged(e);
                    this.OnPropertyChanged("Receive_HostControlArea", e, _receive_HostControlAreaReference);
                }
            }
        }
        
        /// <summary>
        /// The Measurement property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("DynamicSchedules")]
        public virtual IMeasurement Measurement
        {
            get
            {
                return this._measurement;
            }
            set
            {
                if ((this._measurement != value))
                {
                    IMeasurement old = this._measurement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurementChanging(e);
                    this.OnPropertyChanging("Measurement", e, _measurementReference);
                    this._measurement = value;
                    if ((old != null))
                    {
                        old.DynamicSchedules.Remove(this);
                        old.Deleted -= this.OnResetMeasurement;
                    }
                    if ((value != null))
                    {
                        value.DynamicSchedules.Add(this);
                        value.Deleted += this.OnResetMeasurement;
                    }
                    this.OnMeasurementChanged(e);
                    this.OnPropertyChanged("Measurement", e, _measurementReference);
                }
            }
        }
        
        /// <summary>
        /// The Send_HostControlArea property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Send_DynamicSchedules")]
        public virtual IHostControlArea Send_HostControlArea
        {
            get
            {
                return this._send_HostControlArea;
            }
            set
            {
                if ((this._send_HostControlArea != value))
                {
                    IHostControlArea old = this._send_HostControlArea;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSend_HostControlAreaChanging(e);
                    this.OnPropertyChanging("Send_HostControlArea", e, _send_HostControlAreaReference);
                    this._send_HostControlArea = value;
                    if ((old != null))
                    {
                        old.Send_DynamicSchedules.Remove(this);
                        old.Deleted -= this.OnResetSend_HostControlArea;
                    }
                    if ((value != null))
                    {
                        value.Send_DynamicSchedules.Add(this);
                        value.Deleted += this.OnResetSend_HostControlArea;
                    }
                    this.OnSend_HostControlAreaChanged(e);
                    this.OnPropertyChanged("Send_HostControlArea", e, _send_HostControlAreaReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new DynamicScheduleReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/EnergyScheduling/" +
                            "DynamicSchedule")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the DynSchedStatus property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DynSchedStatusChanging;
        
        /// <summary>
        /// Gets fired when the DynSchedStatus property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DynSchedStatusChanged;
        
        /// <summary>
        /// Gets fired before the DynSchedSignRev property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DynSchedSignRevChanging;
        
        /// <summary>
        /// Gets fired when the DynSchedSignRev property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DynSchedSignRevChanged;
        
        /// <summary>
        /// Gets fired before the Receive_HostControlArea property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Receive_HostControlAreaChanging;
        
        /// <summary>
        /// Gets fired when the Receive_HostControlArea property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Receive_HostControlAreaChanged;
        
        /// <summary>
        /// Gets fired before the Measurement property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeasurementChanging;
        
        /// <summary>
        /// Gets fired when the Measurement property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeasurementChanged;
        
        /// <summary>
        /// Gets fired before the Send_HostControlArea property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Send_HostControlAreaChanging;
        
        /// <summary>
        /// Gets fired when the Send_HostControlArea property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Send_HostControlAreaChanged;
        
        private static ITypedElement RetrieveDynSchedStatusAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DynamicSchedule.ClassInstance)).Resolve("dynSchedStatus")));
        }
        
        /// <summary>
        /// Raises the DynSchedStatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDynSchedStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DynSchedStatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DynSchedStatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDynSchedStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DynSchedStatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDynSchedSignRevAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DynamicSchedule.ClassInstance)).Resolve("dynSchedSignRev")));
        }
        
        /// <summary>
        /// Raises the DynSchedSignRevChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDynSchedSignRevChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DynSchedSignRevChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DynSchedSignRevChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDynSchedSignRevChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DynSchedSignRevChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReceive_HostControlAreaReference()
        {
            return ((ITypedElement)(((ModelElement)(DynamicSchedule.ClassInstance)).Resolve("Receive_HostControlArea")));
        }
        
        /// <summary>
        /// Raises the Receive_HostControlAreaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceive_HostControlAreaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Receive_HostControlAreaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Receive_HostControlAreaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceive_HostControlAreaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Receive_HostControlAreaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Receive_HostControlArea property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReceive_HostControlArea(object sender, System.EventArgs eventArgs)
        {
            this.Receive_HostControlArea = null;
        }
        
        private static ITypedElement RetrieveMeasurementReference()
        {
            return ((ITypedElement)(((ModelElement)(DynamicSchedule.ClassInstance)).Resolve("Measurement")));
        }
        
        /// <summary>
        /// Raises the MeasurementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeasurementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeasurementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeasurementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Measurement property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeasurement(object sender, System.EventArgs eventArgs)
        {
            this.Measurement = null;
        }
        
        private static ITypedElement RetrieveSend_HostControlAreaReference()
        {
            return ((ITypedElement)(((ModelElement)(DynamicSchedule.ClassInstance)).Resolve("Send_HostControlArea")));
        }
        
        /// <summary>
        /// Raises the Send_HostControlAreaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSend_HostControlAreaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Send_HostControlAreaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Send_HostControlAreaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSend_HostControlAreaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Send_HostControlAreaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Send_HostControlArea property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSend_HostControlArea(object sender, System.EventArgs eventArgs)
        {
            this.Send_HostControlArea = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "DYNSCHEDSTATUS"))
            {
                return this.DynSchedStatus;
            }
            if ((attribute == "DYNSCHEDSIGNREV"))
            {
                return this.DynSchedSignRev;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RECEIVE_HOSTCONTROLAREA"))
            {
                this.Receive_HostControlArea = ((IHostControlArea)(value));
                return;
            }
            if ((feature == "MEASUREMENT"))
            {
                this.Measurement = ((IMeasurement)(value));
                return;
            }
            if ((feature == "SEND_HOSTCONTROLAREA"))
            {
                this.Send_HostControlArea = ((IHostControlArea)(value));
                return;
            }
            if ((feature == "DYNSCHEDSTATUS"))
            {
                this.DynSchedStatus = ((string)(value));
                return;
            }
            if ((feature == "DYNSCHEDSIGNREV"))
            {
                this.DynSchedSignRev = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Receive_HostControlArea"))
            {
                return new Receive_HostControlAreaProxy(this);
            }
            if ((attribute == "Measurement"))
            {
                return new MeasurementProxy(this);
            }
            if ((attribute == "Send_HostControlArea"))
            {
                return new Send_HostControlAreaProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Receive_HostControlArea"))
            {
                return new Receive_HostControlAreaProxy(this);
            }
            if ((reference == "Measurement"))
            {
                return new MeasurementProxy(this);
            }
            if ((reference == "Send_HostControlArea"))
            {
                return new Send_HostControlAreaProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/EnergyScheduling/" +
                        "DynamicSchedule")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the DynamicSchedule class
        /// </summary>
        public class DynamicScheduleReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private DynamicSchedule _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public DynamicScheduleReferencedElementsCollection(DynamicSchedule parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Receive_HostControlArea != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Measurement != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Send_HostControlArea != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Receive_HostControlAreaChanged += this.PropagateValueChanges;
                this._parent.MeasurementChanged += this.PropagateValueChanges;
                this._parent.Send_HostControlAreaChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Receive_HostControlAreaChanged -= this.PropagateValueChanges;
                this._parent.MeasurementChanged -= this.PropagateValueChanges;
                this._parent.Send_HostControlAreaChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Receive_HostControlArea == null))
                {
                    IHostControlArea receive_HostControlAreaCasted = item.As<IHostControlArea>();
                    if ((receive_HostControlAreaCasted != null))
                    {
                        this._parent.Receive_HostControlArea = receive_HostControlAreaCasted;
                        return;
                    }
                }
                if ((this._parent.Measurement == null))
                {
                    IMeasurement measurementCasted = item.As<IMeasurement>();
                    if ((measurementCasted != null))
                    {
                        this._parent.Measurement = measurementCasted;
                        return;
                    }
                }
                if ((this._parent.Send_HostControlArea == null))
                {
                    IHostControlArea send_HostControlAreaCasted = item.As<IHostControlArea>();
                    if ((send_HostControlAreaCasted != null))
                    {
                        this._parent.Send_HostControlArea = send_HostControlAreaCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Receive_HostControlArea = null;
                this._parent.Measurement = null;
                this._parent.Send_HostControlArea = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Receive_HostControlArea))
                {
                    return true;
                }
                if ((item == this._parent.Measurement))
                {
                    return true;
                }
                if ((item == this._parent.Send_HostControlArea))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Receive_HostControlArea != null))
                {
                    array[arrayIndex] = this._parent.Receive_HostControlArea;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Measurement != null))
                {
                    array[arrayIndex] = this._parent.Measurement;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Send_HostControlArea != null))
                {
                    array[arrayIndex] = this._parent.Send_HostControlArea;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Receive_HostControlArea == item))
                {
                    this._parent.Receive_HostControlArea = null;
                    return true;
                }
                if ((this._parent.Measurement == item))
                {
                    this._parent.Measurement = null;
                    return true;
                }
                if ((this._parent.Send_HostControlArea == item))
                {
                    this._parent.Send_HostControlArea = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Receive_HostControlArea).Concat(this._parent.Measurement).Concat(this._parent.Send_HostControlArea).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dynSchedStatus property
        /// </summary>
        private sealed class DynSchedStatusProxy : ModelPropertyChange<IDynamicSchedule, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DynSchedStatusProxy(IDynamicSchedule modelElement) : 
                    base(modelElement, "dynSchedStatus")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.DynSchedStatus;
                }
                set
                {
                    this.ModelElement.DynSchedStatus = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dynSchedSignRev property
        /// </summary>
        private sealed class DynSchedSignRevProxy : ModelPropertyChange<IDynamicSchedule, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DynSchedSignRevProxy(IDynamicSchedule modelElement) : 
                    base(modelElement, "dynSchedSignRev")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.DynSchedSignRev;
                }
                set
                {
                    this.ModelElement.DynSchedSignRev = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Receive_HostControlArea property
        /// </summary>
        private sealed class Receive_HostControlAreaProxy : ModelPropertyChange<IDynamicSchedule, IHostControlArea>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Receive_HostControlAreaProxy(IDynamicSchedule modelElement) : 
                    base(modelElement, "Receive_HostControlArea")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHostControlArea Value
            {
                get
                {
                    return this.ModelElement.Receive_HostControlArea;
                }
                set
                {
                    this.ModelElement.Receive_HostControlArea = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Measurement property
        /// </summary>
        private sealed class MeasurementProxy : ModelPropertyChange<IDynamicSchedule, IMeasurement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeasurementProxy(IDynamicSchedule modelElement) : 
                    base(modelElement, "Measurement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeasurement Value
            {
                get
                {
                    return this.ModelElement.Measurement;
                }
                set
                {
                    this.ModelElement.Measurement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Send_HostControlArea property
        /// </summary>
        private sealed class Send_HostControlAreaProxy : ModelPropertyChange<IDynamicSchedule, IHostControlArea>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Send_HostControlAreaProxy(IDynamicSchedule modelElement) : 
                    base(modelElement, "Send_HostControlArea")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHostControlArea Value
            {
                get
                {
                    return this.ModelElement.Send_HostControlArea;
                }
                set
                {
                    this.ModelElement.Send_HostControlArea = value;
                }
            }
        }
    }
}

