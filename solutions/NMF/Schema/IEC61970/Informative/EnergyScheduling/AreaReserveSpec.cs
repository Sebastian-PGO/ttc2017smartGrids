using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling
{
    
    
    /// <summary>
    /// The default implementation of the AreaReserveSpec class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#EnergyScheduling")]
    [XmlNamespacePrefixAttribute("cimEnergyScheduling")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/EnergyScheduling/" +
        "AreaReserveSpec")]
    [DebuggerDisplayAttribute("AreaReserveSpec {UUID}")]
    public partial class AreaReserveSpec : Element, IAreaReserveSpec, IModelElement
    {
        
        /// <summary>
        /// The backing field for the RaiseRegMarginReqt property
        /// </summary>
        private float _raiseRegMarginReqt;
        
        private static Lazy<ITypedElement> _raiseRegMarginReqtAttribute = new Lazy<ITypedElement>(RetrieveRaiseRegMarginReqtAttribute);
        
        /// <summary>
        /// The backing field for the AreaReserveSpecName property
        /// </summary>
        private string _areaReserveSpecName;
        
        private static Lazy<ITypedElement> _areaReserveSpecNameAttribute = new Lazy<ITypedElement>(RetrieveAreaReserveSpecNameAttribute);
        
        /// <summary>
        /// The backing field for the OpReserveReqt property
        /// </summary>
        private float _opReserveReqt;
        
        private static Lazy<ITypedElement> _opReserveReqtAttribute = new Lazy<ITypedElement>(RetrieveOpReserveReqtAttribute);
        
        /// <summary>
        /// The backing field for the LowerRegMarginReqt property
        /// </summary>
        private float _lowerRegMarginReqt;
        
        private static Lazy<ITypedElement> _lowerRegMarginReqtAttribute = new Lazy<ITypedElement>(RetrieveLowerRegMarginReqtAttribute);
        
        /// <summary>
        /// The backing field for the PrimaryReserveReqt property
        /// </summary>
        private float _primaryReserveReqt;
        
        private static Lazy<ITypedElement> _primaryReserveReqtAttribute = new Lazy<ITypedElement>(RetrievePrimaryReserveReqtAttribute);
        
        /// <summary>
        /// The backing field for the SpinningReserveReqt property
        /// </summary>
        private float _spinningReserveReqt;
        
        private static Lazy<ITypedElement> _spinningReserveReqtAttribute = new Lazy<ITypedElement>(RetrieveSpinningReserveReqtAttribute);
        
        private static Lazy<ITypedElement> _reserveEnergyTransactionReference = new Lazy<ITypedElement>(RetrieveReserveEnergyTransactionReference);
        
        /// <summary>
        /// The backing field for the ReserveEnergyTransaction property
        /// </summary>
        private IReserve _reserveEnergyTransaction;
        
        private static Lazy<ITypedElement> _hostControlAreasReference = new Lazy<ITypedElement>(RetrieveHostControlAreasReference);
        
        /// <summary>
        /// The backing field for the HostControlAreas property
        /// </summary>
        private AreaReserveSpecHostControlAreasCollection _hostControlAreas;
        
        private static IClass _classInstance;
        
        public AreaReserveSpec()
        {
            this._hostControlAreas = new AreaReserveSpecHostControlAreasCollection(this);
            this._hostControlAreas.CollectionChanging += this.HostControlAreasCollectionChanging;
            this._hostControlAreas.CollectionChanged += this.HostControlAreasCollectionChanged;
        }
        
        /// <summary>
        /// The raiseRegMarginReqt property
        /// </summary>
        [XmlElementNameAttribute("raiseRegMarginReqt")]
        [XmlAttributeAttribute(true)]
        public virtual float RaiseRegMarginReqt
        {
            get
            {
                return this._raiseRegMarginReqt;
            }
            set
            {
                if ((this._raiseRegMarginReqt != value))
                {
                    float old = this._raiseRegMarginReqt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRaiseRegMarginReqtChanging(e);
                    this.OnPropertyChanging("RaiseRegMarginReqt", e, _raiseRegMarginReqtAttribute);
                    this._raiseRegMarginReqt = value;
                    this.OnRaiseRegMarginReqtChanged(e);
                    this.OnPropertyChanged("RaiseRegMarginReqt", e, _raiseRegMarginReqtAttribute);
                }
            }
        }
        
        /// <summary>
        /// The areaReserveSpecName property
        /// </summary>
        [XmlElementNameAttribute("areaReserveSpecName")]
        [XmlAttributeAttribute(true)]
        public virtual string AreaReserveSpecName
        {
            get
            {
                return this._areaReserveSpecName;
            }
            set
            {
                if ((this._areaReserveSpecName != value))
                {
                    string old = this._areaReserveSpecName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAreaReserveSpecNameChanging(e);
                    this.OnPropertyChanging("AreaReserveSpecName", e, _areaReserveSpecNameAttribute);
                    this._areaReserveSpecName = value;
                    this.OnAreaReserveSpecNameChanged(e);
                    this.OnPropertyChanged("AreaReserveSpecName", e, _areaReserveSpecNameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The opReserveReqt property
        /// </summary>
        [XmlElementNameAttribute("opReserveReqt")]
        [XmlAttributeAttribute(true)]
        public virtual float OpReserveReqt
        {
            get
            {
                return this._opReserveReqt;
            }
            set
            {
                if ((this._opReserveReqt != value))
                {
                    float old = this._opReserveReqt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpReserveReqtChanging(e);
                    this.OnPropertyChanging("OpReserveReqt", e, _opReserveReqtAttribute);
                    this._opReserveReqt = value;
                    this.OnOpReserveReqtChanged(e);
                    this.OnPropertyChanged("OpReserveReqt", e, _opReserveReqtAttribute);
                }
            }
        }
        
        /// <summary>
        /// The lowerRegMarginReqt property
        /// </summary>
        [XmlElementNameAttribute("lowerRegMarginReqt")]
        [XmlAttributeAttribute(true)]
        public virtual float LowerRegMarginReqt
        {
            get
            {
                return this._lowerRegMarginReqt;
            }
            set
            {
                if ((this._lowerRegMarginReqt != value))
                {
                    float old = this._lowerRegMarginReqt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLowerRegMarginReqtChanging(e);
                    this.OnPropertyChanging("LowerRegMarginReqt", e, _lowerRegMarginReqtAttribute);
                    this._lowerRegMarginReqt = value;
                    this.OnLowerRegMarginReqtChanged(e);
                    this.OnPropertyChanged("LowerRegMarginReqt", e, _lowerRegMarginReqtAttribute);
                }
            }
        }
        
        /// <summary>
        /// The primaryReserveReqt property
        /// </summary>
        [XmlElementNameAttribute("primaryReserveReqt")]
        [XmlAttributeAttribute(true)]
        public virtual float PrimaryReserveReqt
        {
            get
            {
                return this._primaryReserveReqt;
            }
            set
            {
                if ((this._primaryReserveReqt != value))
                {
                    float old = this._primaryReserveReqt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPrimaryReserveReqtChanging(e);
                    this.OnPropertyChanging("PrimaryReserveReqt", e, _primaryReserveReqtAttribute);
                    this._primaryReserveReqt = value;
                    this.OnPrimaryReserveReqtChanged(e);
                    this.OnPropertyChanged("PrimaryReserveReqt", e, _primaryReserveReqtAttribute);
                }
            }
        }
        
        /// <summary>
        /// The spinningReserveReqt property
        /// </summary>
        [XmlElementNameAttribute("spinningReserveReqt")]
        [XmlAttributeAttribute(true)]
        public virtual float SpinningReserveReqt
        {
            get
            {
                return this._spinningReserveReqt;
            }
            set
            {
                if ((this._spinningReserveReqt != value))
                {
                    float old = this._spinningReserveReqt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSpinningReserveReqtChanging(e);
                    this.OnPropertyChanging("SpinningReserveReqt", e, _spinningReserveReqtAttribute);
                    this._spinningReserveReqt = value;
                    this.OnSpinningReserveReqtChanged(e);
                    this.OnPropertyChanged("SpinningReserveReqt", e, _spinningReserveReqtAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ReserveEnergyTransaction property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AreaReserveSpec")]
        public virtual IReserve ReserveEnergyTransaction
        {
            get
            {
                return this._reserveEnergyTransaction;
            }
            set
            {
                if ((this._reserveEnergyTransaction != value))
                {
                    IReserve old = this._reserveEnergyTransaction;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReserveEnergyTransactionChanging(e);
                    this.OnPropertyChanging("ReserveEnergyTransaction", e, _reserveEnergyTransactionReference);
                    this._reserveEnergyTransaction = value;
                    if ((old != null))
                    {
                        old.AreaReserveSpec.Remove(this);
                        old.Deleted -= this.OnResetReserveEnergyTransaction;
                    }
                    if ((value != null))
                    {
                        value.AreaReserveSpec.Add(this);
                        value.Deleted += this.OnResetReserveEnergyTransaction;
                    }
                    this.OnReserveEnergyTransactionChanged(e);
                    this.OnPropertyChanged("ReserveEnergyTransaction", e, _reserveEnergyTransactionReference);
                }
            }
        }
        
        /// <summary>
        /// The HostControlAreas property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AreaReserveSpec")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IHostControlArea> HostControlAreas
        {
            get
            {
                return this._hostControlAreas;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AreaReserveSpecReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/EnergyScheduling/" +
                            "AreaReserveSpec")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the RaiseRegMarginReqt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RaiseRegMarginReqtChanging;
        
        /// <summary>
        /// Gets fired when the RaiseRegMarginReqt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RaiseRegMarginReqtChanged;
        
        /// <summary>
        /// Gets fired before the AreaReserveSpecName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AreaReserveSpecNameChanging;
        
        /// <summary>
        /// Gets fired when the AreaReserveSpecName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AreaReserveSpecNameChanged;
        
        /// <summary>
        /// Gets fired before the OpReserveReqt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpReserveReqtChanging;
        
        /// <summary>
        /// Gets fired when the OpReserveReqt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpReserveReqtChanged;
        
        /// <summary>
        /// Gets fired before the LowerRegMarginReqt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowerRegMarginReqtChanging;
        
        /// <summary>
        /// Gets fired when the LowerRegMarginReqt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowerRegMarginReqtChanged;
        
        /// <summary>
        /// Gets fired before the PrimaryReserveReqt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PrimaryReserveReqtChanging;
        
        /// <summary>
        /// Gets fired when the PrimaryReserveReqt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PrimaryReserveReqtChanged;
        
        /// <summary>
        /// Gets fired before the SpinningReserveReqt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpinningReserveReqtChanging;
        
        /// <summary>
        /// Gets fired when the SpinningReserveReqt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpinningReserveReqtChanged;
        
        /// <summary>
        /// Gets fired before the ReserveEnergyTransaction property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReserveEnergyTransactionChanging;
        
        /// <summary>
        /// Gets fired when the ReserveEnergyTransaction property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReserveEnergyTransactionChanged;
        
        private static ITypedElement RetrieveRaiseRegMarginReqtAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AreaReserveSpec.ClassInstance)).Resolve("raiseRegMarginReqt")));
        }
        
        /// <summary>
        /// Raises the RaiseRegMarginReqtChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRaiseRegMarginReqtChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RaiseRegMarginReqtChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RaiseRegMarginReqtChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRaiseRegMarginReqtChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RaiseRegMarginReqtChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAreaReserveSpecNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AreaReserveSpec.ClassInstance)).Resolve("areaReserveSpecName")));
        }
        
        /// <summary>
        /// Raises the AreaReserveSpecNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAreaReserveSpecNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AreaReserveSpecNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AreaReserveSpecNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAreaReserveSpecNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AreaReserveSpecNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOpReserveReqtAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AreaReserveSpec.ClassInstance)).Resolve("opReserveReqt")));
        }
        
        /// <summary>
        /// Raises the OpReserveReqtChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpReserveReqtChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpReserveReqtChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpReserveReqtChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpReserveReqtChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpReserveReqtChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLowerRegMarginReqtAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AreaReserveSpec.ClassInstance)).Resolve("lowerRegMarginReqt")));
        }
        
        /// <summary>
        /// Raises the LowerRegMarginReqtChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerRegMarginReqtChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowerRegMarginReqtChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowerRegMarginReqtChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerRegMarginReqtChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowerRegMarginReqtChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePrimaryReserveReqtAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AreaReserveSpec.ClassInstance)).Resolve("primaryReserveReqt")));
        }
        
        /// <summary>
        /// Raises the PrimaryReserveReqtChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPrimaryReserveReqtChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PrimaryReserveReqtChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PrimaryReserveReqtChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPrimaryReserveReqtChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PrimaryReserveReqtChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSpinningReserveReqtAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AreaReserveSpec.ClassInstance)).Resolve("spinningReserveReqt")));
        }
        
        /// <summary>
        /// Raises the SpinningReserveReqtChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpinningReserveReqtChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpinningReserveReqtChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpinningReserveReqtChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpinningReserveReqtChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpinningReserveReqtChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReserveEnergyTransactionReference()
        {
            return ((ITypedElement)(((ModelElement)(AreaReserveSpec.ClassInstance)).Resolve("ReserveEnergyTransaction")));
        }
        
        /// <summary>
        /// Raises the ReserveEnergyTransactionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReserveEnergyTransactionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReserveEnergyTransactionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReserveEnergyTransactionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReserveEnergyTransactionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReserveEnergyTransactionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ReserveEnergyTransaction property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReserveEnergyTransaction(object sender, System.EventArgs eventArgs)
        {
            this.ReserveEnergyTransaction = null;
        }
        
        private static ITypedElement RetrieveHostControlAreasReference()
        {
            return ((ITypedElement)(((ModelElement)(AreaReserveSpec.ClassInstance)).Resolve("HostControlAreas")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the HostControlAreas property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HostControlAreasCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("HostControlAreas", e, _hostControlAreasReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the HostControlAreas property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HostControlAreasCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("HostControlAreas", e, _hostControlAreasReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "RAISEREGMARGINREQT"))
            {
                return this.RaiseRegMarginReqt;
            }
            if ((attribute == "AREARESERVESPECNAME"))
            {
                return this.AreaReserveSpecName;
            }
            if ((attribute == "OPRESERVEREQT"))
            {
                return this.OpReserveReqt;
            }
            if ((attribute == "LOWERREGMARGINREQT"))
            {
                return this.LowerRegMarginReqt;
            }
            if ((attribute == "PRIMARYRESERVEREQT"))
            {
                return this.PrimaryReserveReqt;
            }
            if ((attribute == "SPINNINGRESERVEREQT"))
            {
                return this.SpinningReserveReqt;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "HOSTCONTROLAREAS"))
            {
                return this._hostControlAreas;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RESERVEENERGYTRANSACTION"))
            {
                this.ReserveEnergyTransaction = ((IReserve)(value));
                return;
            }
            if ((feature == "RAISEREGMARGINREQT"))
            {
                this.RaiseRegMarginReqt = ((float)(value));
                return;
            }
            if ((feature == "AREARESERVESPECNAME"))
            {
                this.AreaReserveSpecName = ((string)(value));
                return;
            }
            if ((feature == "OPRESERVEREQT"))
            {
                this.OpReserveReqt = ((float)(value));
                return;
            }
            if ((feature == "LOWERREGMARGINREQT"))
            {
                this.LowerRegMarginReqt = ((float)(value));
                return;
            }
            if ((feature == "PRIMARYRESERVEREQT"))
            {
                this.PrimaryReserveReqt = ((float)(value));
                return;
            }
            if ((feature == "SPINNINGRESERVEREQT"))
            {
                this.SpinningReserveReqt = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ReserveEnergyTransaction"))
            {
                return new ReserveEnergyTransactionProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ReserveEnergyTransaction"))
            {
                return new ReserveEnergyTransactionProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/EnergyScheduling/" +
                        "AreaReserveSpec")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AreaReserveSpec class
        /// </summary>
        public class AreaReserveSpecReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AreaReserveSpec _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AreaReserveSpecReferencedElementsCollection(AreaReserveSpec parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ReserveEnergyTransaction != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.HostControlAreas.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ReserveEnergyTransactionChanged += this.PropagateValueChanges;
                this._parent.HostControlAreas.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ReserveEnergyTransactionChanged -= this.PropagateValueChanges;
                this._parent.HostControlAreas.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ReserveEnergyTransaction == null))
                {
                    IReserve reserveEnergyTransactionCasted = item.As<IReserve>();
                    if ((reserveEnergyTransactionCasted != null))
                    {
                        this._parent.ReserveEnergyTransaction = reserveEnergyTransactionCasted;
                        return;
                    }
                }
                IHostControlArea hostControlAreasCasted = item.As<IHostControlArea>();
                if ((hostControlAreasCasted != null))
                {
                    this._parent.HostControlAreas.Add(hostControlAreasCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ReserveEnergyTransaction = null;
                this._parent.HostControlAreas.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ReserveEnergyTransaction))
                {
                    return true;
                }
                if (this._parent.HostControlAreas.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ReserveEnergyTransaction != null))
                {
                    array[arrayIndex] = this._parent.ReserveEnergyTransaction;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> hostControlAreasEnumerator = this._parent.HostControlAreas.GetEnumerator();
                try
                {
                    for (
                    ; hostControlAreasEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = hostControlAreasEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    hostControlAreasEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ReserveEnergyTransaction == item))
                {
                    this._parent.ReserveEnergyTransaction = null;
                    return true;
                }
                IHostControlArea hostControlAreaItem = item.As<IHostControlArea>();
                if (((hostControlAreaItem != null) 
                            && this._parent.HostControlAreas.Remove(hostControlAreaItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ReserveEnergyTransaction).Concat(this._parent.HostControlAreas).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the raiseRegMarginReqt property
        /// </summary>
        private sealed class RaiseRegMarginReqtProxy : ModelPropertyChange<IAreaReserveSpec, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RaiseRegMarginReqtProxy(IAreaReserveSpec modelElement) : 
                    base(modelElement, "raiseRegMarginReqt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RaiseRegMarginReqt;
                }
                set
                {
                    this.ModelElement.RaiseRegMarginReqt = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the areaReserveSpecName property
        /// </summary>
        private sealed class AreaReserveSpecNameProxy : ModelPropertyChange<IAreaReserveSpec, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AreaReserveSpecNameProxy(IAreaReserveSpec modelElement) : 
                    base(modelElement, "areaReserveSpecName")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AreaReserveSpecName;
                }
                set
                {
                    this.ModelElement.AreaReserveSpecName = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the opReserveReqt property
        /// </summary>
        private sealed class OpReserveReqtProxy : ModelPropertyChange<IAreaReserveSpec, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpReserveReqtProxy(IAreaReserveSpec modelElement) : 
                    base(modelElement, "opReserveReqt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.OpReserveReqt;
                }
                set
                {
                    this.ModelElement.OpReserveReqt = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lowerRegMarginReqt property
        /// </summary>
        private sealed class LowerRegMarginReqtProxy : ModelPropertyChange<IAreaReserveSpec, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowerRegMarginReqtProxy(IAreaReserveSpec modelElement) : 
                    base(modelElement, "lowerRegMarginReqt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.LowerRegMarginReqt;
                }
                set
                {
                    this.ModelElement.LowerRegMarginReqt = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the primaryReserveReqt property
        /// </summary>
        private sealed class PrimaryReserveReqtProxy : ModelPropertyChange<IAreaReserveSpec, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PrimaryReserveReqtProxy(IAreaReserveSpec modelElement) : 
                    base(modelElement, "primaryReserveReqt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PrimaryReserveReqt;
                }
                set
                {
                    this.ModelElement.PrimaryReserveReqt = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the spinningReserveReqt property
        /// </summary>
        private sealed class SpinningReserveReqtProxy : ModelPropertyChange<IAreaReserveSpec, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpinningReserveReqtProxy(IAreaReserveSpec modelElement) : 
                    base(modelElement, "spinningReserveReqt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SpinningReserveReqt;
                }
                set
                {
                    this.ModelElement.SpinningReserveReqt = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReserveEnergyTransaction property
        /// </summary>
        private sealed class ReserveEnergyTransactionProxy : ModelPropertyChange<IAreaReserveSpec, IReserve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReserveEnergyTransactionProxy(IAreaReserveSpec modelElement) : 
                    base(modelElement, "ReserveEnergyTransaction")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReserve Value
            {
                get
                {
                    return this.ModelElement.ReserveEnergyTransaction;
                }
                set
                {
                    this.ModelElement.ReserveEnergyTransaction = value;
                }
            }
        }
    }
}

