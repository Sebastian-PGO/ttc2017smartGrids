using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling
{
    
    
    /// <summary>
    /// The default implementation of the EnergyTransaction class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#EnergyScheduling")]
    [XmlNamespacePrefixAttribute("cimEnergyScheduling")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/EnergyScheduling/" +
        "EnergyTransaction")]
    [DebuggerDisplayAttribute("EnergyTransaction {UUID}")]
    public partial class EnergyTransaction : Document, IEnergyTransaction, IModelElement
    {
        
        /// <summary>
        /// The backing field for the State property
        /// </summary>
        private object _state;
        
        private static Lazy<ITypedElement> _stateAttribute = new Lazy<ITypedElement>(RetrieveStateAttribute);
        
        /// <summary>
        /// The backing field for the FirmInterchangeFlag property
        /// </summary>
        private bool _firmInterchangeFlag;
        
        private static Lazy<ITypedElement> _firmInterchangeFlagAttribute = new Lazy<ITypedElement>(RetrieveFirmInterchangeFlagAttribute);
        
        /// <summary>
        /// The backing field for the DeliveryPointP property
        /// </summary>
        private float _deliveryPointP;
        
        private static Lazy<ITypedElement> _deliveryPointPAttribute = new Lazy<ITypedElement>(RetrieveDeliveryPointPAttribute);
        
        /// <summary>
        /// The backing field for the ReceiptPointP property
        /// </summary>
        private float _receiptPointP;
        
        private static Lazy<ITypedElement> _receiptPointPAttribute = new Lazy<ITypedElement>(RetrieveReceiptPointPAttribute);
        
        /// <summary>
        /// The backing field for the CongestChargeMax property
        /// </summary>
        private float _congestChargeMax;
        
        private static Lazy<ITypedElement> _congestChargeMaxAttribute = new Lazy<ITypedElement>(RetrieveCongestChargeMaxAttribute);
        
        /// <summary>
        /// The backing field for the EnergyMin property
        /// </summary>
        private float _energyMin;
        
        private static Lazy<ITypedElement> _energyMinAttribute = new Lazy<ITypedElement>(RetrieveEnergyMinAttribute);
        
        /// <summary>
        /// The backing field for the Reason property
        /// </summary>
        private string _reason;
        
        private static Lazy<ITypedElement> _reasonAttribute = new Lazy<ITypedElement>(RetrieveReasonAttribute);
        
        private static Lazy<ITypedElement> _energyPriceCurvesReference = new Lazy<ITypedElement>(RetrieveEnergyPriceCurvesReference);
        
        /// <summary>
        /// The backing field for the EnergyPriceCurves property
        /// </summary>
        private EnergyTransactionEnergyPriceCurvesCollection _energyPriceCurves;
        
        private static Lazy<ITypedElement> _energyTransIdReference = new Lazy<ITypedElement>(RetrieveEnergyTransIdReference);
        
        /// <summary>
        /// The backing field for the EnergyTransId property
        /// </summary>
        private ObservableAssociationOrderedSet<ITransactionBid> _energyTransId;
        
        private static Lazy<ITypedElement> _energyProductReference = new Lazy<ITypedElement>(RetrieveEnergyProductReference);
        
        /// <summary>
        /// The backing field for the EnergyProduct property
        /// </summary>
        private IEnergyProduct _energyProduct;
        
        private static Lazy<ITypedElement> _export_SubControlAreaReference = new Lazy<ITypedElement>(RetrieveExport_SubControlAreaReference);
        
        /// <summary>
        /// The backing field for the Export_SubControlArea property
        /// </summary>
        private ISubControlArea _export_SubControlArea;
        
        private static Lazy<ITypedElement> _import_SubControlAreaReference = new Lazy<ITypedElement>(RetrieveImport_SubControlAreaReference);
        
        /// <summary>
        /// The backing field for the Import_SubControlArea property
        /// </summary>
        private ISubControlArea _import_SubControlArea;
        
        private static Lazy<ITypedElement> _energyProfilesReference = new Lazy<ITypedElement>(RetrieveEnergyProfilesReference);
        
        /// <summary>
        /// The backing field for the EnergyProfiles property
        /// </summary>
        private EnergyTransactionEnergyProfilesCollection _energyProfiles;
        
        private static Lazy<ITypedElement> _curtailmentProfilesReference = new Lazy<ITypedElement>(RetrieveCurtailmentProfilesReference);
        
        /// <summary>
        /// The backing field for the CurtailmentProfiles property
        /// </summary>
        private EnergyTransactionCurtailmentProfilesCollection _curtailmentProfiles;
        
        private static Lazy<ITypedElement> _lossProfilesReference = new Lazy<ITypedElement>(RetrieveLossProfilesReference);
        
        /// <summary>
        /// The backing field for the LossProfiles property
        /// </summary>
        private EnergyTransactionLossProfilesCollection _lossProfiles;
        
        private static IClass _classInstance;
        
        public EnergyTransaction()
        {
            this._energyPriceCurves = new EnergyTransactionEnergyPriceCurvesCollection(this);
            this._energyPriceCurves.CollectionChanging += this.EnergyPriceCurvesCollectionChanging;
            this._energyPriceCurves.CollectionChanged += this.EnergyPriceCurvesCollectionChanged;
            this._energyTransId = new ObservableAssociationOrderedSet<ITransactionBid>();
            this._energyTransId.CollectionChanging += this.EnergyTransIdCollectionChanging;
            this._energyTransId.CollectionChanged += this.EnergyTransIdCollectionChanged;
            this._energyProfiles = new EnergyTransactionEnergyProfilesCollection(this);
            this._energyProfiles.CollectionChanging += this.EnergyProfilesCollectionChanging;
            this._energyProfiles.CollectionChanged += this.EnergyProfilesCollectionChanged;
            this._curtailmentProfiles = new EnergyTransactionCurtailmentProfilesCollection(this);
            this._curtailmentProfiles.CollectionChanging += this.CurtailmentProfilesCollectionChanging;
            this._curtailmentProfiles.CollectionChanged += this.CurtailmentProfilesCollectionChanged;
            this._lossProfiles = new EnergyTransactionLossProfilesCollection(this);
            this._lossProfiles.CollectionChanging += this.LossProfilesCollectionChanging;
            this._lossProfiles.CollectionChanged += this.LossProfilesCollectionChanged;
        }
        
        /// <summary>
        /// The state property
        /// </summary>
        [XmlElementNameAttribute("state")]
        [XmlAttributeAttribute(true)]
        public virtual object State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    object old = this._state;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStateChanging(e);
                    this.OnPropertyChanging("State", e, _stateAttribute);
                    this._state = value;
                    this.OnStateChanged(e);
                    this.OnPropertyChanged("State", e, _stateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The firmInterchangeFlag property
        /// </summary>
        [XmlElementNameAttribute("firmInterchangeFlag")]
        [XmlAttributeAttribute(true)]
        public virtual bool FirmInterchangeFlag
        {
            get
            {
                return this._firmInterchangeFlag;
            }
            set
            {
                if ((this._firmInterchangeFlag != value))
                {
                    bool old = this._firmInterchangeFlag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFirmInterchangeFlagChanging(e);
                    this.OnPropertyChanging("FirmInterchangeFlag", e, _firmInterchangeFlagAttribute);
                    this._firmInterchangeFlag = value;
                    this.OnFirmInterchangeFlagChanged(e);
                    this.OnPropertyChanged("FirmInterchangeFlag", e, _firmInterchangeFlagAttribute);
                }
            }
        }
        
        /// <summary>
        /// The deliveryPointP property
        /// </summary>
        [XmlElementNameAttribute("deliveryPointP")]
        [XmlAttributeAttribute(true)]
        public virtual float DeliveryPointP
        {
            get
            {
                return this._deliveryPointP;
            }
            set
            {
                if ((this._deliveryPointP != value))
                {
                    float old = this._deliveryPointP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDeliveryPointPChanging(e);
                    this.OnPropertyChanging("DeliveryPointP", e, _deliveryPointPAttribute);
                    this._deliveryPointP = value;
                    this.OnDeliveryPointPChanged(e);
                    this.OnPropertyChanged("DeliveryPointP", e, _deliveryPointPAttribute);
                }
            }
        }
        
        /// <summary>
        /// The receiptPointP property
        /// </summary>
        [XmlElementNameAttribute("receiptPointP")]
        [XmlAttributeAttribute(true)]
        public virtual float ReceiptPointP
        {
            get
            {
                return this._receiptPointP;
            }
            set
            {
                if ((this._receiptPointP != value))
                {
                    float old = this._receiptPointP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReceiptPointPChanging(e);
                    this.OnPropertyChanging("ReceiptPointP", e, _receiptPointPAttribute);
                    this._receiptPointP = value;
                    this.OnReceiptPointPChanged(e);
                    this.OnPropertyChanged("ReceiptPointP", e, _receiptPointPAttribute);
                }
            }
        }
        
        /// <summary>
        /// The congestChargeMax property
        /// </summary>
        [XmlElementNameAttribute("congestChargeMax")]
        [XmlAttributeAttribute(true)]
        public virtual float CongestChargeMax
        {
            get
            {
                return this._congestChargeMax;
            }
            set
            {
                if ((this._congestChargeMax != value))
                {
                    float old = this._congestChargeMax;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCongestChargeMaxChanging(e);
                    this.OnPropertyChanging("CongestChargeMax", e, _congestChargeMaxAttribute);
                    this._congestChargeMax = value;
                    this.OnCongestChargeMaxChanged(e);
                    this.OnPropertyChanged("CongestChargeMax", e, _congestChargeMaxAttribute);
                }
            }
        }
        
        /// <summary>
        /// The energyMin property
        /// </summary>
        [XmlElementNameAttribute("energyMin")]
        [XmlAttributeAttribute(true)]
        public virtual float EnergyMin
        {
            get
            {
                return this._energyMin;
            }
            set
            {
                if ((this._energyMin != value))
                {
                    float old = this._energyMin;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEnergyMinChanging(e);
                    this.OnPropertyChanging("EnergyMin", e, _energyMinAttribute);
                    this._energyMin = value;
                    this.OnEnergyMinChanged(e);
                    this.OnPropertyChanged("EnergyMin", e, _energyMinAttribute);
                }
            }
        }
        
        /// <summary>
        /// The reason property
        /// </summary>
        [XmlElementNameAttribute("reason")]
        [XmlAttributeAttribute(true)]
        public virtual string Reason
        {
            get
            {
                return this._reason;
            }
            set
            {
                if ((this._reason != value))
                {
                    string old = this._reason;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReasonChanging(e);
                    this.OnPropertyChanging("Reason", e, _reasonAttribute);
                    this._reason = value;
                    this.OnReasonChanged(e);
                    this.OnPropertyChanged("Reason", e, _reasonAttribute);
                }
            }
        }
        
        /// <summary>
        /// The EnergyPriceCurves property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EnergyTransactions")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEnergyPriceCurve> EnergyPriceCurves
        {
            get
            {
                return this._energyPriceCurves;
            }
        }
        
        /// <summary>
        /// The EnergyTransId property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransactionBid> EnergyTransId
        {
            get
            {
                return this._energyTransId;
            }
        }
        
        /// <summary>
        /// The EnergyProduct property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EnergyTransactions")]
        public virtual IEnergyProduct EnergyProduct
        {
            get
            {
                return this._energyProduct;
            }
            set
            {
                if ((this._energyProduct != value))
                {
                    IEnergyProduct old = this._energyProduct;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEnergyProductChanging(e);
                    this.OnPropertyChanging("EnergyProduct", e, _energyProductReference);
                    this._energyProduct = value;
                    if ((old != null))
                    {
                        old.EnergyTransactions.Remove(this);
                        old.Deleted -= this.OnResetEnergyProduct;
                    }
                    if ((value != null))
                    {
                        value.EnergyTransactions.Add(this);
                        value.Deleted += this.OnResetEnergyProduct;
                    }
                    this.OnEnergyProductChanged(e);
                    this.OnPropertyChanged("EnergyProduct", e, _energyProductReference);
                }
            }
        }
        
        /// <summary>
        /// The Export_SubControlArea property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Export_EnergyTransactions")]
        public virtual ISubControlArea Export_SubControlArea
        {
            get
            {
                return this._export_SubControlArea;
            }
            set
            {
                if ((this._export_SubControlArea != value))
                {
                    ISubControlArea old = this._export_SubControlArea;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnExport_SubControlAreaChanging(e);
                    this.OnPropertyChanging("Export_SubControlArea", e, _export_SubControlAreaReference);
                    this._export_SubControlArea = value;
                    if ((old != null))
                    {
                        old.Export_EnergyTransactions.Remove(this);
                        old.Deleted -= this.OnResetExport_SubControlArea;
                    }
                    if ((value != null))
                    {
                        value.Export_EnergyTransactions.Add(this);
                        value.Deleted += this.OnResetExport_SubControlArea;
                    }
                    this.OnExport_SubControlAreaChanged(e);
                    this.OnPropertyChanged("Export_SubControlArea", e, _export_SubControlAreaReference);
                }
            }
        }
        
        /// <summary>
        /// The Import_SubControlArea property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Import_EnergyTransactions")]
        public virtual ISubControlArea Import_SubControlArea
        {
            get
            {
                return this._import_SubControlArea;
            }
            set
            {
                if ((this._import_SubControlArea != value))
                {
                    ISubControlArea old = this._import_SubControlArea;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnImport_SubControlAreaChanging(e);
                    this.OnPropertyChanging("Import_SubControlArea", e, _import_SubControlAreaReference);
                    this._import_SubControlArea = value;
                    if ((old != null))
                    {
                        old.Import_EnergyTransactions.Remove(this);
                        old.Deleted -= this.OnResetImport_SubControlArea;
                    }
                    if ((value != null))
                    {
                        value.Import_EnergyTransactions.Add(this);
                        value.Deleted += this.OnResetImport_SubControlArea;
                    }
                    this.OnImport_SubControlAreaChanged(e);
                    this.OnPropertyChanged("Import_SubControlArea", e, _import_SubControlAreaReference);
                }
            }
        }
        
        /// <summary>
        /// The EnergyProfiles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EnergyTransaction")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEnergyProfile> EnergyProfiles
        {
            get
            {
                return this._energyProfiles;
            }
        }
        
        /// <summary>
        /// The CurtailmentProfiles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EnergyTransaction")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICurtailmentProfile> CurtailmentProfiles
        {
            get
            {
                return this._curtailmentProfiles;
            }
        }
        
        /// <summary>
        /// The LossProfiles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EnergyTransaction")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILossProfile> LossProfiles
        {
            get
            {
                return this._lossProfiles;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new EnergyTransactionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/EnergyScheduling/" +
                            "EnergyTransaction")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the State property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StateChanging;
        
        /// <summary>
        /// Gets fired when the State property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StateChanged;
        
        /// <summary>
        /// Gets fired before the FirmInterchangeFlag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FirmInterchangeFlagChanging;
        
        /// <summary>
        /// Gets fired when the FirmInterchangeFlag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FirmInterchangeFlagChanged;
        
        /// <summary>
        /// Gets fired before the DeliveryPointP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeliveryPointPChanging;
        
        /// <summary>
        /// Gets fired when the DeliveryPointP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeliveryPointPChanged;
        
        /// <summary>
        /// Gets fired before the ReceiptPointP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReceiptPointPChanging;
        
        /// <summary>
        /// Gets fired when the ReceiptPointP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReceiptPointPChanged;
        
        /// <summary>
        /// Gets fired before the CongestChargeMax property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CongestChargeMaxChanging;
        
        /// <summary>
        /// Gets fired when the CongestChargeMax property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CongestChargeMaxChanged;
        
        /// <summary>
        /// Gets fired before the EnergyMin property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyMinChanging;
        
        /// <summary>
        /// Gets fired when the EnergyMin property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyMinChanged;
        
        /// <summary>
        /// Gets fired before the Reason property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReasonChanging;
        
        /// <summary>
        /// Gets fired when the Reason property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReasonChanged;
        
        /// <summary>
        /// Gets fired before the EnergyProduct property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyProductChanging;
        
        /// <summary>
        /// Gets fired when the EnergyProduct property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyProductChanged;
        
        /// <summary>
        /// Gets fired before the Export_SubControlArea property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Export_SubControlAreaChanging;
        
        /// <summary>
        /// Gets fired when the Export_SubControlArea property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Export_SubControlAreaChanged;
        
        /// <summary>
        /// Gets fired before the Import_SubControlArea property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Import_SubControlAreaChanging;
        
        /// <summary>
        /// Gets fired when the Import_SubControlArea property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Import_SubControlAreaChanged;
        
        private static ITypedElement RetrieveStateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EnergyTransaction.ClassInstance)).Resolve("state")));
        }
        
        /// <summary>
        /// Raises the StateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFirmInterchangeFlagAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EnergyTransaction.ClassInstance)).Resolve("firmInterchangeFlag")));
        }
        
        /// <summary>
        /// Raises the FirmInterchangeFlagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFirmInterchangeFlagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FirmInterchangeFlagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FirmInterchangeFlagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFirmInterchangeFlagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FirmInterchangeFlagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDeliveryPointPAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EnergyTransaction.ClassInstance)).Resolve("deliveryPointP")));
        }
        
        /// <summary>
        /// Raises the DeliveryPointPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeliveryPointPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeliveryPointPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DeliveryPointPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeliveryPointPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeliveryPointPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReceiptPointPAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EnergyTransaction.ClassInstance)).Resolve("receiptPointP")));
        }
        
        /// <summary>
        /// Raises the ReceiptPointPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceiptPointPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReceiptPointPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReceiptPointPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceiptPointPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReceiptPointPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCongestChargeMaxAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EnergyTransaction.ClassInstance)).Resolve("congestChargeMax")));
        }
        
        /// <summary>
        /// Raises the CongestChargeMaxChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCongestChargeMaxChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CongestChargeMaxChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CongestChargeMaxChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCongestChargeMaxChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CongestChargeMaxChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEnergyMinAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EnergyTransaction.ClassInstance)).Resolve("energyMin")));
        }
        
        /// <summary>
        /// Raises the EnergyMinChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyMinChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyMinChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnergyMinChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyMinChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyMinChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReasonAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EnergyTransaction.ClassInstance)).Resolve("reason")));
        }
        
        /// <summary>
        /// Raises the ReasonChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReasonChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReasonChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReasonChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReasonChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReasonChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEnergyPriceCurvesReference()
        {
            return ((ITypedElement)(((ModelElement)(EnergyTransaction.ClassInstance)).Resolve("EnergyPriceCurves")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EnergyPriceCurves property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EnergyPriceCurvesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("EnergyPriceCurves", e, _energyPriceCurvesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EnergyPriceCurves property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EnergyPriceCurvesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EnergyPriceCurves", e, _energyPriceCurvesReference);
        }
        
        private static ITypedElement RetrieveEnergyTransIdReference()
        {
            return ((ITypedElement)(((ModelElement)(EnergyTransaction.ClassInstance)).Resolve("EnergyTransId")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EnergyTransId property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EnergyTransIdCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("EnergyTransId", e, _energyTransIdReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EnergyTransId property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EnergyTransIdCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EnergyTransId", e, _energyTransIdReference);
        }
        
        private static ITypedElement RetrieveEnergyProductReference()
        {
            return ((ITypedElement)(((ModelElement)(EnergyTransaction.ClassInstance)).Resolve("EnergyProduct")));
        }
        
        /// <summary>
        /// Raises the EnergyProductChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyProductChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyProductChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnergyProductChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyProductChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyProductChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EnergyProduct property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEnergyProduct(object sender, System.EventArgs eventArgs)
        {
            this.EnergyProduct = null;
        }
        
        private static ITypedElement RetrieveExport_SubControlAreaReference()
        {
            return ((ITypedElement)(((ModelElement)(EnergyTransaction.ClassInstance)).Resolve("Export_SubControlArea")));
        }
        
        /// <summary>
        /// Raises the Export_SubControlAreaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExport_SubControlAreaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Export_SubControlAreaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Export_SubControlAreaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExport_SubControlAreaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Export_SubControlAreaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Export_SubControlArea property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetExport_SubControlArea(object sender, System.EventArgs eventArgs)
        {
            this.Export_SubControlArea = null;
        }
        
        private static ITypedElement RetrieveImport_SubControlAreaReference()
        {
            return ((ITypedElement)(((ModelElement)(EnergyTransaction.ClassInstance)).Resolve("Import_SubControlArea")));
        }
        
        /// <summary>
        /// Raises the Import_SubControlAreaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImport_SubControlAreaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Import_SubControlAreaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Import_SubControlAreaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImport_SubControlAreaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Import_SubControlAreaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Import_SubControlArea property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetImport_SubControlArea(object sender, System.EventArgs eventArgs)
        {
            this.Import_SubControlArea = null;
        }
        
        private static ITypedElement RetrieveEnergyProfilesReference()
        {
            return ((ITypedElement)(((ModelElement)(EnergyTransaction.ClassInstance)).Resolve("EnergyProfiles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EnergyProfiles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EnergyProfilesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("EnergyProfiles", e, _energyProfilesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EnergyProfiles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EnergyProfilesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EnergyProfiles", e, _energyProfilesReference);
        }
        
        private static ITypedElement RetrieveCurtailmentProfilesReference()
        {
            return ((ITypedElement)(((ModelElement)(EnergyTransaction.ClassInstance)).Resolve("CurtailmentProfiles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CurtailmentProfiles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CurtailmentProfilesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("CurtailmentProfiles", e, _curtailmentProfilesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CurtailmentProfiles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CurtailmentProfilesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CurtailmentProfiles", e, _curtailmentProfilesReference);
        }
        
        private static ITypedElement RetrieveLossProfilesReference()
        {
            return ((ITypedElement)(((ModelElement)(EnergyTransaction.ClassInstance)).Resolve("LossProfiles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the LossProfiles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LossProfilesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("LossProfiles", e, _lossProfilesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the LossProfiles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LossProfilesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("LossProfiles", e, _lossProfilesReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "STATE"))
            {
                return this.State;
            }
            if ((attribute == "FIRMINTERCHANGEFLAG"))
            {
                return this.FirmInterchangeFlag;
            }
            if ((attribute == "DELIVERYPOINTP"))
            {
                return this.DeliveryPointP;
            }
            if ((attribute == "RECEIPTPOINTP"))
            {
                return this.ReceiptPointP;
            }
            if ((attribute == "CONGESTCHARGEMAX"))
            {
                return this.CongestChargeMax;
            }
            if ((attribute == "ENERGYMIN"))
            {
                return this.EnergyMin;
            }
            if ((attribute == "REASON"))
            {
                return this.Reason;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ENERGYPRICECURVES"))
            {
                return this._energyPriceCurves;
            }
            if ((feature == "ENERGYTRANSID"))
            {
                return this._energyTransId;
            }
            if ((feature == "ENERGYPROFILES"))
            {
                return this._energyProfiles;
            }
            if ((feature == "CURTAILMENTPROFILES"))
            {
                return this._curtailmentProfiles;
            }
            if ((feature == "LOSSPROFILES"))
            {
                return this._lossProfiles;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ENERGYPRODUCT"))
            {
                this.EnergyProduct = ((IEnergyProduct)(value));
                return;
            }
            if ((feature == "EXPORT_SUBCONTROLAREA"))
            {
                this.Export_SubControlArea = ((ISubControlArea)(value));
                return;
            }
            if ((feature == "IMPORT_SUBCONTROLAREA"))
            {
                this.Import_SubControlArea = ((ISubControlArea)(value));
                return;
            }
            if ((feature == "STATE"))
            {
                this.State = ((object)(value));
                return;
            }
            if ((feature == "FIRMINTERCHANGEFLAG"))
            {
                this.FirmInterchangeFlag = ((bool)(value));
                return;
            }
            if ((feature == "DELIVERYPOINTP"))
            {
                this.DeliveryPointP = ((float)(value));
                return;
            }
            if ((feature == "RECEIPTPOINTP"))
            {
                this.ReceiptPointP = ((float)(value));
                return;
            }
            if ((feature == "CONGESTCHARGEMAX"))
            {
                this.CongestChargeMax = ((float)(value));
                return;
            }
            if ((feature == "ENERGYMIN"))
            {
                this.EnergyMin = ((float)(value));
                return;
            }
            if ((feature == "REASON"))
            {
                this.Reason = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "EnergyProduct"))
            {
                return new EnergyProductProxy(this);
            }
            if ((attribute == "Export_SubControlArea"))
            {
                return new Export_SubControlAreaProxy(this);
            }
            if ((attribute == "Import_SubControlArea"))
            {
                return new Import_SubControlAreaProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "EnergyProduct"))
            {
                return new EnergyProductProxy(this);
            }
            if ((reference == "Export_SubControlArea"))
            {
                return new Export_SubControlAreaProxy(this);
            }
            if ((reference == "Import_SubControlArea"))
            {
                return new Import_SubControlAreaProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/EnergyScheduling/" +
                        "EnergyTransaction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EnergyTransaction class
        /// </summary>
        public class EnergyTransactionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EnergyTransaction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EnergyTransactionReferencedElementsCollection(EnergyTransaction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.EnergyPriceCurves.Count);
                    count = (count + this._parent.EnergyTransId.Count);
                    if ((this._parent.EnergyProduct != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Export_SubControlArea != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Import_SubControlArea != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.EnergyProfiles.Count);
                    count = (count + this._parent.CurtailmentProfiles.Count);
                    count = (count + this._parent.LossProfiles.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.EnergyPriceCurves.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.EnergyTransId.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.EnergyProductChanged += this.PropagateValueChanges;
                this._parent.Export_SubControlAreaChanged += this.PropagateValueChanges;
                this._parent.Import_SubControlAreaChanged += this.PropagateValueChanges;
                this._parent.EnergyProfiles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CurtailmentProfiles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.LossProfiles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.EnergyPriceCurves.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.EnergyTransId.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.EnergyProductChanged -= this.PropagateValueChanges;
                this._parent.Export_SubControlAreaChanged -= this.PropagateValueChanges;
                this._parent.Import_SubControlAreaChanged -= this.PropagateValueChanges;
                this._parent.EnergyProfiles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CurtailmentProfiles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.LossProfiles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IEnergyPriceCurve energyPriceCurvesCasted = item.As<IEnergyPriceCurve>();
                if ((energyPriceCurvesCasted != null))
                {
                    this._parent.EnergyPriceCurves.Add(energyPriceCurvesCasted);
                }
                ITransactionBid energyTransIdCasted = item.As<ITransactionBid>();
                if ((energyTransIdCasted != null))
                {
                    this._parent.EnergyTransId.Add(energyTransIdCasted);
                }
                if ((this._parent.EnergyProduct == null))
                {
                    IEnergyProduct energyProductCasted = item.As<IEnergyProduct>();
                    if ((energyProductCasted != null))
                    {
                        this._parent.EnergyProduct = energyProductCasted;
                        return;
                    }
                }
                if ((this._parent.Export_SubControlArea == null))
                {
                    ISubControlArea export_SubControlAreaCasted = item.As<ISubControlArea>();
                    if ((export_SubControlAreaCasted != null))
                    {
                        this._parent.Export_SubControlArea = export_SubControlAreaCasted;
                        return;
                    }
                }
                if ((this._parent.Import_SubControlArea == null))
                {
                    ISubControlArea import_SubControlAreaCasted = item.As<ISubControlArea>();
                    if ((import_SubControlAreaCasted != null))
                    {
                        this._parent.Import_SubControlArea = import_SubControlAreaCasted;
                        return;
                    }
                }
                IEnergyProfile energyProfilesCasted = item.As<IEnergyProfile>();
                if ((energyProfilesCasted != null))
                {
                    this._parent.EnergyProfiles.Add(energyProfilesCasted);
                }
                ICurtailmentProfile curtailmentProfilesCasted = item.As<ICurtailmentProfile>();
                if ((curtailmentProfilesCasted != null))
                {
                    this._parent.CurtailmentProfiles.Add(curtailmentProfilesCasted);
                }
                ILossProfile lossProfilesCasted = item.As<ILossProfile>();
                if ((lossProfilesCasted != null))
                {
                    this._parent.LossProfiles.Add(lossProfilesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EnergyPriceCurves.Clear();
                this._parent.EnergyTransId.Clear();
                this._parent.EnergyProduct = null;
                this._parent.Export_SubControlArea = null;
                this._parent.Import_SubControlArea = null;
                this._parent.EnergyProfiles.Clear();
                this._parent.CurtailmentProfiles.Clear();
                this._parent.LossProfiles.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.EnergyPriceCurves.Contains(item))
                {
                    return true;
                }
                if (this._parent.EnergyTransId.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.EnergyProduct))
                {
                    return true;
                }
                if ((item == this._parent.Export_SubControlArea))
                {
                    return true;
                }
                if ((item == this._parent.Import_SubControlArea))
                {
                    return true;
                }
                if (this._parent.EnergyProfiles.Contains(item))
                {
                    return true;
                }
                if (this._parent.CurtailmentProfiles.Contains(item))
                {
                    return true;
                }
                if (this._parent.LossProfiles.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> energyPriceCurvesEnumerator = this._parent.EnergyPriceCurves.GetEnumerator();
                try
                {
                    for (
                    ; energyPriceCurvesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = energyPriceCurvesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    energyPriceCurvesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> energyTransIdEnumerator = this._parent.EnergyTransId.GetEnumerator();
                try
                {
                    for (
                    ; energyTransIdEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = energyTransIdEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    energyTransIdEnumerator.Dispose();
                }
                if ((this._parent.EnergyProduct != null))
                {
                    array[arrayIndex] = this._parent.EnergyProduct;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Export_SubControlArea != null))
                {
                    array[arrayIndex] = this._parent.Export_SubControlArea;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Import_SubControlArea != null))
                {
                    array[arrayIndex] = this._parent.Import_SubControlArea;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> energyProfilesEnumerator = this._parent.EnergyProfiles.GetEnumerator();
                try
                {
                    for (
                    ; energyProfilesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = energyProfilesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    energyProfilesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> curtailmentProfilesEnumerator = this._parent.CurtailmentProfiles.GetEnumerator();
                try
                {
                    for (
                    ; curtailmentProfilesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = curtailmentProfilesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    curtailmentProfilesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> lossProfilesEnumerator = this._parent.LossProfiles.GetEnumerator();
                try
                {
                    for (
                    ; lossProfilesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = lossProfilesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    lossProfilesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IEnergyPriceCurve energyPriceCurveItem = item.As<IEnergyPriceCurve>();
                if (((energyPriceCurveItem != null) 
                            && this._parent.EnergyPriceCurves.Remove(energyPriceCurveItem)))
                {
                    return true;
                }
                ITransactionBid transactionBidItem = item.As<ITransactionBid>();
                if (((transactionBidItem != null) 
                            && this._parent.EnergyTransId.Remove(transactionBidItem)))
                {
                    return true;
                }
                if ((this._parent.EnergyProduct == item))
                {
                    this._parent.EnergyProduct = null;
                    return true;
                }
                if ((this._parent.Export_SubControlArea == item))
                {
                    this._parent.Export_SubControlArea = null;
                    return true;
                }
                if ((this._parent.Import_SubControlArea == item))
                {
                    this._parent.Import_SubControlArea = null;
                    return true;
                }
                IEnergyProfile energyProfileItem = item.As<IEnergyProfile>();
                if (((energyProfileItem != null) 
                            && this._parent.EnergyProfiles.Remove(energyProfileItem)))
                {
                    return true;
                }
                ICurtailmentProfile curtailmentProfileItem = item.As<ICurtailmentProfile>();
                if (((curtailmentProfileItem != null) 
                            && this._parent.CurtailmentProfiles.Remove(curtailmentProfileItem)))
                {
                    return true;
                }
                ILossProfile lossProfileItem = item.As<ILossProfile>();
                if (((lossProfileItem != null) 
                            && this._parent.LossProfiles.Remove(lossProfileItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EnergyPriceCurves).Concat(this._parent.EnergyTransId).Concat(this._parent.EnergyProduct).Concat(this._parent.Export_SubControlArea).Concat(this._parent.Import_SubControlArea).Concat(this._parent.EnergyProfiles).Concat(this._parent.CurtailmentProfiles).Concat(this._parent.LossProfiles).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the state property
        /// </summary>
        private sealed class StateProxy : ModelPropertyChange<IEnergyTransaction, object>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StateProxy(IEnergyTransaction modelElement) : 
                    base(modelElement, "state")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override object Value
            {
                get
                {
                    return this.ModelElement.State;
                }
                set
                {
                    this.ModelElement.State = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the firmInterchangeFlag property
        /// </summary>
        private sealed class FirmInterchangeFlagProxy : ModelPropertyChange<IEnergyTransaction, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FirmInterchangeFlagProxy(IEnergyTransaction modelElement) : 
                    base(modelElement, "firmInterchangeFlag")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.FirmInterchangeFlag;
                }
                set
                {
                    this.ModelElement.FirmInterchangeFlag = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the deliveryPointP property
        /// </summary>
        private sealed class DeliveryPointPProxy : ModelPropertyChange<IEnergyTransaction, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DeliveryPointPProxy(IEnergyTransaction modelElement) : 
                    base(modelElement, "deliveryPointP")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.DeliveryPointP;
                }
                set
                {
                    this.ModelElement.DeliveryPointP = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the receiptPointP property
        /// </summary>
        private sealed class ReceiptPointPProxy : ModelPropertyChange<IEnergyTransaction, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReceiptPointPProxy(IEnergyTransaction modelElement) : 
                    base(modelElement, "receiptPointP")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ReceiptPointP;
                }
                set
                {
                    this.ModelElement.ReceiptPointP = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the congestChargeMax property
        /// </summary>
        private sealed class CongestChargeMaxProxy : ModelPropertyChange<IEnergyTransaction, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CongestChargeMaxProxy(IEnergyTransaction modelElement) : 
                    base(modelElement, "congestChargeMax")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CongestChargeMax;
                }
                set
                {
                    this.ModelElement.CongestChargeMax = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the energyMin property
        /// </summary>
        private sealed class EnergyMinProxy : ModelPropertyChange<IEnergyTransaction, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnergyMinProxy(IEnergyTransaction modelElement) : 
                    base(modelElement, "energyMin")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.EnergyMin;
                }
                set
                {
                    this.ModelElement.EnergyMin = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the reason property
        /// </summary>
        private sealed class ReasonProxy : ModelPropertyChange<IEnergyTransaction, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReasonProxy(IEnergyTransaction modelElement) : 
                    base(modelElement, "reason")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Reason;
                }
                set
                {
                    this.ModelElement.Reason = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EnergyProduct property
        /// </summary>
        private sealed class EnergyProductProxy : ModelPropertyChange<IEnergyTransaction, IEnergyProduct>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnergyProductProxy(IEnergyTransaction modelElement) : 
                    base(modelElement, "EnergyProduct")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEnergyProduct Value
            {
                get
                {
                    return this.ModelElement.EnergyProduct;
                }
                set
                {
                    this.ModelElement.EnergyProduct = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Export_SubControlArea property
        /// </summary>
        private sealed class Export_SubControlAreaProxy : ModelPropertyChange<IEnergyTransaction, ISubControlArea>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Export_SubControlAreaProxy(IEnergyTransaction modelElement) : 
                    base(modelElement, "Export_SubControlArea")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISubControlArea Value
            {
                get
                {
                    return this.ModelElement.Export_SubControlArea;
                }
                set
                {
                    this.ModelElement.Export_SubControlArea = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Import_SubControlArea property
        /// </summary>
        private sealed class Import_SubControlAreaProxy : ModelPropertyChange<IEnergyTransaction, ISubControlArea>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Import_SubControlAreaProxy(IEnergyTransaction modelElement) : 
                    base(modelElement, "Import_SubControlArea")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISubControlArea Value
            {
                get
                {
                    return this.ModelElement.Import_SubControlArea;
                }
                set
                {
                    this.ModelElement.Import_SubControlArea = value;
                }
            }
        }
    }
}

