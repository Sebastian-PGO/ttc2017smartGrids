using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon
{
    
    
    /// <summary>
    /// The public interface for Skill
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Skill))]
    [XmlDefaultImplementationTypeAttribute(typeof(Skill))]
    public interface ISkill : IModelElement, IDocument
    {
        
        /// <summary>
        /// The level property
        /// </summary>
        Nullable<SkillLevelKind> Level
        {
            get;
            set;
        }
        
        /// <summary>
        /// The effectiveDateTime property
        /// </summary>
        DateTime EffectiveDateTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The certificationPeriod property
        /// </summary>
        IDateTimeInterval CertificationPeriod
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ErpPerson property
        /// </summary>
        IErpPerson ErpPerson
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Crafts property
        /// </summary>
        IOrderedSetExpression<ICraft> Crafts
        {
            get;
        }
        
        /// <summary>
        /// The QualificationRequirements property
        /// </summary>
        IOrderedSetExpression<IQualificationRequirement> QualificationRequirements
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the Level property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LevelChanging;
        
        /// <summary>
        /// Gets fired when the Level property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LevelChanged;
        
        /// <summary>
        /// Gets fired before the EffectiveDateTime property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EffectiveDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the EffectiveDateTime property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EffectiveDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the CertificationPeriod property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CertificationPeriodChanging;
        
        /// <summary>
        /// Gets fired when the CertificationPeriod property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CertificationPeriodChanged;
        
        /// <summary>
        /// Gets fired before the ErpPerson property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ErpPersonChanging;
        
        /// <summary>
        /// Gets fired when the ErpPerson property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ErpPersonChanged;
    }
}

