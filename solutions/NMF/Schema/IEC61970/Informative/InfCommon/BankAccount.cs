using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon
{
    
    
    /// <summary>
    /// The default implementation of the BankAccount class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfCommon")]
    [XmlNamespacePrefixAttribute("cimInfCommon")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCommon/BankAcc" +
        "ount")]
    [DebuggerDisplayAttribute("BankAccount {UUID}")]
    public partial class BankAccount : Document, IBankAccount, IModelElement
    {
        
        /// <summary>
        /// The backing field for the AccountNumber property
        /// </summary>
        private string _accountNumber;
        
        private static Lazy<ITypedElement> _accountNumberAttribute = new Lazy<ITypedElement>(RetrieveAccountNumberAttribute);
        
        private static Lazy<ITypedElement> _bankReference = new Lazy<ITypedElement>(RetrieveBankReference);
        
        /// <summary>
        /// The backing field for the Bank property
        /// </summary>
        private IBank _bank;
        
        private static Lazy<ITypedElement> _serviceSupplierReference = new Lazy<ITypedElement>(RetrieveServiceSupplierReference);
        
        /// <summary>
        /// The backing field for the ServiceSupplier property
        /// </summary>
        private IServiceSupplier _serviceSupplier;
        
        private static Lazy<ITypedElement> _bankStatementsReference = new Lazy<ITypedElement>(RetrieveBankStatementsReference);
        
        /// <summary>
        /// The backing field for the BankStatements property
        /// </summary>
        private BankAccountBankStatementsCollection _bankStatements;
        
        private static IClass _classInstance;
        
        public BankAccount()
        {
            this._bankStatements = new BankAccountBankStatementsCollection(this);
            this._bankStatements.CollectionChanging += this.BankStatementsCollectionChanging;
            this._bankStatements.CollectionChanged += this.BankStatementsCollectionChanged;
        }
        
        /// <summary>
        /// The accountNumber property
        /// </summary>
        [XmlElementNameAttribute("accountNumber")]
        [XmlAttributeAttribute(true)]
        public virtual string AccountNumber
        {
            get
            {
                return this._accountNumber;
            }
            set
            {
                if ((this._accountNumber != value))
                {
                    string old = this._accountNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAccountNumberChanging(e);
                    this.OnPropertyChanging("AccountNumber", e, _accountNumberAttribute);
                    this._accountNumber = value;
                    this.OnAccountNumberChanged(e);
                    this.OnPropertyChanged("AccountNumber", e, _accountNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Bank property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("BankAccounts")]
        public virtual IBank Bank
        {
            get
            {
                return this._bank;
            }
            set
            {
                if ((this._bank != value))
                {
                    IBank old = this._bank;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBankChanging(e);
                    this.OnPropertyChanging("Bank", e, _bankReference);
                    this._bank = value;
                    if ((old != null))
                    {
                        old.BankAccounts.Remove(this);
                        old.Deleted -= this.OnResetBank;
                    }
                    if ((value != null))
                    {
                        value.BankAccounts.Add(this);
                        value.Deleted += this.OnResetBank;
                    }
                    this.OnBankChanged(e);
                    this.OnPropertyChanged("Bank", e, _bankReference);
                }
            }
        }
        
        /// <summary>
        /// The ServiceSupplier property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("BankAccounts")]
        public virtual IServiceSupplier ServiceSupplier
        {
            get
            {
                return this._serviceSupplier;
            }
            set
            {
                if ((this._serviceSupplier != value))
                {
                    IServiceSupplier old = this._serviceSupplier;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnServiceSupplierChanging(e);
                    this.OnPropertyChanging("ServiceSupplier", e, _serviceSupplierReference);
                    this._serviceSupplier = value;
                    if ((old != null))
                    {
                        old.BankAccounts.Remove(this);
                        old.Deleted -= this.OnResetServiceSupplier;
                    }
                    if ((value != null))
                    {
                        value.BankAccounts.Add(this);
                        value.Deleted += this.OnResetServiceSupplier;
                    }
                    this.OnServiceSupplierChanged(e);
                    this.OnPropertyChanged("ServiceSupplier", e, _serviceSupplierReference);
                }
            }
        }
        
        /// <summary>
        /// The BankStatements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("BankAccount")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IBankStatement> BankStatements
        {
            get
            {
                return this._bankStatements;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new BankAccountReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCommon/BankAcc" +
                            "ount")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the AccountNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccountNumberChanging;
        
        /// <summary>
        /// Gets fired when the AccountNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccountNumberChanged;
        
        /// <summary>
        /// Gets fired before the Bank property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BankChanging;
        
        /// <summary>
        /// Gets fired when the Bank property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BankChanged;
        
        /// <summary>
        /// Gets fired before the ServiceSupplier property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceSupplierChanging;
        
        /// <summary>
        /// Gets fired when the ServiceSupplier property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceSupplierChanged;
        
        private static ITypedElement RetrieveAccountNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BankAccount.ClassInstance)).Resolve("accountNumber")));
        }
        
        /// <summary>
        /// Raises the AccountNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccountNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccountNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AccountNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccountNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccountNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBankReference()
        {
            return ((ITypedElement)(((ModelElement)(BankAccount.ClassInstance)).Resolve("Bank")));
        }
        
        /// <summary>
        /// Raises the BankChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBankChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BankChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BankChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBankChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BankChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Bank property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBank(object sender, System.EventArgs eventArgs)
        {
            this.Bank = null;
        }
        
        private static ITypedElement RetrieveServiceSupplierReference()
        {
            return ((ITypedElement)(((ModelElement)(BankAccount.ClassInstance)).Resolve("ServiceSupplier")));
        }
        
        /// <summary>
        /// Raises the ServiceSupplierChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceSupplierChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceSupplierChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServiceSupplierChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceSupplierChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceSupplierChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ServiceSupplier property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetServiceSupplier(object sender, System.EventArgs eventArgs)
        {
            this.ServiceSupplier = null;
        }
        
        private static ITypedElement RetrieveBankStatementsReference()
        {
            return ((ITypedElement)(((ModelElement)(BankAccount.ClassInstance)).Resolve("BankStatements")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the BankStatements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BankStatementsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("BankStatements", e, _bankStatementsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the BankStatements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BankStatementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("BankStatements", e, _bankStatementsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ACCOUNTNUMBER"))
            {
                return this.AccountNumber;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "BANKSTATEMENTS"))
            {
                return this._bankStatements;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "BANK"))
            {
                this.Bank = ((IBank)(value));
                return;
            }
            if ((feature == "SERVICESUPPLIER"))
            {
                this.ServiceSupplier = ((IServiceSupplier)(value));
                return;
            }
            if ((feature == "ACCOUNTNUMBER"))
            {
                this.AccountNumber = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Bank"))
            {
                return new BankProxy(this);
            }
            if ((attribute == "ServiceSupplier"))
            {
                return new ServiceSupplierProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Bank"))
            {
                return new BankProxy(this);
            }
            if ((reference == "ServiceSupplier"))
            {
                return new ServiceSupplierProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCommon/BankAcc" +
                        "ount")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the BankAccount class
        /// </summary>
        public class BankAccountReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private BankAccount _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BankAccountReferencedElementsCollection(BankAccount parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Bank != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ServiceSupplier != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.BankStatements.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BankChanged += this.PropagateValueChanges;
                this._parent.ServiceSupplierChanged += this.PropagateValueChanges;
                this._parent.BankStatements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BankChanged -= this.PropagateValueChanges;
                this._parent.ServiceSupplierChanged -= this.PropagateValueChanges;
                this._parent.BankStatements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Bank == null))
                {
                    IBank bankCasted = item.As<IBank>();
                    if ((bankCasted != null))
                    {
                        this._parent.Bank = bankCasted;
                        return;
                    }
                }
                if ((this._parent.ServiceSupplier == null))
                {
                    IServiceSupplier serviceSupplierCasted = item.As<IServiceSupplier>();
                    if ((serviceSupplierCasted != null))
                    {
                        this._parent.ServiceSupplier = serviceSupplierCasted;
                        return;
                    }
                }
                IBankStatement bankStatementsCasted = item.As<IBankStatement>();
                if ((bankStatementsCasted != null))
                {
                    this._parent.BankStatements.Add(bankStatementsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Bank = null;
                this._parent.ServiceSupplier = null;
                this._parent.BankStatements.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Bank))
                {
                    return true;
                }
                if ((item == this._parent.ServiceSupplier))
                {
                    return true;
                }
                if (this._parent.BankStatements.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Bank != null))
                {
                    array[arrayIndex] = this._parent.Bank;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ServiceSupplier != null))
                {
                    array[arrayIndex] = this._parent.ServiceSupplier;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> bankStatementsEnumerator = this._parent.BankStatements.GetEnumerator();
                try
                {
                    for (
                    ; bankStatementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = bankStatementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    bankStatementsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Bank == item))
                {
                    this._parent.Bank = null;
                    return true;
                }
                if ((this._parent.ServiceSupplier == item))
                {
                    this._parent.ServiceSupplier = null;
                    return true;
                }
                IBankStatement bankStatementItem = item.As<IBankStatement>();
                if (((bankStatementItem != null) 
                            && this._parent.BankStatements.Remove(bankStatementItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Bank).Concat(this._parent.ServiceSupplier).Concat(this._parent.BankStatements).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the accountNumber property
        /// </summary>
        private sealed class AccountNumberProxy : ModelPropertyChange<IBankAccount, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AccountNumberProxy(IBankAccount modelElement) : 
                    base(modelElement, "accountNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AccountNumber;
                }
                set
                {
                    this.ModelElement.AccountNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Bank property
        /// </summary>
        private sealed class BankProxy : ModelPropertyChange<IBankAccount, IBank>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BankProxy(IBankAccount modelElement) : 
                    base(modelElement, "Bank")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBank Value
            {
                get
                {
                    return this.ModelElement.Bank;
                }
                set
                {
                    this.ModelElement.Bank = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ServiceSupplier property
        /// </summary>
        private sealed class ServiceSupplierProxy : ModelPropertyChange<IBankAccount, IServiceSupplier>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ServiceSupplierProxy(IBankAccount modelElement) : 
                    base(modelElement, "ServiceSupplier")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IServiceSupplier Value
            {
                get
                {
                    return this.ModelElement.ServiceSupplier;
                }
                set
                {
                    this.ModelElement.ServiceSupplier = value;
                }
            }
        }
    }
}

