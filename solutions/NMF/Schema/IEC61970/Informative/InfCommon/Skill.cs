using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon
{
    
    
    /// <summary>
    /// The default implementation of the Skill class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfCommon")]
    [XmlNamespacePrefixAttribute("cimInfCommon")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCommon/Skill")]
    [DebuggerDisplayAttribute("Skill {UUID}")]
    public partial class Skill : Document, ISkill, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Level property
        /// </summary>
        private Nullable<SkillLevelKind> _level;
        
        private static Lazy<ITypedElement> _levelAttribute = new Lazy<ITypedElement>(RetrieveLevelAttribute);
        
        /// <summary>
        /// The backing field for the EffectiveDateTime property
        /// </summary>
        private DateTime _effectiveDateTime;
        
        private static Lazy<ITypedElement> _effectiveDateTimeAttribute = new Lazy<ITypedElement>(RetrieveEffectiveDateTimeAttribute);
        
        private static Lazy<ITypedElement> _certificationPeriodReference = new Lazy<ITypedElement>(RetrieveCertificationPeriodReference);
        
        /// <summary>
        /// The backing field for the CertificationPeriod property
        /// </summary>
        private IDateTimeInterval _certificationPeriod;
        
        private static Lazy<ITypedElement> _erpPersonReference = new Lazy<ITypedElement>(RetrieveErpPersonReference);
        
        /// <summary>
        /// The backing field for the ErpPerson property
        /// </summary>
        private IErpPerson _erpPerson;
        
        private static Lazy<ITypedElement> _craftsReference = new Lazy<ITypedElement>(RetrieveCraftsReference);
        
        /// <summary>
        /// The backing field for the Crafts property
        /// </summary>
        private SkillCraftsCollection _crafts;
        
        private static Lazy<ITypedElement> _qualificationRequirementsReference = new Lazy<ITypedElement>(RetrieveQualificationRequirementsReference);
        
        /// <summary>
        /// The backing field for the QualificationRequirements property
        /// </summary>
        private SkillQualificationRequirementsCollection _qualificationRequirements;
        
        private static IClass _classInstance;
        
        public Skill()
        {
            this._crafts = new SkillCraftsCollection(this);
            this._crafts.CollectionChanging += this.CraftsCollectionChanging;
            this._crafts.CollectionChanged += this.CraftsCollectionChanged;
            this._qualificationRequirements = new SkillQualificationRequirementsCollection(this);
            this._qualificationRequirements.CollectionChanging += this.QualificationRequirementsCollectionChanging;
            this._qualificationRequirements.CollectionChanged += this.QualificationRequirementsCollectionChanged;
        }
        
        /// <summary>
        /// The level property
        /// </summary>
        [XmlElementNameAttribute("level")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<SkillLevelKind> Level
        {
            get
            {
                return this._level;
            }
            set
            {
                if ((this._level != value))
                {
                    Nullable<SkillLevelKind> old = this._level;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLevelChanging(e);
                    this.OnPropertyChanging("Level", e, _levelAttribute);
                    this._level = value;
                    this.OnLevelChanged(e);
                    this.OnPropertyChanged("Level", e, _levelAttribute);
                }
            }
        }
        
        /// <summary>
        /// The effectiveDateTime property
        /// </summary>
        [XmlElementNameAttribute("effectiveDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime EffectiveDateTime
        {
            get
            {
                return this._effectiveDateTime;
            }
            set
            {
                if ((this._effectiveDateTime != value))
                {
                    DateTime old = this._effectiveDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEffectiveDateTimeChanging(e);
                    this.OnPropertyChanging("EffectiveDateTime", e, _effectiveDateTimeAttribute);
                    this._effectiveDateTime = value;
                    this.OnEffectiveDateTimeChanged(e);
                    this.OnPropertyChanged("EffectiveDateTime", e, _effectiveDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The certificationPeriod property
        /// </summary>
        [XmlElementNameAttribute("certificationPeriod")]
        [XmlAttributeAttribute(true)]
        public virtual IDateTimeInterval CertificationPeriod
        {
            get
            {
                return this._certificationPeriod;
            }
            set
            {
                if ((this._certificationPeriod != value))
                {
                    IDateTimeInterval old = this._certificationPeriod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCertificationPeriodChanging(e);
                    this.OnPropertyChanging("CertificationPeriod", e, _certificationPeriodReference);
                    this._certificationPeriod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetCertificationPeriod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetCertificationPeriod;
                    }
                    this.OnCertificationPeriodChanged(e);
                    this.OnPropertyChanged("CertificationPeriod", e, _certificationPeriodReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpPerson property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Skills")]
        public virtual IErpPerson ErpPerson
        {
            get
            {
                return this._erpPerson;
            }
            set
            {
                if ((this._erpPerson != value))
                {
                    IErpPerson old = this._erpPerson;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpPersonChanging(e);
                    this.OnPropertyChanging("ErpPerson", e, _erpPersonReference);
                    this._erpPerson = value;
                    if ((old != null))
                    {
                        old.Skills.Remove(this);
                        old.Deleted -= this.OnResetErpPerson;
                    }
                    if ((value != null))
                    {
                        value.Skills.Add(this);
                        value.Deleted += this.OnResetErpPerson;
                    }
                    this.OnErpPersonChanged(e);
                    this.OnPropertyChanged("ErpPerson", e, _erpPersonReference);
                }
            }
        }
        
        /// <summary>
        /// The Crafts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Skills")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICraft> Crafts
        {
            get
            {
                return this._crafts;
            }
        }
        
        /// <summary>
        /// The QualificationRequirements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Skills")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IQualificationRequirement> QualificationRequirements
        {
            get
            {
                return this._qualificationRequirements;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SkillReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCommon/Skill")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Level property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LevelChanging;
        
        /// <summary>
        /// Gets fired when the Level property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LevelChanged;
        
        /// <summary>
        /// Gets fired before the EffectiveDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EffectiveDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the EffectiveDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EffectiveDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the CertificationPeriod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CertificationPeriodChanging;
        
        /// <summary>
        /// Gets fired when the CertificationPeriod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CertificationPeriodChanged;
        
        /// <summary>
        /// Gets fired before the ErpPerson property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpPersonChanging;
        
        /// <summary>
        /// Gets fired when the ErpPerson property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpPersonChanged;
        
        private static ITypedElement RetrieveLevelAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Skill.ClassInstance)).Resolve("level")));
        }
        
        /// <summary>
        /// Raises the LevelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLevelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LevelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LevelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLevelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LevelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEffectiveDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Skill.ClassInstance)).Resolve("effectiveDateTime")));
        }
        
        /// <summary>
        /// Raises the EffectiveDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEffectiveDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EffectiveDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EffectiveDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEffectiveDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EffectiveDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCertificationPeriodReference()
        {
            return ((ITypedElement)(((ModelElement)(Skill.ClassInstance)).Resolve("certificationPeriod")));
        }
        
        /// <summary>
        /// Raises the CertificationPeriodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCertificationPeriodChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CertificationPeriodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CertificationPeriodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCertificationPeriodChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CertificationPeriodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CertificationPeriod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCertificationPeriod(object sender, System.EventArgs eventArgs)
        {
            this.CertificationPeriod = null;
        }
        
        private static ITypedElement RetrieveErpPersonReference()
        {
            return ((ITypedElement)(((ModelElement)(Skill.ClassInstance)).Resolve("ErpPerson")));
        }
        
        /// <summary>
        /// Raises the ErpPersonChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpPersonChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpPersonChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpPersonChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpPersonChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpPersonChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpPerson property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpPerson(object sender, System.EventArgs eventArgs)
        {
            this.ErpPerson = null;
        }
        
        private static ITypedElement RetrieveCraftsReference()
        {
            return ((ITypedElement)(((ModelElement)(Skill.ClassInstance)).Resolve("Crafts")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Crafts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CraftsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Crafts", e, _craftsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Crafts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CraftsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Crafts", e, _craftsReference);
        }
        
        private static ITypedElement RetrieveQualificationRequirementsReference()
        {
            return ((ITypedElement)(((ModelElement)(Skill.ClassInstance)).Resolve("QualificationRequirements")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the QualificationRequirements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void QualificationRequirementsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("QualificationRequirements", e, _qualificationRequirementsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the QualificationRequirements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void QualificationRequirementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("QualificationRequirements", e, _qualificationRequirementsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "LEVEL"))
            {
                return this.Level;
            }
            if ((attribute == "EFFECTIVEDATETIME"))
            {
                return this.EffectiveDateTime;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CRAFTS"))
            {
                return this._crafts;
            }
            if ((feature == "QUALIFICATIONREQUIREMENTS"))
            {
                return this._qualificationRequirements;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CERTIFICATIONPERIOD"))
            {
                this.CertificationPeriod = ((IDateTimeInterval)(value));
                return;
            }
            if ((feature == "ERPPERSON"))
            {
                this.ErpPerson = ((IErpPerson)(value));
                return;
            }
            if ((feature == "LEVEL"))
            {
                this.Level = ((SkillLevelKind)(value));
                return;
            }
            if ((feature == "EFFECTIVEDATETIME"))
            {
                this.EffectiveDateTime = ((DateTime)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CertificationPeriod"))
            {
                return new CertificationPeriodProxy(this);
            }
            if ((attribute == "ErpPerson"))
            {
                return new ErpPersonProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CertificationPeriod"))
            {
                return new CertificationPeriodProxy(this);
            }
            if ((reference == "ErpPerson"))
            {
                return new ErpPersonProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCommon/Skill")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Skill class
        /// </summary>
        public class SkillReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Skill _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SkillReferencedElementsCollection(Skill parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.CertificationPeriod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpPerson != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Crafts.Count);
                    count = (count + this._parent.QualificationRequirements.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CertificationPeriodChanged += this.PropagateValueChanges;
                this._parent.ErpPersonChanged += this.PropagateValueChanges;
                this._parent.Crafts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.QualificationRequirements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CertificationPeriodChanged -= this.PropagateValueChanges;
                this._parent.ErpPersonChanged -= this.PropagateValueChanges;
                this._parent.Crafts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.QualificationRequirements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.CertificationPeriod == null))
                {
                    IDateTimeInterval certificationPeriodCasted = item.As<IDateTimeInterval>();
                    if ((certificationPeriodCasted != null))
                    {
                        this._parent.CertificationPeriod = certificationPeriodCasted;
                        return;
                    }
                }
                if ((this._parent.ErpPerson == null))
                {
                    IErpPerson erpPersonCasted = item.As<IErpPerson>();
                    if ((erpPersonCasted != null))
                    {
                        this._parent.ErpPerson = erpPersonCasted;
                        return;
                    }
                }
                ICraft craftsCasted = item.As<ICraft>();
                if ((craftsCasted != null))
                {
                    this._parent.Crafts.Add(craftsCasted);
                }
                IQualificationRequirement qualificationRequirementsCasted = item.As<IQualificationRequirement>();
                if ((qualificationRequirementsCasted != null))
                {
                    this._parent.QualificationRequirements.Add(qualificationRequirementsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CertificationPeriod = null;
                this._parent.ErpPerson = null;
                this._parent.Crafts.Clear();
                this._parent.QualificationRequirements.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.CertificationPeriod))
                {
                    return true;
                }
                if ((item == this._parent.ErpPerson))
                {
                    return true;
                }
                if (this._parent.Crafts.Contains(item))
                {
                    return true;
                }
                if (this._parent.QualificationRequirements.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.CertificationPeriod != null))
                {
                    array[arrayIndex] = this._parent.CertificationPeriod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpPerson != null))
                {
                    array[arrayIndex] = this._parent.ErpPerson;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> craftsEnumerator = this._parent.Crafts.GetEnumerator();
                try
                {
                    for (
                    ; craftsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = craftsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    craftsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> qualificationRequirementsEnumerator = this._parent.QualificationRequirements.GetEnumerator();
                try
                {
                    for (
                    ; qualificationRequirementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = qualificationRequirementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    qualificationRequirementsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.CertificationPeriod == item))
                {
                    this._parent.CertificationPeriod = null;
                    return true;
                }
                if ((this._parent.ErpPerson == item))
                {
                    this._parent.ErpPerson = null;
                    return true;
                }
                ICraft craftItem = item.As<ICraft>();
                if (((craftItem != null) 
                            && this._parent.Crafts.Remove(craftItem)))
                {
                    return true;
                }
                IQualificationRequirement qualificationRequirementItem = item.As<IQualificationRequirement>();
                if (((qualificationRequirementItem != null) 
                            && this._parent.QualificationRequirements.Remove(qualificationRequirementItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CertificationPeriod).Concat(this._parent.ErpPerson).Concat(this._parent.Crafts).Concat(this._parent.QualificationRequirements).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the level property
        /// </summary>
        private sealed class LevelProxy : ModelPropertyChange<ISkill, Nullable<SkillLevelKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LevelProxy(ISkill modelElement) : 
                    base(modelElement, "level")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<SkillLevelKind> Value
            {
                get
                {
                    return this.ModelElement.Level;
                }
                set
                {
                    this.ModelElement.Level = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the effectiveDateTime property
        /// </summary>
        private sealed class EffectiveDateTimeProxy : ModelPropertyChange<ISkill, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EffectiveDateTimeProxy(ISkill modelElement) : 
                    base(modelElement, "effectiveDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.EffectiveDateTime;
                }
                set
                {
                    this.ModelElement.EffectiveDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the certificationPeriod property
        /// </summary>
        private sealed class CertificationPeriodProxy : ModelPropertyChange<ISkill, IDateTimeInterval>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CertificationPeriodProxy(ISkill modelElement) : 
                    base(modelElement, "certificationPeriod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDateTimeInterval Value
            {
                get
                {
                    return this.ModelElement.CertificationPeriod;
                }
                set
                {
                    this.ModelElement.CertificationPeriod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpPerson property
        /// </summary>
        private sealed class ErpPersonProxy : ModelPropertyChange<ISkill, IErpPerson>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpPersonProxy(ISkill modelElement) : 
                    base(modelElement, "ErpPerson")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpPerson Value
            {
                get
                {
                    return this.ModelElement.ErpPerson;
                }
                set
                {
                    this.ModelElement.ErpPerson = value;
                }
            }
        }
    }
}

