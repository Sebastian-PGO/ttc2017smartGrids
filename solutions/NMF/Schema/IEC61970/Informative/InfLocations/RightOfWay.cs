using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations
{
    
    
    /// <summary>
    /// The default implementation of the RightOfWay class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfLocations")]
    [XmlNamespacePrefixAttribute("cimInfLocations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfLocations/Righ" +
        "tOfWay")]
    [DebuggerDisplayAttribute("RightOfWay {UUID}")]
    public partial class RightOfWay : Agreement, IRightOfWay, IModelElement
    {
        
        /// <summary>
        /// The backing field for the PropertyData property
        /// </summary>
        private string _propertyData;
        
        private static Lazy<ITypedElement> _propertyDataAttribute = new Lazy<ITypedElement>(RetrievePropertyDataAttribute);
        
        private static Lazy<ITypedElement> _landPropertiesReference = new Lazy<ITypedElement>(RetrieveLandPropertiesReference);
        
        /// <summary>
        /// The backing field for the LandProperties property
        /// </summary>
        private RightOfWayLandPropertiesCollection _landProperties;
        
        private static IClass _classInstance;
        
        public RightOfWay()
        {
            this._landProperties = new RightOfWayLandPropertiesCollection(this);
            this._landProperties.CollectionChanging += this.LandPropertiesCollectionChanging;
            this._landProperties.CollectionChanged += this.LandPropertiesCollectionChanged;
        }
        
        /// <summary>
        /// The propertyData property
        /// </summary>
        [XmlElementNameAttribute("propertyData")]
        [XmlAttributeAttribute(true)]
        public virtual string PropertyData
        {
            get
            {
                return this._propertyData;
            }
            set
            {
                if ((this._propertyData != value))
                {
                    string old = this._propertyData;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyDataChanging(e);
                    this.OnPropertyChanging("PropertyData", e, _propertyDataAttribute);
                    this._propertyData = value;
                    this.OnPropertyDataChanged(e);
                    this.OnPropertyChanged("PropertyData", e, _propertyDataAttribute);
                }
            }
        }
        
        /// <summary>
        /// The LandProperties property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("RightOfWays")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILandProperty> LandProperties
        {
            get
            {
                return this._landProperties;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RightOfWayReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfLocations/Righ" +
                            "tOfWay")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PropertyData property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PropertyDataChanging;
        
        /// <summary>
        /// Gets fired when the PropertyData property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PropertyDataChanged;
        
        private static ITypedElement RetrievePropertyDataAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RightOfWay.ClassInstance)).Resolve("propertyData")));
        }
        
        /// <summary>
        /// Raises the PropertyDataChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPropertyDataChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PropertyDataChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PropertyDataChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPropertyDataChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PropertyDataChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLandPropertiesReference()
        {
            return ((ITypedElement)(((ModelElement)(RightOfWay.ClassInstance)).Resolve("LandProperties")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the LandProperties property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LandPropertiesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("LandProperties", e, _landPropertiesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the LandProperties property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LandPropertiesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("LandProperties", e, _landPropertiesReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PROPERTYDATA"))
            {
                return this.PropertyData;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "LANDPROPERTIES"))
            {
                return this._landProperties;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PROPERTYDATA"))
            {
                this.PropertyData = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfLocations/Righ" +
                        "tOfWay")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RightOfWay class
        /// </summary>
        public class RightOfWayReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RightOfWay _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RightOfWayReferencedElementsCollection(RightOfWay parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.LandProperties.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.LandProperties.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.LandProperties.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ILandProperty landPropertiesCasted = item.As<ILandProperty>();
                if ((landPropertiesCasted != null))
                {
                    this._parent.LandProperties.Add(landPropertiesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.LandProperties.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.LandProperties.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> landPropertiesEnumerator = this._parent.LandProperties.GetEnumerator();
                try
                {
                    for (
                    ; landPropertiesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = landPropertiesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    landPropertiesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ILandProperty landPropertyItem = item.As<ILandProperty>();
                if (((landPropertyItem != null) 
                            && this._parent.LandProperties.Remove(landPropertyItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.LandProperties).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the propertyData property
        /// </summary>
        private sealed class PropertyDataProxy : ModelPropertyChange<IRightOfWay, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PropertyDataProxy(IRightOfWay modelElement) : 
                    base(modelElement, "propertyData")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.PropertyData;
                }
                set
                {
                    this.ModelElement.PropertyData = value;
                }
            }
        }
    }
}

