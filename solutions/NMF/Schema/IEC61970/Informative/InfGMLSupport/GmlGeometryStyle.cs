using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport
{
    
    
    /// <summary>
    /// The default implementation of the GmlGeometryStyle class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfGMLSupport")]
    [XmlNamespacePrefixAttribute("cimInfGMLSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
        "GeometryStyle")]
    [DebuggerDisplayAttribute("GmlGeometryStyle {UUID}")]
    public partial class GmlGeometryStyle : IdentifiedObject, IGmlGeometryStyle, IModelElement
    {
        
        /// <summary>
        /// The backing field for the GeometryType property
        /// </summary>
        private string _geometryType;
        
        private static Lazy<ITypedElement> _geometryTypeAttribute = new Lazy<ITypedElement>(RetrieveGeometryTypeAttribute);
        
        /// <summary>
        /// The backing field for the Symbol property
        /// </summary>
        private string _symbol;
        
        private static Lazy<ITypedElement> _symbolAttribute = new Lazy<ITypedElement>(RetrieveSymbolAttribute);
        
        /// <summary>
        /// The backing field for the GeometryProperty property
        /// </summary>
        private string _geometryProperty;
        
        private static Lazy<ITypedElement> _geometryPropertyAttribute = new Lazy<ITypedElement>(RetrieveGeometryPropertyAttribute);
        
        private static Lazy<ITypedElement> _gmlLabelStyleReference = new Lazy<ITypedElement>(RetrieveGmlLabelStyleReference);
        
        /// <summary>
        /// The backing field for the GmlLabelStyle property
        /// </summary>
        private IGmlLabelStyle _gmlLabelStyle;
        
        private static Lazy<ITypedElement> _gmlFeatureStyleReference = new Lazy<ITypedElement>(RetrieveGmlFeatureStyleReference);
        
        /// <summary>
        /// The backing field for the GmlFeatureStyle property
        /// </summary>
        private IGmlFeatureStyle _gmlFeatureStyle;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The geometryType property
        /// </summary>
        [XmlElementNameAttribute("geometryType")]
        [XmlAttributeAttribute(true)]
        public virtual string GeometryType
        {
            get
            {
                return this._geometryType;
            }
            set
            {
                if ((this._geometryType != value))
                {
                    string old = this._geometryType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGeometryTypeChanging(e);
                    this.OnPropertyChanging("GeometryType", e, _geometryTypeAttribute);
                    this._geometryType = value;
                    this.OnGeometryTypeChanged(e);
                    this.OnPropertyChanged("GeometryType", e, _geometryTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The symbol property
        /// </summary>
        [XmlElementNameAttribute("symbol")]
        [XmlAttributeAttribute(true)]
        public virtual string Symbol
        {
            get
            {
                return this._symbol;
            }
            set
            {
                if ((this._symbol != value))
                {
                    string old = this._symbol;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSymbolChanging(e);
                    this.OnPropertyChanging("Symbol", e, _symbolAttribute);
                    this._symbol = value;
                    this.OnSymbolChanged(e);
                    this.OnPropertyChanged("Symbol", e, _symbolAttribute);
                }
            }
        }
        
        /// <summary>
        /// The geometryProperty property
        /// </summary>
        [XmlElementNameAttribute("geometryProperty")]
        [XmlAttributeAttribute(true)]
        public virtual string GeometryProperty
        {
            get
            {
                return this._geometryProperty;
            }
            set
            {
                if ((this._geometryProperty != value))
                {
                    string old = this._geometryProperty;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGeometryPropertyChanging(e);
                    this.OnPropertyChanging("GeometryProperty", e, _geometryPropertyAttribute);
                    this._geometryProperty = value;
                    this.OnGeometryPropertyChanged(e);
                    this.OnPropertyChanged("GeometryProperty", e, _geometryPropertyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The GmlLabelStyle property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlGeometryStyles")]
        public virtual IGmlLabelStyle GmlLabelStyle
        {
            get
            {
                return this._gmlLabelStyle;
            }
            set
            {
                if ((this._gmlLabelStyle != value))
                {
                    IGmlLabelStyle old = this._gmlLabelStyle;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGmlLabelStyleChanging(e);
                    this.OnPropertyChanging("GmlLabelStyle", e, _gmlLabelStyleReference);
                    this._gmlLabelStyle = value;
                    if ((old != null))
                    {
                        old.GmlGeometryStyles.Remove(this);
                        old.Deleted -= this.OnResetGmlLabelStyle;
                    }
                    if ((value != null))
                    {
                        value.GmlGeometryStyles.Add(this);
                        value.Deleted += this.OnResetGmlLabelStyle;
                    }
                    this.OnGmlLabelStyleChanged(e);
                    this.OnPropertyChanged("GmlLabelStyle", e, _gmlLabelStyleReference);
                }
            }
        }
        
        /// <summary>
        /// The GmlFeatureStyle property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlGeometryStyles")]
        public virtual IGmlFeatureStyle GmlFeatureStyle
        {
            get
            {
                return this._gmlFeatureStyle;
            }
            set
            {
                if ((this._gmlFeatureStyle != value))
                {
                    IGmlFeatureStyle old = this._gmlFeatureStyle;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGmlFeatureStyleChanging(e);
                    this.OnPropertyChanging("GmlFeatureStyle", e, _gmlFeatureStyleReference);
                    this._gmlFeatureStyle = value;
                    if ((old != null))
                    {
                        old.GmlGeometryStyles.Remove(this);
                        old.Deleted -= this.OnResetGmlFeatureStyle;
                    }
                    if ((value != null))
                    {
                        value.GmlGeometryStyles.Add(this);
                        value.Deleted += this.OnResetGmlFeatureStyle;
                    }
                    this.OnGmlFeatureStyleChanged(e);
                    this.OnPropertyChanged("GmlFeatureStyle", e, _gmlFeatureStyleReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new GmlGeometryStyleReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
                            "GeometryStyle")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the GeometryType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GeometryTypeChanging;
        
        /// <summary>
        /// Gets fired when the GeometryType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GeometryTypeChanged;
        
        /// <summary>
        /// Gets fired before the Symbol property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SymbolChanging;
        
        /// <summary>
        /// Gets fired when the Symbol property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SymbolChanged;
        
        /// <summary>
        /// Gets fired before the GeometryProperty property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GeometryPropertyChanging;
        
        /// <summary>
        /// Gets fired when the GeometryProperty property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GeometryPropertyChanged;
        
        /// <summary>
        /// Gets fired before the GmlLabelStyle property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlLabelStyleChanging;
        
        /// <summary>
        /// Gets fired when the GmlLabelStyle property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlLabelStyleChanged;
        
        /// <summary>
        /// Gets fired before the GmlFeatureStyle property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlFeatureStyleChanging;
        
        /// <summary>
        /// Gets fired when the GmlFeatureStyle property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlFeatureStyleChanged;
        
        private static ITypedElement RetrieveGeometryTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlGeometryStyle.ClassInstance)).Resolve("geometryType")));
        }
        
        /// <summary>
        /// Raises the GeometryTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGeometryTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GeometryTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GeometryTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGeometryTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GeometryTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSymbolAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlGeometryStyle.ClassInstance)).Resolve("symbol")));
        }
        
        /// <summary>
        /// Raises the SymbolChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSymbolChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SymbolChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SymbolChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSymbolChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SymbolChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGeometryPropertyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlGeometryStyle.ClassInstance)).Resolve("geometryProperty")));
        }
        
        /// <summary>
        /// Raises the GeometryPropertyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGeometryPropertyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GeometryPropertyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GeometryPropertyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGeometryPropertyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GeometryPropertyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGmlLabelStyleReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlGeometryStyle.ClassInstance)).Resolve("GmlLabelStyle")));
        }
        
        /// <summary>
        /// Raises the GmlLabelStyleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlLabelStyleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlLabelStyleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GmlLabelStyleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlLabelStyleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlLabelStyleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GmlLabelStyle property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGmlLabelStyle(object sender, System.EventArgs eventArgs)
        {
            this.GmlLabelStyle = null;
        }
        
        private static ITypedElement RetrieveGmlFeatureStyleReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlGeometryStyle.ClassInstance)).Resolve("GmlFeatureStyle")));
        }
        
        /// <summary>
        /// Raises the GmlFeatureStyleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlFeatureStyleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlFeatureStyleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GmlFeatureStyleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlFeatureStyleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlFeatureStyleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GmlFeatureStyle property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGmlFeatureStyle(object sender, System.EventArgs eventArgs)
        {
            this.GmlFeatureStyle = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "GEOMETRYTYPE"))
            {
                return this.GeometryType;
            }
            if ((attribute == "SYMBOL"))
            {
                return this.Symbol;
            }
            if ((attribute == "GEOMETRYPROPERTY"))
            {
                return this.GeometryProperty;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "GMLLABELSTYLE"))
            {
                this.GmlLabelStyle = ((IGmlLabelStyle)(value));
                return;
            }
            if ((feature == "GMLFEATURESTYLE"))
            {
                this.GmlFeatureStyle = ((IGmlFeatureStyle)(value));
                return;
            }
            if ((feature == "GEOMETRYTYPE"))
            {
                this.GeometryType = ((string)(value));
                return;
            }
            if ((feature == "SYMBOL"))
            {
                this.Symbol = ((string)(value));
                return;
            }
            if ((feature == "GEOMETRYPROPERTY"))
            {
                this.GeometryProperty = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "GmlLabelStyle"))
            {
                return new GmlLabelStyleProxy(this);
            }
            if ((attribute == "GmlFeatureStyle"))
            {
                return new GmlFeatureStyleProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "GmlLabelStyle"))
            {
                return new GmlLabelStyleProxy(this);
            }
            if ((reference == "GmlFeatureStyle"))
            {
                return new GmlFeatureStyleProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
                        "GeometryStyle")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the GmlGeometryStyle class
        /// </summary>
        public class GmlGeometryStyleReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private GmlGeometryStyle _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public GmlGeometryStyleReferencedElementsCollection(GmlGeometryStyle parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.GmlLabelStyle != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.GmlFeatureStyle != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.GmlLabelStyleChanged += this.PropagateValueChanges;
                this._parent.GmlFeatureStyleChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.GmlLabelStyleChanged -= this.PropagateValueChanges;
                this._parent.GmlFeatureStyleChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.GmlLabelStyle == null))
                {
                    IGmlLabelStyle gmlLabelStyleCasted = item.As<IGmlLabelStyle>();
                    if ((gmlLabelStyleCasted != null))
                    {
                        this._parent.GmlLabelStyle = gmlLabelStyleCasted;
                        return;
                    }
                }
                if ((this._parent.GmlFeatureStyle == null))
                {
                    IGmlFeatureStyle gmlFeatureStyleCasted = item.As<IGmlFeatureStyle>();
                    if ((gmlFeatureStyleCasted != null))
                    {
                        this._parent.GmlFeatureStyle = gmlFeatureStyleCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.GmlLabelStyle = null;
                this._parent.GmlFeatureStyle = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.GmlLabelStyle))
                {
                    return true;
                }
                if ((item == this._parent.GmlFeatureStyle))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.GmlLabelStyle != null))
                {
                    array[arrayIndex] = this._parent.GmlLabelStyle;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.GmlFeatureStyle != null))
                {
                    array[arrayIndex] = this._parent.GmlFeatureStyle;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.GmlLabelStyle == item))
                {
                    this._parent.GmlLabelStyle = null;
                    return true;
                }
                if ((this._parent.GmlFeatureStyle == item))
                {
                    this._parent.GmlFeatureStyle = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.GmlLabelStyle).Concat(this._parent.GmlFeatureStyle).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the geometryType property
        /// </summary>
        private sealed class GeometryTypeProxy : ModelPropertyChange<IGmlGeometryStyle, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GeometryTypeProxy(IGmlGeometryStyle modelElement) : 
                    base(modelElement, "geometryType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.GeometryType;
                }
                set
                {
                    this.ModelElement.GeometryType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the symbol property
        /// </summary>
        private sealed class SymbolProxy : ModelPropertyChange<IGmlGeometryStyle, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SymbolProxy(IGmlGeometryStyle modelElement) : 
                    base(modelElement, "symbol")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Symbol;
                }
                set
                {
                    this.ModelElement.Symbol = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the geometryProperty property
        /// </summary>
        private sealed class GeometryPropertyProxy : ModelPropertyChange<IGmlGeometryStyle, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GeometryPropertyProxy(IGmlGeometryStyle modelElement) : 
                    base(modelElement, "geometryProperty")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.GeometryProperty;
                }
                set
                {
                    this.ModelElement.GeometryProperty = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GmlLabelStyle property
        /// </summary>
        private sealed class GmlLabelStyleProxy : ModelPropertyChange<IGmlGeometryStyle, IGmlLabelStyle>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GmlLabelStyleProxy(IGmlGeometryStyle modelElement) : 
                    base(modelElement, "GmlLabelStyle")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGmlLabelStyle Value
            {
                get
                {
                    return this.ModelElement.GmlLabelStyle;
                }
                set
                {
                    this.ModelElement.GmlLabelStyle = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GmlFeatureStyle property
        /// </summary>
        private sealed class GmlFeatureStyleProxy : ModelPropertyChange<IGmlGeometryStyle, IGmlFeatureStyle>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GmlFeatureStyleProxy(IGmlGeometryStyle modelElement) : 
                    base(modelElement, "GmlFeatureStyle")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGmlFeatureStyle Value
            {
                get
                {
                    return this.ModelElement.GmlFeatureStyle;
                }
                set
                {
                    this.ModelElement.GmlFeatureStyle = value;
                }
            }
        }
    }
}

