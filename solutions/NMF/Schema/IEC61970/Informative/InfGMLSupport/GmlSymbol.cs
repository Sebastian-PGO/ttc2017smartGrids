using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport
{
    
    
    /// <summary>
    /// The default implementation of the GmlSymbol class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfGMLSupport")]
    [XmlNamespacePrefixAttribute("cimInfGMLSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
        "Symbol")]
    [DebuggerDisplayAttribute("GmlSymbol {UUID}")]
    public partial class GmlSymbol : IdentifiedObject, IGmlSymbol, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Level property
        /// </summary>
        private string _level;
        
        private static Lazy<ITypedElement> _levelAttribute = new Lazy<ITypedElement>(RetrieveLevelAttribute);
        
        /// <summary>
        /// The backing field for the Type property
        /// </summary>
        private string _type;
        
        private static Lazy<ITypedElement> _typeAttribute = new Lazy<ITypedElement>(RetrieveTypeAttribute);
        
        /// <summary>
        /// The backing field for the Version property
        /// </summary>
        private string _version;
        
        private static Lazy<ITypedElement> _versionAttribute = new Lazy<ITypedElement>(RetrieveVersionAttribute);
        
        private static Lazy<ITypedElement> _gmlFeatureStylesReference = new Lazy<ITypedElement>(RetrieveGmlFeatureStylesReference);
        
        /// <summary>
        /// The backing field for the GmlFeatureStyles property
        /// </summary>
        private GmlSymbolGmlFeatureStylesCollection _gmlFeatureStyles;
        
        private static Lazy<ITypedElement> _gmlBaseSymbolReference = new Lazy<ITypedElement>(RetrieveGmlBaseSymbolReference);
        
        /// <summary>
        /// The backing field for the GmlBaseSymbol property
        /// </summary>
        private IGmlBaseSymbol _gmlBaseSymbol;
        
        private static IClass _classInstance;
        
        public GmlSymbol()
        {
            this._gmlFeatureStyles = new GmlSymbolGmlFeatureStylesCollection(this);
            this._gmlFeatureStyles.CollectionChanging += this.GmlFeatureStylesCollectionChanging;
            this._gmlFeatureStyles.CollectionChanged += this.GmlFeatureStylesCollectionChanged;
        }
        
        /// <summary>
        /// The level property
        /// </summary>
        [XmlElementNameAttribute("level")]
        [XmlAttributeAttribute(true)]
        public virtual string Level
        {
            get
            {
                return this._level;
            }
            set
            {
                if ((this._level != value))
                {
                    string old = this._level;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLevelChanging(e);
                    this.OnPropertyChanging("Level", e, _levelAttribute);
                    this._level = value;
                    this.OnLevelChanged(e);
                    this.OnPropertyChanged("Level", e, _levelAttribute);
                }
            }
        }
        
        /// <summary>
        /// The type property
        /// </summary>
        [XmlElementNameAttribute("type")]
        [XmlAttributeAttribute(true)]
        public virtual string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    string old = this._type;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeChanging(e);
                    this.OnPropertyChanging("Type", e, _typeAttribute);
                    this._type = value;
                    this.OnTypeChanged(e);
                    this.OnPropertyChanged("Type", e, _typeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The version property
        /// </summary>
        [XmlElementNameAttribute("version")]
        [XmlAttributeAttribute(true)]
        public virtual string Version
        {
            get
            {
                return this._version;
            }
            set
            {
                if ((this._version != value))
                {
                    string old = this._version;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVersionChanging(e);
                    this.OnPropertyChanging("Version", e, _versionAttribute);
                    this._version = value;
                    this.OnVersionChanged(e);
                    this.OnPropertyChanged("Version", e, _versionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The GmlFeatureStyles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlSymbols")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGmlFeatureStyle> GmlFeatureStyles
        {
            get
            {
                return this._gmlFeatureStyles;
            }
        }
        
        /// <summary>
        /// The GmlBaseSymbol property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlSymbols")]
        public virtual IGmlBaseSymbol GmlBaseSymbol
        {
            get
            {
                return this._gmlBaseSymbol;
            }
            set
            {
                if ((this._gmlBaseSymbol != value))
                {
                    IGmlBaseSymbol old = this._gmlBaseSymbol;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGmlBaseSymbolChanging(e);
                    this.OnPropertyChanging("GmlBaseSymbol", e, _gmlBaseSymbolReference);
                    this._gmlBaseSymbol = value;
                    if ((old != null))
                    {
                        old.GmlSymbols.Remove(this);
                        old.Deleted -= this.OnResetGmlBaseSymbol;
                    }
                    if ((value != null))
                    {
                        value.GmlSymbols.Add(this);
                        value.Deleted += this.OnResetGmlBaseSymbol;
                    }
                    this.OnGmlBaseSymbolChanged(e);
                    this.OnPropertyChanged("GmlBaseSymbol", e, _gmlBaseSymbolReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new GmlSymbolReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
                            "Symbol")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Level property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LevelChanging;
        
        /// <summary>
        /// Gets fired when the Level property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LevelChanged;
        
        /// <summary>
        /// Gets fired before the Type property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanging;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanged;
        
        /// <summary>
        /// Gets fired before the Version property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VersionChanging;
        
        /// <summary>
        /// Gets fired when the Version property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VersionChanged;
        
        /// <summary>
        /// Gets fired before the GmlBaseSymbol property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlBaseSymbolChanging;
        
        /// <summary>
        /// Gets fired when the GmlBaseSymbol property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlBaseSymbolChanged;
        
        private static ITypedElement RetrieveLevelAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlSymbol.ClassInstance)).Resolve("level")));
        }
        
        /// <summary>
        /// Raises the LevelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLevelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LevelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LevelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLevelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LevelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlSymbol.ClassInstance)).Resolve("type")));
        }
        
        /// <summary>
        /// Raises the TypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVersionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlSymbol.ClassInstance)).Resolve("version")));
        }
        
        /// <summary>
        /// Raises the VersionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVersionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VersionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VersionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVersionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VersionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGmlFeatureStylesReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlSymbol.ClassInstance)).Resolve("GmlFeatureStyles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GmlFeatureStyles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlFeatureStylesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("GmlFeatureStyles", e, _gmlFeatureStylesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GmlFeatureStyles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlFeatureStylesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GmlFeatureStyles", e, _gmlFeatureStylesReference);
        }
        
        private static ITypedElement RetrieveGmlBaseSymbolReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlSymbol.ClassInstance)).Resolve("GmlBaseSymbol")));
        }
        
        /// <summary>
        /// Raises the GmlBaseSymbolChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlBaseSymbolChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlBaseSymbolChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GmlBaseSymbolChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlBaseSymbolChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlBaseSymbolChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GmlBaseSymbol property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGmlBaseSymbol(object sender, System.EventArgs eventArgs)
        {
            this.GmlBaseSymbol = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "LEVEL"))
            {
                return this.Level;
            }
            if ((attribute == "TYPE"))
            {
                return this.Type;
            }
            if ((attribute == "VERSION"))
            {
                return this.Version;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "GMLFEATURESTYLES"))
            {
                return this._gmlFeatureStyles;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "GMLBASESYMBOL"))
            {
                this.GmlBaseSymbol = ((IGmlBaseSymbol)(value));
                return;
            }
            if ((feature == "LEVEL"))
            {
                this.Level = ((string)(value));
                return;
            }
            if ((feature == "TYPE"))
            {
                this.Type = ((string)(value));
                return;
            }
            if ((feature == "VERSION"))
            {
                this.Version = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "GmlBaseSymbol"))
            {
                return new GmlBaseSymbolProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "GmlBaseSymbol"))
            {
                return new GmlBaseSymbolProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
                        "Symbol")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the GmlSymbol class
        /// </summary>
        public class GmlSymbolReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private GmlSymbol _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public GmlSymbolReferencedElementsCollection(GmlSymbol parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.GmlFeatureStyles.Count);
                    if ((this._parent.GmlBaseSymbol != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.GmlFeatureStyles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.GmlBaseSymbolChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.GmlFeatureStyles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.GmlBaseSymbolChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IGmlFeatureStyle gmlFeatureStylesCasted = item.As<IGmlFeatureStyle>();
                if ((gmlFeatureStylesCasted != null))
                {
                    this._parent.GmlFeatureStyles.Add(gmlFeatureStylesCasted);
                }
                if ((this._parent.GmlBaseSymbol == null))
                {
                    IGmlBaseSymbol gmlBaseSymbolCasted = item.As<IGmlBaseSymbol>();
                    if ((gmlBaseSymbolCasted != null))
                    {
                        this._parent.GmlBaseSymbol = gmlBaseSymbolCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.GmlFeatureStyles.Clear();
                this._parent.GmlBaseSymbol = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.GmlFeatureStyles.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.GmlBaseSymbol))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> gmlFeatureStylesEnumerator = this._parent.GmlFeatureStyles.GetEnumerator();
                try
                {
                    for (
                    ; gmlFeatureStylesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = gmlFeatureStylesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    gmlFeatureStylesEnumerator.Dispose();
                }
                if ((this._parent.GmlBaseSymbol != null))
                {
                    array[arrayIndex] = this._parent.GmlBaseSymbol;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IGmlFeatureStyle gmlFeatureStyleItem = item.As<IGmlFeatureStyle>();
                if (((gmlFeatureStyleItem != null) 
                            && this._parent.GmlFeatureStyles.Remove(gmlFeatureStyleItem)))
                {
                    return true;
                }
                if ((this._parent.GmlBaseSymbol == item))
                {
                    this._parent.GmlBaseSymbol = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.GmlFeatureStyles).Concat(this._parent.GmlBaseSymbol).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the level property
        /// </summary>
        private sealed class LevelProxy : ModelPropertyChange<IGmlSymbol, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LevelProxy(IGmlSymbol modelElement) : 
                    base(modelElement, "level")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Level;
                }
                set
                {
                    this.ModelElement.Level = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<IGmlSymbol, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(IGmlSymbol modelElement) : 
                    base(modelElement, "type")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the version property
        /// </summary>
        private sealed class VersionProxy : ModelPropertyChange<IGmlSymbol, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VersionProxy(IGmlSymbol modelElement) : 
                    base(modelElement, "version")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Version;
                }
                set
                {
                    this.ModelElement.Version = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GmlBaseSymbol property
        /// </summary>
        private sealed class GmlBaseSymbolProxy : ModelPropertyChange<IGmlSymbol, IGmlBaseSymbol>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GmlBaseSymbolProxy(IGmlSymbol modelElement) : 
                    base(modelElement, "GmlBaseSymbol")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGmlBaseSymbol Value
            {
                get
                {
                    return this.ModelElement.GmlBaseSymbol;
                }
                set
                {
                    this.ModelElement.GmlBaseSymbol = value;
                }
            }
        }
    }
}

