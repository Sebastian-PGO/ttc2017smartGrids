using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport
{
    
    
    /// <summary>
    /// The default implementation of the GmlLabelStyle class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfGMLSupport")]
    [XmlNamespacePrefixAttribute("cimInfGMLSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
        "LabelStyle")]
    [DebuggerDisplayAttribute("GmlLabelStyle {UUID}")]
    public partial class GmlLabelStyle : IdentifiedObject, IGmlLabelStyle, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Style property
        /// </summary>
        private string _style;
        
        private static Lazy<ITypedElement> _styleAttribute = new Lazy<ITypedElement>(RetrieveStyleAttribute);
        
        /// <summary>
        /// The backing field for the Transform property
        /// </summary>
        private string _transform;
        
        private static Lazy<ITypedElement> _transformAttribute = new Lazy<ITypedElement>(RetrieveTransformAttribute);
        
        /// <summary>
        /// The backing field for the LabelExpression property
        /// </summary>
        private string _labelExpression;
        
        private static Lazy<ITypedElement> _labelExpressionAttribute = new Lazy<ITypedElement>(RetrieveLabelExpressionAttribute);
        
        private static Lazy<ITypedElement> _gmlFeatureStyleReference = new Lazy<ITypedElement>(RetrieveGmlFeatureStyleReference);
        
        /// <summary>
        /// The backing field for the GmlFeatureStyle property
        /// </summary>
        private IGmlFeatureStyle _gmlFeatureStyle;
        
        private static Lazy<ITypedElement> _gmlGeometryStylesReference = new Lazy<ITypedElement>(RetrieveGmlGeometryStylesReference);
        
        /// <summary>
        /// The backing field for the GmlGeometryStyles property
        /// </summary>
        private GmlLabelStyleGmlGeometryStylesCollection _gmlGeometryStyles;
        
        private static Lazy<ITypedElement> _gmlTopologyStylesReference = new Lazy<ITypedElement>(RetrieveGmlTopologyStylesReference);
        
        /// <summary>
        /// The backing field for the GmlTopologyStyles property
        /// </summary>
        private GmlLabelStyleGmlTopologyStylesCollection _gmlTopologyStyles;
        
        private static IClass _classInstance;
        
        public GmlLabelStyle()
        {
            this._gmlGeometryStyles = new GmlLabelStyleGmlGeometryStylesCollection(this);
            this._gmlGeometryStyles.CollectionChanging += this.GmlGeometryStylesCollectionChanging;
            this._gmlGeometryStyles.CollectionChanged += this.GmlGeometryStylesCollectionChanged;
            this._gmlTopologyStyles = new GmlLabelStyleGmlTopologyStylesCollection(this);
            this._gmlTopologyStyles.CollectionChanging += this.GmlTopologyStylesCollectionChanging;
            this._gmlTopologyStyles.CollectionChanged += this.GmlTopologyStylesCollectionChanged;
        }
        
        /// <summary>
        /// The style property
        /// </summary>
        [XmlElementNameAttribute("style")]
        [XmlAttributeAttribute(true)]
        public virtual string Style
        {
            get
            {
                return this._style;
            }
            set
            {
                if ((this._style != value))
                {
                    string old = this._style;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStyleChanging(e);
                    this.OnPropertyChanging("Style", e, _styleAttribute);
                    this._style = value;
                    this.OnStyleChanged(e);
                    this.OnPropertyChanged("Style", e, _styleAttribute);
                }
            }
        }
        
        /// <summary>
        /// The transform property
        /// </summary>
        [XmlElementNameAttribute("transform")]
        [XmlAttributeAttribute(true)]
        public virtual string Transform
        {
            get
            {
                return this._transform;
            }
            set
            {
                if ((this._transform != value))
                {
                    string old = this._transform;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformChanging(e);
                    this.OnPropertyChanging("Transform", e, _transformAttribute);
                    this._transform = value;
                    this.OnTransformChanged(e);
                    this.OnPropertyChanged("Transform", e, _transformAttribute);
                }
            }
        }
        
        /// <summary>
        /// The labelExpression property
        /// </summary>
        [XmlElementNameAttribute("labelExpression")]
        [XmlAttributeAttribute(true)]
        public virtual string LabelExpression
        {
            get
            {
                return this._labelExpression;
            }
            set
            {
                if ((this._labelExpression != value))
                {
                    string old = this._labelExpression;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLabelExpressionChanging(e);
                    this.OnPropertyChanging("LabelExpression", e, _labelExpressionAttribute);
                    this._labelExpression = value;
                    this.OnLabelExpressionChanged(e);
                    this.OnPropertyChanged("LabelExpression", e, _labelExpressionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The GmlFeatureStyle property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlLabelStyles")]
        public virtual IGmlFeatureStyle GmlFeatureStyle
        {
            get
            {
                return this._gmlFeatureStyle;
            }
            set
            {
                if ((this._gmlFeatureStyle != value))
                {
                    IGmlFeatureStyle old = this._gmlFeatureStyle;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGmlFeatureStyleChanging(e);
                    this.OnPropertyChanging("GmlFeatureStyle", e, _gmlFeatureStyleReference);
                    this._gmlFeatureStyle = value;
                    if ((old != null))
                    {
                        old.GmlLabelStyles.Remove(this);
                        old.Deleted -= this.OnResetGmlFeatureStyle;
                    }
                    if ((value != null))
                    {
                        value.GmlLabelStyles.Add(this);
                        value.Deleted += this.OnResetGmlFeatureStyle;
                    }
                    this.OnGmlFeatureStyleChanged(e);
                    this.OnPropertyChanged("GmlFeatureStyle", e, _gmlFeatureStyleReference);
                }
            }
        }
        
        /// <summary>
        /// The GmlGeometryStyles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlLabelStyle")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGmlGeometryStyle> GmlGeometryStyles
        {
            get
            {
                return this._gmlGeometryStyles;
            }
        }
        
        /// <summary>
        /// The GmlTopologyStyles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlLableStyle")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGmlTopologyStyle> GmlTopologyStyles
        {
            get
            {
                return this._gmlTopologyStyles;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new GmlLabelStyleReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
                            "LabelStyle")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Style property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StyleChanging;
        
        /// <summary>
        /// Gets fired when the Style property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StyleChanged;
        
        /// <summary>
        /// Gets fired before the Transform property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformChanging;
        
        /// <summary>
        /// Gets fired when the Transform property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformChanged;
        
        /// <summary>
        /// Gets fired before the LabelExpression property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LabelExpressionChanging;
        
        /// <summary>
        /// Gets fired when the LabelExpression property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LabelExpressionChanged;
        
        /// <summary>
        /// Gets fired before the GmlFeatureStyle property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlFeatureStyleChanging;
        
        /// <summary>
        /// Gets fired when the GmlFeatureStyle property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlFeatureStyleChanged;
        
        private static ITypedElement RetrieveStyleAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlLabelStyle.ClassInstance)).Resolve("style")));
        }
        
        /// <summary>
        /// Raises the StyleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStyleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StyleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StyleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStyleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StyleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransformAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlLabelStyle.ClassInstance)).Resolve("transform")));
        }
        
        /// <summary>
        /// Raises the TransformChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLabelExpressionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlLabelStyle.ClassInstance)).Resolve("labelExpression")));
        }
        
        /// <summary>
        /// Raises the LabelExpressionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLabelExpressionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LabelExpressionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LabelExpressionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLabelExpressionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LabelExpressionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGmlFeatureStyleReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlLabelStyle.ClassInstance)).Resolve("GmlFeatureStyle")));
        }
        
        /// <summary>
        /// Raises the GmlFeatureStyleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlFeatureStyleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlFeatureStyleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GmlFeatureStyleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlFeatureStyleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlFeatureStyleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GmlFeatureStyle property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGmlFeatureStyle(object sender, System.EventArgs eventArgs)
        {
            this.GmlFeatureStyle = null;
        }
        
        private static ITypedElement RetrieveGmlGeometryStylesReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlLabelStyle.ClassInstance)).Resolve("GmlGeometryStyles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GmlGeometryStyles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlGeometryStylesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("GmlGeometryStyles", e, _gmlGeometryStylesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GmlGeometryStyles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlGeometryStylesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GmlGeometryStyles", e, _gmlGeometryStylesReference);
        }
        
        private static ITypedElement RetrieveGmlTopologyStylesReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlLabelStyle.ClassInstance)).Resolve("GmlTopologyStyles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GmlTopologyStyles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlTopologyStylesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("GmlTopologyStyles", e, _gmlTopologyStylesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GmlTopologyStyles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlTopologyStylesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GmlTopologyStyles", e, _gmlTopologyStylesReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "STYLE"))
            {
                return this.Style;
            }
            if ((attribute == "TRANSFORM"))
            {
                return this.Transform;
            }
            if ((attribute == "LABELEXPRESSION"))
            {
                return this.LabelExpression;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "GMLGEOMETRYSTYLES"))
            {
                return this._gmlGeometryStyles;
            }
            if ((feature == "GMLTOPOLOGYSTYLES"))
            {
                return this._gmlTopologyStyles;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "GMLFEATURESTYLE"))
            {
                this.GmlFeatureStyle = ((IGmlFeatureStyle)(value));
                return;
            }
            if ((feature == "STYLE"))
            {
                this.Style = ((string)(value));
                return;
            }
            if ((feature == "TRANSFORM"))
            {
                this.Transform = ((string)(value));
                return;
            }
            if ((feature == "LABELEXPRESSION"))
            {
                this.LabelExpression = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "GmlFeatureStyle"))
            {
                return new GmlFeatureStyleProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "GmlFeatureStyle"))
            {
                return new GmlFeatureStyleProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
                        "LabelStyle")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the GmlLabelStyle class
        /// </summary>
        public class GmlLabelStyleReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private GmlLabelStyle _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public GmlLabelStyleReferencedElementsCollection(GmlLabelStyle parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.GmlFeatureStyle != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.GmlGeometryStyles.Count);
                    count = (count + this._parent.GmlTopologyStyles.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.GmlFeatureStyleChanged += this.PropagateValueChanges;
                this._parent.GmlGeometryStyles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.GmlTopologyStyles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.GmlFeatureStyleChanged -= this.PropagateValueChanges;
                this._parent.GmlGeometryStyles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.GmlTopologyStyles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.GmlFeatureStyle == null))
                {
                    IGmlFeatureStyle gmlFeatureStyleCasted = item.As<IGmlFeatureStyle>();
                    if ((gmlFeatureStyleCasted != null))
                    {
                        this._parent.GmlFeatureStyle = gmlFeatureStyleCasted;
                        return;
                    }
                }
                IGmlGeometryStyle gmlGeometryStylesCasted = item.As<IGmlGeometryStyle>();
                if ((gmlGeometryStylesCasted != null))
                {
                    this._parent.GmlGeometryStyles.Add(gmlGeometryStylesCasted);
                }
                IGmlTopologyStyle gmlTopologyStylesCasted = item.As<IGmlTopologyStyle>();
                if ((gmlTopologyStylesCasted != null))
                {
                    this._parent.GmlTopologyStyles.Add(gmlTopologyStylesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.GmlFeatureStyle = null;
                this._parent.GmlGeometryStyles.Clear();
                this._parent.GmlTopologyStyles.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.GmlFeatureStyle))
                {
                    return true;
                }
                if (this._parent.GmlGeometryStyles.Contains(item))
                {
                    return true;
                }
                if (this._parent.GmlTopologyStyles.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.GmlFeatureStyle != null))
                {
                    array[arrayIndex] = this._parent.GmlFeatureStyle;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> gmlGeometryStylesEnumerator = this._parent.GmlGeometryStyles.GetEnumerator();
                try
                {
                    for (
                    ; gmlGeometryStylesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = gmlGeometryStylesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    gmlGeometryStylesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> gmlTopologyStylesEnumerator = this._parent.GmlTopologyStyles.GetEnumerator();
                try
                {
                    for (
                    ; gmlTopologyStylesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = gmlTopologyStylesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    gmlTopologyStylesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.GmlFeatureStyle == item))
                {
                    this._parent.GmlFeatureStyle = null;
                    return true;
                }
                IGmlGeometryStyle gmlGeometryStyleItem = item.As<IGmlGeometryStyle>();
                if (((gmlGeometryStyleItem != null) 
                            && this._parent.GmlGeometryStyles.Remove(gmlGeometryStyleItem)))
                {
                    return true;
                }
                IGmlTopologyStyle gmlTopologyStyleItem = item.As<IGmlTopologyStyle>();
                if (((gmlTopologyStyleItem != null) 
                            && this._parent.GmlTopologyStyles.Remove(gmlTopologyStyleItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.GmlFeatureStyle).Concat(this._parent.GmlGeometryStyles).Concat(this._parent.GmlTopologyStyles).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the style property
        /// </summary>
        private sealed class StyleProxy : ModelPropertyChange<IGmlLabelStyle, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StyleProxy(IGmlLabelStyle modelElement) : 
                    base(modelElement, "style")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Style;
                }
                set
                {
                    this.ModelElement.Style = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the transform property
        /// </summary>
        private sealed class TransformProxy : ModelPropertyChange<IGmlLabelStyle, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformProxy(IGmlLabelStyle modelElement) : 
                    base(modelElement, "transform")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Transform;
                }
                set
                {
                    this.ModelElement.Transform = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the labelExpression property
        /// </summary>
        private sealed class LabelExpressionProxy : ModelPropertyChange<IGmlLabelStyle, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LabelExpressionProxy(IGmlLabelStyle modelElement) : 
                    base(modelElement, "labelExpression")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.LabelExpression;
                }
                set
                {
                    this.ModelElement.LabelExpression = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GmlFeatureStyle property
        /// </summary>
        private sealed class GmlFeatureStyleProxy : ModelPropertyChange<IGmlLabelStyle, IGmlFeatureStyle>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GmlFeatureStyleProxy(IGmlLabelStyle modelElement) : 
                    base(modelElement, "GmlFeatureStyle")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGmlFeatureStyle Value
            {
                get
                {
                    return this.ModelElement.GmlFeatureStyle;
                }
                set
                {
                    this.ModelElement.GmlFeatureStyle = value;
                }
            }
        }
    }
}

