using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport
{
    
    
    /// <summary>
    /// The default implementation of the GmlFeatureStyle class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfGMLSupport")]
    [XmlNamespacePrefixAttribute("cimInfGMLSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
        "FeatureStyle")]
    [DebuggerDisplayAttribute("GmlFeatureStyle {UUID}")]
    public partial class GmlFeatureStyle : IdentifiedObject, IGmlFeatureStyle, IModelElement
    {
        
        /// <summary>
        /// The backing field for the FeatureConstraint property
        /// </summary>
        private string _featureConstraint;
        
        private static Lazy<ITypedElement> _featureConstraintAttribute = new Lazy<ITypedElement>(RetrieveFeatureConstraintAttribute);
        
        /// <summary>
        /// The backing field for the SemanticTypeIdentifier property
        /// </summary>
        private string _semanticTypeIdentifier;
        
        private static Lazy<ITypedElement> _semanticTypeIdentifierAttribute = new Lazy<ITypedElement>(RetrieveSemanticTypeIdentifierAttribute);
        
        /// <summary>
        /// The backing field for the Version property
        /// </summary>
        private string _version;
        
        private static Lazy<ITypedElement> _versionAttribute = new Lazy<ITypedElement>(RetrieveVersionAttribute);
        
        /// <summary>
        /// The backing field for the FeatureTypeName property
        /// </summary>
        private string _featureTypeName;
        
        private static Lazy<ITypedElement> _featureTypeNameAttribute = new Lazy<ITypedElement>(RetrieveFeatureTypeNameAttribute);
        
        /// <summary>
        /// The backing field for the QueryGrammar property
        /// </summary>
        private Nullable<QueryGrammarKind> _queryGrammar;
        
        private static Lazy<ITypedElement> _queryGrammarAttribute = new Lazy<ITypedElement>(RetrieveQueryGrammarAttribute);
        
        /// <summary>
        /// The backing field for the FeatureType property
        /// </summary>
        private string _featureType;
        
        private static Lazy<ITypedElement> _featureTypeAttribute = new Lazy<ITypedElement>(RetrieveFeatureTypeAttribute);
        
        /// <summary>
        /// The backing field for the BaseType property
        /// </summary>
        private string _baseType;
        
        private static Lazy<ITypedElement> _baseTypeAttribute = new Lazy<ITypedElement>(RetrieveBaseTypeAttribute);
        
        private static Lazy<ITypedElement> _gmlSymbolsReference = new Lazy<ITypedElement>(RetrieveGmlSymbolsReference);
        
        /// <summary>
        /// The backing field for the GmlSymbols property
        /// </summary>
        private GmlFeatureStyleGmlSymbolsCollection _gmlSymbols;
        
        private static Lazy<ITypedElement> _gmlLabelStylesReference = new Lazy<ITypedElement>(RetrieveGmlLabelStylesReference);
        
        /// <summary>
        /// The backing field for the GmlLabelStyles property
        /// </summary>
        private GmlFeatureStyleGmlLabelStylesCollection _gmlLabelStyles;
        
        private static Lazy<ITypedElement> _gmlGeometryStylesReference = new Lazy<ITypedElement>(RetrieveGmlGeometryStylesReference);
        
        /// <summary>
        /// The backing field for the GmlGeometryStyles property
        /// </summary>
        private GmlFeatureStyleGmlGeometryStylesCollection _gmlGeometryStyles;
        
        private static Lazy<ITypedElement> _gmlFeatureTypesReference = new Lazy<ITypedElement>(RetrieveGmlFeatureTypesReference);
        
        /// <summary>
        /// The backing field for the GmlFeatureTypes property
        /// </summary>
        private GmlFeatureStyleGmlFeatureTypesCollection _gmlFeatureTypes;
        
        private static Lazy<ITypedElement> _gmlTobologyStylesReference = new Lazy<ITypedElement>(RetrieveGmlTobologyStylesReference);
        
        /// <summary>
        /// The backing field for the GmlTobologyStyles property
        /// </summary>
        private GmlFeatureStyleGmlTobologyStylesCollection _gmlTobologyStyles;
        
        private static IClass _classInstance;
        
        public GmlFeatureStyle()
        {
            this._gmlSymbols = new GmlFeatureStyleGmlSymbolsCollection(this);
            this._gmlSymbols.CollectionChanging += this.GmlSymbolsCollectionChanging;
            this._gmlSymbols.CollectionChanged += this.GmlSymbolsCollectionChanged;
            this._gmlLabelStyles = new GmlFeatureStyleGmlLabelStylesCollection(this);
            this._gmlLabelStyles.CollectionChanging += this.GmlLabelStylesCollectionChanging;
            this._gmlLabelStyles.CollectionChanged += this.GmlLabelStylesCollectionChanged;
            this._gmlGeometryStyles = new GmlFeatureStyleGmlGeometryStylesCollection(this);
            this._gmlGeometryStyles.CollectionChanging += this.GmlGeometryStylesCollectionChanging;
            this._gmlGeometryStyles.CollectionChanged += this.GmlGeometryStylesCollectionChanged;
            this._gmlFeatureTypes = new GmlFeatureStyleGmlFeatureTypesCollection(this);
            this._gmlFeatureTypes.CollectionChanging += this.GmlFeatureTypesCollectionChanging;
            this._gmlFeatureTypes.CollectionChanged += this.GmlFeatureTypesCollectionChanged;
            this._gmlTobologyStyles = new GmlFeatureStyleGmlTobologyStylesCollection(this);
            this._gmlTobologyStyles.CollectionChanging += this.GmlTobologyStylesCollectionChanging;
            this._gmlTobologyStyles.CollectionChanged += this.GmlTobologyStylesCollectionChanged;
        }
        
        /// <summary>
        /// The featureConstraint property
        /// </summary>
        [XmlElementNameAttribute("featureConstraint")]
        [XmlAttributeAttribute(true)]
        public virtual string FeatureConstraint
        {
            get
            {
                return this._featureConstraint;
            }
            set
            {
                if ((this._featureConstraint != value))
                {
                    string old = this._featureConstraint;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFeatureConstraintChanging(e);
                    this.OnPropertyChanging("FeatureConstraint", e, _featureConstraintAttribute);
                    this._featureConstraint = value;
                    this.OnFeatureConstraintChanged(e);
                    this.OnPropertyChanged("FeatureConstraint", e, _featureConstraintAttribute);
                }
            }
        }
        
        /// <summary>
        /// The semanticTypeIdentifier property
        /// </summary>
        [XmlElementNameAttribute("semanticTypeIdentifier")]
        [XmlAttributeAttribute(true)]
        public virtual string SemanticTypeIdentifier
        {
            get
            {
                return this._semanticTypeIdentifier;
            }
            set
            {
                if ((this._semanticTypeIdentifier != value))
                {
                    string old = this._semanticTypeIdentifier;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSemanticTypeIdentifierChanging(e);
                    this.OnPropertyChanging("SemanticTypeIdentifier", e, _semanticTypeIdentifierAttribute);
                    this._semanticTypeIdentifier = value;
                    this.OnSemanticTypeIdentifierChanged(e);
                    this.OnPropertyChanged("SemanticTypeIdentifier", e, _semanticTypeIdentifierAttribute);
                }
            }
        }
        
        /// <summary>
        /// The version property
        /// </summary>
        [XmlElementNameAttribute("version")]
        [XmlAttributeAttribute(true)]
        public virtual string Version
        {
            get
            {
                return this._version;
            }
            set
            {
                if ((this._version != value))
                {
                    string old = this._version;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVersionChanging(e);
                    this.OnPropertyChanging("Version", e, _versionAttribute);
                    this._version = value;
                    this.OnVersionChanged(e);
                    this.OnPropertyChanged("Version", e, _versionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The featureTypeName property
        /// </summary>
        [XmlElementNameAttribute("featureTypeName")]
        [XmlAttributeAttribute(true)]
        public virtual string FeatureTypeName
        {
            get
            {
                return this._featureTypeName;
            }
            set
            {
                if ((this._featureTypeName != value))
                {
                    string old = this._featureTypeName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFeatureTypeNameChanging(e);
                    this.OnPropertyChanging("FeatureTypeName", e, _featureTypeNameAttribute);
                    this._featureTypeName = value;
                    this.OnFeatureTypeNameChanged(e);
                    this.OnPropertyChanged("FeatureTypeName", e, _featureTypeNameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The queryGrammar property
        /// </summary>
        [XmlElementNameAttribute("queryGrammar")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<QueryGrammarKind> QueryGrammar
        {
            get
            {
                return this._queryGrammar;
            }
            set
            {
                if ((this._queryGrammar != value))
                {
                    Nullable<QueryGrammarKind> old = this._queryGrammar;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQueryGrammarChanging(e);
                    this.OnPropertyChanging("QueryGrammar", e, _queryGrammarAttribute);
                    this._queryGrammar = value;
                    this.OnQueryGrammarChanged(e);
                    this.OnPropertyChanged("QueryGrammar", e, _queryGrammarAttribute);
                }
            }
        }
        
        /// <summary>
        /// The featureType property
        /// </summary>
        [XmlElementNameAttribute("featureType")]
        [XmlAttributeAttribute(true)]
        public virtual string FeatureType
        {
            get
            {
                return this._featureType;
            }
            set
            {
                if ((this._featureType != value))
                {
                    string old = this._featureType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFeatureTypeChanging(e);
                    this.OnPropertyChanging("FeatureType", e, _featureTypeAttribute);
                    this._featureType = value;
                    this.OnFeatureTypeChanged(e);
                    this.OnPropertyChanged("FeatureType", e, _featureTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The baseType property
        /// </summary>
        [XmlElementNameAttribute("baseType")]
        [XmlAttributeAttribute(true)]
        public virtual string BaseType
        {
            get
            {
                return this._baseType;
            }
            set
            {
                if ((this._baseType != value))
                {
                    string old = this._baseType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBaseTypeChanging(e);
                    this.OnPropertyChanging("BaseType", e, _baseTypeAttribute);
                    this._baseType = value;
                    this.OnBaseTypeChanged(e);
                    this.OnPropertyChanged("BaseType", e, _baseTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The GmlSymbols property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlFeatureStyles")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGmlSymbol> GmlSymbols
        {
            get
            {
                return this._gmlSymbols;
            }
        }
        
        /// <summary>
        /// The GmlLabelStyles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlFeatureStyle")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGmlLabelStyle> GmlLabelStyles
        {
            get
            {
                return this._gmlLabelStyles;
            }
        }
        
        /// <summary>
        /// The GmlGeometryStyles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlFeatureStyle")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGmlGeometryStyle> GmlGeometryStyles
        {
            get
            {
                return this._gmlGeometryStyles;
            }
        }
        
        /// <summary>
        /// The GmlFeatureTypes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlFeatureStyles")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGmlFeatureType> GmlFeatureTypes
        {
            get
            {
                return this._gmlFeatureTypes;
            }
        }
        
        /// <summary>
        /// The GmlTobologyStyles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlFeatureStyle")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGmlTopologyStyle> GmlTobologyStyles
        {
            get
            {
                return this._gmlTobologyStyles;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new GmlFeatureStyleReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
                            "FeatureStyle")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the FeatureConstraint property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FeatureConstraintChanging;
        
        /// <summary>
        /// Gets fired when the FeatureConstraint property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FeatureConstraintChanged;
        
        /// <summary>
        /// Gets fired before the SemanticTypeIdentifier property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SemanticTypeIdentifierChanging;
        
        /// <summary>
        /// Gets fired when the SemanticTypeIdentifier property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SemanticTypeIdentifierChanged;
        
        /// <summary>
        /// Gets fired before the Version property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VersionChanging;
        
        /// <summary>
        /// Gets fired when the Version property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VersionChanged;
        
        /// <summary>
        /// Gets fired before the FeatureTypeName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FeatureTypeNameChanging;
        
        /// <summary>
        /// Gets fired when the FeatureTypeName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FeatureTypeNameChanged;
        
        /// <summary>
        /// Gets fired before the QueryGrammar property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QueryGrammarChanging;
        
        /// <summary>
        /// Gets fired when the QueryGrammar property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QueryGrammarChanged;
        
        /// <summary>
        /// Gets fired before the FeatureType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FeatureTypeChanging;
        
        /// <summary>
        /// Gets fired when the FeatureType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FeatureTypeChanged;
        
        /// <summary>
        /// Gets fired before the BaseType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BaseTypeChanging;
        
        /// <summary>
        /// Gets fired when the BaseType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BaseTypeChanged;
        
        private static ITypedElement RetrieveFeatureConstraintAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlFeatureStyle.ClassInstance)).Resolve("featureConstraint")));
        }
        
        /// <summary>
        /// Raises the FeatureConstraintChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFeatureConstraintChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FeatureConstraintChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FeatureConstraintChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFeatureConstraintChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FeatureConstraintChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSemanticTypeIdentifierAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlFeatureStyle.ClassInstance)).Resolve("semanticTypeIdentifier")));
        }
        
        /// <summary>
        /// Raises the SemanticTypeIdentifierChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSemanticTypeIdentifierChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SemanticTypeIdentifierChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SemanticTypeIdentifierChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSemanticTypeIdentifierChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SemanticTypeIdentifierChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVersionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlFeatureStyle.ClassInstance)).Resolve("version")));
        }
        
        /// <summary>
        /// Raises the VersionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVersionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VersionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VersionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVersionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VersionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFeatureTypeNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlFeatureStyle.ClassInstance)).Resolve("featureTypeName")));
        }
        
        /// <summary>
        /// Raises the FeatureTypeNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFeatureTypeNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FeatureTypeNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FeatureTypeNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFeatureTypeNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FeatureTypeNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveQueryGrammarAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlFeatureStyle.ClassInstance)).Resolve("queryGrammar")));
        }
        
        /// <summary>
        /// Raises the QueryGrammarChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQueryGrammarChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QueryGrammarChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QueryGrammarChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQueryGrammarChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QueryGrammarChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFeatureTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlFeatureStyle.ClassInstance)).Resolve("featureType")));
        }
        
        /// <summary>
        /// Raises the FeatureTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFeatureTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FeatureTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FeatureTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFeatureTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FeatureTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBaseTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlFeatureStyle.ClassInstance)).Resolve("baseType")));
        }
        
        /// <summary>
        /// Raises the BaseTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBaseTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BaseTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BaseTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBaseTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BaseTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGmlSymbolsReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlFeatureStyle.ClassInstance)).Resolve("GmlSymbols")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GmlSymbols property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlSymbolsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("GmlSymbols", e, _gmlSymbolsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GmlSymbols property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlSymbolsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GmlSymbols", e, _gmlSymbolsReference);
        }
        
        private static ITypedElement RetrieveGmlLabelStylesReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlFeatureStyle.ClassInstance)).Resolve("GmlLabelStyles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GmlLabelStyles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlLabelStylesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("GmlLabelStyles", e, _gmlLabelStylesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GmlLabelStyles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlLabelStylesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GmlLabelStyles", e, _gmlLabelStylesReference);
        }
        
        private static ITypedElement RetrieveGmlGeometryStylesReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlFeatureStyle.ClassInstance)).Resolve("GmlGeometryStyles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GmlGeometryStyles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlGeometryStylesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("GmlGeometryStyles", e, _gmlGeometryStylesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GmlGeometryStyles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlGeometryStylesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GmlGeometryStyles", e, _gmlGeometryStylesReference);
        }
        
        private static ITypedElement RetrieveGmlFeatureTypesReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlFeatureStyle.ClassInstance)).Resolve("GmlFeatureTypes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GmlFeatureTypes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlFeatureTypesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("GmlFeatureTypes", e, _gmlFeatureTypesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GmlFeatureTypes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlFeatureTypesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GmlFeatureTypes", e, _gmlFeatureTypesReference);
        }
        
        private static ITypedElement RetrieveGmlTobologyStylesReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlFeatureStyle.ClassInstance)).Resolve("GmlTobologyStyles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GmlTobologyStyles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlTobologyStylesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("GmlTobologyStyles", e, _gmlTobologyStylesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GmlTobologyStyles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlTobologyStylesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GmlTobologyStyles", e, _gmlTobologyStylesReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "FEATURECONSTRAINT"))
            {
                return this.FeatureConstraint;
            }
            if ((attribute == "SEMANTICTYPEIDENTIFIER"))
            {
                return this.SemanticTypeIdentifier;
            }
            if ((attribute == "VERSION"))
            {
                return this.Version;
            }
            if ((attribute == "FEATURETYPENAME"))
            {
                return this.FeatureTypeName;
            }
            if ((attribute == "QUERYGRAMMAR"))
            {
                return this.QueryGrammar;
            }
            if ((attribute == "FEATURETYPE"))
            {
                return this.FeatureType;
            }
            if ((attribute == "BASETYPE"))
            {
                return this.BaseType;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "GMLSYMBOLS"))
            {
                return this._gmlSymbols;
            }
            if ((feature == "GMLLABELSTYLES"))
            {
                return this._gmlLabelStyles;
            }
            if ((feature == "GMLGEOMETRYSTYLES"))
            {
                return this._gmlGeometryStyles;
            }
            if ((feature == "GMLFEATURETYPES"))
            {
                return this._gmlFeatureTypes;
            }
            if ((feature == "GMLTOBOLOGYSTYLES"))
            {
                return this._gmlTobologyStyles;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FEATURECONSTRAINT"))
            {
                this.FeatureConstraint = ((string)(value));
                return;
            }
            if ((feature == "SEMANTICTYPEIDENTIFIER"))
            {
                this.SemanticTypeIdentifier = ((string)(value));
                return;
            }
            if ((feature == "VERSION"))
            {
                this.Version = ((string)(value));
                return;
            }
            if ((feature == "FEATURETYPENAME"))
            {
                this.FeatureTypeName = ((string)(value));
                return;
            }
            if ((feature == "QUERYGRAMMAR"))
            {
                this.QueryGrammar = ((QueryGrammarKind)(value));
                return;
            }
            if ((feature == "FEATURETYPE"))
            {
                this.FeatureType = ((string)(value));
                return;
            }
            if ((feature == "BASETYPE"))
            {
                this.BaseType = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
                        "FeatureStyle")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the GmlFeatureStyle class
        /// </summary>
        public class GmlFeatureStyleReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private GmlFeatureStyle _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public GmlFeatureStyleReferencedElementsCollection(GmlFeatureStyle parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.GmlSymbols.Count);
                    count = (count + this._parent.GmlLabelStyles.Count);
                    count = (count + this._parent.GmlGeometryStyles.Count);
                    count = (count + this._parent.GmlFeatureTypes.Count);
                    count = (count + this._parent.GmlTobologyStyles.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.GmlSymbols.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.GmlLabelStyles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.GmlGeometryStyles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.GmlFeatureTypes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.GmlTobologyStyles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.GmlSymbols.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.GmlLabelStyles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.GmlGeometryStyles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.GmlFeatureTypes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.GmlTobologyStyles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IGmlSymbol gmlSymbolsCasted = item.As<IGmlSymbol>();
                if ((gmlSymbolsCasted != null))
                {
                    this._parent.GmlSymbols.Add(gmlSymbolsCasted);
                }
                IGmlLabelStyle gmlLabelStylesCasted = item.As<IGmlLabelStyle>();
                if ((gmlLabelStylesCasted != null))
                {
                    this._parent.GmlLabelStyles.Add(gmlLabelStylesCasted);
                }
                IGmlGeometryStyle gmlGeometryStylesCasted = item.As<IGmlGeometryStyle>();
                if ((gmlGeometryStylesCasted != null))
                {
                    this._parent.GmlGeometryStyles.Add(gmlGeometryStylesCasted);
                }
                IGmlFeatureType gmlFeatureTypesCasted = item.As<IGmlFeatureType>();
                if ((gmlFeatureTypesCasted != null))
                {
                    this._parent.GmlFeatureTypes.Add(gmlFeatureTypesCasted);
                }
                IGmlTopologyStyle gmlTobologyStylesCasted = item.As<IGmlTopologyStyle>();
                if ((gmlTobologyStylesCasted != null))
                {
                    this._parent.GmlTobologyStyles.Add(gmlTobologyStylesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.GmlSymbols.Clear();
                this._parent.GmlLabelStyles.Clear();
                this._parent.GmlGeometryStyles.Clear();
                this._parent.GmlFeatureTypes.Clear();
                this._parent.GmlTobologyStyles.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.GmlSymbols.Contains(item))
                {
                    return true;
                }
                if (this._parent.GmlLabelStyles.Contains(item))
                {
                    return true;
                }
                if (this._parent.GmlGeometryStyles.Contains(item))
                {
                    return true;
                }
                if (this._parent.GmlFeatureTypes.Contains(item))
                {
                    return true;
                }
                if (this._parent.GmlTobologyStyles.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> gmlSymbolsEnumerator = this._parent.GmlSymbols.GetEnumerator();
                try
                {
                    for (
                    ; gmlSymbolsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = gmlSymbolsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    gmlSymbolsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> gmlLabelStylesEnumerator = this._parent.GmlLabelStyles.GetEnumerator();
                try
                {
                    for (
                    ; gmlLabelStylesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = gmlLabelStylesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    gmlLabelStylesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> gmlGeometryStylesEnumerator = this._parent.GmlGeometryStyles.GetEnumerator();
                try
                {
                    for (
                    ; gmlGeometryStylesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = gmlGeometryStylesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    gmlGeometryStylesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> gmlFeatureTypesEnumerator = this._parent.GmlFeatureTypes.GetEnumerator();
                try
                {
                    for (
                    ; gmlFeatureTypesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = gmlFeatureTypesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    gmlFeatureTypesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> gmlTobologyStylesEnumerator = this._parent.GmlTobologyStyles.GetEnumerator();
                try
                {
                    for (
                    ; gmlTobologyStylesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = gmlTobologyStylesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    gmlTobologyStylesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IGmlSymbol gmlSymbolItem = item.As<IGmlSymbol>();
                if (((gmlSymbolItem != null) 
                            && this._parent.GmlSymbols.Remove(gmlSymbolItem)))
                {
                    return true;
                }
                IGmlLabelStyle gmlLabelStyleItem = item.As<IGmlLabelStyle>();
                if (((gmlLabelStyleItem != null) 
                            && this._parent.GmlLabelStyles.Remove(gmlLabelStyleItem)))
                {
                    return true;
                }
                IGmlGeometryStyle gmlGeometryStyleItem = item.As<IGmlGeometryStyle>();
                if (((gmlGeometryStyleItem != null) 
                            && this._parent.GmlGeometryStyles.Remove(gmlGeometryStyleItem)))
                {
                    return true;
                }
                IGmlFeatureType gmlFeatureTypeItem = item.As<IGmlFeatureType>();
                if (((gmlFeatureTypeItem != null) 
                            && this._parent.GmlFeatureTypes.Remove(gmlFeatureTypeItem)))
                {
                    return true;
                }
                IGmlTopologyStyle gmlTopologyStyleItem = item.As<IGmlTopologyStyle>();
                if (((gmlTopologyStyleItem != null) 
                            && this._parent.GmlTobologyStyles.Remove(gmlTopologyStyleItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.GmlSymbols).Concat(this._parent.GmlLabelStyles).Concat(this._parent.GmlGeometryStyles).Concat(this._parent.GmlFeatureTypes).Concat(this._parent.GmlTobologyStyles).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the featureConstraint property
        /// </summary>
        private sealed class FeatureConstraintProxy : ModelPropertyChange<IGmlFeatureStyle, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FeatureConstraintProxy(IGmlFeatureStyle modelElement) : 
                    base(modelElement, "featureConstraint")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.FeatureConstraint;
                }
                set
                {
                    this.ModelElement.FeatureConstraint = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the semanticTypeIdentifier property
        /// </summary>
        private sealed class SemanticTypeIdentifierProxy : ModelPropertyChange<IGmlFeatureStyle, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SemanticTypeIdentifierProxy(IGmlFeatureStyle modelElement) : 
                    base(modelElement, "semanticTypeIdentifier")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.SemanticTypeIdentifier;
                }
                set
                {
                    this.ModelElement.SemanticTypeIdentifier = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the version property
        /// </summary>
        private sealed class VersionProxy : ModelPropertyChange<IGmlFeatureStyle, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VersionProxy(IGmlFeatureStyle modelElement) : 
                    base(modelElement, "version")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Version;
                }
                set
                {
                    this.ModelElement.Version = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the featureTypeName property
        /// </summary>
        private sealed class FeatureTypeNameProxy : ModelPropertyChange<IGmlFeatureStyle, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FeatureTypeNameProxy(IGmlFeatureStyle modelElement) : 
                    base(modelElement, "featureTypeName")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.FeatureTypeName;
                }
                set
                {
                    this.ModelElement.FeatureTypeName = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the queryGrammar property
        /// </summary>
        private sealed class QueryGrammarProxy : ModelPropertyChange<IGmlFeatureStyle, Nullable<QueryGrammarKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QueryGrammarProxy(IGmlFeatureStyle modelElement) : 
                    base(modelElement, "queryGrammar")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<QueryGrammarKind> Value
            {
                get
                {
                    return this.ModelElement.QueryGrammar;
                }
                set
                {
                    this.ModelElement.QueryGrammar = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the featureType property
        /// </summary>
        private sealed class FeatureTypeProxy : ModelPropertyChange<IGmlFeatureStyle, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FeatureTypeProxy(IGmlFeatureStyle modelElement) : 
                    base(modelElement, "featureType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.FeatureType;
                }
                set
                {
                    this.ModelElement.FeatureType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the baseType property
        /// </summary>
        private sealed class BaseTypeProxy : ModelPropertyChange<IGmlFeatureStyle, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BaseTypeProxy(IGmlFeatureStyle modelElement) : 
                    base(modelElement, "baseType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.BaseType;
                }
                set
                {
                    this.ModelElement.BaseType = value;
                }
            }
        }
    }
}

