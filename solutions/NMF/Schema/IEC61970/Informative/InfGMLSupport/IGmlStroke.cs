//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport
{
    
    
    /// <summary>
    /// The public interface for GmlStroke
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(GmlStroke))]
    [XmlDefaultImplementationTypeAttribute(typeof(GmlStroke))]
    public interface IGmlStroke : IModelElement, IIdentifiedObject
    {
        
        /// <summary>
        /// The lineCap property
        /// </summary>
        string LineCap
        {
            get;
            set;
        }
        
        /// <summary>
        /// The opacity property
        /// </summary>
        float Opacity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The width property
        /// </summary>
        float Width
        {
            get;
            set;
        }
        
        /// <summary>
        /// The dashArray property
        /// </summary>
        string DashArray
        {
            get;
            set;
        }
        
        /// <summary>
        /// The lineStyle property
        /// </summary>
        string LineStyle
        {
            get;
            set;
        }
        
        /// <summary>
        /// The dashOffset property
        /// </summary>
        string DashOffset
        {
            get;
            set;
        }
        
        /// <summary>
        /// The linejoin property
        /// </summary>
        string Linejoin
        {
            get;
            set;
        }
        
        /// <summary>
        /// The GmlColour property
        /// </summary>
        IGmlColour GmlColour
        {
            get;
            set;
        }
        
        /// <summary>
        /// The GmlSvgParameters property
        /// </summary>
        IOrderedSetExpression<IGmlSvgParameter> GmlSvgParameters
        {
            get;
        }
        
        /// <summary>
        /// The GmlPolygonSymbols property
        /// </summary>
        IOrderedSetExpression<IGmlPolygonSymbol> GmlPolygonSymbols
        {
            get;
        }
        
        /// <summary>
        /// The GmlLineSymbols property
        /// </summary>
        IOrderedSetExpression<IGmlLineSymbol> GmlLineSymbols
        {
            get;
        }
        
        /// <summary>
        /// The GmlMarks property
        /// </summary>
        IOrderedSetExpression<IGmlMark> GmlMarks
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the LineCap property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LineCapChanging;
        
        /// <summary>
        /// Gets fired when the LineCap property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LineCapChanged;
        
        /// <summary>
        /// Gets fired before the Opacity property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OpacityChanging;
        
        /// <summary>
        /// Gets fired when the Opacity property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OpacityChanged;
        
        /// <summary>
        /// Gets fired before the Width property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WidthChanging;
        
        /// <summary>
        /// Gets fired when the Width property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WidthChanged;
        
        /// <summary>
        /// Gets fired before the DashArray property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DashArrayChanging;
        
        /// <summary>
        /// Gets fired when the DashArray property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DashArrayChanged;
        
        /// <summary>
        /// Gets fired before the LineStyle property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LineStyleChanging;
        
        /// <summary>
        /// Gets fired when the LineStyle property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LineStyleChanged;
        
        /// <summary>
        /// Gets fired before the DashOffset property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DashOffsetChanging;
        
        /// <summary>
        /// Gets fired when the DashOffset property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DashOffsetChanged;
        
        /// <summary>
        /// Gets fired before the Linejoin property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LinejoinChanging;
        
        /// <summary>
        /// Gets fired when the Linejoin property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LinejoinChanged;
        
        /// <summary>
        /// Gets fired before the GmlColour property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GmlColourChanging;
        
        /// <summary>
        /// Gets fired when the GmlColour property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GmlColourChanged;
    }
}

