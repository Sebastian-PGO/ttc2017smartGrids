//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport
{
    
    
    /// <summary>
    /// The public interface for GmlGraphic
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(GmlGraphic))]
    [XmlDefaultImplementationTypeAttribute(typeof(GmlGraphic))]
    public interface IGmlGraphic : IModelElement, IIdentifiedObject
    {
        
        /// <summary>
        /// The opacity property
        /// </summary>
        float Opacity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minSize property
        /// </summary>
        int MinSize
        {
            get;
            set;
        }
        
        /// <summary>
        /// The symbolID property
        /// </summary>
        string SymbolID
        {
            get;
            set;
        }
        
        /// <summary>
        /// The xScale property
        /// </summary>
        float XScale
        {
            get;
            set;
        }
        
        /// <summary>
        /// The size property
        /// </summary>
        int Size
        {
            get;
            set;
        }
        
        /// <summary>
        /// The yScale property
        /// </summary>
        float YScale
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rotation property
        /// </summary>
        float Rotation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The GmlMarks property
        /// </summary>
        IOrderedSetExpression<IGmlMark> GmlMarks
        {
            get;
        }
        
        /// <summary>
        /// The GmlPointSymbols property
        /// </summary>
        IOrderedSetExpression<IGmlPointSymbol> GmlPointSymbols
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the Opacity property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OpacityChanging;
        
        /// <summary>
        /// Gets fired when the Opacity property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OpacityChanged;
        
        /// <summary>
        /// Gets fired before the MinSize property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinSizeChanging;
        
        /// <summary>
        /// Gets fired when the MinSize property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinSizeChanged;
        
        /// <summary>
        /// Gets fired before the SymbolID property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SymbolIDChanging;
        
        /// <summary>
        /// Gets fired when the SymbolID property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SymbolIDChanged;
        
        /// <summary>
        /// Gets fired before the XScale property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XScaleChanging;
        
        /// <summary>
        /// Gets fired when the XScale property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XScaleChanged;
        
        /// <summary>
        /// Gets fired before the Size property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SizeChanging;
        
        /// <summary>
        /// Gets fired when the Size property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SizeChanged;
        
        /// <summary>
        /// Gets fired before the YScale property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> YScaleChanging;
        
        /// <summary>
        /// Gets fired when the YScale property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> YScaleChanged;
        
        /// <summary>
        /// Gets fired before the Rotation property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RotationChanging;
        
        /// <summary>
        /// Gets fired when the Rotation property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RotationChanged;
    }
}

