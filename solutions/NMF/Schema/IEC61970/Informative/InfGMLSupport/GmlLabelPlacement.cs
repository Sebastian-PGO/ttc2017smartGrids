//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport
{
    
    
    /// <summary>
    /// The default implementation of the GmlLabelPlacement class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfGMLSupport")]
    [XmlNamespacePrefixAttribute("cimInfGMLSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
        "LabelPlacement")]
    [DebuggerDisplayAttribute("GmlLabelPlacement {UUID}")]
    public partial class GmlLabelPlacement : IdentifiedObject, IGmlLabelPlacement, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Type property
        /// </summary>
        private string _type;
        
        private static Lazy<ITypedElement> _typeAttribute = new Lazy<ITypedElement>(RetrieveTypeAttribute);
        
        /// <summary>
        /// The backing field for the Offset property
        /// </summary>
        private string _offset;
        
        private static Lazy<ITypedElement> _offsetAttribute = new Lazy<ITypedElement>(RetrieveOffsetAttribute);
        
        /// <summary>
        /// The backing field for the AnchorY property
        /// </summary>
        private string _anchorY;
        
        private static Lazy<ITypedElement> _anchorYAttribute = new Lazy<ITypedElement>(RetrieveAnchorYAttribute);
        
        /// <summary>
        /// The backing field for the AnchorX property
        /// </summary>
        private string _anchorX;
        
        private static Lazy<ITypedElement> _anchorXAttribute = new Lazy<ITypedElement>(RetrieveAnchorXAttribute);
        
        /// <summary>
        /// The backing field for the Rotation property
        /// </summary>
        private string _rotation;
        
        private static Lazy<ITypedElement> _rotationAttribute = new Lazy<ITypedElement>(RetrieveRotationAttribute);
        
        /// <summary>
        /// The backing field for the DisplacementY property
        /// </summary>
        private string _displacementY;
        
        private static Lazy<ITypedElement> _displacementYAttribute = new Lazy<ITypedElement>(RetrieveDisplacementYAttribute);
        
        /// <summary>
        /// The backing field for the DisplacementX property
        /// </summary>
        private string _displacementX;
        
        private static Lazy<ITypedElement> _displacementXAttribute = new Lazy<ITypedElement>(RetrieveDisplacementXAttribute);
        
        private static Lazy<ITypedElement> _gmlTextSymbolsReference = new Lazy<ITypedElement>(RetrieveGmlTextSymbolsReference);
        
        /// <summary>
        /// The backing field for the GmlTextSymbols property
        /// </summary>
        private GmlLabelPlacementGmlTextSymbolsCollection _gmlTextSymbols;
        
        private static IClass _classInstance;
        
        public GmlLabelPlacement()
        {
            this._gmlTextSymbols = new GmlLabelPlacementGmlTextSymbolsCollection(this);
            this._gmlTextSymbols.CollectionChanging += this.GmlTextSymbolsCollectionChanging;
            this._gmlTextSymbols.CollectionChanged += this.GmlTextSymbolsCollectionChanged;
        }
        
        /// <summary>
        /// The type property
        /// </summary>
        [XmlElementNameAttribute("type")]
        [XmlAttributeAttribute(true)]
        public virtual string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    string old = this._type;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeChanging(e);
                    this.OnPropertyChanging("Type", e, _typeAttribute);
                    this._type = value;
                    this.OnTypeChanged(e);
                    this.OnPropertyChanged("Type", e, _typeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The offset property
        /// </summary>
        [XmlElementNameAttribute("offset")]
        [XmlAttributeAttribute(true)]
        public virtual string Offset
        {
            get
            {
                return this._offset;
            }
            set
            {
                if ((this._offset != value))
                {
                    string old = this._offset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOffsetChanging(e);
                    this.OnPropertyChanging("Offset", e, _offsetAttribute);
                    this._offset = value;
                    this.OnOffsetChanged(e);
                    this.OnPropertyChanged("Offset", e, _offsetAttribute);
                }
            }
        }
        
        /// <summary>
        /// The anchorY property
        /// </summary>
        [XmlElementNameAttribute("anchorY")]
        [XmlAttributeAttribute(true)]
        public virtual string AnchorY
        {
            get
            {
                return this._anchorY;
            }
            set
            {
                if ((this._anchorY != value))
                {
                    string old = this._anchorY;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAnchorYChanging(e);
                    this.OnPropertyChanging("AnchorY", e, _anchorYAttribute);
                    this._anchorY = value;
                    this.OnAnchorYChanged(e);
                    this.OnPropertyChanged("AnchorY", e, _anchorYAttribute);
                }
            }
        }
        
        /// <summary>
        /// The anchorX property
        /// </summary>
        [XmlElementNameAttribute("anchorX")]
        [XmlAttributeAttribute(true)]
        public virtual string AnchorX
        {
            get
            {
                return this._anchorX;
            }
            set
            {
                if ((this._anchorX != value))
                {
                    string old = this._anchorX;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAnchorXChanging(e);
                    this.OnPropertyChanging("AnchorX", e, _anchorXAttribute);
                    this._anchorX = value;
                    this.OnAnchorXChanged(e);
                    this.OnPropertyChanged("AnchorX", e, _anchorXAttribute);
                }
            }
        }
        
        /// <summary>
        /// The rotation property
        /// </summary>
        [XmlElementNameAttribute("rotation")]
        [XmlAttributeAttribute(true)]
        public virtual string Rotation
        {
            get
            {
                return this._rotation;
            }
            set
            {
                if ((this._rotation != value))
                {
                    string old = this._rotation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRotationChanging(e);
                    this.OnPropertyChanging("Rotation", e, _rotationAttribute);
                    this._rotation = value;
                    this.OnRotationChanged(e);
                    this.OnPropertyChanged("Rotation", e, _rotationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The displacementY property
        /// </summary>
        [XmlElementNameAttribute("displacementY")]
        [XmlAttributeAttribute(true)]
        public virtual string DisplacementY
        {
            get
            {
                return this._displacementY;
            }
            set
            {
                if ((this._displacementY != value))
                {
                    string old = this._displacementY;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDisplacementYChanging(e);
                    this.OnPropertyChanging("DisplacementY", e, _displacementYAttribute);
                    this._displacementY = value;
                    this.OnDisplacementYChanged(e);
                    this.OnPropertyChanged("DisplacementY", e, _displacementYAttribute);
                }
            }
        }
        
        /// <summary>
        /// The displacementX property
        /// </summary>
        [XmlElementNameAttribute("displacementX")]
        [XmlAttributeAttribute(true)]
        public virtual string DisplacementX
        {
            get
            {
                return this._displacementX;
            }
            set
            {
                if ((this._displacementX != value))
                {
                    string old = this._displacementX;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDisplacementXChanging(e);
                    this.OnPropertyChanging("DisplacementX", e, _displacementXAttribute);
                    this._displacementX = value;
                    this.OnDisplacementXChanged(e);
                    this.OnPropertyChanged("DisplacementX", e, _displacementXAttribute);
                }
            }
        }
        
        /// <summary>
        /// The GmlTextSymbols property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlLabelPlacement")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGmlTextSymbol> GmlTextSymbols
        {
            get
            {
                return this._gmlTextSymbols;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new GmlLabelPlacementReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
                            "LabelPlacement")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Type property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanging;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanged;
        
        /// <summary>
        /// Gets fired before the Offset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OffsetChanging;
        
        /// <summary>
        /// Gets fired when the Offset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OffsetChanged;
        
        /// <summary>
        /// Gets fired before the AnchorY property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnchorYChanging;
        
        /// <summary>
        /// Gets fired when the AnchorY property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnchorYChanged;
        
        /// <summary>
        /// Gets fired before the AnchorX property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnchorXChanging;
        
        /// <summary>
        /// Gets fired when the AnchorX property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AnchorXChanged;
        
        /// <summary>
        /// Gets fired before the Rotation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RotationChanging;
        
        /// <summary>
        /// Gets fired when the Rotation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RotationChanged;
        
        /// <summary>
        /// Gets fired before the DisplacementY property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DisplacementYChanging;
        
        /// <summary>
        /// Gets fired when the DisplacementY property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DisplacementYChanged;
        
        /// <summary>
        /// Gets fired before the DisplacementX property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DisplacementXChanging;
        
        /// <summary>
        /// Gets fired when the DisplacementX property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DisplacementXChanged;
        
        private static ITypedElement RetrieveTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlLabelPlacement.ClassInstance)).Resolve("type")));
        }
        
        /// <summary>
        /// Raises the TypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOffsetAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlLabelPlacement.ClassInstance)).Resolve("offset")));
        }
        
        /// <summary>
        /// Raises the OffsetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOffsetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OffsetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OffsetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOffsetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OffsetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAnchorYAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlLabelPlacement.ClassInstance)).Resolve("anchorY")));
        }
        
        /// <summary>
        /// Raises the AnchorYChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnchorYChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnchorYChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AnchorYChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnchorYChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnchorYChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAnchorXAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlLabelPlacement.ClassInstance)).Resolve("anchorX")));
        }
        
        /// <summary>
        /// Raises the AnchorXChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnchorXChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnchorXChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AnchorXChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAnchorXChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AnchorXChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRotationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlLabelPlacement.ClassInstance)).Resolve("rotation")));
        }
        
        /// <summary>
        /// Raises the RotationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRotationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RotationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RotationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRotationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RotationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDisplacementYAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlLabelPlacement.ClassInstance)).Resolve("displacementY")));
        }
        
        /// <summary>
        /// Raises the DisplacementYChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDisplacementYChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DisplacementYChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DisplacementYChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDisplacementYChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DisplacementYChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDisplacementXAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlLabelPlacement.ClassInstance)).Resolve("displacementX")));
        }
        
        /// <summary>
        /// Raises the DisplacementXChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDisplacementXChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DisplacementXChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DisplacementXChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDisplacementXChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DisplacementXChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGmlTextSymbolsReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlLabelPlacement.ClassInstance)).Resolve("GmlTextSymbols")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GmlTextSymbols property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlTextSymbolsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("GmlTextSymbols", e, _gmlTextSymbolsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GmlTextSymbols property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlTextSymbolsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GmlTextSymbols", e, _gmlTextSymbolsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TYPE"))
            {
                return this.Type;
            }
            if ((attribute == "OFFSET"))
            {
                return this.Offset;
            }
            if ((attribute == "ANCHORY"))
            {
                return this.AnchorY;
            }
            if ((attribute == "ANCHORX"))
            {
                return this.AnchorX;
            }
            if ((attribute == "ROTATION"))
            {
                return this.Rotation;
            }
            if ((attribute == "DISPLACEMENTY"))
            {
                return this.DisplacementY;
            }
            if ((attribute == "DISPLACEMENTX"))
            {
                return this.DisplacementX;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "GMLTEXTSYMBOLS"))
            {
                return this._gmlTextSymbols;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TYPE"))
            {
                this.Type = ((string)(value));
                return;
            }
            if ((feature == "OFFSET"))
            {
                this.Offset = ((string)(value));
                return;
            }
            if ((feature == "ANCHORY"))
            {
                this.AnchorY = ((string)(value));
                return;
            }
            if ((feature == "ANCHORX"))
            {
                this.AnchorX = ((string)(value));
                return;
            }
            if ((feature == "ROTATION"))
            {
                this.Rotation = ((string)(value));
                return;
            }
            if ((feature == "DISPLACEMENTY"))
            {
                this.DisplacementY = ((string)(value));
                return;
            }
            if ((feature == "DISPLACEMENTX"))
            {
                this.DisplacementX = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
                        "LabelPlacement")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the GmlLabelPlacement class
        /// </summary>
        public class GmlLabelPlacementReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private GmlLabelPlacement _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public GmlLabelPlacementReferencedElementsCollection(GmlLabelPlacement parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.GmlTextSymbols.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.GmlTextSymbols.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.GmlTextSymbols.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IGmlTextSymbol gmlTextSymbolsCasted = item.As<IGmlTextSymbol>();
                if ((gmlTextSymbolsCasted != null))
                {
                    this._parent.GmlTextSymbols.Add(gmlTextSymbolsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.GmlTextSymbols.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.GmlTextSymbols.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> gmlTextSymbolsEnumerator = this._parent.GmlTextSymbols.GetEnumerator();
                try
                {
                    for (
                    ; gmlTextSymbolsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = gmlTextSymbolsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    gmlTextSymbolsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IGmlTextSymbol gmlTextSymbolItem = item.As<IGmlTextSymbol>();
                if (((gmlTextSymbolItem != null) 
                            && this._parent.GmlTextSymbols.Remove(gmlTextSymbolItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.GmlTextSymbols).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<IGmlLabelPlacement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(IGmlLabelPlacement modelElement) : 
                    base(modelElement, "type")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the offset property
        /// </summary>
        private sealed class OffsetProxy : ModelPropertyChange<IGmlLabelPlacement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OffsetProxy(IGmlLabelPlacement modelElement) : 
                    base(modelElement, "offset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Offset;
                }
                set
                {
                    this.ModelElement.Offset = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the anchorY property
        /// </summary>
        private sealed class AnchorYProxy : ModelPropertyChange<IGmlLabelPlacement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AnchorYProxy(IGmlLabelPlacement modelElement) : 
                    base(modelElement, "anchorY")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AnchorY;
                }
                set
                {
                    this.ModelElement.AnchorY = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the anchorX property
        /// </summary>
        private sealed class AnchorXProxy : ModelPropertyChange<IGmlLabelPlacement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AnchorXProxy(IGmlLabelPlacement modelElement) : 
                    base(modelElement, "anchorX")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AnchorX;
                }
                set
                {
                    this.ModelElement.AnchorX = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rotation property
        /// </summary>
        private sealed class RotationProxy : ModelPropertyChange<IGmlLabelPlacement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RotationProxy(IGmlLabelPlacement modelElement) : 
                    base(modelElement, "rotation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Rotation;
                }
                set
                {
                    this.ModelElement.Rotation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the displacementY property
        /// </summary>
        private sealed class DisplacementYProxy : ModelPropertyChange<IGmlLabelPlacement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DisplacementYProxy(IGmlLabelPlacement modelElement) : 
                    base(modelElement, "displacementY")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.DisplacementY;
                }
                set
                {
                    this.ModelElement.DisplacementY = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the displacementX property
        /// </summary>
        private sealed class DisplacementXProxy : ModelPropertyChange<IGmlLabelPlacement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DisplacementXProxy(IGmlLabelPlacement modelElement) : 
                    base(modelElement, "displacementX")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.DisplacementX;
                }
                set
                {
                    this.ModelElement.DisplacementX = value;
                }
            }
        }
    }
}

