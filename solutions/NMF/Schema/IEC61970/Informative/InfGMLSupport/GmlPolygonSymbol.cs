//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport
{
    
    
    /// <summary>
    /// The default implementation of the GmlPolygonSymbol class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfGMLSupport")]
    [XmlNamespacePrefixAttribute("cimInfGMLSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
        "PolygonSymbol")]
    [DebuggerDisplayAttribute("GmlPolygonSymbol {UUID}")]
    public partial class GmlPolygonSymbol : GmlSymbol, IGmlPolygonSymbol, IModelElement
    {
        
        private static Lazy<ITypedElement> _gmlDiagramObjectReference = new Lazy<ITypedElement>(RetrieveGmlDiagramObjectReference);
        
        /// <summary>
        /// The backing field for the GmlDiagramObject property
        /// </summary>
        private IGmlDiagramObject _gmlDiagramObject;
        
        private static Lazy<ITypedElement> _gmlStrokeReference = new Lazy<ITypedElement>(RetrieveGmlStrokeReference);
        
        /// <summary>
        /// The backing field for the GmlStroke property
        /// </summary>
        private IGmlStroke _gmlStroke;
        
        private static Lazy<ITypedElement> _gmlFillReference = new Lazy<ITypedElement>(RetrieveGmlFillReference);
        
        /// <summary>
        /// The backing field for the GmlFill property
        /// </summary>
        private IGmlFill _gmlFill;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The GmlDiagramObject property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlPolygonSymbols")]
        public virtual IGmlDiagramObject GmlDiagramObject
        {
            get
            {
                return this._gmlDiagramObject;
            }
            set
            {
                if ((this._gmlDiagramObject != value))
                {
                    IGmlDiagramObject old = this._gmlDiagramObject;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGmlDiagramObjectChanging(e);
                    this.OnPropertyChanging("GmlDiagramObject", e, _gmlDiagramObjectReference);
                    this._gmlDiagramObject = value;
                    if ((old != null))
                    {
                        old.GmlPolygonSymbols.Remove(this);
                        old.Deleted -= this.OnResetGmlDiagramObject;
                    }
                    if ((value != null))
                    {
                        value.GmlPolygonSymbols.Add(this);
                        value.Deleted += this.OnResetGmlDiagramObject;
                    }
                    this.OnGmlDiagramObjectChanged(e);
                    this.OnPropertyChanged("GmlDiagramObject", e, _gmlDiagramObjectReference);
                }
            }
        }
        
        /// <summary>
        /// The GmlStroke property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlPolygonSymbols")]
        public virtual IGmlStroke GmlStroke
        {
            get
            {
                return this._gmlStroke;
            }
            set
            {
                if ((this._gmlStroke != value))
                {
                    IGmlStroke old = this._gmlStroke;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGmlStrokeChanging(e);
                    this.OnPropertyChanging("GmlStroke", e, _gmlStrokeReference);
                    this._gmlStroke = value;
                    if ((old != null))
                    {
                        old.GmlPolygonSymbols.Remove(this);
                        old.Deleted -= this.OnResetGmlStroke;
                    }
                    if ((value != null))
                    {
                        value.GmlPolygonSymbols.Add(this);
                        value.Deleted += this.OnResetGmlStroke;
                    }
                    this.OnGmlStrokeChanged(e);
                    this.OnPropertyChanged("GmlStroke", e, _gmlStrokeReference);
                }
            }
        }
        
        /// <summary>
        /// The GmlFill property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlPolygonSymbols")]
        public virtual IGmlFill GmlFill
        {
            get
            {
                return this._gmlFill;
            }
            set
            {
                if ((this._gmlFill != value))
                {
                    IGmlFill old = this._gmlFill;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGmlFillChanging(e);
                    this.OnPropertyChanging("GmlFill", e, _gmlFillReference);
                    this._gmlFill = value;
                    if ((old != null))
                    {
                        old.GmlPolygonSymbols.Remove(this);
                        old.Deleted -= this.OnResetGmlFill;
                    }
                    if ((value != null))
                    {
                        value.GmlPolygonSymbols.Add(this);
                        value.Deleted += this.OnResetGmlFill;
                    }
                    this.OnGmlFillChanged(e);
                    this.OnPropertyChanged("GmlFill", e, _gmlFillReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new GmlPolygonSymbolReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
                            "PolygonSymbol")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the GmlDiagramObject property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlDiagramObjectChanging;
        
        /// <summary>
        /// Gets fired when the GmlDiagramObject property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlDiagramObjectChanged;
        
        /// <summary>
        /// Gets fired before the GmlStroke property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlStrokeChanging;
        
        /// <summary>
        /// Gets fired when the GmlStroke property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlStrokeChanged;
        
        /// <summary>
        /// Gets fired before the GmlFill property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlFillChanging;
        
        /// <summary>
        /// Gets fired when the GmlFill property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlFillChanged;
        
        private static ITypedElement RetrieveGmlDiagramObjectReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlPolygonSymbol.ClassInstance)).Resolve("GmlDiagramObject")));
        }
        
        /// <summary>
        /// Raises the GmlDiagramObjectChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlDiagramObjectChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlDiagramObjectChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GmlDiagramObjectChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlDiagramObjectChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlDiagramObjectChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GmlDiagramObject property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGmlDiagramObject(object sender, System.EventArgs eventArgs)
        {
            this.GmlDiagramObject = null;
        }
        
        private static ITypedElement RetrieveGmlStrokeReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlPolygonSymbol.ClassInstance)).Resolve("GmlStroke")));
        }
        
        /// <summary>
        /// Raises the GmlStrokeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlStrokeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlStrokeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GmlStrokeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlStrokeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlStrokeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GmlStroke property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGmlStroke(object sender, System.EventArgs eventArgs)
        {
            this.GmlStroke = null;
        }
        
        private static ITypedElement RetrieveGmlFillReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlPolygonSymbol.ClassInstance)).Resolve("GmlFill")));
        }
        
        /// <summary>
        /// Raises the GmlFillChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlFillChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlFillChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GmlFillChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlFillChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlFillChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GmlFill property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGmlFill(object sender, System.EventArgs eventArgs)
        {
            this.GmlFill = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "GMLDIAGRAMOBJECT"))
            {
                this.GmlDiagramObject = ((IGmlDiagramObject)(value));
                return;
            }
            if ((feature == "GMLSTROKE"))
            {
                this.GmlStroke = ((IGmlStroke)(value));
                return;
            }
            if ((feature == "GMLFILL"))
            {
                this.GmlFill = ((IGmlFill)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "GmlDiagramObject"))
            {
                return new GmlDiagramObjectProxy(this);
            }
            if ((attribute == "GmlStroke"))
            {
                return new GmlStrokeProxy(this);
            }
            if ((attribute == "GmlFill"))
            {
                return new GmlFillProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "GmlDiagramObject"))
            {
                return new GmlDiagramObjectProxy(this);
            }
            if ((reference == "GmlStroke"))
            {
                return new GmlStrokeProxy(this);
            }
            if ((reference == "GmlFill"))
            {
                return new GmlFillProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
                        "PolygonSymbol")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the GmlPolygonSymbol class
        /// </summary>
        public class GmlPolygonSymbolReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private GmlPolygonSymbol _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public GmlPolygonSymbolReferencedElementsCollection(GmlPolygonSymbol parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.GmlDiagramObject != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.GmlStroke != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.GmlFill != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.GmlDiagramObjectChanged += this.PropagateValueChanges;
                this._parent.GmlStrokeChanged += this.PropagateValueChanges;
                this._parent.GmlFillChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.GmlDiagramObjectChanged -= this.PropagateValueChanges;
                this._parent.GmlStrokeChanged -= this.PropagateValueChanges;
                this._parent.GmlFillChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.GmlDiagramObject == null))
                {
                    IGmlDiagramObject gmlDiagramObjectCasted = item.As<IGmlDiagramObject>();
                    if ((gmlDiagramObjectCasted != null))
                    {
                        this._parent.GmlDiagramObject = gmlDiagramObjectCasted;
                        return;
                    }
                }
                if ((this._parent.GmlStroke == null))
                {
                    IGmlStroke gmlStrokeCasted = item.As<IGmlStroke>();
                    if ((gmlStrokeCasted != null))
                    {
                        this._parent.GmlStroke = gmlStrokeCasted;
                        return;
                    }
                }
                if ((this._parent.GmlFill == null))
                {
                    IGmlFill gmlFillCasted = item.As<IGmlFill>();
                    if ((gmlFillCasted != null))
                    {
                        this._parent.GmlFill = gmlFillCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.GmlDiagramObject = null;
                this._parent.GmlStroke = null;
                this._parent.GmlFill = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.GmlDiagramObject))
                {
                    return true;
                }
                if ((item == this._parent.GmlStroke))
                {
                    return true;
                }
                if ((item == this._parent.GmlFill))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.GmlDiagramObject != null))
                {
                    array[arrayIndex] = this._parent.GmlDiagramObject;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.GmlStroke != null))
                {
                    array[arrayIndex] = this._parent.GmlStroke;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.GmlFill != null))
                {
                    array[arrayIndex] = this._parent.GmlFill;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.GmlDiagramObject == item))
                {
                    this._parent.GmlDiagramObject = null;
                    return true;
                }
                if ((this._parent.GmlStroke == item))
                {
                    this._parent.GmlStroke = null;
                    return true;
                }
                if ((this._parent.GmlFill == item))
                {
                    this._parent.GmlFill = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.GmlDiagramObject).Concat(this._parent.GmlStroke).Concat(this._parent.GmlFill).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GmlDiagramObject property
        /// </summary>
        private sealed class GmlDiagramObjectProxy : ModelPropertyChange<IGmlPolygonSymbol, IGmlDiagramObject>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GmlDiagramObjectProxy(IGmlPolygonSymbol modelElement) : 
                    base(modelElement, "GmlDiagramObject")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGmlDiagramObject Value
            {
                get
                {
                    return this.ModelElement.GmlDiagramObject;
                }
                set
                {
                    this.ModelElement.GmlDiagramObject = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GmlStroke property
        /// </summary>
        private sealed class GmlStrokeProxy : ModelPropertyChange<IGmlPolygonSymbol, IGmlStroke>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GmlStrokeProxy(IGmlPolygonSymbol modelElement) : 
                    base(modelElement, "GmlStroke")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGmlStroke Value
            {
                get
                {
                    return this.ModelElement.GmlStroke;
                }
                set
                {
                    this.ModelElement.GmlStroke = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GmlFill property
        /// </summary>
        private sealed class GmlFillProxy : ModelPropertyChange<IGmlPolygonSymbol, IGmlFill>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GmlFillProxy(IGmlPolygonSymbol modelElement) : 
                    base(modelElement, "GmlFill")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGmlFill Value
            {
                get
                {
                    return this.ModelElement.GmlFill;
                }
                set
                {
                    this.ModelElement.GmlFill = value;
                }
            }
        }
    }
}

