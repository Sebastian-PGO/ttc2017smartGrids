//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport
{
    
    
    /// <summary>
    /// The default implementation of the GmlRasterSymbol class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfGMLSupport")]
    [XmlNamespacePrefixAttribute("cimInfGMLSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
        "RasterSymbol")]
    [DebuggerDisplayAttribute("GmlRasterSymbol {UUID}")]
    public partial class GmlRasterSymbol : GmlSymbol, IGmlRasterSymbol, IModelElement
    {
        
        /// <summary>
        /// The backing field for the GraySourcename property
        /// </summary>
        private string _graySourcename;
        
        private static Lazy<ITypedElement> _graySourcenameAttribute = new Lazy<ITypedElement>(RetrieveGraySourcenameAttribute);
        
        /// <summary>
        /// The backing field for the ReliefFactor property
        /// </summary>
        private string _reliefFactor;
        
        private static Lazy<ITypedElement> _reliefFactorAttribute = new Lazy<ITypedElement>(RetrieveReliefFactorAttribute);
        
        /// <summary>
        /// The backing field for the Overlapbehaviour property
        /// </summary>
        private string _overlapbehaviour;
        
        private static Lazy<ITypedElement> _overlapbehaviourAttribute = new Lazy<ITypedElement>(RetrieveOverlapbehaviourAttribute);
        
        /// <summary>
        /// The backing field for the Opacity property
        /// </summary>
        private float _opacity;
        
        private static Lazy<ITypedElement> _opacityAttribute = new Lazy<ITypedElement>(RetrieveOpacityAttribute);
        
        /// <summary>
        /// The backing field for the GreenSourceName property
        /// </summary>
        private string _greenSourceName;
        
        private static Lazy<ITypedElement> _greenSourceNameAttribute = new Lazy<ITypedElement>(RetrieveGreenSourceNameAttribute);
        
        /// <summary>
        /// The backing field for the BrighnessOnly property
        /// </summary>
        private bool _brighnessOnly;
        
        private static Lazy<ITypedElement> _brighnessOnlyAttribute = new Lazy<ITypedElement>(RetrieveBrighnessOnlyAttribute);
        
        /// <summary>
        /// The backing field for the BlueSourcename property
        /// </summary>
        private string _blueSourcename;
        
        private static Lazy<ITypedElement> _blueSourcenameAttribute = new Lazy<ITypedElement>(RetrieveBlueSourcenameAttribute);
        
        /// <summary>
        /// The backing field for the RedSourcename property
        /// </summary>
        private string _redSourcename;
        
        private static Lazy<ITypedElement> _redSourcenameAttribute = new Lazy<ITypedElement>(RetrieveRedSourcenameAttribute);
        
        private static Lazy<ITypedElement> _gmlDiagramObjectReference = new Lazy<ITypedElement>(RetrieveGmlDiagramObjectReference);
        
        /// <summary>
        /// The backing field for the GmlDiagramObject property
        /// </summary>
        private IGmlDiagramObject _gmlDiagramObject;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The graySourcename property
        /// </summary>
        [XmlElementNameAttribute("graySourcename")]
        [XmlAttributeAttribute(true)]
        public virtual string GraySourcename
        {
            get
            {
                return this._graySourcename;
            }
            set
            {
                if ((this._graySourcename != value))
                {
                    string old = this._graySourcename;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGraySourcenameChanging(e);
                    this.OnPropertyChanging("GraySourcename", e, _graySourcenameAttribute);
                    this._graySourcename = value;
                    this.OnGraySourcenameChanged(e);
                    this.OnPropertyChanged("GraySourcename", e, _graySourcenameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The reliefFactor property
        /// </summary>
        [XmlElementNameAttribute("reliefFactor")]
        [XmlAttributeAttribute(true)]
        public virtual string ReliefFactor
        {
            get
            {
                return this._reliefFactor;
            }
            set
            {
                if ((this._reliefFactor != value))
                {
                    string old = this._reliefFactor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReliefFactorChanging(e);
                    this.OnPropertyChanging("ReliefFactor", e, _reliefFactorAttribute);
                    this._reliefFactor = value;
                    this.OnReliefFactorChanged(e);
                    this.OnPropertyChanged("ReliefFactor", e, _reliefFactorAttribute);
                }
            }
        }
        
        /// <summary>
        /// The overlapbehaviour property
        /// </summary>
        [XmlElementNameAttribute("overlapbehaviour")]
        [XmlAttributeAttribute(true)]
        public virtual string Overlapbehaviour
        {
            get
            {
                return this._overlapbehaviour;
            }
            set
            {
                if ((this._overlapbehaviour != value))
                {
                    string old = this._overlapbehaviour;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOverlapbehaviourChanging(e);
                    this.OnPropertyChanging("Overlapbehaviour", e, _overlapbehaviourAttribute);
                    this._overlapbehaviour = value;
                    this.OnOverlapbehaviourChanged(e);
                    this.OnPropertyChanged("Overlapbehaviour", e, _overlapbehaviourAttribute);
                }
            }
        }
        
        /// <summary>
        /// The opacity property
        /// </summary>
        [XmlElementNameAttribute("opacity")]
        [XmlAttributeAttribute(true)]
        public virtual float Opacity
        {
            get
            {
                return this._opacity;
            }
            set
            {
                if ((this._opacity != value))
                {
                    float old = this._opacity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpacityChanging(e);
                    this.OnPropertyChanging("Opacity", e, _opacityAttribute);
                    this._opacity = value;
                    this.OnOpacityChanged(e);
                    this.OnPropertyChanged("Opacity", e, _opacityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The greenSourceName property
        /// </summary>
        [XmlElementNameAttribute("greenSourceName")]
        [XmlAttributeAttribute(true)]
        public virtual string GreenSourceName
        {
            get
            {
                return this._greenSourceName;
            }
            set
            {
                if ((this._greenSourceName != value))
                {
                    string old = this._greenSourceName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGreenSourceNameChanging(e);
                    this.OnPropertyChanging("GreenSourceName", e, _greenSourceNameAttribute);
                    this._greenSourceName = value;
                    this.OnGreenSourceNameChanged(e);
                    this.OnPropertyChanged("GreenSourceName", e, _greenSourceNameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The brighnessOnly property
        /// </summary>
        [XmlElementNameAttribute("brighnessOnly")]
        [XmlAttributeAttribute(true)]
        public virtual bool BrighnessOnly
        {
            get
            {
                return this._brighnessOnly;
            }
            set
            {
                if ((this._brighnessOnly != value))
                {
                    bool old = this._brighnessOnly;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBrighnessOnlyChanging(e);
                    this.OnPropertyChanging("BrighnessOnly", e, _brighnessOnlyAttribute);
                    this._brighnessOnly = value;
                    this.OnBrighnessOnlyChanged(e);
                    this.OnPropertyChanged("BrighnessOnly", e, _brighnessOnlyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The blueSourcename property
        /// </summary>
        [XmlElementNameAttribute("blueSourcename")]
        [XmlAttributeAttribute(true)]
        public virtual string BlueSourcename
        {
            get
            {
                return this._blueSourcename;
            }
            set
            {
                if ((this._blueSourcename != value))
                {
                    string old = this._blueSourcename;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBlueSourcenameChanging(e);
                    this.OnPropertyChanging("BlueSourcename", e, _blueSourcenameAttribute);
                    this._blueSourcename = value;
                    this.OnBlueSourcenameChanged(e);
                    this.OnPropertyChanged("BlueSourcename", e, _blueSourcenameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The redSourcename property
        /// </summary>
        [XmlElementNameAttribute("redSourcename")]
        [XmlAttributeAttribute(true)]
        public virtual string RedSourcename
        {
            get
            {
                return this._redSourcename;
            }
            set
            {
                if ((this._redSourcename != value))
                {
                    string old = this._redSourcename;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRedSourcenameChanging(e);
                    this.OnPropertyChanging("RedSourcename", e, _redSourcenameAttribute);
                    this._redSourcename = value;
                    this.OnRedSourcenameChanged(e);
                    this.OnPropertyChanged("RedSourcename", e, _redSourcenameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The GmlDiagramObject property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GmlRasterSymbols")]
        public virtual IGmlDiagramObject GmlDiagramObject
        {
            get
            {
                return this._gmlDiagramObject;
            }
            set
            {
                if ((this._gmlDiagramObject != value))
                {
                    IGmlDiagramObject old = this._gmlDiagramObject;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGmlDiagramObjectChanging(e);
                    this.OnPropertyChanging("GmlDiagramObject", e, _gmlDiagramObjectReference);
                    this._gmlDiagramObject = value;
                    if ((old != null))
                    {
                        old.GmlRasterSymbols.Remove(this);
                        old.Deleted -= this.OnResetGmlDiagramObject;
                    }
                    if ((value != null))
                    {
                        value.GmlRasterSymbols.Add(this);
                        value.Deleted += this.OnResetGmlDiagramObject;
                    }
                    this.OnGmlDiagramObjectChanged(e);
                    this.OnPropertyChanged("GmlDiagramObject", e, _gmlDiagramObjectReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new GmlRasterSymbolReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
                            "RasterSymbol")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the GraySourcename property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GraySourcenameChanging;
        
        /// <summary>
        /// Gets fired when the GraySourcename property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GraySourcenameChanged;
        
        /// <summary>
        /// Gets fired before the ReliefFactor property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReliefFactorChanging;
        
        /// <summary>
        /// Gets fired when the ReliefFactor property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReliefFactorChanged;
        
        /// <summary>
        /// Gets fired before the Overlapbehaviour property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OverlapbehaviourChanging;
        
        /// <summary>
        /// Gets fired when the Overlapbehaviour property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OverlapbehaviourChanged;
        
        /// <summary>
        /// Gets fired before the Opacity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpacityChanging;
        
        /// <summary>
        /// Gets fired when the Opacity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpacityChanged;
        
        /// <summary>
        /// Gets fired before the GreenSourceName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GreenSourceNameChanging;
        
        /// <summary>
        /// Gets fired when the GreenSourceName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GreenSourceNameChanged;
        
        /// <summary>
        /// Gets fired before the BrighnessOnly property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BrighnessOnlyChanging;
        
        /// <summary>
        /// Gets fired when the BrighnessOnly property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BrighnessOnlyChanged;
        
        /// <summary>
        /// Gets fired before the BlueSourcename property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlueSourcenameChanging;
        
        /// <summary>
        /// Gets fired when the BlueSourcename property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlueSourcenameChanged;
        
        /// <summary>
        /// Gets fired before the RedSourcename property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RedSourcenameChanging;
        
        /// <summary>
        /// Gets fired when the RedSourcename property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RedSourcenameChanged;
        
        /// <summary>
        /// Gets fired before the GmlDiagramObject property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlDiagramObjectChanging;
        
        /// <summary>
        /// Gets fired when the GmlDiagramObject property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmlDiagramObjectChanged;
        
        private static ITypedElement RetrieveGraySourcenameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlRasterSymbol.ClassInstance)).Resolve("graySourcename")));
        }
        
        /// <summary>
        /// Raises the GraySourcenameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGraySourcenameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GraySourcenameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GraySourcenameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGraySourcenameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GraySourcenameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReliefFactorAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlRasterSymbol.ClassInstance)).Resolve("reliefFactor")));
        }
        
        /// <summary>
        /// Raises the ReliefFactorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReliefFactorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReliefFactorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReliefFactorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReliefFactorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReliefFactorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOverlapbehaviourAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlRasterSymbol.ClassInstance)).Resolve("overlapbehaviour")));
        }
        
        /// <summary>
        /// Raises the OverlapbehaviourChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOverlapbehaviourChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OverlapbehaviourChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OverlapbehaviourChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOverlapbehaviourChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OverlapbehaviourChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOpacityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlRasterSymbol.ClassInstance)).Resolve("opacity")));
        }
        
        /// <summary>
        /// Raises the OpacityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpacityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpacityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpacityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpacityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpacityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGreenSourceNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlRasterSymbol.ClassInstance)).Resolve("greenSourceName")));
        }
        
        /// <summary>
        /// Raises the GreenSourceNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGreenSourceNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GreenSourceNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GreenSourceNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGreenSourceNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GreenSourceNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBrighnessOnlyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlRasterSymbol.ClassInstance)).Resolve("brighnessOnly")));
        }
        
        /// <summary>
        /// Raises the BrighnessOnlyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBrighnessOnlyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BrighnessOnlyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BrighnessOnlyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBrighnessOnlyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BrighnessOnlyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBlueSourcenameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlRasterSymbol.ClassInstance)).Resolve("blueSourcename")));
        }
        
        /// <summary>
        /// Raises the BlueSourcenameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlueSourcenameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlueSourcenameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BlueSourcenameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlueSourcenameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlueSourcenameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRedSourcenameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GmlRasterSymbol.ClassInstance)).Resolve("redSourcename")));
        }
        
        /// <summary>
        /// Raises the RedSourcenameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRedSourcenameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RedSourcenameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RedSourcenameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRedSourcenameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RedSourcenameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGmlDiagramObjectReference()
        {
            return ((ITypedElement)(((ModelElement)(GmlRasterSymbol.ClassInstance)).Resolve("GmlDiagramObject")));
        }
        
        /// <summary>
        /// Raises the GmlDiagramObjectChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlDiagramObjectChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlDiagramObjectChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GmlDiagramObjectChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmlDiagramObjectChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmlDiagramObjectChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GmlDiagramObject property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGmlDiagramObject(object sender, System.EventArgs eventArgs)
        {
            this.GmlDiagramObject = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "GRAYSOURCENAME"))
            {
                return this.GraySourcename;
            }
            if ((attribute == "RELIEFFACTOR"))
            {
                return this.ReliefFactor;
            }
            if ((attribute == "OVERLAPBEHAVIOUR"))
            {
                return this.Overlapbehaviour;
            }
            if ((attribute == "OPACITY"))
            {
                return this.Opacity;
            }
            if ((attribute == "GREENSOURCENAME"))
            {
                return this.GreenSourceName;
            }
            if ((attribute == "BRIGHNESSONLY"))
            {
                return this.BrighnessOnly;
            }
            if ((attribute == "BLUESOURCENAME"))
            {
                return this.BlueSourcename;
            }
            if ((attribute == "REDSOURCENAME"))
            {
                return this.RedSourcename;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "GMLDIAGRAMOBJECT"))
            {
                this.GmlDiagramObject = ((IGmlDiagramObject)(value));
                return;
            }
            if ((feature == "GRAYSOURCENAME"))
            {
                this.GraySourcename = ((string)(value));
                return;
            }
            if ((feature == "RELIEFFACTOR"))
            {
                this.ReliefFactor = ((string)(value));
                return;
            }
            if ((feature == "OVERLAPBEHAVIOUR"))
            {
                this.Overlapbehaviour = ((string)(value));
                return;
            }
            if ((feature == "OPACITY"))
            {
                this.Opacity = ((float)(value));
                return;
            }
            if ((feature == "GREENSOURCENAME"))
            {
                this.GreenSourceName = ((string)(value));
                return;
            }
            if ((feature == "BRIGHNESSONLY"))
            {
                this.BrighnessOnly = ((bool)(value));
                return;
            }
            if ((feature == "BLUESOURCENAME"))
            {
                this.BlueSourcename = ((string)(value));
                return;
            }
            if ((feature == "REDSOURCENAME"))
            {
                this.RedSourcename = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "GmlDiagramObject"))
            {
                return new GmlDiagramObjectProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "GmlDiagramObject"))
            {
                return new GmlDiagramObjectProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfGMLSupport/Gml" +
                        "RasterSymbol")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the GmlRasterSymbol class
        /// </summary>
        public class GmlRasterSymbolReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private GmlRasterSymbol _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public GmlRasterSymbolReferencedElementsCollection(GmlRasterSymbol parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.GmlDiagramObject != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.GmlDiagramObjectChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.GmlDiagramObjectChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.GmlDiagramObject == null))
                {
                    IGmlDiagramObject gmlDiagramObjectCasted = item.As<IGmlDiagramObject>();
                    if ((gmlDiagramObjectCasted != null))
                    {
                        this._parent.GmlDiagramObject = gmlDiagramObjectCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.GmlDiagramObject = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.GmlDiagramObject))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.GmlDiagramObject != null))
                {
                    array[arrayIndex] = this._parent.GmlDiagramObject;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.GmlDiagramObject == item))
                {
                    this._parent.GmlDiagramObject = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.GmlDiagramObject).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the graySourcename property
        /// </summary>
        private sealed class GraySourcenameProxy : ModelPropertyChange<IGmlRasterSymbol, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GraySourcenameProxy(IGmlRasterSymbol modelElement) : 
                    base(modelElement, "graySourcename")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.GraySourcename;
                }
                set
                {
                    this.ModelElement.GraySourcename = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the reliefFactor property
        /// </summary>
        private sealed class ReliefFactorProxy : ModelPropertyChange<IGmlRasterSymbol, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReliefFactorProxy(IGmlRasterSymbol modelElement) : 
                    base(modelElement, "reliefFactor")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ReliefFactor;
                }
                set
                {
                    this.ModelElement.ReliefFactor = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the overlapbehaviour property
        /// </summary>
        private sealed class OverlapbehaviourProxy : ModelPropertyChange<IGmlRasterSymbol, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OverlapbehaviourProxy(IGmlRasterSymbol modelElement) : 
                    base(modelElement, "overlapbehaviour")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Overlapbehaviour;
                }
                set
                {
                    this.ModelElement.Overlapbehaviour = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the opacity property
        /// </summary>
        private sealed class OpacityProxy : ModelPropertyChange<IGmlRasterSymbol, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpacityProxy(IGmlRasterSymbol modelElement) : 
                    base(modelElement, "opacity")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Opacity;
                }
                set
                {
                    this.ModelElement.Opacity = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the greenSourceName property
        /// </summary>
        private sealed class GreenSourceNameProxy : ModelPropertyChange<IGmlRasterSymbol, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GreenSourceNameProxy(IGmlRasterSymbol modelElement) : 
                    base(modelElement, "greenSourceName")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.GreenSourceName;
                }
                set
                {
                    this.ModelElement.GreenSourceName = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the brighnessOnly property
        /// </summary>
        private sealed class BrighnessOnlyProxy : ModelPropertyChange<IGmlRasterSymbol, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BrighnessOnlyProxy(IGmlRasterSymbol modelElement) : 
                    base(modelElement, "brighnessOnly")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.BrighnessOnly;
                }
                set
                {
                    this.ModelElement.BrighnessOnly = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the blueSourcename property
        /// </summary>
        private sealed class BlueSourcenameProxy : ModelPropertyChange<IGmlRasterSymbol, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BlueSourcenameProxy(IGmlRasterSymbol modelElement) : 
                    base(modelElement, "blueSourcename")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.BlueSourcename;
                }
                set
                {
                    this.ModelElement.BlueSourcename = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the redSourcename property
        /// </summary>
        private sealed class RedSourcenameProxy : ModelPropertyChange<IGmlRasterSymbol, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RedSourcenameProxy(IGmlRasterSymbol modelElement) : 
                    base(modelElement, "redSourcename")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.RedSourcename;
                }
                set
                {
                    this.ModelElement.RedSourcename = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GmlDiagramObject property
        /// </summary>
        private sealed class GmlDiagramObjectProxy : ModelPropertyChange<IGmlRasterSymbol, IGmlDiagramObject>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GmlDiagramObjectProxy(IGmlRasterSymbol modelElement) : 
                    base(modelElement, "GmlDiagramObject")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGmlDiagramObject Value
            {
                get
                {
                    return this.ModelElement.GmlDiagramObject;
                }
                set
                {
                    this.ModelElement.GmlDiagramObject = value;
                }
            }
        }
    }
}

