//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport
{
    
    
    /// <summary>
    /// The public interface for GmlRasterSymbol
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(GmlRasterSymbol))]
    [XmlDefaultImplementationTypeAttribute(typeof(GmlRasterSymbol))]
    public interface IGmlRasterSymbol : IModelElement, IGmlSymbol
    {
        
        /// <summary>
        /// The graySourcename property
        /// </summary>
        string GraySourcename
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reliefFactor property
        /// </summary>
        string ReliefFactor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The overlapbehaviour property
        /// </summary>
        string Overlapbehaviour
        {
            get;
            set;
        }
        
        /// <summary>
        /// The opacity property
        /// </summary>
        float Opacity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The greenSourceName property
        /// </summary>
        string GreenSourceName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The brighnessOnly property
        /// </summary>
        bool BrighnessOnly
        {
            get;
            set;
        }
        
        /// <summary>
        /// The blueSourcename property
        /// </summary>
        string BlueSourcename
        {
            get;
            set;
        }
        
        /// <summary>
        /// The redSourcename property
        /// </summary>
        string RedSourcename
        {
            get;
            set;
        }
        
        /// <summary>
        /// The GmlDiagramObject property
        /// </summary>
        IGmlDiagramObject GmlDiagramObject
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the GraySourcename property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GraySourcenameChanging;
        
        /// <summary>
        /// Gets fired when the GraySourcename property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GraySourcenameChanged;
        
        /// <summary>
        /// Gets fired before the ReliefFactor property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReliefFactorChanging;
        
        /// <summary>
        /// Gets fired when the ReliefFactor property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReliefFactorChanged;
        
        /// <summary>
        /// Gets fired before the Overlapbehaviour property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OverlapbehaviourChanging;
        
        /// <summary>
        /// Gets fired when the Overlapbehaviour property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OverlapbehaviourChanged;
        
        /// <summary>
        /// Gets fired before the Opacity property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OpacityChanging;
        
        /// <summary>
        /// Gets fired when the Opacity property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OpacityChanged;
        
        /// <summary>
        /// Gets fired before the GreenSourceName property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GreenSourceNameChanging;
        
        /// <summary>
        /// Gets fired when the GreenSourceName property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GreenSourceNameChanged;
        
        /// <summary>
        /// Gets fired before the BrighnessOnly property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BrighnessOnlyChanging;
        
        /// <summary>
        /// Gets fired when the BrighnessOnly property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BrighnessOnlyChanged;
        
        /// <summary>
        /// Gets fired before the BlueSourcename property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BlueSourcenameChanging;
        
        /// <summary>
        /// Gets fired when the BlueSourcename property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BlueSourcenameChanged;
        
        /// <summary>
        /// Gets fired before the RedSourcename property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RedSourcenameChanging;
        
        /// <summary>
        /// Gets fired when the RedSourcename property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RedSourcenameChanged;
        
        /// <summary>
        /// Gets fired before the GmlDiagramObject property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GmlDiagramObjectChanging;
        
        /// <summary>
        /// Gets fired when the GmlDiagramObject property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GmlDiagramObjectChanged;
    }
}

