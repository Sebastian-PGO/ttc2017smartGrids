using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the Project class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Project")]
    [DebuggerDisplayAttribute("Project {UUID}")]
    public partial class Project : Document, IProject, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Budget property
        /// </summary>
        private float _budget;
        
        private static Lazy<ITypedElement> _budgetAttribute = new Lazy<ITypedElement>(RetrieveBudgetAttribute);
        
        private static Lazy<ITypedElement> _erpProjectAccountingReference = new Lazy<ITypedElement>(RetrieveErpProjectAccountingReference);
        
        /// <summary>
        /// The backing field for the ErpProjectAccounting property
        /// </summary>
        private IErpProjectAccounting _erpProjectAccounting;
        
        private static Lazy<ITypedElement> _worksReference = new Lazy<ITypedElement>(RetrieveWorksReference);
        
        /// <summary>
        /// The backing field for the Works property
        /// </summary>
        private ProjectWorksCollection _works;
        
        private static Lazy<ITypedElement> _requestsReference = new Lazy<ITypedElement>(RetrieveRequestsReference);
        
        /// <summary>
        /// The backing field for the Requests property
        /// </summary>
        private ProjectRequestsCollection _requests;
        
        private static Lazy<ITypedElement> _businessCaseReference = new Lazy<ITypedElement>(RetrieveBusinessCaseReference);
        
        /// <summary>
        /// The backing field for the BusinessCase property
        /// </summary>
        private IBusinessCase _businessCase;
        
        private static Lazy<ITypedElement> _subProjectsReference = new Lazy<ITypedElement>(RetrieveSubProjectsReference);
        
        /// <summary>
        /// The backing field for the SubProjects property
        /// </summary>
        private ProjectSubProjectsCollection _subProjects;
        
        private static Lazy<ITypedElement> _parentProjectReference = new Lazy<ITypedElement>(RetrieveParentProjectReference);
        
        /// <summary>
        /// The backing field for the ParentProject property
        /// </summary>
        private IProject _parentProject;
        
        private static IClass _classInstance;
        
        public Project()
        {
            this._works = new ProjectWorksCollection(this);
            this._works.CollectionChanging += this.WorksCollectionChanging;
            this._works.CollectionChanged += this.WorksCollectionChanged;
            this._requests = new ProjectRequestsCollection(this);
            this._requests.CollectionChanging += this.RequestsCollectionChanging;
            this._requests.CollectionChanged += this.RequestsCollectionChanged;
            this._subProjects = new ProjectSubProjectsCollection(this);
            this._subProjects.CollectionChanging += this.SubProjectsCollectionChanging;
            this._subProjects.CollectionChanged += this.SubProjectsCollectionChanged;
        }
        
        /// <summary>
        /// The budget property
        /// </summary>
        [XmlElementNameAttribute("budget")]
        [XmlAttributeAttribute(true)]
        public virtual float Budget
        {
            get
            {
                return this._budget;
            }
            set
            {
                if ((this._budget != value))
                {
                    float old = this._budget;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBudgetChanging(e);
                    this.OnPropertyChanging("Budget", e, _budgetAttribute);
                    this._budget = value;
                    this.OnBudgetChanged(e);
                    this.OnPropertyChanged("Budget", e, _budgetAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ErpProjectAccounting property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Projects")]
        public virtual IErpProjectAccounting ErpProjectAccounting
        {
            get
            {
                return this._erpProjectAccounting;
            }
            set
            {
                if ((this._erpProjectAccounting != value))
                {
                    IErpProjectAccounting old = this._erpProjectAccounting;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpProjectAccountingChanging(e);
                    this.OnPropertyChanging("ErpProjectAccounting", e, _erpProjectAccountingReference);
                    this._erpProjectAccounting = value;
                    if ((old != null))
                    {
                        old.Projects.Remove(this);
                        old.Deleted -= this.OnResetErpProjectAccounting;
                    }
                    if ((value != null))
                    {
                        value.Projects.Add(this);
                        value.Deleted += this.OnResetErpProjectAccounting;
                    }
                    this.OnErpProjectAccountingChanged(e);
                    this.OnPropertyChanged("ErpProjectAccounting", e, _erpProjectAccountingReference);
                }
            }
        }
        
        /// <summary>
        /// The Works property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Project")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWork> Works
        {
            get
            {
                return this._works;
            }
        }
        
        /// <summary>
        /// The Requests property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Projects")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IRequest> Requests
        {
            get
            {
                return this._requests;
            }
        }
        
        /// <summary>
        /// The BusinessCase property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Projects")]
        public virtual IBusinessCase BusinessCase
        {
            get
            {
                return this._businessCase;
            }
            set
            {
                if ((this._businessCase != value))
                {
                    IBusinessCase old = this._businessCase;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBusinessCaseChanging(e);
                    this.OnPropertyChanging("BusinessCase", e, _businessCaseReference);
                    this._businessCase = value;
                    if ((old != null))
                    {
                        old.Projects.Remove(this);
                        old.Deleted -= this.OnResetBusinessCase;
                    }
                    if ((value != null))
                    {
                        value.Projects.Add(this);
                        value.Deleted += this.OnResetBusinessCase;
                    }
                    this.OnBusinessCaseChanged(e);
                    this.OnPropertyChanged("BusinessCase", e, _businessCaseReference);
                }
            }
        }
        
        /// <summary>
        /// The SubProjects property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ParentProject")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IProject> SubProjects
        {
            get
            {
                return this._subProjects;
            }
        }
        
        /// <summary>
        /// The ParentProject property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SubProjects")]
        public virtual IProject ParentProject
        {
            get
            {
                return this._parentProject;
            }
            set
            {
                if ((this._parentProject != value))
                {
                    IProject old = this._parentProject;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnParentProjectChanging(e);
                    this.OnPropertyChanging("ParentProject", e, _parentProjectReference);
                    this._parentProject = value;
                    if ((old != null))
                    {
                        old.SubProjects.Remove(this);
                        old.Deleted -= this.OnResetParentProject;
                    }
                    if ((value != null))
                    {
                        value.SubProjects.Add(this);
                        value.Deleted += this.OnResetParentProject;
                    }
                    this.OnParentProjectChanged(e);
                    this.OnPropertyChanged("ParentProject", e, _parentProjectReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ProjectReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Project")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Budget property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BudgetChanging;
        
        /// <summary>
        /// Gets fired when the Budget property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BudgetChanged;
        
        /// <summary>
        /// Gets fired before the ErpProjectAccounting property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpProjectAccountingChanging;
        
        /// <summary>
        /// Gets fired when the ErpProjectAccounting property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpProjectAccountingChanged;
        
        /// <summary>
        /// Gets fired before the BusinessCase property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BusinessCaseChanging;
        
        /// <summary>
        /// Gets fired when the BusinessCase property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BusinessCaseChanged;
        
        /// <summary>
        /// Gets fired before the ParentProject property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ParentProjectChanging;
        
        /// <summary>
        /// Gets fired when the ParentProject property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ParentProjectChanged;
        
        private static ITypedElement RetrieveBudgetAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Project.ClassInstance)).Resolve("budget")));
        }
        
        /// <summary>
        /// Raises the BudgetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBudgetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BudgetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BudgetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBudgetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BudgetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveErpProjectAccountingReference()
        {
            return ((ITypedElement)(((ModelElement)(Project.ClassInstance)).Resolve("ErpProjectAccounting")));
        }
        
        /// <summary>
        /// Raises the ErpProjectAccountingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpProjectAccountingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpProjectAccountingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpProjectAccountingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpProjectAccountingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpProjectAccountingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpProjectAccounting property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpProjectAccounting(object sender, System.EventArgs eventArgs)
        {
            this.ErpProjectAccounting = null;
        }
        
        private static ITypedElement RetrieveWorksReference()
        {
            return ((ITypedElement)(((ModelElement)(Project.ClassInstance)).Resolve("Works")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Works property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorksCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Works", e, _worksReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Works property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorksCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Works", e, _worksReference);
        }
        
        private static ITypedElement RetrieveRequestsReference()
        {
            return ((ITypedElement)(((ModelElement)(Project.ClassInstance)).Resolve("Requests")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Requests property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RequestsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Requests", e, _requestsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Requests property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RequestsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Requests", e, _requestsReference);
        }
        
        private static ITypedElement RetrieveBusinessCaseReference()
        {
            return ((ITypedElement)(((ModelElement)(Project.ClassInstance)).Resolve("BusinessCase")));
        }
        
        /// <summary>
        /// Raises the BusinessCaseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBusinessCaseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BusinessCaseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BusinessCaseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBusinessCaseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BusinessCaseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BusinessCase property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBusinessCase(object sender, System.EventArgs eventArgs)
        {
            this.BusinessCase = null;
        }
        
        private static ITypedElement RetrieveSubProjectsReference()
        {
            return ((ITypedElement)(((ModelElement)(Project.ClassInstance)).Resolve("SubProjects")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SubProjects property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SubProjectsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("SubProjects", e, _subProjectsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SubProjects property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SubProjectsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SubProjects", e, _subProjectsReference);
        }
        
        private static ITypedElement RetrieveParentProjectReference()
        {
            return ((ITypedElement)(((ModelElement)(Project.ClassInstance)).Resolve("ParentProject")));
        }
        
        /// <summary>
        /// Raises the ParentProjectChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParentProjectChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ParentProjectChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ParentProjectChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParentProjectChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ParentProjectChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ParentProject property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetParentProject(object sender, System.EventArgs eventArgs)
        {
            this.ParentProject = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "BUDGET"))
            {
                return this.Budget;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "WORKS"))
            {
                return this._works;
            }
            if ((feature == "REQUESTS"))
            {
                return this._requests;
            }
            if ((feature == "SUBPROJECTS"))
            {
                return this._subProjects;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ERPPROJECTACCOUNTING"))
            {
                this.ErpProjectAccounting = ((IErpProjectAccounting)(value));
                return;
            }
            if ((feature == "BUSINESSCASE"))
            {
                this.BusinessCase = ((IBusinessCase)(value));
                return;
            }
            if ((feature == "PARENTPROJECT"))
            {
                this.ParentProject = ((IProject)(value));
                return;
            }
            if ((feature == "BUDGET"))
            {
                this.Budget = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ErpProjectAccounting"))
            {
                return new ErpProjectAccountingProxy(this);
            }
            if ((attribute == "BusinessCase"))
            {
                return new BusinessCaseProxy(this);
            }
            if ((attribute == "ParentProject"))
            {
                return new ParentProjectProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ErpProjectAccounting"))
            {
                return new ErpProjectAccountingProxy(this);
            }
            if ((reference == "BusinessCase"))
            {
                return new BusinessCaseProxy(this);
            }
            if ((reference == "ParentProject"))
            {
                return new ParentProjectProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Project")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Project class
        /// </summary>
        public class ProjectReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Project _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ProjectReferencedElementsCollection(Project parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ErpProjectAccounting != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Works.Count);
                    count = (count + this._parent.Requests.Count);
                    if ((this._parent.BusinessCase != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.SubProjects.Count);
                    if ((this._parent.ParentProject != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ErpProjectAccountingChanged += this.PropagateValueChanges;
                this._parent.Works.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Requests.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BusinessCaseChanged += this.PropagateValueChanges;
                this._parent.SubProjects.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ParentProjectChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ErpProjectAccountingChanged -= this.PropagateValueChanges;
                this._parent.Works.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Requests.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BusinessCaseChanged -= this.PropagateValueChanges;
                this._parent.SubProjects.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ParentProjectChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ErpProjectAccounting == null))
                {
                    IErpProjectAccounting erpProjectAccountingCasted = item.As<IErpProjectAccounting>();
                    if ((erpProjectAccountingCasted != null))
                    {
                        this._parent.ErpProjectAccounting = erpProjectAccountingCasted;
                        return;
                    }
                }
                IWork worksCasted = item.As<IWork>();
                if ((worksCasted != null))
                {
                    this._parent.Works.Add(worksCasted);
                }
                IRequest requestsCasted = item.As<IRequest>();
                if ((requestsCasted != null))
                {
                    this._parent.Requests.Add(requestsCasted);
                }
                if ((this._parent.BusinessCase == null))
                {
                    IBusinessCase businessCaseCasted = item.As<IBusinessCase>();
                    if ((businessCaseCasted != null))
                    {
                        this._parent.BusinessCase = businessCaseCasted;
                        return;
                    }
                }
                IProject subProjectsCasted = item.As<IProject>();
                if ((subProjectsCasted != null))
                {
                    this._parent.SubProjects.Add(subProjectsCasted);
                }
                if ((this._parent.ParentProject == null))
                {
                    IProject parentProjectCasted = item.As<IProject>();
                    if ((parentProjectCasted != null))
                    {
                        this._parent.ParentProject = parentProjectCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ErpProjectAccounting = null;
                this._parent.Works.Clear();
                this._parent.Requests.Clear();
                this._parent.BusinessCase = null;
                this._parent.SubProjects.Clear();
                this._parent.ParentProject = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ErpProjectAccounting))
                {
                    return true;
                }
                if (this._parent.Works.Contains(item))
                {
                    return true;
                }
                if (this._parent.Requests.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.BusinessCase))
                {
                    return true;
                }
                if (this._parent.SubProjects.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ParentProject))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ErpProjectAccounting != null))
                {
                    array[arrayIndex] = this._parent.ErpProjectAccounting;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> worksEnumerator = this._parent.Works.GetEnumerator();
                try
                {
                    for (
                    ; worksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = worksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    worksEnumerator.Dispose();
                }
                IEnumerator<IModelElement> requestsEnumerator = this._parent.Requests.GetEnumerator();
                try
                {
                    for (
                    ; requestsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = requestsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    requestsEnumerator.Dispose();
                }
                if ((this._parent.BusinessCase != null))
                {
                    array[arrayIndex] = this._parent.BusinessCase;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> subProjectsEnumerator = this._parent.SubProjects.GetEnumerator();
                try
                {
                    for (
                    ; subProjectsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = subProjectsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    subProjectsEnumerator.Dispose();
                }
                if ((this._parent.ParentProject != null))
                {
                    array[arrayIndex] = this._parent.ParentProject;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ErpProjectAccounting == item))
                {
                    this._parent.ErpProjectAccounting = null;
                    return true;
                }
                IWork workItem = item.As<IWork>();
                if (((workItem != null) 
                            && this._parent.Works.Remove(workItem)))
                {
                    return true;
                }
                IRequest requestItem = item.As<IRequest>();
                if (((requestItem != null) 
                            && this._parent.Requests.Remove(requestItem)))
                {
                    return true;
                }
                if ((this._parent.BusinessCase == item))
                {
                    this._parent.BusinessCase = null;
                    return true;
                }
                IProject projectItem = item.As<IProject>();
                if (((projectItem != null) 
                            && this._parent.SubProjects.Remove(projectItem)))
                {
                    return true;
                }
                if ((this._parent.ParentProject == item))
                {
                    this._parent.ParentProject = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ErpProjectAccounting).Concat(this._parent.Works).Concat(this._parent.Requests).Concat(this._parent.BusinessCase).Concat(this._parent.SubProjects).Concat(this._parent.ParentProject).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the budget property
        /// </summary>
        private sealed class BudgetProxy : ModelPropertyChange<IProject, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BudgetProxy(IProject modelElement) : 
                    base(modelElement, "budget")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Budget;
                }
                set
                {
                    this.ModelElement.Budget = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpProjectAccounting property
        /// </summary>
        private sealed class ErpProjectAccountingProxy : ModelPropertyChange<IProject, IErpProjectAccounting>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpProjectAccountingProxy(IProject modelElement) : 
                    base(modelElement, "ErpProjectAccounting")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpProjectAccounting Value
            {
                get
                {
                    return this.ModelElement.ErpProjectAccounting;
                }
                set
                {
                    this.ModelElement.ErpProjectAccounting = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BusinessCase property
        /// </summary>
        private sealed class BusinessCaseProxy : ModelPropertyChange<IProject, IBusinessCase>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BusinessCaseProxy(IProject modelElement) : 
                    base(modelElement, "BusinessCase")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBusinessCase Value
            {
                get
                {
                    return this.ModelElement.BusinessCase;
                }
                set
                {
                    this.ModelElement.BusinessCase = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ParentProject property
        /// </summary>
        private sealed class ParentProjectProxy : ModelPropertyChange<IProject, IProject>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ParentProjectProxy(IProject modelElement) : 
                    base(modelElement, "ParentProject")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IProject Value
            {
                get
                {
                    return this.ModelElement.ParentProject;
                }
                set
                {
                    this.ModelElement.ParentProject = value;
                }
            }
        }
    }
}

