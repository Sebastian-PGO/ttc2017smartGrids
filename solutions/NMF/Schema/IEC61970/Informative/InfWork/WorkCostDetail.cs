using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the WorkCostDetail class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/WorkCostD" +
        "etail")]
    [DebuggerDisplayAttribute("WorkCostDetail {UUID}")]
    public partial class WorkCostDetail : Document, IWorkCostDetail, IModelElement
    {
        
        /// <summary>
        /// The backing field for the TransactionDateTime property
        /// </summary>
        private DateTime _transactionDateTime;
        
        private static Lazy<ITypedElement> _transactionDateTimeAttribute = new Lazy<ITypedElement>(RetrieveTransactionDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the Amount property
        /// </summary>
        private float _amount;
        
        private static Lazy<ITypedElement> _amountAttribute = new Lazy<ITypedElement>(RetrieveAmountAttribute);
        
        /// <summary>
        /// The backing field for the IsDebit property
        /// </summary>
        private bool _isDebit;
        
        private static Lazy<ITypedElement> _isDebitAttribute = new Lazy<ITypedElement>(RetrieveIsDebitAttribute);
        
        /// <summary>
        /// The backing field for the Type property
        /// </summary>
        private string _type;
        
        private static Lazy<ITypedElement> _typeAttribute = new Lazy<ITypedElement>(RetrieveTypeAttribute);
        
        private static Lazy<ITypedElement> _costTypeReference = new Lazy<ITypedElement>(RetrieveCostTypeReference);
        
        /// <summary>
        /// The backing field for the CostType property
        /// </summary>
        private ICostType _costType;
        
        private static Lazy<ITypedElement> _contractorItemsReference = new Lazy<ITypedElement>(RetrieveContractorItemsReference);
        
        /// <summary>
        /// The backing field for the ContractorItems property
        /// </summary>
        private WorkCostDetailContractorItemsCollection _contractorItems;
        
        private static Lazy<ITypedElement> _materialItemsReference = new Lazy<ITypedElement>(RetrieveMaterialItemsReference);
        
        /// <summary>
        /// The backing field for the MaterialItems property
        /// </summary>
        private WorkCostDetailMaterialItemsCollection _materialItems;
        
        private static Lazy<ITypedElement> _equipmentItemsReference = new Lazy<ITypedElement>(RetrieveEquipmentItemsReference);
        
        /// <summary>
        /// The backing field for the EquipmentItems property
        /// </summary>
        private WorkCostDetailEquipmentItemsCollection _equipmentItems;
        
        private static Lazy<ITypedElement> _propertyUnitsReference = new Lazy<ITypedElement>(RetrievePropertyUnitsReference);
        
        /// <summary>
        /// The backing field for the PropertyUnits property
        /// </summary>
        private WorkCostDetailPropertyUnitsCollection _propertyUnits;
        
        private static Lazy<ITypedElement> _designReference = new Lazy<ITypedElement>(RetrieveDesignReference);
        
        /// <summary>
        /// The backing field for the Design property
        /// </summary>
        private IDesign _design;
        
        private static Lazy<ITypedElement> _miscCostItemsReference = new Lazy<ITypedElement>(RetrieveMiscCostItemsReference);
        
        /// <summary>
        /// The backing field for the MiscCostItems property
        /// </summary>
        private WorkCostDetailMiscCostItemsCollection _miscCostItems;
        
        private static Lazy<ITypedElement> _workCostSummaryReference = new Lazy<ITypedElement>(RetrieveWorkCostSummaryReference);
        
        /// <summary>
        /// The backing field for the WorkCostSummary property
        /// </summary>
        private IWorkCostSummary _workCostSummary;
        
        private static Lazy<ITypedElement> _workTaskReference = new Lazy<ITypedElement>(RetrieveWorkTaskReference);
        
        /// <summary>
        /// The backing field for the WorkTask property
        /// </summary>
        private IWorkTask _workTask;
        
        private static Lazy<ITypedElement> _overheadCostReference = new Lazy<ITypedElement>(RetrieveOverheadCostReference);
        
        /// <summary>
        /// The backing field for the OverheadCost property
        /// </summary>
        private IOverheadCost _overheadCost;
        
        private static Lazy<ITypedElement> _worksReference = new Lazy<ITypedElement>(RetrieveWorksReference);
        
        /// <summary>
        /// The backing field for the Works property
        /// </summary>
        private WorkCostDetailWorksCollection _works;
        
        private static Lazy<ITypedElement> _laborItemsReference = new Lazy<ITypedElement>(RetrieveLaborItemsReference);
        
        /// <summary>
        /// The backing field for the LaborItems property
        /// </summary>
        private WorkCostDetailLaborItemsCollection _laborItems;
        
        private static Lazy<ITypedElement> _erpProjectAccountingReference = new Lazy<ITypedElement>(RetrieveErpProjectAccountingReference);
        
        /// <summary>
        /// The backing field for the ErpProjectAccounting property
        /// </summary>
        private IErpProjectAccounting _erpProjectAccounting;
        
        private static IClass _classInstance;
        
        public WorkCostDetail()
        {
            this._contractorItems = new WorkCostDetailContractorItemsCollection(this);
            this._contractorItems.CollectionChanging += this.ContractorItemsCollectionChanging;
            this._contractorItems.CollectionChanged += this.ContractorItemsCollectionChanged;
            this._materialItems = new WorkCostDetailMaterialItemsCollection(this);
            this._materialItems.CollectionChanging += this.MaterialItemsCollectionChanging;
            this._materialItems.CollectionChanged += this.MaterialItemsCollectionChanged;
            this._equipmentItems = new WorkCostDetailEquipmentItemsCollection(this);
            this._equipmentItems.CollectionChanging += this.EquipmentItemsCollectionChanging;
            this._equipmentItems.CollectionChanged += this.EquipmentItemsCollectionChanged;
            this._propertyUnits = new WorkCostDetailPropertyUnitsCollection(this);
            this._propertyUnits.CollectionChanging += this.PropertyUnitsCollectionChanging;
            this._propertyUnits.CollectionChanged += this.PropertyUnitsCollectionChanged;
            this._miscCostItems = new WorkCostDetailMiscCostItemsCollection(this);
            this._miscCostItems.CollectionChanging += this.MiscCostItemsCollectionChanging;
            this._miscCostItems.CollectionChanged += this.MiscCostItemsCollectionChanged;
            this._works = new WorkCostDetailWorksCollection(this);
            this._works.CollectionChanging += this.WorksCollectionChanging;
            this._works.CollectionChanged += this.WorksCollectionChanged;
            this._laborItems = new WorkCostDetailLaborItemsCollection(this);
            this._laborItems.CollectionChanging += this.LaborItemsCollectionChanging;
            this._laborItems.CollectionChanged += this.LaborItemsCollectionChanged;
        }
        
        /// <summary>
        /// The transactionDateTime property
        /// </summary>
        [XmlElementNameAttribute("transactionDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime TransactionDateTime
        {
            get
            {
                return this._transactionDateTime;
            }
            set
            {
                if ((this._transactionDateTime != value))
                {
                    DateTime old = this._transactionDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransactionDateTimeChanging(e);
                    this.OnPropertyChanging("TransactionDateTime", e, _transactionDateTimeAttribute);
                    this._transactionDateTime = value;
                    this.OnTransactionDateTimeChanged(e);
                    this.OnPropertyChanged("TransactionDateTime", e, _transactionDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The amount property
        /// </summary>
        [XmlElementNameAttribute("amount")]
        [XmlAttributeAttribute(true)]
        public virtual float Amount
        {
            get
            {
                return this._amount;
            }
            set
            {
                if ((this._amount != value))
                {
                    float old = this._amount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmountChanging(e);
                    this.OnPropertyChanging("Amount", e, _amountAttribute);
                    this._amount = value;
                    this.OnAmountChanged(e);
                    this.OnPropertyChanged("Amount", e, _amountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The isDebit property
        /// </summary>
        [XmlElementNameAttribute("isDebit")]
        [XmlAttributeAttribute(true)]
        public virtual bool IsDebit
        {
            get
            {
                return this._isDebit;
            }
            set
            {
                if ((this._isDebit != value))
                {
                    bool old = this._isDebit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsDebitChanging(e);
                    this.OnPropertyChanging("IsDebit", e, _isDebitAttribute);
                    this._isDebit = value;
                    this.OnIsDebitChanged(e);
                    this.OnPropertyChanged("IsDebit", e, _isDebitAttribute);
                }
            }
        }
        
        /// <summary>
        /// The type property
        /// </summary>
        [XmlElementNameAttribute("type")]
        [XmlAttributeAttribute(true)]
        public virtual string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    string old = this._type;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeChanging(e);
                    this.OnPropertyChanging("Type", e, _typeAttribute);
                    this._type = value;
                    this.OnTypeChanged(e);
                    this.OnPropertyChanged("Type", e, _typeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The CostType property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkCostDetails")]
        public virtual ICostType CostType
        {
            get
            {
                return this._costType;
            }
            set
            {
                if ((this._costType != value))
                {
                    ICostType old = this._costType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCostTypeChanging(e);
                    this.OnPropertyChanging("CostType", e, _costTypeReference);
                    this._costType = value;
                    if ((old != null))
                    {
                        old.WorkCostDetails.Remove(this);
                        old.Deleted -= this.OnResetCostType;
                    }
                    if ((value != null))
                    {
                        value.WorkCostDetails.Add(this);
                        value.Deleted += this.OnResetCostType;
                    }
                    this.OnCostTypeChanged(e);
                    this.OnPropertyChanged("CostType", e, _costTypeReference);
                }
            }
        }
        
        /// <summary>
        /// The ContractorItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkCostDetail")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IContractorItem> ContractorItems
        {
            get
            {
                return this._contractorItems;
            }
        }
        
        /// <summary>
        /// The MaterialItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkCostDetail")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMaterialItem> MaterialItems
        {
            get
            {
                return this._materialItems;
            }
        }
        
        /// <summary>
        /// The EquipmentItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkCostDetail")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEquipmentItem> EquipmentItems
        {
            get
            {
                return this._equipmentItems;
            }
        }
        
        /// <summary>
        /// The PropertyUnits property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkCostDetails")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IPropertyUnit> PropertyUnits
        {
            get
            {
                return this._propertyUnits;
            }
        }
        
        /// <summary>
        /// The Design property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkCostDetails")]
        public virtual IDesign Design
        {
            get
            {
                return this._design;
            }
            set
            {
                if ((this._design != value))
                {
                    IDesign old = this._design;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDesignChanging(e);
                    this.OnPropertyChanging("Design", e, _designReference);
                    this._design = value;
                    if ((old != null))
                    {
                        old.WorkCostDetails.Remove(this);
                        old.Deleted -= this.OnResetDesign;
                    }
                    if ((value != null))
                    {
                        value.WorkCostDetails.Add(this);
                        value.Deleted += this.OnResetDesign;
                    }
                    this.OnDesignChanged(e);
                    this.OnPropertyChanged("Design", e, _designReference);
                }
            }
        }
        
        /// <summary>
        /// The MiscCostItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkCostDetail")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMiscCostItem> MiscCostItems
        {
            get
            {
                return this._miscCostItems;
            }
        }
        
        /// <summary>
        /// The WorkCostSummary property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkCostDetail")]
        public virtual IWorkCostSummary WorkCostSummary
        {
            get
            {
                return this._workCostSummary;
            }
            set
            {
                if ((this._workCostSummary != value))
                {
                    IWorkCostSummary old = this._workCostSummary;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWorkCostSummaryChanging(e);
                    this.OnPropertyChanging("WorkCostSummary", e, _workCostSummaryReference);
                    this._workCostSummary = value;
                    if ((old != null))
                    {
                        old.WorkCostDetail = null;
                        old.Deleted -= this.OnResetWorkCostSummary;
                    }
                    if ((value != null))
                    {
                        value.WorkCostDetail = this;
                        value.Deleted += this.OnResetWorkCostSummary;
                    }
                    this.OnWorkCostSummaryChanged(e);
                    this.OnPropertyChanged("WorkCostSummary", e, _workCostSummaryReference);
                }
            }
        }
        
        /// <summary>
        /// The WorkTask property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkCostDetails")]
        public virtual IWorkTask WorkTask
        {
            get
            {
                return this._workTask;
            }
            set
            {
                if ((this._workTask != value))
                {
                    IWorkTask old = this._workTask;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWorkTaskChanging(e);
                    this.OnPropertyChanging("WorkTask", e, _workTaskReference);
                    this._workTask = value;
                    if ((old != null))
                    {
                        old.WorkCostDetails.Remove(this);
                        old.Deleted -= this.OnResetWorkTask;
                    }
                    if ((value != null))
                    {
                        value.WorkCostDetails.Add(this);
                        value.Deleted += this.OnResetWorkTask;
                    }
                    this.OnWorkTaskChanged(e);
                    this.OnPropertyChanged("WorkTask", e, _workTaskReference);
                }
            }
        }
        
        /// <summary>
        /// The OverheadCost property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkCostDetails")]
        public virtual IOverheadCost OverheadCost
        {
            get
            {
                return this._overheadCost;
            }
            set
            {
                if ((this._overheadCost != value))
                {
                    IOverheadCost old = this._overheadCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOverheadCostChanging(e);
                    this.OnPropertyChanging("OverheadCost", e, _overheadCostReference);
                    this._overheadCost = value;
                    if ((old != null))
                    {
                        old.WorkCostDetails.Remove(this);
                        old.Deleted -= this.OnResetOverheadCost;
                    }
                    if ((value != null))
                    {
                        value.WorkCostDetails.Add(this);
                        value.Deleted += this.OnResetOverheadCost;
                    }
                    this.OnOverheadCostChanged(e);
                    this.OnPropertyChanged("OverheadCost", e, _overheadCostReference);
                }
            }
        }
        
        /// <summary>
        /// The Works property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkCostDetails")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWork> Works
        {
            get
            {
                return this._works;
            }
        }
        
        /// <summary>
        /// The LaborItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkCostDetail")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILaborItem> LaborItems
        {
            get
            {
                return this._laborItems;
            }
        }
        
        /// <summary>
        /// The ErpProjectAccounting property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkCostDetails")]
        public virtual IErpProjectAccounting ErpProjectAccounting
        {
            get
            {
                return this._erpProjectAccounting;
            }
            set
            {
                if ((this._erpProjectAccounting != value))
                {
                    IErpProjectAccounting old = this._erpProjectAccounting;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpProjectAccountingChanging(e);
                    this.OnPropertyChanging("ErpProjectAccounting", e, _erpProjectAccountingReference);
                    this._erpProjectAccounting = value;
                    if ((old != null))
                    {
                        old.WorkCostDetails.Remove(this);
                        old.Deleted -= this.OnResetErpProjectAccounting;
                    }
                    if ((value != null))
                    {
                        value.WorkCostDetails.Add(this);
                        value.Deleted += this.OnResetErpProjectAccounting;
                    }
                    this.OnErpProjectAccountingChanged(e);
                    this.OnPropertyChanged("ErpProjectAccounting", e, _erpProjectAccountingReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new WorkCostDetailReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/WorkCostD" +
                            "etail")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the TransactionDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransactionDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the TransactionDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransactionDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the Amount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmountChanging;
        
        /// <summary>
        /// Gets fired when the Amount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmountChanged;
        
        /// <summary>
        /// Gets fired before the IsDebit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsDebitChanging;
        
        /// <summary>
        /// Gets fired when the IsDebit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsDebitChanged;
        
        /// <summary>
        /// Gets fired before the Type property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanging;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanged;
        
        /// <summary>
        /// Gets fired before the CostType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostTypeChanging;
        
        /// <summary>
        /// Gets fired when the CostType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostTypeChanged;
        
        /// <summary>
        /// Gets fired before the Design property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DesignChanging;
        
        /// <summary>
        /// Gets fired when the Design property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DesignChanged;
        
        /// <summary>
        /// Gets fired before the WorkCostSummary property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkCostSummaryChanging;
        
        /// <summary>
        /// Gets fired when the WorkCostSummary property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkCostSummaryChanged;
        
        /// <summary>
        /// Gets fired before the WorkTask property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkTaskChanging;
        
        /// <summary>
        /// Gets fired when the WorkTask property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkTaskChanged;
        
        /// <summary>
        /// Gets fired before the OverheadCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OverheadCostChanging;
        
        /// <summary>
        /// Gets fired when the OverheadCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OverheadCostChanged;
        
        /// <summary>
        /// Gets fired before the ErpProjectAccounting property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpProjectAccountingChanging;
        
        /// <summary>
        /// Gets fired when the ErpProjectAccounting property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpProjectAccountingChanged;
        
        private static ITypedElement RetrieveTransactionDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WorkCostDetail.ClassInstance)).Resolve("transactionDateTime")));
        }
        
        /// <summary>
        /// Raises the TransactionDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransactionDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransactionDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransactionDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransactionDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransactionDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAmountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WorkCostDetail.ClassInstance)).Resolve("amount")));
        }
        
        /// <summary>
        /// Raises the AmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIsDebitAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WorkCostDetail.ClassInstance)).Resolve("isDebit")));
        }
        
        /// <summary>
        /// Raises the IsDebitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsDebitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsDebitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsDebitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsDebitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsDebitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WorkCostDetail.ClassInstance)).Resolve("type")));
        }
        
        /// <summary>
        /// Raises the TypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCostTypeReference()
        {
            return ((ITypedElement)(((ModelElement)(WorkCostDetail.ClassInstance)).Resolve("CostType")));
        }
        
        /// <summary>
        /// Raises the CostTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CostTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CostType property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCostType(object sender, System.EventArgs eventArgs)
        {
            this.CostType = null;
        }
        
        private static ITypedElement RetrieveContractorItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(WorkCostDetail.ClassInstance)).Resolve("ContractorItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ContractorItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ContractorItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ContractorItems", e, _contractorItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ContractorItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ContractorItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ContractorItems", e, _contractorItemsReference);
        }
        
        private static ITypedElement RetrieveMaterialItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(WorkCostDetail.ClassInstance)).Resolve("MaterialItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MaterialItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MaterialItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("MaterialItems", e, _materialItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MaterialItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MaterialItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MaterialItems", e, _materialItemsReference);
        }
        
        private static ITypedElement RetrieveEquipmentItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(WorkCostDetail.ClassInstance)).Resolve("EquipmentItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EquipmentItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EquipmentItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("EquipmentItems", e, _equipmentItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EquipmentItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EquipmentItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EquipmentItems", e, _equipmentItemsReference);
        }
        
        private static ITypedElement RetrievePropertyUnitsReference()
        {
            return ((ITypedElement)(((ModelElement)(WorkCostDetail.ClassInstance)).Resolve("PropertyUnits")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PropertyUnits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PropertyUnitsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("PropertyUnits", e, _propertyUnitsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PropertyUnits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PropertyUnitsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PropertyUnits", e, _propertyUnitsReference);
        }
        
        private static ITypedElement RetrieveDesignReference()
        {
            return ((ITypedElement)(((ModelElement)(WorkCostDetail.ClassInstance)).Resolve("Design")));
        }
        
        /// <summary>
        /// Raises the DesignChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDesignChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DesignChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DesignChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDesignChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DesignChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Design property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDesign(object sender, System.EventArgs eventArgs)
        {
            this.Design = null;
        }
        
        private static ITypedElement RetrieveMiscCostItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(WorkCostDetail.ClassInstance)).Resolve("MiscCostItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MiscCostItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MiscCostItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("MiscCostItems", e, _miscCostItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MiscCostItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MiscCostItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MiscCostItems", e, _miscCostItemsReference);
        }
        
        private static ITypedElement RetrieveWorkCostSummaryReference()
        {
            return ((ITypedElement)(((ModelElement)(WorkCostDetail.ClassInstance)).Resolve("WorkCostSummary")));
        }
        
        /// <summary>
        /// Raises the WorkCostSummaryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkCostSummaryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkCostSummaryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WorkCostSummaryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkCostSummaryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkCostSummaryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the WorkCostSummary property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWorkCostSummary(object sender, System.EventArgs eventArgs)
        {
            this.WorkCostSummary = null;
        }
        
        private static ITypedElement RetrieveWorkTaskReference()
        {
            return ((ITypedElement)(((ModelElement)(WorkCostDetail.ClassInstance)).Resolve("WorkTask")));
        }
        
        /// <summary>
        /// Raises the WorkTaskChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkTaskChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkTaskChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WorkTaskChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkTaskChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkTaskChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the WorkTask property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWorkTask(object sender, System.EventArgs eventArgs)
        {
            this.WorkTask = null;
        }
        
        private static ITypedElement RetrieveOverheadCostReference()
        {
            return ((ITypedElement)(((ModelElement)(WorkCostDetail.ClassInstance)).Resolve("OverheadCost")));
        }
        
        /// <summary>
        /// Raises the OverheadCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOverheadCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OverheadCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OverheadCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOverheadCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OverheadCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OverheadCost property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOverheadCost(object sender, System.EventArgs eventArgs)
        {
            this.OverheadCost = null;
        }
        
        private static ITypedElement RetrieveWorksReference()
        {
            return ((ITypedElement)(((ModelElement)(WorkCostDetail.ClassInstance)).Resolve("Works")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Works property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorksCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Works", e, _worksReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Works property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorksCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Works", e, _worksReference);
        }
        
        private static ITypedElement RetrieveLaborItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(WorkCostDetail.ClassInstance)).Resolve("LaborItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the LaborItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LaborItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("LaborItems", e, _laborItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the LaborItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LaborItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("LaborItems", e, _laborItemsReference);
        }
        
        private static ITypedElement RetrieveErpProjectAccountingReference()
        {
            return ((ITypedElement)(((ModelElement)(WorkCostDetail.ClassInstance)).Resolve("ErpProjectAccounting")));
        }
        
        /// <summary>
        /// Raises the ErpProjectAccountingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpProjectAccountingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpProjectAccountingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpProjectAccountingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpProjectAccountingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpProjectAccountingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpProjectAccounting property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpProjectAccounting(object sender, System.EventArgs eventArgs)
        {
            this.ErpProjectAccounting = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TRANSACTIONDATETIME"))
            {
                return this.TransactionDateTime;
            }
            if ((attribute == "AMOUNT"))
            {
                return this.Amount;
            }
            if ((attribute == "ISDEBIT"))
            {
                return this.IsDebit;
            }
            if ((attribute == "TYPE"))
            {
                return this.Type;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CONTRACTORITEMS"))
            {
                return this._contractorItems;
            }
            if ((feature == "MATERIALITEMS"))
            {
                return this._materialItems;
            }
            if ((feature == "EQUIPMENTITEMS"))
            {
                return this._equipmentItems;
            }
            if ((feature == "PROPERTYUNITS"))
            {
                return this._propertyUnits;
            }
            if ((feature == "MISCCOSTITEMS"))
            {
                return this._miscCostItems;
            }
            if ((feature == "WORKS"))
            {
                return this._works;
            }
            if ((feature == "LABORITEMS"))
            {
                return this._laborItems;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "COSTTYPE"))
            {
                this.CostType = ((ICostType)(value));
                return;
            }
            if ((feature == "DESIGN"))
            {
                this.Design = ((IDesign)(value));
                return;
            }
            if ((feature == "WORKCOSTSUMMARY"))
            {
                this.WorkCostSummary = ((IWorkCostSummary)(value));
                return;
            }
            if ((feature == "WORKTASK"))
            {
                this.WorkTask = ((IWorkTask)(value));
                return;
            }
            if ((feature == "OVERHEADCOST"))
            {
                this.OverheadCost = ((IOverheadCost)(value));
                return;
            }
            if ((feature == "ERPPROJECTACCOUNTING"))
            {
                this.ErpProjectAccounting = ((IErpProjectAccounting)(value));
                return;
            }
            if ((feature == "TRANSACTIONDATETIME"))
            {
                this.TransactionDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "AMOUNT"))
            {
                this.Amount = ((float)(value));
                return;
            }
            if ((feature == "ISDEBIT"))
            {
                this.IsDebit = ((bool)(value));
                return;
            }
            if ((feature == "TYPE"))
            {
                this.Type = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CostType"))
            {
                return new CostTypeProxy(this);
            }
            if ((attribute == "Design"))
            {
                return new DesignProxy(this);
            }
            if ((attribute == "WorkCostSummary"))
            {
                return new WorkCostSummaryProxy(this);
            }
            if ((attribute == "WorkTask"))
            {
                return new WorkTaskProxy(this);
            }
            if ((attribute == "OverheadCost"))
            {
                return new OverheadCostProxy(this);
            }
            if ((attribute == "ErpProjectAccounting"))
            {
                return new ErpProjectAccountingProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CostType"))
            {
                return new CostTypeProxy(this);
            }
            if ((reference == "Design"))
            {
                return new DesignProxy(this);
            }
            if ((reference == "WorkCostSummary"))
            {
                return new WorkCostSummaryProxy(this);
            }
            if ((reference == "WorkTask"))
            {
                return new WorkTaskProxy(this);
            }
            if ((reference == "OverheadCost"))
            {
                return new OverheadCostProxy(this);
            }
            if ((reference == "ErpProjectAccounting"))
            {
                return new ErpProjectAccountingProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/WorkCostD" +
                        "etail")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the WorkCostDetail class
        /// </summary>
        public class WorkCostDetailReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private WorkCostDetail _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public WorkCostDetailReferencedElementsCollection(WorkCostDetail parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.CostType != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ContractorItems.Count);
                    count = (count + this._parent.MaterialItems.Count);
                    count = (count + this._parent.EquipmentItems.Count);
                    count = (count + this._parent.PropertyUnits.Count);
                    if ((this._parent.Design != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.MiscCostItems.Count);
                    if ((this._parent.WorkCostSummary != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.WorkTask != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OverheadCost != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Works.Count);
                    count = (count + this._parent.LaborItems.Count);
                    if ((this._parent.ErpProjectAccounting != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CostTypeChanged += this.PropagateValueChanges;
                this._parent.ContractorItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MaterialItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.EquipmentItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PropertyUnits.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DesignChanged += this.PropagateValueChanges;
                this._parent.MiscCostItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WorkCostSummaryChanged += this.PropagateValueChanges;
                this._parent.WorkTaskChanged += this.PropagateValueChanges;
                this._parent.OverheadCostChanged += this.PropagateValueChanges;
                this._parent.Works.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.LaborItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpProjectAccountingChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CostTypeChanged -= this.PropagateValueChanges;
                this._parent.ContractorItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MaterialItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.EquipmentItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PropertyUnits.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DesignChanged -= this.PropagateValueChanges;
                this._parent.MiscCostItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WorkCostSummaryChanged -= this.PropagateValueChanges;
                this._parent.WorkTaskChanged -= this.PropagateValueChanges;
                this._parent.OverheadCostChanged -= this.PropagateValueChanges;
                this._parent.Works.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.LaborItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpProjectAccountingChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.CostType == null))
                {
                    ICostType costTypeCasted = item.As<ICostType>();
                    if ((costTypeCasted != null))
                    {
                        this._parent.CostType = costTypeCasted;
                        return;
                    }
                }
                IContractorItem contractorItemsCasted = item.As<IContractorItem>();
                if ((contractorItemsCasted != null))
                {
                    this._parent.ContractorItems.Add(contractorItemsCasted);
                }
                IMaterialItem materialItemsCasted = item.As<IMaterialItem>();
                if ((materialItemsCasted != null))
                {
                    this._parent.MaterialItems.Add(materialItemsCasted);
                }
                IEquipmentItem equipmentItemsCasted = item.As<IEquipmentItem>();
                if ((equipmentItemsCasted != null))
                {
                    this._parent.EquipmentItems.Add(equipmentItemsCasted);
                }
                IPropertyUnit propertyUnitsCasted = item.As<IPropertyUnit>();
                if ((propertyUnitsCasted != null))
                {
                    this._parent.PropertyUnits.Add(propertyUnitsCasted);
                }
                if ((this._parent.Design == null))
                {
                    IDesign designCasted = item.As<IDesign>();
                    if ((designCasted != null))
                    {
                        this._parent.Design = designCasted;
                        return;
                    }
                }
                IMiscCostItem miscCostItemsCasted = item.As<IMiscCostItem>();
                if ((miscCostItemsCasted != null))
                {
                    this._parent.MiscCostItems.Add(miscCostItemsCasted);
                }
                if ((this._parent.WorkCostSummary == null))
                {
                    IWorkCostSummary workCostSummaryCasted = item.As<IWorkCostSummary>();
                    if ((workCostSummaryCasted != null))
                    {
                        this._parent.WorkCostSummary = workCostSummaryCasted;
                        return;
                    }
                }
                if ((this._parent.WorkTask == null))
                {
                    IWorkTask workTaskCasted = item.As<IWorkTask>();
                    if ((workTaskCasted != null))
                    {
                        this._parent.WorkTask = workTaskCasted;
                        return;
                    }
                }
                if ((this._parent.OverheadCost == null))
                {
                    IOverheadCost overheadCostCasted = item.As<IOverheadCost>();
                    if ((overheadCostCasted != null))
                    {
                        this._parent.OverheadCost = overheadCostCasted;
                        return;
                    }
                }
                IWork worksCasted = item.As<IWork>();
                if ((worksCasted != null))
                {
                    this._parent.Works.Add(worksCasted);
                }
                ILaborItem laborItemsCasted = item.As<ILaborItem>();
                if ((laborItemsCasted != null))
                {
                    this._parent.LaborItems.Add(laborItemsCasted);
                }
                if ((this._parent.ErpProjectAccounting == null))
                {
                    IErpProjectAccounting erpProjectAccountingCasted = item.As<IErpProjectAccounting>();
                    if ((erpProjectAccountingCasted != null))
                    {
                        this._parent.ErpProjectAccounting = erpProjectAccountingCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CostType = null;
                this._parent.ContractorItems.Clear();
                this._parent.MaterialItems.Clear();
                this._parent.EquipmentItems.Clear();
                this._parent.PropertyUnits.Clear();
                this._parent.Design = null;
                this._parent.MiscCostItems.Clear();
                this._parent.WorkCostSummary = null;
                this._parent.WorkTask = null;
                this._parent.OverheadCost = null;
                this._parent.Works.Clear();
                this._parent.LaborItems.Clear();
                this._parent.ErpProjectAccounting = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.CostType))
                {
                    return true;
                }
                if (this._parent.ContractorItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.MaterialItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.EquipmentItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.PropertyUnits.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Design))
                {
                    return true;
                }
                if (this._parent.MiscCostItems.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.WorkCostSummary))
                {
                    return true;
                }
                if ((item == this._parent.WorkTask))
                {
                    return true;
                }
                if ((item == this._parent.OverheadCost))
                {
                    return true;
                }
                if (this._parent.Works.Contains(item))
                {
                    return true;
                }
                if (this._parent.LaborItems.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ErpProjectAccounting))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.CostType != null))
                {
                    array[arrayIndex] = this._parent.CostType;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> contractorItemsEnumerator = this._parent.ContractorItems.GetEnumerator();
                try
                {
                    for (
                    ; contractorItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = contractorItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    contractorItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> materialItemsEnumerator = this._parent.MaterialItems.GetEnumerator();
                try
                {
                    for (
                    ; materialItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = materialItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    materialItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> equipmentItemsEnumerator = this._parent.EquipmentItems.GetEnumerator();
                try
                {
                    for (
                    ; equipmentItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = equipmentItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    equipmentItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> propertyUnitsEnumerator = this._parent.PropertyUnits.GetEnumerator();
                try
                {
                    for (
                    ; propertyUnitsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = propertyUnitsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    propertyUnitsEnumerator.Dispose();
                }
                if ((this._parent.Design != null))
                {
                    array[arrayIndex] = this._parent.Design;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> miscCostItemsEnumerator = this._parent.MiscCostItems.GetEnumerator();
                try
                {
                    for (
                    ; miscCostItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = miscCostItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    miscCostItemsEnumerator.Dispose();
                }
                if ((this._parent.WorkCostSummary != null))
                {
                    array[arrayIndex] = this._parent.WorkCostSummary;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.WorkTask != null))
                {
                    array[arrayIndex] = this._parent.WorkTask;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OverheadCost != null))
                {
                    array[arrayIndex] = this._parent.OverheadCost;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> worksEnumerator = this._parent.Works.GetEnumerator();
                try
                {
                    for (
                    ; worksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = worksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    worksEnumerator.Dispose();
                }
                IEnumerator<IModelElement> laborItemsEnumerator = this._parent.LaborItems.GetEnumerator();
                try
                {
                    for (
                    ; laborItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = laborItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    laborItemsEnumerator.Dispose();
                }
                if ((this._parent.ErpProjectAccounting != null))
                {
                    array[arrayIndex] = this._parent.ErpProjectAccounting;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.CostType == item))
                {
                    this._parent.CostType = null;
                    return true;
                }
                IContractorItem contractorItemItem = item.As<IContractorItem>();
                if (((contractorItemItem != null) 
                            && this._parent.ContractorItems.Remove(contractorItemItem)))
                {
                    return true;
                }
                IMaterialItem materialItemItem = item.As<IMaterialItem>();
                if (((materialItemItem != null) 
                            && this._parent.MaterialItems.Remove(materialItemItem)))
                {
                    return true;
                }
                IEquipmentItem equipmentItemItem = item.As<IEquipmentItem>();
                if (((equipmentItemItem != null) 
                            && this._parent.EquipmentItems.Remove(equipmentItemItem)))
                {
                    return true;
                }
                IPropertyUnit propertyUnitItem = item.As<IPropertyUnit>();
                if (((propertyUnitItem != null) 
                            && this._parent.PropertyUnits.Remove(propertyUnitItem)))
                {
                    return true;
                }
                if ((this._parent.Design == item))
                {
                    this._parent.Design = null;
                    return true;
                }
                IMiscCostItem miscCostItemItem = item.As<IMiscCostItem>();
                if (((miscCostItemItem != null) 
                            && this._parent.MiscCostItems.Remove(miscCostItemItem)))
                {
                    return true;
                }
                if ((this._parent.WorkCostSummary == item))
                {
                    this._parent.WorkCostSummary = null;
                    return true;
                }
                if ((this._parent.WorkTask == item))
                {
                    this._parent.WorkTask = null;
                    return true;
                }
                if ((this._parent.OverheadCost == item))
                {
                    this._parent.OverheadCost = null;
                    return true;
                }
                IWork workItem = item.As<IWork>();
                if (((workItem != null) 
                            && this._parent.Works.Remove(workItem)))
                {
                    return true;
                }
                ILaborItem laborItemItem = item.As<ILaborItem>();
                if (((laborItemItem != null) 
                            && this._parent.LaborItems.Remove(laborItemItem)))
                {
                    return true;
                }
                if ((this._parent.ErpProjectAccounting == item))
                {
                    this._parent.ErpProjectAccounting = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CostType).Concat(this._parent.ContractorItems).Concat(this._parent.MaterialItems).Concat(this._parent.EquipmentItems).Concat(this._parent.PropertyUnits).Concat(this._parent.Design).Concat(this._parent.MiscCostItems).Concat(this._parent.WorkCostSummary).Concat(this._parent.WorkTask).Concat(this._parent.OverheadCost).Concat(this._parent.Works).Concat(this._parent.LaborItems).Concat(this._parent.ErpProjectAccounting).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the transactionDateTime property
        /// </summary>
        private sealed class TransactionDateTimeProxy : ModelPropertyChange<IWorkCostDetail, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransactionDateTimeProxy(IWorkCostDetail modelElement) : 
                    base(modelElement, "transactionDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.TransactionDateTime;
                }
                set
                {
                    this.ModelElement.TransactionDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the amount property
        /// </summary>
        private sealed class AmountProxy : ModelPropertyChange<IWorkCostDetail, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AmountProxy(IWorkCostDetail modelElement) : 
                    base(modelElement, "amount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Amount;
                }
                set
                {
                    this.ModelElement.Amount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isDebit property
        /// </summary>
        private sealed class IsDebitProxy : ModelPropertyChange<IWorkCostDetail, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsDebitProxy(IWorkCostDetail modelElement) : 
                    base(modelElement, "isDebit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsDebit;
                }
                set
                {
                    this.ModelElement.IsDebit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<IWorkCostDetail, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(IWorkCostDetail modelElement) : 
                    base(modelElement, "type")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CostType property
        /// </summary>
        private sealed class CostTypeProxy : ModelPropertyChange<IWorkCostDetail, ICostType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CostTypeProxy(IWorkCostDetail modelElement) : 
                    base(modelElement, "CostType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICostType Value
            {
                get
                {
                    return this.ModelElement.CostType;
                }
                set
                {
                    this.ModelElement.CostType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Design property
        /// </summary>
        private sealed class DesignProxy : ModelPropertyChange<IWorkCostDetail, IDesign>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DesignProxy(IWorkCostDetail modelElement) : 
                    base(modelElement, "Design")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDesign Value
            {
                get
                {
                    return this.ModelElement.Design;
                }
                set
                {
                    this.ModelElement.Design = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the WorkCostSummary property
        /// </summary>
        private sealed class WorkCostSummaryProxy : ModelPropertyChange<IWorkCostDetail, IWorkCostSummary>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WorkCostSummaryProxy(IWorkCostDetail modelElement) : 
                    base(modelElement, "WorkCostSummary")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWorkCostSummary Value
            {
                get
                {
                    return this.ModelElement.WorkCostSummary;
                }
                set
                {
                    this.ModelElement.WorkCostSummary = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the WorkTask property
        /// </summary>
        private sealed class WorkTaskProxy : ModelPropertyChange<IWorkCostDetail, IWorkTask>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WorkTaskProxy(IWorkCostDetail modelElement) : 
                    base(modelElement, "WorkTask")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWorkTask Value
            {
                get
                {
                    return this.ModelElement.WorkTask;
                }
                set
                {
                    this.ModelElement.WorkTask = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OverheadCost property
        /// </summary>
        private sealed class OverheadCostProxy : ModelPropertyChange<IWorkCostDetail, IOverheadCost>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OverheadCostProxy(IWorkCostDetail modelElement) : 
                    base(modelElement, "OverheadCost")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOverheadCost Value
            {
                get
                {
                    return this.ModelElement.OverheadCost;
                }
                set
                {
                    this.ModelElement.OverheadCost = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpProjectAccounting property
        /// </summary>
        private sealed class ErpProjectAccountingProxy : ModelPropertyChange<IWorkCostDetail, IErpProjectAccounting>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpProjectAccountingProxy(IWorkCostDetail modelElement) : 
                    base(modelElement, "ErpProjectAccounting")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpProjectAccounting Value
            {
                get
                {
                    return this.ModelElement.ErpProjectAccounting;
                }
                set
                {
                    this.ModelElement.ErpProjectAccounting = value;
                }
            }
        }
    }
}

