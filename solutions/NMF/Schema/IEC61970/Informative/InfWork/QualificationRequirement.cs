//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the QualificationRequirement class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Qualifica" +
        "tionRequirement")]
    [DebuggerDisplayAttribute("QualificationRequirement {UUID}")]
    public partial class QualificationRequirement : IdentifiedObject, IQualificationRequirement, IModelElement
    {
        
        /// <summary>
        /// The backing field for the QualificationID property
        /// </summary>
        private string _qualificationID;
        
        private static Lazy<ITypedElement> _qualificationIDAttribute = new Lazy<ITypedElement>(RetrieveQualificationIDAttribute);
        
        private static Lazy<ITypedElement> _specificationsReference = new Lazy<ITypedElement>(RetrieveSpecificationsReference);
        
        /// <summary>
        /// The backing field for the Specifications property
        /// </summary>
        private QualificationRequirementSpecificationsCollection _specifications;
        
        private static Lazy<ITypedElement> _workTasksReference = new Lazy<ITypedElement>(RetrieveWorkTasksReference);
        
        /// <summary>
        /// The backing field for the WorkTasks property
        /// </summary>
        private QualificationRequirementWorkTasksCollection _workTasks;
        
        private static Lazy<ITypedElement> _cULaborItemsReference = new Lazy<ITypedElement>(RetrieveCULaborItemsReference);
        
        /// <summary>
        /// The backing field for the CULaborItems property
        /// </summary>
        private QualificationRequirementCULaborItemsCollection _cULaborItems;
        
        private static Lazy<ITypedElement> _skillsReference = new Lazy<ITypedElement>(RetrieveSkillsReference);
        
        /// <summary>
        /// The backing field for the Skills property
        /// </summary>
        private QualificationRequirementSkillsCollection _skills;
        
        private static IClass _classInstance;
        
        public QualificationRequirement()
        {
            this._specifications = new QualificationRequirementSpecificationsCollection(this);
            this._specifications.CollectionChanging += this.SpecificationsCollectionChanging;
            this._specifications.CollectionChanged += this.SpecificationsCollectionChanged;
            this._workTasks = new QualificationRequirementWorkTasksCollection(this);
            this._workTasks.CollectionChanging += this.WorkTasksCollectionChanging;
            this._workTasks.CollectionChanged += this.WorkTasksCollectionChanged;
            this._cULaborItems = new QualificationRequirementCULaborItemsCollection(this);
            this._cULaborItems.CollectionChanging += this.CULaborItemsCollectionChanging;
            this._cULaborItems.CollectionChanged += this.CULaborItemsCollectionChanged;
            this._skills = new QualificationRequirementSkillsCollection(this);
            this._skills.CollectionChanging += this.SkillsCollectionChanging;
            this._skills.CollectionChanged += this.SkillsCollectionChanged;
        }
        
        /// <summary>
        /// The qualificationID property
        /// </summary>
        [XmlElementNameAttribute("qualificationID")]
        [XmlAttributeAttribute(true)]
        public virtual string QualificationID
        {
            get
            {
                return this._qualificationID;
            }
            set
            {
                if ((this._qualificationID != value))
                {
                    string old = this._qualificationID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQualificationIDChanging(e);
                    this.OnPropertyChanging("QualificationID", e, _qualificationIDAttribute);
                    this._qualificationID = value;
                    this.OnQualificationIDChanged(e);
                    this.OnPropertyChanged("QualificationID", e, _qualificationIDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Specifications property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("QualificationRequirements")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISpecification> Specifications
        {
            get
            {
                return this._specifications;
            }
        }
        
        /// <summary>
        /// The WorkTasks property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("QualificationRequirements")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWorkTask> WorkTasks
        {
            get
            {
                return this._workTasks;
            }
        }
        
        /// <summary>
        /// The CULaborItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("QualificationRequirements")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICULaborItem> CULaborItems
        {
            get
            {
                return this._cULaborItems;
            }
        }
        
        /// <summary>
        /// The Skills property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("QualificationRequirements")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISkill> Skills
        {
            get
            {
                return this._skills;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new QualificationRequirementReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Qualifica" +
                            "tionRequirement")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the QualificationID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QualificationIDChanging;
        
        /// <summary>
        /// Gets fired when the QualificationID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QualificationIDChanged;
        
        private static ITypedElement RetrieveQualificationIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(QualificationRequirement.ClassInstance)).Resolve("qualificationID")));
        }
        
        /// <summary>
        /// Raises the QualificationIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQualificationIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QualificationIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QualificationIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQualificationIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QualificationIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSpecificationsReference()
        {
            return ((ITypedElement)(((ModelElement)(QualificationRequirement.ClassInstance)).Resolve("Specifications")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Specifications property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SpecificationsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Specifications", e, _specificationsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Specifications property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SpecificationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Specifications", e, _specificationsReference);
        }
        
        private static ITypedElement RetrieveWorkTasksReference()
        {
            return ((ITypedElement)(((ModelElement)(QualificationRequirement.ClassInstance)).Resolve("WorkTasks")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WorkTasks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkTasksCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("WorkTasks", e, _workTasksReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WorkTasks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkTasksCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WorkTasks", e, _workTasksReference);
        }
        
        private static ITypedElement RetrieveCULaborItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(QualificationRequirement.ClassInstance)).Resolve("CULaborItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CULaborItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CULaborItemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("CULaborItems", e, _cULaborItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CULaborItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CULaborItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CULaborItems", e, _cULaborItemsReference);
        }
        
        private static ITypedElement RetrieveSkillsReference()
        {
            return ((ITypedElement)(((ModelElement)(QualificationRequirement.ClassInstance)).Resolve("Skills")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Skills property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SkillsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Skills", e, _skillsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Skills property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SkillsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Skills", e, _skillsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "QUALIFICATIONID"))
            {
                return this.QualificationID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SPECIFICATIONS"))
            {
                return this._specifications;
            }
            if ((feature == "WORKTASKS"))
            {
                return this._workTasks;
            }
            if ((feature == "CULABORITEMS"))
            {
                return this._cULaborItems;
            }
            if ((feature == "SKILLS"))
            {
                return this._skills;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "QUALIFICATIONID"))
            {
                this.QualificationID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Qualifica" +
                        "tionRequirement")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the QualificationRequirement class
        /// </summary>
        public class QualificationRequirementReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private QualificationRequirement _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public QualificationRequirementReferencedElementsCollection(QualificationRequirement parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Specifications.Count);
                    count = (count + this._parent.WorkTasks.Count);
                    count = (count + this._parent.CULaborItems.Count);
                    count = (count + this._parent.Skills.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Specifications.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WorkTasks.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CULaborItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Skills.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Specifications.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WorkTasks.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CULaborItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Skills.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ISpecification specificationsCasted = item.As<ISpecification>();
                if ((specificationsCasted != null))
                {
                    this._parent.Specifications.Add(specificationsCasted);
                }
                IWorkTask workTasksCasted = item.As<IWorkTask>();
                if ((workTasksCasted != null))
                {
                    this._parent.WorkTasks.Add(workTasksCasted);
                }
                ICULaborItem cULaborItemsCasted = item.As<ICULaborItem>();
                if ((cULaborItemsCasted != null))
                {
                    this._parent.CULaborItems.Add(cULaborItemsCasted);
                }
                ISkill skillsCasted = item.As<ISkill>();
                if ((skillsCasted != null))
                {
                    this._parent.Skills.Add(skillsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Specifications.Clear();
                this._parent.WorkTasks.Clear();
                this._parent.CULaborItems.Clear();
                this._parent.Skills.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Specifications.Contains(item))
                {
                    return true;
                }
                if (this._parent.WorkTasks.Contains(item))
                {
                    return true;
                }
                if (this._parent.CULaborItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.Skills.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> specificationsEnumerator = this._parent.Specifications.GetEnumerator();
                try
                {
                    for (
                    ; specificationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = specificationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    specificationsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> workTasksEnumerator = this._parent.WorkTasks.GetEnumerator();
                try
                {
                    for (
                    ; workTasksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = workTasksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    workTasksEnumerator.Dispose();
                }
                IEnumerator<IModelElement> cULaborItemsEnumerator = this._parent.CULaborItems.GetEnumerator();
                try
                {
                    for (
                    ; cULaborItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = cULaborItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    cULaborItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> skillsEnumerator = this._parent.Skills.GetEnumerator();
                try
                {
                    for (
                    ; skillsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = skillsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    skillsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ISpecification specificationItem = item.As<ISpecification>();
                if (((specificationItem != null) 
                            && this._parent.Specifications.Remove(specificationItem)))
                {
                    return true;
                }
                IWorkTask workTaskItem = item.As<IWorkTask>();
                if (((workTaskItem != null) 
                            && this._parent.WorkTasks.Remove(workTaskItem)))
                {
                    return true;
                }
                ICULaborItem cULaborItemItem = item.As<ICULaborItem>();
                if (((cULaborItemItem != null) 
                            && this._parent.CULaborItems.Remove(cULaborItemItem)))
                {
                    return true;
                }
                ISkill skillItem = item.As<ISkill>();
                if (((skillItem != null) 
                            && this._parent.Skills.Remove(skillItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Specifications).Concat(this._parent.WorkTasks).Concat(this._parent.CULaborItems).Concat(this._parent.Skills).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the qualificationID property
        /// </summary>
        private sealed class QualificationIDProxy : ModelPropertyChange<IQualificationRequirement, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QualificationIDProxy(IQualificationRequirement modelElement) : 
                    base(modelElement, "qualificationID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.QualificationID;
                }
                set
                {
                    this.ModelElement.QualificationID = value;
                }
            }
        }
    }
}

