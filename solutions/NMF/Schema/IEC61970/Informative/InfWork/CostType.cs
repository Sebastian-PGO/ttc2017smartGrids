using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the CostType class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/CostType")]
    [DebuggerDisplayAttribute("CostType {UUID}")]
    public partial class CostType : IdentifiedObject, ICostType, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Level property
        /// </summary>
        private string _level;
        
        private static Lazy<ITypedElement> _levelAttribute = new Lazy<ITypedElement>(RetrieveLevelAttribute);
        
        /// <summary>
        /// The backing field for the AmountAssignmentFlag property
        /// </summary>
        private bool _amountAssignmentFlag;
        
        private static Lazy<ITypedElement> _amountAssignmentFlagAttribute = new Lazy<ITypedElement>(RetrieveAmountAssignmentFlagAttribute);
        
        /// <summary>
        /// The backing field for the Code property
        /// </summary>
        private string _code;
        
        private static Lazy<ITypedElement> _codeAttribute = new Lazy<ITypedElement>(RetrieveCodeAttribute);
        
        /// <summary>
        /// The backing field for the Stage property
        /// </summary>
        private string _stage;
        
        private static Lazy<ITypedElement> _stageAttribute = new Lazy<ITypedElement>(RetrieveStageAttribute);
        
        private static Lazy<ITypedElement> _erpJournalEntriesReference = new Lazy<ITypedElement>(RetrieveErpJournalEntriesReference);
        
        /// <summary>
        /// The backing field for the ErpJournalEntries property
        /// </summary>
        private CostTypeErpJournalEntriesCollection _erpJournalEntries;
        
        private static Lazy<ITypedElement> _workCostDetailsReference = new Lazy<ITypedElement>(RetrieveWorkCostDetailsReference);
        
        /// <summary>
        /// The backing field for the WorkCostDetails property
        /// </summary>
        private CostTypeWorkCostDetailsCollection _workCostDetails;
        
        private static Lazy<ITypedElement> _parentCostTypeReference = new Lazy<ITypedElement>(RetrieveParentCostTypeReference);
        
        /// <summary>
        /// The backing field for the ParentCostType property
        /// </summary>
        private ICostType _parentCostType;
        
        private static Lazy<ITypedElement> _compatibleUnitsReference = new Lazy<ITypedElement>(RetrieveCompatibleUnitsReference);
        
        /// <summary>
        /// The backing field for the CompatibleUnits property
        /// </summary>
        private CostTypeCompatibleUnitsCollection _compatibleUnits;
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static Lazy<ITypedElement> _childCostTypesReference = new Lazy<ITypedElement>(RetrieveChildCostTypesReference);
        
        /// <summary>
        /// The backing field for the ChildCostTypes property
        /// </summary>
        private CostTypeChildCostTypesCollection _childCostTypes;
        
        private static IClass _classInstance;
        
        public CostType()
        {
            this._erpJournalEntries = new CostTypeErpJournalEntriesCollection(this);
            this._erpJournalEntries.CollectionChanging += this.ErpJournalEntriesCollectionChanging;
            this._erpJournalEntries.CollectionChanged += this.ErpJournalEntriesCollectionChanged;
            this._workCostDetails = new CostTypeWorkCostDetailsCollection(this);
            this._workCostDetails.CollectionChanging += this.WorkCostDetailsCollectionChanging;
            this._workCostDetails.CollectionChanged += this.WorkCostDetailsCollectionChanged;
            this._compatibleUnits = new CostTypeCompatibleUnitsCollection(this);
            this._compatibleUnits.CollectionChanging += this.CompatibleUnitsCollectionChanging;
            this._compatibleUnits.CollectionChanged += this.CompatibleUnitsCollectionChanged;
            this._childCostTypes = new CostTypeChildCostTypesCollection(this);
            this._childCostTypes.CollectionChanging += this.ChildCostTypesCollectionChanging;
            this._childCostTypes.CollectionChanged += this.ChildCostTypesCollectionChanged;
        }
        
        /// <summary>
        /// The level property
        /// </summary>
        [XmlElementNameAttribute("level")]
        [XmlAttributeAttribute(true)]
        public virtual string Level
        {
            get
            {
                return this._level;
            }
            set
            {
                if ((this._level != value))
                {
                    string old = this._level;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLevelChanging(e);
                    this.OnPropertyChanging("Level", e, _levelAttribute);
                    this._level = value;
                    this.OnLevelChanged(e);
                    this.OnPropertyChanged("Level", e, _levelAttribute);
                }
            }
        }
        
        /// <summary>
        /// The amountAssignmentFlag property
        /// </summary>
        [XmlElementNameAttribute("amountAssignmentFlag")]
        [XmlAttributeAttribute(true)]
        public virtual bool AmountAssignmentFlag
        {
            get
            {
                return this._amountAssignmentFlag;
            }
            set
            {
                if ((this._amountAssignmentFlag != value))
                {
                    bool old = this._amountAssignmentFlag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmountAssignmentFlagChanging(e);
                    this.OnPropertyChanging("AmountAssignmentFlag", e, _amountAssignmentFlagAttribute);
                    this._amountAssignmentFlag = value;
                    this.OnAmountAssignmentFlagChanged(e);
                    this.OnPropertyChanged("AmountAssignmentFlag", e, _amountAssignmentFlagAttribute);
                }
            }
        }
        
        /// <summary>
        /// The code property
        /// </summary>
        [XmlElementNameAttribute("code")]
        [XmlAttributeAttribute(true)]
        public virtual string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    string old = this._code;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCodeChanging(e);
                    this.OnPropertyChanging("Code", e, _codeAttribute);
                    this._code = value;
                    this.OnCodeChanged(e);
                    this.OnPropertyChanged("Code", e, _codeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The stage property
        /// </summary>
        [XmlElementNameAttribute("stage")]
        [XmlAttributeAttribute(true)]
        public virtual string Stage
        {
            get
            {
                return this._stage;
            }
            set
            {
                if ((this._stage != value))
                {
                    string old = this._stage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStageChanging(e);
                    this.OnPropertyChanging("Stage", e, _stageAttribute);
                    this._stage = value;
                    this.OnStageChanged(e);
                    this.OnPropertyChanged("Stage", e, _stageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ErpJournalEntries property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CostTypes")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpJournalEntry> ErpJournalEntries
        {
            get
            {
                return this._erpJournalEntries;
            }
        }
        
        /// <summary>
        /// The WorkCostDetails property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CostType")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWorkCostDetail> WorkCostDetails
        {
            get
            {
                return this._workCostDetails;
            }
        }
        
        /// <summary>
        /// The ParentCostType property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ChildCostTypes")]
        public virtual ICostType ParentCostType
        {
            get
            {
                return this._parentCostType;
            }
            set
            {
                if ((this._parentCostType != value))
                {
                    ICostType old = this._parentCostType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnParentCostTypeChanging(e);
                    this.OnPropertyChanging("ParentCostType", e, _parentCostTypeReference);
                    this._parentCostType = value;
                    if ((old != null))
                    {
                        old.ChildCostTypes.Remove(this);
                        old.Deleted -= this.OnResetParentCostType;
                    }
                    if ((value != null))
                    {
                        value.ChildCostTypes.Add(this);
                        value.Deleted += this.OnResetParentCostType;
                    }
                    this.OnParentCostTypeChanged(e);
                    this.OnPropertyChanged("ParentCostType", e, _parentCostTypeReference);
                }
            }
        }
        
        /// <summary>
        /// The CompatibleUnits property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CostType")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICompatibleUnit> CompatibleUnits
        {
            get
            {
                return this._compatibleUnits;
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// The ChildCostTypes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ParentCostType")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICostType> ChildCostTypes
        {
            get
            {
                return this._childCostTypes;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CostTypeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/CostType")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Level property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LevelChanging;
        
        /// <summary>
        /// Gets fired when the Level property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LevelChanged;
        
        /// <summary>
        /// Gets fired before the AmountAssignmentFlag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmountAssignmentFlagChanging;
        
        /// <summary>
        /// Gets fired when the AmountAssignmentFlag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmountAssignmentFlagChanged;
        
        /// <summary>
        /// Gets fired before the Code property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CodeChanging;
        
        /// <summary>
        /// Gets fired when the Code property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CodeChanged;
        
        /// <summary>
        /// Gets fired before the Stage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StageChanging;
        
        /// <summary>
        /// Gets fired when the Stage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StageChanged;
        
        /// <summary>
        /// Gets fired before the ParentCostType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ParentCostTypeChanging;
        
        /// <summary>
        /// Gets fired when the ParentCostType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ParentCostTypeChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        private static ITypedElement RetrieveLevelAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CostType.ClassInstance)).Resolve("level")));
        }
        
        /// <summary>
        /// Raises the LevelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLevelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LevelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LevelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLevelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LevelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAmountAssignmentFlagAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CostType.ClassInstance)).Resolve("amountAssignmentFlag")));
        }
        
        /// <summary>
        /// Raises the AmountAssignmentFlagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmountAssignmentFlagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmountAssignmentFlagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AmountAssignmentFlagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmountAssignmentFlagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmountAssignmentFlagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CostType.ClassInstance)).Resolve("code")));
        }
        
        /// <summary>
        /// Raises the CodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CostType.ClassInstance)).Resolve("stage")));
        }
        
        /// <summary>
        /// Raises the StageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveErpJournalEntriesReference()
        {
            return ((ITypedElement)(((ModelElement)(CostType.ClassInstance)).Resolve("ErpJournalEntries")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpJournalEntries property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpJournalEntriesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ErpJournalEntries", e, _erpJournalEntriesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpJournalEntries property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpJournalEntriesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpJournalEntries", e, _erpJournalEntriesReference);
        }
        
        private static ITypedElement RetrieveWorkCostDetailsReference()
        {
            return ((ITypedElement)(((ModelElement)(CostType.ClassInstance)).Resolve("WorkCostDetails")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WorkCostDetails property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkCostDetailsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("WorkCostDetails", e, _workCostDetailsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WorkCostDetails property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkCostDetailsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WorkCostDetails", e, _workCostDetailsReference);
        }
        
        private static ITypedElement RetrieveParentCostTypeReference()
        {
            return ((ITypedElement)(((ModelElement)(CostType.ClassInstance)).Resolve("ParentCostType")));
        }
        
        /// <summary>
        /// Raises the ParentCostTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParentCostTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ParentCostTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ParentCostTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParentCostTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ParentCostTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ParentCostType property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetParentCostType(object sender, System.EventArgs eventArgs)
        {
            this.ParentCostType = null;
        }
        
        private static ITypedElement RetrieveCompatibleUnitsReference()
        {
            return ((ITypedElement)(((ModelElement)(CostType.ClassInstance)).Resolve("CompatibleUnits")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CompatibleUnits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CompatibleUnitsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("CompatibleUnits", e, _compatibleUnitsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CompatibleUnits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CompatibleUnitsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CompatibleUnits", e, _compatibleUnitsReference);
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(CostType.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        private static ITypedElement RetrieveChildCostTypesReference()
        {
            return ((ITypedElement)(((ModelElement)(CostType.ClassInstance)).Resolve("ChildCostTypes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ChildCostTypes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChildCostTypesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ChildCostTypes", e, _childCostTypesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ChildCostTypes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChildCostTypesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ChildCostTypes", e, _childCostTypesReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "LEVEL"))
            {
                return this.Level;
            }
            if ((attribute == "AMOUNTASSIGNMENTFLAG"))
            {
                return this.AmountAssignmentFlag;
            }
            if ((attribute == "CODE"))
            {
                return this.Code;
            }
            if ((attribute == "STAGE"))
            {
                return this.Stage;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ERPJOURNALENTRIES"))
            {
                return this._erpJournalEntries;
            }
            if ((feature == "WORKCOSTDETAILS"))
            {
                return this._workCostDetails;
            }
            if ((feature == "COMPATIBLEUNITS"))
            {
                return this._compatibleUnits;
            }
            if ((feature == "CHILDCOSTTYPES"))
            {
                return this._childCostTypes;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PARENTCOSTTYPE"))
            {
                this.ParentCostType = ((ICostType)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "LEVEL"))
            {
                this.Level = ((string)(value));
                return;
            }
            if ((feature == "AMOUNTASSIGNMENTFLAG"))
            {
                this.AmountAssignmentFlag = ((bool)(value));
                return;
            }
            if ((feature == "CODE"))
            {
                this.Code = ((string)(value));
                return;
            }
            if ((feature == "STAGE"))
            {
                this.Stage = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ParentCostType"))
            {
                return new ParentCostTypeProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ParentCostType"))
            {
                return new ParentCostTypeProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/CostType")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CostType class
        /// </summary>
        public class CostTypeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CostType _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CostTypeReferencedElementsCollection(CostType parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ErpJournalEntries.Count);
                    count = (count + this._parent.WorkCostDetails.Count);
                    if ((this._parent.ParentCostType != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.CompatibleUnits.Count);
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ChildCostTypes.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ErpJournalEntries.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WorkCostDetails.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ParentCostTypeChanged += this.PropagateValueChanges;
                this._parent.CompatibleUnits.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.ChildCostTypes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ErpJournalEntries.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WorkCostDetails.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ParentCostTypeChanged -= this.PropagateValueChanges;
                this._parent.CompatibleUnits.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.ChildCostTypes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IErpJournalEntry erpJournalEntriesCasted = item.As<IErpJournalEntry>();
                if ((erpJournalEntriesCasted != null))
                {
                    this._parent.ErpJournalEntries.Add(erpJournalEntriesCasted);
                }
                IWorkCostDetail workCostDetailsCasted = item.As<IWorkCostDetail>();
                if ((workCostDetailsCasted != null))
                {
                    this._parent.WorkCostDetails.Add(workCostDetailsCasted);
                }
                if ((this._parent.ParentCostType == null))
                {
                    ICostType parentCostTypeCasted = item.As<ICostType>();
                    if ((parentCostTypeCasted != null))
                    {
                        this._parent.ParentCostType = parentCostTypeCasted;
                        return;
                    }
                }
                ICompatibleUnit compatibleUnitsCasted = item.As<ICompatibleUnit>();
                if ((compatibleUnitsCasted != null))
                {
                    this._parent.CompatibleUnits.Add(compatibleUnitsCasted);
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                ICostType childCostTypesCasted = item.As<ICostType>();
                if ((childCostTypesCasted != null))
                {
                    this._parent.ChildCostTypes.Add(childCostTypesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ErpJournalEntries.Clear();
                this._parent.WorkCostDetails.Clear();
                this._parent.ParentCostType = null;
                this._parent.CompatibleUnits.Clear();
                this._parent.Status = null;
                this._parent.ChildCostTypes.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ErpJournalEntries.Contains(item))
                {
                    return true;
                }
                if (this._parent.WorkCostDetails.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ParentCostType))
                {
                    return true;
                }
                if (this._parent.CompatibleUnits.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if (this._parent.ChildCostTypes.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> erpJournalEntriesEnumerator = this._parent.ErpJournalEntries.GetEnumerator();
                try
                {
                    for (
                    ; erpJournalEntriesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpJournalEntriesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpJournalEntriesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> workCostDetailsEnumerator = this._parent.WorkCostDetails.GetEnumerator();
                try
                {
                    for (
                    ; workCostDetailsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = workCostDetailsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    workCostDetailsEnumerator.Dispose();
                }
                if ((this._parent.ParentCostType != null))
                {
                    array[arrayIndex] = this._parent.ParentCostType;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> compatibleUnitsEnumerator = this._parent.CompatibleUnits.GetEnumerator();
                try
                {
                    for (
                    ; compatibleUnitsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = compatibleUnitsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    compatibleUnitsEnumerator.Dispose();
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> childCostTypesEnumerator = this._parent.ChildCostTypes.GetEnumerator();
                try
                {
                    for (
                    ; childCostTypesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = childCostTypesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    childCostTypesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IErpJournalEntry erpJournalEntryItem = item.As<IErpJournalEntry>();
                if (((erpJournalEntryItem != null) 
                            && this._parent.ErpJournalEntries.Remove(erpJournalEntryItem)))
                {
                    return true;
                }
                IWorkCostDetail workCostDetailItem = item.As<IWorkCostDetail>();
                if (((workCostDetailItem != null) 
                            && this._parent.WorkCostDetails.Remove(workCostDetailItem)))
                {
                    return true;
                }
                if ((this._parent.ParentCostType == item))
                {
                    this._parent.ParentCostType = null;
                    return true;
                }
                ICompatibleUnit compatibleUnitItem = item.As<ICompatibleUnit>();
                if (((compatibleUnitItem != null) 
                            && this._parent.CompatibleUnits.Remove(compatibleUnitItem)))
                {
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                ICostType costTypeItem = item.As<ICostType>();
                if (((costTypeItem != null) 
                            && this._parent.ChildCostTypes.Remove(costTypeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ErpJournalEntries).Concat(this._parent.WorkCostDetails).Concat(this._parent.ParentCostType).Concat(this._parent.CompatibleUnits).Concat(this._parent.Status).Concat(this._parent.ChildCostTypes).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the level property
        /// </summary>
        private sealed class LevelProxy : ModelPropertyChange<ICostType, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LevelProxy(ICostType modelElement) : 
                    base(modelElement, "level")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Level;
                }
                set
                {
                    this.ModelElement.Level = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the amountAssignmentFlag property
        /// </summary>
        private sealed class AmountAssignmentFlagProxy : ModelPropertyChange<ICostType, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AmountAssignmentFlagProxy(ICostType modelElement) : 
                    base(modelElement, "amountAssignmentFlag")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.AmountAssignmentFlag;
                }
                set
                {
                    this.ModelElement.AmountAssignmentFlag = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the code property
        /// </summary>
        private sealed class CodeProxy : ModelPropertyChange<ICostType, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CodeProxy(ICostType modelElement) : 
                    base(modelElement, "code")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Code;
                }
                set
                {
                    this.ModelElement.Code = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the stage property
        /// </summary>
        private sealed class StageProxy : ModelPropertyChange<ICostType, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StageProxy(ICostType modelElement) : 
                    base(modelElement, "stage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Stage;
                }
                set
                {
                    this.ModelElement.Stage = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ParentCostType property
        /// </summary>
        private sealed class ParentCostTypeProxy : ModelPropertyChange<ICostType, ICostType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ParentCostTypeProxy(ICostType modelElement) : 
                    base(modelElement, "ParentCostType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICostType Value
            {
                get
                {
                    return this.ModelElement.ParentCostType;
                }
                set
                {
                    this.ModelElement.ParentCostType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<ICostType, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(ICostType modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
    }
}

