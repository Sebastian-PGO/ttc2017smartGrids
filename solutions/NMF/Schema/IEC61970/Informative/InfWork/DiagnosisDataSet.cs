using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the DiagnosisDataSet class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Diagnosis" +
        "DataSet")]
    [DebuggerDisplayAttribute("DiagnosisDataSet {UUID}")]
    public partial class DiagnosisDataSet : ProcedureDataSet, IDiagnosisDataSet, IModelElement
    {
        
        /// <summary>
        /// The backing field for the PhaseCode property
        /// </summary>
        private Nullable<PhaseCode> _phaseCode;
        
        private static Lazy<ITypedElement> _phaseCodeAttribute = new Lazy<ITypedElement>(RetrievePhaseCodeAttribute);
        
        /// <summary>
        /// The backing field for the FinalCode property
        /// </summary>
        private string _finalCode;
        
        private static Lazy<ITypedElement> _finalCodeAttribute = new Lazy<ITypedElement>(RetrieveFinalCodeAttribute);
        
        /// <summary>
        /// The backing field for the Effect property
        /// </summary>
        private string _effect;
        
        private static Lazy<ITypedElement> _effectAttribute = new Lazy<ITypedElement>(RetrieveEffectAttribute);
        
        /// <summary>
        /// The backing field for the FailureMode property
        /// </summary>
        private string _failureMode;
        
        private static Lazy<ITypedElement> _failureModeAttribute = new Lazy<ITypedElement>(RetrieveFailureModeAttribute);
        
        /// <summary>
        /// The backing field for the RootOrigin property
        /// </summary>
        private string _rootOrigin;
        
        private static Lazy<ITypedElement> _rootOriginAttribute = new Lazy<ITypedElement>(RetrieveRootOriginAttribute);
        
        /// <summary>
        /// The backing field for the FinalCause property
        /// </summary>
        private string _finalCause;
        
        private static Lazy<ITypedElement> _finalCauseAttribute = new Lazy<ITypedElement>(RetrieveFinalCauseAttribute);
        
        /// <summary>
        /// The backing field for the RootRemark property
        /// </summary>
        private string _rootRemark;
        
        private static Lazy<ITypedElement> _rootRemarkAttribute = new Lazy<ITypedElement>(RetrieveRootRemarkAttribute);
        
        /// <summary>
        /// The backing field for the RootCause property
        /// </summary>
        private string _rootCause;
        
        private static Lazy<ITypedElement> _rootCauseAttribute = new Lazy<ITypedElement>(RetrieveRootCauseAttribute);
        
        /// <summary>
        /// The backing field for the PreliminaryRemark property
        /// </summary>
        private string _preliminaryRemark;
        
        private static Lazy<ITypedElement> _preliminaryRemarkAttribute = new Lazy<ITypedElement>(RetrievePreliminaryRemarkAttribute);
        
        /// <summary>
        /// The backing field for the PreliminaryCode property
        /// </summary>
        private string _preliminaryCode;
        
        private static Lazy<ITypedElement> _preliminaryCodeAttribute = new Lazy<ITypedElement>(RetrievePreliminaryCodeAttribute);
        
        /// <summary>
        /// The backing field for the PreliminaryDateTime property
        /// </summary>
        private DateTime _preliminaryDateTime;
        
        private static Lazy<ITypedElement> _preliminaryDateTimeAttribute = new Lazy<ITypedElement>(RetrievePreliminaryDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the FinalRemark property
        /// </summary>
        private string _finalRemark;
        
        private static Lazy<ITypedElement> _finalRemarkAttribute = new Lazy<ITypedElement>(RetrieveFinalRemarkAttribute);
        
        /// <summary>
        /// The backing field for the FinalOrigin property
        /// </summary>
        private string _finalOrigin;
        
        private static Lazy<ITypedElement> _finalOriginAttribute = new Lazy<ITypedElement>(RetrieveFinalOriginAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The phaseCode property
        /// </summary>
        [XmlElementNameAttribute("phaseCode")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<PhaseCode> PhaseCode
        {
            get
            {
                return this._phaseCode;
            }
            set
            {
                if ((this._phaseCode != value))
                {
                    Nullable<PhaseCode> old = this._phaseCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhaseCodeChanging(e);
                    this.OnPropertyChanging("PhaseCode", e, _phaseCodeAttribute);
                    this._phaseCode = value;
                    this.OnPhaseCodeChanged(e);
                    this.OnPropertyChanged("PhaseCode", e, _phaseCodeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The finalCode property
        /// </summary>
        [XmlElementNameAttribute("finalCode")]
        [XmlAttributeAttribute(true)]
        public virtual string FinalCode
        {
            get
            {
                return this._finalCode;
            }
            set
            {
                if ((this._finalCode != value))
                {
                    string old = this._finalCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFinalCodeChanging(e);
                    this.OnPropertyChanging("FinalCode", e, _finalCodeAttribute);
                    this._finalCode = value;
                    this.OnFinalCodeChanged(e);
                    this.OnPropertyChanged("FinalCode", e, _finalCodeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The effect property
        /// </summary>
        [XmlElementNameAttribute("effect")]
        [XmlAttributeAttribute(true)]
        public virtual string Effect
        {
            get
            {
                return this._effect;
            }
            set
            {
                if ((this._effect != value))
                {
                    string old = this._effect;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEffectChanging(e);
                    this.OnPropertyChanging("Effect", e, _effectAttribute);
                    this._effect = value;
                    this.OnEffectChanged(e);
                    this.OnPropertyChanged("Effect", e, _effectAttribute);
                }
            }
        }
        
        /// <summary>
        /// The failureMode property
        /// </summary>
        [XmlElementNameAttribute("failureMode")]
        [XmlAttributeAttribute(true)]
        public virtual string FailureMode
        {
            get
            {
                return this._failureMode;
            }
            set
            {
                if ((this._failureMode != value))
                {
                    string old = this._failureMode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFailureModeChanging(e);
                    this.OnPropertyChanging("FailureMode", e, _failureModeAttribute);
                    this._failureMode = value;
                    this.OnFailureModeChanged(e);
                    this.OnPropertyChanged("FailureMode", e, _failureModeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The rootOrigin property
        /// </summary>
        [XmlElementNameAttribute("rootOrigin")]
        [XmlAttributeAttribute(true)]
        public virtual string RootOrigin
        {
            get
            {
                return this._rootOrigin;
            }
            set
            {
                if ((this._rootOrigin != value))
                {
                    string old = this._rootOrigin;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRootOriginChanging(e);
                    this.OnPropertyChanging("RootOrigin", e, _rootOriginAttribute);
                    this._rootOrigin = value;
                    this.OnRootOriginChanged(e);
                    this.OnPropertyChanged("RootOrigin", e, _rootOriginAttribute);
                }
            }
        }
        
        /// <summary>
        /// The finalCause property
        /// </summary>
        [XmlElementNameAttribute("finalCause")]
        [XmlAttributeAttribute(true)]
        public virtual string FinalCause
        {
            get
            {
                return this._finalCause;
            }
            set
            {
                if ((this._finalCause != value))
                {
                    string old = this._finalCause;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFinalCauseChanging(e);
                    this.OnPropertyChanging("FinalCause", e, _finalCauseAttribute);
                    this._finalCause = value;
                    this.OnFinalCauseChanged(e);
                    this.OnPropertyChanged("FinalCause", e, _finalCauseAttribute);
                }
            }
        }
        
        /// <summary>
        /// The rootRemark property
        /// </summary>
        [XmlElementNameAttribute("rootRemark")]
        [XmlAttributeAttribute(true)]
        public virtual string RootRemark
        {
            get
            {
                return this._rootRemark;
            }
            set
            {
                if ((this._rootRemark != value))
                {
                    string old = this._rootRemark;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRootRemarkChanging(e);
                    this.OnPropertyChanging("RootRemark", e, _rootRemarkAttribute);
                    this._rootRemark = value;
                    this.OnRootRemarkChanged(e);
                    this.OnPropertyChanged("RootRemark", e, _rootRemarkAttribute);
                }
            }
        }
        
        /// <summary>
        /// The rootCause property
        /// </summary>
        [XmlElementNameAttribute("rootCause")]
        [XmlAttributeAttribute(true)]
        public virtual string RootCause
        {
            get
            {
                return this._rootCause;
            }
            set
            {
                if ((this._rootCause != value))
                {
                    string old = this._rootCause;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRootCauseChanging(e);
                    this.OnPropertyChanging("RootCause", e, _rootCauseAttribute);
                    this._rootCause = value;
                    this.OnRootCauseChanged(e);
                    this.OnPropertyChanged("RootCause", e, _rootCauseAttribute);
                }
            }
        }
        
        /// <summary>
        /// The preliminaryRemark property
        /// </summary>
        [XmlElementNameAttribute("preliminaryRemark")]
        [XmlAttributeAttribute(true)]
        public virtual string PreliminaryRemark
        {
            get
            {
                return this._preliminaryRemark;
            }
            set
            {
                if ((this._preliminaryRemark != value))
                {
                    string old = this._preliminaryRemark;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPreliminaryRemarkChanging(e);
                    this.OnPropertyChanging("PreliminaryRemark", e, _preliminaryRemarkAttribute);
                    this._preliminaryRemark = value;
                    this.OnPreliminaryRemarkChanged(e);
                    this.OnPropertyChanged("PreliminaryRemark", e, _preliminaryRemarkAttribute);
                }
            }
        }
        
        /// <summary>
        /// The preliminaryCode property
        /// </summary>
        [XmlElementNameAttribute("preliminaryCode")]
        [XmlAttributeAttribute(true)]
        public virtual string PreliminaryCode
        {
            get
            {
                return this._preliminaryCode;
            }
            set
            {
                if ((this._preliminaryCode != value))
                {
                    string old = this._preliminaryCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPreliminaryCodeChanging(e);
                    this.OnPropertyChanging("PreliminaryCode", e, _preliminaryCodeAttribute);
                    this._preliminaryCode = value;
                    this.OnPreliminaryCodeChanged(e);
                    this.OnPropertyChanged("PreliminaryCode", e, _preliminaryCodeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The preliminaryDateTime property
        /// </summary>
        [XmlElementNameAttribute("preliminaryDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime PreliminaryDateTime
        {
            get
            {
                return this._preliminaryDateTime;
            }
            set
            {
                if ((this._preliminaryDateTime != value))
                {
                    DateTime old = this._preliminaryDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPreliminaryDateTimeChanging(e);
                    this.OnPropertyChanging("PreliminaryDateTime", e, _preliminaryDateTimeAttribute);
                    this._preliminaryDateTime = value;
                    this.OnPreliminaryDateTimeChanged(e);
                    this.OnPropertyChanged("PreliminaryDateTime", e, _preliminaryDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The finalRemark property
        /// </summary>
        [XmlElementNameAttribute("finalRemark")]
        [XmlAttributeAttribute(true)]
        public virtual string FinalRemark
        {
            get
            {
                return this._finalRemark;
            }
            set
            {
                if ((this._finalRemark != value))
                {
                    string old = this._finalRemark;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFinalRemarkChanging(e);
                    this.OnPropertyChanging("FinalRemark", e, _finalRemarkAttribute);
                    this._finalRemark = value;
                    this.OnFinalRemarkChanged(e);
                    this.OnPropertyChanged("FinalRemark", e, _finalRemarkAttribute);
                }
            }
        }
        
        /// <summary>
        /// The finalOrigin property
        /// </summary>
        [XmlElementNameAttribute("finalOrigin")]
        [XmlAttributeAttribute(true)]
        public virtual string FinalOrigin
        {
            get
            {
                return this._finalOrigin;
            }
            set
            {
                if ((this._finalOrigin != value))
                {
                    string old = this._finalOrigin;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFinalOriginChanging(e);
                    this.OnPropertyChanging("FinalOrigin", e, _finalOriginAttribute);
                    this._finalOrigin = value;
                    this.OnFinalOriginChanged(e);
                    this.OnPropertyChanged("FinalOrigin", e, _finalOriginAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Diagnosis" +
                            "DataSet")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PhaseCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseCodeChanging;
        
        /// <summary>
        /// Gets fired when the PhaseCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseCodeChanged;
        
        /// <summary>
        /// Gets fired before the FinalCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FinalCodeChanging;
        
        /// <summary>
        /// Gets fired when the FinalCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FinalCodeChanged;
        
        /// <summary>
        /// Gets fired before the Effect property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EffectChanging;
        
        /// <summary>
        /// Gets fired when the Effect property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EffectChanged;
        
        /// <summary>
        /// Gets fired before the FailureMode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailureModeChanging;
        
        /// <summary>
        /// Gets fired when the FailureMode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FailureModeChanged;
        
        /// <summary>
        /// Gets fired before the RootOrigin property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RootOriginChanging;
        
        /// <summary>
        /// Gets fired when the RootOrigin property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RootOriginChanged;
        
        /// <summary>
        /// Gets fired before the FinalCause property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FinalCauseChanging;
        
        /// <summary>
        /// Gets fired when the FinalCause property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FinalCauseChanged;
        
        /// <summary>
        /// Gets fired before the RootRemark property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RootRemarkChanging;
        
        /// <summary>
        /// Gets fired when the RootRemark property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RootRemarkChanged;
        
        /// <summary>
        /// Gets fired before the RootCause property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RootCauseChanging;
        
        /// <summary>
        /// Gets fired when the RootCause property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RootCauseChanged;
        
        /// <summary>
        /// Gets fired before the PreliminaryRemark property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreliminaryRemarkChanging;
        
        /// <summary>
        /// Gets fired when the PreliminaryRemark property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreliminaryRemarkChanged;
        
        /// <summary>
        /// Gets fired before the PreliminaryCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreliminaryCodeChanging;
        
        /// <summary>
        /// Gets fired when the PreliminaryCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreliminaryCodeChanged;
        
        /// <summary>
        /// Gets fired before the PreliminaryDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreliminaryDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the PreliminaryDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreliminaryDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the FinalRemark property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FinalRemarkChanging;
        
        /// <summary>
        /// Gets fired when the FinalRemark property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FinalRemarkChanged;
        
        /// <summary>
        /// Gets fired before the FinalOrigin property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FinalOriginChanging;
        
        /// <summary>
        /// Gets fired when the FinalOrigin property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FinalOriginChanged;
        
        private static ITypedElement RetrievePhaseCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DiagnosisDataSet.ClassInstance)).Resolve("phaseCode")));
        }
        
        /// <summary>
        /// Raises the PhaseCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhaseCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFinalCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DiagnosisDataSet.ClassInstance)).Resolve("finalCode")));
        }
        
        /// <summary>
        /// Raises the FinalCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFinalCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FinalCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FinalCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFinalCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FinalCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEffectAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DiagnosisDataSet.ClassInstance)).Resolve("effect")));
        }
        
        /// <summary>
        /// Raises the EffectChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEffectChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EffectChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EffectChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEffectChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EffectChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFailureModeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DiagnosisDataSet.ClassInstance)).Resolve("failureMode")));
        }
        
        /// <summary>
        /// Raises the FailureModeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailureModeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailureModeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FailureModeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFailureModeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FailureModeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRootOriginAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DiagnosisDataSet.ClassInstance)).Resolve("rootOrigin")));
        }
        
        /// <summary>
        /// Raises the RootOriginChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRootOriginChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RootOriginChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RootOriginChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRootOriginChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RootOriginChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFinalCauseAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DiagnosisDataSet.ClassInstance)).Resolve("finalCause")));
        }
        
        /// <summary>
        /// Raises the FinalCauseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFinalCauseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FinalCauseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FinalCauseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFinalCauseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FinalCauseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRootRemarkAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DiagnosisDataSet.ClassInstance)).Resolve("rootRemark")));
        }
        
        /// <summary>
        /// Raises the RootRemarkChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRootRemarkChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RootRemarkChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RootRemarkChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRootRemarkChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RootRemarkChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRootCauseAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DiagnosisDataSet.ClassInstance)).Resolve("rootCause")));
        }
        
        /// <summary>
        /// Raises the RootCauseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRootCauseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RootCauseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RootCauseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRootCauseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RootCauseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePreliminaryRemarkAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DiagnosisDataSet.ClassInstance)).Resolve("preliminaryRemark")));
        }
        
        /// <summary>
        /// Raises the PreliminaryRemarkChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreliminaryRemarkChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreliminaryRemarkChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PreliminaryRemarkChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreliminaryRemarkChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreliminaryRemarkChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePreliminaryCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DiagnosisDataSet.ClassInstance)).Resolve("preliminaryCode")));
        }
        
        /// <summary>
        /// Raises the PreliminaryCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreliminaryCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreliminaryCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PreliminaryCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreliminaryCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreliminaryCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePreliminaryDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DiagnosisDataSet.ClassInstance)).Resolve("preliminaryDateTime")));
        }
        
        /// <summary>
        /// Raises the PreliminaryDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreliminaryDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreliminaryDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PreliminaryDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreliminaryDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreliminaryDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFinalRemarkAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DiagnosisDataSet.ClassInstance)).Resolve("finalRemark")));
        }
        
        /// <summary>
        /// Raises the FinalRemarkChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFinalRemarkChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FinalRemarkChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FinalRemarkChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFinalRemarkChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FinalRemarkChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFinalOriginAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DiagnosisDataSet.ClassInstance)).Resolve("finalOrigin")));
        }
        
        /// <summary>
        /// Raises the FinalOriginChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFinalOriginChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FinalOriginChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FinalOriginChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFinalOriginChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FinalOriginChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PHASECODE"))
            {
                return this.PhaseCode;
            }
            if ((attribute == "FINALCODE"))
            {
                return this.FinalCode;
            }
            if ((attribute == "EFFECT"))
            {
                return this.Effect;
            }
            if ((attribute == "FAILUREMODE"))
            {
                return this.FailureMode;
            }
            if ((attribute == "ROOTORIGIN"))
            {
                return this.RootOrigin;
            }
            if ((attribute == "FINALCAUSE"))
            {
                return this.FinalCause;
            }
            if ((attribute == "ROOTREMARK"))
            {
                return this.RootRemark;
            }
            if ((attribute == "ROOTCAUSE"))
            {
                return this.RootCause;
            }
            if ((attribute == "PRELIMINARYREMARK"))
            {
                return this.PreliminaryRemark;
            }
            if ((attribute == "PRELIMINARYCODE"))
            {
                return this.PreliminaryCode;
            }
            if ((attribute == "PRELIMINARYDATETIME"))
            {
                return this.PreliminaryDateTime;
            }
            if ((attribute == "FINALREMARK"))
            {
                return this.FinalRemark;
            }
            if ((attribute == "FINALORIGIN"))
            {
                return this.FinalOrigin;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PHASECODE"))
            {
                this.PhaseCode = ((PhaseCode)(value));
                return;
            }
            if ((feature == "FINALCODE"))
            {
                this.FinalCode = ((string)(value));
                return;
            }
            if ((feature == "EFFECT"))
            {
                this.Effect = ((string)(value));
                return;
            }
            if ((feature == "FAILUREMODE"))
            {
                this.FailureMode = ((string)(value));
                return;
            }
            if ((feature == "ROOTORIGIN"))
            {
                this.RootOrigin = ((string)(value));
                return;
            }
            if ((feature == "FINALCAUSE"))
            {
                this.FinalCause = ((string)(value));
                return;
            }
            if ((feature == "ROOTREMARK"))
            {
                this.RootRemark = ((string)(value));
                return;
            }
            if ((feature == "ROOTCAUSE"))
            {
                this.RootCause = ((string)(value));
                return;
            }
            if ((feature == "PRELIMINARYREMARK"))
            {
                this.PreliminaryRemark = ((string)(value));
                return;
            }
            if ((feature == "PRELIMINARYCODE"))
            {
                this.PreliminaryCode = ((string)(value));
                return;
            }
            if ((feature == "PRELIMINARYDATETIME"))
            {
                this.PreliminaryDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "FINALREMARK"))
            {
                this.FinalRemark = ((string)(value));
                return;
            }
            if ((feature == "FINALORIGIN"))
            {
                this.FinalOrigin = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Diagnosis" +
                        "DataSet")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phaseCode property
        /// </summary>
        private sealed class PhaseCodeProxy : ModelPropertyChange<IDiagnosisDataSet, Nullable<PhaseCode>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhaseCodeProxy(IDiagnosisDataSet modelElement) : 
                    base(modelElement, "phaseCode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<PhaseCode> Value
            {
                get
                {
                    return this.ModelElement.PhaseCode;
                }
                set
                {
                    this.ModelElement.PhaseCode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the finalCode property
        /// </summary>
        private sealed class FinalCodeProxy : ModelPropertyChange<IDiagnosisDataSet, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FinalCodeProxy(IDiagnosisDataSet modelElement) : 
                    base(modelElement, "finalCode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.FinalCode;
                }
                set
                {
                    this.ModelElement.FinalCode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the effect property
        /// </summary>
        private sealed class EffectProxy : ModelPropertyChange<IDiagnosisDataSet, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EffectProxy(IDiagnosisDataSet modelElement) : 
                    base(modelElement, "effect")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Effect;
                }
                set
                {
                    this.ModelElement.Effect = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the failureMode property
        /// </summary>
        private sealed class FailureModeProxy : ModelPropertyChange<IDiagnosisDataSet, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FailureModeProxy(IDiagnosisDataSet modelElement) : 
                    base(modelElement, "failureMode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.FailureMode;
                }
                set
                {
                    this.ModelElement.FailureMode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rootOrigin property
        /// </summary>
        private sealed class RootOriginProxy : ModelPropertyChange<IDiagnosisDataSet, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RootOriginProxy(IDiagnosisDataSet modelElement) : 
                    base(modelElement, "rootOrigin")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.RootOrigin;
                }
                set
                {
                    this.ModelElement.RootOrigin = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the finalCause property
        /// </summary>
        private sealed class FinalCauseProxy : ModelPropertyChange<IDiagnosisDataSet, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FinalCauseProxy(IDiagnosisDataSet modelElement) : 
                    base(modelElement, "finalCause")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.FinalCause;
                }
                set
                {
                    this.ModelElement.FinalCause = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rootRemark property
        /// </summary>
        private sealed class RootRemarkProxy : ModelPropertyChange<IDiagnosisDataSet, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RootRemarkProxy(IDiagnosisDataSet modelElement) : 
                    base(modelElement, "rootRemark")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.RootRemark;
                }
                set
                {
                    this.ModelElement.RootRemark = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rootCause property
        /// </summary>
        private sealed class RootCauseProxy : ModelPropertyChange<IDiagnosisDataSet, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RootCauseProxy(IDiagnosisDataSet modelElement) : 
                    base(modelElement, "rootCause")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.RootCause;
                }
                set
                {
                    this.ModelElement.RootCause = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the preliminaryRemark property
        /// </summary>
        private sealed class PreliminaryRemarkProxy : ModelPropertyChange<IDiagnosisDataSet, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PreliminaryRemarkProxy(IDiagnosisDataSet modelElement) : 
                    base(modelElement, "preliminaryRemark")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.PreliminaryRemark;
                }
                set
                {
                    this.ModelElement.PreliminaryRemark = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the preliminaryCode property
        /// </summary>
        private sealed class PreliminaryCodeProxy : ModelPropertyChange<IDiagnosisDataSet, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PreliminaryCodeProxy(IDiagnosisDataSet modelElement) : 
                    base(modelElement, "preliminaryCode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.PreliminaryCode;
                }
                set
                {
                    this.ModelElement.PreliminaryCode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the preliminaryDateTime property
        /// </summary>
        private sealed class PreliminaryDateTimeProxy : ModelPropertyChange<IDiagnosisDataSet, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PreliminaryDateTimeProxy(IDiagnosisDataSet modelElement) : 
                    base(modelElement, "preliminaryDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.PreliminaryDateTime;
                }
                set
                {
                    this.ModelElement.PreliminaryDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the finalRemark property
        /// </summary>
        private sealed class FinalRemarkProxy : ModelPropertyChange<IDiagnosisDataSet, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FinalRemarkProxy(IDiagnosisDataSet modelElement) : 
                    base(modelElement, "finalRemark")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.FinalRemark;
                }
                set
                {
                    this.ModelElement.FinalRemark = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the finalOrigin property
        /// </summary>
        private sealed class FinalOriginProxy : ModelPropertyChange<IDiagnosisDataSet, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FinalOriginProxy(IDiagnosisDataSet modelElement) : 
                    base(modelElement, "finalOrigin")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.FinalOrigin;
                }
                set
                {
                    this.ModelElement.FinalOrigin = value;
                }
            }
        }
    }
}

