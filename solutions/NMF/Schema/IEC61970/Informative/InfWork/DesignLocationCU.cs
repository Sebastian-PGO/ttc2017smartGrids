//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the DesignLocationCU class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/DesignLoc" +
        "ationCU")]
    [DebuggerDisplayAttribute("DesignLocationCU {UUID}")]
    public partial class DesignLocationCU : IdentifiedObject, IDesignLocationCU, IModelElement
    {
        
        /// <summary>
        /// The backing field for the RemovalDate property
        /// </summary>
        private string _removalDate;
        
        private static Lazy<ITypedElement> _removalDateAttribute = new Lazy<ITypedElement>(RetrieveRemovalDateAttribute);
        
        /// <summary>
        /// The backing field for the CuQuantity property
        /// </summary>
        private object _cuQuantity;
        
        private static Lazy<ITypedElement> _cuQuantityAttribute = new Lazy<ITypedElement>(RetrieveCuQuantityAttribute);
        
        /// <summary>
        /// The backing field for the CuAccount property
        /// </summary>
        private string _cuAccount;
        
        private static Lazy<ITypedElement> _cuAccountAttribute = new Lazy<ITypedElement>(RetrieveCuAccountAttribute);
        
        /// <summary>
        /// The backing field for the CuAction property
        /// </summary>
        private Nullable<WorkActionKind> _cuAction;
        
        private static Lazy<ITypedElement> _cuActionAttribute = new Lazy<ITypedElement>(RetrieveCuActionAttribute);
        
        /// <summary>
        /// The backing field for the EnergizationFlag property
        /// </summary>
        private bool _energizationFlag;
        
        private static Lazy<ITypedElement> _energizationFlagAttribute = new Lazy<ITypedElement>(RetrieveEnergizationFlagAttribute);
        
        /// <summary>
        /// The backing field for the CuUsage property
        /// </summary>
        private string _cuUsage;
        
        private static Lazy<ITypedElement> _cuUsageAttribute = new Lazy<ITypedElement>(RetrieveCuUsageAttribute);
        
        private static Lazy<ITypedElement> _designsReference = new Lazy<ITypedElement>(RetrieveDesignsReference);
        
        /// <summary>
        /// The backing field for the Designs property
        /// </summary>
        private DesignLocationCUDesignsCollection _designs;
        
        private static Lazy<ITypedElement> _conditionFactorsReference = new Lazy<ITypedElement>(RetrieveConditionFactorsReference);
        
        /// <summary>
        /// The backing field for the ConditionFactors property
        /// </summary>
        private DesignLocationCUConditionFactorsCollection _conditionFactors;
        
        private static Lazy<ITypedElement> _compatibleUnitsReference = new Lazy<ITypedElement>(RetrieveCompatibleUnitsReference);
        
        /// <summary>
        /// The backing field for the CompatibleUnits property
        /// </summary>
        private DesignLocationCUCompatibleUnitsCollection _compatibleUnits;
        
        private static Lazy<ITypedElement> _workTasksReference = new Lazy<ITypedElement>(RetrieveWorkTasksReference);
        
        /// <summary>
        /// The backing field for the WorkTasks property
        /// </summary>
        private DesignLocationCUWorkTasksCollection _workTasks;
        
        private static Lazy<ITypedElement> _designLocationReference = new Lazy<ITypedElement>(RetrieveDesignLocationReference);
        
        /// <summary>
        /// The backing field for the DesignLocation property
        /// </summary>
        private IDesignLocation _designLocation;
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static Lazy<ITypedElement> _cUGroupsReference = new Lazy<ITypedElement>(RetrieveCUGroupsReference);
        
        /// <summary>
        /// The backing field for the CUGroups property
        /// </summary>
        private DesignLocationCUCUGroupsCollection _cUGroups;
        
        private static IClass _classInstance;
        
        public DesignLocationCU()
        {
            this._designs = new DesignLocationCUDesignsCollection(this);
            this._designs.CollectionChanging += this.DesignsCollectionChanging;
            this._designs.CollectionChanged += this.DesignsCollectionChanged;
            this._conditionFactors = new DesignLocationCUConditionFactorsCollection(this);
            this._conditionFactors.CollectionChanging += this.ConditionFactorsCollectionChanging;
            this._conditionFactors.CollectionChanged += this.ConditionFactorsCollectionChanged;
            this._compatibleUnits = new DesignLocationCUCompatibleUnitsCollection(this);
            this._compatibleUnits.CollectionChanging += this.CompatibleUnitsCollectionChanging;
            this._compatibleUnits.CollectionChanged += this.CompatibleUnitsCollectionChanged;
            this._workTasks = new DesignLocationCUWorkTasksCollection(this);
            this._workTasks.CollectionChanging += this.WorkTasksCollectionChanging;
            this._workTasks.CollectionChanged += this.WorkTasksCollectionChanged;
            this._cUGroups = new DesignLocationCUCUGroupsCollection(this);
            this._cUGroups.CollectionChanging += this.CUGroupsCollectionChanging;
            this._cUGroups.CollectionChanged += this.CUGroupsCollectionChanged;
        }
        
        /// <summary>
        /// The removalDate property
        /// </summary>
        [XmlElementNameAttribute("removalDate")]
        [XmlAttributeAttribute(true)]
        public virtual string RemovalDate
        {
            get
            {
                return this._removalDate;
            }
            set
            {
                if ((this._removalDate != value))
                {
                    string old = this._removalDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRemovalDateChanging(e);
                    this.OnPropertyChanging("RemovalDate", e, _removalDateAttribute);
                    this._removalDate = value;
                    this.OnRemovalDateChanged(e);
                    this.OnPropertyChanged("RemovalDate", e, _removalDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The cuQuantity property
        /// </summary>
        [XmlElementNameAttribute("cuQuantity")]
        [XmlAttributeAttribute(true)]
        public virtual object CuQuantity
        {
            get
            {
                return this._cuQuantity;
            }
            set
            {
                if ((this._cuQuantity != value))
                {
                    object old = this._cuQuantity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCuQuantityChanging(e);
                    this.OnPropertyChanging("CuQuantity", e, _cuQuantityAttribute);
                    this._cuQuantity = value;
                    this.OnCuQuantityChanged(e);
                    this.OnPropertyChanged("CuQuantity", e, _cuQuantityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The cuAccount property
        /// </summary>
        [XmlElementNameAttribute("cuAccount")]
        [XmlAttributeAttribute(true)]
        public virtual string CuAccount
        {
            get
            {
                return this._cuAccount;
            }
            set
            {
                if ((this._cuAccount != value))
                {
                    string old = this._cuAccount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCuAccountChanging(e);
                    this.OnPropertyChanging("CuAccount", e, _cuAccountAttribute);
                    this._cuAccount = value;
                    this.OnCuAccountChanged(e);
                    this.OnPropertyChanged("CuAccount", e, _cuAccountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The cuAction property
        /// </summary>
        [XmlElementNameAttribute("cuAction")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<WorkActionKind> CuAction
        {
            get
            {
                return this._cuAction;
            }
            set
            {
                if ((this._cuAction != value))
                {
                    Nullable<WorkActionKind> old = this._cuAction;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCuActionChanging(e);
                    this.OnPropertyChanging("CuAction", e, _cuActionAttribute);
                    this._cuAction = value;
                    this.OnCuActionChanged(e);
                    this.OnPropertyChanged("CuAction", e, _cuActionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The energizationFlag property
        /// </summary>
        [XmlElementNameAttribute("energizationFlag")]
        [XmlAttributeAttribute(true)]
        public virtual bool EnergizationFlag
        {
            get
            {
                return this._energizationFlag;
            }
            set
            {
                if ((this._energizationFlag != value))
                {
                    bool old = this._energizationFlag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEnergizationFlagChanging(e);
                    this.OnPropertyChanging("EnergizationFlag", e, _energizationFlagAttribute);
                    this._energizationFlag = value;
                    this.OnEnergizationFlagChanged(e);
                    this.OnPropertyChanged("EnergizationFlag", e, _energizationFlagAttribute);
                }
            }
        }
        
        /// <summary>
        /// The cuUsage property
        /// </summary>
        [XmlElementNameAttribute("cuUsage")]
        [XmlAttributeAttribute(true)]
        public virtual string CuUsage
        {
            get
            {
                return this._cuUsage;
            }
            set
            {
                if ((this._cuUsage != value))
                {
                    string old = this._cuUsage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCuUsageChanging(e);
                    this.OnPropertyChanging("CuUsage", e, _cuUsageAttribute);
                    this._cuUsage = value;
                    this.OnCuUsageChanged(e);
                    this.OnPropertyChanged("CuUsage", e, _cuUsageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Designs property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("DesignLocationsCUs")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDesign> Designs
        {
            get
            {
                return this._designs;
            }
        }
        
        /// <summary>
        /// The ConditionFactors property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("DesignLocationCUs")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IConditionFactor> ConditionFactors
        {
            get
            {
                return this._conditionFactors;
            }
        }
        
        /// <summary>
        /// The CompatibleUnits property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("DesignLocationCUs")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICompatibleUnit> CompatibleUnits
        {
            get
            {
                return this._compatibleUnits;
            }
        }
        
        /// <summary>
        /// The WorkTasks property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("DesignLocationCUs")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWorkTask> WorkTasks
        {
            get
            {
                return this._workTasks;
            }
        }
        
        /// <summary>
        /// The DesignLocation property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("DesignLocationCUs")]
        public virtual IDesignLocation DesignLocation
        {
            get
            {
                return this._designLocation;
            }
            set
            {
                if ((this._designLocation != value))
                {
                    IDesignLocation old = this._designLocation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDesignLocationChanging(e);
                    this.OnPropertyChanging("DesignLocation", e, _designLocationReference);
                    this._designLocation = value;
                    if ((old != null))
                    {
                        old.DesignLocationCUs.Remove(this);
                        old.Deleted -= this.OnResetDesignLocation;
                    }
                    if ((value != null))
                    {
                        value.DesignLocationCUs.Add(this);
                        value.Deleted += this.OnResetDesignLocation;
                    }
                    this.OnDesignLocationChanged(e);
                    this.OnPropertyChanged("DesignLocation", e, _designLocationReference);
                }
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// The CUGroups property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("DesignLocationCUs")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICUGroup> CUGroups
        {
            get
            {
                return this._cUGroups;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new DesignLocationCUReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/DesignLoc" +
                            "ationCU")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the RemovalDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RemovalDateChanging;
        
        /// <summary>
        /// Gets fired when the RemovalDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RemovalDateChanged;
        
        /// <summary>
        /// Gets fired before the CuQuantity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CuQuantityChanging;
        
        /// <summary>
        /// Gets fired when the CuQuantity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CuQuantityChanged;
        
        /// <summary>
        /// Gets fired before the CuAccount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CuAccountChanging;
        
        /// <summary>
        /// Gets fired when the CuAccount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CuAccountChanged;
        
        /// <summary>
        /// Gets fired before the CuAction property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CuActionChanging;
        
        /// <summary>
        /// Gets fired when the CuAction property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CuActionChanged;
        
        /// <summary>
        /// Gets fired before the EnergizationFlag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergizationFlagChanging;
        
        /// <summary>
        /// Gets fired when the EnergizationFlag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergizationFlagChanged;
        
        /// <summary>
        /// Gets fired before the CuUsage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CuUsageChanging;
        
        /// <summary>
        /// Gets fired when the CuUsage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CuUsageChanged;
        
        /// <summary>
        /// Gets fired before the DesignLocation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DesignLocationChanging;
        
        /// <summary>
        /// Gets fired when the DesignLocation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DesignLocationChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        private static ITypedElement RetrieveRemovalDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DesignLocationCU.ClassInstance)).Resolve("removalDate")));
        }
        
        /// <summary>
        /// Raises the RemovalDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemovalDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RemovalDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RemovalDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemovalDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RemovalDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCuQuantityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DesignLocationCU.ClassInstance)).Resolve("cuQuantity")));
        }
        
        /// <summary>
        /// Raises the CuQuantityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCuQuantityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CuQuantityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CuQuantityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCuQuantityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CuQuantityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCuAccountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DesignLocationCU.ClassInstance)).Resolve("cuAccount")));
        }
        
        /// <summary>
        /// Raises the CuAccountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCuAccountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CuAccountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CuAccountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCuAccountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CuAccountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCuActionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DesignLocationCU.ClassInstance)).Resolve("cuAction")));
        }
        
        /// <summary>
        /// Raises the CuActionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCuActionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CuActionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CuActionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCuActionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CuActionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEnergizationFlagAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DesignLocationCU.ClassInstance)).Resolve("energizationFlag")));
        }
        
        /// <summary>
        /// Raises the EnergizationFlagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergizationFlagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergizationFlagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnergizationFlagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergizationFlagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergizationFlagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCuUsageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DesignLocationCU.ClassInstance)).Resolve("cuUsage")));
        }
        
        /// <summary>
        /// Raises the CuUsageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCuUsageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CuUsageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CuUsageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCuUsageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CuUsageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDesignsReference()
        {
            return ((ITypedElement)(((ModelElement)(DesignLocationCU.ClassInstance)).Resolve("Designs")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Designs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DesignsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Designs", e, _designsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Designs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DesignsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Designs", e, _designsReference);
        }
        
        private static ITypedElement RetrieveConditionFactorsReference()
        {
            return ((ITypedElement)(((ModelElement)(DesignLocationCU.ClassInstance)).Resolve("ConditionFactors")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ConditionFactors property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConditionFactorsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ConditionFactors", e, _conditionFactorsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ConditionFactors property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConditionFactorsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ConditionFactors", e, _conditionFactorsReference);
        }
        
        private static ITypedElement RetrieveCompatibleUnitsReference()
        {
            return ((ITypedElement)(((ModelElement)(DesignLocationCU.ClassInstance)).Resolve("CompatibleUnits")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CompatibleUnits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CompatibleUnitsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("CompatibleUnits", e, _compatibleUnitsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CompatibleUnits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CompatibleUnitsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CompatibleUnits", e, _compatibleUnitsReference);
        }
        
        private static ITypedElement RetrieveWorkTasksReference()
        {
            return ((ITypedElement)(((ModelElement)(DesignLocationCU.ClassInstance)).Resolve("WorkTasks")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WorkTasks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkTasksCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("WorkTasks", e, _workTasksReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WorkTasks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkTasksCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WorkTasks", e, _workTasksReference);
        }
        
        private static ITypedElement RetrieveDesignLocationReference()
        {
            return ((ITypedElement)(((ModelElement)(DesignLocationCU.ClassInstance)).Resolve("DesignLocation")));
        }
        
        /// <summary>
        /// Raises the DesignLocationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDesignLocationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DesignLocationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DesignLocationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDesignLocationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DesignLocationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DesignLocation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDesignLocation(object sender, System.EventArgs eventArgs)
        {
            this.DesignLocation = null;
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(DesignLocationCU.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        private static ITypedElement RetrieveCUGroupsReference()
        {
            return ((ITypedElement)(((ModelElement)(DesignLocationCU.ClassInstance)).Resolve("CUGroups")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CUGroups property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CUGroupsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("CUGroups", e, _cUGroupsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CUGroups property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CUGroupsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CUGroups", e, _cUGroupsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "REMOVALDATE"))
            {
                return this.RemovalDate;
            }
            if ((attribute == "CUQUANTITY"))
            {
                return this.CuQuantity;
            }
            if ((attribute == "CUACCOUNT"))
            {
                return this.CuAccount;
            }
            if ((attribute == "CUACTION"))
            {
                return this.CuAction;
            }
            if ((attribute == "ENERGIZATIONFLAG"))
            {
                return this.EnergizationFlag;
            }
            if ((attribute == "CUUSAGE"))
            {
                return this.CuUsage;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "DESIGNS"))
            {
                return this._designs;
            }
            if ((feature == "CONDITIONFACTORS"))
            {
                return this._conditionFactors;
            }
            if ((feature == "COMPATIBLEUNITS"))
            {
                return this._compatibleUnits;
            }
            if ((feature == "WORKTASKS"))
            {
                return this._workTasks;
            }
            if ((feature == "CUGROUPS"))
            {
                return this._cUGroups;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DESIGNLOCATION"))
            {
                this.DesignLocation = ((IDesignLocation)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "REMOVALDATE"))
            {
                this.RemovalDate = ((string)(value));
                return;
            }
            if ((feature == "CUQUANTITY"))
            {
                this.CuQuantity = ((object)(value));
                return;
            }
            if ((feature == "CUACCOUNT"))
            {
                this.CuAccount = ((string)(value));
                return;
            }
            if ((feature == "CUACTION"))
            {
                this.CuAction = ((WorkActionKind)(value));
                return;
            }
            if ((feature == "ENERGIZATIONFLAG"))
            {
                this.EnergizationFlag = ((bool)(value));
                return;
            }
            if ((feature == "CUUSAGE"))
            {
                this.CuUsage = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "DesignLocation"))
            {
                return new DesignLocationProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "DesignLocation"))
            {
                return new DesignLocationProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/DesignLoc" +
                        "ationCU")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the DesignLocationCU class
        /// </summary>
        public class DesignLocationCUReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private DesignLocationCU _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public DesignLocationCUReferencedElementsCollection(DesignLocationCU parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Designs.Count);
                    count = (count + this._parent.ConditionFactors.Count);
                    count = (count + this._parent.CompatibleUnits.Count);
                    count = (count + this._parent.WorkTasks.Count);
                    if ((this._parent.DesignLocation != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.CUGroups.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Designs.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ConditionFactors.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CompatibleUnits.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WorkTasks.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DesignLocationChanged += this.PropagateValueChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.CUGroups.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Designs.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ConditionFactors.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CompatibleUnits.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WorkTasks.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DesignLocationChanged -= this.PropagateValueChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.CUGroups.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IDesign designsCasted = item.As<IDesign>();
                if ((designsCasted != null))
                {
                    this._parent.Designs.Add(designsCasted);
                }
                IConditionFactor conditionFactorsCasted = item.As<IConditionFactor>();
                if ((conditionFactorsCasted != null))
                {
                    this._parent.ConditionFactors.Add(conditionFactorsCasted);
                }
                ICompatibleUnit compatibleUnitsCasted = item.As<ICompatibleUnit>();
                if ((compatibleUnitsCasted != null))
                {
                    this._parent.CompatibleUnits.Add(compatibleUnitsCasted);
                }
                IWorkTask workTasksCasted = item.As<IWorkTask>();
                if ((workTasksCasted != null))
                {
                    this._parent.WorkTasks.Add(workTasksCasted);
                }
                if ((this._parent.DesignLocation == null))
                {
                    IDesignLocation designLocationCasted = item.As<IDesignLocation>();
                    if ((designLocationCasted != null))
                    {
                        this._parent.DesignLocation = designLocationCasted;
                        return;
                    }
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                ICUGroup cUGroupsCasted = item.As<ICUGroup>();
                if ((cUGroupsCasted != null))
                {
                    this._parent.CUGroups.Add(cUGroupsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Designs.Clear();
                this._parent.ConditionFactors.Clear();
                this._parent.CompatibleUnits.Clear();
                this._parent.WorkTasks.Clear();
                this._parent.DesignLocation = null;
                this._parent.Status = null;
                this._parent.CUGroups.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Designs.Contains(item))
                {
                    return true;
                }
                if (this._parent.ConditionFactors.Contains(item))
                {
                    return true;
                }
                if (this._parent.CompatibleUnits.Contains(item))
                {
                    return true;
                }
                if (this._parent.WorkTasks.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.DesignLocation))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if (this._parent.CUGroups.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> designsEnumerator = this._parent.Designs.GetEnumerator();
                try
                {
                    for (
                    ; designsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = designsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    designsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> conditionFactorsEnumerator = this._parent.ConditionFactors.GetEnumerator();
                try
                {
                    for (
                    ; conditionFactorsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = conditionFactorsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    conditionFactorsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> compatibleUnitsEnumerator = this._parent.CompatibleUnits.GetEnumerator();
                try
                {
                    for (
                    ; compatibleUnitsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = compatibleUnitsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    compatibleUnitsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> workTasksEnumerator = this._parent.WorkTasks.GetEnumerator();
                try
                {
                    for (
                    ; workTasksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = workTasksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    workTasksEnumerator.Dispose();
                }
                if ((this._parent.DesignLocation != null))
                {
                    array[arrayIndex] = this._parent.DesignLocation;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> cUGroupsEnumerator = this._parent.CUGroups.GetEnumerator();
                try
                {
                    for (
                    ; cUGroupsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = cUGroupsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    cUGroupsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IDesign designItem = item.As<IDesign>();
                if (((designItem != null) 
                            && this._parent.Designs.Remove(designItem)))
                {
                    return true;
                }
                IConditionFactor conditionFactorItem = item.As<IConditionFactor>();
                if (((conditionFactorItem != null) 
                            && this._parent.ConditionFactors.Remove(conditionFactorItem)))
                {
                    return true;
                }
                ICompatibleUnit compatibleUnitItem = item.As<ICompatibleUnit>();
                if (((compatibleUnitItem != null) 
                            && this._parent.CompatibleUnits.Remove(compatibleUnitItem)))
                {
                    return true;
                }
                IWorkTask workTaskItem = item.As<IWorkTask>();
                if (((workTaskItem != null) 
                            && this._parent.WorkTasks.Remove(workTaskItem)))
                {
                    return true;
                }
                if ((this._parent.DesignLocation == item))
                {
                    this._parent.DesignLocation = null;
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                ICUGroup cUGroupItem = item.As<ICUGroup>();
                if (((cUGroupItem != null) 
                            && this._parent.CUGroups.Remove(cUGroupItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Designs).Concat(this._parent.ConditionFactors).Concat(this._parent.CompatibleUnits).Concat(this._parent.WorkTasks).Concat(this._parent.DesignLocation).Concat(this._parent.Status).Concat(this._parent.CUGroups).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the removalDate property
        /// </summary>
        private sealed class RemovalDateProxy : ModelPropertyChange<IDesignLocationCU, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RemovalDateProxy(IDesignLocationCU modelElement) : 
                    base(modelElement, "removalDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.RemovalDate;
                }
                set
                {
                    this.ModelElement.RemovalDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the cuQuantity property
        /// </summary>
        private sealed class CuQuantityProxy : ModelPropertyChange<IDesignLocationCU, object>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CuQuantityProxy(IDesignLocationCU modelElement) : 
                    base(modelElement, "cuQuantity")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override object Value
            {
                get
                {
                    return this.ModelElement.CuQuantity;
                }
                set
                {
                    this.ModelElement.CuQuantity = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the cuAccount property
        /// </summary>
        private sealed class CuAccountProxy : ModelPropertyChange<IDesignLocationCU, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CuAccountProxy(IDesignLocationCU modelElement) : 
                    base(modelElement, "cuAccount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.CuAccount;
                }
                set
                {
                    this.ModelElement.CuAccount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the cuAction property
        /// </summary>
        private sealed class CuActionProxy : ModelPropertyChange<IDesignLocationCU, Nullable<WorkActionKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CuActionProxy(IDesignLocationCU modelElement) : 
                    base(modelElement, "cuAction")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<WorkActionKind> Value
            {
                get
                {
                    return this.ModelElement.CuAction;
                }
                set
                {
                    this.ModelElement.CuAction = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the energizationFlag property
        /// </summary>
        private sealed class EnergizationFlagProxy : ModelPropertyChange<IDesignLocationCU, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnergizationFlagProxy(IDesignLocationCU modelElement) : 
                    base(modelElement, "energizationFlag")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.EnergizationFlag;
                }
                set
                {
                    this.ModelElement.EnergizationFlag = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the cuUsage property
        /// </summary>
        private sealed class CuUsageProxy : ModelPropertyChange<IDesignLocationCU, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CuUsageProxy(IDesignLocationCU modelElement) : 
                    base(modelElement, "cuUsage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.CuUsage;
                }
                set
                {
                    this.ModelElement.CuUsage = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DesignLocation property
        /// </summary>
        private sealed class DesignLocationProxy : ModelPropertyChange<IDesignLocationCU, IDesignLocation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DesignLocationProxy(IDesignLocationCU modelElement) : 
                    base(modelElement, "DesignLocation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDesignLocation Value
            {
                get
                {
                    return this.ModelElement.DesignLocation;
                }
                set
                {
                    this.ModelElement.DesignLocation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IDesignLocationCU, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IDesignLocationCU modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
    }
}

