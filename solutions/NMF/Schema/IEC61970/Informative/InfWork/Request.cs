using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the Request class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Request")]
    [DebuggerDisplayAttribute("Request {UUID}")]
    public partial class Request : Document, IRequest, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Priority property
        /// </summary>
        private string _priority;
        
        private static Lazy<ITypedElement> _priorityAttribute = new Lazy<ITypedElement>(RetrievePriorityAttribute);
        
        /// <summary>
        /// The backing field for the CorporateCode property
        /// </summary>
        private string _corporateCode;
        
        private static Lazy<ITypedElement> _corporateCodeAttribute = new Lazy<ITypedElement>(RetrieveCorporateCodeAttribute);
        
        /// <summary>
        /// The backing field for the ActionNeeded property
        /// </summary>
        private string _actionNeeded;
        
        private static Lazy<ITypedElement> _actionNeededAttribute = new Lazy<ITypedElement>(RetrieveActionNeededAttribute);
        
        private static Lazy<ITypedElement> _organisationReference = new Lazy<ITypedElement>(RetrieveOrganisationReference);
        
        /// <summary>
        /// The backing field for the Organisation property
        /// </summary>
        private IErpOrganisation _organisation;
        
        private static Lazy<ITypedElement> _worksReference = new Lazy<ITypedElement>(RetrieveWorksReference);
        
        /// <summary>
        /// The backing field for the Works property
        /// </summary>
        private RequestWorksCollection _works;
        
        private static Lazy<ITypedElement> _erpQuoteLineItemReference = new Lazy<ITypedElement>(RetrieveErpQuoteLineItemReference);
        
        /// <summary>
        /// The backing field for the ErpQuoteLineItem property
        /// </summary>
        private IErpQuoteLineItem _erpQuoteLineItem;
        
        private static Lazy<ITypedElement> _projectsReference = new Lazy<ITypedElement>(RetrieveProjectsReference);
        
        /// <summary>
        /// The backing field for the Projects property
        /// </summary>
        private RequestProjectsCollection _projects;
        
        private static IClass _classInstance;
        
        public Request()
        {
            this._works = new RequestWorksCollection(this);
            this._works.CollectionChanging += this.WorksCollectionChanging;
            this._works.CollectionChanged += this.WorksCollectionChanged;
            this._projects = new RequestProjectsCollection(this);
            this._projects.CollectionChanging += this.ProjectsCollectionChanging;
            this._projects.CollectionChanged += this.ProjectsCollectionChanged;
        }
        
        /// <summary>
        /// The priority property
        /// </summary>
        [XmlElementNameAttribute("priority")]
        [XmlAttributeAttribute(true)]
        public virtual string Priority
        {
            get
            {
                return this._priority;
            }
            set
            {
                if ((this._priority != value))
                {
                    string old = this._priority;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPriorityChanging(e);
                    this.OnPropertyChanging("Priority", e, _priorityAttribute);
                    this._priority = value;
                    this.OnPriorityChanged(e);
                    this.OnPropertyChanged("Priority", e, _priorityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The corporateCode property
        /// </summary>
        [XmlElementNameAttribute("corporateCode")]
        [XmlAttributeAttribute(true)]
        public virtual string CorporateCode
        {
            get
            {
                return this._corporateCode;
            }
            set
            {
                if ((this._corporateCode != value))
                {
                    string old = this._corporateCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCorporateCodeChanging(e);
                    this.OnPropertyChanging("CorporateCode", e, _corporateCodeAttribute);
                    this._corporateCode = value;
                    this.OnCorporateCodeChanged(e);
                    this.OnPropertyChanged("CorporateCode", e, _corporateCodeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The actionNeeded property
        /// </summary>
        [XmlElementNameAttribute("actionNeeded")]
        [XmlAttributeAttribute(true)]
        public virtual string ActionNeeded
        {
            get
            {
                return this._actionNeeded;
            }
            set
            {
                if ((this._actionNeeded != value))
                {
                    string old = this._actionNeeded;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActionNeededChanging(e);
                    this.OnPropertyChanging("ActionNeeded", e, _actionNeededAttribute);
                    this._actionNeeded = value;
                    this.OnActionNeededChanged(e);
                    this.OnPropertyChanged("ActionNeeded", e, _actionNeededAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Organisation property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Requests")]
        public virtual IErpOrganisation Organisation
        {
            get
            {
                return this._organisation;
            }
            set
            {
                if ((this._organisation != value))
                {
                    IErpOrganisation old = this._organisation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOrganisationChanging(e);
                    this.OnPropertyChanging("Organisation", e, _organisationReference);
                    this._organisation = value;
                    if ((old != null))
                    {
                        old.Requests.Remove(this);
                        old.Deleted -= this.OnResetOrganisation;
                    }
                    if ((value != null))
                    {
                        value.Requests.Add(this);
                        value.Deleted += this.OnResetOrganisation;
                    }
                    this.OnOrganisationChanged(e);
                    this.OnPropertyChanged("Organisation", e, _organisationReference);
                }
            }
        }
        
        /// <summary>
        /// The Works property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Request")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWork> Works
        {
            get
            {
                return this._works;
            }
        }
        
        /// <summary>
        /// The ErpQuoteLineItem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Request")]
        public virtual IErpQuoteLineItem ErpQuoteLineItem
        {
            get
            {
                return this._erpQuoteLineItem;
            }
            set
            {
                if ((this._erpQuoteLineItem != value))
                {
                    IErpQuoteLineItem old = this._erpQuoteLineItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpQuoteLineItemChanging(e);
                    this.OnPropertyChanging("ErpQuoteLineItem", e, _erpQuoteLineItemReference);
                    this._erpQuoteLineItem = value;
                    if ((old != null))
                    {
                        old.Request = null;
                        old.Deleted -= this.OnResetErpQuoteLineItem;
                    }
                    if ((value != null))
                    {
                        value.Request = this;
                        value.Deleted += this.OnResetErpQuoteLineItem;
                    }
                    this.OnErpQuoteLineItemChanged(e);
                    this.OnPropertyChanged("ErpQuoteLineItem", e, _erpQuoteLineItemReference);
                }
            }
        }
        
        /// <summary>
        /// The Projects property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Requests")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IProject> Projects
        {
            get
            {
                return this._projects;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RequestReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Request")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Priority property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PriorityChanging;
        
        /// <summary>
        /// Gets fired when the Priority property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PriorityChanged;
        
        /// <summary>
        /// Gets fired before the CorporateCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CorporateCodeChanging;
        
        /// <summary>
        /// Gets fired when the CorporateCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CorporateCodeChanged;
        
        /// <summary>
        /// Gets fired before the ActionNeeded property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActionNeededChanging;
        
        /// <summary>
        /// Gets fired when the ActionNeeded property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActionNeededChanged;
        
        /// <summary>
        /// Gets fired before the Organisation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OrganisationChanging;
        
        /// <summary>
        /// Gets fired when the Organisation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OrganisationChanged;
        
        /// <summary>
        /// Gets fired before the ErpQuoteLineItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpQuoteLineItemChanging;
        
        /// <summary>
        /// Gets fired when the ErpQuoteLineItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpQuoteLineItemChanged;
        
        private static ITypedElement RetrievePriorityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Request.ClassInstance)).Resolve("priority")));
        }
        
        /// <summary>
        /// Raises the PriorityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPriorityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PriorityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PriorityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPriorityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PriorityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCorporateCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Request.ClassInstance)).Resolve("corporateCode")));
        }
        
        /// <summary>
        /// Raises the CorporateCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCorporateCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CorporateCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CorporateCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCorporateCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CorporateCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActionNeededAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Request.ClassInstance)).Resolve("actionNeeded")));
        }
        
        /// <summary>
        /// Raises the ActionNeededChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActionNeededChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActionNeededChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActionNeededChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActionNeededChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActionNeededChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOrganisationReference()
        {
            return ((ITypedElement)(((ModelElement)(Request.ClassInstance)).Resolve("Organisation")));
        }
        
        /// <summary>
        /// Raises the OrganisationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOrganisationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OrganisationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OrganisationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOrganisationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OrganisationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Organisation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOrganisation(object sender, System.EventArgs eventArgs)
        {
            this.Organisation = null;
        }
        
        private static ITypedElement RetrieveWorksReference()
        {
            return ((ITypedElement)(((ModelElement)(Request.ClassInstance)).Resolve("Works")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Works property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorksCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Works", e, _worksReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Works property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorksCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Works", e, _worksReference);
        }
        
        private static ITypedElement RetrieveErpQuoteLineItemReference()
        {
            return ((ITypedElement)(((ModelElement)(Request.ClassInstance)).Resolve("ErpQuoteLineItem")));
        }
        
        /// <summary>
        /// Raises the ErpQuoteLineItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpQuoteLineItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpQuoteLineItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpQuoteLineItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpQuoteLineItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpQuoteLineItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpQuoteLineItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpQuoteLineItem(object sender, System.EventArgs eventArgs)
        {
            this.ErpQuoteLineItem = null;
        }
        
        private static ITypedElement RetrieveProjectsReference()
        {
            return ((ITypedElement)(((ModelElement)(Request.ClassInstance)).Resolve("Projects")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Projects property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProjectsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Projects", e, _projectsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Projects property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProjectsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Projects", e, _projectsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PRIORITY"))
            {
                return this.Priority;
            }
            if ((attribute == "CORPORATECODE"))
            {
                return this.CorporateCode;
            }
            if ((attribute == "ACTIONNEEDED"))
            {
                return this.ActionNeeded;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "WORKS"))
            {
                return this._works;
            }
            if ((feature == "PROJECTS"))
            {
                return this._projects;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ORGANISATION"))
            {
                this.Organisation = ((IErpOrganisation)(value));
                return;
            }
            if ((feature == "ERPQUOTELINEITEM"))
            {
                this.ErpQuoteLineItem = ((IErpQuoteLineItem)(value));
                return;
            }
            if ((feature == "PRIORITY"))
            {
                this.Priority = ((string)(value));
                return;
            }
            if ((feature == "CORPORATECODE"))
            {
                this.CorporateCode = ((string)(value));
                return;
            }
            if ((feature == "ACTIONNEEDED"))
            {
                this.ActionNeeded = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Organisation"))
            {
                return new OrganisationProxy(this);
            }
            if ((attribute == "ErpQuoteLineItem"))
            {
                return new ErpQuoteLineItemProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Organisation"))
            {
                return new OrganisationProxy(this);
            }
            if ((reference == "ErpQuoteLineItem"))
            {
                return new ErpQuoteLineItemProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Request")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Request class
        /// </summary>
        public class RequestReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Request _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RequestReferencedElementsCollection(Request parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Organisation != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Works.Count);
                    if ((this._parent.ErpQuoteLineItem != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Projects.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OrganisationChanged += this.PropagateValueChanges;
                this._parent.Works.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpQuoteLineItemChanged += this.PropagateValueChanges;
                this._parent.Projects.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OrganisationChanged -= this.PropagateValueChanges;
                this._parent.Works.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpQuoteLineItemChanged -= this.PropagateValueChanges;
                this._parent.Projects.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Organisation == null))
                {
                    IErpOrganisation organisationCasted = item.As<IErpOrganisation>();
                    if ((organisationCasted != null))
                    {
                        this._parent.Organisation = organisationCasted;
                        return;
                    }
                }
                IWork worksCasted = item.As<IWork>();
                if ((worksCasted != null))
                {
                    this._parent.Works.Add(worksCasted);
                }
                if ((this._parent.ErpQuoteLineItem == null))
                {
                    IErpQuoteLineItem erpQuoteLineItemCasted = item.As<IErpQuoteLineItem>();
                    if ((erpQuoteLineItemCasted != null))
                    {
                        this._parent.ErpQuoteLineItem = erpQuoteLineItemCasted;
                        return;
                    }
                }
                IProject projectsCasted = item.As<IProject>();
                if ((projectsCasted != null))
                {
                    this._parent.Projects.Add(projectsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Organisation = null;
                this._parent.Works.Clear();
                this._parent.ErpQuoteLineItem = null;
                this._parent.Projects.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Organisation))
                {
                    return true;
                }
                if (this._parent.Works.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ErpQuoteLineItem))
                {
                    return true;
                }
                if (this._parent.Projects.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Organisation != null))
                {
                    array[arrayIndex] = this._parent.Organisation;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> worksEnumerator = this._parent.Works.GetEnumerator();
                try
                {
                    for (
                    ; worksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = worksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    worksEnumerator.Dispose();
                }
                if ((this._parent.ErpQuoteLineItem != null))
                {
                    array[arrayIndex] = this._parent.ErpQuoteLineItem;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> projectsEnumerator = this._parent.Projects.GetEnumerator();
                try
                {
                    for (
                    ; projectsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = projectsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    projectsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Organisation == item))
                {
                    this._parent.Organisation = null;
                    return true;
                }
                IWork workItem = item.As<IWork>();
                if (((workItem != null) 
                            && this._parent.Works.Remove(workItem)))
                {
                    return true;
                }
                if ((this._parent.ErpQuoteLineItem == item))
                {
                    this._parent.ErpQuoteLineItem = null;
                    return true;
                }
                IProject projectItem = item.As<IProject>();
                if (((projectItem != null) 
                            && this._parent.Projects.Remove(projectItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Organisation).Concat(this._parent.Works).Concat(this._parent.ErpQuoteLineItem).Concat(this._parent.Projects).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the priority property
        /// </summary>
        private sealed class PriorityProxy : ModelPropertyChange<IRequest, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PriorityProxy(IRequest modelElement) : 
                    base(modelElement, "priority")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Priority;
                }
                set
                {
                    this.ModelElement.Priority = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the corporateCode property
        /// </summary>
        private sealed class CorporateCodeProxy : ModelPropertyChange<IRequest, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CorporateCodeProxy(IRequest modelElement) : 
                    base(modelElement, "corporateCode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.CorporateCode;
                }
                set
                {
                    this.ModelElement.CorporateCode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the actionNeeded property
        /// </summary>
        private sealed class ActionNeededProxy : ModelPropertyChange<IRequest, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActionNeededProxy(IRequest modelElement) : 
                    base(modelElement, "actionNeeded")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ActionNeeded;
                }
                set
                {
                    this.ModelElement.ActionNeeded = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Organisation property
        /// </summary>
        private sealed class OrganisationProxy : ModelPropertyChange<IRequest, IErpOrganisation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OrganisationProxy(IRequest modelElement) : 
                    base(modelElement, "Organisation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpOrganisation Value
            {
                get
                {
                    return this.ModelElement.Organisation;
                }
                set
                {
                    this.ModelElement.Organisation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpQuoteLineItem property
        /// </summary>
        private sealed class ErpQuoteLineItemProxy : ModelPropertyChange<IRequest, IErpQuoteLineItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpQuoteLineItemProxy(IRequest modelElement) : 
                    base(modelElement, "ErpQuoteLineItem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpQuoteLineItem Value
            {
                get
                {
                    return this.ModelElement.ErpQuoteLineItem;
                }
                set
                {
                    this.ModelElement.ErpQuoteLineItem = value;
                }
            }
        }
    }
}

