using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the CompatibleUnit class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Compatibl" +
        "eUnit")]
    [DebuggerDisplayAttribute("CompatibleUnit {UUID}")]
    public partial class CompatibleUnit : Document, ICompatibleUnit, IModelElement
    {
        
        /// <summary>
        /// The backing field for the EstCost property
        /// </summary>
        private float _estCost;
        
        private static Lazy<ITypedElement> _estCostAttribute = new Lazy<ITypedElement>(RetrieveEstCostAttribute);
        
        /// <summary>
        /// The backing field for the Quantity property
        /// </summary>
        private string _quantity;
        
        private static Lazy<ITypedElement> _quantityAttribute = new Lazy<ITypedElement>(RetrieveQuantityAttribute);
        
        private static Lazy<ITypedElement> _designLocationCUsReference = new Lazy<ITypedElement>(RetrieveDesignLocationCUsReference);
        
        /// <summary>
        /// The backing field for the DesignLocationCUs property
        /// </summary>
        private CompatibleUnitDesignLocationCUsCollection _designLocationCUs;
        
        private static Lazy<ITypedElement> _propertyUnitReference = new Lazy<ITypedElement>(RetrievePropertyUnitReference);
        
        /// <summary>
        /// The backing field for the PropertyUnit property
        /// </summary>
        private IPropertyUnit _propertyUnit;
        
        private static Lazy<ITypedElement> _cULaborItemsReference = new Lazy<ITypedElement>(RetrieveCULaborItemsReference);
        
        /// <summary>
        /// The backing field for the CULaborItems property
        /// </summary>
        private CompatibleUnitCULaborItemsCollection _cULaborItems;
        
        private static Lazy<ITypedElement> _cUMaterialItemsReference = new Lazy<ITypedElement>(RetrieveCUMaterialItemsReference);
        
        /// <summary>
        /// The backing field for the CUMaterialItems property
        /// </summary>
        private CompatibleUnitCUMaterialItemsCollection _cUMaterialItems;
        
        private static Lazy<ITypedElement> _cUGroupReference = new Lazy<ITypedElement>(RetrieveCUGroupReference);
        
        /// <summary>
        /// The backing field for the CUGroup property
        /// </summary>
        private ICUGroup _cUGroup;
        
        private static Lazy<ITypedElement> _cUWorkEquipmentItemsReference = new Lazy<ITypedElement>(RetrieveCUWorkEquipmentItemsReference);
        
        /// <summary>
        /// The backing field for the CUWorkEquipmentItems property
        /// </summary>
        private CompatibleUnitCUWorkEquipmentItemsCollection _cUWorkEquipmentItems;
        
        private static Lazy<ITypedElement> _costTypeReference = new Lazy<ITypedElement>(RetrieveCostTypeReference);
        
        /// <summary>
        /// The backing field for the CostType property
        /// </summary>
        private ICostType _costType;
        
        private static Lazy<ITypedElement> _proceduresReference = new Lazy<ITypedElement>(RetrieveProceduresReference);
        
        /// <summary>
        /// The backing field for the Procedures property
        /// </summary>
        private CompatibleUnitProceduresCollection _procedures;
        
        private static Lazy<ITypedElement> _cUAssetsReference = new Lazy<ITypedElement>(RetrieveCUAssetsReference);
        
        /// <summary>
        /// The backing field for the CUAssets property
        /// </summary>
        private CompatibleUnitCUAssetsCollection _cUAssets;
        
        private static Lazy<ITypedElement> _cUAllowableActionReference = new Lazy<ITypedElement>(RetrieveCUAllowableActionReference);
        
        /// <summary>
        /// The backing field for the CUAllowableAction property
        /// </summary>
        private ICUAllowableAction _cUAllowableAction;
        
        private static Lazy<ITypedElement> _cUContractorItemsReference = new Lazy<ITypedElement>(RetrieveCUContractorItemsReference);
        
        /// <summary>
        /// The backing field for the CUContractorItems property
        /// </summary>
        private CompatibleUnitCUContractorItemsCollection _cUContractorItems;
        
        private static IClass _classInstance;
        
        public CompatibleUnit()
        {
            this._designLocationCUs = new CompatibleUnitDesignLocationCUsCollection(this);
            this._designLocationCUs.CollectionChanging += this.DesignLocationCUsCollectionChanging;
            this._designLocationCUs.CollectionChanged += this.DesignLocationCUsCollectionChanged;
            this._cULaborItems = new CompatibleUnitCULaborItemsCollection(this);
            this._cULaborItems.CollectionChanging += this.CULaborItemsCollectionChanging;
            this._cULaborItems.CollectionChanged += this.CULaborItemsCollectionChanged;
            this._cUMaterialItems = new CompatibleUnitCUMaterialItemsCollection(this);
            this._cUMaterialItems.CollectionChanging += this.CUMaterialItemsCollectionChanging;
            this._cUMaterialItems.CollectionChanged += this.CUMaterialItemsCollectionChanged;
            this._cUWorkEquipmentItems = new CompatibleUnitCUWorkEquipmentItemsCollection(this);
            this._cUWorkEquipmentItems.CollectionChanging += this.CUWorkEquipmentItemsCollectionChanging;
            this._cUWorkEquipmentItems.CollectionChanged += this.CUWorkEquipmentItemsCollectionChanged;
            this._procedures = new CompatibleUnitProceduresCollection(this);
            this._procedures.CollectionChanging += this.ProceduresCollectionChanging;
            this._procedures.CollectionChanged += this.ProceduresCollectionChanged;
            this._cUAssets = new CompatibleUnitCUAssetsCollection(this);
            this._cUAssets.CollectionChanging += this.CUAssetsCollectionChanging;
            this._cUAssets.CollectionChanged += this.CUAssetsCollectionChanged;
            this._cUContractorItems = new CompatibleUnitCUContractorItemsCollection(this);
            this._cUContractorItems.CollectionChanging += this.CUContractorItemsCollectionChanging;
            this._cUContractorItems.CollectionChanged += this.CUContractorItemsCollectionChanged;
        }
        
        /// <summary>
        /// The estCost property
        /// </summary>
        [XmlElementNameAttribute("estCost")]
        [XmlAttributeAttribute(true)]
        public virtual float EstCost
        {
            get
            {
                return this._estCost;
            }
            set
            {
                if ((this._estCost != value))
                {
                    float old = this._estCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEstCostChanging(e);
                    this.OnPropertyChanging("EstCost", e, _estCostAttribute);
                    this._estCost = value;
                    this.OnEstCostChanged(e);
                    this.OnPropertyChanged("EstCost", e, _estCostAttribute);
                }
            }
        }
        
        /// <summary>
        /// The quantity property
        /// </summary>
        [XmlElementNameAttribute("quantity")]
        [XmlAttributeAttribute(true)]
        public virtual string Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    string old = this._quantity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQuantityChanging(e);
                    this.OnPropertyChanging("Quantity", e, _quantityAttribute);
                    this._quantity = value;
                    this.OnQuantityChanged(e);
                    this.OnPropertyChanged("Quantity", e, _quantityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DesignLocationCUs property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CompatibleUnits")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDesignLocationCU> DesignLocationCUs
        {
            get
            {
                return this._designLocationCUs;
            }
        }
        
        /// <summary>
        /// The PropertyUnit property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CompatibleUnits")]
        public virtual IPropertyUnit PropertyUnit
        {
            get
            {
                return this._propertyUnit;
            }
            set
            {
                if ((this._propertyUnit != value))
                {
                    IPropertyUnit old = this._propertyUnit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertyUnitChanging(e);
                    this.OnPropertyChanging("PropertyUnit", e, _propertyUnitReference);
                    this._propertyUnit = value;
                    if ((old != null))
                    {
                        old.CompatibleUnits.Remove(this);
                        old.Deleted -= this.OnResetPropertyUnit;
                    }
                    if ((value != null))
                    {
                        value.CompatibleUnits.Add(this);
                        value.Deleted += this.OnResetPropertyUnit;
                    }
                    this.OnPropertyUnitChanged(e);
                    this.OnPropertyChanged("PropertyUnit", e, _propertyUnitReference);
                }
            }
        }
        
        /// <summary>
        /// The CULaborItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CompatibleUnits")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICULaborItem> CULaborItems
        {
            get
            {
                return this._cULaborItems;
            }
        }
        
        /// <summary>
        /// The CUMaterialItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CompatibleUnits")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICUMaterialItem> CUMaterialItems
        {
            get
            {
                return this._cUMaterialItems;
            }
        }
        
        /// <summary>
        /// The CUGroup property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CompatibleUnits")]
        public virtual ICUGroup CUGroup
        {
            get
            {
                return this._cUGroup;
            }
            set
            {
                if ((this._cUGroup != value))
                {
                    ICUGroup old = this._cUGroup;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCUGroupChanging(e);
                    this.OnPropertyChanging("CUGroup", e, _cUGroupReference);
                    this._cUGroup = value;
                    if ((old != null))
                    {
                        old.CompatibleUnits.Remove(this);
                        old.Deleted -= this.OnResetCUGroup;
                    }
                    if ((value != null))
                    {
                        value.CompatibleUnits.Add(this);
                        value.Deleted += this.OnResetCUGroup;
                    }
                    this.OnCUGroupChanged(e);
                    this.OnPropertyChanged("CUGroup", e, _cUGroupReference);
                }
            }
        }
        
        /// <summary>
        /// The CUWorkEquipmentItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CompatibleUnits")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICUWorkEquipmentItem> CUWorkEquipmentItems
        {
            get
            {
                return this._cUWorkEquipmentItems;
            }
        }
        
        /// <summary>
        /// The CostType property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CompatibleUnits")]
        public virtual ICostType CostType
        {
            get
            {
                return this._costType;
            }
            set
            {
                if ((this._costType != value))
                {
                    ICostType old = this._costType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCostTypeChanging(e);
                    this.OnPropertyChanging("CostType", e, _costTypeReference);
                    this._costType = value;
                    if ((old != null))
                    {
                        old.CompatibleUnits.Remove(this);
                        old.Deleted -= this.OnResetCostType;
                    }
                    if ((value != null))
                    {
                        value.CompatibleUnits.Add(this);
                        value.Deleted += this.OnResetCostType;
                    }
                    this.OnCostTypeChanged(e);
                    this.OnPropertyChanged("CostType", e, _costTypeReference);
                }
            }
        }
        
        /// <summary>
        /// The Procedures property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CompatibleUnits")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IProcedure> Procedures
        {
            get
            {
                return this._procedures;
            }
        }
        
        /// <summary>
        /// The CUAssets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CompatibleUnits")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICUAsset> CUAssets
        {
            get
            {
                return this._cUAssets;
            }
        }
        
        /// <summary>
        /// The CUAllowableAction property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CompatibleUnits")]
        public virtual ICUAllowableAction CUAllowableAction
        {
            get
            {
                return this._cUAllowableAction;
            }
            set
            {
                if ((this._cUAllowableAction != value))
                {
                    ICUAllowableAction old = this._cUAllowableAction;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCUAllowableActionChanging(e);
                    this.OnPropertyChanging("CUAllowableAction", e, _cUAllowableActionReference);
                    this._cUAllowableAction = value;
                    if ((old != null))
                    {
                        old.CompatibleUnits.Remove(this);
                        old.Deleted -= this.OnResetCUAllowableAction;
                    }
                    if ((value != null))
                    {
                        value.CompatibleUnits.Add(this);
                        value.Deleted += this.OnResetCUAllowableAction;
                    }
                    this.OnCUAllowableActionChanged(e);
                    this.OnPropertyChanged("CUAllowableAction", e, _cUAllowableActionReference);
                }
            }
        }
        
        /// <summary>
        /// The CUContractorItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CompatibleUnits")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICUContractorItem> CUContractorItems
        {
            get
            {
                return this._cUContractorItems;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CompatibleUnitReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Compatibl" +
                            "eUnit")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the EstCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EstCostChanging;
        
        /// <summary>
        /// Gets fired when the EstCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EstCostChanged;
        
        /// <summary>
        /// Gets fired before the Quantity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuantityChanging;
        
        /// <summary>
        /// Gets fired when the Quantity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuantityChanged;
        
        /// <summary>
        /// Gets fired before the PropertyUnit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PropertyUnitChanging;
        
        /// <summary>
        /// Gets fired when the PropertyUnit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PropertyUnitChanged;
        
        /// <summary>
        /// Gets fired before the CUGroup property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CUGroupChanging;
        
        /// <summary>
        /// Gets fired when the CUGroup property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CUGroupChanged;
        
        /// <summary>
        /// Gets fired before the CostType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostTypeChanging;
        
        /// <summary>
        /// Gets fired when the CostType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostTypeChanged;
        
        /// <summary>
        /// Gets fired before the CUAllowableAction property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CUAllowableActionChanging;
        
        /// <summary>
        /// Gets fired when the CUAllowableAction property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CUAllowableActionChanged;
        
        private static ITypedElement RetrieveEstCostAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CompatibleUnit.ClassInstance)).Resolve("estCost")));
        }
        
        /// <summary>
        /// Raises the EstCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEstCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EstCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EstCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEstCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EstCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveQuantityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CompatibleUnit.ClassInstance)).Resolve("quantity")));
        }
        
        /// <summary>
        /// Raises the QuantityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuantityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuantityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QuantityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuantityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuantityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDesignLocationCUsReference()
        {
            return ((ITypedElement)(((ModelElement)(CompatibleUnit.ClassInstance)).Resolve("DesignLocationCUs")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DesignLocationCUs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DesignLocationCUsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("DesignLocationCUs", e, _designLocationCUsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DesignLocationCUs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DesignLocationCUsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DesignLocationCUs", e, _designLocationCUsReference);
        }
        
        private static ITypedElement RetrievePropertyUnitReference()
        {
            return ((ITypedElement)(((ModelElement)(CompatibleUnit.ClassInstance)).Resolve("PropertyUnit")));
        }
        
        /// <summary>
        /// Raises the PropertyUnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPropertyUnitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PropertyUnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PropertyUnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPropertyUnitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PropertyUnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PropertyUnit property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPropertyUnit(object sender, System.EventArgs eventArgs)
        {
            this.PropertyUnit = null;
        }
        
        private static ITypedElement RetrieveCULaborItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(CompatibleUnit.ClassInstance)).Resolve("CULaborItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CULaborItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CULaborItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("CULaborItems", e, _cULaborItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CULaborItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CULaborItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CULaborItems", e, _cULaborItemsReference);
        }
        
        private static ITypedElement RetrieveCUMaterialItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(CompatibleUnit.ClassInstance)).Resolve("CUMaterialItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CUMaterialItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CUMaterialItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("CUMaterialItems", e, _cUMaterialItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CUMaterialItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CUMaterialItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CUMaterialItems", e, _cUMaterialItemsReference);
        }
        
        private static ITypedElement RetrieveCUGroupReference()
        {
            return ((ITypedElement)(((ModelElement)(CompatibleUnit.ClassInstance)).Resolve("CUGroup")));
        }
        
        /// <summary>
        /// Raises the CUGroupChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCUGroupChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CUGroupChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CUGroupChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCUGroupChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CUGroupChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CUGroup property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCUGroup(object sender, System.EventArgs eventArgs)
        {
            this.CUGroup = null;
        }
        
        private static ITypedElement RetrieveCUWorkEquipmentItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(CompatibleUnit.ClassInstance)).Resolve("CUWorkEquipmentItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CUWorkEquipmentItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CUWorkEquipmentItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("CUWorkEquipmentItems", e, _cUWorkEquipmentItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CUWorkEquipmentItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CUWorkEquipmentItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CUWorkEquipmentItems", e, _cUWorkEquipmentItemsReference);
        }
        
        private static ITypedElement RetrieveCostTypeReference()
        {
            return ((ITypedElement)(((ModelElement)(CompatibleUnit.ClassInstance)).Resolve("CostType")));
        }
        
        /// <summary>
        /// Raises the CostTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CostTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CostType property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCostType(object sender, System.EventArgs eventArgs)
        {
            this.CostType = null;
        }
        
        private static ITypedElement RetrieveProceduresReference()
        {
            return ((ITypedElement)(((ModelElement)(CompatibleUnit.ClassInstance)).Resolve("Procedures")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Procedures property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProceduresCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Procedures", e, _proceduresReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Procedures property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProceduresCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Procedures", e, _proceduresReference);
        }
        
        private static ITypedElement RetrieveCUAssetsReference()
        {
            return ((ITypedElement)(((ModelElement)(CompatibleUnit.ClassInstance)).Resolve("CUAssets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CUAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CUAssetsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("CUAssets", e, _cUAssetsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CUAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CUAssetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CUAssets", e, _cUAssetsReference);
        }
        
        private static ITypedElement RetrieveCUAllowableActionReference()
        {
            return ((ITypedElement)(((ModelElement)(CompatibleUnit.ClassInstance)).Resolve("CUAllowableAction")));
        }
        
        /// <summary>
        /// Raises the CUAllowableActionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCUAllowableActionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CUAllowableActionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CUAllowableActionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCUAllowableActionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CUAllowableActionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CUAllowableAction property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCUAllowableAction(object sender, System.EventArgs eventArgs)
        {
            this.CUAllowableAction = null;
        }
        
        private static ITypedElement RetrieveCUContractorItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(CompatibleUnit.ClassInstance)).Resolve("CUContractorItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CUContractorItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CUContractorItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("CUContractorItems", e, _cUContractorItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CUContractorItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CUContractorItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CUContractorItems", e, _cUContractorItemsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ESTCOST"))
            {
                return this.EstCost;
            }
            if ((attribute == "QUANTITY"))
            {
                return this.Quantity;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "DESIGNLOCATIONCUS"))
            {
                return this._designLocationCUs;
            }
            if ((feature == "CULABORITEMS"))
            {
                return this._cULaborItems;
            }
            if ((feature == "CUMATERIALITEMS"))
            {
                return this._cUMaterialItems;
            }
            if ((feature == "CUWORKEQUIPMENTITEMS"))
            {
                return this._cUWorkEquipmentItems;
            }
            if ((feature == "PROCEDURES"))
            {
                return this._procedures;
            }
            if ((feature == "CUASSETS"))
            {
                return this._cUAssets;
            }
            if ((feature == "CUCONTRACTORITEMS"))
            {
                return this._cUContractorItems;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PROPERTYUNIT"))
            {
                this.PropertyUnit = ((IPropertyUnit)(value));
                return;
            }
            if ((feature == "CUGROUP"))
            {
                this.CUGroup = ((ICUGroup)(value));
                return;
            }
            if ((feature == "COSTTYPE"))
            {
                this.CostType = ((ICostType)(value));
                return;
            }
            if ((feature == "CUALLOWABLEACTION"))
            {
                this.CUAllowableAction = ((ICUAllowableAction)(value));
                return;
            }
            if ((feature == "ESTCOST"))
            {
                this.EstCost = ((float)(value));
                return;
            }
            if ((feature == "QUANTITY"))
            {
                this.Quantity = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "PropertyUnit"))
            {
                return new PropertyUnitProxy(this);
            }
            if ((attribute == "CUGroup"))
            {
                return new CUGroupProxy(this);
            }
            if ((attribute == "CostType"))
            {
                return new CostTypeProxy(this);
            }
            if ((attribute == "CUAllowableAction"))
            {
                return new CUAllowableActionProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PropertyUnit"))
            {
                return new PropertyUnitProxy(this);
            }
            if ((reference == "CUGroup"))
            {
                return new CUGroupProxy(this);
            }
            if ((reference == "CostType"))
            {
                return new CostTypeProxy(this);
            }
            if ((reference == "CUAllowableAction"))
            {
                return new CUAllowableActionProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Compatibl" +
                        "eUnit")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CompatibleUnit class
        /// </summary>
        public class CompatibleUnitReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CompatibleUnit _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CompatibleUnitReferencedElementsCollection(CompatibleUnit parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.DesignLocationCUs.Count);
                    if ((this._parent.PropertyUnit != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.CULaborItems.Count);
                    count = (count + this._parent.CUMaterialItems.Count);
                    if ((this._parent.CUGroup != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.CUWorkEquipmentItems.Count);
                    if ((this._parent.CostType != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Procedures.Count);
                    count = (count + this._parent.CUAssets.Count);
                    if ((this._parent.CUAllowableAction != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.CUContractorItems.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.DesignLocationCUs.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PropertyUnitChanged += this.PropagateValueChanges;
                this._parent.CULaborItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CUMaterialItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CUGroupChanged += this.PropagateValueChanges;
                this._parent.CUWorkEquipmentItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CostTypeChanged += this.PropagateValueChanges;
                this._parent.Procedures.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CUAssets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CUAllowableActionChanged += this.PropagateValueChanges;
                this._parent.CUContractorItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.DesignLocationCUs.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PropertyUnitChanged -= this.PropagateValueChanges;
                this._parent.CULaborItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CUMaterialItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CUGroupChanged -= this.PropagateValueChanges;
                this._parent.CUWorkEquipmentItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CostTypeChanged -= this.PropagateValueChanges;
                this._parent.Procedures.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CUAssets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CUAllowableActionChanged -= this.PropagateValueChanges;
                this._parent.CUContractorItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IDesignLocationCU designLocationCUsCasted = item.As<IDesignLocationCU>();
                if ((designLocationCUsCasted != null))
                {
                    this._parent.DesignLocationCUs.Add(designLocationCUsCasted);
                }
                if ((this._parent.PropertyUnit == null))
                {
                    IPropertyUnit propertyUnitCasted = item.As<IPropertyUnit>();
                    if ((propertyUnitCasted != null))
                    {
                        this._parent.PropertyUnit = propertyUnitCasted;
                        return;
                    }
                }
                ICULaborItem cULaborItemsCasted = item.As<ICULaborItem>();
                if ((cULaborItemsCasted != null))
                {
                    this._parent.CULaborItems.Add(cULaborItemsCasted);
                }
                ICUMaterialItem cUMaterialItemsCasted = item.As<ICUMaterialItem>();
                if ((cUMaterialItemsCasted != null))
                {
                    this._parent.CUMaterialItems.Add(cUMaterialItemsCasted);
                }
                if ((this._parent.CUGroup == null))
                {
                    ICUGroup cUGroupCasted = item.As<ICUGroup>();
                    if ((cUGroupCasted != null))
                    {
                        this._parent.CUGroup = cUGroupCasted;
                        return;
                    }
                }
                ICUWorkEquipmentItem cUWorkEquipmentItemsCasted = item.As<ICUWorkEquipmentItem>();
                if ((cUWorkEquipmentItemsCasted != null))
                {
                    this._parent.CUWorkEquipmentItems.Add(cUWorkEquipmentItemsCasted);
                }
                if ((this._parent.CostType == null))
                {
                    ICostType costTypeCasted = item.As<ICostType>();
                    if ((costTypeCasted != null))
                    {
                        this._parent.CostType = costTypeCasted;
                        return;
                    }
                }
                IProcedure proceduresCasted = item.As<IProcedure>();
                if ((proceduresCasted != null))
                {
                    this._parent.Procedures.Add(proceduresCasted);
                }
                ICUAsset cUAssetsCasted = item.As<ICUAsset>();
                if ((cUAssetsCasted != null))
                {
                    this._parent.CUAssets.Add(cUAssetsCasted);
                }
                if ((this._parent.CUAllowableAction == null))
                {
                    ICUAllowableAction cUAllowableActionCasted = item.As<ICUAllowableAction>();
                    if ((cUAllowableActionCasted != null))
                    {
                        this._parent.CUAllowableAction = cUAllowableActionCasted;
                        return;
                    }
                }
                ICUContractorItem cUContractorItemsCasted = item.As<ICUContractorItem>();
                if ((cUContractorItemsCasted != null))
                {
                    this._parent.CUContractorItems.Add(cUContractorItemsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.DesignLocationCUs.Clear();
                this._parent.PropertyUnit = null;
                this._parent.CULaborItems.Clear();
                this._parent.CUMaterialItems.Clear();
                this._parent.CUGroup = null;
                this._parent.CUWorkEquipmentItems.Clear();
                this._parent.CostType = null;
                this._parent.Procedures.Clear();
                this._parent.CUAssets.Clear();
                this._parent.CUAllowableAction = null;
                this._parent.CUContractorItems.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.DesignLocationCUs.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.PropertyUnit))
                {
                    return true;
                }
                if (this._parent.CULaborItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.CUMaterialItems.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.CUGroup))
                {
                    return true;
                }
                if (this._parent.CUWorkEquipmentItems.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.CostType))
                {
                    return true;
                }
                if (this._parent.Procedures.Contains(item))
                {
                    return true;
                }
                if (this._parent.CUAssets.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.CUAllowableAction))
                {
                    return true;
                }
                if (this._parent.CUContractorItems.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> designLocationCUsEnumerator = this._parent.DesignLocationCUs.GetEnumerator();
                try
                {
                    for (
                    ; designLocationCUsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = designLocationCUsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    designLocationCUsEnumerator.Dispose();
                }
                if ((this._parent.PropertyUnit != null))
                {
                    array[arrayIndex] = this._parent.PropertyUnit;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> cULaborItemsEnumerator = this._parent.CULaborItems.GetEnumerator();
                try
                {
                    for (
                    ; cULaborItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = cULaborItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    cULaborItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> cUMaterialItemsEnumerator = this._parent.CUMaterialItems.GetEnumerator();
                try
                {
                    for (
                    ; cUMaterialItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = cUMaterialItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    cUMaterialItemsEnumerator.Dispose();
                }
                if ((this._parent.CUGroup != null))
                {
                    array[arrayIndex] = this._parent.CUGroup;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> cUWorkEquipmentItemsEnumerator = this._parent.CUWorkEquipmentItems.GetEnumerator();
                try
                {
                    for (
                    ; cUWorkEquipmentItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = cUWorkEquipmentItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    cUWorkEquipmentItemsEnumerator.Dispose();
                }
                if ((this._parent.CostType != null))
                {
                    array[arrayIndex] = this._parent.CostType;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> proceduresEnumerator = this._parent.Procedures.GetEnumerator();
                try
                {
                    for (
                    ; proceduresEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = proceduresEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    proceduresEnumerator.Dispose();
                }
                IEnumerator<IModelElement> cUAssetsEnumerator = this._parent.CUAssets.GetEnumerator();
                try
                {
                    for (
                    ; cUAssetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = cUAssetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    cUAssetsEnumerator.Dispose();
                }
                if ((this._parent.CUAllowableAction != null))
                {
                    array[arrayIndex] = this._parent.CUAllowableAction;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> cUContractorItemsEnumerator = this._parent.CUContractorItems.GetEnumerator();
                try
                {
                    for (
                    ; cUContractorItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = cUContractorItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    cUContractorItemsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IDesignLocationCU designLocationCUItem = item.As<IDesignLocationCU>();
                if (((designLocationCUItem != null) 
                            && this._parent.DesignLocationCUs.Remove(designLocationCUItem)))
                {
                    return true;
                }
                if ((this._parent.PropertyUnit == item))
                {
                    this._parent.PropertyUnit = null;
                    return true;
                }
                ICULaborItem cULaborItemItem = item.As<ICULaborItem>();
                if (((cULaborItemItem != null) 
                            && this._parent.CULaborItems.Remove(cULaborItemItem)))
                {
                    return true;
                }
                ICUMaterialItem cUMaterialItemItem = item.As<ICUMaterialItem>();
                if (((cUMaterialItemItem != null) 
                            && this._parent.CUMaterialItems.Remove(cUMaterialItemItem)))
                {
                    return true;
                }
                if ((this._parent.CUGroup == item))
                {
                    this._parent.CUGroup = null;
                    return true;
                }
                ICUWorkEquipmentItem cUWorkEquipmentItemItem = item.As<ICUWorkEquipmentItem>();
                if (((cUWorkEquipmentItemItem != null) 
                            && this._parent.CUWorkEquipmentItems.Remove(cUWorkEquipmentItemItem)))
                {
                    return true;
                }
                if ((this._parent.CostType == item))
                {
                    this._parent.CostType = null;
                    return true;
                }
                IProcedure procedureItem = item.As<IProcedure>();
                if (((procedureItem != null) 
                            && this._parent.Procedures.Remove(procedureItem)))
                {
                    return true;
                }
                ICUAsset cUAssetItem = item.As<ICUAsset>();
                if (((cUAssetItem != null) 
                            && this._parent.CUAssets.Remove(cUAssetItem)))
                {
                    return true;
                }
                if ((this._parent.CUAllowableAction == item))
                {
                    this._parent.CUAllowableAction = null;
                    return true;
                }
                ICUContractorItem cUContractorItemItem = item.As<ICUContractorItem>();
                if (((cUContractorItemItem != null) 
                            && this._parent.CUContractorItems.Remove(cUContractorItemItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.DesignLocationCUs).Concat(this._parent.PropertyUnit).Concat(this._parent.CULaborItems).Concat(this._parent.CUMaterialItems).Concat(this._parent.CUGroup).Concat(this._parent.CUWorkEquipmentItems).Concat(this._parent.CostType).Concat(this._parent.Procedures).Concat(this._parent.CUAssets).Concat(this._parent.CUAllowableAction).Concat(this._parent.CUContractorItems).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the estCost property
        /// </summary>
        private sealed class EstCostProxy : ModelPropertyChange<ICompatibleUnit, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EstCostProxy(ICompatibleUnit modelElement) : 
                    base(modelElement, "estCost")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.EstCost;
                }
                set
                {
                    this.ModelElement.EstCost = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the quantity property
        /// </summary>
        private sealed class QuantityProxy : ModelPropertyChange<ICompatibleUnit, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QuantityProxy(ICompatibleUnit modelElement) : 
                    base(modelElement, "quantity")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Quantity;
                }
                set
                {
                    this.ModelElement.Quantity = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PropertyUnit property
        /// </summary>
        private sealed class PropertyUnitProxy : ModelPropertyChange<ICompatibleUnit, IPropertyUnit>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PropertyUnitProxy(ICompatibleUnit modelElement) : 
                    base(modelElement, "PropertyUnit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPropertyUnit Value
            {
                get
                {
                    return this.ModelElement.PropertyUnit;
                }
                set
                {
                    this.ModelElement.PropertyUnit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CUGroup property
        /// </summary>
        private sealed class CUGroupProxy : ModelPropertyChange<ICompatibleUnit, ICUGroup>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CUGroupProxy(ICompatibleUnit modelElement) : 
                    base(modelElement, "CUGroup")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICUGroup Value
            {
                get
                {
                    return this.ModelElement.CUGroup;
                }
                set
                {
                    this.ModelElement.CUGroup = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CostType property
        /// </summary>
        private sealed class CostTypeProxy : ModelPropertyChange<ICompatibleUnit, ICostType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CostTypeProxy(ICompatibleUnit modelElement) : 
                    base(modelElement, "CostType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICostType Value
            {
                get
                {
                    return this.ModelElement.CostType;
                }
                set
                {
                    this.ModelElement.CostType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CUAllowableAction property
        /// </summary>
        private sealed class CUAllowableActionProxy : ModelPropertyChange<ICompatibleUnit, ICUAllowableAction>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CUAllowableActionProxy(ICompatibleUnit modelElement) : 
                    base(modelElement, "CUAllowableAction")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICUAllowableAction Value
            {
                get
                {
                    return this.ModelElement.CUAllowableAction;
                }
                set
                {
                    this.ModelElement.CUAllowableAction = value;
                }
            }
        }
    }
}

