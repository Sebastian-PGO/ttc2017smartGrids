//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the WorkLocation class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/WorkLocat" +
        "ion")]
    [DebuggerDisplayAttribute("WorkLocation {UUID}")]
    public partial class WorkLocation : Location, IWorkLocation, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Subdivision property
        /// </summary>
        private string _subdivision;
        
        private static Lazy<ITypedElement> _subdivisionAttribute = new Lazy<ITypedElement>(RetrieveSubdivisionAttribute);
        
        /// <summary>
        /// The backing field for the Block property
        /// </summary>
        private string _block;
        
        private static Lazy<ITypedElement> _blockAttribute = new Lazy<ITypedElement>(RetrieveBlockAttribute);
        
        /// <summary>
        /// The backing field for the Lot property
        /// </summary>
        private string _lot;
        
        private static Lazy<ITypedElement> _lotAttribute = new Lazy<ITypedElement>(RetrieveLotAttribute);
        
        /// <summary>
        /// The backing field for the NearestIntersection property
        /// </summary>
        private string _nearestIntersection;
        
        private static Lazy<ITypedElement> _nearestIntersectionAttribute = new Lazy<ITypedElement>(RetrieveNearestIntersectionAttribute);
        
        private static Lazy<ITypedElement> _designLocationsReference = new Lazy<ITypedElement>(RetrieveDesignLocationsReference);
        
        /// <summary>
        /// The backing field for the DesignLocations property
        /// </summary>
        private WorkLocationDesignLocationsCollection _designLocations;
        
        private static Lazy<ITypedElement> _oneCallRequestReference = new Lazy<ITypedElement>(RetrieveOneCallRequestReference);
        
        /// <summary>
        /// The backing field for the OneCallRequest property
        /// </summary>
        private IOneCallRequest _oneCallRequest;
        
        private static IClass _classInstance;
        
        public WorkLocation()
        {
            this._designLocations = new WorkLocationDesignLocationsCollection(this);
            this._designLocations.CollectionChanging += this.DesignLocationsCollectionChanging;
            this._designLocations.CollectionChanged += this.DesignLocationsCollectionChanged;
        }
        
        /// <summary>
        /// The subdivision property
        /// </summary>
        [XmlElementNameAttribute("subdivision")]
        [XmlAttributeAttribute(true)]
        public virtual string Subdivision
        {
            get
            {
                return this._subdivision;
            }
            set
            {
                if ((this._subdivision != value))
                {
                    string old = this._subdivision;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubdivisionChanging(e);
                    this.OnPropertyChanging("Subdivision", e, _subdivisionAttribute);
                    this._subdivision = value;
                    this.OnSubdivisionChanged(e);
                    this.OnPropertyChanged("Subdivision", e, _subdivisionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The block property
        /// </summary>
        [XmlElementNameAttribute("block")]
        [XmlAttributeAttribute(true)]
        public virtual string Block
        {
            get
            {
                return this._block;
            }
            set
            {
                if ((this._block != value))
                {
                    string old = this._block;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBlockChanging(e);
                    this.OnPropertyChanging("Block", e, _blockAttribute);
                    this._block = value;
                    this.OnBlockChanged(e);
                    this.OnPropertyChanged("Block", e, _blockAttribute);
                }
            }
        }
        
        /// <summary>
        /// The lot property
        /// </summary>
        [XmlElementNameAttribute("lot")]
        [XmlAttributeAttribute(true)]
        public virtual string Lot
        {
            get
            {
                return this._lot;
            }
            set
            {
                if ((this._lot != value))
                {
                    string old = this._lot;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLotChanging(e);
                    this.OnPropertyChanging("Lot", e, _lotAttribute);
                    this._lot = value;
                    this.OnLotChanged(e);
                    this.OnPropertyChanged("Lot", e, _lotAttribute);
                }
            }
        }
        
        /// <summary>
        /// The nearestIntersection property
        /// </summary>
        [XmlElementNameAttribute("nearestIntersection")]
        [XmlAttributeAttribute(true)]
        public virtual string NearestIntersection
        {
            get
            {
                return this._nearestIntersection;
            }
            set
            {
                if ((this._nearestIntersection != value))
                {
                    string old = this._nearestIntersection;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNearestIntersectionChanging(e);
                    this.OnPropertyChanging("NearestIntersection", e, _nearestIntersectionAttribute);
                    this._nearestIntersection = value;
                    this.OnNearestIntersectionChanged(e);
                    this.OnPropertyChanged("NearestIntersection", e, _nearestIntersectionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DesignLocations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkLocations")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDesignLocation> DesignLocations
        {
            get
            {
                return this._designLocations;
            }
        }
        
        /// <summary>
        /// The OneCallRequest property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkLocations")]
        public virtual IOneCallRequest OneCallRequest
        {
            get
            {
                return this._oneCallRequest;
            }
            set
            {
                if ((this._oneCallRequest != value))
                {
                    IOneCallRequest old = this._oneCallRequest;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOneCallRequestChanging(e);
                    this.OnPropertyChanging("OneCallRequest", e, _oneCallRequestReference);
                    this._oneCallRequest = value;
                    if ((old != null))
                    {
                        old.WorkLocations.Remove(this);
                        old.Deleted -= this.OnResetOneCallRequest;
                    }
                    if ((value != null))
                    {
                        value.WorkLocations.Add(this);
                        value.Deleted += this.OnResetOneCallRequest;
                    }
                    this.OnOneCallRequestChanged(e);
                    this.OnPropertyChanged("OneCallRequest", e, _oneCallRequestReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new WorkLocationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/WorkLocat" +
                            "ion")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Subdivision property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubdivisionChanging;
        
        /// <summary>
        /// Gets fired when the Subdivision property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubdivisionChanged;
        
        /// <summary>
        /// Gets fired before the Block property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlockChanging;
        
        /// <summary>
        /// Gets fired when the Block property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BlockChanged;
        
        /// <summary>
        /// Gets fired before the Lot property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LotChanging;
        
        /// <summary>
        /// Gets fired when the Lot property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LotChanged;
        
        /// <summary>
        /// Gets fired before the NearestIntersection property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NearestIntersectionChanging;
        
        /// <summary>
        /// Gets fired when the NearestIntersection property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NearestIntersectionChanged;
        
        /// <summary>
        /// Gets fired before the OneCallRequest property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OneCallRequestChanging;
        
        /// <summary>
        /// Gets fired when the OneCallRequest property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OneCallRequestChanged;
        
        private static ITypedElement RetrieveSubdivisionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WorkLocation.ClassInstance)).Resolve("subdivision")));
        }
        
        /// <summary>
        /// Raises the SubdivisionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubdivisionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubdivisionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubdivisionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubdivisionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubdivisionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBlockAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WorkLocation.ClassInstance)).Resolve("block")));
        }
        
        /// <summary>
        /// Raises the BlockChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlockChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlockChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BlockChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBlockChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BlockChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLotAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WorkLocation.ClassInstance)).Resolve("lot")));
        }
        
        /// <summary>
        /// Raises the LotChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLotChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LotChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LotChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLotChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LotChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNearestIntersectionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WorkLocation.ClassInstance)).Resolve("nearestIntersection")));
        }
        
        /// <summary>
        /// Raises the NearestIntersectionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNearestIntersectionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NearestIntersectionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NearestIntersectionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNearestIntersectionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NearestIntersectionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDesignLocationsReference()
        {
            return ((ITypedElement)(((ModelElement)(WorkLocation.ClassInstance)).Resolve("DesignLocations")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DesignLocations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DesignLocationsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("DesignLocations", e, _designLocationsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DesignLocations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DesignLocationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DesignLocations", e, _designLocationsReference);
        }
        
        private static ITypedElement RetrieveOneCallRequestReference()
        {
            return ((ITypedElement)(((ModelElement)(WorkLocation.ClassInstance)).Resolve("OneCallRequest")));
        }
        
        /// <summary>
        /// Raises the OneCallRequestChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOneCallRequestChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OneCallRequestChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OneCallRequestChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOneCallRequestChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OneCallRequestChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OneCallRequest property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOneCallRequest(object sender, System.EventArgs eventArgs)
        {
            this.OneCallRequest = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SUBDIVISION"))
            {
                return this.Subdivision;
            }
            if ((attribute == "BLOCK"))
            {
                return this.Block;
            }
            if ((attribute == "LOT"))
            {
                return this.Lot;
            }
            if ((attribute == "NEARESTINTERSECTION"))
            {
                return this.NearestIntersection;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "DESIGNLOCATIONS"))
            {
                return this._designLocations;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ONECALLREQUEST"))
            {
                this.OneCallRequest = ((IOneCallRequest)(value));
                return;
            }
            if ((feature == "SUBDIVISION"))
            {
                this.Subdivision = ((string)(value));
                return;
            }
            if ((feature == "BLOCK"))
            {
                this.Block = ((string)(value));
                return;
            }
            if ((feature == "LOT"))
            {
                this.Lot = ((string)(value));
                return;
            }
            if ((feature == "NEARESTINTERSECTION"))
            {
                this.NearestIntersection = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "OneCallRequest"))
            {
                return new OneCallRequestProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OneCallRequest"))
            {
                return new OneCallRequestProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/WorkLocat" +
                        "ion")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the WorkLocation class
        /// </summary>
        public class WorkLocationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private WorkLocation _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public WorkLocationReferencedElementsCollection(WorkLocation parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.DesignLocations.Count);
                    if ((this._parent.OneCallRequest != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.DesignLocations.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OneCallRequestChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.DesignLocations.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OneCallRequestChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IDesignLocation designLocationsCasted = item.As<IDesignLocation>();
                if ((designLocationsCasted != null))
                {
                    this._parent.DesignLocations.Add(designLocationsCasted);
                }
                if ((this._parent.OneCallRequest == null))
                {
                    IOneCallRequest oneCallRequestCasted = item.As<IOneCallRequest>();
                    if ((oneCallRequestCasted != null))
                    {
                        this._parent.OneCallRequest = oneCallRequestCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.DesignLocations.Clear();
                this._parent.OneCallRequest = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.DesignLocations.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.OneCallRequest))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> designLocationsEnumerator = this._parent.DesignLocations.GetEnumerator();
                try
                {
                    for (
                    ; designLocationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = designLocationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    designLocationsEnumerator.Dispose();
                }
                if ((this._parent.OneCallRequest != null))
                {
                    array[arrayIndex] = this._parent.OneCallRequest;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IDesignLocation designLocationItem = item.As<IDesignLocation>();
                if (((designLocationItem != null) 
                            && this._parent.DesignLocations.Remove(designLocationItem)))
                {
                    return true;
                }
                if ((this._parent.OneCallRequest == item))
                {
                    this._parent.OneCallRequest = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.DesignLocations).Concat(this._parent.OneCallRequest).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the subdivision property
        /// </summary>
        private sealed class SubdivisionProxy : ModelPropertyChange<IWorkLocation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubdivisionProxy(IWorkLocation modelElement) : 
                    base(modelElement, "subdivision")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Subdivision;
                }
                set
                {
                    this.ModelElement.Subdivision = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the block property
        /// </summary>
        private sealed class BlockProxy : ModelPropertyChange<IWorkLocation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BlockProxy(IWorkLocation modelElement) : 
                    base(modelElement, "block")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Block;
                }
                set
                {
                    this.ModelElement.Block = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lot property
        /// </summary>
        private sealed class LotProxy : ModelPropertyChange<IWorkLocation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LotProxy(IWorkLocation modelElement) : 
                    base(modelElement, "lot")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Lot;
                }
                set
                {
                    this.ModelElement.Lot = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the nearestIntersection property
        /// </summary>
        private sealed class NearestIntersectionProxy : ModelPropertyChange<IWorkLocation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NearestIntersectionProxy(IWorkLocation modelElement) : 
                    base(modelElement, "nearestIntersection")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.NearestIntersection;
                }
                set
                {
                    this.ModelElement.NearestIntersection = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OneCallRequest property
        /// </summary>
        private sealed class OneCallRequestProxy : ModelPropertyChange<IWorkLocation, IOneCallRequest>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OneCallRequestProxy(IWorkLocation modelElement) : 
                    base(modelElement, "OneCallRequest")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOneCallRequest Value
            {
                get
                {
                    return this.ModelElement.OneCallRequest;
                }
                set
                {
                    this.ModelElement.OneCallRequest = value;
                }
            }
        }
    }
}

