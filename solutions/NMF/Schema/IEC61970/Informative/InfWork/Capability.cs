using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the Capability class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Capabilit" +
        "y")]
    [DebuggerDisplayAttribute("Capability {UUID}")]
    public partial class Capability : IdentifiedObject, ICapability, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Category property
        /// </summary>
        private string _category;
        
        private static Lazy<ITypedElement> _categoryAttribute = new Lazy<ITypedElement>(RetrieveCategoryAttribute);
        
        /// <summary>
        /// The backing field for the PerformanceFactor property
        /// </summary>
        private string _performanceFactor;
        
        private static Lazy<ITypedElement> _performanceFactorAttribute = new Lazy<ITypedElement>(RetrievePerformanceFactorAttribute);
        
        private static Lazy<ITypedElement> _workTasksReference = new Lazy<ITypedElement>(RetrieveWorkTasksReference);
        
        /// <summary>
        /// The backing field for the WorkTasks property
        /// </summary>
        private CapabilityWorkTasksCollection _workTasks;
        
        private static Lazy<ITypedElement> _validityIntervalReference = new Lazy<ITypedElement>(RetrieveValidityIntervalReference);
        
        /// <summary>
        /// The backing field for the ValidityInterval property
        /// </summary>
        private IDateTimeInterval _validityInterval;
        
        private static Lazy<ITypedElement> _crewReference = new Lazy<ITypedElement>(RetrieveCrewReference);
        
        /// <summary>
        /// The backing field for the Crew property
        /// </summary>
        private ICrew _crew;
        
        private static Lazy<ITypedElement> _craftsReference = new Lazy<ITypedElement>(RetrieveCraftsReference);
        
        /// <summary>
        /// The backing field for the Crafts property
        /// </summary>
        private CapabilityCraftsCollection _crafts;
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static IClass _classInstance;
        
        public Capability()
        {
            this._workTasks = new CapabilityWorkTasksCollection(this);
            this._workTasks.CollectionChanging += this.WorkTasksCollectionChanging;
            this._workTasks.CollectionChanged += this.WorkTasksCollectionChanged;
            this._crafts = new CapabilityCraftsCollection(this);
            this._crafts.CollectionChanging += this.CraftsCollectionChanging;
            this._crafts.CollectionChanged += this.CraftsCollectionChanged;
        }
        
        /// <summary>
        /// The category property
        /// </summary>
        [XmlElementNameAttribute("category")]
        [XmlAttributeAttribute(true)]
        public virtual string Category
        {
            get
            {
                return this._category;
            }
            set
            {
                if ((this._category != value))
                {
                    string old = this._category;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCategoryChanging(e);
                    this.OnPropertyChanging("Category", e, _categoryAttribute);
                    this._category = value;
                    this.OnCategoryChanged(e);
                    this.OnPropertyChanged("Category", e, _categoryAttribute);
                }
            }
        }
        
        /// <summary>
        /// The performanceFactor property
        /// </summary>
        [XmlElementNameAttribute("performanceFactor")]
        [XmlAttributeAttribute(true)]
        public virtual string PerformanceFactor
        {
            get
            {
                return this._performanceFactor;
            }
            set
            {
                if ((this._performanceFactor != value))
                {
                    string old = this._performanceFactor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPerformanceFactorChanging(e);
                    this.OnPropertyChanging("PerformanceFactor", e, _performanceFactorAttribute);
                    this._performanceFactor = value;
                    this.OnPerformanceFactorChanged(e);
                    this.OnPropertyChanged("PerformanceFactor", e, _performanceFactorAttribute);
                }
            }
        }
        
        /// <summary>
        /// The WorkTasks property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Capabilities")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWorkTask> WorkTasks
        {
            get
            {
                return this._workTasks;
            }
        }
        
        /// <summary>
        /// The validityInterval property
        /// </summary>
        [XmlElementNameAttribute("validityInterval")]
        [XmlAttributeAttribute(true)]
        public virtual IDateTimeInterval ValidityInterval
        {
            get
            {
                return this._validityInterval;
            }
            set
            {
                if ((this._validityInterval != value))
                {
                    IDateTimeInterval old = this._validityInterval;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValidityIntervalChanging(e);
                    this.OnPropertyChanging("ValidityInterval", e, _validityIntervalReference);
                    this._validityInterval = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetValidityInterval;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetValidityInterval;
                    }
                    this.OnValidityIntervalChanged(e);
                    this.OnPropertyChanged("ValidityInterval", e, _validityIntervalReference);
                }
            }
        }
        
        /// <summary>
        /// The Crew property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Capabilities")]
        public virtual ICrew Crew
        {
            get
            {
                return this._crew;
            }
            set
            {
                if ((this._crew != value))
                {
                    ICrew old = this._crew;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCrewChanging(e);
                    this.OnPropertyChanging("Crew", e, _crewReference);
                    this._crew = value;
                    if ((old != null))
                    {
                        old.Capabilities.Remove(this);
                        old.Deleted -= this.OnResetCrew;
                    }
                    if ((value != null))
                    {
                        value.Capabilities.Add(this);
                        value.Deleted += this.OnResetCrew;
                    }
                    this.OnCrewChanged(e);
                    this.OnPropertyChanged("Crew", e, _crewReference);
                }
            }
        }
        
        /// <summary>
        /// The Crafts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Capabilities")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICraft> Crafts
        {
            get
            {
                return this._crafts;
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CapabilityReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Capabilit" +
                            "y")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Category property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CategoryChanging;
        
        /// <summary>
        /// Gets fired when the Category property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CategoryChanged;
        
        /// <summary>
        /// Gets fired before the PerformanceFactor property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PerformanceFactorChanging;
        
        /// <summary>
        /// Gets fired when the PerformanceFactor property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PerformanceFactorChanged;
        
        /// <summary>
        /// Gets fired before the ValidityInterval property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValidityIntervalChanging;
        
        /// <summary>
        /// Gets fired when the ValidityInterval property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValidityIntervalChanged;
        
        /// <summary>
        /// Gets fired before the Crew property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CrewChanging;
        
        /// <summary>
        /// Gets fired when the Crew property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CrewChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        private static ITypedElement RetrieveCategoryAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Capability.ClassInstance)).Resolve("category")));
        }
        
        /// <summary>
        /// Raises the CategoryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCategoryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CategoryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CategoryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCategoryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CategoryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePerformanceFactorAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Capability.ClassInstance)).Resolve("performanceFactor")));
        }
        
        /// <summary>
        /// Raises the PerformanceFactorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPerformanceFactorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PerformanceFactorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PerformanceFactorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPerformanceFactorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PerformanceFactorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveWorkTasksReference()
        {
            return ((ITypedElement)(((ModelElement)(Capability.ClassInstance)).Resolve("WorkTasks")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WorkTasks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkTasksCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("WorkTasks", e, _workTasksReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WorkTasks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkTasksCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WorkTasks", e, _workTasksReference);
        }
        
        private static ITypedElement RetrieveValidityIntervalReference()
        {
            return ((ITypedElement)(((ModelElement)(Capability.ClassInstance)).Resolve("validityInterval")));
        }
        
        /// <summary>
        /// Raises the ValidityIntervalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValidityIntervalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValidityIntervalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValidityIntervalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValidityIntervalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValidityIntervalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ValidityInterval property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetValidityInterval(object sender, System.EventArgs eventArgs)
        {
            this.ValidityInterval = null;
        }
        
        private static ITypedElement RetrieveCrewReference()
        {
            return ((ITypedElement)(((ModelElement)(Capability.ClassInstance)).Resolve("Crew")));
        }
        
        /// <summary>
        /// Raises the CrewChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCrewChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CrewChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CrewChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCrewChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CrewChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Crew property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCrew(object sender, System.EventArgs eventArgs)
        {
            this.Crew = null;
        }
        
        private static ITypedElement RetrieveCraftsReference()
        {
            return ((ITypedElement)(((ModelElement)(Capability.ClassInstance)).Resolve("Crafts")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Crafts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CraftsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Crafts", e, _craftsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Crafts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CraftsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Crafts", e, _craftsReference);
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(Capability.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CATEGORY"))
            {
                return this.Category;
            }
            if ((attribute == "PERFORMANCEFACTOR"))
            {
                return this.PerformanceFactor;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "WORKTASKS"))
            {
                return this._workTasks;
            }
            if ((feature == "CRAFTS"))
            {
                return this._crafts;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "VALIDITYINTERVAL"))
            {
                this.ValidityInterval = ((IDateTimeInterval)(value));
                return;
            }
            if ((feature == "CREW"))
            {
                this.Crew = ((ICrew)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "CATEGORY"))
            {
                this.Category = ((string)(value));
                return;
            }
            if ((feature == "PERFORMANCEFACTOR"))
            {
                this.PerformanceFactor = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ValidityInterval"))
            {
                return new ValidityIntervalProxy(this);
            }
            if ((attribute == "Crew"))
            {
                return new CrewProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ValidityInterval"))
            {
                return new ValidityIntervalProxy(this);
            }
            if ((reference == "Crew"))
            {
                return new CrewProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Capabilit" +
                        "y")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Capability class
        /// </summary>
        public class CapabilityReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Capability _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CapabilityReferencedElementsCollection(Capability parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.WorkTasks.Count);
                    if ((this._parent.ValidityInterval != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Crew != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Crafts.Count);
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.WorkTasks.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ValidityIntervalChanged += this.PropagateValueChanges;
                this._parent.CrewChanged += this.PropagateValueChanges;
                this._parent.Crafts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.WorkTasks.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ValidityIntervalChanged -= this.PropagateValueChanges;
                this._parent.CrewChanged -= this.PropagateValueChanges;
                this._parent.Crafts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IWorkTask workTasksCasted = item.As<IWorkTask>();
                if ((workTasksCasted != null))
                {
                    this._parent.WorkTasks.Add(workTasksCasted);
                }
                if ((this._parent.ValidityInterval == null))
                {
                    IDateTimeInterval validityIntervalCasted = item.As<IDateTimeInterval>();
                    if ((validityIntervalCasted != null))
                    {
                        this._parent.ValidityInterval = validityIntervalCasted;
                        return;
                    }
                }
                if ((this._parent.Crew == null))
                {
                    ICrew crewCasted = item.As<ICrew>();
                    if ((crewCasted != null))
                    {
                        this._parent.Crew = crewCasted;
                        return;
                    }
                }
                ICraft craftsCasted = item.As<ICraft>();
                if ((craftsCasted != null))
                {
                    this._parent.Crafts.Add(craftsCasted);
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.WorkTasks.Clear();
                this._parent.ValidityInterval = null;
                this._parent.Crew = null;
                this._parent.Crafts.Clear();
                this._parent.Status = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.WorkTasks.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ValidityInterval))
                {
                    return true;
                }
                if ((item == this._parent.Crew))
                {
                    return true;
                }
                if (this._parent.Crafts.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> workTasksEnumerator = this._parent.WorkTasks.GetEnumerator();
                try
                {
                    for (
                    ; workTasksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = workTasksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    workTasksEnumerator.Dispose();
                }
                if ((this._parent.ValidityInterval != null))
                {
                    array[arrayIndex] = this._parent.ValidityInterval;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Crew != null))
                {
                    array[arrayIndex] = this._parent.Crew;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> craftsEnumerator = this._parent.Crafts.GetEnumerator();
                try
                {
                    for (
                    ; craftsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = craftsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    craftsEnumerator.Dispose();
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IWorkTask workTaskItem = item.As<IWorkTask>();
                if (((workTaskItem != null) 
                            && this._parent.WorkTasks.Remove(workTaskItem)))
                {
                    return true;
                }
                if ((this._parent.ValidityInterval == item))
                {
                    this._parent.ValidityInterval = null;
                    return true;
                }
                if ((this._parent.Crew == item))
                {
                    this._parent.Crew = null;
                    return true;
                }
                ICraft craftItem = item.As<ICraft>();
                if (((craftItem != null) 
                            && this._parent.Crafts.Remove(craftItem)))
                {
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.WorkTasks).Concat(this._parent.ValidityInterval).Concat(this._parent.Crew).Concat(this._parent.Crafts).Concat(this._parent.Status).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the category property
        /// </summary>
        private sealed class CategoryProxy : ModelPropertyChange<ICapability, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CategoryProxy(ICapability modelElement) : 
                    base(modelElement, "category")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Category;
                }
                set
                {
                    this.ModelElement.Category = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the performanceFactor property
        /// </summary>
        private sealed class PerformanceFactorProxy : ModelPropertyChange<ICapability, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PerformanceFactorProxy(ICapability modelElement) : 
                    base(modelElement, "performanceFactor")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.PerformanceFactor;
                }
                set
                {
                    this.ModelElement.PerformanceFactor = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the validityInterval property
        /// </summary>
        private sealed class ValidityIntervalProxy : ModelPropertyChange<ICapability, IDateTimeInterval>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValidityIntervalProxy(ICapability modelElement) : 
                    base(modelElement, "validityInterval")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDateTimeInterval Value
            {
                get
                {
                    return this.ModelElement.ValidityInterval;
                }
                set
                {
                    this.ModelElement.ValidityInterval = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Crew property
        /// </summary>
        private sealed class CrewProxy : ModelPropertyChange<ICapability, ICrew>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CrewProxy(ICapability modelElement) : 
                    base(modelElement, "Crew")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICrew Value
            {
                get
                {
                    return this.ModelElement.Crew;
                }
                set
                {
                    this.ModelElement.Crew = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<ICapability, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(ICapability modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
    }
}

