//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the Design class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Design")]
    [DebuggerDisplayAttribute("Design {UUID}")]
    public partial class Design : Document, IDesign, IModelElement
    {
        
        /// <summary>
        /// The backing field for the CostEstimate property
        /// </summary>
        private float _costEstimate;
        
        private static Lazy<ITypedElement> _costEstimateAttribute = new Lazy<ITypedElement>(RetrieveCostEstimateAttribute);
        
        /// <summary>
        /// The backing field for the Kind property
        /// </summary>
        private Nullable<DesignKind> _kind;
        
        private static Lazy<ITypedElement> _kindAttribute = new Lazy<ITypedElement>(RetrieveKindAttribute);
        
        /// <summary>
        /// The backing field for the Price property
        /// </summary>
        private float _price;
        
        private static Lazy<ITypedElement> _priceAttribute = new Lazy<ITypedElement>(RetrievePriceAttribute);
        
        private static Lazy<ITypedElement> _designLocationsReference = new Lazy<ITypedElement>(RetrieveDesignLocationsReference);
        
        /// <summary>
        /// The backing field for the DesignLocations property
        /// </summary>
        private DesignDesignLocationsCollection _designLocations;
        
        private static Lazy<ITypedElement> _designLocationsCUsReference = new Lazy<ITypedElement>(RetrieveDesignLocationsCUsReference);
        
        /// <summary>
        /// The backing field for the DesignLocationsCUs property
        /// </summary>
        private DesignDesignLocationsCUsCollection _designLocationsCUs;
        
        private static Lazy<ITypedElement> _workReference = new Lazy<ITypedElement>(RetrieveWorkReference);
        
        /// <summary>
        /// The backing field for the Work property
        /// </summary>
        private IWork _work;
        
        private static Lazy<ITypedElement> _workCostDetailsReference = new Lazy<ITypedElement>(RetrieveWorkCostDetailsReference);
        
        /// <summary>
        /// The backing field for the WorkCostDetails property
        /// </summary>
        private DesignWorkCostDetailsCollection _workCostDetails;
        
        private static Lazy<ITypedElement> _erpBOMsReference = new Lazy<ITypedElement>(RetrieveErpBOMsReference);
        
        /// <summary>
        /// The backing field for the ErpBOMs property
        /// </summary>
        private DesignErpBOMsCollection _erpBOMs;
        
        private static Lazy<ITypedElement> _erpQuoteLineItemReference = new Lazy<ITypedElement>(RetrieveErpQuoteLineItemReference);
        
        /// <summary>
        /// The backing field for the ErpQuoteLineItem property
        /// </summary>
        private IErpQuoteLineItem _erpQuoteLineItem;
        
        private static Lazy<ITypedElement> _conditionFactorsReference = new Lazy<ITypedElement>(RetrieveConditionFactorsReference);
        
        /// <summary>
        /// The backing field for the ConditionFactors property
        /// </summary>
        private DesignConditionFactorsCollection _conditionFactors;
        
        private static Lazy<ITypedElement> _workTasksReference = new Lazy<ITypedElement>(RetrieveWorkTasksReference);
        
        /// <summary>
        /// The backing field for the WorkTasks property
        /// </summary>
        private DesignWorkTasksCollection _workTasks;
        
        private static IClass _classInstance;
        
        public Design()
        {
            this._designLocations = new DesignDesignLocationsCollection(this);
            this._designLocations.CollectionChanging += this.DesignLocationsCollectionChanging;
            this._designLocations.CollectionChanged += this.DesignLocationsCollectionChanged;
            this._designLocationsCUs = new DesignDesignLocationsCUsCollection(this);
            this._designLocationsCUs.CollectionChanging += this.DesignLocationsCUsCollectionChanging;
            this._designLocationsCUs.CollectionChanged += this.DesignLocationsCUsCollectionChanged;
            this._workCostDetails = new DesignWorkCostDetailsCollection(this);
            this._workCostDetails.CollectionChanging += this.WorkCostDetailsCollectionChanging;
            this._workCostDetails.CollectionChanged += this.WorkCostDetailsCollectionChanged;
            this._erpBOMs = new DesignErpBOMsCollection(this);
            this._erpBOMs.CollectionChanging += this.ErpBOMsCollectionChanging;
            this._erpBOMs.CollectionChanged += this.ErpBOMsCollectionChanged;
            this._conditionFactors = new DesignConditionFactorsCollection(this);
            this._conditionFactors.CollectionChanging += this.ConditionFactorsCollectionChanging;
            this._conditionFactors.CollectionChanged += this.ConditionFactorsCollectionChanged;
            this._workTasks = new DesignWorkTasksCollection(this);
            this._workTasks.CollectionChanging += this.WorkTasksCollectionChanging;
            this._workTasks.CollectionChanged += this.WorkTasksCollectionChanged;
        }
        
        /// <summary>
        /// The costEstimate property
        /// </summary>
        [XmlElementNameAttribute("costEstimate")]
        [XmlAttributeAttribute(true)]
        public virtual float CostEstimate
        {
            get
            {
                return this._costEstimate;
            }
            set
            {
                if ((this._costEstimate != value))
                {
                    float old = this._costEstimate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCostEstimateChanging(e);
                    this.OnPropertyChanging("CostEstimate", e, _costEstimateAttribute);
                    this._costEstimate = value;
                    this.OnCostEstimateChanged(e);
                    this.OnPropertyChanged("CostEstimate", e, _costEstimateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The kind property
        /// </summary>
        [XmlElementNameAttribute("kind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<DesignKind> Kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                if ((this._kind != value))
                {
                    Nullable<DesignKind> old = this._kind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKindChanging(e);
                    this.OnPropertyChanging("Kind", e, _kindAttribute);
                    this._kind = value;
                    this.OnKindChanged(e);
                    this.OnPropertyChanged("Kind", e, _kindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The price property
        /// </summary>
        [XmlElementNameAttribute("price")]
        [XmlAttributeAttribute(true)]
        public virtual float Price
        {
            get
            {
                return this._price;
            }
            set
            {
                if ((this._price != value))
                {
                    float old = this._price;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPriceChanging(e);
                    this.OnPropertyChanging("Price", e, _priceAttribute);
                    this._price = value;
                    this.OnPriceChanged(e);
                    this.OnPropertyChanged("Price", e, _priceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DesignLocations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Designs")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDesignLocation> DesignLocations
        {
            get
            {
                return this._designLocations;
            }
        }
        
        /// <summary>
        /// The DesignLocationsCUs property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Designs")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDesignLocationCU> DesignLocationsCUs
        {
            get
            {
                return this._designLocationsCUs;
            }
        }
        
        /// <summary>
        /// The Work property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Designs")]
        public virtual IWork Work
        {
            get
            {
                return this._work;
            }
            set
            {
                if ((this._work != value))
                {
                    IWork old = this._work;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWorkChanging(e);
                    this.OnPropertyChanging("Work", e, _workReference);
                    this._work = value;
                    if ((old != null))
                    {
                        old.Designs.Remove(this);
                        old.Deleted -= this.OnResetWork;
                    }
                    if ((value != null))
                    {
                        value.Designs.Add(this);
                        value.Deleted += this.OnResetWork;
                    }
                    this.OnWorkChanged(e);
                    this.OnPropertyChanged("Work", e, _workReference);
                }
            }
        }
        
        /// <summary>
        /// The WorkCostDetails property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Design")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWorkCostDetail> WorkCostDetails
        {
            get
            {
                return this._workCostDetails;
            }
        }
        
        /// <summary>
        /// The ErpBOMs property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Design")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpBOM> ErpBOMs
        {
            get
            {
                return this._erpBOMs;
            }
        }
        
        /// <summary>
        /// The ErpQuoteLineItem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Design")]
        public virtual IErpQuoteLineItem ErpQuoteLineItem
        {
            get
            {
                return this._erpQuoteLineItem;
            }
            set
            {
                if ((this._erpQuoteLineItem != value))
                {
                    IErpQuoteLineItem old = this._erpQuoteLineItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpQuoteLineItemChanging(e);
                    this.OnPropertyChanging("ErpQuoteLineItem", e, _erpQuoteLineItemReference);
                    this._erpQuoteLineItem = value;
                    if ((old != null))
                    {
                        old.Design = null;
                        old.Deleted -= this.OnResetErpQuoteLineItem;
                    }
                    if ((value != null))
                    {
                        value.Design = this;
                        value.Deleted += this.OnResetErpQuoteLineItem;
                    }
                    this.OnErpQuoteLineItemChanged(e);
                    this.OnPropertyChanged("ErpQuoteLineItem", e, _erpQuoteLineItemReference);
                }
            }
        }
        
        /// <summary>
        /// The ConditionFactors property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Designs")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IConditionFactor> ConditionFactors
        {
            get
            {
                return this._conditionFactors;
            }
        }
        
        /// <summary>
        /// The WorkTasks property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Design")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWorkTask> WorkTasks
        {
            get
            {
                return this._workTasks;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new DesignReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Design")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the CostEstimate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostEstimateChanging;
        
        /// <summary>
        /// Gets fired when the CostEstimate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostEstimateChanged;
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        /// <summary>
        /// Gets fired before the Price property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PriceChanging;
        
        /// <summary>
        /// Gets fired when the Price property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PriceChanged;
        
        /// <summary>
        /// Gets fired before the Work property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkChanging;
        
        /// <summary>
        /// Gets fired when the Work property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkChanged;
        
        /// <summary>
        /// Gets fired before the ErpQuoteLineItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpQuoteLineItemChanging;
        
        /// <summary>
        /// Gets fired when the ErpQuoteLineItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpQuoteLineItemChanged;
        
        private static ITypedElement RetrieveCostEstimateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Design.ClassInstance)).Resolve("costEstimate")));
        }
        
        /// <summary>
        /// Raises the CostEstimateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostEstimateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostEstimateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CostEstimateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostEstimateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostEstimateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Design.ClassInstance)).Resolve("kind")));
        }
        
        /// <summary>
        /// Raises the KindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePriceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Design.ClassInstance)).Resolve("price")));
        }
        
        /// <summary>
        /// Raises the PriceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPriceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PriceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PriceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPriceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PriceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDesignLocationsReference()
        {
            return ((ITypedElement)(((ModelElement)(Design.ClassInstance)).Resolve("DesignLocations")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DesignLocations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DesignLocationsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("DesignLocations", e, _designLocationsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DesignLocations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DesignLocationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DesignLocations", e, _designLocationsReference);
        }
        
        private static ITypedElement RetrieveDesignLocationsCUsReference()
        {
            return ((ITypedElement)(((ModelElement)(Design.ClassInstance)).Resolve("DesignLocationsCUs")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DesignLocationsCUs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DesignLocationsCUsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("DesignLocationsCUs", e, _designLocationsCUsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DesignLocationsCUs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DesignLocationsCUsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DesignLocationsCUs", e, _designLocationsCUsReference);
        }
        
        private static ITypedElement RetrieveWorkReference()
        {
            return ((ITypedElement)(((ModelElement)(Design.ClassInstance)).Resolve("Work")));
        }
        
        /// <summary>
        /// Raises the WorkChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WorkChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Work property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWork(object sender, System.EventArgs eventArgs)
        {
            this.Work = null;
        }
        
        private static ITypedElement RetrieveWorkCostDetailsReference()
        {
            return ((ITypedElement)(((ModelElement)(Design.ClassInstance)).Resolve("WorkCostDetails")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WorkCostDetails property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkCostDetailsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("WorkCostDetails", e, _workCostDetailsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WorkCostDetails property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkCostDetailsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WorkCostDetails", e, _workCostDetailsReference);
        }
        
        private static ITypedElement RetrieveErpBOMsReference()
        {
            return ((ITypedElement)(((ModelElement)(Design.ClassInstance)).Resolve("ErpBOMs")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpBOMs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpBOMsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpBOMs", e, _erpBOMsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpBOMs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpBOMsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpBOMs", e, _erpBOMsReference);
        }
        
        private static ITypedElement RetrieveErpQuoteLineItemReference()
        {
            return ((ITypedElement)(((ModelElement)(Design.ClassInstance)).Resolve("ErpQuoteLineItem")));
        }
        
        /// <summary>
        /// Raises the ErpQuoteLineItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpQuoteLineItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpQuoteLineItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpQuoteLineItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpQuoteLineItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpQuoteLineItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpQuoteLineItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpQuoteLineItem(object sender, System.EventArgs eventArgs)
        {
            this.ErpQuoteLineItem = null;
        }
        
        private static ITypedElement RetrieveConditionFactorsReference()
        {
            return ((ITypedElement)(((ModelElement)(Design.ClassInstance)).Resolve("ConditionFactors")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ConditionFactors property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConditionFactorsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ConditionFactors", e, _conditionFactorsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ConditionFactors property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConditionFactorsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ConditionFactors", e, _conditionFactorsReference);
        }
        
        private static ITypedElement RetrieveWorkTasksReference()
        {
            return ((ITypedElement)(((ModelElement)(Design.ClassInstance)).Resolve("WorkTasks")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WorkTasks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkTasksCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("WorkTasks", e, _workTasksReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WorkTasks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkTasksCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WorkTasks", e, _workTasksReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "COSTESTIMATE"))
            {
                return this.CostEstimate;
            }
            if ((attribute == "KIND"))
            {
                return this.Kind;
            }
            if ((attribute == "PRICE"))
            {
                return this.Price;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "DESIGNLOCATIONS"))
            {
                return this._designLocations;
            }
            if ((feature == "DESIGNLOCATIONSCUS"))
            {
                return this._designLocationsCUs;
            }
            if ((feature == "WORKCOSTDETAILS"))
            {
                return this._workCostDetails;
            }
            if ((feature == "ERPBOMS"))
            {
                return this._erpBOMs;
            }
            if ((feature == "CONDITIONFACTORS"))
            {
                return this._conditionFactors;
            }
            if ((feature == "WORKTASKS"))
            {
                return this._workTasks;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "WORK"))
            {
                this.Work = ((IWork)(value));
                return;
            }
            if ((feature == "ERPQUOTELINEITEM"))
            {
                this.ErpQuoteLineItem = ((IErpQuoteLineItem)(value));
                return;
            }
            if ((feature == "COSTESTIMATE"))
            {
                this.CostEstimate = ((float)(value));
                return;
            }
            if ((feature == "KIND"))
            {
                this.Kind = ((DesignKind)(value));
                return;
            }
            if ((feature == "PRICE"))
            {
                this.Price = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Work"))
            {
                return new WorkProxy(this);
            }
            if ((attribute == "ErpQuoteLineItem"))
            {
                return new ErpQuoteLineItemProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Work"))
            {
                return new WorkProxy(this);
            }
            if ((reference == "ErpQuoteLineItem"))
            {
                return new ErpQuoteLineItemProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Design")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Design class
        /// </summary>
        public class DesignReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Design _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public DesignReferencedElementsCollection(Design parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.DesignLocations.Count);
                    count = (count + this._parent.DesignLocationsCUs.Count);
                    if ((this._parent.Work != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.WorkCostDetails.Count);
                    count = (count + this._parent.ErpBOMs.Count);
                    if ((this._parent.ErpQuoteLineItem != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ConditionFactors.Count);
                    count = (count + this._parent.WorkTasks.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.DesignLocations.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DesignLocationsCUs.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WorkChanged += this.PropagateValueChanges;
                this._parent.WorkCostDetails.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpBOMs.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpQuoteLineItemChanged += this.PropagateValueChanges;
                this._parent.ConditionFactors.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WorkTasks.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.DesignLocations.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DesignLocationsCUs.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WorkChanged -= this.PropagateValueChanges;
                this._parent.WorkCostDetails.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpBOMs.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpQuoteLineItemChanged -= this.PropagateValueChanges;
                this._parent.ConditionFactors.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WorkTasks.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IDesignLocation designLocationsCasted = item.As<IDesignLocation>();
                if ((designLocationsCasted != null))
                {
                    this._parent.DesignLocations.Add(designLocationsCasted);
                }
                IDesignLocationCU designLocationsCUsCasted = item.As<IDesignLocationCU>();
                if ((designLocationsCUsCasted != null))
                {
                    this._parent.DesignLocationsCUs.Add(designLocationsCUsCasted);
                }
                if ((this._parent.Work == null))
                {
                    IWork workCasted = item.As<IWork>();
                    if ((workCasted != null))
                    {
                        this._parent.Work = workCasted;
                        return;
                    }
                }
                IWorkCostDetail workCostDetailsCasted = item.As<IWorkCostDetail>();
                if ((workCostDetailsCasted != null))
                {
                    this._parent.WorkCostDetails.Add(workCostDetailsCasted);
                }
                IErpBOM erpBOMsCasted = item.As<IErpBOM>();
                if ((erpBOMsCasted != null))
                {
                    this._parent.ErpBOMs.Add(erpBOMsCasted);
                }
                if ((this._parent.ErpQuoteLineItem == null))
                {
                    IErpQuoteLineItem erpQuoteLineItemCasted = item.As<IErpQuoteLineItem>();
                    if ((erpQuoteLineItemCasted != null))
                    {
                        this._parent.ErpQuoteLineItem = erpQuoteLineItemCasted;
                        return;
                    }
                }
                IConditionFactor conditionFactorsCasted = item.As<IConditionFactor>();
                if ((conditionFactorsCasted != null))
                {
                    this._parent.ConditionFactors.Add(conditionFactorsCasted);
                }
                IWorkTask workTasksCasted = item.As<IWorkTask>();
                if ((workTasksCasted != null))
                {
                    this._parent.WorkTasks.Add(workTasksCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.DesignLocations.Clear();
                this._parent.DesignLocationsCUs.Clear();
                this._parent.Work = null;
                this._parent.WorkCostDetails.Clear();
                this._parent.ErpBOMs.Clear();
                this._parent.ErpQuoteLineItem = null;
                this._parent.ConditionFactors.Clear();
                this._parent.WorkTasks.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.DesignLocations.Contains(item))
                {
                    return true;
                }
                if (this._parent.DesignLocationsCUs.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Work))
                {
                    return true;
                }
                if (this._parent.WorkCostDetails.Contains(item))
                {
                    return true;
                }
                if (this._parent.ErpBOMs.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ErpQuoteLineItem))
                {
                    return true;
                }
                if (this._parent.ConditionFactors.Contains(item))
                {
                    return true;
                }
                if (this._parent.WorkTasks.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> designLocationsEnumerator = this._parent.DesignLocations.GetEnumerator();
                try
                {
                    for (
                    ; designLocationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = designLocationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    designLocationsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> designLocationsCUsEnumerator = this._parent.DesignLocationsCUs.GetEnumerator();
                try
                {
                    for (
                    ; designLocationsCUsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = designLocationsCUsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    designLocationsCUsEnumerator.Dispose();
                }
                if ((this._parent.Work != null))
                {
                    array[arrayIndex] = this._parent.Work;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> workCostDetailsEnumerator = this._parent.WorkCostDetails.GetEnumerator();
                try
                {
                    for (
                    ; workCostDetailsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = workCostDetailsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    workCostDetailsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> erpBOMsEnumerator = this._parent.ErpBOMs.GetEnumerator();
                try
                {
                    for (
                    ; erpBOMsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpBOMsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpBOMsEnumerator.Dispose();
                }
                if ((this._parent.ErpQuoteLineItem != null))
                {
                    array[arrayIndex] = this._parent.ErpQuoteLineItem;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> conditionFactorsEnumerator = this._parent.ConditionFactors.GetEnumerator();
                try
                {
                    for (
                    ; conditionFactorsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = conditionFactorsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    conditionFactorsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> workTasksEnumerator = this._parent.WorkTasks.GetEnumerator();
                try
                {
                    for (
                    ; workTasksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = workTasksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    workTasksEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IDesignLocation designLocationItem = item.As<IDesignLocation>();
                if (((designLocationItem != null) 
                            && this._parent.DesignLocations.Remove(designLocationItem)))
                {
                    return true;
                }
                IDesignLocationCU designLocationCUItem = item.As<IDesignLocationCU>();
                if (((designLocationCUItem != null) 
                            && this._parent.DesignLocationsCUs.Remove(designLocationCUItem)))
                {
                    return true;
                }
                if ((this._parent.Work == item))
                {
                    this._parent.Work = null;
                    return true;
                }
                IWorkCostDetail workCostDetailItem = item.As<IWorkCostDetail>();
                if (((workCostDetailItem != null) 
                            && this._parent.WorkCostDetails.Remove(workCostDetailItem)))
                {
                    return true;
                }
                IErpBOM erpBOMItem = item.As<IErpBOM>();
                if (((erpBOMItem != null) 
                            && this._parent.ErpBOMs.Remove(erpBOMItem)))
                {
                    return true;
                }
                if ((this._parent.ErpQuoteLineItem == item))
                {
                    this._parent.ErpQuoteLineItem = null;
                    return true;
                }
                IConditionFactor conditionFactorItem = item.As<IConditionFactor>();
                if (((conditionFactorItem != null) 
                            && this._parent.ConditionFactors.Remove(conditionFactorItem)))
                {
                    return true;
                }
                IWorkTask workTaskItem = item.As<IWorkTask>();
                if (((workTaskItem != null) 
                            && this._parent.WorkTasks.Remove(workTaskItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.DesignLocations).Concat(this._parent.DesignLocationsCUs).Concat(this._parent.Work).Concat(this._parent.WorkCostDetails).Concat(this._parent.ErpBOMs).Concat(this._parent.ErpQuoteLineItem).Concat(this._parent.ConditionFactors).Concat(this._parent.WorkTasks).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the costEstimate property
        /// </summary>
        private sealed class CostEstimateProxy : ModelPropertyChange<IDesign, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CostEstimateProxy(IDesign modelElement) : 
                    base(modelElement, "costEstimate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CostEstimate;
                }
                set
                {
                    this.ModelElement.CostEstimate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kind property
        /// </summary>
        private sealed class KindProxy : ModelPropertyChange<IDesign, Nullable<DesignKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KindProxy(IDesign modelElement) : 
                    base(modelElement, "kind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<DesignKind> Value
            {
                get
                {
                    return this.ModelElement.Kind;
                }
                set
                {
                    this.ModelElement.Kind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the price property
        /// </summary>
        private sealed class PriceProxy : ModelPropertyChange<IDesign, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PriceProxy(IDesign modelElement) : 
                    base(modelElement, "price")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Price;
                }
                set
                {
                    this.ModelElement.Price = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Work property
        /// </summary>
        private sealed class WorkProxy : ModelPropertyChange<IDesign, IWork>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WorkProxy(IDesign modelElement) : 
                    base(modelElement, "Work")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWork Value
            {
                get
                {
                    return this.ModelElement.Work;
                }
                set
                {
                    this.ModelElement.Work = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpQuoteLineItem property
        /// </summary>
        private sealed class ErpQuoteLineItemProxy : ModelPropertyChange<IDesign, IErpQuoteLineItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpQuoteLineItemProxy(IDesign modelElement) : 
                    base(modelElement, "ErpQuoteLineItem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpQuoteLineItem Value
            {
                get
                {
                    return this.ModelElement.ErpQuoteLineItem;
                }
                set
                {
                    this.ModelElement.ErpQuoteLineItem = value;
                }
            }
        }
    }
}

