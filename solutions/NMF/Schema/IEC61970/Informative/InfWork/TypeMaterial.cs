using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the TypeMaterial class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/TypeMater" +
        "ial")]
    [DebuggerDisplayAttribute("TypeMaterial {UUID}")]
    public partial class TypeMaterial : Document, ITypeMaterial, IModelElement
    {
        
        /// <summary>
        /// The backing field for the StockItem property
        /// </summary>
        private bool _stockItem;
        
        private static Lazy<ITypedElement> _stockItemAttribute = new Lazy<ITypedElement>(RetrieveStockItemAttribute);
        
        /// <summary>
        /// The backing field for the Quantity property
        /// </summary>
        private string _quantity;
        
        private static Lazy<ITypedElement> _quantityAttribute = new Lazy<ITypedElement>(RetrieveQuantityAttribute);
        
        /// <summary>
        /// The backing field for the CostType property
        /// </summary>
        private string _costType;
        
        private static Lazy<ITypedElement> _costTypeAttribute = new Lazy<ITypedElement>(RetrieveCostTypeAttribute);
        
        /// <summary>
        /// The backing field for the EstUnitCost property
        /// </summary>
        private float _estUnitCost;
        
        private static Lazy<ITypedElement> _estUnitCostAttribute = new Lazy<ITypedElement>(RetrieveEstUnitCostAttribute);
        
        private static Lazy<ITypedElement> _erpIssueInventoriesReference = new Lazy<ITypedElement>(RetrieveErpIssueInventoriesReference);
        
        /// <summary>
        /// The backing field for the ErpIssueInventories property
        /// </summary>
        private TypeMaterialErpIssueInventoriesCollection _erpIssueInventories;
        
        private static Lazy<ITypedElement> _erpReqLineItemsReference = new Lazy<ITypedElement>(RetrieveErpReqLineItemsReference);
        
        /// <summary>
        /// The backing field for the ErpReqLineItems property
        /// </summary>
        private TypeMaterialErpReqLineItemsCollection _erpReqLineItems;
        
        private static Lazy<ITypedElement> _materialItemsReference = new Lazy<ITypedElement>(RetrieveMaterialItemsReference);
        
        /// <summary>
        /// The backing field for the MaterialItems property
        /// </summary>
        private TypeMaterialMaterialItemsCollection _materialItems;
        
        private static Lazy<ITypedElement> _cUMaterialItemsReference = new Lazy<ITypedElement>(RetrieveCUMaterialItemsReference);
        
        /// <summary>
        /// The backing field for the CUMaterialItems property
        /// </summary>
        private TypeMaterialCUMaterialItemsCollection _cUMaterialItems;
        
        private static IClass _classInstance;
        
        public TypeMaterial()
        {
            this._erpIssueInventories = new TypeMaterialErpIssueInventoriesCollection(this);
            this._erpIssueInventories.CollectionChanging += this.ErpIssueInventoriesCollectionChanging;
            this._erpIssueInventories.CollectionChanged += this.ErpIssueInventoriesCollectionChanged;
            this._erpReqLineItems = new TypeMaterialErpReqLineItemsCollection(this);
            this._erpReqLineItems.CollectionChanging += this.ErpReqLineItemsCollectionChanging;
            this._erpReqLineItems.CollectionChanged += this.ErpReqLineItemsCollectionChanged;
            this._materialItems = new TypeMaterialMaterialItemsCollection(this);
            this._materialItems.CollectionChanging += this.MaterialItemsCollectionChanging;
            this._materialItems.CollectionChanged += this.MaterialItemsCollectionChanged;
            this._cUMaterialItems = new TypeMaterialCUMaterialItemsCollection(this);
            this._cUMaterialItems.CollectionChanging += this.CUMaterialItemsCollectionChanging;
            this._cUMaterialItems.CollectionChanged += this.CUMaterialItemsCollectionChanged;
        }
        
        /// <summary>
        /// The stockItem property
        /// </summary>
        [XmlElementNameAttribute("stockItem")]
        [XmlAttributeAttribute(true)]
        public virtual bool StockItem
        {
            get
            {
                return this._stockItem;
            }
            set
            {
                if ((this._stockItem != value))
                {
                    bool old = this._stockItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStockItemChanging(e);
                    this.OnPropertyChanging("StockItem", e, _stockItemAttribute);
                    this._stockItem = value;
                    this.OnStockItemChanged(e);
                    this.OnPropertyChanged("StockItem", e, _stockItemAttribute);
                }
            }
        }
        
        /// <summary>
        /// The quantity property
        /// </summary>
        [XmlElementNameAttribute("quantity")]
        [XmlAttributeAttribute(true)]
        public virtual string Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    string old = this._quantity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQuantityChanging(e);
                    this.OnPropertyChanging("Quantity", e, _quantityAttribute);
                    this._quantity = value;
                    this.OnQuantityChanged(e);
                    this.OnPropertyChanged("Quantity", e, _quantityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The costType property
        /// </summary>
        [XmlElementNameAttribute("costType")]
        [XmlAttributeAttribute(true)]
        public virtual string CostType
        {
            get
            {
                return this._costType;
            }
            set
            {
                if ((this._costType != value))
                {
                    string old = this._costType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCostTypeChanging(e);
                    this.OnPropertyChanging("CostType", e, _costTypeAttribute);
                    this._costType = value;
                    this.OnCostTypeChanged(e);
                    this.OnPropertyChanged("CostType", e, _costTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The estUnitCost property
        /// </summary>
        [XmlElementNameAttribute("estUnitCost")]
        [XmlAttributeAttribute(true)]
        public virtual float EstUnitCost
        {
            get
            {
                return this._estUnitCost;
            }
            set
            {
                if ((this._estUnitCost != value))
                {
                    float old = this._estUnitCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEstUnitCostChanging(e);
                    this.OnPropertyChanging("EstUnitCost", e, _estUnitCostAttribute);
                    this._estUnitCost = value;
                    this.OnEstUnitCostChanged(e);
                    this.OnPropertyChanged("EstUnitCost", e, _estUnitCostAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ErpIssueInventories property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TypeMaterial")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpIssueInventory> ErpIssueInventories
        {
            get
            {
                return this._erpIssueInventories;
            }
        }
        
        /// <summary>
        /// The ErpReqLineItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TypeMaterial")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpReqLineItem> ErpReqLineItems
        {
            get
            {
                return this._erpReqLineItems;
            }
        }
        
        /// <summary>
        /// The MaterialItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TypeMaterial")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMaterialItem> MaterialItems
        {
            get
            {
                return this._materialItems;
            }
        }
        
        /// <summary>
        /// The CUMaterialItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TypeMaterial")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICUMaterialItem> CUMaterialItems
        {
            get
            {
                return this._cUMaterialItems;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TypeMaterialReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/TypeMater" +
                            "ial")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the StockItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StockItemChanging;
        
        /// <summary>
        /// Gets fired when the StockItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StockItemChanged;
        
        /// <summary>
        /// Gets fired before the Quantity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuantityChanging;
        
        /// <summary>
        /// Gets fired when the Quantity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuantityChanged;
        
        /// <summary>
        /// Gets fired before the CostType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostTypeChanging;
        
        /// <summary>
        /// Gets fired when the CostType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostTypeChanged;
        
        /// <summary>
        /// Gets fired before the EstUnitCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EstUnitCostChanging;
        
        /// <summary>
        /// Gets fired when the EstUnitCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EstUnitCostChanged;
        
        private static ITypedElement RetrieveStockItemAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TypeMaterial.ClassInstance)).Resolve("stockItem")));
        }
        
        /// <summary>
        /// Raises the StockItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStockItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StockItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StockItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStockItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StockItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveQuantityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TypeMaterial.ClassInstance)).Resolve("quantity")));
        }
        
        /// <summary>
        /// Raises the QuantityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuantityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuantityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QuantityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuantityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuantityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCostTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TypeMaterial.ClassInstance)).Resolve("costType")));
        }
        
        /// <summary>
        /// Raises the CostTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CostTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEstUnitCostAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TypeMaterial.ClassInstance)).Resolve("estUnitCost")));
        }
        
        /// <summary>
        /// Raises the EstUnitCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEstUnitCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EstUnitCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EstUnitCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEstUnitCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EstUnitCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveErpIssueInventoriesReference()
        {
            return ((ITypedElement)(((ModelElement)(TypeMaterial.ClassInstance)).Resolve("ErpIssueInventories")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpIssueInventories property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpIssueInventoriesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ErpIssueInventories", e, _erpIssueInventoriesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpIssueInventories property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpIssueInventoriesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpIssueInventories", e, _erpIssueInventoriesReference);
        }
        
        private static ITypedElement RetrieveErpReqLineItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(TypeMaterial.ClassInstance)).Resolve("ErpReqLineItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpReqLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpReqLineItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ErpReqLineItems", e, _erpReqLineItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpReqLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpReqLineItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpReqLineItems", e, _erpReqLineItemsReference);
        }
        
        private static ITypedElement RetrieveMaterialItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(TypeMaterial.ClassInstance)).Resolve("MaterialItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MaterialItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MaterialItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("MaterialItems", e, _materialItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MaterialItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MaterialItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MaterialItems", e, _materialItemsReference);
        }
        
        private static ITypedElement RetrieveCUMaterialItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(TypeMaterial.ClassInstance)).Resolve("CUMaterialItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CUMaterialItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CUMaterialItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("CUMaterialItems", e, _cUMaterialItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CUMaterialItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CUMaterialItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CUMaterialItems", e, _cUMaterialItemsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "STOCKITEM"))
            {
                return this.StockItem;
            }
            if ((attribute == "QUANTITY"))
            {
                return this.Quantity;
            }
            if ((attribute == "COSTTYPE"))
            {
                return this.CostType;
            }
            if ((attribute == "ESTUNITCOST"))
            {
                return this.EstUnitCost;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ERPISSUEINVENTORIES"))
            {
                return this._erpIssueInventories;
            }
            if ((feature == "ERPREQLINEITEMS"))
            {
                return this._erpReqLineItems;
            }
            if ((feature == "MATERIALITEMS"))
            {
                return this._materialItems;
            }
            if ((feature == "CUMATERIALITEMS"))
            {
                return this._cUMaterialItems;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STOCKITEM"))
            {
                this.StockItem = ((bool)(value));
                return;
            }
            if ((feature == "QUANTITY"))
            {
                this.Quantity = ((string)(value));
                return;
            }
            if ((feature == "COSTTYPE"))
            {
                this.CostType = ((string)(value));
                return;
            }
            if ((feature == "ESTUNITCOST"))
            {
                this.EstUnitCost = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/TypeMater" +
                        "ial")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TypeMaterial class
        /// </summary>
        public class TypeMaterialReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TypeMaterial _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TypeMaterialReferencedElementsCollection(TypeMaterial parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ErpIssueInventories.Count);
                    count = (count + this._parent.ErpReqLineItems.Count);
                    count = (count + this._parent.MaterialItems.Count);
                    count = (count + this._parent.CUMaterialItems.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ErpIssueInventories.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpReqLineItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MaterialItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CUMaterialItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ErpIssueInventories.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpReqLineItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MaterialItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CUMaterialItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IErpIssueInventory erpIssueInventoriesCasted = item.As<IErpIssueInventory>();
                if ((erpIssueInventoriesCasted != null))
                {
                    this._parent.ErpIssueInventories.Add(erpIssueInventoriesCasted);
                }
                IErpReqLineItem erpReqLineItemsCasted = item.As<IErpReqLineItem>();
                if ((erpReqLineItemsCasted != null))
                {
                    this._parent.ErpReqLineItems.Add(erpReqLineItemsCasted);
                }
                IMaterialItem materialItemsCasted = item.As<IMaterialItem>();
                if ((materialItemsCasted != null))
                {
                    this._parent.MaterialItems.Add(materialItemsCasted);
                }
                ICUMaterialItem cUMaterialItemsCasted = item.As<ICUMaterialItem>();
                if ((cUMaterialItemsCasted != null))
                {
                    this._parent.CUMaterialItems.Add(cUMaterialItemsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ErpIssueInventories.Clear();
                this._parent.ErpReqLineItems.Clear();
                this._parent.MaterialItems.Clear();
                this._parent.CUMaterialItems.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ErpIssueInventories.Contains(item))
                {
                    return true;
                }
                if (this._parent.ErpReqLineItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.MaterialItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.CUMaterialItems.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> erpIssueInventoriesEnumerator = this._parent.ErpIssueInventories.GetEnumerator();
                try
                {
                    for (
                    ; erpIssueInventoriesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpIssueInventoriesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpIssueInventoriesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> erpReqLineItemsEnumerator = this._parent.ErpReqLineItems.GetEnumerator();
                try
                {
                    for (
                    ; erpReqLineItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpReqLineItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpReqLineItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> materialItemsEnumerator = this._parent.MaterialItems.GetEnumerator();
                try
                {
                    for (
                    ; materialItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = materialItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    materialItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> cUMaterialItemsEnumerator = this._parent.CUMaterialItems.GetEnumerator();
                try
                {
                    for (
                    ; cUMaterialItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = cUMaterialItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    cUMaterialItemsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IErpIssueInventory erpIssueInventoryItem = item.As<IErpIssueInventory>();
                if (((erpIssueInventoryItem != null) 
                            && this._parent.ErpIssueInventories.Remove(erpIssueInventoryItem)))
                {
                    return true;
                }
                IErpReqLineItem erpReqLineItemItem = item.As<IErpReqLineItem>();
                if (((erpReqLineItemItem != null) 
                            && this._parent.ErpReqLineItems.Remove(erpReqLineItemItem)))
                {
                    return true;
                }
                IMaterialItem materialItemItem = item.As<IMaterialItem>();
                if (((materialItemItem != null) 
                            && this._parent.MaterialItems.Remove(materialItemItem)))
                {
                    return true;
                }
                ICUMaterialItem cUMaterialItemItem = item.As<ICUMaterialItem>();
                if (((cUMaterialItemItem != null) 
                            && this._parent.CUMaterialItems.Remove(cUMaterialItemItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ErpIssueInventories).Concat(this._parent.ErpReqLineItems).Concat(this._parent.MaterialItems).Concat(this._parent.CUMaterialItems).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the stockItem property
        /// </summary>
        private sealed class StockItemProxy : ModelPropertyChange<ITypeMaterial, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StockItemProxy(ITypeMaterial modelElement) : 
                    base(modelElement, "stockItem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.StockItem;
                }
                set
                {
                    this.ModelElement.StockItem = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the quantity property
        /// </summary>
        private sealed class QuantityProxy : ModelPropertyChange<ITypeMaterial, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QuantityProxy(ITypeMaterial modelElement) : 
                    base(modelElement, "quantity")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Quantity;
                }
                set
                {
                    this.ModelElement.Quantity = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the costType property
        /// </summary>
        private sealed class CostTypeProxy : ModelPropertyChange<ITypeMaterial, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CostTypeProxy(ITypeMaterial modelElement) : 
                    base(modelElement, "costType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.CostType;
                }
                set
                {
                    this.ModelElement.CostType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the estUnitCost property
        /// </summary>
        private sealed class EstUnitCostProxy : ModelPropertyChange<ITypeMaterial, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EstUnitCostProxy(ITypeMaterial modelElement) : 
                    base(modelElement, "estUnitCost")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.EstUnitCost;
                }
                set
                {
                    this.ModelElement.EstUnitCost = value;
                }
            }
        }
    }
}

