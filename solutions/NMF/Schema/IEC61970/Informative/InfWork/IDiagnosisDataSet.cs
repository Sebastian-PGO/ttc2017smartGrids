using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The public interface for DiagnosisDataSet
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(DiagnosisDataSet))]
    [XmlDefaultImplementationTypeAttribute(typeof(DiagnosisDataSet))]
    public interface IDiagnosisDataSet : IModelElement, IProcedureDataSet
    {
        
        /// <summary>
        /// The phaseCode property
        /// </summary>
        Nullable<PhaseCode> PhaseCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The finalCode property
        /// </summary>
        string FinalCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The effect property
        /// </summary>
        string Effect
        {
            get;
            set;
        }
        
        /// <summary>
        /// The failureMode property
        /// </summary>
        string FailureMode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rootOrigin property
        /// </summary>
        string RootOrigin
        {
            get;
            set;
        }
        
        /// <summary>
        /// The finalCause property
        /// </summary>
        string FinalCause
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rootRemark property
        /// </summary>
        string RootRemark
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rootCause property
        /// </summary>
        string RootCause
        {
            get;
            set;
        }
        
        /// <summary>
        /// The preliminaryRemark property
        /// </summary>
        string PreliminaryRemark
        {
            get;
            set;
        }
        
        /// <summary>
        /// The preliminaryCode property
        /// </summary>
        string PreliminaryCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The preliminaryDateTime property
        /// </summary>
        DateTime PreliminaryDateTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The finalRemark property
        /// </summary>
        string FinalRemark
        {
            get;
            set;
        }
        
        /// <summary>
        /// The finalOrigin property
        /// </summary>
        string FinalOrigin
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the PhaseCode property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhaseCodeChanging;
        
        /// <summary>
        /// Gets fired when the PhaseCode property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhaseCodeChanged;
        
        /// <summary>
        /// Gets fired before the FinalCode property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FinalCodeChanging;
        
        /// <summary>
        /// Gets fired when the FinalCode property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FinalCodeChanged;
        
        /// <summary>
        /// Gets fired before the Effect property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EffectChanging;
        
        /// <summary>
        /// Gets fired when the Effect property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EffectChanged;
        
        /// <summary>
        /// Gets fired before the FailureMode property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FailureModeChanging;
        
        /// <summary>
        /// Gets fired when the FailureMode property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FailureModeChanged;
        
        /// <summary>
        /// Gets fired before the RootOrigin property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RootOriginChanging;
        
        /// <summary>
        /// Gets fired when the RootOrigin property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RootOriginChanged;
        
        /// <summary>
        /// Gets fired before the FinalCause property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FinalCauseChanging;
        
        /// <summary>
        /// Gets fired when the FinalCause property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FinalCauseChanged;
        
        /// <summary>
        /// Gets fired before the RootRemark property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RootRemarkChanging;
        
        /// <summary>
        /// Gets fired when the RootRemark property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RootRemarkChanged;
        
        /// <summary>
        /// Gets fired before the RootCause property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RootCauseChanging;
        
        /// <summary>
        /// Gets fired when the RootCause property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RootCauseChanged;
        
        /// <summary>
        /// Gets fired before the PreliminaryRemark property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PreliminaryRemarkChanging;
        
        /// <summary>
        /// Gets fired when the PreliminaryRemark property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PreliminaryRemarkChanged;
        
        /// <summary>
        /// Gets fired before the PreliminaryCode property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PreliminaryCodeChanging;
        
        /// <summary>
        /// Gets fired when the PreliminaryCode property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PreliminaryCodeChanged;
        
        /// <summary>
        /// Gets fired before the PreliminaryDateTime property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PreliminaryDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the PreliminaryDateTime property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PreliminaryDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the FinalRemark property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FinalRemarkChanging;
        
        /// <summary>
        /// Gets fired when the FinalRemark property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FinalRemarkChanged;
        
        /// <summary>
        /// Gets fired before the FinalOrigin property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FinalOriginChanging;
        
        /// <summary>
        /// Gets fired when the FinalOrigin property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FinalOriginChanged;
    }
}

