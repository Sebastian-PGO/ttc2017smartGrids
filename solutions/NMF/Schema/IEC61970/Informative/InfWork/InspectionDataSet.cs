using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the InspectionDataSet class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Inspectio" +
        "nDataSet")]
    [DebuggerDisplayAttribute("InspectionDataSet {UUID}")]
    public partial class InspectionDataSet : ProcedureDataSet, IInspectionDataSet, IModelElement
    {
        
        /// <summary>
        /// The backing field for the LocationCondition property
        /// </summary>
        private string _locationCondition;
        
        private static Lazy<ITypedElement> _locationConditionAttribute = new Lazy<ITypedElement>(RetrieveLocationConditionAttribute);
        
        private static Lazy<ITypedElement> _accordingToSchedulesReference = new Lazy<ITypedElement>(RetrieveAccordingToSchedulesReference);
        
        /// <summary>
        /// The backing field for the AccordingToSchedules property
        /// </summary>
        private InspectionDataSetAccordingToSchedulesCollection _accordingToSchedules;
        
        private static IClass _classInstance;
        
        public InspectionDataSet()
        {
            this._accordingToSchedules = new InspectionDataSetAccordingToSchedulesCollection(this);
            this._accordingToSchedules.CollectionChanging += this.AccordingToSchedulesCollectionChanging;
            this._accordingToSchedules.CollectionChanged += this.AccordingToSchedulesCollectionChanged;
        }
        
        /// <summary>
        /// The locationCondition property
        /// </summary>
        [XmlElementNameAttribute("locationCondition")]
        [XmlAttributeAttribute(true)]
        public virtual string LocationCondition
        {
            get
            {
                return this._locationCondition;
            }
            set
            {
                if ((this._locationCondition != value))
                {
                    string old = this._locationCondition;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocationConditionChanging(e);
                    this.OnPropertyChanging("LocationCondition", e, _locationConditionAttribute);
                    this._locationCondition = value;
                    this.OnLocationConditionChanged(e);
                    this.OnPropertyChanged("LocationCondition", e, _locationConditionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The AccordingToSchedules property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ForInspectionDataSet")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IScheduleParameterInfo> AccordingToSchedules
        {
            get
            {
                return this._accordingToSchedules;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new InspectionDataSetReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Inspectio" +
                            "nDataSet")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the LocationCondition property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocationConditionChanging;
        
        /// <summary>
        /// Gets fired when the LocationCondition property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocationConditionChanged;
        
        private static ITypedElement RetrieveLocationConditionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(InspectionDataSet.ClassInstance)).Resolve("locationCondition")));
        }
        
        /// <summary>
        /// Raises the LocationConditionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocationConditionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocationConditionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocationConditionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocationConditionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocationConditionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAccordingToSchedulesReference()
        {
            return ((ITypedElement)(((ModelElement)(InspectionDataSet.ClassInstance)).Resolve("AccordingToSchedules")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AccordingToSchedules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AccordingToSchedulesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("AccordingToSchedules", e, _accordingToSchedulesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AccordingToSchedules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AccordingToSchedulesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AccordingToSchedules", e, _accordingToSchedulesReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "LOCATIONCONDITION"))
            {
                return this.LocationCondition;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ACCORDINGTOSCHEDULES"))
            {
                return this._accordingToSchedules;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "LOCATIONCONDITION"))
            {
                this.LocationCondition = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/Inspectio" +
                        "nDataSet")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the InspectionDataSet class
        /// </summary>
        public class InspectionDataSetReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private InspectionDataSet _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public InspectionDataSetReferencedElementsCollection(InspectionDataSet parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.AccordingToSchedules.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AccordingToSchedules.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AccordingToSchedules.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IScheduleParameterInfo accordingToSchedulesCasted = item.As<IScheduleParameterInfo>();
                if ((accordingToSchedulesCasted != null))
                {
                    this._parent.AccordingToSchedules.Add(accordingToSchedulesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AccordingToSchedules.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.AccordingToSchedules.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> accordingToSchedulesEnumerator = this._parent.AccordingToSchedules.GetEnumerator();
                try
                {
                    for (
                    ; accordingToSchedulesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = accordingToSchedulesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    accordingToSchedulesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IScheduleParameterInfo scheduleParameterInfoItem = item.As<IScheduleParameterInfo>();
                if (((scheduleParameterInfoItem != null) 
                            && this._parent.AccordingToSchedules.Remove(scheduleParameterInfoItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AccordingToSchedules).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the locationCondition property
        /// </summary>
        private sealed class LocationConditionProxy : ModelPropertyChange<IInspectionDataSet, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocationConditionProxy(IInspectionDataSet modelElement) : 
                    base(modelElement, "locationCondition")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.LocationCondition;
                }
                set
                {
                    this.ModelElement.LocationCondition = value;
                }
            }
        }
    }
}

