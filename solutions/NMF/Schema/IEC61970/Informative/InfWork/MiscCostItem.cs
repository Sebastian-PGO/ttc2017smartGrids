//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The default implementation of the MiscCostItem class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfWork")]
    [XmlNamespacePrefixAttribute("cimInfWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/MiscCostI" +
        "tem")]
    [DebuggerDisplayAttribute("MiscCostItem {UUID}")]
    public partial class MiscCostItem : IdentifiedObject, IMiscCostItem, IModelElement
    {
        
        /// <summary>
        /// The backing field for the CostPerUnit property
        /// </summary>
        private float _costPerUnit;
        
        private static Lazy<ITypedElement> _costPerUnitAttribute = new Lazy<ITypedElement>(RetrieveCostPerUnitAttribute);
        
        /// <summary>
        /// The backing field for the Quantity property
        /// </summary>
        private object _quantity;
        
        private static Lazy<ITypedElement> _quantityAttribute = new Lazy<ITypedElement>(RetrieveQuantityAttribute);
        
        /// <summary>
        /// The backing field for the Account property
        /// </summary>
        private string _account;
        
        private static Lazy<ITypedElement> _accountAttribute = new Lazy<ITypedElement>(RetrieveAccountAttribute);
        
        /// <summary>
        /// The backing field for the ExternalRefID property
        /// </summary>
        private string _externalRefID;
        
        private static Lazy<ITypedElement> _externalRefIDAttribute = new Lazy<ITypedElement>(RetrieveExternalRefIDAttribute);
        
        /// <summary>
        /// The backing field for the CostType property
        /// </summary>
        private string _costType;
        
        private static Lazy<ITypedElement> _costTypeAttribute = new Lazy<ITypedElement>(RetrieveCostTypeAttribute);
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static Lazy<ITypedElement> _designLocationReference = new Lazy<ITypedElement>(RetrieveDesignLocationReference);
        
        /// <summary>
        /// The backing field for the DesignLocation property
        /// </summary>
        private IDesignLocation _designLocation;
        
        private static Lazy<ITypedElement> _workTaskReference = new Lazy<ITypedElement>(RetrieveWorkTaskReference);
        
        /// <summary>
        /// The backing field for the WorkTask property
        /// </summary>
        private IWorkTask _workTask;
        
        private static Lazy<ITypedElement> _workCostDetailReference = new Lazy<ITypedElement>(RetrieveWorkCostDetailReference);
        
        /// <summary>
        /// The backing field for the WorkCostDetail property
        /// </summary>
        private IWorkCostDetail _workCostDetail;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The costPerUnit property
        /// </summary>
        [XmlElementNameAttribute("costPerUnit")]
        [XmlAttributeAttribute(true)]
        public virtual float CostPerUnit
        {
            get
            {
                return this._costPerUnit;
            }
            set
            {
                if ((this._costPerUnit != value))
                {
                    float old = this._costPerUnit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCostPerUnitChanging(e);
                    this.OnPropertyChanging("CostPerUnit", e, _costPerUnitAttribute);
                    this._costPerUnit = value;
                    this.OnCostPerUnitChanged(e);
                    this.OnPropertyChanged("CostPerUnit", e, _costPerUnitAttribute);
                }
            }
        }
        
        /// <summary>
        /// The quantity property
        /// </summary>
        [XmlElementNameAttribute("quantity")]
        [XmlAttributeAttribute(true)]
        public virtual object Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    object old = this._quantity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQuantityChanging(e);
                    this.OnPropertyChanging("Quantity", e, _quantityAttribute);
                    this._quantity = value;
                    this.OnQuantityChanged(e);
                    this.OnPropertyChanged("Quantity", e, _quantityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The account property
        /// </summary>
        [XmlElementNameAttribute("account")]
        [XmlAttributeAttribute(true)]
        public virtual string Account
        {
            get
            {
                return this._account;
            }
            set
            {
                if ((this._account != value))
                {
                    string old = this._account;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAccountChanging(e);
                    this.OnPropertyChanging("Account", e, _accountAttribute);
                    this._account = value;
                    this.OnAccountChanged(e);
                    this.OnPropertyChanged("Account", e, _accountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The externalRefID property
        /// </summary>
        [XmlElementNameAttribute("externalRefID")]
        [XmlAttributeAttribute(true)]
        public virtual string ExternalRefID
        {
            get
            {
                return this._externalRefID;
            }
            set
            {
                if ((this._externalRefID != value))
                {
                    string old = this._externalRefID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnExternalRefIDChanging(e);
                    this.OnPropertyChanging("ExternalRefID", e, _externalRefIDAttribute);
                    this._externalRefID = value;
                    this.OnExternalRefIDChanged(e);
                    this.OnPropertyChanged("ExternalRefID", e, _externalRefIDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The costType property
        /// </summary>
        [XmlElementNameAttribute("costType")]
        [XmlAttributeAttribute(true)]
        public virtual string CostType
        {
            get
            {
                return this._costType;
            }
            set
            {
                if ((this._costType != value))
                {
                    string old = this._costType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCostTypeChanging(e);
                    this.OnPropertyChanging("CostType", e, _costTypeAttribute);
                    this._costType = value;
                    this.OnCostTypeChanged(e);
                    this.OnPropertyChanged("CostType", e, _costTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// The DesignLocation property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MiscCostItems")]
        public virtual IDesignLocation DesignLocation
        {
            get
            {
                return this._designLocation;
            }
            set
            {
                if ((this._designLocation != value))
                {
                    IDesignLocation old = this._designLocation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDesignLocationChanging(e);
                    this.OnPropertyChanging("DesignLocation", e, _designLocationReference);
                    this._designLocation = value;
                    if ((old != null))
                    {
                        old.MiscCostItems.Remove(this);
                        old.Deleted -= this.OnResetDesignLocation;
                    }
                    if ((value != null))
                    {
                        value.MiscCostItems.Add(this);
                        value.Deleted += this.OnResetDesignLocation;
                    }
                    this.OnDesignLocationChanged(e);
                    this.OnPropertyChanged("DesignLocation", e, _designLocationReference);
                }
            }
        }
        
        /// <summary>
        /// The WorkTask property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MiscCostItems")]
        public virtual IWorkTask WorkTask
        {
            get
            {
                return this._workTask;
            }
            set
            {
                if ((this._workTask != value))
                {
                    IWorkTask old = this._workTask;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWorkTaskChanging(e);
                    this.OnPropertyChanging("WorkTask", e, _workTaskReference);
                    this._workTask = value;
                    if ((old != null))
                    {
                        old.MiscCostItems.Remove(this);
                        old.Deleted -= this.OnResetWorkTask;
                    }
                    if ((value != null))
                    {
                        value.MiscCostItems.Add(this);
                        value.Deleted += this.OnResetWorkTask;
                    }
                    this.OnWorkTaskChanged(e);
                    this.OnPropertyChanged("WorkTask", e, _workTaskReference);
                }
            }
        }
        
        /// <summary>
        /// The WorkCostDetail property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MiscCostItems")]
        public virtual IWorkCostDetail WorkCostDetail
        {
            get
            {
                return this._workCostDetail;
            }
            set
            {
                if ((this._workCostDetail != value))
                {
                    IWorkCostDetail old = this._workCostDetail;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWorkCostDetailChanging(e);
                    this.OnPropertyChanging("WorkCostDetail", e, _workCostDetailReference);
                    this._workCostDetail = value;
                    if ((old != null))
                    {
                        old.MiscCostItems.Remove(this);
                        old.Deleted -= this.OnResetWorkCostDetail;
                    }
                    if ((value != null))
                    {
                        value.MiscCostItems.Add(this);
                        value.Deleted += this.OnResetWorkCostDetail;
                    }
                    this.OnWorkCostDetailChanged(e);
                    this.OnPropertyChanged("WorkCostDetail", e, _workCostDetailReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MiscCostItemReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/MiscCostI" +
                            "tem")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the CostPerUnit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostPerUnitChanging;
        
        /// <summary>
        /// Gets fired when the CostPerUnit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostPerUnitChanged;
        
        /// <summary>
        /// Gets fired before the Quantity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuantityChanging;
        
        /// <summary>
        /// Gets fired when the Quantity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuantityChanged;
        
        /// <summary>
        /// Gets fired before the Account property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccountChanging;
        
        /// <summary>
        /// Gets fired when the Account property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccountChanged;
        
        /// <summary>
        /// Gets fired before the ExternalRefID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExternalRefIDChanging;
        
        /// <summary>
        /// Gets fired when the ExternalRefID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExternalRefIDChanged;
        
        /// <summary>
        /// Gets fired before the CostType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostTypeChanging;
        
        /// <summary>
        /// Gets fired when the CostType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostTypeChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the DesignLocation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DesignLocationChanging;
        
        /// <summary>
        /// Gets fired when the DesignLocation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DesignLocationChanged;
        
        /// <summary>
        /// Gets fired before the WorkTask property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkTaskChanging;
        
        /// <summary>
        /// Gets fired when the WorkTask property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkTaskChanged;
        
        /// <summary>
        /// Gets fired before the WorkCostDetail property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkCostDetailChanging;
        
        /// <summary>
        /// Gets fired when the WorkCostDetail property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkCostDetailChanged;
        
        private static ITypedElement RetrieveCostPerUnitAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MiscCostItem.ClassInstance)).Resolve("costPerUnit")));
        }
        
        /// <summary>
        /// Raises the CostPerUnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostPerUnitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostPerUnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CostPerUnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostPerUnitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostPerUnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveQuantityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MiscCostItem.ClassInstance)).Resolve("quantity")));
        }
        
        /// <summary>
        /// Raises the QuantityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuantityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuantityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QuantityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuantityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuantityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAccountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MiscCostItem.ClassInstance)).Resolve("account")));
        }
        
        /// <summary>
        /// Raises the AccountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AccountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveExternalRefIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MiscCostItem.ClassInstance)).Resolve("externalRefID")));
        }
        
        /// <summary>
        /// Raises the ExternalRefIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExternalRefIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExternalRefIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ExternalRefIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExternalRefIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExternalRefIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCostTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MiscCostItem.ClassInstance)).Resolve("costType")));
        }
        
        /// <summary>
        /// Raises the CostTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CostTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(MiscCostItem.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        private static ITypedElement RetrieveDesignLocationReference()
        {
            return ((ITypedElement)(((ModelElement)(MiscCostItem.ClassInstance)).Resolve("DesignLocation")));
        }
        
        /// <summary>
        /// Raises the DesignLocationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDesignLocationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DesignLocationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DesignLocationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDesignLocationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DesignLocationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DesignLocation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDesignLocation(object sender, System.EventArgs eventArgs)
        {
            this.DesignLocation = null;
        }
        
        private static ITypedElement RetrieveWorkTaskReference()
        {
            return ((ITypedElement)(((ModelElement)(MiscCostItem.ClassInstance)).Resolve("WorkTask")));
        }
        
        /// <summary>
        /// Raises the WorkTaskChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkTaskChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkTaskChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WorkTaskChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkTaskChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkTaskChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the WorkTask property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWorkTask(object sender, System.EventArgs eventArgs)
        {
            this.WorkTask = null;
        }
        
        private static ITypedElement RetrieveWorkCostDetailReference()
        {
            return ((ITypedElement)(((ModelElement)(MiscCostItem.ClassInstance)).Resolve("WorkCostDetail")));
        }
        
        /// <summary>
        /// Raises the WorkCostDetailChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkCostDetailChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkCostDetailChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WorkCostDetailChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkCostDetailChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkCostDetailChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the WorkCostDetail property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWorkCostDetail(object sender, System.EventArgs eventArgs)
        {
            this.WorkCostDetail = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "COSTPERUNIT"))
            {
                return this.CostPerUnit;
            }
            if ((attribute == "QUANTITY"))
            {
                return this.Quantity;
            }
            if ((attribute == "ACCOUNT"))
            {
                return this.Account;
            }
            if ((attribute == "EXTERNALREFID"))
            {
                return this.ExternalRefID;
            }
            if ((attribute == "COSTTYPE"))
            {
                return this.CostType;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "DESIGNLOCATION"))
            {
                this.DesignLocation = ((IDesignLocation)(value));
                return;
            }
            if ((feature == "WORKTASK"))
            {
                this.WorkTask = ((IWorkTask)(value));
                return;
            }
            if ((feature == "WORKCOSTDETAIL"))
            {
                this.WorkCostDetail = ((IWorkCostDetail)(value));
                return;
            }
            if ((feature == "COSTPERUNIT"))
            {
                this.CostPerUnit = ((float)(value));
                return;
            }
            if ((feature == "QUANTITY"))
            {
                this.Quantity = ((object)(value));
                return;
            }
            if ((feature == "ACCOUNT"))
            {
                this.Account = ((string)(value));
                return;
            }
            if ((feature == "EXTERNALREFID"))
            {
                this.ExternalRefID = ((string)(value));
                return;
            }
            if ((feature == "COSTTYPE"))
            {
                this.CostType = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((attribute == "DesignLocation"))
            {
                return new DesignLocationProxy(this);
            }
            if ((attribute == "WorkTask"))
            {
                return new WorkTaskProxy(this);
            }
            if ((attribute == "WorkCostDetail"))
            {
                return new WorkCostDetailProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((reference == "DesignLocation"))
            {
                return new DesignLocationProxy(this);
            }
            if ((reference == "WorkTask"))
            {
                return new WorkTaskProxy(this);
            }
            if ((reference == "WorkCostDetail"))
            {
                return new WorkCostDetailProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfWork/MiscCostI" +
                        "tem")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MiscCostItem class
        /// </summary>
        public class MiscCostItemReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private MiscCostItem _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MiscCostItemReferencedElementsCollection(MiscCostItem parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.DesignLocation != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.WorkTask != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.WorkCostDetail != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.DesignLocationChanged += this.PropagateValueChanges;
                this._parent.WorkTaskChanged += this.PropagateValueChanges;
                this._parent.WorkCostDetailChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.DesignLocationChanged -= this.PropagateValueChanges;
                this._parent.WorkTaskChanged -= this.PropagateValueChanges;
                this._parent.WorkCostDetailChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                if ((this._parent.DesignLocation == null))
                {
                    IDesignLocation designLocationCasted = item.As<IDesignLocation>();
                    if ((designLocationCasted != null))
                    {
                        this._parent.DesignLocation = designLocationCasted;
                        return;
                    }
                }
                if ((this._parent.WorkTask == null))
                {
                    IWorkTask workTaskCasted = item.As<IWorkTask>();
                    if ((workTaskCasted != null))
                    {
                        this._parent.WorkTask = workTaskCasted;
                        return;
                    }
                }
                if ((this._parent.WorkCostDetail == null))
                {
                    IWorkCostDetail workCostDetailCasted = item.As<IWorkCostDetail>();
                    if ((workCostDetailCasted != null))
                    {
                        this._parent.WorkCostDetail = workCostDetailCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Status = null;
                this._parent.DesignLocation = null;
                this._parent.WorkTask = null;
                this._parent.WorkCostDetail = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if ((item == this._parent.DesignLocation))
                {
                    return true;
                }
                if ((item == this._parent.WorkTask))
                {
                    return true;
                }
                if ((item == this._parent.WorkCostDetail))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.DesignLocation != null))
                {
                    array[arrayIndex] = this._parent.DesignLocation;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.WorkTask != null))
                {
                    array[arrayIndex] = this._parent.WorkTask;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.WorkCostDetail != null))
                {
                    array[arrayIndex] = this._parent.WorkCostDetail;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                if ((this._parent.DesignLocation == item))
                {
                    this._parent.DesignLocation = null;
                    return true;
                }
                if ((this._parent.WorkTask == item))
                {
                    this._parent.WorkTask = null;
                    return true;
                }
                if ((this._parent.WorkCostDetail == item))
                {
                    this._parent.WorkCostDetail = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Status).Concat(this._parent.DesignLocation).Concat(this._parent.WorkTask).Concat(this._parent.WorkCostDetail).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the costPerUnit property
        /// </summary>
        private sealed class CostPerUnitProxy : ModelPropertyChange<IMiscCostItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CostPerUnitProxy(IMiscCostItem modelElement) : 
                    base(modelElement, "costPerUnit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CostPerUnit;
                }
                set
                {
                    this.ModelElement.CostPerUnit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the quantity property
        /// </summary>
        private sealed class QuantityProxy : ModelPropertyChange<IMiscCostItem, object>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QuantityProxy(IMiscCostItem modelElement) : 
                    base(modelElement, "quantity")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override object Value
            {
                get
                {
                    return this.ModelElement.Quantity;
                }
                set
                {
                    this.ModelElement.Quantity = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the account property
        /// </summary>
        private sealed class AccountProxy : ModelPropertyChange<IMiscCostItem, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AccountProxy(IMiscCostItem modelElement) : 
                    base(modelElement, "account")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Account;
                }
                set
                {
                    this.ModelElement.Account = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the externalRefID property
        /// </summary>
        private sealed class ExternalRefIDProxy : ModelPropertyChange<IMiscCostItem, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ExternalRefIDProxy(IMiscCostItem modelElement) : 
                    base(modelElement, "externalRefID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ExternalRefID;
                }
                set
                {
                    this.ModelElement.ExternalRefID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the costType property
        /// </summary>
        private sealed class CostTypeProxy : ModelPropertyChange<IMiscCostItem, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CostTypeProxy(IMiscCostItem modelElement) : 
                    base(modelElement, "costType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.CostType;
                }
                set
                {
                    this.ModelElement.CostType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IMiscCostItem, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IMiscCostItem modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DesignLocation property
        /// </summary>
        private sealed class DesignLocationProxy : ModelPropertyChange<IMiscCostItem, IDesignLocation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DesignLocationProxy(IMiscCostItem modelElement) : 
                    base(modelElement, "DesignLocation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDesignLocation Value
            {
                get
                {
                    return this.ModelElement.DesignLocation;
                }
                set
                {
                    this.ModelElement.DesignLocation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the WorkTask property
        /// </summary>
        private sealed class WorkTaskProxy : ModelPropertyChange<IMiscCostItem, IWorkTask>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WorkTaskProxy(IMiscCostItem modelElement) : 
                    base(modelElement, "WorkTask")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWorkTask Value
            {
                get
                {
                    return this.ModelElement.WorkTask;
                }
                set
                {
                    this.ModelElement.WorkTask = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the WorkCostDetail property
        /// </summary>
        private sealed class WorkCostDetailProxy : ModelPropertyChange<IMiscCostItem, IWorkCostDetail>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WorkCostDetailProxy(IMiscCostItem modelElement) : 
                    base(modelElement, "WorkCostDetail")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWorkCostDetail Value
            {
                get
                {
                    return this.ModelElement.WorkCostDetail;
                }
                set
                {
                    this.ModelElement.WorkCostDetail = value;
                }
            }
        }
    }
}

