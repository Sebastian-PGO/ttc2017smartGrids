using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The public interface for WorkCostDetail
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(WorkCostDetail))]
    [XmlDefaultImplementationTypeAttribute(typeof(WorkCostDetail))]
    public interface IWorkCostDetail : IModelElement, IDocument
    {
        
        /// <summary>
        /// The transactionDateTime property
        /// </summary>
        DateTime TransactionDateTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The amount property
        /// </summary>
        float Amount
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isDebit property
        /// </summary>
        bool IsDebit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The type property
        /// </summary>
        string Type
        {
            get;
            set;
        }
        
        /// <summary>
        /// The CostType property
        /// </summary>
        ICostType CostType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ContractorItems property
        /// </summary>
        IOrderedSetExpression<IContractorItem> ContractorItems
        {
            get;
        }
        
        /// <summary>
        /// The MaterialItems property
        /// </summary>
        IOrderedSetExpression<IMaterialItem> MaterialItems
        {
            get;
        }
        
        /// <summary>
        /// The EquipmentItems property
        /// </summary>
        IOrderedSetExpression<IEquipmentItem> EquipmentItems
        {
            get;
        }
        
        /// <summary>
        /// The PropertyUnits property
        /// </summary>
        IOrderedSetExpression<IPropertyUnit> PropertyUnits
        {
            get;
        }
        
        /// <summary>
        /// The Design property
        /// </summary>
        IDesign Design
        {
            get;
            set;
        }
        
        /// <summary>
        /// The MiscCostItems property
        /// </summary>
        IOrderedSetExpression<IMiscCostItem> MiscCostItems
        {
            get;
        }
        
        /// <summary>
        /// The WorkCostSummary property
        /// </summary>
        IWorkCostSummary WorkCostSummary
        {
            get;
            set;
        }
        
        /// <summary>
        /// The WorkTask property
        /// </summary>
        IWorkTask WorkTask
        {
            get;
            set;
        }
        
        /// <summary>
        /// The OverheadCost property
        /// </summary>
        IOverheadCost OverheadCost
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Works property
        /// </summary>
        IOrderedSetExpression<IWork> Works
        {
            get;
        }
        
        /// <summary>
        /// The LaborItems property
        /// </summary>
        IOrderedSetExpression<ILaborItem> LaborItems
        {
            get;
        }
        
        /// <summary>
        /// The ErpProjectAccounting property
        /// </summary>
        IErpProjectAccounting ErpProjectAccounting
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the TransactionDateTime property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TransactionDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the TransactionDateTime property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TransactionDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the Amount property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AmountChanging;
        
        /// <summary>
        /// Gets fired when the Amount property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AmountChanged;
        
        /// <summary>
        /// Gets fired before the IsDebit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsDebitChanging;
        
        /// <summary>
        /// Gets fired when the IsDebit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsDebitChanged;
        
        /// <summary>
        /// Gets fired before the Type property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TypeChanging;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TypeChanged;
        
        /// <summary>
        /// Gets fired before the CostType property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CostTypeChanging;
        
        /// <summary>
        /// Gets fired when the CostType property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CostTypeChanged;
        
        /// <summary>
        /// Gets fired before the Design property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DesignChanging;
        
        /// <summary>
        /// Gets fired when the Design property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DesignChanged;
        
        /// <summary>
        /// Gets fired before the WorkCostSummary property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WorkCostSummaryChanging;
        
        /// <summary>
        /// Gets fired when the WorkCostSummary property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WorkCostSummaryChanged;
        
        /// <summary>
        /// Gets fired before the WorkTask property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WorkTaskChanging;
        
        /// <summary>
        /// Gets fired when the WorkTask property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WorkTaskChanged;
        
        /// <summary>
        /// Gets fired before the OverheadCost property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OverheadCostChanging;
        
        /// <summary>
        /// Gets fired when the OverheadCost property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OverheadCostChanged;
        
        /// <summary>
        /// Gets fired before the ErpProjectAccounting property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ErpProjectAccountingChanging;
        
        /// <summary>
        /// Gets fired when the ErpProjectAccounting property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ErpProjectAccountingChanged;
    }
}

