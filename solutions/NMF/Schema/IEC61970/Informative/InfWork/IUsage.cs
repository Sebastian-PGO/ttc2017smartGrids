//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork
{
    
    
    /// <summary>
    /// The public interface for Usage
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Usage))]
    [XmlDefaultImplementationTypeAttribute(typeof(Usage))]
    public interface IUsage : IModelElement, IIdentifiedObject
    {
        
        /// <summary>
        /// The WorkEquipmentAsset property
        /// </summary>
        IWorkEquipmentInfo WorkEquipmentAsset
        {
            get;
            set;
        }
        
        /// <summary>
        /// The WorkTask property
        /// </summary>
        IWorkTask WorkTask
        {
            get;
            set;
        }
        
        /// <summary>
        /// The MaterialItem property
        /// </summary>
        IMaterialItem MaterialItem
        {
            get;
            set;
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        IStatus Status
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the WorkEquipmentAsset property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WorkEquipmentAssetChanging;
        
        /// <summary>
        /// Gets fired when the WorkEquipmentAsset property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WorkEquipmentAssetChanged;
        
        /// <summary>
        /// Gets fired before the WorkTask property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WorkTaskChanging;
        
        /// <summary>
        /// Gets fired when the WorkTask property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WorkTaskChanged;
        
        /// <summary>
        /// Gets fired before the MaterialItem property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaterialItemChanging;
        
        /// <summary>
        /// Gets fired when the MaterialItem property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaterialItemChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StatusChanged;
    }
}

