//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering
{
    
    
    /// <summary>
    /// The default implementation of the SDPAccountingFunction class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfPaymentMetering")]
    [XmlNamespacePrefixAttribute("cimInfPaymentMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfPaymentMeterin" +
        "g/SDPAccountingFunction")]
    [DebuggerDisplayAttribute("SDPAccountingFunction {UUID}")]
    public partial class SDPAccountingFunction : DeviceFunction, ISDPAccountingFunction, IModelElement
    {
        
        private static Lazy<ITypedElement> _availableCreditReference = new Lazy<ITypedElement>(RetrieveAvailableCreditReference);
        
        /// <summary>
        /// The backing field for the AvailableCredit property
        /// </summary>
        private IAccountingUnit _availableCredit;
        
        private static Lazy<ITypedElement> _creditRegistersReference = new Lazy<ITypedElement>(RetrieveCreditRegistersReference);
        
        /// <summary>
        /// The backing field for the CreditRegisters property
        /// </summary>
        private SDPAccountingFunctionCreditRegistersCollection _creditRegisters;
        
        private static Lazy<ITypedElement> _chargeRegistersReference = new Lazy<ITypedElement>(RetrieveChargeRegistersReference);
        
        /// <summary>
        /// The backing field for the ChargeRegisters property
        /// </summary>
        private SDPAccountingFunctionChargeRegistersCollection _chargeRegisters;
        
        private static Lazy<ITypedElement> _lowCreditWarningLevelReference = new Lazy<ITypedElement>(RetrieveLowCreditWarningLevelReference);
        
        /// <summary>
        /// The backing field for the LowCreditWarningLevel property
        /// </summary>
        private IAccountingUnit _lowCreditWarningLevel;
        
        private static Lazy<ITypedElement> _creditExpiryLevelReference = new Lazy<ITypedElement>(RetrieveCreditExpiryLevelReference);
        
        /// <summary>
        /// The backing field for the CreditExpiryLevel property
        /// </summary>
        private IAccountingUnit _creditExpiryLevel;
        
        private static Lazy<ITypedElement> _serviceKindReference = new Lazy<ITypedElement>(RetrieveServiceKindReference);
        
        /// <summary>
        /// The backing field for the ServiceKind property
        /// </summary>
        private IServiceCategory _serviceKind;
        
        private static IClass _classInstance;
        
        public SDPAccountingFunction()
        {
            this._creditRegisters = new SDPAccountingFunctionCreditRegistersCollection(this);
            this._creditRegisters.CollectionChanging += this.CreditRegistersCollectionChanging;
            this._creditRegisters.CollectionChanged += this.CreditRegistersCollectionChanged;
            this._chargeRegisters = new SDPAccountingFunctionChargeRegistersCollection(this);
            this._chargeRegisters.CollectionChanging += this.ChargeRegistersCollectionChanging;
            this._chargeRegisters.CollectionChanged += this.ChargeRegistersCollectionChanged;
        }
        
        /// <summary>
        /// The availableCredit property
        /// </summary>
        [XmlElementNameAttribute("availableCredit")]
        [XmlAttributeAttribute(true)]
        public virtual IAccountingUnit AvailableCredit
        {
            get
            {
                return this._availableCredit;
            }
            set
            {
                if ((this._availableCredit != value))
                {
                    IAccountingUnit old = this._availableCredit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAvailableCreditChanging(e);
                    this.OnPropertyChanging("AvailableCredit", e, _availableCreditReference);
                    this._availableCredit = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAvailableCredit;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAvailableCredit;
                    }
                    this.OnAvailableCreditChanged(e);
                    this.OnPropertyChanged("AvailableCredit", e, _availableCreditReference);
                }
            }
        }
        
        /// <summary>
        /// The CreditRegisters property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SDPAccountingFunction")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICreditRegister> CreditRegisters
        {
            get
            {
                return this._creditRegisters;
            }
        }
        
        /// <summary>
        /// The ChargeRegisters property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SPAccountingFunction")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IChargeRegister> ChargeRegisters
        {
            get
            {
                return this._chargeRegisters;
            }
        }
        
        /// <summary>
        /// The lowCreditWarningLevel property
        /// </summary>
        [XmlElementNameAttribute("lowCreditWarningLevel")]
        [XmlAttributeAttribute(true)]
        public virtual IAccountingUnit LowCreditWarningLevel
        {
            get
            {
                return this._lowCreditWarningLevel;
            }
            set
            {
                if ((this._lowCreditWarningLevel != value))
                {
                    IAccountingUnit old = this._lowCreditWarningLevel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLowCreditWarningLevelChanging(e);
                    this.OnPropertyChanging("LowCreditWarningLevel", e, _lowCreditWarningLevelReference);
                    this._lowCreditWarningLevel = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLowCreditWarningLevel;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLowCreditWarningLevel;
                    }
                    this.OnLowCreditWarningLevelChanged(e);
                    this.OnPropertyChanged("LowCreditWarningLevel", e, _lowCreditWarningLevelReference);
                }
            }
        }
        
        /// <summary>
        /// The creditExpiryLevel property
        /// </summary>
        [XmlElementNameAttribute("creditExpiryLevel")]
        [XmlAttributeAttribute(true)]
        public virtual IAccountingUnit CreditExpiryLevel
        {
            get
            {
                return this._creditExpiryLevel;
            }
            set
            {
                if ((this._creditExpiryLevel != value))
                {
                    IAccountingUnit old = this._creditExpiryLevel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCreditExpiryLevelChanging(e);
                    this.OnPropertyChanging("CreditExpiryLevel", e, _creditExpiryLevelReference);
                    this._creditExpiryLevel = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetCreditExpiryLevel;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetCreditExpiryLevel;
                    }
                    this.OnCreditExpiryLevelChanged(e);
                    this.OnPropertyChanged("CreditExpiryLevel", e, _creditExpiryLevelReference);
                }
            }
        }
        
        /// <summary>
        /// The ServiceKind property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SPAccountingFunctions")]
        public virtual IServiceCategory ServiceKind
        {
            get
            {
                return this._serviceKind;
            }
            set
            {
                if ((this._serviceKind != value))
                {
                    IServiceCategory old = this._serviceKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnServiceKindChanging(e);
                    this.OnPropertyChanging("ServiceKind", e, _serviceKindReference);
                    this._serviceKind = value;
                    if ((old != null))
                    {
                        old.SPAccountingFunctions.Remove(this);
                        old.Deleted -= this.OnResetServiceKind;
                    }
                    if ((value != null))
                    {
                        value.SPAccountingFunctions.Add(this);
                        value.Deleted += this.OnResetServiceKind;
                    }
                    this.OnServiceKindChanged(e);
                    this.OnPropertyChanged("ServiceKind", e, _serviceKindReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SDPAccountingFunctionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfPaymentMeterin" +
                            "g/SDPAccountingFunction")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the AvailableCredit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AvailableCreditChanging;
        
        /// <summary>
        /// Gets fired when the AvailableCredit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AvailableCreditChanged;
        
        /// <summary>
        /// Gets fired before the LowCreditWarningLevel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowCreditWarningLevelChanging;
        
        /// <summary>
        /// Gets fired when the LowCreditWarningLevel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowCreditWarningLevelChanged;
        
        /// <summary>
        /// Gets fired before the CreditExpiryLevel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CreditExpiryLevelChanging;
        
        /// <summary>
        /// Gets fired when the CreditExpiryLevel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CreditExpiryLevelChanged;
        
        /// <summary>
        /// Gets fired before the ServiceKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceKindChanging;
        
        /// <summary>
        /// Gets fired when the ServiceKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceKindChanged;
        
        private static ITypedElement RetrieveAvailableCreditReference()
        {
            return ((ITypedElement)(((ModelElement)(SDPAccountingFunction.ClassInstance)).Resolve("availableCredit")));
        }
        
        /// <summary>
        /// Raises the AvailableCreditChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAvailableCreditChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AvailableCreditChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AvailableCreditChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAvailableCreditChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AvailableCreditChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AvailableCredit property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAvailableCredit(object sender, System.EventArgs eventArgs)
        {
            this.AvailableCredit = null;
        }
        
        private static ITypedElement RetrieveCreditRegistersReference()
        {
            return ((ITypedElement)(((ModelElement)(SDPAccountingFunction.ClassInstance)).Resolve("CreditRegisters")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CreditRegisters property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CreditRegistersCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("CreditRegisters", e, _creditRegistersReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CreditRegisters property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CreditRegistersCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CreditRegisters", e, _creditRegistersReference);
        }
        
        private static ITypedElement RetrieveChargeRegistersReference()
        {
            return ((ITypedElement)(((ModelElement)(SDPAccountingFunction.ClassInstance)).Resolve("ChargeRegisters")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ChargeRegisters property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChargeRegistersCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ChargeRegisters", e, _chargeRegistersReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ChargeRegisters property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChargeRegistersCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ChargeRegisters", e, _chargeRegistersReference);
        }
        
        private static ITypedElement RetrieveLowCreditWarningLevelReference()
        {
            return ((ITypedElement)(((ModelElement)(SDPAccountingFunction.ClassInstance)).Resolve("lowCreditWarningLevel")));
        }
        
        /// <summary>
        /// Raises the LowCreditWarningLevelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowCreditWarningLevelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowCreditWarningLevelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowCreditWarningLevelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowCreditWarningLevelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowCreditWarningLevelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LowCreditWarningLevel property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLowCreditWarningLevel(object sender, System.EventArgs eventArgs)
        {
            this.LowCreditWarningLevel = null;
        }
        
        private static ITypedElement RetrieveCreditExpiryLevelReference()
        {
            return ((ITypedElement)(((ModelElement)(SDPAccountingFunction.ClassInstance)).Resolve("creditExpiryLevel")));
        }
        
        /// <summary>
        /// Raises the CreditExpiryLevelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCreditExpiryLevelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CreditExpiryLevelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CreditExpiryLevelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCreditExpiryLevelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CreditExpiryLevelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CreditExpiryLevel property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCreditExpiryLevel(object sender, System.EventArgs eventArgs)
        {
            this.CreditExpiryLevel = null;
        }
        
        private static ITypedElement RetrieveServiceKindReference()
        {
            return ((ITypedElement)(((ModelElement)(SDPAccountingFunction.ClassInstance)).Resolve("ServiceKind")));
        }
        
        /// <summary>
        /// Raises the ServiceKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServiceKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ServiceKind property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetServiceKind(object sender, System.EventArgs eventArgs)
        {
            this.ServiceKind = null;
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CREDITREGISTERS"))
            {
                return this._creditRegisters;
            }
            if ((feature == "CHARGEREGISTERS"))
            {
                return this._chargeRegisters;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "AVAILABLECREDIT"))
            {
                this.AvailableCredit = ((IAccountingUnit)(value));
                return;
            }
            if ((feature == "LOWCREDITWARNINGLEVEL"))
            {
                this.LowCreditWarningLevel = ((IAccountingUnit)(value));
                return;
            }
            if ((feature == "CREDITEXPIRYLEVEL"))
            {
                this.CreditExpiryLevel = ((IAccountingUnit)(value));
                return;
            }
            if ((feature == "SERVICEKIND"))
            {
                this.ServiceKind = ((IServiceCategory)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "AvailableCredit"))
            {
                return new AvailableCreditProxy(this);
            }
            if ((attribute == "LowCreditWarningLevel"))
            {
                return new LowCreditWarningLevelProxy(this);
            }
            if ((attribute == "CreditExpiryLevel"))
            {
                return new CreditExpiryLevelProxy(this);
            }
            if ((attribute == "ServiceKind"))
            {
                return new ServiceKindProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "AvailableCredit"))
            {
                return new AvailableCreditProxy(this);
            }
            if ((reference == "LowCreditWarningLevel"))
            {
                return new LowCreditWarningLevelProxy(this);
            }
            if ((reference == "CreditExpiryLevel"))
            {
                return new CreditExpiryLevelProxy(this);
            }
            if ((reference == "ServiceKind"))
            {
                return new ServiceKindProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfPaymentMeterin" +
                        "g/SDPAccountingFunction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SDPAccountingFunction class
        /// </summary>
        public class SDPAccountingFunctionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SDPAccountingFunction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SDPAccountingFunctionReferencedElementsCollection(SDPAccountingFunction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.AvailableCredit != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.CreditRegisters.Count);
                    count = (count + this._parent.ChargeRegisters.Count);
                    if ((this._parent.LowCreditWarningLevel != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CreditExpiryLevel != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ServiceKind != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AvailableCreditChanged += this.PropagateValueChanges;
                this._parent.CreditRegisters.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ChargeRegisters.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.LowCreditWarningLevelChanged += this.PropagateValueChanges;
                this._parent.CreditExpiryLevelChanged += this.PropagateValueChanges;
                this._parent.ServiceKindChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AvailableCreditChanged -= this.PropagateValueChanges;
                this._parent.CreditRegisters.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ChargeRegisters.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.LowCreditWarningLevelChanged -= this.PropagateValueChanges;
                this._parent.CreditExpiryLevelChanged -= this.PropagateValueChanges;
                this._parent.ServiceKindChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.AvailableCredit == null))
                {
                    IAccountingUnit availableCreditCasted = item.As<IAccountingUnit>();
                    if ((availableCreditCasted != null))
                    {
                        this._parent.AvailableCredit = availableCreditCasted;
                        return;
                    }
                }
                ICreditRegister creditRegistersCasted = item.As<ICreditRegister>();
                if ((creditRegistersCasted != null))
                {
                    this._parent.CreditRegisters.Add(creditRegistersCasted);
                }
                IChargeRegister chargeRegistersCasted = item.As<IChargeRegister>();
                if ((chargeRegistersCasted != null))
                {
                    this._parent.ChargeRegisters.Add(chargeRegistersCasted);
                }
                if ((this._parent.LowCreditWarningLevel == null))
                {
                    IAccountingUnit lowCreditWarningLevelCasted = item.As<IAccountingUnit>();
                    if ((lowCreditWarningLevelCasted != null))
                    {
                        this._parent.LowCreditWarningLevel = lowCreditWarningLevelCasted;
                        return;
                    }
                }
                if ((this._parent.CreditExpiryLevel == null))
                {
                    IAccountingUnit creditExpiryLevelCasted = item.As<IAccountingUnit>();
                    if ((creditExpiryLevelCasted != null))
                    {
                        this._parent.CreditExpiryLevel = creditExpiryLevelCasted;
                        return;
                    }
                }
                if ((this._parent.ServiceKind == null))
                {
                    IServiceCategory serviceKindCasted = item.As<IServiceCategory>();
                    if ((serviceKindCasted != null))
                    {
                        this._parent.ServiceKind = serviceKindCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AvailableCredit = null;
                this._parent.CreditRegisters.Clear();
                this._parent.ChargeRegisters.Clear();
                this._parent.LowCreditWarningLevel = null;
                this._parent.CreditExpiryLevel = null;
                this._parent.ServiceKind = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.AvailableCredit))
                {
                    return true;
                }
                if (this._parent.CreditRegisters.Contains(item))
                {
                    return true;
                }
                if (this._parent.ChargeRegisters.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.LowCreditWarningLevel))
                {
                    return true;
                }
                if ((item == this._parent.CreditExpiryLevel))
                {
                    return true;
                }
                if ((item == this._parent.ServiceKind))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.AvailableCredit != null))
                {
                    array[arrayIndex] = this._parent.AvailableCredit;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> creditRegistersEnumerator = this._parent.CreditRegisters.GetEnumerator();
                try
                {
                    for (
                    ; creditRegistersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = creditRegistersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    creditRegistersEnumerator.Dispose();
                }
                IEnumerator<IModelElement> chargeRegistersEnumerator = this._parent.ChargeRegisters.GetEnumerator();
                try
                {
                    for (
                    ; chargeRegistersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = chargeRegistersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    chargeRegistersEnumerator.Dispose();
                }
                if ((this._parent.LowCreditWarningLevel != null))
                {
                    array[arrayIndex] = this._parent.LowCreditWarningLevel;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CreditExpiryLevel != null))
                {
                    array[arrayIndex] = this._parent.CreditExpiryLevel;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ServiceKind != null))
                {
                    array[arrayIndex] = this._parent.ServiceKind;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.AvailableCredit == item))
                {
                    this._parent.AvailableCredit = null;
                    return true;
                }
                ICreditRegister creditRegisterItem = item.As<ICreditRegister>();
                if (((creditRegisterItem != null) 
                            && this._parent.CreditRegisters.Remove(creditRegisterItem)))
                {
                    return true;
                }
                IChargeRegister chargeRegisterItem = item.As<IChargeRegister>();
                if (((chargeRegisterItem != null) 
                            && this._parent.ChargeRegisters.Remove(chargeRegisterItem)))
                {
                    return true;
                }
                if ((this._parent.LowCreditWarningLevel == item))
                {
                    this._parent.LowCreditWarningLevel = null;
                    return true;
                }
                if ((this._parent.CreditExpiryLevel == item))
                {
                    this._parent.CreditExpiryLevel = null;
                    return true;
                }
                if ((this._parent.ServiceKind == item))
                {
                    this._parent.ServiceKind = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AvailableCredit).Concat(this._parent.CreditRegisters).Concat(this._parent.ChargeRegisters).Concat(this._parent.LowCreditWarningLevel).Concat(this._parent.CreditExpiryLevel).Concat(this._parent.ServiceKind).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the availableCredit property
        /// </summary>
        private sealed class AvailableCreditProxy : ModelPropertyChange<ISDPAccountingFunction, IAccountingUnit>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AvailableCreditProxy(ISDPAccountingFunction modelElement) : 
                    base(modelElement, "availableCredit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAccountingUnit Value
            {
                get
                {
                    return this.ModelElement.AvailableCredit;
                }
                set
                {
                    this.ModelElement.AvailableCredit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lowCreditWarningLevel property
        /// </summary>
        private sealed class LowCreditWarningLevelProxy : ModelPropertyChange<ISDPAccountingFunction, IAccountingUnit>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowCreditWarningLevelProxy(ISDPAccountingFunction modelElement) : 
                    base(modelElement, "lowCreditWarningLevel")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAccountingUnit Value
            {
                get
                {
                    return this.ModelElement.LowCreditWarningLevel;
                }
                set
                {
                    this.ModelElement.LowCreditWarningLevel = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the creditExpiryLevel property
        /// </summary>
        private sealed class CreditExpiryLevelProxy : ModelPropertyChange<ISDPAccountingFunction, IAccountingUnit>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CreditExpiryLevelProxy(ISDPAccountingFunction modelElement) : 
                    base(modelElement, "creditExpiryLevel")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAccountingUnit Value
            {
                get
                {
                    return this.ModelElement.CreditExpiryLevel;
                }
                set
                {
                    this.ModelElement.CreditExpiryLevel = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ServiceKind property
        /// </summary>
        private sealed class ServiceKindProxy : ModelPropertyChange<ISDPAccountingFunction, IServiceCategory>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ServiceKindProxy(ISDPAccountingFunction modelElement) : 
                    base(modelElement, "ServiceKind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IServiceCategory Value
            {
                get
                {
                    return this.ModelElement.ServiceKind;
                }
                set
                {
                    this.ModelElement.ServiceKind = value;
                }
            }
        }
    }
}

