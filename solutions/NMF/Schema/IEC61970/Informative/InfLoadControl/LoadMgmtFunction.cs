using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl
{
    
    
    /// <summary>
    /// The default implementation of the LoadMgmtFunction class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfLoadControl")]
    [XmlNamespacePrefixAttribute("cimInfLoadControl")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfLoadControl/Lo" +
        "adMgmtFunction")]
    [DebuggerDisplayAttribute("LoadMgmtFunction {UUID}")]
    public partial class LoadMgmtFunction : DeviceFunction, ILoadMgmtFunction, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ManualOverRide property
        /// </summary>
        private bool _manualOverRide;
        
        private static Lazy<ITypedElement> _manualOverRideAttribute = new Lazy<ITypedElement>(RetrieveManualOverRideAttribute);
        
        /// <summary>
        /// The backing field for the IsAutoOp property
        /// </summary>
        private bool _isAutoOp;
        
        private static Lazy<ITypedElement> _isAutoOpAttribute = new Lazy<ITypedElement>(RetrieveIsAutoOpAttribute);
        
        /// <summary>
        /// The backing field for the SchedulingBasis property
        /// </summary>
        private Nullable<LoadMgmtKind> _schedulingBasis;
        
        private static Lazy<ITypedElement> _schedulingBasisAttribute = new Lazy<ITypedElement>(RetrieveSchedulingBasisAttribute);
        
        /// <summary>
        /// The backing field for the RemoteOverRide property
        /// </summary>
        private bool _remoteOverRide;
        
        private static Lazy<ITypedElement> _remoteOverRideAttribute = new Lazy<ITypedElement>(RetrieveRemoteOverRideAttribute);
        
        /// <summary>
        /// The backing field for the LoadStatus property
        /// </summary>
        private Nullable<LoadStateKind> _loadStatus;
        
        private static Lazy<ITypedElement> _loadStatusAttribute = new Lazy<ITypedElement>(RetrieveLoadStatusAttribute);
        
        /// <summary>
        /// The backing field for the OverRideTimeOut property
        /// </summary>
        private float _overRideTimeOut;
        
        private static Lazy<ITypedElement> _overRideTimeOutAttribute = new Lazy<ITypedElement>(RetrieveOverRideTimeOutAttribute);
        
        private static Lazy<ITypedElement> _switchesReference = new Lazy<ITypedElement>(RetrieveSwitchesReference);
        
        /// <summary>
        /// The backing field for the Switches property
        /// </summary>
        private LoadMgmtFunctionSwitchesCollection _switches;
        
        private static Lazy<ITypedElement> _loadMgmtRecordsReference = new Lazy<ITypedElement>(RetrieveLoadMgmtRecordsReference);
        
        /// <summary>
        /// The backing field for the LoadMgmtRecords property
        /// </summary>
        private LoadMgmtFunctionLoadMgmtRecordsCollection _loadMgmtRecords;
        
        private static IClass _classInstance;
        
        public LoadMgmtFunction()
        {
            this._switches = new LoadMgmtFunctionSwitchesCollection(this);
            this._switches.CollectionChanging += this.SwitchesCollectionChanging;
            this._switches.CollectionChanged += this.SwitchesCollectionChanged;
            this._loadMgmtRecords = new LoadMgmtFunctionLoadMgmtRecordsCollection(this);
            this._loadMgmtRecords.CollectionChanging += this.LoadMgmtRecordsCollectionChanging;
            this._loadMgmtRecords.CollectionChanged += this.LoadMgmtRecordsCollectionChanged;
        }
        
        /// <summary>
        /// The manualOverRide property
        /// </summary>
        [XmlElementNameAttribute("manualOverRide")]
        [XmlAttributeAttribute(true)]
        public virtual bool ManualOverRide
        {
            get
            {
                return this._manualOverRide;
            }
            set
            {
                if ((this._manualOverRide != value))
                {
                    bool old = this._manualOverRide;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnManualOverRideChanging(e);
                    this.OnPropertyChanging("ManualOverRide", e, _manualOverRideAttribute);
                    this._manualOverRide = value;
                    this.OnManualOverRideChanged(e);
                    this.OnPropertyChanged("ManualOverRide", e, _manualOverRideAttribute);
                }
            }
        }
        
        /// <summary>
        /// The isAutoOp property
        /// </summary>
        [XmlElementNameAttribute("isAutoOp")]
        [XmlAttributeAttribute(true)]
        public virtual bool IsAutoOp
        {
            get
            {
                return this._isAutoOp;
            }
            set
            {
                if ((this._isAutoOp != value))
                {
                    bool old = this._isAutoOp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsAutoOpChanging(e);
                    this.OnPropertyChanging("IsAutoOp", e, _isAutoOpAttribute);
                    this._isAutoOp = value;
                    this.OnIsAutoOpChanged(e);
                    this.OnPropertyChanged("IsAutoOp", e, _isAutoOpAttribute);
                }
            }
        }
        
        /// <summary>
        /// The schedulingBasis property
        /// </summary>
        [XmlElementNameAttribute("schedulingBasis")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<LoadMgmtKind> SchedulingBasis
        {
            get
            {
                return this._schedulingBasis;
            }
            set
            {
                if ((this._schedulingBasis != value))
                {
                    Nullable<LoadMgmtKind> old = this._schedulingBasis;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSchedulingBasisChanging(e);
                    this.OnPropertyChanging("SchedulingBasis", e, _schedulingBasisAttribute);
                    this._schedulingBasis = value;
                    this.OnSchedulingBasisChanged(e);
                    this.OnPropertyChanged("SchedulingBasis", e, _schedulingBasisAttribute);
                }
            }
        }
        
        /// <summary>
        /// The remoteOverRide property
        /// </summary>
        [XmlElementNameAttribute("remoteOverRide")]
        [XmlAttributeAttribute(true)]
        public virtual bool RemoteOverRide
        {
            get
            {
                return this._remoteOverRide;
            }
            set
            {
                if ((this._remoteOverRide != value))
                {
                    bool old = this._remoteOverRide;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRemoteOverRideChanging(e);
                    this.OnPropertyChanging("RemoteOverRide", e, _remoteOverRideAttribute);
                    this._remoteOverRide = value;
                    this.OnRemoteOverRideChanged(e);
                    this.OnPropertyChanged("RemoteOverRide", e, _remoteOverRideAttribute);
                }
            }
        }
        
        /// <summary>
        /// The loadStatus property
        /// </summary>
        [XmlElementNameAttribute("loadStatus")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<LoadStateKind> LoadStatus
        {
            get
            {
                return this._loadStatus;
            }
            set
            {
                if ((this._loadStatus != value))
                {
                    Nullable<LoadStateKind> old = this._loadStatus;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLoadStatusChanging(e);
                    this.OnPropertyChanging("LoadStatus", e, _loadStatusAttribute);
                    this._loadStatus = value;
                    this.OnLoadStatusChanged(e);
                    this.OnPropertyChanged("LoadStatus", e, _loadStatusAttribute);
                }
            }
        }
        
        /// <summary>
        /// The overRideTimeOut property
        /// </summary>
        [XmlElementNameAttribute("overRideTimeOut")]
        [XmlAttributeAttribute(true)]
        public virtual float OverRideTimeOut
        {
            get
            {
                return this._overRideTimeOut;
            }
            set
            {
                if ((this._overRideTimeOut != value))
                {
                    float old = this._overRideTimeOut;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOverRideTimeOutChanging(e);
                    this.OnPropertyChanging("OverRideTimeOut", e, _overRideTimeOutAttribute);
                    this._overRideTimeOut = value;
                    this.OnOverRideTimeOutChanged(e);
                    this.OnPropertyChanged("OverRideTimeOut", e, _overRideTimeOutAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Switches property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("LoadMgmtFunctions")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISwitch> Switches
        {
            get
            {
                return this._switches;
            }
        }
        
        /// <summary>
        /// The LoadMgmtRecords property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("LoadMgmtFunction")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILoadMgmtRecord> LoadMgmtRecords
        {
            get
            {
                return this._loadMgmtRecords;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new LoadMgmtFunctionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfLoadControl/Lo" +
                            "adMgmtFunction")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ManualOverRide property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ManualOverRideChanging;
        
        /// <summary>
        /// Gets fired when the ManualOverRide property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ManualOverRideChanged;
        
        /// <summary>
        /// Gets fired before the IsAutoOp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsAutoOpChanging;
        
        /// <summary>
        /// Gets fired when the IsAutoOp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsAutoOpChanged;
        
        /// <summary>
        /// Gets fired before the SchedulingBasis property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SchedulingBasisChanging;
        
        /// <summary>
        /// Gets fired when the SchedulingBasis property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SchedulingBasisChanged;
        
        /// <summary>
        /// Gets fired before the RemoteOverRide property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RemoteOverRideChanging;
        
        /// <summary>
        /// Gets fired when the RemoteOverRide property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RemoteOverRideChanged;
        
        /// <summary>
        /// Gets fired before the LoadStatus property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoadStatusChanging;
        
        /// <summary>
        /// Gets fired when the LoadStatus property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoadStatusChanged;
        
        /// <summary>
        /// Gets fired before the OverRideTimeOut property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OverRideTimeOutChanging;
        
        /// <summary>
        /// Gets fired when the OverRideTimeOut property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OverRideTimeOutChanged;
        
        private static ITypedElement RetrieveManualOverRideAttribute()
        {
            return ((ITypedElement)(((ModelElement)(LoadMgmtFunction.ClassInstance)).Resolve("manualOverRide")));
        }
        
        /// <summary>
        /// Raises the ManualOverRideChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnManualOverRideChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ManualOverRideChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ManualOverRideChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnManualOverRideChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ManualOverRideChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIsAutoOpAttribute()
        {
            return ((ITypedElement)(((ModelElement)(LoadMgmtFunction.ClassInstance)).Resolve("isAutoOp")));
        }
        
        /// <summary>
        /// Raises the IsAutoOpChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsAutoOpChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsAutoOpChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsAutoOpChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsAutoOpChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsAutoOpChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSchedulingBasisAttribute()
        {
            return ((ITypedElement)(((ModelElement)(LoadMgmtFunction.ClassInstance)).Resolve("schedulingBasis")));
        }
        
        /// <summary>
        /// Raises the SchedulingBasisChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSchedulingBasisChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SchedulingBasisChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SchedulingBasisChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSchedulingBasisChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SchedulingBasisChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRemoteOverRideAttribute()
        {
            return ((ITypedElement)(((ModelElement)(LoadMgmtFunction.ClassInstance)).Resolve("remoteOverRide")));
        }
        
        /// <summary>
        /// Raises the RemoteOverRideChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemoteOverRideChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RemoteOverRideChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RemoteOverRideChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemoteOverRideChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RemoteOverRideChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLoadStatusAttribute()
        {
            return ((ITypedElement)(((ModelElement)(LoadMgmtFunction.ClassInstance)).Resolve("loadStatus")));
        }
        
        /// <summary>
        /// Raises the LoadStatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoadStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoadStatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LoadStatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoadStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoadStatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOverRideTimeOutAttribute()
        {
            return ((ITypedElement)(((ModelElement)(LoadMgmtFunction.ClassInstance)).Resolve("overRideTimeOut")));
        }
        
        /// <summary>
        /// Raises the OverRideTimeOutChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOverRideTimeOutChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OverRideTimeOutChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OverRideTimeOutChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOverRideTimeOutChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OverRideTimeOutChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSwitchesReference()
        {
            return ((ITypedElement)(((ModelElement)(LoadMgmtFunction.ClassInstance)).Resolve("Switches")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Switches property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SwitchesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Switches", e, _switchesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Switches property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SwitchesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Switches", e, _switchesReference);
        }
        
        private static ITypedElement RetrieveLoadMgmtRecordsReference()
        {
            return ((ITypedElement)(((ModelElement)(LoadMgmtFunction.ClassInstance)).Resolve("LoadMgmtRecords")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the LoadMgmtRecords property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LoadMgmtRecordsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("LoadMgmtRecords", e, _loadMgmtRecordsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the LoadMgmtRecords property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LoadMgmtRecordsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("LoadMgmtRecords", e, _loadMgmtRecordsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MANUALOVERRIDE"))
            {
                return this.ManualOverRide;
            }
            if ((attribute == "ISAUTOOP"))
            {
                return this.IsAutoOp;
            }
            if ((attribute == "SCHEDULINGBASIS"))
            {
                return this.SchedulingBasis;
            }
            if ((attribute == "REMOTEOVERRIDE"))
            {
                return this.RemoteOverRide;
            }
            if ((attribute == "LOADSTATUS"))
            {
                return this.LoadStatus;
            }
            if ((attribute == "OVERRIDETIMEOUT"))
            {
                return this.OverRideTimeOut;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SWITCHES"))
            {
                return this._switches;
            }
            if ((feature == "LOADMGMTRECORDS"))
            {
                return this._loadMgmtRecords;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MANUALOVERRIDE"))
            {
                this.ManualOverRide = ((bool)(value));
                return;
            }
            if ((feature == "ISAUTOOP"))
            {
                this.IsAutoOp = ((bool)(value));
                return;
            }
            if ((feature == "SCHEDULINGBASIS"))
            {
                this.SchedulingBasis = ((LoadMgmtKind)(value));
                return;
            }
            if ((feature == "REMOTEOVERRIDE"))
            {
                this.RemoteOverRide = ((bool)(value));
                return;
            }
            if ((feature == "LOADSTATUS"))
            {
                this.LoadStatus = ((LoadStateKind)(value));
                return;
            }
            if ((feature == "OVERRIDETIMEOUT"))
            {
                this.OverRideTimeOut = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfLoadControl/Lo" +
                        "adMgmtFunction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the LoadMgmtFunction class
        /// </summary>
        public class LoadMgmtFunctionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private LoadMgmtFunction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public LoadMgmtFunctionReferencedElementsCollection(LoadMgmtFunction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Switches.Count);
                    count = (count + this._parent.LoadMgmtRecords.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Switches.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.LoadMgmtRecords.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Switches.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.LoadMgmtRecords.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ISwitch switchesCasted = item.As<ISwitch>();
                if ((switchesCasted != null))
                {
                    this._parent.Switches.Add(switchesCasted);
                }
                ILoadMgmtRecord loadMgmtRecordsCasted = item.As<ILoadMgmtRecord>();
                if ((loadMgmtRecordsCasted != null))
                {
                    this._parent.LoadMgmtRecords.Add(loadMgmtRecordsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Switches.Clear();
                this._parent.LoadMgmtRecords.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Switches.Contains(item))
                {
                    return true;
                }
                if (this._parent.LoadMgmtRecords.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> switchesEnumerator = this._parent.Switches.GetEnumerator();
                try
                {
                    for (
                    ; switchesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = switchesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    switchesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> loadMgmtRecordsEnumerator = this._parent.LoadMgmtRecords.GetEnumerator();
                try
                {
                    for (
                    ; loadMgmtRecordsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = loadMgmtRecordsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    loadMgmtRecordsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ISwitch switchItem = item.As<ISwitch>();
                if (((switchItem != null) 
                            && this._parent.Switches.Remove(switchItem)))
                {
                    return true;
                }
                ILoadMgmtRecord loadMgmtRecordItem = item.As<ILoadMgmtRecord>();
                if (((loadMgmtRecordItem != null) 
                            && this._parent.LoadMgmtRecords.Remove(loadMgmtRecordItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Switches).Concat(this._parent.LoadMgmtRecords).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the manualOverRide property
        /// </summary>
        private sealed class ManualOverRideProxy : ModelPropertyChange<ILoadMgmtFunction, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ManualOverRideProxy(ILoadMgmtFunction modelElement) : 
                    base(modelElement, "manualOverRide")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.ManualOverRide;
                }
                set
                {
                    this.ModelElement.ManualOverRide = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isAutoOp property
        /// </summary>
        private sealed class IsAutoOpProxy : ModelPropertyChange<ILoadMgmtFunction, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsAutoOpProxy(ILoadMgmtFunction modelElement) : 
                    base(modelElement, "isAutoOp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsAutoOp;
                }
                set
                {
                    this.ModelElement.IsAutoOp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the schedulingBasis property
        /// </summary>
        private sealed class SchedulingBasisProxy : ModelPropertyChange<ILoadMgmtFunction, Nullable<LoadMgmtKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SchedulingBasisProxy(ILoadMgmtFunction modelElement) : 
                    base(modelElement, "schedulingBasis")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<LoadMgmtKind> Value
            {
                get
                {
                    return this.ModelElement.SchedulingBasis;
                }
                set
                {
                    this.ModelElement.SchedulingBasis = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the remoteOverRide property
        /// </summary>
        private sealed class RemoteOverRideProxy : ModelPropertyChange<ILoadMgmtFunction, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RemoteOverRideProxy(ILoadMgmtFunction modelElement) : 
                    base(modelElement, "remoteOverRide")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.RemoteOverRide;
                }
                set
                {
                    this.ModelElement.RemoteOverRide = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the loadStatus property
        /// </summary>
        private sealed class LoadStatusProxy : ModelPropertyChange<ILoadMgmtFunction, Nullable<LoadStateKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LoadStatusProxy(ILoadMgmtFunction modelElement) : 
                    base(modelElement, "loadStatus")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<LoadStateKind> Value
            {
                get
                {
                    return this.ModelElement.LoadStatus;
                }
                set
                {
                    this.ModelElement.LoadStatus = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the overRideTimeOut property
        /// </summary>
        private sealed class OverRideTimeOutProxy : ModelPropertyChange<ILoadMgmtFunction, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OverRideTimeOutProxy(ILoadMgmtFunction modelElement) : 
                    base(modelElement, "overRideTimeOut")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.OverRideTimeOut;
                }
                set
                {
                    this.ModelElement.OverRideTimeOut = value;
                }
            }
        }
    }
}

