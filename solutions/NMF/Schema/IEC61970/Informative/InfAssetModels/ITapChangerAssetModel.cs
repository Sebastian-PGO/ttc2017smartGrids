using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels
{
    
    
    /// <summary>
    /// The public interface for TapChangerAssetModel
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(TapChangerAssetModel))]
    [XmlDefaultImplementationTypeAttribute(typeof(TapChangerAssetModel))]
    public interface ITapChangerAssetModel : IModelElement, IAssetModel
    {
        
        /// <summary>
        /// The frequency property
        /// </summary>
        float Frequency
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ratedVoltage property
        /// </summary>
        float RatedVoltage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The highStep property
        /// </summary>
        int HighStep
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ratedCurrent property
        /// </summary>
        float RatedCurrent
        {
            get;
            set;
        }
        
        /// <summary>
        /// The phaseCount property
        /// </summary>
        int PhaseCount
        {
            get;
            set;
        }
        
        /// <summary>
        /// The tapCount property
        /// </summary>
        int TapCount
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ratedApparentPower property
        /// </summary>
        float RatedApparentPower
        {
            get;
            set;
        }
        
        /// <summary>
        /// The neutralStep property
        /// </summary>
        int NeutralStep
        {
            get;
            set;
        }
        
        /// <summary>
        /// The lowStep property
        /// </summary>
        int LowStep
        {
            get;
            set;
        }
        
        /// <summary>
        /// The initialDelay property
        /// </summary>
        float InitialDelay
        {
            get;
            set;
        }
        
        /// <summary>
        /// The stepVoltageIncrement property
        /// </summary>
        float StepVoltageIncrement
        {
            get;
            set;
        }
        
        /// <summary>
        /// The switchingKind property
        /// </summary>
        Nullable<TapChangerSwitchingKind> SwitchingKind
        {
            get;
            set;
        }
        
        /// <summary>
        /// The subsequentDelay property
        /// </summary>
        float SubsequentDelay
        {
            get;
            set;
        }
        
        /// <summary>
        /// The stepPhaseIncrement property
        /// </summary>
        float StepPhaseIncrement
        {
            get;
            set;
        }
        
        /// <summary>
        /// The bil property
        /// </summary>
        float Bil
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TapChangerAssets property
        /// </summary>
        IOrderedSetExpression<ITapChangerAsset> TapChangerAssets
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the Frequency property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FrequencyChanging;
        
        /// <summary>
        /// Gets fired when the Frequency property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FrequencyChanged;
        
        /// <summary>
        /// Gets fired before the RatedVoltage property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedVoltageChanging;
        
        /// <summary>
        /// Gets fired when the RatedVoltage property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedVoltageChanged;
        
        /// <summary>
        /// Gets fired before the HighStep property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HighStepChanging;
        
        /// <summary>
        /// Gets fired when the HighStep property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HighStepChanged;
        
        /// <summary>
        /// Gets fired before the RatedCurrent property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedCurrentChanging;
        
        /// <summary>
        /// Gets fired when the RatedCurrent property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedCurrentChanged;
        
        /// <summary>
        /// Gets fired before the PhaseCount property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhaseCountChanging;
        
        /// <summary>
        /// Gets fired when the PhaseCount property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhaseCountChanged;
        
        /// <summary>
        /// Gets fired before the TapCount property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TapCountChanging;
        
        /// <summary>
        /// Gets fired when the TapCount property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TapCountChanged;
        
        /// <summary>
        /// Gets fired before the RatedApparentPower property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedApparentPowerChanging;
        
        /// <summary>
        /// Gets fired when the RatedApparentPower property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedApparentPowerChanged;
        
        /// <summary>
        /// Gets fired before the NeutralStep property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NeutralStepChanging;
        
        /// <summary>
        /// Gets fired when the NeutralStep property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NeutralStepChanged;
        
        /// <summary>
        /// Gets fired before the LowStep property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowStepChanging;
        
        /// <summary>
        /// Gets fired when the LowStep property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowStepChanged;
        
        /// <summary>
        /// Gets fired before the InitialDelay property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InitialDelayChanging;
        
        /// <summary>
        /// Gets fired when the InitialDelay property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InitialDelayChanged;
        
        /// <summary>
        /// Gets fired before the StepVoltageIncrement property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StepVoltageIncrementChanging;
        
        /// <summary>
        /// Gets fired when the StepVoltageIncrement property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StepVoltageIncrementChanged;
        
        /// <summary>
        /// Gets fired before the SwitchingKind property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SwitchingKindChanging;
        
        /// <summary>
        /// Gets fired when the SwitchingKind property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SwitchingKindChanged;
        
        /// <summary>
        /// Gets fired before the SubsequentDelay property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SubsequentDelayChanging;
        
        /// <summary>
        /// Gets fired when the SubsequentDelay property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SubsequentDelayChanged;
        
        /// <summary>
        /// Gets fired before the StepPhaseIncrement property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StepPhaseIncrementChanging;
        
        /// <summary>
        /// Gets fired when the StepPhaseIncrement property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StepPhaseIncrementChanged;
        
        /// <summary>
        /// Gets fired before the Bil property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BilChanging;
        
        /// <summary>
        /// Gets fired when the Bil property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BilChanged;
    }
}

