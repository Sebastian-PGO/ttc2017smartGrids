using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels
{
    
    
    /// <summary>
    /// The default implementation of the TapChangerAssetModel class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssetModels")]
    [XmlNamespacePrefixAttribute("cimInfAssetModels")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssetModels/Ta" +
        "pChangerAssetModel")]
    [DebuggerDisplayAttribute("TapChangerAssetModel {UUID}")]
    public partial class TapChangerAssetModel : AssetModel, ITapChangerAssetModel, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Frequency property
        /// </summary>
        private float _frequency;
        
        private static Lazy<ITypedElement> _frequencyAttribute = new Lazy<ITypedElement>(RetrieveFrequencyAttribute);
        
        /// <summary>
        /// The backing field for the RatedVoltage property
        /// </summary>
        private float _ratedVoltage;
        
        private static Lazy<ITypedElement> _ratedVoltageAttribute = new Lazy<ITypedElement>(RetrieveRatedVoltageAttribute);
        
        /// <summary>
        /// The backing field for the HighStep property
        /// </summary>
        private int _highStep;
        
        private static Lazy<ITypedElement> _highStepAttribute = new Lazy<ITypedElement>(RetrieveHighStepAttribute);
        
        /// <summary>
        /// The backing field for the RatedCurrent property
        /// </summary>
        private float _ratedCurrent;
        
        private static Lazy<ITypedElement> _ratedCurrentAttribute = new Lazy<ITypedElement>(RetrieveRatedCurrentAttribute);
        
        /// <summary>
        /// The backing field for the PhaseCount property
        /// </summary>
        private int _phaseCount;
        
        private static Lazy<ITypedElement> _phaseCountAttribute = new Lazy<ITypedElement>(RetrievePhaseCountAttribute);
        
        /// <summary>
        /// The backing field for the TapCount property
        /// </summary>
        private int _tapCount;
        
        private static Lazy<ITypedElement> _tapCountAttribute = new Lazy<ITypedElement>(RetrieveTapCountAttribute);
        
        /// <summary>
        /// The backing field for the RatedApparentPower property
        /// </summary>
        private float _ratedApparentPower;
        
        private static Lazy<ITypedElement> _ratedApparentPowerAttribute = new Lazy<ITypedElement>(RetrieveRatedApparentPowerAttribute);
        
        /// <summary>
        /// The backing field for the NeutralStep property
        /// </summary>
        private int _neutralStep;
        
        private static Lazy<ITypedElement> _neutralStepAttribute = new Lazy<ITypedElement>(RetrieveNeutralStepAttribute);
        
        /// <summary>
        /// The backing field for the LowStep property
        /// </summary>
        private int _lowStep;
        
        private static Lazy<ITypedElement> _lowStepAttribute = new Lazy<ITypedElement>(RetrieveLowStepAttribute);
        
        /// <summary>
        /// The backing field for the InitialDelay property
        /// </summary>
        private float _initialDelay;
        
        private static Lazy<ITypedElement> _initialDelayAttribute = new Lazy<ITypedElement>(RetrieveInitialDelayAttribute);
        
        /// <summary>
        /// The backing field for the StepVoltageIncrement property
        /// </summary>
        private float _stepVoltageIncrement;
        
        private static Lazy<ITypedElement> _stepVoltageIncrementAttribute = new Lazy<ITypedElement>(RetrieveStepVoltageIncrementAttribute);
        
        /// <summary>
        /// The backing field for the SwitchingKind property
        /// </summary>
        private Nullable<TapChangerSwitchingKind> _switchingKind;
        
        private static Lazy<ITypedElement> _switchingKindAttribute = new Lazy<ITypedElement>(RetrieveSwitchingKindAttribute);
        
        /// <summary>
        /// The backing field for the SubsequentDelay property
        /// </summary>
        private float _subsequentDelay;
        
        private static Lazy<ITypedElement> _subsequentDelayAttribute = new Lazy<ITypedElement>(RetrieveSubsequentDelayAttribute);
        
        /// <summary>
        /// The backing field for the StepPhaseIncrement property
        /// </summary>
        private float _stepPhaseIncrement;
        
        private static Lazy<ITypedElement> _stepPhaseIncrementAttribute = new Lazy<ITypedElement>(RetrieveStepPhaseIncrementAttribute);
        
        /// <summary>
        /// The backing field for the Bil property
        /// </summary>
        private float _bil;
        
        private static Lazy<ITypedElement> _bilAttribute = new Lazy<ITypedElement>(RetrieveBilAttribute);
        
        private static Lazy<ITypedElement> _tapChangerAssetsReference = new Lazy<ITypedElement>(RetrieveTapChangerAssetsReference);
        
        /// <summary>
        /// The backing field for the TapChangerAssets property
        /// </summary>
        private TapChangerAssetModelTapChangerAssetsCollection _tapChangerAssets;
        
        private static IClass _classInstance;
        
        public TapChangerAssetModel()
        {
            this._tapChangerAssets = new TapChangerAssetModelTapChangerAssetsCollection(this);
            this._tapChangerAssets.CollectionChanging += this.TapChangerAssetsCollectionChanging;
            this._tapChangerAssets.CollectionChanged += this.TapChangerAssetsCollectionChanged;
        }
        
        /// <summary>
        /// The frequency property
        /// </summary>
        [XmlElementNameAttribute("frequency")]
        [XmlAttributeAttribute(true)]
        public virtual float Frequency
        {
            get
            {
                return this._frequency;
            }
            set
            {
                if ((this._frequency != value))
                {
                    float old = this._frequency;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFrequencyChanging(e);
                    this.OnPropertyChanging("Frequency", e, _frequencyAttribute);
                    this._frequency = value;
                    this.OnFrequencyChanged(e);
                    this.OnPropertyChanged("Frequency", e, _frequencyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ratedVoltage property
        /// </summary>
        [XmlElementNameAttribute("ratedVoltage")]
        [XmlAttributeAttribute(true)]
        public virtual float RatedVoltage
        {
            get
            {
                return this._ratedVoltage;
            }
            set
            {
                if ((this._ratedVoltage != value))
                {
                    float old = this._ratedVoltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatedVoltageChanging(e);
                    this.OnPropertyChanging("RatedVoltage", e, _ratedVoltageAttribute);
                    this._ratedVoltage = value;
                    this.OnRatedVoltageChanged(e);
                    this.OnPropertyChanged("RatedVoltage", e, _ratedVoltageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The highStep property
        /// </summary>
        [XmlElementNameAttribute("highStep")]
        [XmlAttributeAttribute(true)]
        public virtual int HighStep
        {
            get
            {
                return this._highStep;
            }
            set
            {
                if ((this._highStep != value))
                {
                    int old = this._highStep;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHighStepChanging(e);
                    this.OnPropertyChanging("HighStep", e, _highStepAttribute);
                    this._highStep = value;
                    this.OnHighStepChanged(e);
                    this.OnPropertyChanged("HighStep", e, _highStepAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ratedCurrent property
        /// </summary>
        [XmlElementNameAttribute("ratedCurrent")]
        [XmlAttributeAttribute(true)]
        public virtual float RatedCurrent
        {
            get
            {
                return this._ratedCurrent;
            }
            set
            {
                if ((this._ratedCurrent != value))
                {
                    float old = this._ratedCurrent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatedCurrentChanging(e);
                    this.OnPropertyChanging("RatedCurrent", e, _ratedCurrentAttribute);
                    this._ratedCurrent = value;
                    this.OnRatedCurrentChanged(e);
                    this.OnPropertyChanged("RatedCurrent", e, _ratedCurrentAttribute);
                }
            }
        }
        
        /// <summary>
        /// The phaseCount property
        /// </summary>
        [XmlElementNameAttribute("phaseCount")]
        [XmlAttributeAttribute(true)]
        public virtual int PhaseCount
        {
            get
            {
                return this._phaseCount;
            }
            set
            {
                if ((this._phaseCount != value))
                {
                    int old = this._phaseCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhaseCountChanging(e);
                    this.OnPropertyChanging("PhaseCount", e, _phaseCountAttribute);
                    this._phaseCount = value;
                    this.OnPhaseCountChanged(e);
                    this.OnPropertyChanged("PhaseCount", e, _phaseCountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The tapCount property
        /// </summary>
        [XmlElementNameAttribute("tapCount")]
        [XmlAttributeAttribute(true)]
        public virtual int TapCount
        {
            get
            {
                return this._tapCount;
            }
            set
            {
                if ((this._tapCount != value))
                {
                    int old = this._tapCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTapCountChanging(e);
                    this.OnPropertyChanging("TapCount", e, _tapCountAttribute);
                    this._tapCount = value;
                    this.OnTapCountChanged(e);
                    this.OnPropertyChanged("TapCount", e, _tapCountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ratedApparentPower property
        /// </summary>
        [XmlElementNameAttribute("ratedApparentPower")]
        [XmlAttributeAttribute(true)]
        public virtual float RatedApparentPower
        {
            get
            {
                return this._ratedApparentPower;
            }
            set
            {
                if ((this._ratedApparentPower != value))
                {
                    float old = this._ratedApparentPower;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatedApparentPowerChanging(e);
                    this.OnPropertyChanging("RatedApparentPower", e, _ratedApparentPowerAttribute);
                    this._ratedApparentPower = value;
                    this.OnRatedApparentPowerChanged(e);
                    this.OnPropertyChanged("RatedApparentPower", e, _ratedApparentPowerAttribute);
                }
            }
        }
        
        /// <summary>
        /// The neutralStep property
        /// </summary>
        [XmlElementNameAttribute("neutralStep")]
        [XmlAttributeAttribute(true)]
        public virtual int NeutralStep
        {
            get
            {
                return this._neutralStep;
            }
            set
            {
                if ((this._neutralStep != value))
                {
                    int old = this._neutralStep;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNeutralStepChanging(e);
                    this.OnPropertyChanging("NeutralStep", e, _neutralStepAttribute);
                    this._neutralStep = value;
                    this.OnNeutralStepChanged(e);
                    this.OnPropertyChanged("NeutralStep", e, _neutralStepAttribute);
                }
            }
        }
        
        /// <summary>
        /// The lowStep property
        /// </summary>
        [XmlElementNameAttribute("lowStep")]
        [XmlAttributeAttribute(true)]
        public virtual int LowStep
        {
            get
            {
                return this._lowStep;
            }
            set
            {
                if ((this._lowStep != value))
                {
                    int old = this._lowStep;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLowStepChanging(e);
                    this.OnPropertyChanging("LowStep", e, _lowStepAttribute);
                    this._lowStep = value;
                    this.OnLowStepChanged(e);
                    this.OnPropertyChanged("LowStep", e, _lowStepAttribute);
                }
            }
        }
        
        /// <summary>
        /// The initialDelay property
        /// </summary>
        [XmlElementNameAttribute("initialDelay")]
        [XmlAttributeAttribute(true)]
        public virtual float InitialDelay
        {
            get
            {
                return this._initialDelay;
            }
            set
            {
                if ((this._initialDelay != value))
                {
                    float old = this._initialDelay;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInitialDelayChanging(e);
                    this.OnPropertyChanging("InitialDelay", e, _initialDelayAttribute);
                    this._initialDelay = value;
                    this.OnInitialDelayChanged(e);
                    this.OnPropertyChanged("InitialDelay", e, _initialDelayAttribute);
                }
            }
        }
        
        /// <summary>
        /// The stepVoltageIncrement property
        /// </summary>
        [XmlElementNameAttribute("stepVoltageIncrement")]
        [XmlAttributeAttribute(true)]
        public virtual float StepVoltageIncrement
        {
            get
            {
                return this._stepVoltageIncrement;
            }
            set
            {
                if ((this._stepVoltageIncrement != value))
                {
                    float old = this._stepVoltageIncrement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStepVoltageIncrementChanging(e);
                    this.OnPropertyChanging("StepVoltageIncrement", e, _stepVoltageIncrementAttribute);
                    this._stepVoltageIncrement = value;
                    this.OnStepVoltageIncrementChanged(e);
                    this.OnPropertyChanged("StepVoltageIncrement", e, _stepVoltageIncrementAttribute);
                }
            }
        }
        
        /// <summary>
        /// The switchingKind property
        /// </summary>
        [XmlElementNameAttribute("switchingKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<TapChangerSwitchingKind> SwitchingKind
        {
            get
            {
                return this._switchingKind;
            }
            set
            {
                if ((this._switchingKind != value))
                {
                    Nullable<TapChangerSwitchingKind> old = this._switchingKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSwitchingKindChanging(e);
                    this.OnPropertyChanging("SwitchingKind", e, _switchingKindAttribute);
                    this._switchingKind = value;
                    this.OnSwitchingKindChanged(e);
                    this.OnPropertyChanged("SwitchingKind", e, _switchingKindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The subsequentDelay property
        /// </summary>
        [XmlElementNameAttribute("subsequentDelay")]
        [XmlAttributeAttribute(true)]
        public virtual float SubsequentDelay
        {
            get
            {
                return this._subsequentDelay;
            }
            set
            {
                if ((this._subsequentDelay != value))
                {
                    float old = this._subsequentDelay;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubsequentDelayChanging(e);
                    this.OnPropertyChanging("SubsequentDelay", e, _subsequentDelayAttribute);
                    this._subsequentDelay = value;
                    this.OnSubsequentDelayChanged(e);
                    this.OnPropertyChanged("SubsequentDelay", e, _subsequentDelayAttribute);
                }
            }
        }
        
        /// <summary>
        /// The stepPhaseIncrement property
        /// </summary>
        [XmlElementNameAttribute("stepPhaseIncrement")]
        [XmlAttributeAttribute(true)]
        public virtual float StepPhaseIncrement
        {
            get
            {
                return this._stepPhaseIncrement;
            }
            set
            {
                if ((this._stepPhaseIncrement != value))
                {
                    float old = this._stepPhaseIncrement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStepPhaseIncrementChanging(e);
                    this.OnPropertyChanging("StepPhaseIncrement", e, _stepPhaseIncrementAttribute);
                    this._stepPhaseIncrement = value;
                    this.OnStepPhaseIncrementChanged(e);
                    this.OnPropertyChanged("StepPhaseIncrement", e, _stepPhaseIncrementAttribute);
                }
            }
        }
        
        /// <summary>
        /// The bil property
        /// </summary>
        [XmlElementNameAttribute("bil")]
        [XmlAttributeAttribute(true)]
        public virtual float Bil
        {
            get
            {
                return this._bil;
            }
            set
            {
                if ((this._bil != value))
                {
                    float old = this._bil;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBilChanging(e);
                    this.OnPropertyChanging("Bil", e, _bilAttribute);
                    this._bil = value;
                    this.OnBilChanged(e);
                    this.OnPropertyChanged("Bil", e, _bilAttribute);
                }
            }
        }
        
        /// <summary>
        /// The TapChangerAssets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TapChangerAssetModel")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITapChangerAsset> TapChangerAssets
        {
            get
            {
                return this._tapChangerAssets;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TapChangerAssetModelReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssetModels/Ta" +
                            "pChangerAssetModel")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Frequency property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrequencyChanging;
        
        /// <summary>
        /// Gets fired when the Frequency property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrequencyChanged;
        
        /// <summary>
        /// Gets fired before the RatedVoltage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedVoltageChanging;
        
        /// <summary>
        /// Gets fired when the RatedVoltage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedVoltageChanged;
        
        /// <summary>
        /// Gets fired before the HighStep property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HighStepChanging;
        
        /// <summary>
        /// Gets fired when the HighStep property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HighStepChanged;
        
        /// <summary>
        /// Gets fired before the RatedCurrent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedCurrentChanging;
        
        /// <summary>
        /// Gets fired when the RatedCurrent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedCurrentChanged;
        
        /// <summary>
        /// Gets fired before the PhaseCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseCountChanging;
        
        /// <summary>
        /// Gets fired when the PhaseCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseCountChanged;
        
        /// <summary>
        /// Gets fired before the TapCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TapCountChanging;
        
        /// <summary>
        /// Gets fired when the TapCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TapCountChanged;
        
        /// <summary>
        /// Gets fired before the RatedApparentPower property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedApparentPowerChanging;
        
        /// <summary>
        /// Gets fired when the RatedApparentPower property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedApparentPowerChanged;
        
        /// <summary>
        /// Gets fired before the NeutralStep property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeutralStepChanging;
        
        /// <summary>
        /// Gets fired when the NeutralStep property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeutralStepChanged;
        
        /// <summary>
        /// Gets fired before the LowStep property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowStepChanging;
        
        /// <summary>
        /// Gets fired when the LowStep property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowStepChanged;
        
        /// <summary>
        /// Gets fired before the InitialDelay property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InitialDelayChanging;
        
        /// <summary>
        /// Gets fired when the InitialDelay property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InitialDelayChanged;
        
        /// <summary>
        /// Gets fired before the StepVoltageIncrement property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StepVoltageIncrementChanging;
        
        /// <summary>
        /// Gets fired when the StepVoltageIncrement property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StepVoltageIncrementChanged;
        
        /// <summary>
        /// Gets fired before the SwitchingKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwitchingKindChanging;
        
        /// <summary>
        /// Gets fired when the SwitchingKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwitchingKindChanged;
        
        /// <summary>
        /// Gets fired before the SubsequentDelay property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubsequentDelayChanging;
        
        /// <summary>
        /// Gets fired when the SubsequentDelay property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubsequentDelayChanged;
        
        /// <summary>
        /// Gets fired before the StepPhaseIncrement property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StepPhaseIncrementChanging;
        
        /// <summary>
        /// Gets fired when the StepPhaseIncrement property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StepPhaseIncrementChanged;
        
        /// <summary>
        /// Gets fired before the Bil property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BilChanging;
        
        /// <summary>
        /// Gets fired when the Bil property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BilChanged;
        
        private static ITypedElement RetrieveFrequencyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TapChangerAssetModel.ClassInstance)).Resolve("frequency")));
        }
        
        /// <summary>
        /// Raises the FrequencyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrequencyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrequencyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FrequencyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrequencyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrequencyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRatedVoltageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TapChangerAssetModel.ClassInstance)).Resolve("ratedVoltage")));
        }
        
        /// <summary>
        /// Raises the RatedVoltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedVoltageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedVoltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedVoltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedVoltageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedVoltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveHighStepAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TapChangerAssetModel.ClassInstance)).Resolve("highStep")));
        }
        
        /// <summary>
        /// Raises the HighStepChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHighStepChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HighStepChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HighStepChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHighStepChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HighStepChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRatedCurrentAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TapChangerAssetModel.ClassInstance)).Resolve("ratedCurrent")));
        }
        
        /// <summary>
        /// Raises the RatedCurrentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedCurrentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedCurrentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedCurrentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedCurrentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedCurrentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePhaseCountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TapChangerAssetModel.ClassInstance)).Resolve("phaseCount")));
        }
        
        /// <summary>
        /// Raises the PhaseCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhaseCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTapCountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TapChangerAssetModel.ClassInstance)).Resolve("tapCount")));
        }
        
        /// <summary>
        /// Raises the TapCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTapCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TapCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TapCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTapCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TapCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRatedApparentPowerAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TapChangerAssetModel.ClassInstance)).Resolve("ratedApparentPower")));
        }
        
        /// <summary>
        /// Raises the RatedApparentPowerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedApparentPowerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedApparentPowerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedApparentPowerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedApparentPowerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedApparentPowerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNeutralStepAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TapChangerAssetModel.ClassInstance)).Resolve("neutralStep")));
        }
        
        /// <summary>
        /// Raises the NeutralStepChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeutralStepChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeutralStepChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NeutralStepChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeutralStepChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeutralStepChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLowStepAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TapChangerAssetModel.ClassInstance)).Resolve("lowStep")));
        }
        
        /// <summary>
        /// Raises the LowStepChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowStepChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowStepChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowStepChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowStepChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowStepChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveInitialDelayAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TapChangerAssetModel.ClassInstance)).Resolve("initialDelay")));
        }
        
        /// <summary>
        /// Raises the InitialDelayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInitialDelayChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InitialDelayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InitialDelayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInitialDelayChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InitialDelayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStepVoltageIncrementAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TapChangerAssetModel.ClassInstance)).Resolve("stepVoltageIncrement")));
        }
        
        /// <summary>
        /// Raises the StepVoltageIncrementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStepVoltageIncrementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StepVoltageIncrementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StepVoltageIncrementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStepVoltageIncrementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StepVoltageIncrementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSwitchingKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TapChangerAssetModel.ClassInstance)).Resolve("switchingKind")));
        }
        
        /// <summary>
        /// Raises the SwitchingKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwitchingKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwitchingKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SwitchingKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwitchingKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwitchingKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSubsequentDelayAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TapChangerAssetModel.ClassInstance)).Resolve("subsequentDelay")));
        }
        
        /// <summary>
        /// Raises the SubsequentDelayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubsequentDelayChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubsequentDelayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubsequentDelayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubsequentDelayChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubsequentDelayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStepPhaseIncrementAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TapChangerAssetModel.ClassInstance)).Resolve("stepPhaseIncrement")));
        }
        
        /// <summary>
        /// Raises the StepPhaseIncrementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStepPhaseIncrementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StepPhaseIncrementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StepPhaseIncrementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStepPhaseIncrementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StepPhaseIncrementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBilAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TapChangerAssetModel.ClassInstance)).Resolve("bil")));
        }
        
        /// <summary>
        /// Raises the BilChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBilChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BilChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BilChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBilChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BilChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTapChangerAssetsReference()
        {
            return ((ITypedElement)(((ModelElement)(TapChangerAssetModel.ClassInstance)).Resolve("TapChangerAssets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TapChangerAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TapChangerAssetsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("TapChangerAssets", e, _tapChangerAssetsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TapChangerAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TapChangerAssetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TapChangerAssets", e, _tapChangerAssetsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "FREQUENCY"))
            {
                return this.Frequency;
            }
            if ((attribute == "RATEDVOLTAGE"))
            {
                return this.RatedVoltage;
            }
            if ((attribute == "HIGHSTEP"))
            {
                return this.HighStep;
            }
            if ((attribute == "RATEDCURRENT"))
            {
                return this.RatedCurrent;
            }
            if ((attribute == "PHASECOUNT"))
            {
                return this.PhaseCount;
            }
            if ((attribute == "TAPCOUNT"))
            {
                return this.TapCount;
            }
            if ((attribute == "RATEDAPPARENTPOWER"))
            {
                return this.RatedApparentPower;
            }
            if ((attribute == "NEUTRALSTEP"))
            {
                return this.NeutralStep;
            }
            if ((attribute == "LOWSTEP"))
            {
                return this.LowStep;
            }
            if ((attribute == "INITIALDELAY"))
            {
                return this.InitialDelay;
            }
            if ((attribute == "STEPVOLTAGEINCREMENT"))
            {
                return this.StepVoltageIncrement;
            }
            if ((attribute == "SWITCHINGKIND"))
            {
                return this.SwitchingKind;
            }
            if ((attribute == "SUBSEQUENTDELAY"))
            {
                return this.SubsequentDelay;
            }
            if ((attribute == "STEPPHASEINCREMENT"))
            {
                return this.StepPhaseIncrement;
            }
            if ((attribute == "BIL"))
            {
                return this.Bil;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "TAPCHANGERASSETS"))
            {
                return this._tapChangerAssets;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FREQUENCY"))
            {
                this.Frequency = ((float)(value));
                return;
            }
            if ((feature == "RATEDVOLTAGE"))
            {
                this.RatedVoltage = ((float)(value));
                return;
            }
            if ((feature == "HIGHSTEP"))
            {
                this.HighStep = ((int)(value));
                return;
            }
            if ((feature == "RATEDCURRENT"))
            {
                this.RatedCurrent = ((float)(value));
                return;
            }
            if ((feature == "PHASECOUNT"))
            {
                this.PhaseCount = ((int)(value));
                return;
            }
            if ((feature == "TAPCOUNT"))
            {
                this.TapCount = ((int)(value));
                return;
            }
            if ((feature == "RATEDAPPARENTPOWER"))
            {
                this.RatedApparentPower = ((float)(value));
                return;
            }
            if ((feature == "NEUTRALSTEP"))
            {
                this.NeutralStep = ((int)(value));
                return;
            }
            if ((feature == "LOWSTEP"))
            {
                this.LowStep = ((int)(value));
                return;
            }
            if ((feature == "INITIALDELAY"))
            {
                this.InitialDelay = ((float)(value));
                return;
            }
            if ((feature == "STEPVOLTAGEINCREMENT"))
            {
                this.StepVoltageIncrement = ((float)(value));
                return;
            }
            if ((feature == "SWITCHINGKIND"))
            {
                this.SwitchingKind = ((TapChangerSwitchingKind)(value));
                return;
            }
            if ((feature == "SUBSEQUENTDELAY"))
            {
                this.SubsequentDelay = ((float)(value));
                return;
            }
            if ((feature == "STEPPHASEINCREMENT"))
            {
                this.StepPhaseIncrement = ((float)(value));
                return;
            }
            if ((feature == "BIL"))
            {
                this.Bil = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssetModels/Ta" +
                        "pChangerAssetModel")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TapChangerAssetModel class
        /// </summary>
        public class TapChangerAssetModelReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TapChangerAssetModel _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TapChangerAssetModelReferencedElementsCollection(TapChangerAssetModel parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.TapChangerAssets.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TapChangerAssets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TapChangerAssets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITapChangerAsset tapChangerAssetsCasted = item.As<ITapChangerAsset>();
                if ((tapChangerAssetsCasted != null))
                {
                    this._parent.TapChangerAssets.Add(tapChangerAssetsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TapChangerAssets.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.TapChangerAssets.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> tapChangerAssetsEnumerator = this._parent.TapChangerAssets.GetEnumerator();
                try
                {
                    for (
                    ; tapChangerAssetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = tapChangerAssetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    tapChangerAssetsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITapChangerAsset tapChangerAssetItem = item.As<ITapChangerAsset>();
                if (((tapChangerAssetItem != null) 
                            && this._parent.TapChangerAssets.Remove(tapChangerAssetItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TapChangerAssets).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the frequency property
        /// </summary>
        private sealed class FrequencyProxy : ModelPropertyChange<ITapChangerAssetModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FrequencyProxy(ITapChangerAssetModel modelElement) : 
                    base(modelElement, "frequency")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Frequency;
                }
                set
                {
                    this.ModelElement.Frequency = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ratedVoltage property
        /// </summary>
        private sealed class RatedVoltageProxy : ModelPropertyChange<ITapChangerAssetModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatedVoltageProxy(ITapChangerAssetModel modelElement) : 
                    base(modelElement, "ratedVoltage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RatedVoltage;
                }
                set
                {
                    this.ModelElement.RatedVoltage = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the highStep property
        /// </summary>
        private sealed class HighStepProxy : ModelPropertyChange<ITapChangerAssetModel, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HighStepProxy(ITapChangerAssetModel modelElement) : 
                    base(modelElement, "highStep")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.HighStep;
                }
                set
                {
                    this.ModelElement.HighStep = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ratedCurrent property
        /// </summary>
        private sealed class RatedCurrentProxy : ModelPropertyChange<ITapChangerAssetModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatedCurrentProxy(ITapChangerAssetModel modelElement) : 
                    base(modelElement, "ratedCurrent")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RatedCurrent;
                }
                set
                {
                    this.ModelElement.RatedCurrent = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phaseCount property
        /// </summary>
        private sealed class PhaseCountProxy : ModelPropertyChange<ITapChangerAssetModel, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhaseCountProxy(ITapChangerAssetModel modelElement) : 
                    base(modelElement, "phaseCount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.PhaseCount;
                }
                set
                {
                    this.ModelElement.PhaseCount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the tapCount property
        /// </summary>
        private sealed class TapCountProxy : ModelPropertyChange<ITapChangerAssetModel, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TapCountProxy(ITapChangerAssetModel modelElement) : 
                    base(modelElement, "tapCount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.TapCount;
                }
                set
                {
                    this.ModelElement.TapCount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ratedApparentPower property
        /// </summary>
        private sealed class RatedApparentPowerProxy : ModelPropertyChange<ITapChangerAssetModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatedApparentPowerProxy(ITapChangerAssetModel modelElement) : 
                    base(modelElement, "ratedApparentPower")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RatedApparentPower;
                }
                set
                {
                    this.ModelElement.RatedApparentPower = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the neutralStep property
        /// </summary>
        private sealed class NeutralStepProxy : ModelPropertyChange<ITapChangerAssetModel, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NeutralStepProxy(ITapChangerAssetModel modelElement) : 
                    base(modelElement, "neutralStep")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.NeutralStep;
                }
                set
                {
                    this.ModelElement.NeutralStep = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lowStep property
        /// </summary>
        private sealed class LowStepProxy : ModelPropertyChange<ITapChangerAssetModel, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowStepProxy(ITapChangerAssetModel modelElement) : 
                    base(modelElement, "lowStep")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.LowStep;
                }
                set
                {
                    this.ModelElement.LowStep = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the initialDelay property
        /// </summary>
        private sealed class InitialDelayProxy : ModelPropertyChange<ITapChangerAssetModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InitialDelayProxy(ITapChangerAssetModel modelElement) : 
                    base(modelElement, "initialDelay")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.InitialDelay;
                }
                set
                {
                    this.ModelElement.InitialDelay = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the stepVoltageIncrement property
        /// </summary>
        private sealed class StepVoltageIncrementProxy : ModelPropertyChange<ITapChangerAssetModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StepVoltageIncrementProxy(ITapChangerAssetModel modelElement) : 
                    base(modelElement, "stepVoltageIncrement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.StepVoltageIncrement;
                }
                set
                {
                    this.ModelElement.StepVoltageIncrement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the switchingKind property
        /// </summary>
        private sealed class SwitchingKindProxy : ModelPropertyChange<ITapChangerAssetModel, Nullable<TapChangerSwitchingKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SwitchingKindProxy(ITapChangerAssetModel modelElement) : 
                    base(modelElement, "switchingKind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<TapChangerSwitchingKind> Value
            {
                get
                {
                    return this.ModelElement.SwitchingKind;
                }
                set
                {
                    this.ModelElement.SwitchingKind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the subsequentDelay property
        /// </summary>
        private sealed class SubsequentDelayProxy : ModelPropertyChange<ITapChangerAssetModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubsequentDelayProxy(ITapChangerAssetModel modelElement) : 
                    base(modelElement, "subsequentDelay")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SubsequentDelay;
                }
                set
                {
                    this.ModelElement.SubsequentDelay = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the stepPhaseIncrement property
        /// </summary>
        private sealed class StepPhaseIncrementProxy : ModelPropertyChange<ITapChangerAssetModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StepPhaseIncrementProxy(ITapChangerAssetModel modelElement) : 
                    base(modelElement, "stepPhaseIncrement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.StepPhaseIncrement;
                }
                set
                {
                    this.ModelElement.StepPhaseIncrement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the bil property
        /// </summary>
        private sealed class BilProxy : ModelPropertyChange<ITapChangerAssetModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BilProxy(ITapChangerAssetModel modelElement) : 
                    base(modelElement, "bil")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Bil;
                }
                set
                {
                    this.ModelElement.Bil = value;
                }
            }
        }
    }
}

