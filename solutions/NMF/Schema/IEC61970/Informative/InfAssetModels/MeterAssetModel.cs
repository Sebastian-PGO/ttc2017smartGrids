using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels
{
    
    
    /// <summary>
    /// The default implementation of the MeterAssetModel class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssetModels")]
    [XmlNamespacePrefixAttribute("cimInfAssetModels")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssetModels/Me" +
        "terAssetModel")]
    [DebuggerDisplayAttribute("MeterAssetModel {UUID}")]
    public partial class MeterAssetModel : ElectricalAssetModel, IMeterAssetModel, IModelElement
    {
        
        /// <summary>
        /// The backing field for the KH property
        /// </summary>
        private float _kH;
        
        private static Lazy<ITypedElement> _kHAttribute = new Lazy<ITypedElement>(RetrieveKHAttribute);
        
        /// <summary>
        /// The backing field for the IntervalDataMeter property
        /// </summary>
        private bool _intervalDataMeter;
        
        private static Lazy<ITypedElement> _intervalDataMeterAttribute = new Lazy<ITypedElement>(RetrieveIntervalDataMeterAttribute);
        
        /// <summary>
        /// The backing field for the MaxRegisterCount property
        /// </summary>
        private int _maxRegisterCount;
        
        private static Lazy<ITypedElement> _maxRegisterCountAttribute = new Lazy<ITypedElement>(RetrieveMaxRegisterCountAttribute);
        
        /// <summary>
        /// The backing field for the KVAhMeter property
        /// </summary>
        private bool _kVAhMeter;
        
        private static Lazy<ITypedElement> _kVAhMeterAttribute = new Lazy<ITypedElement>(RetrieveKVAhMeterAttribute);
        
        /// <summary>
        /// The backing field for the WireCount property
        /// </summary>
        private int _wireCount;
        
        private static Lazy<ITypedElement> _wireCountAttribute = new Lazy<ITypedElement>(RetrieveWireCountAttribute);
        
        /// <summary>
        /// The backing field for the TimeOfUseMeter property
        /// </summary>
        private bool _timeOfUseMeter;
        
        private static Lazy<ITypedElement> _timeOfUseMeterAttribute = new Lazy<ITypedElement>(RetrieveTimeOfUseMeterAttribute);
        
        /// <summary>
        /// The backing field for the DemandMeter property
        /// </summary>
        private bool _demandMeter;
        
        private static Lazy<ITypedElement> _demandMeterAttribute = new Lazy<ITypedElement>(RetrieveDemandMeterAttribute);
        
        /// <summary>
        /// The backing field for the ReactiveMeter property
        /// </summary>
        private bool _reactiveMeter;
        
        private static Lazy<ITypedElement> _reactiveMeterAttribute = new Lazy<ITypedElement>(RetrieveReactiveMeterAttribute);
        
        /// <summary>
        /// The backing field for the Form property
        /// </summary>
        private string _form;
        
        private static Lazy<ITypedElement> _formAttribute = new Lazy<ITypedElement>(RetrieveFormAttribute);
        
        /// <summary>
        /// The backing field for the RegisterRatio property
        /// </summary>
        private float _registerRatio;
        
        private static Lazy<ITypedElement> _registerRatioAttribute = new Lazy<ITypedElement>(RetrieveRegisterRatioAttribute);
        
        /// <summary>
        /// The backing field for the KwhMeter property
        /// </summary>
        private bool _kwhMeter;
        
        private static Lazy<ITypedElement> _kwhMeterAttribute = new Lazy<ITypedElement>(RetrieveKwhMeterAttribute);
        
        /// <summary>
        /// The backing field for the QMeter property
        /// </summary>
        private bool _qMeter;
        
        private static Lazy<ITypedElement> _qMeterAttribute = new Lazy<ITypedElement>(RetrieveQMeterAttribute);
        
        /// <summary>
        /// The backing field for the LoadProfileMeter property
        /// </summary>
        private bool _loadProfileMeter;
        
        private static Lazy<ITypedElement> _loadProfileMeterAttribute = new Lazy<ITypedElement>(RetrieveLoadProfileMeterAttribute);
        
        private static Lazy<ITypedElement> _meterAssetsReference = new Lazy<ITypedElement>(RetrieveMeterAssetsReference);
        
        /// <summary>
        /// The backing field for the MeterAssets property
        /// </summary>
        private MeterAssetModelMeterAssetsCollection _meterAssets;
        
        private static IClass _classInstance;
        
        public MeterAssetModel()
        {
            this._meterAssets = new MeterAssetModelMeterAssetsCollection(this);
            this._meterAssets.CollectionChanging += this.MeterAssetsCollectionChanging;
            this._meterAssets.CollectionChanged += this.MeterAssetsCollectionChanged;
        }
        
        /// <summary>
        /// The kH property
        /// </summary>
        [XmlElementNameAttribute("kH")]
        [XmlAttributeAttribute(true)]
        public virtual float KH
        {
            get
            {
                return this._kH;
            }
            set
            {
                if ((this._kH != value))
                {
                    float old = this._kH;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKHChanging(e);
                    this.OnPropertyChanging("KH", e, _kHAttribute);
                    this._kH = value;
                    this.OnKHChanged(e);
                    this.OnPropertyChanged("KH", e, _kHAttribute);
                }
            }
        }
        
        /// <summary>
        /// The intervalDataMeter property
        /// </summary>
        [XmlElementNameAttribute("intervalDataMeter")]
        [XmlAttributeAttribute(true)]
        public virtual bool IntervalDataMeter
        {
            get
            {
                return this._intervalDataMeter;
            }
            set
            {
                if ((this._intervalDataMeter != value))
                {
                    bool old = this._intervalDataMeter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIntervalDataMeterChanging(e);
                    this.OnPropertyChanging("IntervalDataMeter", e, _intervalDataMeterAttribute);
                    this._intervalDataMeter = value;
                    this.OnIntervalDataMeterChanged(e);
                    this.OnPropertyChanged("IntervalDataMeter", e, _intervalDataMeterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The maxRegisterCount property
        /// </summary>
        [XmlElementNameAttribute("maxRegisterCount")]
        [XmlAttributeAttribute(true)]
        public virtual int MaxRegisterCount
        {
            get
            {
                return this._maxRegisterCount;
            }
            set
            {
                if ((this._maxRegisterCount != value))
                {
                    int old = this._maxRegisterCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxRegisterCountChanging(e);
                    this.OnPropertyChanging("MaxRegisterCount", e, _maxRegisterCountAttribute);
                    this._maxRegisterCount = value;
                    this.OnMaxRegisterCountChanged(e);
                    this.OnPropertyChanged("MaxRegisterCount", e, _maxRegisterCountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The kVAhMeter property
        /// </summary>
        [XmlElementNameAttribute("kVAhMeter")]
        [XmlAttributeAttribute(true)]
        public virtual bool KVAhMeter
        {
            get
            {
                return this._kVAhMeter;
            }
            set
            {
                if ((this._kVAhMeter != value))
                {
                    bool old = this._kVAhMeter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKVAhMeterChanging(e);
                    this.OnPropertyChanging("KVAhMeter", e, _kVAhMeterAttribute);
                    this._kVAhMeter = value;
                    this.OnKVAhMeterChanged(e);
                    this.OnPropertyChanged("KVAhMeter", e, _kVAhMeterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The wireCount property
        /// </summary>
        [XmlElementNameAttribute("wireCount")]
        [XmlAttributeAttribute(true)]
        public virtual int WireCount
        {
            get
            {
                return this._wireCount;
            }
            set
            {
                if ((this._wireCount != value))
                {
                    int old = this._wireCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWireCountChanging(e);
                    this.OnPropertyChanging("WireCount", e, _wireCountAttribute);
                    this._wireCount = value;
                    this.OnWireCountChanged(e);
                    this.OnPropertyChanged("WireCount", e, _wireCountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The timeOfUseMeter property
        /// </summary>
        [XmlElementNameAttribute("timeOfUseMeter")]
        [XmlAttributeAttribute(true)]
        public virtual bool TimeOfUseMeter
        {
            get
            {
                return this._timeOfUseMeter;
            }
            set
            {
                if ((this._timeOfUseMeter != value))
                {
                    bool old = this._timeOfUseMeter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeOfUseMeterChanging(e);
                    this.OnPropertyChanging("TimeOfUseMeter", e, _timeOfUseMeterAttribute);
                    this._timeOfUseMeter = value;
                    this.OnTimeOfUseMeterChanged(e);
                    this.OnPropertyChanged("TimeOfUseMeter", e, _timeOfUseMeterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The demandMeter property
        /// </summary>
        [XmlElementNameAttribute("demandMeter")]
        [XmlAttributeAttribute(true)]
        public virtual bool DemandMeter
        {
            get
            {
                return this._demandMeter;
            }
            set
            {
                if ((this._demandMeter != value))
                {
                    bool old = this._demandMeter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDemandMeterChanging(e);
                    this.OnPropertyChanging("DemandMeter", e, _demandMeterAttribute);
                    this._demandMeter = value;
                    this.OnDemandMeterChanged(e);
                    this.OnPropertyChanged("DemandMeter", e, _demandMeterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The reactiveMeter property
        /// </summary>
        [XmlElementNameAttribute("reactiveMeter")]
        [XmlAttributeAttribute(true)]
        public virtual bool ReactiveMeter
        {
            get
            {
                return this._reactiveMeter;
            }
            set
            {
                if ((this._reactiveMeter != value))
                {
                    bool old = this._reactiveMeter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactiveMeterChanging(e);
                    this.OnPropertyChanging("ReactiveMeter", e, _reactiveMeterAttribute);
                    this._reactiveMeter = value;
                    this.OnReactiveMeterChanged(e);
                    this.OnPropertyChanged("ReactiveMeter", e, _reactiveMeterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The form property
        /// </summary>
        [XmlElementNameAttribute("form")]
        [XmlAttributeAttribute(true)]
        public virtual string Form
        {
            get
            {
                return this._form;
            }
            set
            {
                if ((this._form != value))
                {
                    string old = this._form;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFormChanging(e);
                    this.OnPropertyChanging("Form", e, _formAttribute);
                    this._form = value;
                    this.OnFormChanged(e);
                    this.OnPropertyChanged("Form", e, _formAttribute);
                }
            }
        }
        
        /// <summary>
        /// The registerRatio property
        /// </summary>
        [XmlElementNameAttribute("registerRatio")]
        [XmlAttributeAttribute(true)]
        public virtual float RegisterRatio
        {
            get
            {
                return this._registerRatio;
            }
            set
            {
                if ((this._registerRatio != value))
                {
                    float old = this._registerRatio;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRegisterRatioChanging(e);
                    this.OnPropertyChanging("RegisterRatio", e, _registerRatioAttribute);
                    this._registerRatio = value;
                    this.OnRegisterRatioChanged(e);
                    this.OnPropertyChanged("RegisterRatio", e, _registerRatioAttribute);
                }
            }
        }
        
        /// <summary>
        /// The kwhMeter property
        /// </summary>
        [XmlElementNameAttribute("kwhMeter")]
        [XmlAttributeAttribute(true)]
        public virtual bool KwhMeter
        {
            get
            {
                return this._kwhMeter;
            }
            set
            {
                if ((this._kwhMeter != value))
                {
                    bool old = this._kwhMeter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKwhMeterChanging(e);
                    this.OnPropertyChanging("KwhMeter", e, _kwhMeterAttribute);
                    this._kwhMeter = value;
                    this.OnKwhMeterChanged(e);
                    this.OnPropertyChanged("KwhMeter", e, _kwhMeterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The qMeter property
        /// </summary>
        [XmlElementNameAttribute("qMeter")]
        [XmlAttributeAttribute(true)]
        public virtual bool QMeter
        {
            get
            {
                return this._qMeter;
            }
            set
            {
                if ((this._qMeter != value))
                {
                    bool old = this._qMeter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQMeterChanging(e);
                    this.OnPropertyChanging("QMeter", e, _qMeterAttribute);
                    this._qMeter = value;
                    this.OnQMeterChanged(e);
                    this.OnPropertyChanged("QMeter", e, _qMeterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The loadProfileMeter property
        /// </summary>
        [XmlElementNameAttribute("loadProfileMeter")]
        [XmlAttributeAttribute(true)]
        public virtual bool LoadProfileMeter
        {
            get
            {
                return this._loadProfileMeter;
            }
            set
            {
                if ((this._loadProfileMeter != value))
                {
                    bool old = this._loadProfileMeter;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLoadProfileMeterChanging(e);
                    this.OnPropertyChanging("LoadProfileMeter", e, _loadProfileMeterAttribute);
                    this._loadProfileMeter = value;
                    this.OnLoadProfileMeterChanged(e);
                    this.OnPropertyChanged("LoadProfileMeter", e, _loadProfileMeterAttribute);
                }
            }
        }
        
        /// <summary>
        /// The MeterAssets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MeterAssetModel")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMeterAsset> MeterAssets
        {
            get
            {
                return this._meterAssets;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MeterAssetModelReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssetModels/Me" +
                            "terAssetModel")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the KH property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KHChanging;
        
        /// <summary>
        /// Gets fired when the KH property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KHChanged;
        
        /// <summary>
        /// Gets fired before the IntervalDataMeter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IntervalDataMeterChanging;
        
        /// <summary>
        /// Gets fired when the IntervalDataMeter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IntervalDataMeterChanged;
        
        /// <summary>
        /// Gets fired before the MaxRegisterCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxRegisterCountChanging;
        
        /// <summary>
        /// Gets fired when the MaxRegisterCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxRegisterCountChanged;
        
        /// <summary>
        /// Gets fired before the KVAhMeter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KVAhMeterChanging;
        
        /// <summary>
        /// Gets fired when the KVAhMeter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KVAhMeterChanged;
        
        /// <summary>
        /// Gets fired before the WireCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WireCountChanging;
        
        /// <summary>
        /// Gets fired when the WireCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WireCountChanged;
        
        /// <summary>
        /// Gets fired before the TimeOfUseMeter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeOfUseMeterChanging;
        
        /// <summary>
        /// Gets fired when the TimeOfUseMeter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeOfUseMeterChanged;
        
        /// <summary>
        /// Gets fired before the DemandMeter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DemandMeterChanging;
        
        /// <summary>
        /// Gets fired when the DemandMeter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DemandMeterChanged;
        
        /// <summary>
        /// Gets fired before the ReactiveMeter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactiveMeterChanging;
        
        /// <summary>
        /// Gets fired when the ReactiveMeter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactiveMeterChanged;
        
        /// <summary>
        /// Gets fired before the Form property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FormChanging;
        
        /// <summary>
        /// Gets fired when the Form property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FormChanged;
        
        /// <summary>
        /// Gets fired before the RegisterRatio property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegisterRatioChanging;
        
        /// <summary>
        /// Gets fired when the RegisterRatio property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegisterRatioChanged;
        
        /// <summary>
        /// Gets fired before the KwhMeter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KwhMeterChanging;
        
        /// <summary>
        /// Gets fired when the KwhMeter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KwhMeterChanged;
        
        /// <summary>
        /// Gets fired before the QMeter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QMeterChanging;
        
        /// <summary>
        /// Gets fired when the QMeter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QMeterChanged;
        
        /// <summary>
        /// Gets fired before the LoadProfileMeter property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoadProfileMeterChanging;
        
        /// <summary>
        /// Gets fired when the LoadProfileMeter property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoadProfileMeterChanged;
        
        private static ITypedElement RetrieveKHAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterAssetModel.ClassInstance)).Resolve("kH")));
        }
        
        /// <summary>
        /// Raises the KHChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKHChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KHChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KHChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKHChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KHChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIntervalDataMeterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterAssetModel.ClassInstance)).Resolve("intervalDataMeter")));
        }
        
        /// <summary>
        /// Raises the IntervalDataMeterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIntervalDataMeterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IntervalDataMeterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IntervalDataMeterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIntervalDataMeterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IntervalDataMeterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaxRegisterCountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterAssetModel.ClassInstance)).Resolve("maxRegisterCount")));
        }
        
        /// <summary>
        /// Raises the MaxRegisterCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxRegisterCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxRegisterCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxRegisterCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxRegisterCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxRegisterCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveKVAhMeterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterAssetModel.ClassInstance)).Resolve("kVAhMeter")));
        }
        
        /// <summary>
        /// Raises the KVAhMeterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKVAhMeterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KVAhMeterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KVAhMeterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKVAhMeterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KVAhMeterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveWireCountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterAssetModel.ClassInstance)).Resolve("wireCount")));
        }
        
        /// <summary>
        /// Raises the WireCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWireCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WireCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WireCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWireCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WireCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTimeOfUseMeterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterAssetModel.ClassInstance)).Resolve("timeOfUseMeter")));
        }
        
        /// <summary>
        /// Raises the TimeOfUseMeterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeOfUseMeterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeOfUseMeterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeOfUseMeterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeOfUseMeterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeOfUseMeterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDemandMeterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterAssetModel.ClassInstance)).Resolve("demandMeter")));
        }
        
        /// <summary>
        /// Raises the DemandMeterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDemandMeterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DemandMeterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DemandMeterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDemandMeterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DemandMeterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactiveMeterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterAssetModel.ClassInstance)).Resolve("reactiveMeter")));
        }
        
        /// <summary>
        /// Raises the ReactiveMeterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactiveMeterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactiveMeterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactiveMeterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactiveMeterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactiveMeterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFormAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterAssetModel.ClassInstance)).Resolve("form")));
        }
        
        /// <summary>
        /// Raises the FormChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFormChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FormChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FormChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFormChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FormChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRegisterRatioAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterAssetModel.ClassInstance)).Resolve("registerRatio")));
        }
        
        /// <summary>
        /// Raises the RegisterRatioChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegisterRatioChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegisterRatioChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RegisterRatioChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegisterRatioChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegisterRatioChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveKwhMeterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterAssetModel.ClassInstance)).Resolve("kwhMeter")));
        }
        
        /// <summary>
        /// Raises the KwhMeterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKwhMeterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KwhMeterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KwhMeterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKwhMeterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KwhMeterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveQMeterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterAssetModel.ClassInstance)).Resolve("qMeter")));
        }
        
        /// <summary>
        /// Raises the QMeterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQMeterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QMeterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QMeterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQMeterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QMeterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLoadProfileMeterAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterAssetModel.ClassInstance)).Resolve("loadProfileMeter")));
        }
        
        /// <summary>
        /// Raises the LoadProfileMeterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoadProfileMeterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoadProfileMeterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LoadProfileMeterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoadProfileMeterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoadProfileMeterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMeterAssetsReference()
        {
            return ((ITypedElement)(((ModelElement)(MeterAssetModel.ClassInstance)).Resolve("MeterAssets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MeterAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeterAssetsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("MeterAssets", e, _meterAssetsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MeterAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeterAssetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MeterAssets", e, _meterAssetsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "KH"))
            {
                return this.KH;
            }
            if ((attribute == "INTERVALDATAMETER"))
            {
                return this.IntervalDataMeter;
            }
            if ((attribute == "MAXREGISTERCOUNT"))
            {
                return this.MaxRegisterCount;
            }
            if ((attribute == "KVAHMETER"))
            {
                return this.KVAhMeter;
            }
            if ((attribute == "WIRECOUNT"))
            {
                return this.WireCount;
            }
            if ((attribute == "TIMEOFUSEMETER"))
            {
                return this.TimeOfUseMeter;
            }
            if ((attribute == "DEMANDMETER"))
            {
                return this.DemandMeter;
            }
            if ((attribute == "REACTIVEMETER"))
            {
                return this.ReactiveMeter;
            }
            if ((attribute == "FORM"))
            {
                return this.Form;
            }
            if ((attribute == "REGISTERRATIO"))
            {
                return this.RegisterRatio;
            }
            if ((attribute == "KWHMETER"))
            {
                return this.KwhMeter;
            }
            if ((attribute == "QMETER"))
            {
                return this.QMeter;
            }
            if ((attribute == "LOADPROFILEMETER"))
            {
                return this.LoadProfileMeter;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "METERASSETS"))
            {
                return this._meterAssets;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "KH"))
            {
                this.KH = ((float)(value));
                return;
            }
            if ((feature == "INTERVALDATAMETER"))
            {
                this.IntervalDataMeter = ((bool)(value));
                return;
            }
            if ((feature == "MAXREGISTERCOUNT"))
            {
                this.MaxRegisterCount = ((int)(value));
                return;
            }
            if ((feature == "KVAHMETER"))
            {
                this.KVAhMeter = ((bool)(value));
                return;
            }
            if ((feature == "WIRECOUNT"))
            {
                this.WireCount = ((int)(value));
                return;
            }
            if ((feature == "TIMEOFUSEMETER"))
            {
                this.TimeOfUseMeter = ((bool)(value));
                return;
            }
            if ((feature == "DEMANDMETER"))
            {
                this.DemandMeter = ((bool)(value));
                return;
            }
            if ((feature == "REACTIVEMETER"))
            {
                this.ReactiveMeter = ((bool)(value));
                return;
            }
            if ((feature == "FORM"))
            {
                this.Form = ((string)(value));
                return;
            }
            if ((feature == "REGISTERRATIO"))
            {
                this.RegisterRatio = ((float)(value));
                return;
            }
            if ((feature == "KWHMETER"))
            {
                this.KwhMeter = ((bool)(value));
                return;
            }
            if ((feature == "QMETER"))
            {
                this.QMeter = ((bool)(value));
                return;
            }
            if ((feature == "LOADPROFILEMETER"))
            {
                this.LoadProfileMeter = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssetModels/Me" +
                        "terAssetModel")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MeterAssetModel class
        /// </summary>
        public class MeterAssetModelReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private MeterAssetModel _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MeterAssetModelReferencedElementsCollection(MeterAssetModel parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.MeterAssets.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.MeterAssets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.MeterAssets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IMeterAsset meterAssetsCasted = item.As<IMeterAsset>();
                if ((meterAssetsCasted != null))
                {
                    this._parent.MeterAssets.Add(meterAssetsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.MeterAssets.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.MeterAssets.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> meterAssetsEnumerator = this._parent.MeterAssets.GetEnumerator();
                try
                {
                    for (
                    ; meterAssetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = meterAssetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    meterAssetsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IMeterAsset meterAssetItem = item.As<IMeterAsset>();
                if (((meterAssetItem != null) 
                            && this._parent.MeterAssets.Remove(meterAssetItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.MeterAssets).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kH property
        /// </summary>
        private sealed class KHProxy : ModelPropertyChange<IMeterAssetModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KHProxy(IMeterAssetModel modelElement) : 
                    base(modelElement, "kH")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.KH;
                }
                set
                {
                    this.ModelElement.KH = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the intervalDataMeter property
        /// </summary>
        private sealed class IntervalDataMeterProxy : ModelPropertyChange<IMeterAssetModel, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IntervalDataMeterProxy(IMeterAssetModel modelElement) : 
                    base(modelElement, "intervalDataMeter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IntervalDataMeter;
                }
                set
                {
                    this.ModelElement.IntervalDataMeter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maxRegisterCount property
        /// </summary>
        private sealed class MaxRegisterCountProxy : ModelPropertyChange<IMeterAssetModel, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxRegisterCountProxy(IMeterAssetModel modelElement) : 
                    base(modelElement, "maxRegisterCount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.MaxRegisterCount;
                }
                set
                {
                    this.ModelElement.MaxRegisterCount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kVAhMeter property
        /// </summary>
        private sealed class KVAhMeterProxy : ModelPropertyChange<IMeterAssetModel, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KVAhMeterProxy(IMeterAssetModel modelElement) : 
                    base(modelElement, "kVAhMeter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.KVAhMeter;
                }
                set
                {
                    this.ModelElement.KVAhMeter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the wireCount property
        /// </summary>
        private sealed class WireCountProxy : ModelPropertyChange<IMeterAssetModel, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WireCountProxy(IMeterAssetModel modelElement) : 
                    base(modelElement, "wireCount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.WireCount;
                }
                set
                {
                    this.ModelElement.WireCount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the timeOfUseMeter property
        /// </summary>
        private sealed class TimeOfUseMeterProxy : ModelPropertyChange<IMeterAssetModel, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeOfUseMeterProxy(IMeterAssetModel modelElement) : 
                    base(modelElement, "timeOfUseMeter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.TimeOfUseMeter;
                }
                set
                {
                    this.ModelElement.TimeOfUseMeter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the demandMeter property
        /// </summary>
        private sealed class DemandMeterProxy : ModelPropertyChange<IMeterAssetModel, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DemandMeterProxy(IMeterAssetModel modelElement) : 
                    base(modelElement, "demandMeter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.DemandMeter;
                }
                set
                {
                    this.ModelElement.DemandMeter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the reactiveMeter property
        /// </summary>
        private sealed class ReactiveMeterProxy : ModelPropertyChange<IMeterAssetModel, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactiveMeterProxy(IMeterAssetModel modelElement) : 
                    base(modelElement, "reactiveMeter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.ReactiveMeter;
                }
                set
                {
                    this.ModelElement.ReactiveMeter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the form property
        /// </summary>
        private sealed class FormProxy : ModelPropertyChange<IMeterAssetModel, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FormProxy(IMeterAssetModel modelElement) : 
                    base(modelElement, "form")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Form;
                }
                set
                {
                    this.ModelElement.Form = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the registerRatio property
        /// </summary>
        private sealed class RegisterRatioProxy : ModelPropertyChange<IMeterAssetModel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RegisterRatioProxy(IMeterAssetModel modelElement) : 
                    base(modelElement, "registerRatio")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RegisterRatio;
                }
                set
                {
                    this.ModelElement.RegisterRatio = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kwhMeter property
        /// </summary>
        private sealed class KwhMeterProxy : ModelPropertyChange<IMeterAssetModel, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KwhMeterProxy(IMeterAssetModel modelElement) : 
                    base(modelElement, "kwhMeter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.KwhMeter;
                }
                set
                {
                    this.ModelElement.KwhMeter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the qMeter property
        /// </summary>
        private sealed class QMeterProxy : ModelPropertyChange<IMeterAssetModel, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QMeterProxy(IMeterAssetModel modelElement) : 
                    base(modelElement, "qMeter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.QMeter;
                }
                set
                {
                    this.ModelElement.QMeter = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the loadProfileMeter property
        /// </summary>
        private sealed class LoadProfileMeterProxy : ModelPropertyChange<IMeterAssetModel, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LoadProfileMeterProxy(IMeterAssetModel modelElement) : 
                    base(modelElement, "loadProfileMeter")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.LoadProfileMeter;
                }
                set
                {
                    this.ModelElement.LoadProfileMeter = value;
                }
            }
        }
    }
}

