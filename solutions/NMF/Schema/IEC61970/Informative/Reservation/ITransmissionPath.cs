using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation
{
    
    
    /// <summary>
    /// The public interface for TransmissionPath
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(TransmissionPath))]
    [XmlDefaultImplementationTypeAttribute(typeof(TransmissionPath))]
    public interface ITransmissionPath : IModelElement, IElement
    {
        
        /// <summary>
        /// The availTransferCapability property
        /// </summary>
        float AvailTransferCapability
        {
            get;
            set;
        }
        
        /// <summary>
        /// The parallelPathFlag property
        /// </summary>
        bool ParallelPathFlag
        {
            get;
            set;
        }
        
        /// <summary>
        /// The totalTransferCapability property
        /// </summary>
        float TotalTransferCapability
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DeliveryPointFor property
        /// </summary>
        IServicePoint DeliveryPointFor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The OfferedOn property
        /// </summary>
        IOrderedSetExpression<ITransmissionService> OfferedOn
        {
            get;
        }
        
        /// <summary>
        /// The PointOfReceiptFor property
        /// </summary>
        IServicePoint PointOfReceiptFor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The For property
        /// </summary>
        ITransmissionCorridor For
        {
            get;
            set;
        }
        
        /// <summary>
        /// The LocatedOn property
        /// </summary>
        IOrderedSetExpression<ITransmissionProduct> LocatedOn
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the AvailTransferCapability property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AvailTransferCapabilityChanging;
        
        /// <summary>
        /// Gets fired when the AvailTransferCapability property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AvailTransferCapabilityChanged;
        
        /// <summary>
        /// Gets fired before the ParallelPathFlag property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ParallelPathFlagChanging;
        
        /// <summary>
        /// Gets fired when the ParallelPathFlag property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ParallelPathFlagChanged;
        
        /// <summary>
        /// Gets fired before the TotalTransferCapability property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TotalTransferCapabilityChanging;
        
        /// <summary>
        /// Gets fired when the TotalTransferCapability property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TotalTransferCapabilityChanged;
        
        /// <summary>
        /// Gets fired before the DeliveryPointFor property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DeliveryPointForChanging;
        
        /// <summary>
        /// Gets fired when the DeliveryPointFor property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DeliveryPointForChanged;
        
        /// <summary>
        /// Gets fired before the PointOfReceiptFor property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PointOfReceiptForChanging;
        
        /// <summary>
        /// Gets fired when the PointOfReceiptFor property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PointOfReceiptForChanged;
        
        /// <summary>
        /// Gets fired before the For property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ForChanging;
        
        /// <summary>
        /// Gets fired when the For property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ForChanged;
    }
}

