using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation
{
    
    
    /// <summary>
    /// The default implementation of the ServiceReservation class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Reservation")]
    [XmlNamespacePrefixAttribute("cimReservation")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Reservation/Servi" +
        "ceReservation")]
    [DebuggerDisplayAttribute("ServiceReservation {UUID}")]
    public partial class ServiceReservation : Element, IServiceReservation, IModelElement
    {
        
        private static Lazy<ITypedElement> _holdsReference = new Lazy<ITypedElement>(RetrieveHoldsReference);
        
        /// <summary>
        /// The backing field for the Holds property
        /// </summary>
        private IMarketer _holds;
        
        private static Lazy<ITypedElement> _reserves_TransmissionServiceReference = new Lazy<ITypedElement>(RetrieveReserves_TransmissionServiceReference);
        
        /// <summary>
        /// The backing field for the Reserves_TransmissionService property
        /// </summary>
        private ServiceReservationReserves_TransmissionServiceCollection _reserves_TransmissionService;
        
        private static Lazy<ITypedElement> _reserves_AncillaryServicesReference = new Lazy<ITypedElement>(RetrieveReserves_AncillaryServicesReference);
        
        /// <summary>
        /// The backing field for the Reserves_AncillaryServices property
        /// </summary>
        private ServiceReservationReserves_AncillaryServicesCollection _reserves_AncillaryServices;
        
        private static Lazy<ITypedElement> _resellsReference = new Lazy<ITypedElement>(RetrieveResellsReference);
        
        /// <summary>
        /// The backing field for the Resells property
        /// </summary>
        private IMarketer _resells;
        
        private static Lazy<ITypedElement> _sellsReference = new Lazy<ITypedElement>(RetrieveSellsReference);
        
        /// <summary>
        /// The backing field for the Sells property
        /// </summary>
        private ITransmissionProvider _sells;
        
        private static IClass _classInstance;
        
        public ServiceReservation()
        {
            this._reserves_TransmissionService = new ServiceReservationReserves_TransmissionServiceCollection(this);
            this._reserves_TransmissionService.CollectionChanging += this.Reserves_TransmissionServiceCollectionChanging;
            this._reserves_TransmissionService.CollectionChanged += this.Reserves_TransmissionServiceCollectionChanged;
            this._reserves_AncillaryServices = new ServiceReservationReserves_AncillaryServicesCollection(this);
            this._reserves_AncillaryServices.CollectionChanging += this.Reserves_AncillaryServicesCollectionChanging;
            this._reserves_AncillaryServices.CollectionChanged += this.Reserves_AncillaryServicesCollectionChanged;
        }
        
        /// <summary>
        /// The Holds property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("HeldBy")]
        public virtual IMarketer Holds
        {
            get
            {
                return this._holds;
            }
            set
            {
                if ((this._holds != value))
                {
                    IMarketer old = this._holds;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHoldsChanging(e);
                    this.OnPropertyChanging("Holds", e, _holdsReference);
                    this._holds = value;
                    if ((old != null))
                    {
                        old.HeldBy.Remove(this);
                        old.Deleted -= this.OnResetHolds;
                    }
                    if ((value != null))
                    {
                        value.HeldBy.Add(this);
                        value.Deleted += this.OnResetHolds;
                    }
                    this.OnHoldsChanged(e);
                    this.OnPropertyChanged("Holds", e, _holdsReference);
                }
            }
        }
        
        /// <summary>
        /// The Reserves_TransmissionService property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ReservedBy_ServiceReservation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransmissionService> Reserves_TransmissionService
        {
            get
            {
                return this._reserves_TransmissionService;
            }
        }
        
        /// <summary>
        /// The Reserves_AncillaryServices property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ReservedBy_ServiceReservation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAncillaryService> Reserves_AncillaryServices
        {
            get
            {
                return this._reserves_AncillaryServices;
            }
        }
        
        /// <summary>
        /// The Resells property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ResoldBy")]
        public virtual IMarketer Resells
        {
            get
            {
                return this._resells;
            }
            set
            {
                if ((this._resells != value))
                {
                    IMarketer old = this._resells;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnResellsChanging(e);
                    this.OnPropertyChanging("Resells", e, _resellsReference);
                    this._resells = value;
                    if ((old != null))
                    {
                        old.ResoldBy = null;
                        old.Deleted -= this.OnResetResells;
                    }
                    if ((value != null))
                    {
                        value.ResoldBy = this;
                        value.Deleted += this.OnResetResells;
                    }
                    this.OnResellsChanged(e);
                    this.OnPropertyChanged("Resells", e, _resellsReference);
                }
            }
        }
        
        /// <summary>
        /// The Sells property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SoldBy")]
        public virtual ITransmissionProvider Sells
        {
            get
            {
                return this._sells;
            }
            set
            {
                if ((this._sells != value))
                {
                    ITransmissionProvider old = this._sells;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSellsChanging(e);
                    this.OnPropertyChanging("Sells", e, _sellsReference);
                    this._sells = value;
                    if ((old != null))
                    {
                        old.SoldBy.Remove(this);
                        old.Deleted -= this.OnResetSells;
                    }
                    if ((value != null))
                    {
                        value.SoldBy.Add(this);
                        value.Deleted += this.OnResetSells;
                    }
                    this.OnSellsChanged(e);
                    this.OnPropertyChanged("Sells", e, _sellsReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ServiceReservationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Reservation/Servi" +
                            "ceReservation")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Holds property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HoldsChanging;
        
        /// <summary>
        /// Gets fired when the Holds property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HoldsChanged;
        
        /// <summary>
        /// Gets fired before the Resells property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ResellsChanging;
        
        /// <summary>
        /// Gets fired when the Resells property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ResellsChanged;
        
        /// <summary>
        /// Gets fired before the Sells property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SellsChanging;
        
        /// <summary>
        /// Gets fired when the Sells property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SellsChanged;
        
        private static ITypedElement RetrieveHoldsReference()
        {
            return ((ITypedElement)(((ModelElement)(ServiceReservation.ClassInstance)).Resolve("Holds")));
        }
        
        /// <summary>
        /// Raises the HoldsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHoldsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HoldsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HoldsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHoldsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HoldsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Holds property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHolds(object sender, System.EventArgs eventArgs)
        {
            this.Holds = null;
        }
        
        private static ITypedElement RetrieveReserves_TransmissionServiceReference()
        {
            return ((ITypedElement)(((ModelElement)(ServiceReservation.ClassInstance)).Resolve("Reserves_TransmissionService")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Reserves_TransmissionService property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Reserves_TransmissionServiceCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Reserves_TransmissionService", e, _reserves_TransmissionServiceReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Reserves_TransmissionService property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Reserves_TransmissionServiceCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Reserves_TransmissionService", e, _reserves_TransmissionServiceReference);
        }
        
        private static ITypedElement RetrieveReserves_AncillaryServicesReference()
        {
            return ((ITypedElement)(((ModelElement)(ServiceReservation.ClassInstance)).Resolve("Reserves_AncillaryServices")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Reserves_AncillaryServices property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Reserves_AncillaryServicesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Reserves_AncillaryServices", e, _reserves_AncillaryServicesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Reserves_AncillaryServices property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Reserves_AncillaryServicesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Reserves_AncillaryServices", e, _reserves_AncillaryServicesReference);
        }
        
        private static ITypedElement RetrieveResellsReference()
        {
            return ((ITypedElement)(((ModelElement)(ServiceReservation.ClassInstance)).Resolve("Resells")));
        }
        
        /// <summary>
        /// Raises the ResellsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResellsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ResellsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ResellsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResellsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ResellsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Resells property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetResells(object sender, System.EventArgs eventArgs)
        {
            this.Resells = null;
        }
        
        private static ITypedElement RetrieveSellsReference()
        {
            return ((ITypedElement)(((ModelElement)(ServiceReservation.ClassInstance)).Resolve("Sells")));
        }
        
        /// <summary>
        /// Raises the SellsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSellsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SellsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SellsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSellsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SellsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Sells property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSells(object sender, System.EventArgs eventArgs)
        {
            this.Sells = null;
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "RESERVES_TRANSMISSIONSERVICE"))
            {
                return this._reserves_TransmissionService;
            }
            if ((feature == "RESERVES_ANCILLARYSERVICES"))
            {
                return this._reserves_AncillaryServices;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "HOLDS"))
            {
                this.Holds = ((IMarketer)(value));
                return;
            }
            if ((feature == "RESELLS"))
            {
                this.Resells = ((IMarketer)(value));
                return;
            }
            if ((feature == "SELLS"))
            {
                this.Sells = ((ITransmissionProvider)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Holds"))
            {
                return new HoldsProxy(this);
            }
            if ((attribute == "Resells"))
            {
                return new ResellsProxy(this);
            }
            if ((attribute == "Sells"))
            {
                return new SellsProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Holds"))
            {
                return new HoldsProxy(this);
            }
            if ((reference == "Resells"))
            {
                return new ResellsProxy(this);
            }
            if ((reference == "Sells"))
            {
                return new SellsProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Reservation/Servi" +
                        "ceReservation")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ServiceReservation class
        /// </summary>
        public class ServiceReservationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ServiceReservation _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ServiceReservationReferencedElementsCollection(ServiceReservation parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Holds != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Reserves_TransmissionService.Count);
                    count = (count + this._parent.Reserves_AncillaryServices.Count);
                    if ((this._parent.Resells != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Sells != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.HoldsChanged += this.PropagateValueChanges;
                this._parent.Reserves_TransmissionService.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Reserves_AncillaryServices.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ResellsChanged += this.PropagateValueChanges;
                this._parent.SellsChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.HoldsChanged -= this.PropagateValueChanges;
                this._parent.Reserves_TransmissionService.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Reserves_AncillaryServices.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ResellsChanged -= this.PropagateValueChanges;
                this._parent.SellsChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Holds == null))
                {
                    IMarketer holdsCasted = item.As<IMarketer>();
                    if ((holdsCasted != null))
                    {
                        this._parent.Holds = holdsCasted;
                        return;
                    }
                }
                ITransmissionService reserves_TransmissionServiceCasted = item.As<ITransmissionService>();
                if ((reserves_TransmissionServiceCasted != null))
                {
                    this._parent.Reserves_TransmissionService.Add(reserves_TransmissionServiceCasted);
                }
                IAncillaryService reserves_AncillaryServicesCasted = item.As<IAncillaryService>();
                if ((reserves_AncillaryServicesCasted != null))
                {
                    this._parent.Reserves_AncillaryServices.Add(reserves_AncillaryServicesCasted);
                }
                if ((this._parent.Resells == null))
                {
                    IMarketer resellsCasted = item.As<IMarketer>();
                    if ((resellsCasted != null))
                    {
                        this._parent.Resells = resellsCasted;
                        return;
                    }
                }
                if ((this._parent.Sells == null))
                {
                    ITransmissionProvider sellsCasted = item.As<ITransmissionProvider>();
                    if ((sellsCasted != null))
                    {
                        this._parent.Sells = sellsCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Holds = null;
                this._parent.Reserves_TransmissionService.Clear();
                this._parent.Reserves_AncillaryServices.Clear();
                this._parent.Resells = null;
                this._parent.Sells = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Holds))
                {
                    return true;
                }
                if (this._parent.Reserves_TransmissionService.Contains(item))
                {
                    return true;
                }
                if (this._parent.Reserves_AncillaryServices.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Resells))
                {
                    return true;
                }
                if ((item == this._parent.Sells))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Holds != null))
                {
                    array[arrayIndex] = this._parent.Holds;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> reserves_TransmissionServiceEnumerator = this._parent.Reserves_TransmissionService.GetEnumerator();
                try
                {
                    for (
                    ; reserves_TransmissionServiceEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = reserves_TransmissionServiceEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    reserves_TransmissionServiceEnumerator.Dispose();
                }
                IEnumerator<IModelElement> reserves_AncillaryServicesEnumerator = this._parent.Reserves_AncillaryServices.GetEnumerator();
                try
                {
                    for (
                    ; reserves_AncillaryServicesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = reserves_AncillaryServicesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    reserves_AncillaryServicesEnumerator.Dispose();
                }
                if ((this._parent.Resells != null))
                {
                    array[arrayIndex] = this._parent.Resells;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Sells != null))
                {
                    array[arrayIndex] = this._parent.Sells;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Holds == item))
                {
                    this._parent.Holds = null;
                    return true;
                }
                ITransmissionService transmissionServiceItem = item.As<ITransmissionService>();
                if (((transmissionServiceItem != null) 
                            && this._parent.Reserves_TransmissionService.Remove(transmissionServiceItem)))
                {
                    return true;
                }
                IAncillaryService ancillaryServiceItem = item.As<IAncillaryService>();
                if (((ancillaryServiceItem != null) 
                            && this._parent.Reserves_AncillaryServices.Remove(ancillaryServiceItem)))
                {
                    return true;
                }
                if ((this._parent.Resells == item))
                {
                    this._parent.Resells = null;
                    return true;
                }
                if ((this._parent.Sells == item))
                {
                    this._parent.Sells = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Holds).Concat(this._parent.Reserves_TransmissionService).Concat(this._parent.Reserves_AncillaryServices).Concat(this._parent.Resells).Concat(this._parent.Sells).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Holds property
        /// </summary>
        private sealed class HoldsProxy : ModelPropertyChange<IServiceReservation, IMarketer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HoldsProxy(IServiceReservation modelElement) : 
                    base(modelElement, "Holds")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMarketer Value
            {
                get
                {
                    return this.ModelElement.Holds;
                }
                set
                {
                    this.ModelElement.Holds = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Resells property
        /// </summary>
        private sealed class ResellsProxy : ModelPropertyChange<IServiceReservation, IMarketer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ResellsProxy(IServiceReservation modelElement) : 
                    base(modelElement, "Resells")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMarketer Value
            {
                get
                {
                    return this.ModelElement.Resells;
                }
                set
                {
                    this.ModelElement.Resells = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Sells property
        /// </summary>
        private sealed class SellsProxy : ModelPropertyChange<IServiceReservation, ITransmissionProvider>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SellsProxy(IServiceReservation modelElement) : 
                    base(modelElement, "Sells")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITransmissionProvider Value
            {
                get
                {
                    return this.ModelElement.Sells;
                }
                set
                {
                    this.ModelElement.Sells = value;
                }
            }
        }
    }
}

