using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation
{
    
    
    /// <summary>
    /// The default implementation of the AncillaryService class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Reservation")]
    [XmlNamespacePrefixAttribute("cimReservation")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Reservation/Ancil" +
        "laryService")]
    [DebuggerDisplayAttribute("AncillaryService {UUID}")]
    public partial class AncillaryService : IdentifiedObject, IAncillaryService, IModelElement
    {
        
        private static Lazy<ITypedElement> _openAccessProductReference = new Lazy<ITypedElement>(RetrieveOpenAccessProductReference);
        
        /// <summary>
        /// The backing field for the OpenAccessProduct property
        /// </summary>
        private IOpenAccessProduct _openAccessProduct;
        
        private static Lazy<ITypedElement> _transmissionProvidersReference = new Lazy<ITypedElement>(RetrieveTransmissionProvidersReference);
        
        /// <summary>
        /// The backing field for the TransmissionProviders property
        /// </summary>
        private AncillaryServiceTransmissionProvidersCollection _transmissionProviders;
        
        private static Lazy<ITypedElement> _reservedBy_ServiceReservationReference = new Lazy<ITypedElement>(RetrieveReservedBy_ServiceReservationReference);
        
        /// <summary>
        /// The backing field for the ReservedBy_ServiceReservation property
        /// </summary>
        private IServiceReservation _reservedBy_ServiceReservation;
        
        private static Lazy<ITypedElement> _controlAreaOperatorReference = new Lazy<ITypedElement>(RetrieveControlAreaOperatorReference);
        
        /// <summary>
        /// The backing field for the ControlAreaOperator property
        /// </summary>
        private IControlAreaOperator _controlAreaOperator;
        
        private static IClass _classInstance;
        
        public AncillaryService()
        {
            this._transmissionProviders = new AncillaryServiceTransmissionProvidersCollection(this);
            this._transmissionProviders.CollectionChanging += this.TransmissionProvidersCollectionChanging;
            this._transmissionProviders.CollectionChanged += this.TransmissionProvidersCollectionChanged;
        }
        
        /// <summary>
        /// The OpenAccessProduct property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AncillaryServices")]
        public virtual IOpenAccessProduct OpenAccessProduct
        {
            get
            {
                return this._openAccessProduct;
            }
            set
            {
                if ((this._openAccessProduct != value))
                {
                    IOpenAccessProduct old = this._openAccessProduct;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOpenAccessProductChanging(e);
                    this.OnPropertyChanging("OpenAccessProduct", e, _openAccessProductReference);
                    this._openAccessProduct = value;
                    if ((old != null))
                    {
                        old.AncillaryServices.Remove(this);
                        old.Deleted -= this.OnResetOpenAccessProduct;
                    }
                    if ((value != null))
                    {
                        value.AncillaryServices.Add(this);
                        value.Deleted += this.OnResetOpenAccessProduct;
                    }
                    this.OnOpenAccessProductChanged(e);
                    this.OnPropertyChanged("OpenAccessProduct", e, _openAccessProductReference);
                }
            }
        }
        
        /// <summary>
        /// The TransmissionProviders property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AncillaryServices")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransmissionProvider> TransmissionProviders
        {
            get
            {
                return this._transmissionProviders;
            }
        }
        
        /// <summary>
        /// The ReservedBy_ServiceReservation property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Reserves_AncillaryServices")]
        public virtual IServiceReservation ReservedBy_ServiceReservation
        {
            get
            {
                return this._reservedBy_ServiceReservation;
            }
            set
            {
                if ((this._reservedBy_ServiceReservation != value))
                {
                    IServiceReservation old = this._reservedBy_ServiceReservation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReservedBy_ServiceReservationChanging(e);
                    this.OnPropertyChanging("ReservedBy_ServiceReservation", e, _reservedBy_ServiceReservationReference);
                    this._reservedBy_ServiceReservation = value;
                    if ((old != null))
                    {
                        old.Reserves_AncillaryServices.Remove(this);
                        old.Deleted -= this.OnResetReservedBy_ServiceReservation;
                    }
                    if ((value != null))
                    {
                        value.Reserves_AncillaryServices.Add(this);
                        value.Deleted += this.OnResetReservedBy_ServiceReservation;
                    }
                    this.OnReservedBy_ServiceReservationChanged(e);
                    this.OnPropertyChanged("ReservedBy_ServiceReservation", e, _reservedBy_ServiceReservationReference);
                }
            }
        }
        
        /// <summary>
        /// The ControlAreaOperator property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AncillaryService")]
        public virtual IControlAreaOperator ControlAreaOperator
        {
            get
            {
                return this._controlAreaOperator;
            }
            set
            {
                if ((this._controlAreaOperator != value))
                {
                    IControlAreaOperator old = this._controlAreaOperator;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnControlAreaOperatorChanging(e);
                    this.OnPropertyChanging("ControlAreaOperator", e, _controlAreaOperatorReference);
                    this._controlAreaOperator = value;
                    if ((old != null))
                    {
                        old.AncillaryService.Remove(this);
                        old.Deleted -= this.OnResetControlAreaOperator;
                    }
                    if ((value != null))
                    {
                        value.AncillaryService.Add(this);
                        value.Deleted += this.OnResetControlAreaOperator;
                    }
                    this.OnControlAreaOperatorChanged(e);
                    this.OnPropertyChanged("ControlAreaOperator", e, _controlAreaOperatorReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AncillaryServiceReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Reservation/Ancil" +
                            "laryService")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the OpenAccessProduct property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpenAccessProductChanging;
        
        /// <summary>
        /// Gets fired when the OpenAccessProduct property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OpenAccessProductChanged;
        
        /// <summary>
        /// Gets fired before the ReservedBy_ServiceReservation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReservedBy_ServiceReservationChanging;
        
        /// <summary>
        /// Gets fired when the ReservedBy_ServiceReservation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReservedBy_ServiceReservationChanged;
        
        /// <summary>
        /// Gets fired before the ControlAreaOperator property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ControlAreaOperatorChanging;
        
        /// <summary>
        /// Gets fired when the ControlAreaOperator property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ControlAreaOperatorChanged;
        
        private static ITypedElement RetrieveOpenAccessProductReference()
        {
            return ((ITypedElement)(((ModelElement)(AncillaryService.ClassInstance)).Resolve("OpenAccessProduct")));
        }
        
        /// <summary>
        /// Raises the OpenAccessProductChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpenAccessProductChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpenAccessProductChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OpenAccessProductChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOpenAccessProductChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OpenAccessProductChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OpenAccessProduct property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOpenAccessProduct(object sender, System.EventArgs eventArgs)
        {
            this.OpenAccessProduct = null;
        }
        
        private static ITypedElement RetrieveTransmissionProvidersReference()
        {
            return ((ITypedElement)(((ModelElement)(AncillaryService.ClassInstance)).Resolve("TransmissionProviders")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TransmissionProviders property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransmissionProvidersCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("TransmissionProviders", e, _transmissionProvidersReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TransmissionProviders property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransmissionProvidersCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TransmissionProviders", e, _transmissionProvidersReference);
        }
        
        private static ITypedElement RetrieveReservedBy_ServiceReservationReference()
        {
            return ((ITypedElement)(((ModelElement)(AncillaryService.ClassInstance)).Resolve("ReservedBy_ServiceReservation")));
        }
        
        /// <summary>
        /// Raises the ReservedBy_ServiceReservationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReservedBy_ServiceReservationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReservedBy_ServiceReservationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReservedBy_ServiceReservationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReservedBy_ServiceReservationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReservedBy_ServiceReservationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ReservedBy_ServiceReservation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReservedBy_ServiceReservation(object sender, System.EventArgs eventArgs)
        {
            this.ReservedBy_ServiceReservation = null;
        }
        
        private static ITypedElement RetrieveControlAreaOperatorReference()
        {
            return ((ITypedElement)(((ModelElement)(AncillaryService.ClassInstance)).Resolve("ControlAreaOperator")));
        }
        
        /// <summary>
        /// Raises the ControlAreaOperatorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnControlAreaOperatorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ControlAreaOperatorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ControlAreaOperatorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnControlAreaOperatorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ControlAreaOperatorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ControlAreaOperator property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetControlAreaOperator(object sender, System.EventArgs eventArgs)
        {
            this.ControlAreaOperator = null;
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "TRANSMISSIONPROVIDERS"))
            {
                return this._transmissionProviders;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OPENACCESSPRODUCT"))
            {
                this.OpenAccessProduct = ((IOpenAccessProduct)(value));
                return;
            }
            if ((feature == "RESERVEDBY_SERVICERESERVATION"))
            {
                this.ReservedBy_ServiceReservation = ((IServiceReservation)(value));
                return;
            }
            if ((feature == "CONTROLAREAOPERATOR"))
            {
                this.ControlAreaOperator = ((IControlAreaOperator)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "OpenAccessProduct"))
            {
                return new OpenAccessProductProxy(this);
            }
            if ((attribute == "ReservedBy_ServiceReservation"))
            {
                return new ReservedBy_ServiceReservationProxy(this);
            }
            if ((attribute == "ControlAreaOperator"))
            {
                return new ControlAreaOperatorProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OpenAccessProduct"))
            {
                return new OpenAccessProductProxy(this);
            }
            if ((reference == "ReservedBy_ServiceReservation"))
            {
                return new ReservedBy_ServiceReservationProxy(this);
            }
            if ((reference == "ControlAreaOperator"))
            {
                return new ControlAreaOperatorProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Reservation/Ancil" +
                        "laryService")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AncillaryService class
        /// </summary>
        public class AncillaryServiceReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AncillaryService _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AncillaryServiceReferencedElementsCollection(AncillaryService parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.OpenAccessProduct != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.TransmissionProviders.Count);
                    if ((this._parent.ReservedBy_ServiceReservation != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ControlAreaOperator != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OpenAccessProductChanged += this.PropagateValueChanges;
                this._parent.TransmissionProviders.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ReservedBy_ServiceReservationChanged += this.PropagateValueChanges;
                this._parent.ControlAreaOperatorChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OpenAccessProductChanged -= this.PropagateValueChanges;
                this._parent.TransmissionProviders.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ReservedBy_ServiceReservationChanged -= this.PropagateValueChanges;
                this._parent.ControlAreaOperatorChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.OpenAccessProduct == null))
                {
                    IOpenAccessProduct openAccessProductCasted = item.As<IOpenAccessProduct>();
                    if ((openAccessProductCasted != null))
                    {
                        this._parent.OpenAccessProduct = openAccessProductCasted;
                        return;
                    }
                }
                ITransmissionProvider transmissionProvidersCasted = item.As<ITransmissionProvider>();
                if ((transmissionProvidersCasted != null))
                {
                    this._parent.TransmissionProviders.Add(transmissionProvidersCasted);
                }
                if ((this._parent.ReservedBy_ServiceReservation == null))
                {
                    IServiceReservation reservedBy_ServiceReservationCasted = item.As<IServiceReservation>();
                    if ((reservedBy_ServiceReservationCasted != null))
                    {
                        this._parent.ReservedBy_ServiceReservation = reservedBy_ServiceReservationCasted;
                        return;
                    }
                }
                if ((this._parent.ControlAreaOperator == null))
                {
                    IControlAreaOperator controlAreaOperatorCasted = item.As<IControlAreaOperator>();
                    if ((controlAreaOperatorCasted != null))
                    {
                        this._parent.ControlAreaOperator = controlAreaOperatorCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OpenAccessProduct = null;
                this._parent.TransmissionProviders.Clear();
                this._parent.ReservedBy_ServiceReservation = null;
                this._parent.ControlAreaOperator = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.OpenAccessProduct))
                {
                    return true;
                }
                if (this._parent.TransmissionProviders.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ReservedBy_ServiceReservation))
                {
                    return true;
                }
                if ((item == this._parent.ControlAreaOperator))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.OpenAccessProduct != null))
                {
                    array[arrayIndex] = this._parent.OpenAccessProduct;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> transmissionProvidersEnumerator = this._parent.TransmissionProviders.GetEnumerator();
                try
                {
                    for (
                    ; transmissionProvidersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = transmissionProvidersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    transmissionProvidersEnumerator.Dispose();
                }
                if ((this._parent.ReservedBy_ServiceReservation != null))
                {
                    array[arrayIndex] = this._parent.ReservedBy_ServiceReservation;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ControlAreaOperator != null))
                {
                    array[arrayIndex] = this._parent.ControlAreaOperator;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.OpenAccessProduct == item))
                {
                    this._parent.OpenAccessProduct = null;
                    return true;
                }
                ITransmissionProvider transmissionProviderItem = item.As<ITransmissionProvider>();
                if (((transmissionProviderItem != null) 
                            && this._parent.TransmissionProviders.Remove(transmissionProviderItem)))
                {
                    return true;
                }
                if ((this._parent.ReservedBy_ServiceReservation == item))
                {
                    this._parent.ReservedBy_ServiceReservation = null;
                    return true;
                }
                if ((this._parent.ControlAreaOperator == item))
                {
                    this._parent.ControlAreaOperator = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OpenAccessProduct).Concat(this._parent.TransmissionProviders).Concat(this._parent.ReservedBy_ServiceReservation).Concat(this._parent.ControlAreaOperator).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OpenAccessProduct property
        /// </summary>
        private sealed class OpenAccessProductProxy : ModelPropertyChange<IAncillaryService, IOpenAccessProduct>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OpenAccessProductProxy(IAncillaryService modelElement) : 
                    base(modelElement, "OpenAccessProduct")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOpenAccessProduct Value
            {
                get
                {
                    return this.ModelElement.OpenAccessProduct;
                }
                set
                {
                    this.ModelElement.OpenAccessProduct = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReservedBy_ServiceReservation property
        /// </summary>
        private sealed class ReservedBy_ServiceReservationProxy : ModelPropertyChange<IAncillaryService, IServiceReservation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReservedBy_ServiceReservationProxy(IAncillaryService modelElement) : 
                    base(modelElement, "ReservedBy_ServiceReservation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IServiceReservation Value
            {
                get
                {
                    return this.ModelElement.ReservedBy_ServiceReservation;
                }
                set
                {
                    this.ModelElement.ReservedBy_ServiceReservation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ControlAreaOperator property
        /// </summary>
        private sealed class ControlAreaOperatorProxy : ModelPropertyChange<IAncillaryService, IControlAreaOperator>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ControlAreaOperatorProxy(IAncillaryService modelElement) : 
                    base(modelElement, "ControlAreaOperator")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IControlAreaOperator Value
            {
                get
                {
                    return this.ModelElement.ControlAreaOperator;
                }
                set
                {
                    this.ModelElement.ControlAreaOperator = value;
                }
            }
        }
    }
}

