//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation
{
    
    
    /// <summary>
    /// The default implementation of the TransmissionPath class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Reservation")]
    [XmlNamespacePrefixAttribute("cimReservation")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Reservation/Trans" +
        "missionPath")]
    [DebuggerDisplayAttribute("TransmissionPath {UUID}")]
    public partial class TransmissionPath : Element, ITransmissionPath, IModelElement
    {
        
        /// <summary>
        /// The backing field for the AvailTransferCapability property
        /// </summary>
        private float _availTransferCapability;
        
        private static Lazy<ITypedElement> _availTransferCapabilityAttribute = new Lazy<ITypedElement>(RetrieveAvailTransferCapabilityAttribute);
        
        /// <summary>
        /// The backing field for the ParallelPathFlag property
        /// </summary>
        private bool _parallelPathFlag;
        
        private static Lazy<ITypedElement> _parallelPathFlagAttribute = new Lazy<ITypedElement>(RetrieveParallelPathFlagAttribute);
        
        /// <summary>
        /// The backing field for the TotalTransferCapability property
        /// </summary>
        private float _totalTransferCapability;
        
        private static Lazy<ITypedElement> _totalTransferCapabilityAttribute = new Lazy<ITypedElement>(RetrieveTotalTransferCapabilityAttribute);
        
        private static Lazy<ITypedElement> _deliveryPointForReference = new Lazy<ITypedElement>(RetrieveDeliveryPointForReference);
        
        /// <summary>
        /// The backing field for the DeliveryPointFor property
        /// </summary>
        private IServicePoint _deliveryPointFor;
        
        private static Lazy<ITypedElement> _offeredOnReference = new Lazy<ITypedElement>(RetrieveOfferedOnReference);
        
        /// <summary>
        /// The backing field for the OfferedOn property
        /// </summary>
        private TransmissionPathOfferedOnCollection _offeredOn;
        
        private static Lazy<ITypedElement> _pointOfReceiptForReference = new Lazy<ITypedElement>(RetrievePointOfReceiptForReference);
        
        /// <summary>
        /// The backing field for the PointOfReceiptFor property
        /// </summary>
        private IServicePoint _pointOfReceiptFor;
        
        private static Lazy<ITypedElement> _forReference = new Lazy<ITypedElement>(RetrieveForReference);
        
        /// <summary>
        /// The backing field for the For property
        /// </summary>
        private ITransmissionCorridor _for;
        
        private static Lazy<ITypedElement> _locatedOnReference = new Lazy<ITypedElement>(RetrieveLocatedOnReference);
        
        /// <summary>
        /// The backing field for the LocatedOn property
        /// </summary>
        private TransmissionPathLocatedOnCollection _locatedOn;
        
        private static IClass _classInstance;
        
        public TransmissionPath()
        {
            this._offeredOn = new TransmissionPathOfferedOnCollection(this);
            this._offeredOn.CollectionChanging += this.OfferedOnCollectionChanging;
            this._offeredOn.CollectionChanged += this.OfferedOnCollectionChanged;
            this._locatedOn = new TransmissionPathLocatedOnCollection(this);
            this._locatedOn.CollectionChanging += this.LocatedOnCollectionChanging;
            this._locatedOn.CollectionChanged += this.LocatedOnCollectionChanged;
        }
        
        /// <summary>
        /// The availTransferCapability property
        /// </summary>
        [XmlElementNameAttribute("availTransferCapability")]
        [XmlAttributeAttribute(true)]
        public virtual float AvailTransferCapability
        {
            get
            {
                return this._availTransferCapability;
            }
            set
            {
                if ((this._availTransferCapability != value))
                {
                    float old = this._availTransferCapability;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAvailTransferCapabilityChanging(e);
                    this.OnPropertyChanging("AvailTransferCapability", e, _availTransferCapabilityAttribute);
                    this._availTransferCapability = value;
                    this.OnAvailTransferCapabilityChanged(e);
                    this.OnPropertyChanged("AvailTransferCapability", e, _availTransferCapabilityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The parallelPathFlag property
        /// </summary>
        [XmlElementNameAttribute("parallelPathFlag")]
        [XmlAttributeAttribute(true)]
        public virtual bool ParallelPathFlag
        {
            get
            {
                return this._parallelPathFlag;
            }
            set
            {
                if ((this._parallelPathFlag != value))
                {
                    bool old = this._parallelPathFlag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnParallelPathFlagChanging(e);
                    this.OnPropertyChanging("ParallelPathFlag", e, _parallelPathFlagAttribute);
                    this._parallelPathFlag = value;
                    this.OnParallelPathFlagChanged(e);
                    this.OnPropertyChanged("ParallelPathFlag", e, _parallelPathFlagAttribute);
                }
            }
        }
        
        /// <summary>
        /// The totalTransferCapability property
        /// </summary>
        [XmlElementNameAttribute("totalTransferCapability")]
        [XmlAttributeAttribute(true)]
        public virtual float TotalTransferCapability
        {
            get
            {
                return this._totalTransferCapability;
            }
            set
            {
                if ((this._totalTransferCapability != value))
                {
                    float old = this._totalTransferCapability;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTotalTransferCapabilityChanging(e);
                    this.OnPropertyChanging("TotalTransferCapability", e, _totalTransferCapabilityAttribute);
                    this._totalTransferCapability = value;
                    this.OnTotalTransferCapabilityChanged(e);
                    this.OnPropertyChanged("TotalTransferCapability", e, _totalTransferCapabilityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The DeliveryPointFor property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("HasAPOD_")]
        public virtual IServicePoint DeliveryPointFor
        {
            get
            {
                return this._deliveryPointFor;
            }
            set
            {
                if ((this._deliveryPointFor != value))
                {
                    IServicePoint old = this._deliveryPointFor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDeliveryPointForChanging(e);
                    this.OnPropertyChanging("DeliveryPointFor", e, _deliveryPointForReference);
                    this._deliveryPointFor = value;
                    if ((old != null))
                    {
                        old.HasAPOD_.Remove(this);
                        old.Deleted -= this.OnResetDeliveryPointFor;
                    }
                    if ((value != null))
                    {
                        value.HasAPOD_.Add(this);
                        value.Deleted += this.OnResetDeliveryPointFor;
                    }
                    this.OnDeliveryPointForChanged(e);
                    this.OnPropertyChanged("DeliveryPointFor", e, _deliveryPointForReference);
                }
            }
        }
        
        /// <summary>
        /// The OfferedOn property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Offering")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransmissionService> OfferedOn
        {
            get
            {
                return this._offeredOn;
            }
        }
        
        /// <summary>
        /// The PointOfReceiptFor property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("HasAPOR_")]
        public virtual IServicePoint PointOfReceiptFor
        {
            get
            {
                return this._pointOfReceiptFor;
            }
            set
            {
                if ((this._pointOfReceiptFor != value))
                {
                    IServicePoint old = this._pointOfReceiptFor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPointOfReceiptForChanging(e);
                    this.OnPropertyChanging("PointOfReceiptFor", e, _pointOfReceiptForReference);
                    this._pointOfReceiptFor = value;
                    if ((old != null))
                    {
                        old.HasAPOR_.Remove(this);
                        old.Deleted -= this.OnResetPointOfReceiptFor;
                    }
                    if ((value != null))
                    {
                        value.HasAPOR_.Add(this);
                        value.Deleted += this.OnResetPointOfReceiptFor;
                    }
                    this.OnPointOfReceiptForChanged(e);
                    this.OnPropertyChanged("PointOfReceiptFor", e, _pointOfReceiptForReference);
                }
            }
        }
        
        /// <summary>
        /// The For property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ContainedIn")]
        public virtual ITransmissionCorridor For
        {
            get
            {
                return this._for;
            }
            set
            {
                if ((this._for != value))
                {
                    ITransmissionCorridor old = this._for;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnForChanging(e);
                    this.OnPropertyChanging("For", e, _forReference);
                    this._for = value;
                    if ((old != null))
                    {
                        old.ContainedIn.Remove(this);
                        old.Deleted -= this.OnResetFor;
                    }
                    if ((value != null))
                    {
                        value.ContainedIn.Add(this);
                        value.Deleted += this.OnResetFor;
                    }
                    this.OnForChanged(e);
                    this.OnPropertyChanged("For", e, _forReference);
                }
            }
        }
        
        /// <summary>
        /// The LocatedOn property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("LocationFor")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransmissionProduct> LocatedOn
        {
            get
            {
                return this._locatedOn;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TransmissionPathReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Reservation/Trans" +
                            "missionPath")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the AvailTransferCapability property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AvailTransferCapabilityChanging;
        
        /// <summary>
        /// Gets fired when the AvailTransferCapability property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AvailTransferCapabilityChanged;
        
        /// <summary>
        /// Gets fired before the ParallelPathFlag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ParallelPathFlagChanging;
        
        /// <summary>
        /// Gets fired when the ParallelPathFlag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ParallelPathFlagChanged;
        
        /// <summary>
        /// Gets fired before the TotalTransferCapability property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotalTransferCapabilityChanging;
        
        /// <summary>
        /// Gets fired when the TotalTransferCapability property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotalTransferCapabilityChanged;
        
        /// <summary>
        /// Gets fired before the DeliveryPointFor property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeliveryPointForChanging;
        
        /// <summary>
        /// Gets fired when the DeliveryPointFor property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeliveryPointForChanged;
        
        /// <summary>
        /// Gets fired before the PointOfReceiptFor property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PointOfReceiptForChanging;
        
        /// <summary>
        /// Gets fired when the PointOfReceiptFor property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PointOfReceiptForChanged;
        
        /// <summary>
        /// Gets fired before the For property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ForChanging;
        
        /// <summary>
        /// Gets fired when the For property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ForChanged;
        
        private static ITypedElement RetrieveAvailTransferCapabilityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransmissionPath.ClassInstance)).Resolve("availTransferCapability")));
        }
        
        /// <summary>
        /// Raises the AvailTransferCapabilityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAvailTransferCapabilityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AvailTransferCapabilityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AvailTransferCapabilityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAvailTransferCapabilityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AvailTransferCapabilityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveParallelPathFlagAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransmissionPath.ClassInstance)).Resolve("parallelPathFlag")));
        }
        
        /// <summary>
        /// Raises the ParallelPathFlagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParallelPathFlagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ParallelPathFlagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ParallelPathFlagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParallelPathFlagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ParallelPathFlagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTotalTransferCapabilityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransmissionPath.ClassInstance)).Resolve("totalTransferCapability")));
        }
        
        /// <summary>
        /// Raises the TotalTransferCapabilityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotalTransferCapabilityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotalTransferCapabilityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TotalTransferCapabilityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotalTransferCapabilityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotalTransferCapabilityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDeliveryPointForReference()
        {
            return ((ITypedElement)(((ModelElement)(TransmissionPath.ClassInstance)).Resolve("DeliveryPointFor")));
        }
        
        /// <summary>
        /// Raises the DeliveryPointForChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeliveryPointForChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeliveryPointForChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DeliveryPointForChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeliveryPointForChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeliveryPointForChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DeliveryPointFor property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDeliveryPointFor(object sender, System.EventArgs eventArgs)
        {
            this.DeliveryPointFor = null;
        }
        
        private static ITypedElement RetrieveOfferedOnReference()
        {
            return ((ITypedElement)(((ModelElement)(TransmissionPath.ClassInstance)).Resolve("OfferedOn")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OfferedOn property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OfferedOnCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("OfferedOn", e, _offeredOnReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OfferedOn property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OfferedOnCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OfferedOn", e, _offeredOnReference);
        }
        
        private static ITypedElement RetrievePointOfReceiptForReference()
        {
            return ((ITypedElement)(((ModelElement)(TransmissionPath.ClassInstance)).Resolve("PointOfReceiptFor")));
        }
        
        /// <summary>
        /// Raises the PointOfReceiptForChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPointOfReceiptForChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PointOfReceiptForChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PointOfReceiptForChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPointOfReceiptForChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PointOfReceiptForChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PointOfReceiptFor property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPointOfReceiptFor(object sender, System.EventArgs eventArgs)
        {
            this.PointOfReceiptFor = null;
        }
        
        private static ITypedElement RetrieveForReference()
        {
            return ((ITypedElement)(((ModelElement)(TransmissionPath.ClassInstance)).Resolve("For")));
        }
        
        /// <summary>
        /// Raises the ForChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnForChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ForChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ForChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnForChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ForChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the For property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFor(object sender, System.EventArgs eventArgs)
        {
            this.For = null;
        }
        
        private static ITypedElement RetrieveLocatedOnReference()
        {
            return ((ITypedElement)(((ModelElement)(TransmissionPath.ClassInstance)).Resolve("LocatedOn")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the LocatedOn property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LocatedOnCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("LocatedOn", e, _locatedOnReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the LocatedOn property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LocatedOnCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("LocatedOn", e, _locatedOnReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "AVAILTRANSFERCAPABILITY"))
            {
                return this.AvailTransferCapability;
            }
            if ((attribute == "PARALLELPATHFLAG"))
            {
                return this.ParallelPathFlag;
            }
            if ((attribute == "TOTALTRANSFERCAPABILITY"))
            {
                return this.TotalTransferCapability;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "OFFEREDON"))
            {
                return this._offeredOn;
            }
            if ((feature == "LOCATEDON"))
            {
                return this._locatedOn;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DELIVERYPOINTFOR"))
            {
                this.DeliveryPointFor = ((IServicePoint)(value));
                return;
            }
            if ((feature == "POINTOFRECEIPTFOR"))
            {
                this.PointOfReceiptFor = ((IServicePoint)(value));
                return;
            }
            if ((feature == "FOR"))
            {
                this.For = ((ITransmissionCorridor)(value));
                return;
            }
            if ((feature == "AVAILTRANSFERCAPABILITY"))
            {
                this.AvailTransferCapability = ((float)(value));
                return;
            }
            if ((feature == "PARALLELPATHFLAG"))
            {
                this.ParallelPathFlag = ((bool)(value));
                return;
            }
            if ((feature == "TOTALTRANSFERCAPABILITY"))
            {
                this.TotalTransferCapability = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "DeliveryPointFor"))
            {
                return new DeliveryPointForProxy(this);
            }
            if ((attribute == "PointOfReceiptFor"))
            {
                return new PointOfReceiptForProxy(this);
            }
            if ((attribute == "For"))
            {
                return new ForProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "DeliveryPointFor"))
            {
                return new DeliveryPointForProxy(this);
            }
            if ((reference == "PointOfReceiptFor"))
            {
                return new PointOfReceiptForProxy(this);
            }
            if ((reference == "For"))
            {
                return new ForProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Reservation/Trans" +
                        "missionPath")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TransmissionPath class
        /// </summary>
        public class TransmissionPathReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TransmissionPath _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TransmissionPathReferencedElementsCollection(TransmissionPath parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.DeliveryPointFor != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.OfferedOn.Count);
                    if ((this._parent.PointOfReceiptFor != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.For != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.LocatedOn.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.DeliveryPointForChanged += this.PropagateValueChanges;
                this._parent.OfferedOn.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PointOfReceiptForChanged += this.PropagateValueChanges;
                this._parent.ForChanged += this.PropagateValueChanges;
                this._parent.LocatedOn.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.DeliveryPointForChanged -= this.PropagateValueChanges;
                this._parent.OfferedOn.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PointOfReceiptForChanged -= this.PropagateValueChanges;
                this._parent.ForChanged -= this.PropagateValueChanges;
                this._parent.LocatedOn.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.DeliveryPointFor == null))
                {
                    IServicePoint deliveryPointForCasted = item.As<IServicePoint>();
                    if ((deliveryPointForCasted != null))
                    {
                        this._parent.DeliveryPointFor = deliveryPointForCasted;
                        return;
                    }
                }
                ITransmissionService offeredOnCasted = item.As<ITransmissionService>();
                if ((offeredOnCasted != null))
                {
                    this._parent.OfferedOn.Add(offeredOnCasted);
                }
                if ((this._parent.PointOfReceiptFor == null))
                {
                    IServicePoint pointOfReceiptForCasted = item.As<IServicePoint>();
                    if ((pointOfReceiptForCasted != null))
                    {
                        this._parent.PointOfReceiptFor = pointOfReceiptForCasted;
                        return;
                    }
                }
                if ((this._parent.For == null))
                {
                    ITransmissionCorridor forCasted = item.As<ITransmissionCorridor>();
                    if ((forCasted != null))
                    {
                        this._parent.For = forCasted;
                        return;
                    }
                }
                ITransmissionProduct locatedOnCasted = item.As<ITransmissionProduct>();
                if ((locatedOnCasted != null))
                {
                    this._parent.LocatedOn.Add(locatedOnCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.DeliveryPointFor = null;
                this._parent.OfferedOn.Clear();
                this._parent.PointOfReceiptFor = null;
                this._parent.For = null;
                this._parent.LocatedOn.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.DeliveryPointFor))
                {
                    return true;
                }
                if (this._parent.OfferedOn.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.PointOfReceiptFor))
                {
                    return true;
                }
                if ((item == this._parent.For))
                {
                    return true;
                }
                if (this._parent.LocatedOn.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.DeliveryPointFor != null))
                {
                    array[arrayIndex] = this._parent.DeliveryPointFor;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> offeredOnEnumerator = this._parent.OfferedOn.GetEnumerator();
                try
                {
                    for (
                    ; offeredOnEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = offeredOnEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    offeredOnEnumerator.Dispose();
                }
                if ((this._parent.PointOfReceiptFor != null))
                {
                    array[arrayIndex] = this._parent.PointOfReceiptFor;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.For != null))
                {
                    array[arrayIndex] = this._parent.For;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> locatedOnEnumerator = this._parent.LocatedOn.GetEnumerator();
                try
                {
                    for (
                    ; locatedOnEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = locatedOnEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    locatedOnEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.DeliveryPointFor == item))
                {
                    this._parent.DeliveryPointFor = null;
                    return true;
                }
                ITransmissionService transmissionServiceItem = item.As<ITransmissionService>();
                if (((transmissionServiceItem != null) 
                            && this._parent.OfferedOn.Remove(transmissionServiceItem)))
                {
                    return true;
                }
                if ((this._parent.PointOfReceiptFor == item))
                {
                    this._parent.PointOfReceiptFor = null;
                    return true;
                }
                if ((this._parent.For == item))
                {
                    this._parent.For = null;
                    return true;
                }
                ITransmissionProduct transmissionProductItem = item.As<ITransmissionProduct>();
                if (((transmissionProductItem != null) 
                            && this._parent.LocatedOn.Remove(transmissionProductItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.DeliveryPointFor).Concat(this._parent.OfferedOn).Concat(this._parent.PointOfReceiptFor).Concat(this._parent.For).Concat(this._parent.LocatedOn).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the availTransferCapability property
        /// </summary>
        private sealed class AvailTransferCapabilityProxy : ModelPropertyChange<ITransmissionPath, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AvailTransferCapabilityProxy(ITransmissionPath modelElement) : 
                    base(modelElement, "availTransferCapability")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.AvailTransferCapability;
                }
                set
                {
                    this.ModelElement.AvailTransferCapability = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the parallelPathFlag property
        /// </summary>
        private sealed class ParallelPathFlagProxy : ModelPropertyChange<ITransmissionPath, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ParallelPathFlagProxy(ITransmissionPath modelElement) : 
                    base(modelElement, "parallelPathFlag")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.ParallelPathFlag;
                }
                set
                {
                    this.ModelElement.ParallelPathFlag = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the totalTransferCapability property
        /// </summary>
        private sealed class TotalTransferCapabilityProxy : ModelPropertyChange<ITransmissionPath, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TotalTransferCapabilityProxy(ITransmissionPath modelElement) : 
                    base(modelElement, "totalTransferCapability")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TotalTransferCapability;
                }
                set
                {
                    this.ModelElement.TotalTransferCapability = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DeliveryPointFor property
        /// </summary>
        private sealed class DeliveryPointForProxy : ModelPropertyChange<ITransmissionPath, IServicePoint>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DeliveryPointForProxy(ITransmissionPath modelElement) : 
                    base(modelElement, "DeliveryPointFor")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IServicePoint Value
            {
                get
                {
                    return this.ModelElement.DeliveryPointFor;
                }
                set
                {
                    this.ModelElement.DeliveryPointFor = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PointOfReceiptFor property
        /// </summary>
        private sealed class PointOfReceiptForProxy : ModelPropertyChange<ITransmissionPath, IServicePoint>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PointOfReceiptForProxy(ITransmissionPath modelElement) : 
                    base(modelElement, "PointOfReceiptFor")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IServicePoint Value
            {
                get
                {
                    return this.ModelElement.PointOfReceiptFor;
                }
                set
                {
                    this.ModelElement.PointOfReceiptFor = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the For property
        /// </summary>
        private sealed class ForProxy : ModelPropertyChange<ITransmissionPath, ITransmissionCorridor>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ForProxy(ITransmissionPath modelElement) : 
                    base(modelElement, "For")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITransmissionCorridor Value
            {
                get
                {
                    return this.ModelElement.For;
                }
                set
                {
                    this.ModelElement.For = value;
                }
            }
        }
    }
}

