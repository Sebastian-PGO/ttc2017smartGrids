using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations
{
    
    
    /// <summary>
    /// The public interface for TroubleTicket
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(TroubleTicket))]
    [XmlDefaultImplementationTypeAttribute(typeof(TroubleTicket))]
    public interface ITroubleTicket : IModelElement, IDocument
    {
        
        /// <summary>
        /// The firstCallDateTime property
        /// </summary>
        DateTime FirstCallDateTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The callBack property
        /// </summary>
        bool CallBack
        {
            get;
            set;
        }
        
        /// <summary>
        /// The estimatedRestoreDateTime property
        /// </summary>
        DateTime EstimatedRestoreDateTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reportingKind property
        /// </summary>
        Nullable<TroubleReportingKind> ReportingKind
        {
            get;
            set;
        }
        
        /// <summary>
        /// The priority property
        /// </summary>
        string Priority
        {
            get;
            set;
        }
        
        /// <summary>
        /// The informBeforeRestored property
        /// </summary>
        bool InformBeforeRestored
        {
            get;
            set;
        }
        
        /// <summary>
        /// The advice property
        /// </summary>
        string Advice
        {
            get;
            set;
        }
        
        /// <summary>
        /// The informAfterRestored property
        /// </summary>
        bool InformAfterRestored
        {
            get;
            set;
        }
        
        /// <summary>
        /// The hazardCode property
        /// </summary>
        string HazardCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The CallBacks property
        /// </summary>
        IOrderedSetExpression<ICallBack> CallBacks
        {
            get;
        }
        
        /// <summary>
        /// The IncidentRecord property
        /// </summary>
        IIncidentRecord IncidentRecord
        {
            get;
            set;
        }
        
        /// <summary>
        /// The CustomerData property
        /// </summary>
        ICustomer CustomerData
        {
            get;
            set;
        }
        
        /// <summary>
        /// The troublePeriod property
        /// </summary>
        IDateTimeInterval TroublePeriod
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the FirstCallDateTime property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FirstCallDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the FirstCallDateTime property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FirstCallDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the CallBack property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CallBackChanging;
        
        /// <summary>
        /// Gets fired when the CallBack property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CallBackChanged;
        
        /// <summary>
        /// Gets fired before the EstimatedRestoreDateTime property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EstimatedRestoreDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the EstimatedRestoreDateTime property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EstimatedRestoreDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the ReportingKind property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReportingKindChanging;
        
        /// <summary>
        /// Gets fired when the ReportingKind property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReportingKindChanged;
        
        /// <summary>
        /// Gets fired before the Priority property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PriorityChanging;
        
        /// <summary>
        /// Gets fired when the Priority property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PriorityChanged;
        
        /// <summary>
        /// Gets fired before the InformBeforeRestored property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InformBeforeRestoredChanging;
        
        /// <summary>
        /// Gets fired when the InformBeforeRestored property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InformBeforeRestoredChanged;
        
        /// <summary>
        /// Gets fired before the Advice property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AdviceChanging;
        
        /// <summary>
        /// Gets fired when the Advice property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AdviceChanged;
        
        /// <summary>
        /// Gets fired before the InformAfterRestored property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InformAfterRestoredChanging;
        
        /// <summary>
        /// Gets fired when the InformAfterRestored property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InformAfterRestoredChanged;
        
        /// <summary>
        /// Gets fired before the HazardCode property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HazardCodeChanging;
        
        /// <summary>
        /// Gets fired when the HazardCode property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HazardCodeChanged;
        
        /// <summary>
        /// Gets fired before the IncidentRecord property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IncidentRecordChanging;
        
        /// <summary>
        /// Gets fired when the IncidentRecord property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IncidentRecordChanged;
        
        /// <summary>
        /// Gets fired before the CustomerData property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CustomerDataChanging;
        
        /// <summary>
        /// Gets fired when the CustomerData property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CustomerDataChanged;
        
        /// <summary>
        /// Gets fired before the TroublePeriod property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TroublePeriodChanging;
        
        /// <summary>
        /// Gets fired when the TroublePeriod property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TroublePeriodChanged;
    }
}

