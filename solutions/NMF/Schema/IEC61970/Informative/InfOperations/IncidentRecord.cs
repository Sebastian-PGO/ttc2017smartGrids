using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations
{
    
    
    /// <summary>
    /// The default implementation of the IncidentRecord class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfOperations")]
    [XmlNamespacePrefixAttribute("cimInfOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Inc" +
        "identRecord")]
    [DebuggerDisplayAttribute("IncidentRecord {UUID}")]
    public partial class IncidentRecord : Document, IIncidentRecord, IModelElement
    {
        
        private static Lazy<ITypedElement> _incidentCodesReference = new Lazy<ITypedElement>(RetrieveIncidentCodesReference);
        
        /// <summary>
        /// The backing field for the IncidentCodes property
        /// </summary>
        private IncidentRecordIncidentCodesCollection _incidentCodes;
        
        private static Lazy<ITypedElement> _troubleTicketsReference = new Lazy<ITypedElement>(RetrieveTroubleTicketsReference);
        
        /// <summary>
        /// The backing field for the TroubleTickets property
        /// </summary>
        private IncidentRecordTroubleTicketsCollection _troubleTickets;
        
        private static Lazy<ITypedElement> _periodReference = new Lazy<ITypedElement>(RetrievePeriodReference);
        
        /// <summary>
        /// The backing field for the Period property
        /// </summary>
        private IDateTimeInterval _period;
        
        private static IClass _classInstance;
        
        public IncidentRecord()
        {
            this._incidentCodes = new IncidentRecordIncidentCodesCollection(this);
            this._incidentCodes.CollectionChanging += this.IncidentCodesCollectionChanging;
            this._incidentCodes.CollectionChanged += this.IncidentCodesCollectionChanged;
            this._troubleTickets = new IncidentRecordTroubleTicketsCollection(this);
            this._troubleTickets.CollectionChanging += this.TroubleTicketsCollectionChanging;
            this._troubleTickets.CollectionChanged += this.TroubleTicketsCollectionChanged;
        }
        
        /// <summary>
        /// The IncidentCodes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("IncidentRecords")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IIncidentCode> IncidentCodes
        {
            get
            {
                return this._incidentCodes;
            }
        }
        
        /// <summary>
        /// The TroubleTickets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("IncidentRecord")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITroubleTicket> TroubleTickets
        {
            get
            {
                return this._troubleTickets;
            }
        }
        
        /// <summary>
        /// The period property
        /// </summary>
        [XmlElementNameAttribute("period")]
        [XmlAttributeAttribute(true)]
        public virtual IDateTimeInterval Period
        {
            get
            {
                return this._period;
            }
            set
            {
                if ((this._period != value))
                {
                    IDateTimeInterval old = this._period;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPeriodChanging(e);
                    this.OnPropertyChanging("Period", e, _periodReference);
                    this._period = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPeriod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPeriod;
                    }
                    this.OnPeriodChanged(e);
                    this.OnPropertyChanged("Period", e, _periodReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new IncidentRecordReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Inc" +
                            "identRecord")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Period property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PeriodChanging;
        
        /// <summary>
        /// Gets fired when the Period property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PeriodChanged;
        
        private static ITypedElement RetrieveIncidentCodesReference()
        {
            return ((ITypedElement)(((ModelElement)(IncidentRecord.ClassInstance)).Resolve("IncidentCodes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the IncidentCodes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IncidentCodesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("IncidentCodes", e, _incidentCodesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the IncidentCodes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IncidentCodesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("IncidentCodes", e, _incidentCodesReference);
        }
        
        private static ITypedElement RetrieveTroubleTicketsReference()
        {
            return ((ITypedElement)(((ModelElement)(IncidentRecord.ClassInstance)).Resolve("TroubleTickets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TroubleTickets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TroubleTicketsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("TroubleTickets", e, _troubleTicketsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TroubleTickets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TroubleTicketsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TroubleTickets", e, _troubleTicketsReference);
        }
        
        private static ITypedElement RetrievePeriodReference()
        {
            return ((ITypedElement)(((ModelElement)(IncidentRecord.ClassInstance)).Resolve("period")));
        }
        
        /// <summary>
        /// Raises the PeriodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPeriodChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PeriodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PeriodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPeriodChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PeriodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Period property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPeriod(object sender, System.EventArgs eventArgs)
        {
            this.Period = null;
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "INCIDENTCODES"))
            {
                return this._incidentCodes;
            }
            if ((feature == "TROUBLETICKETS"))
            {
                return this._troubleTickets;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PERIOD"))
            {
                this.Period = ((IDateTimeInterval)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Period"))
            {
                return new PeriodProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Period"))
            {
                return new PeriodProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Inc" +
                        "identRecord")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the IncidentRecord class
        /// </summary>
        public class IncidentRecordReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private IncidentRecord _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public IncidentRecordReferencedElementsCollection(IncidentRecord parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.IncidentCodes.Count);
                    count = (count + this._parent.TroubleTickets.Count);
                    if ((this._parent.Period != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.IncidentCodes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TroubleTickets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PeriodChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.IncidentCodes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TroubleTickets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PeriodChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IIncidentCode incidentCodesCasted = item.As<IIncidentCode>();
                if ((incidentCodesCasted != null))
                {
                    this._parent.IncidentCodes.Add(incidentCodesCasted);
                }
                ITroubleTicket troubleTicketsCasted = item.As<ITroubleTicket>();
                if ((troubleTicketsCasted != null))
                {
                    this._parent.TroubleTickets.Add(troubleTicketsCasted);
                }
                if ((this._parent.Period == null))
                {
                    IDateTimeInterval periodCasted = item.As<IDateTimeInterval>();
                    if ((periodCasted != null))
                    {
                        this._parent.Period = periodCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.IncidentCodes.Clear();
                this._parent.TroubleTickets.Clear();
                this._parent.Period = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.IncidentCodes.Contains(item))
                {
                    return true;
                }
                if (this._parent.TroubleTickets.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Period))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> incidentCodesEnumerator = this._parent.IncidentCodes.GetEnumerator();
                try
                {
                    for (
                    ; incidentCodesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = incidentCodesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    incidentCodesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> troubleTicketsEnumerator = this._parent.TroubleTickets.GetEnumerator();
                try
                {
                    for (
                    ; troubleTicketsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = troubleTicketsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    troubleTicketsEnumerator.Dispose();
                }
                if ((this._parent.Period != null))
                {
                    array[arrayIndex] = this._parent.Period;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IIncidentCode incidentCodeItem = item.As<IIncidentCode>();
                if (((incidentCodeItem != null) 
                            && this._parent.IncidentCodes.Remove(incidentCodeItem)))
                {
                    return true;
                }
                ITroubleTicket troubleTicketItem = item.As<ITroubleTicket>();
                if (((troubleTicketItem != null) 
                            && this._parent.TroubleTickets.Remove(troubleTicketItem)))
                {
                    return true;
                }
                if ((this._parent.Period == item))
                {
                    this._parent.Period = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.IncidentCodes).Concat(this._parent.TroubleTickets).Concat(this._parent.Period).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the period property
        /// </summary>
        private sealed class PeriodProxy : ModelPropertyChange<IIncidentRecord, IDateTimeInterval>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PeriodProxy(IIncidentRecord modelElement) : 
                    base(modelElement, "period")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDateTimeInterval Value
            {
                get
                {
                    return this.ModelElement.Period;
                }
                set
                {
                    this.ModelElement.Period = value;
                }
            }
        }
    }
}

