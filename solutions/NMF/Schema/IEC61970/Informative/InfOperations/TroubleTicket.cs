using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations
{
    
    
    /// <summary>
    /// The default implementation of the TroubleTicket class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfOperations")]
    [XmlNamespacePrefixAttribute("cimInfOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Tro" +
        "ubleTicket")]
    [DebuggerDisplayAttribute("TroubleTicket {UUID}")]
    public partial class TroubleTicket : Document, ITroubleTicket, IModelElement
    {
        
        /// <summary>
        /// The backing field for the FirstCallDateTime property
        /// </summary>
        private DateTime _firstCallDateTime;
        
        private static Lazy<ITypedElement> _firstCallDateTimeAttribute = new Lazy<ITypedElement>(RetrieveFirstCallDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the CallBack property
        /// </summary>
        private bool _callBack;
        
        private static Lazy<ITypedElement> _callBackAttribute = new Lazy<ITypedElement>(RetrieveCallBackAttribute);
        
        /// <summary>
        /// The backing field for the EstimatedRestoreDateTime property
        /// </summary>
        private DateTime _estimatedRestoreDateTime;
        
        private static Lazy<ITypedElement> _estimatedRestoreDateTimeAttribute = new Lazy<ITypedElement>(RetrieveEstimatedRestoreDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the ReportingKind property
        /// </summary>
        private Nullable<TroubleReportingKind> _reportingKind;
        
        private static Lazy<ITypedElement> _reportingKindAttribute = new Lazy<ITypedElement>(RetrieveReportingKindAttribute);
        
        /// <summary>
        /// The backing field for the Priority property
        /// </summary>
        private string _priority;
        
        private static Lazy<ITypedElement> _priorityAttribute = new Lazy<ITypedElement>(RetrievePriorityAttribute);
        
        /// <summary>
        /// The backing field for the InformBeforeRestored property
        /// </summary>
        private bool _informBeforeRestored;
        
        private static Lazy<ITypedElement> _informBeforeRestoredAttribute = new Lazy<ITypedElement>(RetrieveInformBeforeRestoredAttribute);
        
        /// <summary>
        /// The backing field for the Advice property
        /// </summary>
        private string _advice;
        
        private static Lazy<ITypedElement> _adviceAttribute = new Lazy<ITypedElement>(RetrieveAdviceAttribute);
        
        /// <summary>
        /// The backing field for the InformAfterRestored property
        /// </summary>
        private bool _informAfterRestored;
        
        private static Lazy<ITypedElement> _informAfterRestoredAttribute = new Lazy<ITypedElement>(RetrieveInformAfterRestoredAttribute);
        
        /// <summary>
        /// The backing field for the HazardCode property
        /// </summary>
        private string _hazardCode;
        
        private static Lazy<ITypedElement> _hazardCodeAttribute = new Lazy<ITypedElement>(RetrieveHazardCodeAttribute);
        
        private static Lazy<ITypedElement> _callBacksReference = new Lazy<ITypedElement>(RetrieveCallBacksReference);
        
        /// <summary>
        /// The backing field for the CallBacks property
        /// </summary>
        private TroubleTicketCallBacksCollection _callBacks;
        
        private static Lazy<ITypedElement> _incidentRecordReference = new Lazy<ITypedElement>(RetrieveIncidentRecordReference);
        
        /// <summary>
        /// The backing field for the IncidentRecord property
        /// </summary>
        private IIncidentRecord _incidentRecord;
        
        private static Lazy<ITypedElement> _customerDataReference = new Lazy<ITypedElement>(RetrieveCustomerDataReference);
        
        /// <summary>
        /// The backing field for the CustomerData property
        /// </summary>
        private ICustomer _customerData;
        
        private static Lazy<ITypedElement> _troublePeriodReference = new Lazy<ITypedElement>(RetrieveTroublePeriodReference);
        
        /// <summary>
        /// The backing field for the TroublePeriod property
        /// </summary>
        private IDateTimeInterval _troublePeriod;
        
        private static IClass _classInstance;
        
        public TroubleTicket()
        {
            this._callBacks = new TroubleTicketCallBacksCollection(this);
            this._callBacks.CollectionChanging += this.CallBacksCollectionChanging;
            this._callBacks.CollectionChanged += this.CallBacksCollectionChanged;
        }
        
        /// <summary>
        /// The firstCallDateTime property
        /// </summary>
        [XmlElementNameAttribute("firstCallDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime FirstCallDateTime
        {
            get
            {
                return this._firstCallDateTime;
            }
            set
            {
                if ((this._firstCallDateTime != value))
                {
                    DateTime old = this._firstCallDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFirstCallDateTimeChanging(e);
                    this.OnPropertyChanging("FirstCallDateTime", e, _firstCallDateTimeAttribute);
                    this._firstCallDateTime = value;
                    this.OnFirstCallDateTimeChanged(e);
                    this.OnPropertyChanged("FirstCallDateTime", e, _firstCallDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The callBack property
        /// </summary>
        [XmlElementNameAttribute("callBack")]
        [XmlAttributeAttribute(true)]
        public virtual bool CallBack
        {
            get
            {
                return this._callBack;
            }
            set
            {
                if ((this._callBack != value))
                {
                    bool old = this._callBack;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCallBackChanging(e);
                    this.OnPropertyChanging("CallBack", e, _callBackAttribute);
                    this._callBack = value;
                    this.OnCallBackChanged(e);
                    this.OnPropertyChanged("CallBack", e, _callBackAttribute);
                }
            }
        }
        
        /// <summary>
        /// The estimatedRestoreDateTime property
        /// </summary>
        [XmlElementNameAttribute("estimatedRestoreDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime EstimatedRestoreDateTime
        {
            get
            {
                return this._estimatedRestoreDateTime;
            }
            set
            {
                if ((this._estimatedRestoreDateTime != value))
                {
                    DateTime old = this._estimatedRestoreDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEstimatedRestoreDateTimeChanging(e);
                    this.OnPropertyChanging("EstimatedRestoreDateTime", e, _estimatedRestoreDateTimeAttribute);
                    this._estimatedRestoreDateTime = value;
                    this.OnEstimatedRestoreDateTimeChanged(e);
                    this.OnPropertyChanged("EstimatedRestoreDateTime", e, _estimatedRestoreDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The reportingKind property
        /// </summary>
        [XmlElementNameAttribute("reportingKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<TroubleReportingKind> ReportingKind
        {
            get
            {
                return this._reportingKind;
            }
            set
            {
                if ((this._reportingKind != value))
                {
                    Nullable<TroubleReportingKind> old = this._reportingKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReportingKindChanging(e);
                    this.OnPropertyChanging("ReportingKind", e, _reportingKindAttribute);
                    this._reportingKind = value;
                    this.OnReportingKindChanged(e);
                    this.OnPropertyChanged("ReportingKind", e, _reportingKindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The priority property
        /// </summary>
        [XmlElementNameAttribute("priority")]
        [XmlAttributeAttribute(true)]
        public virtual string Priority
        {
            get
            {
                return this._priority;
            }
            set
            {
                if ((this._priority != value))
                {
                    string old = this._priority;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPriorityChanging(e);
                    this.OnPropertyChanging("Priority", e, _priorityAttribute);
                    this._priority = value;
                    this.OnPriorityChanged(e);
                    this.OnPropertyChanged("Priority", e, _priorityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The informBeforeRestored property
        /// </summary>
        [XmlElementNameAttribute("informBeforeRestored")]
        [XmlAttributeAttribute(true)]
        public virtual bool InformBeforeRestored
        {
            get
            {
                return this._informBeforeRestored;
            }
            set
            {
                if ((this._informBeforeRestored != value))
                {
                    bool old = this._informBeforeRestored;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInformBeforeRestoredChanging(e);
                    this.OnPropertyChanging("InformBeforeRestored", e, _informBeforeRestoredAttribute);
                    this._informBeforeRestored = value;
                    this.OnInformBeforeRestoredChanged(e);
                    this.OnPropertyChanged("InformBeforeRestored", e, _informBeforeRestoredAttribute);
                }
            }
        }
        
        /// <summary>
        /// The advice property
        /// </summary>
        [XmlElementNameAttribute("advice")]
        [XmlAttributeAttribute(true)]
        public virtual string Advice
        {
            get
            {
                return this._advice;
            }
            set
            {
                if ((this._advice != value))
                {
                    string old = this._advice;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAdviceChanging(e);
                    this.OnPropertyChanging("Advice", e, _adviceAttribute);
                    this._advice = value;
                    this.OnAdviceChanged(e);
                    this.OnPropertyChanged("Advice", e, _adviceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The informAfterRestored property
        /// </summary>
        [XmlElementNameAttribute("informAfterRestored")]
        [XmlAttributeAttribute(true)]
        public virtual bool InformAfterRestored
        {
            get
            {
                return this._informAfterRestored;
            }
            set
            {
                if ((this._informAfterRestored != value))
                {
                    bool old = this._informAfterRestored;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInformAfterRestoredChanging(e);
                    this.OnPropertyChanging("InformAfterRestored", e, _informAfterRestoredAttribute);
                    this._informAfterRestored = value;
                    this.OnInformAfterRestoredChanged(e);
                    this.OnPropertyChanged("InformAfterRestored", e, _informAfterRestoredAttribute);
                }
            }
        }
        
        /// <summary>
        /// The hazardCode property
        /// </summary>
        [XmlElementNameAttribute("hazardCode")]
        [XmlAttributeAttribute(true)]
        public virtual string HazardCode
        {
            get
            {
                return this._hazardCode;
            }
            set
            {
                if ((this._hazardCode != value))
                {
                    string old = this._hazardCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHazardCodeChanging(e);
                    this.OnPropertyChanging("HazardCode", e, _hazardCodeAttribute);
                    this._hazardCode = value;
                    this.OnHazardCodeChanged(e);
                    this.OnPropertyChanged("HazardCode", e, _hazardCodeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The CallBacks property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TroubleTickets")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICallBack> CallBacks
        {
            get
            {
                return this._callBacks;
            }
        }
        
        /// <summary>
        /// The IncidentRecord property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TroubleTickets")]
        public virtual IIncidentRecord IncidentRecord
        {
            get
            {
                return this._incidentRecord;
            }
            set
            {
                if ((this._incidentRecord != value))
                {
                    IIncidentRecord old = this._incidentRecord;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIncidentRecordChanging(e);
                    this.OnPropertyChanging("IncidentRecord", e, _incidentRecordReference);
                    this._incidentRecord = value;
                    if ((old != null))
                    {
                        old.TroubleTickets.Remove(this);
                        old.Deleted -= this.OnResetIncidentRecord;
                    }
                    if ((value != null))
                    {
                        value.TroubleTickets.Add(this);
                        value.Deleted += this.OnResetIncidentRecord;
                    }
                    this.OnIncidentRecordChanged(e);
                    this.OnPropertyChanged("IncidentRecord", e, _incidentRecordReference);
                }
            }
        }
        
        /// <summary>
        /// The CustomerData property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TroubleTickets")]
        public virtual ICustomer CustomerData
        {
            get
            {
                return this._customerData;
            }
            set
            {
                if ((this._customerData != value))
                {
                    ICustomer old = this._customerData;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCustomerDataChanging(e);
                    this.OnPropertyChanging("CustomerData", e, _customerDataReference);
                    this._customerData = value;
                    if ((old != null))
                    {
                        old.TroubleTickets.Remove(this);
                        old.Deleted -= this.OnResetCustomerData;
                    }
                    if ((value != null))
                    {
                        value.TroubleTickets.Add(this);
                        value.Deleted += this.OnResetCustomerData;
                    }
                    this.OnCustomerDataChanged(e);
                    this.OnPropertyChanged("CustomerData", e, _customerDataReference);
                }
            }
        }
        
        /// <summary>
        /// The troublePeriod property
        /// </summary>
        [XmlElementNameAttribute("troublePeriod")]
        [XmlAttributeAttribute(true)]
        public virtual IDateTimeInterval TroublePeriod
        {
            get
            {
                return this._troublePeriod;
            }
            set
            {
                if ((this._troublePeriod != value))
                {
                    IDateTimeInterval old = this._troublePeriod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTroublePeriodChanging(e);
                    this.OnPropertyChanging("TroublePeriod", e, _troublePeriodReference);
                    this._troublePeriod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetTroublePeriod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetTroublePeriod;
                    }
                    this.OnTroublePeriodChanged(e);
                    this.OnPropertyChanged("TroublePeriod", e, _troublePeriodReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TroubleTicketReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Tro" +
                            "ubleTicket")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the FirstCallDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FirstCallDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the FirstCallDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FirstCallDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the CallBack property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CallBackChanging;
        
        /// <summary>
        /// Gets fired when the CallBack property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CallBackChanged;
        
        /// <summary>
        /// Gets fired before the EstimatedRestoreDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EstimatedRestoreDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the EstimatedRestoreDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EstimatedRestoreDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the ReportingKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReportingKindChanging;
        
        /// <summary>
        /// Gets fired when the ReportingKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReportingKindChanged;
        
        /// <summary>
        /// Gets fired before the Priority property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PriorityChanging;
        
        /// <summary>
        /// Gets fired when the Priority property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PriorityChanged;
        
        /// <summary>
        /// Gets fired before the InformBeforeRestored property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InformBeforeRestoredChanging;
        
        /// <summary>
        /// Gets fired when the InformBeforeRestored property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InformBeforeRestoredChanged;
        
        /// <summary>
        /// Gets fired before the Advice property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AdviceChanging;
        
        /// <summary>
        /// Gets fired when the Advice property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AdviceChanged;
        
        /// <summary>
        /// Gets fired before the InformAfterRestored property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InformAfterRestoredChanging;
        
        /// <summary>
        /// Gets fired when the InformAfterRestored property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InformAfterRestoredChanged;
        
        /// <summary>
        /// Gets fired before the HazardCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HazardCodeChanging;
        
        /// <summary>
        /// Gets fired when the HazardCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HazardCodeChanged;
        
        /// <summary>
        /// Gets fired before the IncidentRecord property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IncidentRecordChanging;
        
        /// <summary>
        /// Gets fired when the IncidentRecord property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IncidentRecordChanged;
        
        /// <summary>
        /// Gets fired before the CustomerData property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerDataChanging;
        
        /// <summary>
        /// Gets fired when the CustomerData property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerDataChanged;
        
        /// <summary>
        /// Gets fired before the TroublePeriod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TroublePeriodChanging;
        
        /// <summary>
        /// Gets fired when the TroublePeriod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TroublePeriodChanged;
        
        private static ITypedElement RetrieveFirstCallDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TroubleTicket.ClassInstance)).Resolve("firstCallDateTime")));
        }
        
        /// <summary>
        /// Raises the FirstCallDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFirstCallDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FirstCallDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FirstCallDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFirstCallDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FirstCallDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCallBackAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TroubleTicket.ClassInstance)).Resolve("callBack")));
        }
        
        /// <summary>
        /// Raises the CallBackChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCallBackChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CallBackChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CallBackChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCallBackChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CallBackChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEstimatedRestoreDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TroubleTicket.ClassInstance)).Resolve("estimatedRestoreDateTime")));
        }
        
        /// <summary>
        /// Raises the EstimatedRestoreDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEstimatedRestoreDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EstimatedRestoreDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EstimatedRestoreDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEstimatedRestoreDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EstimatedRestoreDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReportingKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TroubleTicket.ClassInstance)).Resolve("reportingKind")));
        }
        
        /// <summary>
        /// Raises the ReportingKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReportingKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReportingKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReportingKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReportingKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReportingKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePriorityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TroubleTicket.ClassInstance)).Resolve("priority")));
        }
        
        /// <summary>
        /// Raises the PriorityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPriorityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PriorityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PriorityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPriorityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PriorityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveInformBeforeRestoredAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TroubleTicket.ClassInstance)).Resolve("informBeforeRestored")));
        }
        
        /// <summary>
        /// Raises the InformBeforeRestoredChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInformBeforeRestoredChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InformBeforeRestoredChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InformBeforeRestoredChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInformBeforeRestoredChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InformBeforeRestoredChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAdviceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TroubleTicket.ClassInstance)).Resolve("advice")));
        }
        
        /// <summary>
        /// Raises the AdviceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAdviceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AdviceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AdviceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAdviceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AdviceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveInformAfterRestoredAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TroubleTicket.ClassInstance)).Resolve("informAfterRestored")));
        }
        
        /// <summary>
        /// Raises the InformAfterRestoredChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInformAfterRestoredChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InformAfterRestoredChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InformAfterRestoredChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInformAfterRestoredChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InformAfterRestoredChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveHazardCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TroubleTicket.ClassInstance)).Resolve("hazardCode")));
        }
        
        /// <summary>
        /// Raises the HazardCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHazardCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HazardCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HazardCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHazardCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HazardCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCallBacksReference()
        {
            return ((ITypedElement)(((ModelElement)(TroubleTicket.ClassInstance)).Resolve("CallBacks")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CallBacks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CallBacksCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("CallBacks", e, _callBacksReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CallBacks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CallBacksCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CallBacks", e, _callBacksReference);
        }
        
        private static ITypedElement RetrieveIncidentRecordReference()
        {
            return ((ITypedElement)(((ModelElement)(TroubleTicket.ClassInstance)).Resolve("IncidentRecord")));
        }
        
        /// <summary>
        /// Raises the IncidentRecordChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIncidentRecordChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IncidentRecordChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IncidentRecordChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIncidentRecordChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IncidentRecordChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the IncidentRecord property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetIncidentRecord(object sender, System.EventArgs eventArgs)
        {
            this.IncidentRecord = null;
        }
        
        private static ITypedElement RetrieveCustomerDataReference()
        {
            return ((ITypedElement)(((ModelElement)(TroubleTicket.ClassInstance)).Resolve("CustomerData")));
        }
        
        /// <summary>
        /// Raises the CustomerDataChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerDataChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerDataChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CustomerDataChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerDataChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerDataChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CustomerData property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCustomerData(object sender, System.EventArgs eventArgs)
        {
            this.CustomerData = null;
        }
        
        private static ITypedElement RetrieveTroublePeriodReference()
        {
            return ((ITypedElement)(((ModelElement)(TroubleTicket.ClassInstance)).Resolve("troublePeriod")));
        }
        
        /// <summary>
        /// Raises the TroublePeriodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTroublePeriodChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TroublePeriodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TroublePeriodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTroublePeriodChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TroublePeriodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TroublePeriod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTroublePeriod(object sender, System.EventArgs eventArgs)
        {
            this.TroublePeriod = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "FIRSTCALLDATETIME"))
            {
                return this.FirstCallDateTime;
            }
            if ((attribute == "CALLBACK"))
            {
                return this.CallBack;
            }
            if ((attribute == "ESTIMATEDRESTOREDATETIME"))
            {
                return this.EstimatedRestoreDateTime;
            }
            if ((attribute == "REPORTINGKIND"))
            {
                return this.ReportingKind;
            }
            if ((attribute == "PRIORITY"))
            {
                return this.Priority;
            }
            if ((attribute == "INFORMBEFORERESTORED"))
            {
                return this.InformBeforeRestored;
            }
            if ((attribute == "ADVICE"))
            {
                return this.Advice;
            }
            if ((attribute == "INFORMAFTERRESTORED"))
            {
                return this.InformAfterRestored;
            }
            if ((attribute == "HAZARDCODE"))
            {
                return this.HazardCode;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CALLBACKS"))
            {
                return this._callBacks;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "INCIDENTRECORD"))
            {
                this.IncidentRecord = ((IIncidentRecord)(value));
                return;
            }
            if ((feature == "CUSTOMERDATA"))
            {
                this.CustomerData = ((ICustomer)(value));
                return;
            }
            if ((feature == "TROUBLEPERIOD"))
            {
                this.TroublePeriod = ((IDateTimeInterval)(value));
                return;
            }
            if ((feature == "FIRSTCALLDATETIME"))
            {
                this.FirstCallDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "CALLBACK"))
            {
                this.CallBack = ((bool)(value));
                return;
            }
            if ((feature == "ESTIMATEDRESTOREDATETIME"))
            {
                this.EstimatedRestoreDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "REPORTINGKIND"))
            {
                this.ReportingKind = ((TroubleReportingKind)(value));
                return;
            }
            if ((feature == "PRIORITY"))
            {
                this.Priority = ((string)(value));
                return;
            }
            if ((feature == "INFORMBEFORERESTORED"))
            {
                this.InformBeforeRestored = ((bool)(value));
                return;
            }
            if ((feature == "ADVICE"))
            {
                this.Advice = ((string)(value));
                return;
            }
            if ((feature == "INFORMAFTERRESTORED"))
            {
                this.InformAfterRestored = ((bool)(value));
                return;
            }
            if ((feature == "HAZARDCODE"))
            {
                this.HazardCode = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "IncidentRecord"))
            {
                return new IncidentRecordProxy(this);
            }
            if ((attribute == "CustomerData"))
            {
                return new CustomerDataProxy(this);
            }
            if ((attribute == "TroublePeriod"))
            {
                return new TroublePeriodProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "IncidentRecord"))
            {
                return new IncidentRecordProxy(this);
            }
            if ((reference == "CustomerData"))
            {
                return new CustomerDataProxy(this);
            }
            if ((reference == "TroublePeriod"))
            {
                return new TroublePeriodProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Tro" +
                        "ubleTicket")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TroubleTicket class
        /// </summary>
        public class TroubleTicketReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TroubleTicket _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TroubleTicketReferencedElementsCollection(TroubleTicket parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.CallBacks.Count);
                    if ((this._parent.IncidentRecord != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CustomerData != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TroublePeriod != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CallBacks.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.IncidentRecordChanged += this.PropagateValueChanges;
                this._parent.CustomerDataChanged += this.PropagateValueChanges;
                this._parent.TroublePeriodChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CallBacks.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.IncidentRecordChanged -= this.PropagateValueChanges;
                this._parent.CustomerDataChanged -= this.PropagateValueChanges;
                this._parent.TroublePeriodChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ICallBack callBacksCasted = item.As<ICallBack>();
                if ((callBacksCasted != null))
                {
                    this._parent.CallBacks.Add(callBacksCasted);
                }
                if ((this._parent.IncidentRecord == null))
                {
                    IIncidentRecord incidentRecordCasted = item.As<IIncidentRecord>();
                    if ((incidentRecordCasted != null))
                    {
                        this._parent.IncidentRecord = incidentRecordCasted;
                        return;
                    }
                }
                if ((this._parent.CustomerData == null))
                {
                    ICustomer customerDataCasted = item.As<ICustomer>();
                    if ((customerDataCasted != null))
                    {
                        this._parent.CustomerData = customerDataCasted;
                        return;
                    }
                }
                if ((this._parent.TroublePeriod == null))
                {
                    IDateTimeInterval troublePeriodCasted = item.As<IDateTimeInterval>();
                    if ((troublePeriodCasted != null))
                    {
                        this._parent.TroublePeriod = troublePeriodCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CallBacks.Clear();
                this._parent.IncidentRecord = null;
                this._parent.CustomerData = null;
                this._parent.TroublePeriod = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.CallBacks.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.IncidentRecord))
                {
                    return true;
                }
                if ((item == this._parent.CustomerData))
                {
                    return true;
                }
                if ((item == this._parent.TroublePeriod))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> callBacksEnumerator = this._parent.CallBacks.GetEnumerator();
                try
                {
                    for (
                    ; callBacksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = callBacksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    callBacksEnumerator.Dispose();
                }
                if ((this._parent.IncidentRecord != null))
                {
                    array[arrayIndex] = this._parent.IncidentRecord;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CustomerData != null))
                {
                    array[arrayIndex] = this._parent.CustomerData;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TroublePeriod != null))
                {
                    array[arrayIndex] = this._parent.TroublePeriod;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ICallBack callBackItem = item.As<ICallBack>();
                if (((callBackItem != null) 
                            && this._parent.CallBacks.Remove(callBackItem)))
                {
                    return true;
                }
                if ((this._parent.IncidentRecord == item))
                {
                    this._parent.IncidentRecord = null;
                    return true;
                }
                if ((this._parent.CustomerData == item))
                {
                    this._parent.CustomerData = null;
                    return true;
                }
                if ((this._parent.TroublePeriod == item))
                {
                    this._parent.TroublePeriod = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CallBacks).Concat(this._parent.IncidentRecord).Concat(this._parent.CustomerData).Concat(this._parent.TroublePeriod).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the firstCallDateTime property
        /// </summary>
        private sealed class FirstCallDateTimeProxy : ModelPropertyChange<ITroubleTicket, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FirstCallDateTimeProxy(ITroubleTicket modelElement) : 
                    base(modelElement, "firstCallDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.FirstCallDateTime;
                }
                set
                {
                    this.ModelElement.FirstCallDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the callBack property
        /// </summary>
        private sealed class CallBackProxy : ModelPropertyChange<ITroubleTicket, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CallBackProxy(ITroubleTicket modelElement) : 
                    base(modelElement, "callBack")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.CallBack;
                }
                set
                {
                    this.ModelElement.CallBack = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the estimatedRestoreDateTime property
        /// </summary>
        private sealed class EstimatedRestoreDateTimeProxy : ModelPropertyChange<ITroubleTicket, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EstimatedRestoreDateTimeProxy(ITroubleTicket modelElement) : 
                    base(modelElement, "estimatedRestoreDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.EstimatedRestoreDateTime;
                }
                set
                {
                    this.ModelElement.EstimatedRestoreDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the reportingKind property
        /// </summary>
        private sealed class ReportingKindProxy : ModelPropertyChange<ITroubleTicket, Nullable<TroubleReportingKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReportingKindProxy(ITroubleTicket modelElement) : 
                    base(modelElement, "reportingKind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<TroubleReportingKind> Value
            {
                get
                {
                    return this.ModelElement.ReportingKind;
                }
                set
                {
                    this.ModelElement.ReportingKind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the priority property
        /// </summary>
        private sealed class PriorityProxy : ModelPropertyChange<ITroubleTicket, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PriorityProxy(ITroubleTicket modelElement) : 
                    base(modelElement, "priority")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Priority;
                }
                set
                {
                    this.ModelElement.Priority = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the informBeforeRestored property
        /// </summary>
        private sealed class InformBeforeRestoredProxy : ModelPropertyChange<ITroubleTicket, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InformBeforeRestoredProxy(ITroubleTicket modelElement) : 
                    base(modelElement, "informBeforeRestored")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.InformBeforeRestored;
                }
                set
                {
                    this.ModelElement.InformBeforeRestored = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the advice property
        /// </summary>
        private sealed class AdviceProxy : ModelPropertyChange<ITroubleTicket, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AdviceProxy(ITroubleTicket modelElement) : 
                    base(modelElement, "advice")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Advice;
                }
                set
                {
                    this.ModelElement.Advice = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the informAfterRestored property
        /// </summary>
        private sealed class InformAfterRestoredProxy : ModelPropertyChange<ITroubleTicket, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InformAfterRestoredProxy(ITroubleTicket modelElement) : 
                    base(modelElement, "informAfterRestored")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.InformAfterRestored;
                }
                set
                {
                    this.ModelElement.InformAfterRestored = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the hazardCode property
        /// </summary>
        private sealed class HazardCodeProxy : ModelPropertyChange<ITroubleTicket, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HazardCodeProxy(ITroubleTicket modelElement) : 
                    base(modelElement, "hazardCode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.HazardCode;
                }
                set
                {
                    this.ModelElement.HazardCode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IncidentRecord property
        /// </summary>
        private sealed class IncidentRecordProxy : ModelPropertyChange<ITroubleTicket, IIncidentRecord>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IncidentRecordProxy(ITroubleTicket modelElement) : 
                    base(modelElement, "IncidentRecord")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IIncidentRecord Value
            {
                get
                {
                    return this.ModelElement.IncidentRecord;
                }
                set
                {
                    this.ModelElement.IncidentRecord = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CustomerData property
        /// </summary>
        private sealed class CustomerDataProxy : ModelPropertyChange<ITroubleTicket, ICustomer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CustomerDataProxy(ITroubleTicket modelElement) : 
                    base(modelElement, "CustomerData")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICustomer Value
            {
                get
                {
                    return this.ModelElement.CustomerData;
                }
                set
                {
                    this.ModelElement.CustomerData = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the troublePeriod property
        /// </summary>
        private sealed class TroublePeriodProxy : ModelPropertyChange<ITroubleTicket, IDateTimeInterval>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TroublePeriodProxy(ITroubleTicket modelElement) : 
                    base(modelElement, "troublePeriod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDateTimeInterval Value
            {
                get
                {
                    return this.ModelElement.TroublePeriod;
                }
                set
                {
                    this.ModelElement.TroublePeriod = value;
                }
            }
        }
    }
}

