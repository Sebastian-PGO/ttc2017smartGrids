using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations
{
    
    
    /// <summary>
    /// The public interface for OutageStep
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(OutageStep))]
    [XmlDefaultImplementationTypeAttribute(typeof(OutageStep))]
    public interface IOutageStep : IModelElement, IIdentifiedObject
    {
        
        /// <summary>
        /// The injury property
        /// </summary>
        bool Injury
        {
            get;
            set;
        }
        
        /// <summary>
        /// The specialCustomerCount property
        /// </summary>
        int SpecialCustomerCount
        {
            get;
            set;
        }
        
        /// <summary>
        /// The estimatedRestoreDateTime property
        /// </summary>
        DateTime EstimatedRestoreDateTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The fatality property
        /// </summary>
        bool Fatality
        {
            get;
            set;
        }
        
        /// <summary>
        /// The callerCount property
        /// </summary>
        int CallerCount
        {
            get;
            set;
        }
        
        /// <summary>
        /// The damage property
        /// </summary>
        bool Damage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The jobPriority property
        /// </summary>
        string JobPriority
        {
            get;
            set;
        }
        
        /// <summary>
        /// The shockReported property
        /// </summary>
        bool ShockReported
        {
            get;
            set;
        }
        
        /// <summary>
        /// The averageCml property
        /// </summary>
        float AverageCml
        {
            get;
            set;
        }
        
        /// <summary>
        /// The totalCml property
        /// </summary>
        float TotalCml
        {
            get;
            set;
        }
        
        /// <summary>
        /// The totalCustomerCount property
        /// </summary>
        int TotalCustomerCount
        {
            get;
            set;
        }
        
        /// <summary>
        /// The criticalCustomerCount property
        /// </summary>
        int CriticalCustomerCount
        {
            get;
            set;
        }
        
        /// <summary>
        /// The OutageCodes property
        /// </summary>
        IOrderedSetExpression<IOutageCode> OutageCodes
        {
            get;
        }
        
        /// <summary>
        /// The Crews property
        /// </summary>
        IOrderedSetExpression<ICrew> Crews
        {
            get;
        }
        
        /// <summary>
        /// The noPowerInterval property
        /// </summary>
        IDateTimeInterval NoPowerInterval
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ConductingEquipmentRoles property
        /// </summary>
        IOrderedSetExpression<IOutageStepPsrRole> ConductingEquipmentRoles
        {
            get;
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        IStatus Status
        {
            get;
            set;
        }
        
        /// <summary>
        /// The OutageRecord property
        /// </summary>
        IOutageRecord OutageRecord
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Injury property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InjuryChanging;
        
        /// <summary>
        /// Gets fired when the Injury property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InjuryChanged;
        
        /// <summary>
        /// Gets fired before the SpecialCustomerCount property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpecialCustomerCountChanging;
        
        /// <summary>
        /// Gets fired when the SpecialCustomerCount property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpecialCustomerCountChanged;
        
        /// <summary>
        /// Gets fired before the EstimatedRestoreDateTime property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EstimatedRestoreDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the EstimatedRestoreDateTime property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EstimatedRestoreDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the Fatality property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FatalityChanging;
        
        /// <summary>
        /// Gets fired when the Fatality property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FatalityChanged;
        
        /// <summary>
        /// Gets fired before the CallerCount property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CallerCountChanging;
        
        /// <summary>
        /// Gets fired when the CallerCount property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CallerCountChanged;
        
        /// <summary>
        /// Gets fired before the Damage property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DamageChanging;
        
        /// <summary>
        /// Gets fired when the Damage property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DamageChanged;
        
        /// <summary>
        /// Gets fired before the JobPriority property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> JobPriorityChanging;
        
        /// <summary>
        /// Gets fired when the JobPriority property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> JobPriorityChanged;
        
        /// <summary>
        /// Gets fired before the ShockReported property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ShockReportedChanging;
        
        /// <summary>
        /// Gets fired when the ShockReported property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ShockReportedChanged;
        
        /// <summary>
        /// Gets fired before the AverageCml property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AverageCmlChanging;
        
        /// <summary>
        /// Gets fired when the AverageCml property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AverageCmlChanged;
        
        /// <summary>
        /// Gets fired before the TotalCml property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TotalCmlChanging;
        
        /// <summary>
        /// Gets fired when the TotalCml property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TotalCmlChanged;
        
        /// <summary>
        /// Gets fired before the TotalCustomerCount property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TotalCustomerCountChanging;
        
        /// <summary>
        /// Gets fired when the TotalCustomerCount property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TotalCustomerCountChanged;
        
        /// <summary>
        /// Gets fired before the CriticalCustomerCount property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CriticalCustomerCountChanging;
        
        /// <summary>
        /// Gets fired when the CriticalCustomerCount property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CriticalCustomerCountChanged;
        
        /// <summary>
        /// Gets fired before the NoPowerInterval property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NoPowerIntervalChanging;
        
        /// <summary>
        /// Gets fired when the NoPowerInterval property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NoPowerIntervalChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the OutageRecord property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OutageRecordChanging;
        
        /// <summary>
        /// Gets fired when the OutageRecord property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OutageRecordChanged;
    }
}

