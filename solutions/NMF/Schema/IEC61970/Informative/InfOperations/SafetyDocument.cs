using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations
{
    
    
    /// <summary>
    /// The default implementation of the SafetyDocument class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfOperations")]
    [XmlNamespacePrefixAttribute("cimInfOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Saf" +
        "etyDocument")]
    [DebuggerDisplayAttribute("SafetyDocument {UUID}")]
    public partial class SafetyDocument : Document, ISafetyDocument, IModelElement
    {
        
        private static Lazy<ITypedElement> _powerSystemResourceReference = new Lazy<ITypedElement>(RetrievePowerSystemResourceReference);
        
        /// <summary>
        /// The backing field for the PowerSystemResource property
        /// </summary>
        private IPowerSystemResource _powerSystemResource;
        
        private static Lazy<ITypedElement> _clearanceTagsReference = new Lazy<ITypedElement>(RetrieveClearanceTagsReference);
        
        /// <summary>
        /// The backing field for the ClearanceTags property
        /// </summary>
        private SafetyDocumentClearanceTagsCollection _clearanceTags;
        
        private static Lazy<ITypedElement> _scheduleStepsReference = new Lazy<ITypedElement>(RetrieveScheduleStepsReference);
        
        /// <summary>
        /// The backing field for the ScheduleSteps property
        /// </summary>
        private SafetyDocumentScheduleStepsCollection _scheduleSteps;
        
        private static IClass _classInstance;
        
        public SafetyDocument()
        {
            this._clearanceTags = new SafetyDocumentClearanceTagsCollection(this);
            this._clearanceTags.CollectionChanging += this.ClearanceTagsCollectionChanging;
            this._clearanceTags.CollectionChanged += this.ClearanceTagsCollectionChanged;
            this._scheduleSteps = new SafetyDocumentScheduleStepsCollection(this);
            this._scheduleSteps.CollectionChanging += this.ScheduleStepsCollectionChanging;
            this._scheduleSteps.CollectionChanged += this.ScheduleStepsCollectionChanged;
        }
        
        /// <summary>
        /// The PowerSystemResource property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SafetyDocuments")]
        public virtual IPowerSystemResource PowerSystemResource
        {
            get
            {
                return this._powerSystemResource;
            }
            set
            {
                if ((this._powerSystemResource != value))
                {
                    IPowerSystemResource old = this._powerSystemResource;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPowerSystemResourceChanging(e);
                    this.OnPropertyChanging("PowerSystemResource", e, _powerSystemResourceReference);
                    this._powerSystemResource = value;
                    if ((old != null))
                    {
                        old.SafetyDocuments.Remove(this);
                        old.Deleted -= this.OnResetPowerSystemResource;
                    }
                    if ((value != null))
                    {
                        value.SafetyDocuments.Add(this);
                        value.Deleted += this.OnResetPowerSystemResource;
                    }
                    this.OnPowerSystemResourceChanged(e);
                    this.OnPropertyChanged("PowerSystemResource", e, _powerSystemResourceReference);
                }
            }
        }
        
        /// <summary>
        /// The ClearanceTags property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SafetyDocument")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IClearanceTag> ClearanceTags
        {
            get
            {
                return this._clearanceTags;
            }
        }
        
        /// <summary>
        /// The ScheduleSteps property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SafetyDocument")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISwitchingStep> ScheduleSteps
        {
            get
            {
                return this._scheduleSteps;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SafetyDocumentReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Saf" +
                            "etyDocument")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PowerSystemResource property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerSystemResourceChanging;
        
        /// <summary>
        /// Gets fired when the PowerSystemResource property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerSystemResourceChanged;
        
        private static ITypedElement RetrievePowerSystemResourceReference()
        {
            return ((ITypedElement)(((ModelElement)(SafetyDocument.ClassInstance)).Resolve("PowerSystemResource")));
        }
        
        /// <summary>
        /// Raises the PowerSystemResourceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerSystemResourceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerSystemResourceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerSystemResourceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerSystemResourceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerSystemResourceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PowerSystemResource property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPowerSystemResource(object sender, System.EventArgs eventArgs)
        {
            this.PowerSystemResource = null;
        }
        
        private static ITypedElement RetrieveClearanceTagsReference()
        {
            return ((ITypedElement)(((ModelElement)(SafetyDocument.ClassInstance)).Resolve("ClearanceTags")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ClearanceTags property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ClearanceTagsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ClearanceTags", e, _clearanceTagsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ClearanceTags property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ClearanceTagsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ClearanceTags", e, _clearanceTagsReference);
        }
        
        private static ITypedElement RetrieveScheduleStepsReference()
        {
            return ((ITypedElement)(((ModelElement)(SafetyDocument.ClassInstance)).Resolve("ScheduleSteps")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ScheduleSteps property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ScheduleStepsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ScheduleSteps", e, _scheduleStepsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ScheduleSteps property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ScheduleStepsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ScheduleSteps", e, _scheduleStepsReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CLEARANCETAGS"))
            {
                return this._clearanceTags;
            }
            if ((feature == "SCHEDULESTEPS"))
            {
                return this._scheduleSteps;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "POWERSYSTEMRESOURCE"))
            {
                this.PowerSystemResource = ((IPowerSystemResource)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "PowerSystemResource"))
            {
                return new PowerSystemResourceProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PowerSystemResource"))
            {
                return new PowerSystemResourceProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Saf" +
                        "etyDocument")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SafetyDocument class
        /// </summary>
        public class SafetyDocumentReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SafetyDocument _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SafetyDocumentReferencedElementsCollection(SafetyDocument parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.PowerSystemResource != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ClearanceTags.Count);
                    count = (count + this._parent.ScheduleSteps.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PowerSystemResourceChanged += this.PropagateValueChanges;
                this._parent.ClearanceTags.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ScheduleSteps.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PowerSystemResourceChanged -= this.PropagateValueChanges;
                this._parent.ClearanceTags.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ScheduleSteps.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.PowerSystemResource == null))
                {
                    IPowerSystemResource powerSystemResourceCasted = item.As<IPowerSystemResource>();
                    if ((powerSystemResourceCasted != null))
                    {
                        this._parent.PowerSystemResource = powerSystemResourceCasted;
                        return;
                    }
                }
                IClearanceTag clearanceTagsCasted = item.As<IClearanceTag>();
                if ((clearanceTagsCasted != null))
                {
                    this._parent.ClearanceTags.Add(clearanceTagsCasted);
                }
                ISwitchingStep scheduleStepsCasted = item.As<ISwitchingStep>();
                if ((scheduleStepsCasted != null))
                {
                    this._parent.ScheduleSteps.Add(scheduleStepsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PowerSystemResource = null;
                this._parent.ClearanceTags.Clear();
                this._parent.ScheduleSteps.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.PowerSystemResource))
                {
                    return true;
                }
                if (this._parent.ClearanceTags.Contains(item))
                {
                    return true;
                }
                if (this._parent.ScheduleSteps.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.PowerSystemResource != null))
                {
                    array[arrayIndex] = this._parent.PowerSystemResource;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> clearanceTagsEnumerator = this._parent.ClearanceTags.GetEnumerator();
                try
                {
                    for (
                    ; clearanceTagsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = clearanceTagsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    clearanceTagsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> scheduleStepsEnumerator = this._parent.ScheduleSteps.GetEnumerator();
                try
                {
                    for (
                    ; scheduleStepsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = scheduleStepsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    scheduleStepsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.PowerSystemResource == item))
                {
                    this._parent.PowerSystemResource = null;
                    return true;
                }
                IClearanceTag clearanceTagItem = item.As<IClearanceTag>();
                if (((clearanceTagItem != null) 
                            && this._parent.ClearanceTags.Remove(clearanceTagItem)))
                {
                    return true;
                }
                ISwitchingStep switchingStepItem = item.As<ISwitchingStep>();
                if (((switchingStepItem != null) 
                            && this._parent.ScheduleSteps.Remove(switchingStepItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PowerSystemResource).Concat(this._parent.ClearanceTags).Concat(this._parent.ScheduleSteps).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PowerSystemResource property
        /// </summary>
        private sealed class PowerSystemResourceProxy : ModelPropertyChange<ISafetyDocument, IPowerSystemResource>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PowerSystemResourceProxy(ISafetyDocument modelElement) : 
                    base(modelElement, "PowerSystemResource")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPowerSystemResource Value
            {
                get
                {
                    return this.ModelElement.PowerSystemResource;
                }
                set
                {
                    this.ModelElement.PowerSystemResource = value;
                }
            }
        }
    }
}

