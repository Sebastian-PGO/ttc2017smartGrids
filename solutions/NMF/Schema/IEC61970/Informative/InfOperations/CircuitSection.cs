using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations
{
    
    
    /// <summary>
    /// The default implementation of the CircuitSection class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfOperations")]
    [XmlNamespacePrefixAttribute("cimInfOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Cir" +
        "cuitSection")]
    [DebuggerDisplayAttribute("CircuitSection {UUID}")]
    public partial class CircuitSection : IdentifiedObject, ICircuitSection, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ConnectionKind property
        /// </summary>
        private Nullable<CircuitConnectionKind> _connectionKind;
        
        private static Lazy<ITypedElement> _connectionKindAttribute = new Lazy<ITypedElement>(RetrieveConnectionKindAttribute);
        
        private static Lazy<ITypedElement> _circuitsReference = new Lazy<ITypedElement>(RetrieveCircuitsReference);
        
        /// <summary>
        /// The backing field for the Circuits property
        /// </summary>
        private ObservableAssociationOrderedSet<ICircuit> _circuits;
        
        private static Lazy<ITypedElement> _networkDataSetsReference = new Lazy<ITypedElement>(RetrieveNetworkDataSetsReference);
        
        /// <summary>
        /// The backing field for the NetworkDataSets property
        /// </summary>
        private CircuitSectionNetworkDataSetsCollection _networkDataSets;
        
        private static Lazy<ITypedElement> _powerSystemResourcesReference = new Lazy<ITypedElement>(RetrievePowerSystemResourcesReference);
        
        /// <summary>
        /// The backing field for the PowerSystemResources property
        /// </summary>
        private CircuitSectionPowerSystemResourcesCollection _powerSystemResources;
        
        private static Lazy<ITypedElement> _conductorAssetsReference = new Lazy<ITypedElement>(RetrieveConductorAssetsReference);
        
        /// <summary>
        /// The backing field for the ConductorAssets property
        /// </summary>
        private CircuitSectionConductorAssetsCollection _conductorAssets;
        
        private static IClass _classInstance;
        
        public CircuitSection()
        {
            this._circuits = new ObservableAssociationOrderedSet<ICircuit>();
            this._circuits.CollectionChanging += this.CircuitsCollectionChanging;
            this._circuits.CollectionChanged += this.CircuitsCollectionChanged;
            this._networkDataSets = new CircuitSectionNetworkDataSetsCollection(this);
            this._networkDataSets.CollectionChanging += this.NetworkDataSetsCollectionChanging;
            this._networkDataSets.CollectionChanged += this.NetworkDataSetsCollectionChanged;
            this._powerSystemResources = new CircuitSectionPowerSystemResourcesCollection(this);
            this._powerSystemResources.CollectionChanging += this.PowerSystemResourcesCollectionChanging;
            this._powerSystemResources.CollectionChanged += this.PowerSystemResourcesCollectionChanged;
            this._conductorAssets = new CircuitSectionConductorAssetsCollection(this);
            this._conductorAssets.CollectionChanging += this.ConductorAssetsCollectionChanging;
            this._conductorAssets.CollectionChanged += this.ConductorAssetsCollectionChanged;
        }
        
        /// <summary>
        /// The connectionKind property
        /// </summary>
        [XmlElementNameAttribute("connectionKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<CircuitConnectionKind> ConnectionKind
        {
            get
            {
                return this._connectionKind;
            }
            set
            {
                if ((this._connectionKind != value))
                {
                    Nullable<CircuitConnectionKind> old = this._connectionKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConnectionKindChanging(e);
                    this.OnPropertyChanging("ConnectionKind", e, _connectionKindAttribute);
                    this._connectionKind = value;
                    this.OnConnectionKindChanged(e);
                    this.OnPropertyChanged("ConnectionKind", e, _connectionKindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Circuits property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICircuit> Circuits
        {
            get
            {
                return this._circuits;
            }
        }
        
        /// <summary>
        /// The NetworkDataSets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CircuitSections")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<INetworkDataSet> NetworkDataSets
        {
            get
            {
                return this._networkDataSets;
            }
        }
        
        /// <summary>
        /// The PowerSystemResources property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CircuitSections")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IPowerSystemResource> PowerSystemResources
        {
            get
            {
                return this._powerSystemResources;
            }
        }
        
        /// <summary>
        /// The ConductorAssets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CircuitSection")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IConductorAsset> ConductorAssets
        {
            get
            {
                return this._conductorAssets;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CircuitSectionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Cir" +
                            "cuitSection")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ConnectionKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConnectionKindChanging;
        
        /// <summary>
        /// Gets fired when the ConnectionKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConnectionKindChanged;
        
        private static ITypedElement RetrieveConnectionKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CircuitSection.ClassInstance)).Resolve("connectionKind")));
        }
        
        /// <summary>
        /// Raises the ConnectionKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConnectionKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConnectionKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConnectionKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConnectionKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConnectionKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCircuitsReference()
        {
            return ((ITypedElement)(((ModelElement)(CircuitSection.ClassInstance)).Resolve("Circuits")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Circuits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CircuitsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Circuits", e, _circuitsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Circuits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CircuitsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Circuits", e, _circuitsReference);
        }
        
        private static ITypedElement RetrieveNetworkDataSetsReference()
        {
            return ((ITypedElement)(((ModelElement)(CircuitSection.ClassInstance)).Resolve("NetworkDataSets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the NetworkDataSets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NetworkDataSetsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("NetworkDataSets", e, _networkDataSetsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the NetworkDataSets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void NetworkDataSetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("NetworkDataSets", e, _networkDataSetsReference);
        }
        
        private static ITypedElement RetrievePowerSystemResourcesReference()
        {
            return ((ITypedElement)(((ModelElement)(CircuitSection.ClassInstance)).Resolve("PowerSystemResources")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PowerSystemResources property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PowerSystemResourcesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("PowerSystemResources", e, _powerSystemResourcesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PowerSystemResources property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PowerSystemResourcesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PowerSystemResources", e, _powerSystemResourcesReference);
        }
        
        private static ITypedElement RetrieveConductorAssetsReference()
        {
            return ((ITypedElement)(((ModelElement)(CircuitSection.ClassInstance)).Resolve("ConductorAssets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ConductorAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConductorAssetsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ConductorAssets", e, _conductorAssetsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ConductorAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConductorAssetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ConductorAssets", e, _conductorAssetsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CONNECTIONKIND"))
            {
                return this.ConnectionKind;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CIRCUITS"))
            {
                return this._circuits;
            }
            if ((feature == "NETWORKDATASETS"))
            {
                return this._networkDataSets;
            }
            if ((feature == "POWERSYSTEMRESOURCES"))
            {
                return this._powerSystemResources;
            }
            if ((feature == "CONDUCTORASSETS"))
            {
                return this._conductorAssets;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CONNECTIONKIND"))
            {
                this.ConnectionKind = ((CircuitConnectionKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfOperations/Cir" +
                        "cuitSection")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CircuitSection class
        /// </summary>
        public class CircuitSectionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CircuitSection _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CircuitSectionReferencedElementsCollection(CircuitSection parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Circuits.Count);
                    count = (count + this._parent.NetworkDataSets.Count);
                    count = (count + this._parent.PowerSystemResources.Count);
                    count = (count + this._parent.ConductorAssets.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Circuits.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.NetworkDataSets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PowerSystemResources.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ConductorAssets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Circuits.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.NetworkDataSets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PowerSystemResources.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ConductorAssets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ICircuit circuitsCasted = item.As<ICircuit>();
                if ((circuitsCasted != null))
                {
                    this._parent.Circuits.Add(circuitsCasted);
                }
                INetworkDataSet networkDataSetsCasted = item.As<INetworkDataSet>();
                if ((networkDataSetsCasted != null))
                {
                    this._parent.NetworkDataSets.Add(networkDataSetsCasted);
                }
                IPowerSystemResource powerSystemResourcesCasted = item.As<IPowerSystemResource>();
                if ((powerSystemResourcesCasted != null))
                {
                    this._parent.PowerSystemResources.Add(powerSystemResourcesCasted);
                }
                IConductorAsset conductorAssetsCasted = item.As<IConductorAsset>();
                if ((conductorAssetsCasted != null))
                {
                    this._parent.ConductorAssets.Add(conductorAssetsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Circuits.Clear();
                this._parent.NetworkDataSets.Clear();
                this._parent.PowerSystemResources.Clear();
                this._parent.ConductorAssets.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Circuits.Contains(item))
                {
                    return true;
                }
                if (this._parent.NetworkDataSets.Contains(item))
                {
                    return true;
                }
                if (this._parent.PowerSystemResources.Contains(item))
                {
                    return true;
                }
                if (this._parent.ConductorAssets.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> circuitsEnumerator = this._parent.Circuits.GetEnumerator();
                try
                {
                    for (
                    ; circuitsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = circuitsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    circuitsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> networkDataSetsEnumerator = this._parent.NetworkDataSets.GetEnumerator();
                try
                {
                    for (
                    ; networkDataSetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = networkDataSetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    networkDataSetsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> powerSystemResourcesEnumerator = this._parent.PowerSystemResources.GetEnumerator();
                try
                {
                    for (
                    ; powerSystemResourcesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = powerSystemResourcesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    powerSystemResourcesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> conductorAssetsEnumerator = this._parent.ConductorAssets.GetEnumerator();
                try
                {
                    for (
                    ; conductorAssetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = conductorAssetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    conductorAssetsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ICircuit circuitItem = item.As<ICircuit>();
                if (((circuitItem != null) 
                            && this._parent.Circuits.Remove(circuitItem)))
                {
                    return true;
                }
                INetworkDataSet networkDataSetItem = item.As<INetworkDataSet>();
                if (((networkDataSetItem != null) 
                            && this._parent.NetworkDataSets.Remove(networkDataSetItem)))
                {
                    return true;
                }
                IPowerSystemResource powerSystemResourceItem = item.As<IPowerSystemResource>();
                if (((powerSystemResourceItem != null) 
                            && this._parent.PowerSystemResources.Remove(powerSystemResourceItem)))
                {
                    return true;
                }
                IConductorAsset conductorAssetItem = item.As<IConductorAsset>();
                if (((conductorAssetItem != null) 
                            && this._parent.ConductorAssets.Remove(conductorAssetItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Circuits).Concat(this._parent.NetworkDataSets).Concat(this._parent.PowerSystemResources).Concat(this._parent.ConductorAssets).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the connectionKind property
        /// </summary>
        private sealed class ConnectionKindProxy : ModelPropertyChange<ICircuitSection, Nullable<CircuitConnectionKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConnectionKindProxy(ICircuitSection modelElement) : 
                    base(modelElement, "connectionKind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<CircuitConnectionKind> Value
            {
                get
                {
                    return this.ModelElement.ConnectionKind;
                }
                set
                {
                    this.ModelElement.ConnectionKind = value;
                }
            }
        }
    }
}

