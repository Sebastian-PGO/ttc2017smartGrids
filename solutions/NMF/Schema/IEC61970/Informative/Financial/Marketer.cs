using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial
{
    
    
    /// <summary>
    /// The default implementation of the Marketer class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Financial")]
    [XmlNamespacePrefixAttribute("cimFinancial")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Financial/Markete" +
        "r")]
    [DebuggerDisplayAttribute("Marketer {UUID}")]
    public partial class Marketer : ErpOrganisation, IMarketer, IModelElement
    {
        
        private static Lazy<ITypedElement> _resells_EnergyProductReference = new Lazy<ITypedElement>(RetrieveResells_EnergyProductReference);
        
        /// <summary>
        /// The backing field for the Resells_EnergyProduct property
        /// </summary>
        private MarketerResells_EnergyProductCollection _resells_EnergyProduct;
        
        private static Lazy<ITypedElement> _heldByReference = new Lazy<ITypedElement>(RetrieveHeldByReference);
        
        /// <summary>
        /// The backing field for the HeldBy property
        /// </summary>
        private MarketerHeldByCollection _heldBy;
        
        private static Lazy<ITypedElement> _holdsTitleTo_EnergyProductsReference = new Lazy<ITypedElement>(RetrieveHoldsTitleTo_EnergyProductsReference);
        
        /// <summary>
        /// The backing field for the HoldsTitleTo_EnergyProducts property
        /// </summary>
        private MarketerHoldsTitleTo_EnergyProductsCollection _holdsTitleTo_EnergyProducts;
        
        private static Lazy<ITypedElement> _resoldByReference = new Lazy<ITypedElement>(RetrieveResoldByReference);
        
        /// <summary>
        /// The backing field for the ResoldBy property
        /// </summary>
        private IServiceReservation _resoldBy;
        
        private static IClass _classInstance;
        
        public Marketer()
        {
            this._resells_EnergyProduct = new MarketerResells_EnergyProductCollection(this);
            this._resells_EnergyProduct.CollectionChanging += this.Resells_EnergyProductCollectionChanging;
            this._resells_EnergyProduct.CollectionChanged += this.Resells_EnergyProductCollectionChanged;
            this._heldBy = new MarketerHeldByCollection(this);
            this._heldBy.CollectionChanging += this.HeldByCollectionChanging;
            this._heldBy.CollectionChanged += this.HeldByCollectionChanged;
            this._holdsTitleTo_EnergyProducts = new MarketerHoldsTitleTo_EnergyProductsCollection(this);
            this._holdsTitleTo_EnergyProducts.CollectionChanging += this.HoldsTitleTo_EnergyProductsCollectionChanging;
            this._holdsTitleTo_EnergyProducts.CollectionChanged += this.HoldsTitleTo_EnergyProductsCollectionChanged;
        }
        
        /// <summary>
        /// The Resells_EnergyProduct property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ResoldBy_Marketers")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEnergyProduct> Resells_EnergyProduct
        {
            get
            {
                return this._resells_EnergyProduct;
            }
        }
        
        /// <summary>
        /// The HeldBy property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Holds")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IServiceReservation> HeldBy
        {
            get
            {
                return this._heldBy;
            }
        }
        
        /// <summary>
        /// The HoldsTitleTo_EnergyProducts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TitleHeldBy_Marketer")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEnergyProduct> HoldsTitleTo_EnergyProducts
        {
            get
            {
                return this._holdsTitleTo_EnergyProducts;
            }
        }
        
        /// <summary>
        /// The ResoldBy property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Resells")]
        public virtual IServiceReservation ResoldBy
        {
            get
            {
                return this._resoldBy;
            }
            set
            {
                if ((this._resoldBy != value))
                {
                    IServiceReservation old = this._resoldBy;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnResoldByChanging(e);
                    this.OnPropertyChanging("ResoldBy", e, _resoldByReference);
                    this._resoldBy = value;
                    if ((old != null))
                    {
                        old.Resells = null;
                        old.Deleted -= this.OnResetResoldBy;
                    }
                    if ((value != null))
                    {
                        value.Resells = this;
                        value.Deleted += this.OnResetResoldBy;
                    }
                    this.OnResoldByChanged(e);
                    this.OnPropertyChanged("ResoldBy", e, _resoldByReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MarketerReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Financial/Markete" +
                            "r")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ResoldBy property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ResoldByChanging;
        
        /// <summary>
        /// Gets fired when the ResoldBy property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ResoldByChanged;
        
        private static ITypedElement RetrieveResells_EnergyProductReference()
        {
            return ((ITypedElement)(((ModelElement)(Marketer.ClassInstance)).Resolve("Resells_EnergyProduct")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Resells_EnergyProduct property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Resells_EnergyProductCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Resells_EnergyProduct", e, _resells_EnergyProductReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Resells_EnergyProduct property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void Resells_EnergyProductCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Resells_EnergyProduct", e, _resells_EnergyProductReference);
        }
        
        private static ITypedElement RetrieveHeldByReference()
        {
            return ((ITypedElement)(((ModelElement)(Marketer.ClassInstance)).Resolve("HeldBy")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the HeldBy property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HeldByCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("HeldBy", e, _heldByReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the HeldBy property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HeldByCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("HeldBy", e, _heldByReference);
        }
        
        private static ITypedElement RetrieveHoldsTitleTo_EnergyProductsReference()
        {
            return ((ITypedElement)(((ModelElement)(Marketer.ClassInstance)).Resolve("HoldsTitleTo_EnergyProducts")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the HoldsTitleTo_EnergyProducts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HoldsTitleTo_EnergyProductsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("HoldsTitleTo_EnergyProducts", e, _holdsTitleTo_EnergyProductsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the HoldsTitleTo_EnergyProducts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HoldsTitleTo_EnergyProductsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("HoldsTitleTo_EnergyProducts", e, _holdsTitleTo_EnergyProductsReference);
        }
        
        private static ITypedElement RetrieveResoldByReference()
        {
            return ((ITypedElement)(((ModelElement)(Marketer.ClassInstance)).Resolve("ResoldBy")));
        }
        
        /// <summary>
        /// Raises the ResoldByChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResoldByChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ResoldByChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ResoldByChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResoldByChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ResoldByChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ResoldBy property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetResoldBy(object sender, System.EventArgs eventArgs)
        {
            this.ResoldBy = null;
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "RESELLS_ENERGYPRODUCT"))
            {
                return this._resells_EnergyProduct;
            }
            if ((feature == "HELDBY"))
            {
                return this._heldBy;
            }
            if ((feature == "HOLDSTITLETO_ENERGYPRODUCTS"))
            {
                return this._holdsTitleTo_EnergyProducts;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RESOLDBY"))
            {
                this.ResoldBy = ((IServiceReservation)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ResoldBy"))
            {
                return new ResoldByProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ResoldBy"))
            {
                return new ResoldByProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Financial/Markete" +
                        "r")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Marketer class
        /// </summary>
        public class MarketerReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Marketer _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MarketerReferencedElementsCollection(Marketer parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Resells_EnergyProduct.Count);
                    count = (count + this._parent.HeldBy.Count);
                    count = (count + this._parent.HoldsTitleTo_EnergyProducts.Count);
                    if ((this._parent.ResoldBy != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Resells_EnergyProduct.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.HeldBy.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.HoldsTitleTo_EnergyProducts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ResoldByChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Resells_EnergyProduct.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.HeldBy.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.HoldsTitleTo_EnergyProducts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ResoldByChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IEnergyProduct resells_EnergyProductCasted = item.As<IEnergyProduct>();
                if ((resells_EnergyProductCasted != null))
                {
                    this._parent.Resells_EnergyProduct.Add(resells_EnergyProductCasted);
                }
                IServiceReservation heldByCasted = item.As<IServiceReservation>();
                if ((heldByCasted != null))
                {
                    this._parent.HeldBy.Add(heldByCasted);
                }
                IEnergyProduct holdsTitleTo_EnergyProductsCasted = item.As<IEnergyProduct>();
                if ((holdsTitleTo_EnergyProductsCasted != null))
                {
                    this._parent.HoldsTitleTo_EnergyProducts.Add(holdsTitleTo_EnergyProductsCasted);
                }
                if ((this._parent.ResoldBy == null))
                {
                    IServiceReservation resoldByCasted = item.As<IServiceReservation>();
                    if ((resoldByCasted != null))
                    {
                        this._parent.ResoldBy = resoldByCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Resells_EnergyProduct.Clear();
                this._parent.HeldBy.Clear();
                this._parent.HoldsTitleTo_EnergyProducts.Clear();
                this._parent.ResoldBy = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Resells_EnergyProduct.Contains(item))
                {
                    return true;
                }
                if (this._parent.HeldBy.Contains(item))
                {
                    return true;
                }
                if (this._parent.HoldsTitleTo_EnergyProducts.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ResoldBy))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> resells_EnergyProductEnumerator = this._parent.Resells_EnergyProduct.GetEnumerator();
                try
                {
                    for (
                    ; resells_EnergyProductEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = resells_EnergyProductEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    resells_EnergyProductEnumerator.Dispose();
                }
                IEnumerator<IModelElement> heldByEnumerator = this._parent.HeldBy.GetEnumerator();
                try
                {
                    for (
                    ; heldByEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = heldByEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    heldByEnumerator.Dispose();
                }
                IEnumerator<IModelElement> holdsTitleTo_EnergyProductsEnumerator = this._parent.HoldsTitleTo_EnergyProducts.GetEnumerator();
                try
                {
                    for (
                    ; holdsTitleTo_EnergyProductsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = holdsTitleTo_EnergyProductsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    holdsTitleTo_EnergyProductsEnumerator.Dispose();
                }
                if ((this._parent.ResoldBy != null))
                {
                    array[arrayIndex] = this._parent.ResoldBy;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IEnergyProduct energyProductItem = item.As<IEnergyProduct>();
                if (((energyProductItem != null) 
                            && this._parent.Resells_EnergyProduct.Remove(energyProductItem)))
                {
                    return true;
                }
                IServiceReservation serviceReservationItem = item.As<IServiceReservation>();
                if (((serviceReservationItem != null) 
                            && this._parent.HeldBy.Remove(serviceReservationItem)))
                {
                    return true;
                }
                if (((energyProductItem != null) 
                            && this._parent.HoldsTitleTo_EnergyProducts.Remove(energyProductItem)))
                {
                    return true;
                }
                if ((this._parent.ResoldBy == item))
                {
                    this._parent.ResoldBy = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Resells_EnergyProduct).Concat(this._parent.HeldBy).Concat(this._parent.HoldsTitleTo_EnergyProducts).Concat(this._parent.ResoldBy).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ResoldBy property
        /// </summary>
        private sealed class ResoldByProxy : ModelPropertyChange<IMarketer, IServiceReservation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ResoldByProxy(IMarketer modelElement) : 
                    base(modelElement, "ResoldBy")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IServiceReservation Value
            {
                get
                {
                    return this.ModelElement.ResoldBy;
                }
                set
                {
                    this.ModelElement.ResoldBy = value;
                }
            }
        }
    }
}

