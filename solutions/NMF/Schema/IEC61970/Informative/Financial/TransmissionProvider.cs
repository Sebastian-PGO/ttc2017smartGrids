using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial
{
    
    
    /// <summary>
    /// The default implementation of the TransmissionProvider class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Financial")]
    [XmlNamespacePrefixAttribute("cimFinancial")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Financial/Transmi" +
        "ssionProvider")]
    [DebuggerDisplayAttribute("TransmissionProvider {UUID}")]
    public partial class TransmissionProvider : ErpOrganisation, ITransmissionProvider, IModelElement
    {
        
        private static Lazy<ITypedElement> _servicePointReference = new Lazy<ITypedElement>(RetrieveServicePointReference);
        
        /// <summary>
        /// The backing field for the ServicePoint property
        /// </summary>
        private TransmissionProviderServicePointCollection _servicePoint;
        
        private static Lazy<ITypedElement> _ancillaryServicesReference = new Lazy<ITypedElement>(RetrieveAncillaryServicesReference);
        
        /// <summary>
        /// The backing field for the AncillaryServices property
        /// </summary>
        private TransmissionProviderAncillaryServicesCollection _ancillaryServices;
        
        private static Lazy<ITypedElement> _forReference = new Lazy<ITypedElement>(RetrieveForReference);
        
        /// <summary>
        /// The backing field for the For property
        /// </summary>
        private TransmissionProviderForCollection _for;
        
        private static Lazy<ITypedElement> _offeredByReference = new Lazy<ITypedElement>(RetrieveOfferedByReference);
        
        /// <summary>
        /// The backing field for the OfferedBy property
        /// </summary>
        private TransmissionProviderOfferedByCollection _offeredBy;
        
        private static Lazy<ITypedElement> _flowgateReference = new Lazy<ITypedElement>(RetrieveFlowgateReference);
        
        /// <summary>
        /// The backing field for the Flowgate property
        /// </summary>
        private TransmissionProviderFlowgateCollection _flowgate;
        
        private static Lazy<ITypedElement> _soldByReference = new Lazy<ITypedElement>(RetrieveSoldByReference);
        
        /// <summary>
        /// The backing field for the SoldBy property
        /// </summary>
        private TransmissionProviderSoldByCollection _soldBy;
        
        private static Lazy<ITypedElement> _transmissionProductsReference = new Lazy<ITypedElement>(RetrieveTransmissionProductsReference);
        
        /// <summary>
        /// The backing field for the TransmissionProducts property
        /// </summary>
        private TransmissionProviderTransmissionProductsCollection _transmissionProducts;
        
        private static IClass _classInstance;
        
        public TransmissionProvider()
        {
            this._servicePoint = new TransmissionProviderServicePointCollection(this);
            this._servicePoint.CollectionChanging += this.ServicePointCollectionChanging;
            this._servicePoint.CollectionChanged += this.ServicePointCollectionChanged;
            this._ancillaryServices = new TransmissionProviderAncillaryServicesCollection(this);
            this._ancillaryServices.CollectionChanging += this.AncillaryServicesCollectionChanging;
            this._ancillaryServices.CollectionChanged += this.AncillaryServicesCollectionChanged;
            this._for = new TransmissionProviderForCollection(this);
            this._for.CollectionChanging += this.ForCollectionChanging;
            this._for.CollectionChanged += this.ForCollectionChanged;
            this._offeredBy = new TransmissionProviderOfferedByCollection(this);
            this._offeredBy.CollectionChanging += this.OfferedByCollectionChanging;
            this._offeredBy.CollectionChanged += this.OfferedByCollectionChanged;
            this._flowgate = new TransmissionProviderFlowgateCollection(this);
            this._flowgate.CollectionChanging += this.FlowgateCollectionChanging;
            this._flowgate.CollectionChanged += this.FlowgateCollectionChanged;
            this._soldBy = new TransmissionProviderSoldByCollection(this);
            this._soldBy.CollectionChanging += this.SoldByCollectionChanging;
            this._soldBy.CollectionChanged += this.SoldByCollectionChanged;
            this._transmissionProducts = new TransmissionProviderTransmissionProductsCollection(this);
            this._transmissionProducts.CollectionChanging += this.TransmissionProductsCollectionChanging;
            this._transmissionProducts.CollectionChanged += this.TransmissionProductsCollectionChanged;
        }
        
        /// <summary>
        /// The ServicePoint property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TransmissionProvider")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IServicePoint> ServicePoint
        {
            get
            {
                return this._servicePoint;
            }
        }
        
        /// <summary>
        /// The AncillaryServices property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TransmissionProviders")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAncillaryService> AncillaryServices
        {
            get
            {
                return this._ancillaryServices;
            }
        }
        
        /// <summary>
        /// The For property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("HasLoss_")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILossProfile> For
        {
            get
            {
                return this._for;
            }
        }
        
        /// <summary>
        /// The OfferedBy property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Offers")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransmissionService> OfferedBy
        {
            get
            {
                return this._offeredBy;
            }
        }
        
        /// <summary>
        /// The Flowgate property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TransmissionProvider")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IFlowgate> Flowgate
        {
            get
            {
                return this._flowgate;
            }
        }
        
        /// <summary>
        /// The SoldBy property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Sells")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IServiceReservation> SoldBy
        {
            get
            {
                return this._soldBy;
            }
        }
        
        /// <summary>
        /// The TransmissionProducts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TransmissionProvider")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransmissionProduct> TransmissionProducts
        {
            get
            {
                return this._transmissionProducts;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TransmissionProviderReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Financial/Transmi" +
                            "ssionProvider")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveServicePointReference()
        {
            return ((ITypedElement)(((ModelElement)(TransmissionProvider.ClassInstance)).Resolve("ServicePoint")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ServicePoint property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ServicePointCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ServicePoint", e, _servicePointReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ServicePoint property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ServicePointCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ServicePoint", e, _servicePointReference);
        }
        
        private static ITypedElement RetrieveAncillaryServicesReference()
        {
            return ((ITypedElement)(((ModelElement)(TransmissionProvider.ClassInstance)).Resolve("AncillaryServices")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AncillaryServices property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AncillaryServicesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("AncillaryServices", e, _ancillaryServicesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AncillaryServices property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AncillaryServicesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AncillaryServices", e, _ancillaryServicesReference);
        }
        
        private static ITypedElement RetrieveForReference()
        {
            return ((ITypedElement)(((ModelElement)(TransmissionProvider.ClassInstance)).Resolve("For")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the For property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ForCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("For", e, _forReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the For property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ForCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("For", e, _forReference);
        }
        
        private static ITypedElement RetrieveOfferedByReference()
        {
            return ((ITypedElement)(((ModelElement)(TransmissionProvider.ClassInstance)).Resolve("OfferedBy")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OfferedBy property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OfferedByCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("OfferedBy", e, _offeredByReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OfferedBy property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OfferedByCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OfferedBy", e, _offeredByReference);
        }
        
        private static ITypedElement RetrieveFlowgateReference()
        {
            return ((ITypedElement)(((ModelElement)(TransmissionProvider.ClassInstance)).Resolve("Flowgate")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Flowgate property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FlowgateCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Flowgate", e, _flowgateReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Flowgate property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FlowgateCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Flowgate", e, _flowgateReference);
        }
        
        private static ITypedElement RetrieveSoldByReference()
        {
            return ((ITypedElement)(((ModelElement)(TransmissionProvider.ClassInstance)).Resolve("SoldBy")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SoldBy property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SoldByCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("SoldBy", e, _soldByReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SoldBy property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SoldByCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SoldBy", e, _soldByReference);
        }
        
        private static ITypedElement RetrieveTransmissionProductsReference()
        {
            return ((ITypedElement)(((ModelElement)(TransmissionProvider.ClassInstance)).Resolve("TransmissionProducts")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TransmissionProducts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransmissionProductsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("TransmissionProducts", e, _transmissionProductsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TransmissionProducts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransmissionProductsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TransmissionProducts", e, _transmissionProductsReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SERVICEPOINT"))
            {
                return this._servicePoint;
            }
            if ((feature == "ANCILLARYSERVICES"))
            {
                return this._ancillaryServices;
            }
            if ((feature == "FOR"))
            {
                return this._for;
            }
            if ((feature == "OFFEREDBY"))
            {
                return this._offeredBy;
            }
            if ((feature == "FLOWGATE"))
            {
                return this._flowgate;
            }
            if ((feature == "SOLDBY"))
            {
                return this._soldBy;
            }
            if ((feature == "TRANSMISSIONPRODUCTS"))
            {
                return this._transmissionProducts;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Financial/Transmi" +
                        "ssionProvider")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TransmissionProvider class
        /// </summary>
        public class TransmissionProviderReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TransmissionProvider _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TransmissionProviderReferencedElementsCollection(TransmissionProvider parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ServicePoint.Count);
                    count = (count + this._parent.AncillaryServices.Count);
                    count = (count + this._parent.For.Count);
                    count = (count + this._parent.OfferedBy.Count);
                    count = (count + this._parent.Flowgate.Count);
                    count = (count + this._parent.SoldBy.Count);
                    count = (count + this._parent.TransmissionProducts.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ServicePoint.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AncillaryServices.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.For.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.OfferedBy.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Flowgate.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SoldBy.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TransmissionProducts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ServicePoint.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AncillaryServices.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.For.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.OfferedBy.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Flowgate.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SoldBy.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TransmissionProducts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IServicePoint servicePointCasted = item.As<IServicePoint>();
                if ((servicePointCasted != null))
                {
                    this._parent.ServicePoint.Add(servicePointCasted);
                }
                IAncillaryService ancillaryServicesCasted = item.As<IAncillaryService>();
                if ((ancillaryServicesCasted != null))
                {
                    this._parent.AncillaryServices.Add(ancillaryServicesCasted);
                }
                ILossProfile forCasted = item.As<ILossProfile>();
                if ((forCasted != null))
                {
                    this._parent.For.Add(forCasted);
                }
                ITransmissionService offeredByCasted = item.As<ITransmissionService>();
                if ((offeredByCasted != null))
                {
                    this._parent.OfferedBy.Add(offeredByCasted);
                }
                IFlowgate flowgateCasted = item.As<IFlowgate>();
                if ((flowgateCasted != null))
                {
                    this._parent.Flowgate.Add(flowgateCasted);
                }
                IServiceReservation soldByCasted = item.As<IServiceReservation>();
                if ((soldByCasted != null))
                {
                    this._parent.SoldBy.Add(soldByCasted);
                }
                ITransmissionProduct transmissionProductsCasted = item.As<ITransmissionProduct>();
                if ((transmissionProductsCasted != null))
                {
                    this._parent.TransmissionProducts.Add(transmissionProductsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ServicePoint.Clear();
                this._parent.AncillaryServices.Clear();
                this._parent.For.Clear();
                this._parent.OfferedBy.Clear();
                this._parent.Flowgate.Clear();
                this._parent.SoldBy.Clear();
                this._parent.TransmissionProducts.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ServicePoint.Contains(item))
                {
                    return true;
                }
                if (this._parent.AncillaryServices.Contains(item))
                {
                    return true;
                }
                if (this._parent.For.Contains(item))
                {
                    return true;
                }
                if (this._parent.OfferedBy.Contains(item))
                {
                    return true;
                }
                if (this._parent.Flowgate.Contains(item))
                {
                    return true;
                }
                if (this._parent.SoldBy.Contains(item))
                {
                    return true;
                }
                if (this._parent.TransmissionProducts.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> servicePointEnumerator = this._parent.ServicePoint.GetEnumerator();
                try
                {
                    for (
                    ; servicePointEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = servicePointEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    servicePointEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ancillaryServicesEnumerator = this._parent.AncillaryServices.GetEnumerator();
                try
                {
                    for (
                    ; ancillaryServicesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ancillaryServicesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ancillaryServicesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> forEnumerator = this._parent.For.GetEnumerator();
                try
                {
                    for (
                    ; forEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = forEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    forEnumerator.Dispose();
                }
                IEnumerator<IModelElement> offeredByEnumerator = this._parent.OfferedBy.GetEnumerator();
                try
                {
                    for (
                    ; offeredByEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = offeredByEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    offeredByEnumerator.Dispose();
                }
                IEnumerator<IModelElement> flowgateEnumerator = this._parent.Flowgate.GetEnumerator();
                try
                {
                    for (
                    ; flowgateEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = flowgateEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    flowgateEnumerator.Dispose();
                }
                IEnumerator<IModelElement> soldByEnumerator = this._parent.SoldBy.GetEnumerator();
                try
                {
                    for (
                    ; soldByEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = soldByEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    soldByEnumerator.Dispose();
                }
                IEnumerator<IModelElement> transmissionProductsEnumerator = this._parent.TransmissionProducts.GetEnumerator();
                try
                {
                    for (
                    ; transmissionProductsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = transmissionProductsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    transmissionProductsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IServicePoint servicePointItem = item.As<IServicePoint>();
                if (((servicePointItem != null) 
                            && this._parent.ServicePoint.Remove(servicePointItem)))
                {
                    return true;
                }
                IAncillaryService ancillaryServiceItem = item.As<IAncillaryService>();
                if (((ancillaryServiceItem != null) 
                            && this._parent.AncillaryServices.Remove(ancillaryServiceItem)))
                {
                    return true;
                }
                ILossProfile lossProfileItem = item.As<ILossProfile>();
                if (((lossProfileItem != null) 
                            && this._parent.For.Remove(lossProfileItem)))
                {
                    return true;
                }
                ITransmissionService transmissionServiceItem = item.As<ITransmissionService>();
                if (((transmissionServiceItem != null) 
                            && this._parent.OfferedBy.Remove(transmissionServiceItem)))
                {
                    return true;
                }
                IFlowgate flowgateItem = item.As<IFlowgate>();
                if (((flowgateItem != null) 
                            && this._parent.Flowgate.Remove(flowgateItem)))
                {
                    return true;
                }
                IServiceReservation serviceReservationItem = item.As<IServiceReservation>();
                if (((serviceReservationItem != null) 
                            && this._parent.SoldBy.Remove(serviceReservationItem)))
                {
                    return true;
                }
                ITransmissionProduct transmissionProductItem = item.As<ITransmissionProduct>();
                if (((transmissionProductItem != null) 
                            && this._parent.TransmissionProducts.Remove(transmissionProductItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ServicePoint).Concat(this._parent.AncillaryServices).Concat(this._parent.For).Concat(this._parent.OfferedBy).Concat(this._parent.Flowgate).Concat(this._parent.SoldBy).Concat(this._parent.TransmissionProducts).GetEnumerator();
            }
        }
    }
}

