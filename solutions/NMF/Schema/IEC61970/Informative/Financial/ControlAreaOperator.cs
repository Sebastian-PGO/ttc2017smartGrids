using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Reservation;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial
{
    
    
    /// <summary>
    /// The default implementation of the ControlAreaOperator class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Financial")]
    [XmlNamespacePrefixAttribute("cimFinancial")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Financial/Control" +
        "AreaOperator")]
    [DebuggerDisplayAttribute("ControlAreaOperator {UUID}")]
    public partial class ControlAreaOperator : ErpOrganisation, IControlAreaOperator, IModelElement
    {
        
        private static Lazy<ITypedElement> _ancillaryServiceReference = new Lazy<ITypedElement>(RetrieveAncillaryServiceReference);
        
        /// <summary>
        /// The backing field for the AncillaryService property
        /// </summary>
        private ControlAreaOperatorAncillaryServiceCollection _ancillaryService;
        
        private static Lazy<ITypedElement> _tieLinesReference = new Lazy<ITypedElement>(RetrieveTieLinesReference);
        
        /// <summary>
        /// The backing field for the TieLines property
        /// </summary>
        private ControlAreaOperatorTieLinesCollection _tieLines;
        
        private static Lazy<ITypedElement> _controlledByReference = new Lazy<ITypedElement>(RetrieveControlledByReference);
        
        /// <summary>
        /// The backing field for the ControlledBy property
        /// </summary>
        private IHostControlArea _controlledBy;
        
        private static IClass _classInstance;
        
        public ControlAreaOperator()
        {
            this._ancillaryService = new ControlAreaOperatorAncillaryServiceCollection(this);
            this._ancillaryService.CollectionChanging += this.AncillaryServiceCollectionChanging;
            this._ancillaryService.CollectionChanged += this.AncillaryServiceCollectionChanged;
            this._tieLines = new ControlAreaOperatorTieLinesCollection(this);
            this._tieLines.CollectionChanging += this.TieLinesCollectionChanging;
            this._tieLines.CollectionChanged += this.TieLinesCollectionChanged;
        }
        
        /// <summary>
        /// The AncillaryService property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ControlAreaOperator")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAncillaryService> AncillaryService
        {
            get
            {
                return this._ancillaryService;
            }
        }
        
        /// <summary>
        /// The TieLines property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ControlAreaOperators")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITieLine> TieLines
        {
            get
            {
                return this._tieLines;
            }
        }
        
        /// <summary>
        /// The ControlledBy property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Controls")]
        public virtual IHostControlArea ControlledBy
        {
            get
            {
                return this._controlledBy;
            }
            set
            {
                if ((this._controlledBy != value))
                {
                    IHostControlArea old = this._controlledBy;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnControlledByChanging(e);
                    this.OnPropertyChanging("ControlledBy", e, _controlledByReference);
                    this._controlledBy = value;
                    if ((old != null))
                    {
                        old.Controls = null;
                        old.Deleted -= this.OnResetControlledBy;
                    }
                    if ((value != null))
                    {
                        value.Controls = this;
                        value.Deleted += this.OnResetControlledBy;
                    }
                    this.OnControlledByChanged(e);
                    this.OnPropertyChanged("ControlledBy", e, _controlledByReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ControlAreaOperatorReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Financial/Control" +
                            "AreaOperator")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ControlledBy property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ControlledByChanging;
        
        /// <summary>
        /// Gets fired when the ControlledBy property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ControlledByChanged;
        
        private static ITypedElement RetrieveAncillaryServiceReference()
        {
            return ((ITypedElement)(((ModelElement)(ControlAreaOperator.ClassInstance)).Resolve("AncillaryService")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AncillaryService property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AncillaryServiceCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("AncillaryService", e, _ancillaryServiceReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AncillaryService property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AncillaryServiceCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AncillaryService", e, _ancillaryServiceReference);
        }
        
        private static ITypedElement RetrieveTieLinesReference()
        {
            return ((ITypedElement)(((ModelElement)(ControlAreaOperator.ClassInstance)).Resolve("TieLines")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TieLines property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TieLinesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("TieLines", e, _tieLinesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TieLines property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TieLinesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TieLines", e, _tieLinesReference);
        }
        
        private static ITypedElement RetrieveControlledByReference()
        {
            return ((ITypedElement)(((ModelElement)(ControlAreaOperator.ClassInstance)).Resolve("ControlledBy")));
        }
        
        /// <summary>
        /// Raises the ControlledByChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnControlledByChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ControlledByChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ControlledByChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnControlledByChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ControlledByChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ControlledBy property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetControlledBy(object sender, System.EventArgs eventArgs)
        {
            this.ControlledBy = null;
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ANCILLARYSERVICE"))
            {
                return this._ancillaryService;
            }
            if ((feature == "TIELINES"))
            {
                return this._tieLines;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CONTROLLEDBY"))
            {
                this.ControlledBy = ((IHostControlArea)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ControlledBy"))
            {
                return new ControlledByProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ControlledBy"))
            {
                return new ControlledByProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/Financial/Control" +
                        "AreaOperator")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ControlAreaOperator class
        /// </summary>
        public class ControlAreaOperatorReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ControlAreaOperator _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ControlAreaOperatorReferencedElementsCollection(ControlAreaOperator parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.AncillaryService.Count);
                    count = (count + this._parent.TieLines.Count);
                    if ((this._parent.ControlledBy != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AncillaryService.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TieLines.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ControlledByChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AncillaryService.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TieLines.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ControlledByChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IAncillaryService ancillaryServiceCasted = item.As<IAncillaryService>();
                if ((ancillaryServiceCasted != null))
                {
                    this._parent.AncillaryService.Add(ancillaryServiceCasted);
                }
                ITieLine tieLinesCasted = item.As<ITieLine>();
                if ((tieLinesCasted != null))
                {
                    this._parent.TieLines.Add(tieLinesCasted);
                }
                if ((this._parent.ControlledBy == null))
                {
                    IHostControlArea controlledByCasted = item.As<IHostControlArea>();
                    if ((controlledByCasted != null))
                    {
                        this._parent.ControlledBy = controlledByCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AncillaryService.Clear();
                this._parent.TieLines.Clear();
                this._parent.ControlledBy = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.AncillaryService.Contains(item))
                {
                    return true;
                }
                if (this._parent.TieLines.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ControlledBy))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> ancillaryServiceEnumerator = this._parent.AncillaryService.GetEnumerator();
                try
                {
                    for (
                    ; ancillaryServiceEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ancillaryServiceEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ancillaryServiceEnumerator.Dispose();
                }
                IEnumerator<IModelElement> tieLinesEnumerator = this._parent.TieLines.GetEnumerator();
                try
                {
                    for (
                    ; tieLinesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = tieLinesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    tieLinesEnumerator.Dispose();
                }
                if ((this._parent.ControlledBy != null))
                {
                    array[arrayIndex] = this._parent.ControlledBy;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IAncillaryService ancillaryServiceItem = item.As<IAncillaryService>();
                if (((ancillaryServiceItem != null) 
                            && this._parent.AncillaryService.Remove(ancillaryServiceItem)))
                {
                    return true;
                }
                ITieLine tieLineItem = item.As<ITieLine>();
                if (((tieLineItem != null) 
                            && this._parent.TieLines.Remove(tieLineItem)))
                {
                    return true;
                }
                if ((this._parent.ControlledBy == item))
                {
                    this._parent.ControlledBy = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AncillaryService).Concat(this._parent.TieLines).Concat(this._parent.ControlledBy).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ControlledBy property
        /// </summary>
        private sealed class ControlledByProxy : ModelPropertyChange<IControlAreaOperator, IHostControlArea>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ControlledByProxy(IControlAreaOperator modelElement) : 
                    base(modelElement, "ControlledBy")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHostControlArea Value
            {
                get
                {
                    return this.ModelElement.ControlledBy;
                }
                set
                {
                    this.ModelElement.ControlledBy = value;
                }
            }
        }
    }
}

