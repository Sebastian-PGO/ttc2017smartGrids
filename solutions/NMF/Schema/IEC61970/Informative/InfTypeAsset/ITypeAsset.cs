using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset
{
    
    
    /// <summary>
    /// The public interface for TypeAsset
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(TypeAsset))]
    [XmlDefaultImplementationTypeAttribute(typeof(TypeAsset))]
    public interface ITypeAsset : IModelElement, IIdentifiedObject
    {
        
        /// <summary>
        /// The stockItem property
        /// </summary>
        bool StockItem
        {
            get;
            set;
        }
        
        /// <summary>
        /// The estimatedUnitCost property
        /// </summary>
        float EstimatedUnitCost
        {
            get;
            set;
        }
        
        /// <summary>
        /// The quantity property
        /// </summary>
        string Quantity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TypeAssetCatalogue property
        /// </summary>
        ITypeAssetCatalogue TypeAssetCatalogue
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ErpBomItemDatas property
        /// </summary>
        IOrderedSetExpression<IErpBomItemData> ErpBomItemDatas
        {
            get;
        }
        
        /// <summary>
        /// The AssetInfo property
        /// </summary>
        IAssetInfo AssetInfo
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ErpReqLineItems property
        /// </summary>
        IOrderedSetExpression<IErpReqLineItem> ErpReqLineItems
        {
            get;
        }
        
        /// <summary>
        /// The ErpInventoryIssues property
        /// </summary>
        IOrderedSetExpression<IErpIssueInventory> ErpInventoryIssues
        {
            get;
        }
        
        /// <summary>
        /// The CUWorkEquipmentAsset property
        /// </summary>
        ICUWorkEquipmentItem CUWorkEquipmentAsset
        {
            get;
            set;
        }
        
        /// <summary>
        /// The AssetModels property
        /// </summary>
        IOrderedSetExpression<IAssetModel> AssetModels
        {
            get;
        }
        
        /// <summary>
        /// The CUAsset property
        /// </summary>
        ICUAsset CUAsset
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the StockItem property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StockItemChanging;
        
        /// <summary>
        /// Gets fired when the StockItem property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StockItemChanged;
        
        /// <summary>
        /// Gets fired before the EstimatedUnitCost property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EstimatedUnitCostChanging;
        
        /// <summary>
        /// Gets fired when the EstimatedUnitCost property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EstimatedUnitCostChanged;
        
        /// <summary>
        /// Gets fired before the Quantity property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> QuantityChanging;
        
        /// <summary>
        /// Gets fired when the Quantity property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> QuantityChanged;
        
        /// <summary>
        /// Gets fired before the TypeAssetCatalogue property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TypeAssetCatalogueChanging;
        
        /// <summary>
        /// Gets fired when the TypeAssetCatalogue property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TypeAssetCatalogueChanged;
        
        /// <summary>
        /// Gets fired before the AssetInfo property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AssetInfoChanging;
        
        /// <summary>
        /// Gets fired when the AssetInfo property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AssetInfoChanged;
        
        /// <summary>
        /// Gets fired before the CUWorkEquipmentAsset property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CUWorkEquipmentAssetChanging;
        
        /// <summary>
        /// Gets fired when the CUWorkEquipmentAsset property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CUWorkEquipmentAssetChanged;
        
        /// <summary>
        /// Gets fired before the CUAsset property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CUAssetChanging;
        
        /// <summary>
        /// Gets fired when the CUAsset property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CUAssetChanged;
    }
}

