//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers
{
    
    
    /// <summary>
    /// The default implementation of the WorkBillingInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfCustomers")]
    [XmlNamespacePrefixAttribute("cimInfCustomers")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCustomers/Work" +
        "BillingInfo")]
    [DebuggerDisplayAttribute("WorkBillingInfo {UUID}")]
    public partial class WorkBillingInfo : Document, IWorkBillingInfo, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ReceivedDateTime property
        /// </summary>
        private DateTime _receivedDateTime;
        
        private static Lazy<ITypedElement> _receivedDateTimeAttribute = new Lazy<ITypedElement>(RetrieveReceivedDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the Discount property
        /// </summary>
        private float _discount;
        
        private static Lazy<ITypedElement> _discountAttribute = new Lazy<ITypedElement>(RetrieveDiscountAttribute);
        
        /// <summary>
        /// The backing field for the IssueDateTime property
        /// </summary>
        private DateTime _issueDateTime;
        
        private static Lazy<ITypedElement> _issueDateTimeAttribute = new Lazy<ITypedElement>(RetrieveIssueDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the DueDateTime property
        /// </summary>
        private DateTime _dueDateTime;
        
        private static Lazy<ITypedElement> _dueDateTimeAttribute = new Lazy<ITypedElement>(RetrieveDueDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the Deposit property
        /// </summary>
        private float _deposit;
        
        private static Lazy<ITypedElement> _depositAttribute = new Lazy<ITypedElement>(RetrieveDepositAttribute);
        
        /// <summary>
        /// The backing field for the WorkPrice property
        /// </summary>
        private float _workPrice;
        
        private static Lazy<ITypedElement> _workPriceAttribute = new Lazy<ITypedElement>(RetrieveWorkPriceAttribute);
        
        /// <summary>
        /// The backing field for the CostEstimate property
        /// </summary>
        private float _costEstimate;
        
        private static Lazy<ITypedElement> _costEstimateAttribute = new Lazy<ITypedElement>(RetrieveCostEstimateAttribute);
        
        private static Lazy<ITypedElement> _customerAccountReference = new Lazy<ITypedElement>(RetrieveCustomerAccountReference);
        
        /// <summary>
        /// The backing field for the CustomerAccount property
        /// </summary>
        private ICustomerAccount _customerAccount;
        
        private static Lazy<ITypedElement> _erpLineItemsReference = new Lazy<ITypedElement>(RetrieveErpLineItemsReference);
        
        /// <summary>
        /// The backing field for the ErpLineItems property
        /// </summary>
        private WorkBillingInfoErpLineItemsCollection _erpLineItems;
        
        private static Lazy<ITypedElement> _worksReference = new Lazy<ITypedElement>(RetrieveWorksReference);
        
        /// <summary>
        /// The backing field for the Works property
        /// </summary>
        private WorkBillingInfoWorksCollection _works;
        
        private static IClass _classInstance;
        
        public WorkBillingInfo()
        {
            this._erpLineItems = new WorkBillingInfoErpLineItemsCollection(this);
            this._erpLineItems.CollectionChanging += this.ErpLineItemsCollectionChanging;
            this._erpLineItems.CollectionChanged += this.ErpLineItemsCollectionChanged;
            this._works = new WorkBillingInfoWorksCollection(this);
            this._works.CollectionChanging += this.WorksCollectionChanging;
            this._works.CollectionChanged += this.WorksCollectionChanged;
        }
        
        /// <summary>
        /// The receivedDateTime property
        /// </summary>
        [XmlElementNameAttribute("receivedDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime ReceivedDateTime
        {
            get
            {
                return this._receivedDateTime;
            }
            set
            {
                if ((this._receivedDateTime != value))
                {
                    DateTime old = this._receivedDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReceivedDateTimeChanging(e);
                    this.OnPropertyChanging("ReceivedDateTime", e, _receivedDateTimeAttribute);
                    this._receivedDateTime = value;
                    this.OnReceivedDateTimeChanged(e);
                    this.OnPropertyChanged("ReceivedDateTime", e, _receivedDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The discount property
        /// </summary>
        [XmlElementNameAttribute("discount")]
        [XmlAttributeAttribute(true)]
        public virtual float Discount
        {
            get
            {
                return this._discount;
            }
            set
            {
                if ((this._discount != value))
                {
                    float old = this._discount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDiscountChanging(e);
                    this.OnPropertyChanging("Discount", e, _discountAttribute);
                    this._discount = value;
                    this.OnDiscountChanged(e);
                    this.OnPropertyChanged("Discount", e, _discountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The issueDateTime property
        /// </summary>
        [XmlElementNameAttribute("issueDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime IssueDateTime
        {
            get
            {
                return this._issueDateTime;
            }
            set
            {
                if ((this._issueDateTime != value))
                {
                    DateTime old = this._issueDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIssueDateTimeChanging(e);
                    this.OnPropertyChanging("IssueDateTime", e, _issueDateTimeAttribute);
                    this._issueDateTime = value;
                    this.OnIssueDateTimeChanged(e);
                    this.OnPropertyChanged("IssueDateTime", e, _issueDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The dueDateTime property
        /// </summary>
        [XmlElementNameAttribute("dueDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime DueDateTime
        {
            get
            {
                return this._dueDateTime;
            }
            set
            {
                if ((this._dueDateTime != value))
                {
                    DateTime old = this._dueDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDueDateTimeChanging(e);
                    this.OnPropertyChanging("DueDateTime", e, _dueDateTimeAttribute);
                    this._dueDateTime = value;
                    this.OnDueDateTimeChanged(e);
                    this.OnPropertyChanged("DueDateTime", e, _dueDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The deposit property
        /// </summary>
        [XmlElementNameAttribute("deposit")]
        [XmlAttributeAttribute(true)]
        public virtual float Deposit
        {
            get
            {
                return this._deposit;
            }
            set
            {
                if ((this._deposit != value))
                {
                    float old = this._deposit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDepositChanging(e);
                    this.OnPropertyChanging("Deposit", e, _depositAttribute);
                    this._deposit = value;
                    this.OnDepositChanged(e);
                    this.OnPropertyChanged("Deposit", e, _depositAttribute);
                }
            }
        }
        
        /// <summary>
        /// The workPrice property
        /// </summary>
        [XmlElementNameAttribute("workPrice")]
        [XmlAttributeAttribute(true)]
        public virtual float WorkPrice
        {
            get
            {
                return this._workPrice;
            }
            set
            {
                if ((this._workPrice != value))
                {
                    float old = this._workPrice;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWorkPriceChanging(e);
                    this.OnPropertyChanging("WorkPrice", e, _workPriceAttribute);
                    this._workPrice = value;
                    this.OnWorkPriceChanged(e);
                    this.OnPropertyChanged("WorkPrice", e, _workPriceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The costEstimate property
        /// </summary>
        [XmlElementNameAttribute("costEstimate")]
        [XmlAttributeAttribute(true)]
        public virtual float CostEstimate
        {
            get
            {
                return this._costEstimate;
            }
            set
            {
                if ((this._costEstimate != value))
                {
                    float old = this._costEstimate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCostEstimateChanging(e);
                    this.OnPropertyChanging("CostEstimate", e, _costEstimateAttribute);
                    this._costEstimate = value;
                    this.OnCostEstimateChanged(e);
                    this.OnPropertyChanged("CostEstimate", e, _costEstimateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The CustomerAccount property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkBillingInfos")]
        public virtual ICustomerAccount CustomerAccount
        {
            get
            {
                return this._customerAccount;
            }
            set
            {
                if ((this._customerAccount != value))
                {
                    ICustomerAccount old = this._customerAccount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCustomerAccountChanging(e);
                    this.OnPropertyChanging("CustomerAccount", e, _customerAccountReference);
                    this._customerAccount = value;
                    if ((old != null))
                    {
                        old.WorkBillingInfos.Remove(this);
                        old.Deleted -= this.OnResetCustomerAccount;
                    }
                    if ((value != null))
                    {
                        value.WorkBillingInfos.Add(this);
                        value.Deleted += this.OnResetCustomerAccount;
                    }
                    this.OnCustomerAccountChanged(e);
                    this.OnPropertyChanged("CustomerAccount", e, _customerAccountReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpLineItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkBillingInfos")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpInvoiceLineItem> ErpLineItems
        {
            get
            {
                return this._erpLineItems;
            }
        }
        
        /// <summary>
        /// The Works property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WorkBillingInfo")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWork> Works
        {
            get
            {
                return this._works;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new WorkBillingInfoReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCustomers/Work" +
                            "BillingInfo")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ReceivedDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReceivedDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the ReceivedDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReceivedDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the Discount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DiscountChanging;
        
        /// <summary>
        /// Gets fired when the Discount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DiscountChanged;
        
        /// <summary>
        /// Gets fired before the IssueDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IssueDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the IssueDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IssueDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the DueDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DueDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the DueDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DueDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the Deposit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DepositChanging;
        
        /// <summary>
        /// Gets fired when the Deposit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DepositChanged;
        
        /// <summary>
        /// Gets fired before the WorkPrice property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkPriceChanging;
        
        /// <summary>
        /// Gets fired when the WorkPrice property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkPriceChanged;
        
        /// <summary>
        /// Gets fired before the CostEstimate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostEstimateChanging;
        
        /// <summary>
        /// Gets fired when the CostEstimate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostEstimateChanged;
        
        /// <summary>
        /// Gets fired before the CustomerAccount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerAccountChanging;
        
        /// <summary>
        /// Gets fired when the CustomerAccount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerAccountChanged;
        
        private static ITypedElement RetrieveReceivedDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WorkBillingInfo.ClassInstance)).Resolve("receivedDateTime")));
        }
        
        /// <summary>
        /// Raises the ReceivedDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceivedDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReceivedDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReceivedDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceivedDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReceivedDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDiscountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WorkBillingInfo.ClassInstance)).Resolve("discount")));
        }
        
        /// <summary>
        /// Raises the DiscountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDiscountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DiscountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DiscountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDiscountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DiscountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIssueDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WorkBillingInfo.ClassInstance)).Resolve("issueDateTime")));
        }
        
        /// <summary>
        /// Raises the IssueDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIssueDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IssueDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IssueDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIssueDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IssueDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDueDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WorkBillingInfo.ClassInstance)).Resolve("dueDateTime")));
        }
        
        /// <summary>
        /// Raises the DueDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDueDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DueDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DueDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDueDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DueDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDepositAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WorkBillingInfo.ClassInstance)).Resolve("deposit")));
        }
        
        /// <summary>
        /// Raises the DepositChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDepositChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DepositChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DepositChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDepositChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DepositChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveWorkPriceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WorkBillingInfo.ClassInstance)).Resolve("workPrice")));
        }
        
        /// <summary>
        /// Raises the WorkPriceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkPriceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkPriceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WorkPriceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkPriceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkPriceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCostEstimateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WorkBillingInfo.ClassInstance)).Resolve("costEstimate")));
        }
        
        /// <summary>
        /// Raises the CostEstimateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostEstimateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostEstimateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CostEstimateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostEstimateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostEstimateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCustomerAccountReference()
        {
            return ((ITypedElement)(((ModelElement)(WorkBillingInfo.ClassInstance)).Resolve("CustomerAccount")));
        }
        
        /// <summary>
        /// Raises the CustomerAccountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerAccountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerAccountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CustomerAccountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerAccountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerAccountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CustomerAccount property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCustomerAccount(object sender, System.EventArgs eventArgs)
        {
            this.CustomerAccount = null;
        }
        
        private static ITypedElement RetrieveErpLineItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(WorkBillingInfo.ClassInstance)).Resolve("ErpLineItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpLineItemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpLineItems", e, _erpLineItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpLineItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpLineItems", e, _erpLineItemsReference);
        }
        
        private static ITypedElement RetrieveWorksReference()
        {
            return ((ITypedElement)(((ModelElement)(WorkBillingInfo.ClassInstance)).Resolve("Works")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Works property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorksCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Works", e, _worksReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Works property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorksCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Works", e, _worksReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "RECEIVEDDATETIME"))
            {
                return this.ReceivedDateTime;
            }
            if ((attribute == "DISCOUNT"))
            {
                return this.Discount;
            }
            if ((attribute == "ISSUEDATETIME"))
            {
                return this.IssueDateTime;
            }
            if ((attribute == "DUEDATETIME"))
            {
                return this.DueDateTime;
            }
            if ((attribute == "DEPOSIT"))
            {
                return this.Deposit;
            }
            if ((attribute == "WORKPRICE"))
            {
                return this.WorkPrice;
            }
            if ((attribute == "COSTESTIMATE"))
            {
                return this.CostEstimate;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ERPLINEITEMS"))
            {
                return this._erpLineItems;
            }
            if ((feature == "WORKS"))
            {
                return this._works;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CUSTOMERACCOUNT"))
            {
                this.CustomerAccount = ((ICustomerAccount)(value));
                return;
            }
            if ((feature == "RECEIVEDDATETIME"))
            {
                this.ReceivedDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "DISCOUNT"))
            {
                this.Discount = ((float)(value));
                return;
            }
            if ((feature == "ISSUEDATETIME"))
            {
                this.IssueDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "DUEDATETIME"))
            {
                this.DueDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "DEPOSIT"))
            {
                this.Deposit = ((float)(value));
                return;
            }
            if ((feature == "WORKPRICE"))
            {
                this.WorkPrice = ((float)(value));
                return;
            }
            if ((feature == "COSTESTIMATE"))
            {
                this.CostEstimate = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CustomerAccount"))
            {
                return new CustomerAccountProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CustomerAccount"))
            {
                return new CustomerAccountProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCustomers/Work" +
                        "BillingInfo")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the WorkBillingInfo class
        /// </summary>
        public class WorkBillingInfoReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private WorkBillingInfo _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public WorkBillingInfoReferencedElementsCollection(WorkBillingInfo parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.CustomerAccount != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ErpLineItems.Count);
                    count = (count + this._parent.Works.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CustomerAccountChanged += this.PropagateValueChanges;
                this._parent.ErpLineItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Works.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CustomerAccountChanged -= this.PropagateValueChanges;
                this._parent.ErpLineItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Works.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.CustomerAccount == null))
                {
                    ICustomerAccount customerAccountCasted = item.As<ICustomerAccount>();
                    if ((customerAccountCasted != null))
                    {
                        this._parent.CustomerAccount = customerAccountCasted;
                        return;
                    }
                }
                IErpInvoiceLineItem erpLineItemsCasted = item.As<IErpInvoiceLineItem>();
                if ((erpLineItemsCasted != null))
                {
                    this._parent.ErpLineItems.Add(erpLineItemsCasted);
                }
                IWork worksCasted = item.As<IWork>();
                if ((worksCasted != null))
                {
                    this._parent.Works.Add(worksCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CustomerAccount = null;
                this._parent.ErpLineItems.Clear();
                this._parent.Works.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.CustomerAccount))
                {
                    return true;
                }
                if (this._parent.ErpLineItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.Works.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.CustomerAccount != null))
                {
                    array[arrayIndex] = this._parent.CustomerAccount;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> erpLineItemsEnumerator = this._parent.ErpLineItems.GetEnumerator();
                try
                {
                    for (
                    ; erpLineItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpLineItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpLineItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> worksEnumerator = this._parent.Works.GetEnumerator();
                try
                {
                    for (
                    ; worksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = worksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    worksEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.CustomerAccount == item))
                {
                    this._parent.CustomerAccount = null;
                    return true;
                }
                IErpInvoiceLineItem erpInvoiceLineItemItem = item.As<IErpInvoiceLineItem>();
                if (((erpInvoiceLineItemItem != null) 
                            && this._parent.ErpLineItems.Remove(erpInvoiceLineItemItem)))
                {
                    return true;
                }
                IWork workItem = item.As<IWork>();
                if (((workItem != null) 
                            && this._parent.Works.Remove(workItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CustomerAccount).Concat(this._parent.ErpLineItems).Concat(this._parent.Works).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the receivedDateTime property
        /// </summary>
        private sealed class ReceivedDateTimeProxy : ModelPropertyChange<IWorkBillingInfo, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReceivedDateTimeProxy(IWorkBillingInfo modelElement) : 
                    base(modelElement, "receivedDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.ReceivedDateTime;
                }
                set
                {
                    this.ModelElement.ReceivedDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the discount property
        /// </summary>
        private sealed class DiscountProxy : ModelPropertyChange<IWorkBillingInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DiscountProxy(IWorkBillingInfo modelElement) : 
                    base(modelElement, "discount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Discount;
                }
                set
                {
                    this.ModelElement.Discount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the issueDateTime property
        /// </summary>
        private sealed class IssueDateTimeProxy : ModelPropertyChange<IWorkBillingInfo, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IssueDateTimeProxy(IWorkBillingInfo modelElement) : 
                    base(modelElement, "issueDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.IssueDateTime;
                }
                set
                {
                    this.ModelElement.IssueDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dueDateTime property
        /// </summary>
        private sealed class DueDateTimeProxy : ModelPropertyChange<IWorkBillingInfo, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DueDateTimeProxy(IWorkBillingInfo modelElement) : 
                    base(modelElement, "dueDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.DueDateTime;
                }
                set
                {
                    this.ModelElement.DueDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the deposit property
        /// </summary>
        private sealed class DepositProxy : ModelPropertyChange<IWorkBillingInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DepositProxy(IWorkBillingInfo modelElement) : 
                    base(modelElement, "deposit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Deposit;
                }
                set
                {
                    this.ModelElement.Deposit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the workPrice property
        /// </summary>
        private sealed class WorkPriceProxy : ModelPropertyChange<IWorkBillingInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WorkPriceProxy(IWorkBillingInfo modelElement) : 
                    base(modelElement, "workPrice")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.WorkPrice;
                }
                set
                {
                    this.ModelElement.WorkPrice = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the costEstimate property
        /// </summary>
        private sealed class CostEstimateProxy : ModelPropertyChange<IWorkBillingInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CostEstimateProxy(IWorkBillingInfo modelElement) : 
                    base(modelElement, "costEstimate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CostEstimate;
                }
                set
                {
                    this.ModelElement.CostEstimate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CustomerAccount property
        /// </summary>
        private sealed class CustomerAccountProxy : ModelPropertyChange<IWorkBillingInfo, ICustomerAccount>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CustomerAccountProxy(IWorkBillingInfo modelElement) : 
                    base(modelElement, "CustomerAccount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICustomerAccount Value
            {
                get
                {
                    return this.ModelElement.CustomerAccount;
                }
                set
                {
                    this.ModelElement.CustomerAccount = value;
                }
            }
        }
    }
}

