using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers
{
    
    
    /// <summary>
    /// The default implementation of the ServiceGuarantee class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfCustomers")]
    [XmlNamespacePrefixAttribute("cimInfCustomers")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCustomers/Serv" +
        "iceGuarantee")]
    [DebuggerDisplayAttribute("ServiceGuarantee {UUID}")]
    public partial class ServiceGuarantee : Document, IServiceGuarantee, IModelElement
    {
        
        /// <summary>
        /// The backing field for the PayAmount property
        /// </summary>
        private float _payAmount;
        
        private static Lazy<ITypedElement> _payAmountAttribute = new Lazy<ITypedElement>(RetrievePayAmountAttribute);
        
        /// <summary>
        /// The backing field for the AutomaticPay property
        /// </summary>
        private bool _automaticPay;
        
        private static Lazy<ITypedElement> _automaticPayAttribute = new Lazy<ITypedElement>(RetrieveAutomaticPayAttribute);
        
        /// <summary>
        /// The backing field for the ServiceRequirement property
        /// </summary>
        private string _serviceRequirement;
        
        private static Lazy<ITypedElement> _serviceRequirementAttribute = new Lazy<ITypedElement>(RetrieveServiceRequirementAttribute);
        
        private static Lazy<ITypedElement> _applicationPeriodReference = new Lazy<ITypedElement>(RetrieveApplicationPeriodReference);
        
        /// <summary>
        /// The backing field for the ApplicationPeriod property
        /// </summary>
        private IDateTimeInterval _applicationPeriod;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The payAmount property
        /// </summary>
        [XmlElementNameAttribute("payAmount")]
        [XmlAttributeAttribute(true)]
        public virtual float PayAmount
        {
            get
            {
                return this._payAmount;
            }
            set
            {
                if ((this._payAmount != value))
                {
                    float old = this._payAmount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPayAmountChanging(e);
                    this.OnPropertyChanging("PayAmount", e, _payAmountAttribute);
                    this._payAmount = value;
                    this.OnPayAmountChanged(e);
                    this.OnPropertyChanged("PayAmount", e, _payAmountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The automaticPay property
        /// </summary>
        [XmlElementNameAttribute("automaticPay")]
        [XmlAttributeAttribute(true)]
        public virtual bool AutomaticPay
        {
            get
            {
                return this._automaticPay;
            }
            set
            {
                if ((this._automaticPay != value))
                {
                    bool old = this._automaticPay;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAutomaticPayChanging(e);
                    this.OnPropertyChanging("AutomaticPay", e, _automaticPayAttribute);
                    this._automaticPay = value;
                    this.OnAutomaticPayChanged(e);
                    this.OnPropertyChanged("AutomaticPay", e, _automaticPayAttribute);
                }
            }
        }
        
        /// <summary>
        /// The serviceRequirement property
        /// </summary>
        [XmlElementNameAttribute("serviceRequirement")]
        [XmlAttributeAttribute(true)]
        public virtual string ServiceRequirement
        {
            get
            {
                return this._serviceRequirement;
            }
            set
            {
                if ((this._serviceRequirement != value))
                {
                    string old = this._serviceRequirement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnServiceRequirementChanging(e);
                    this.OnPropertyChanging("ServiceRequirement", e, _serviceRequirementAttribute);
                    this._serviceRequirement = value;
                    this.OnServiceRequirementChanged(e);
                    this.OnPropertyChanged("ServiceRequirement", e, _serviceRequirementAttribute);
                }
            }
        }
        
        /// <summary>
        /// The applicationPeriod property
        /// </summary>
        [XmlElementNameAttribute("applicationPeriod")]
        [XmlAttributeAttribute(true)]
        public virtual IDateTimeInterval ApplicationPeriod
        {
            get
            {
                return this._applicationPeriod;
            }
            set
            {
                if ((this._applicationPeriod != value))
                {
                    IDateTimeInterval old = this._applicationPeriod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApplicationPeriodChanging(e);
                    this.OnPropertyChanging("ApplicationPeriod", e, _applicationPeriodReference);
                    this._applicationPeriod = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetApplicationPeriod;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetApplicationPeriod;
                    }
                    this.OnApplicationPeriodChanged(e);
                    this.OnPropertyChanged("ApplicationPeriod", e, _applicationPeriodReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ServiceGuaranteeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCustomers/Serv" +
                            "iceGuarantee")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PayAmount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PayAmountChanging;
        
        /// <summary>
        /// Gets fired when the PayAmount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PayAmountChanged;
        
        /// <summary>
        /// Gets fired before the AutomaticPay property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AutomaticPayChanging;
        
        /// <summary>
        /// Gets fired when the AutomaticPay property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AutomaticPayChanged;
        
        /// <summary>
        /// Gets fired before the ServiceRequirement property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceRequirementChanging;
        
        /// <summary>
        /// Gets fired when the ServiceRequirement property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceRequirementChanged;
        
        /// <summary>
        /// Gets fired before the ApplicationPeriod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApplicationPeriodChanging;
        
        /// <summary>
        /// Gets fired when the ApplicationPeriod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApplicationPeriodChanged;
        
        private static ITypedElement RetrievePayAmountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ServiceGuarantee.ClassInstance)).Resolve("payAmount")));
        }
        
        /// <summary>
        /// Raises the PayAmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPayAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PayAmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PayAmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPayAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PayAmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAutomaticPayAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ServiceGuarantee.ClassInstance)).Resolve("automaticPay")));
        }
        
        /// <summary>
        /// Raises the AutomaticPayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAutomaticPayChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AutomaticPayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AutomaticPayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAutomaticPayChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AutomaticPayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveServiceRequirementAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ServiceGuarantee.ClassInstance)).Resolve("serviceRequirement")));
        }
        
        /// <summary>
        /// Raises the ServiceRequirementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceRequirementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceRequirementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServiceRequirementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceRequirementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceRequirementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveApplicationPeriodReference()
        {
            return ((ITypedElement)(((ModelElement)(ServiceGuarantee.ClassInstance)).Resolve("applicationPeriod")));
        }
        
        /// <summary>
        /// Raises the ApplicationPeriodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApplicationPeriodChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApplicationPeriodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApplicationPeriodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApplicationPeriodChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApplicationPeriodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ApplicationPeriod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetApplicationPeriod(object sender, System.EventArgs eventArgs)
        {
            this.ApplicationPeriod = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PAYAMOUNT"))
            {
                return this.PayAmount;
            }
            if ((attribute == "AUTOMATICPAY"))
            {
                return this.AutomaticPay;
            }
            if ((attribute == "SERVICEREQUIREMENT"))
            {
                return this.ServiceRequirement;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "APPLICATIONPERIOD"))
            {
                this.ApplicationPeriod = ((IDateTimeInterval)(value));
                return;
            }
            if ((feature == "PAYAMOUNT"))
            {
                this.PayAmount = ((float)(value));
                return;
            }
            if ((feature == "AUTOMATICPAY"))
            {
                this.AutomaticPay = ((bool)(value));
                return;
            }
            if ((feature == "SERVICEREQUIREMENT"))
            {
                this.ServiceRequirement = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ApplicationPeriod"))
            {
                return new ApplicationPeriodProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ApplicationPeriod"))
            {
                return new ApplicationPeriodProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCustomers/Serv" +
                        "iceGuarantee")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ServiceGuarantee class
        /// </summary>
        public class ServiceGuaranteeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ServiceGuarantee _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ServiceGuaranteeReferencedElementsCollection(ServiceGuarantee parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ApplicationPeriod != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ApplicationPeriodChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ApplicationPeriodChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ApplicationPeriod == null))
                {
                    IDateTimeInterval applicationPeriodCasted = item.As<IDateTimeInterval>();
                    if ((applicationPeriodCasted != null))
                    {
                        this._parent.ApplicationPeriod = applicationPeriodCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ApplicationPeriod = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ApplicationPeriod))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ApplicationPeriod != null))
                {
                    array[arrayIndex] = this._parent.ApplicationPeriod;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ApplicationPeriod == item))
                {
                    this._parent.ApplicationPeriod = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ApplicationPeriod).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the payAmount property
        /// </summary>
        private sealed class PayAmountProxy : ModelPropertyChange<IServiceGuarantee, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PayAmountProxy(IServiceGuarantee modelElement) : 
                    base(modelElement, "payAmount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PayAmount;
                }
                set
                {
                    this.ModelElement.PayAmount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the automaticPay property
        /// </summary>
        private sealed class AutomaticPayProxy : ModelPropertyChange<IServiceGuarantee, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AutomaticPayProxy(IServiceGuarantee modelElement) : 
                    base(modelElement, "automaticPay")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.AutomaticPay;
                }
                set
                {
                    this.ModelElement.AutomaticPay = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the serviceRequirement property
        /// </summary>
        private sealed class ServiceRequirementProxy : ModelPropertyChange<IServiceGuarantee, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ServiceRequirementProxy(IServiceGuarantee modelElement) : 
                    base(modelElement, "serviceRequirement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ServiceRequirement;
                }
                set
                {
                    this.ModelElement.ServiceRequirement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the applicationPeriod property
        /// </summary>
        private sealed class ApplicationPeriodProxy : ModelPropertyChange<IServiceGuarantee, IDateTimeInterval>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApplicationPeriodProxy(IServiceGuarantee modelElement) : 
                    base(modelElement, "applicationPeriod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDateTimeInterval Value
            {
                get
                {
                    return this.ModelElement.ApplicationPeriod;
                }
                set
                {
                    this.ModelElement.ApplicationPeriod = value;
                }
            }
        }
    }
}

