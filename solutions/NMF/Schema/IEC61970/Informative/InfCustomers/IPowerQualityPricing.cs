using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers
{
    
    
    /// <summary>
    /// The public interface for PowerQualityPricing
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PowerQualityPricing))]
    [XmlDefaultImplementationTypeAttribute(typeof(PowerQualityPricing))]
    public interface IPowerQualityPricing : IModelElement, IDocument
    {
        
        /// <summary>
        /// The valueUninterruptedServiceEnergy property
        /// </summary>
        float ValueUninterruptedServiceEnergy
        {
            get;
            set;
        }
        
        /// <summary>
        /// The voltImbalanceViolCost property
        /// </summary>
        float VoltImbalanceViolCost
        {
            get;
            set;
        }
        
        /// <summary>
        /// The voltLimitViolCost property
        /// </summary>
        float VoltLimitViolCost
        {
            get;
            set;
        }
        
        /// <summary>
        /// The emergencyLowVoltLimit property
        /// </summary>
        float EmergencyLowVoltLimit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The valueUninterruptedServiceP property
        /// </summary>
        float ValueUninterruptedServiceP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The emergencyHighVoltLimit property
        /// </summary>
        float EmergencyHighVoltLimit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The powerFactorMin property
        /// </summary>
        float PowerFactorMin
        {
            get;
            set;
        }
        
        /// <summary>
        /// The normalLowVoltLimit property
        /// </summary>
        float NormalLowVoltLimit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The normalHighVoltLimit property
        /// </summary>
        float NormalHighVoltLimit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The PricingStructure property
        /// </summary>
        IPricingStructure PricingStructure
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ServiceDeliveryPoints property
        /// </summary>
        IOrderedSetExpression<IServiceDeliveryPoint> ServiceDeliveryPoints
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the ValueUninterruptedServiceEnergy property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ValueUninterruptedServiceEnergyChanging;
        
        /// <summary>
        /// Gets fired when the ValueUninterruptedServiceEnergy property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ValueUninterruptedServiceEnergyChanged;
        
        /// <summary>
        /// Gets fired before the VoltImbalanceViolCost property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VoltImbalanceViolCostChanging;
        
        /// <summary>
        /// Gets fired when the VoltImbalanceViolCost property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VoltImbalanceViolCostChanged;
        
        /// <summary>
        /// Gets fired before the VoltLimitViolCost property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VoltLimitViolCostChanging;
        
        /// <summary>
        /// Gets fired when the VoltLimitViolCost property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VoltLimitViolCostChanged;
        
        /// <summary>
        /// Gets fired before the EmergencyLowVoltLimit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EmergencyLowVoltLimitChanging;
        
        /// <summary>
        /// Gets fired when the EmergencyLowVoltLimit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EmergencyLowVoltLimitChanged;
        
        /// <summary>
        /// Gets fired before the ValueUninterruptedServiceP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ValueUninterruptedServicePChanging;
        
        /// <summary>
        /// Gets fired when the ValueUninterruptedServiceP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ValueUninterruptedServicePChanged;
        
        /// <summary>
        /// Gets fired before the EmergencyHighVoltLimit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EmergencyHighVoltLimitChanging;
        
        /// <summary>
        /// Gets fired when the EmergencyHighVoltLimit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EmergencyHighVoltLimitChanged;
        
        /// <summary>
        /// Gets fired before the PowerFactorMin property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PowerFactorMinChanging;
        
        /// <summary>
        /// Gets fired when the PowerFactorMin property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PowerFactorMinChanged;
        
        /// <summary>
        /// Gets fired before the NormalLowVoltLimit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NormalLowVoltLimitChanging;
        
        /// <summary>
        /// Gets fired when the NormalLowVoltLimit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NormalLowVoltLimitChanged;
        
        /// <summary>
        /// Gets fired before the NormalHighVoltLimit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NormalHighVoltLimitChanging;
        
        /// <summary>
        /// Gets fired when the NormalHighVoltLimit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NormalHighVoltLimitChanged;
        
        /// <summary>
        /// Gets fired before the PricingStructure property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PricingStructureChanging;
        
        /// <summary>
        /// Gets fired when the PricingStructure property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PricingStructureChanged;
    }
}

