using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers
{
    
    
    /// <summary>
    /// The default implementation of the CustomerBillingInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfCustomers")]
    [XmlNamespacePrefixAttribute("cimInfCustomers")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCustomers/Cust" +
        "omerBillingInfo")]
    [DebuggerDisplayAttribute("CustomerBillingInfo {UUID}")]
    public partial class CustomerBillingInfo : Document, ICustomerBillingInfo, IModelElement
    {
        
        /// <summary>
        /// The backing field for the DueDate property
        /// </summary>
        private string _dueDate;
        
        private static Lazy<ITypedElement> _dueDateAttribute = new Lazy<ITypedElement>(RetrieveDueDateAttribute);
        
        /// <summary>
        /// The backing field for the PymtPlanAmt property
        /// </summary>
        private float _pymtPlanAmt;
        
        private static Lazy<ITypedElement> _pymtPlanAmtAttribute = new Lazy<ITypedElement>(RetrievePymtPlanAmtAttribute);
        
        /// <summary>
        /// The backing field for the LastPaymentDate property
        /// </summary>
        private string _lastPaymentDate;
        
        private static Lazy<ITypedElement> _lastPaymentDateAttribute = new Lazy<ITypedElement>(RetrieveLastPaymentDateAttribute);
        
        /// <summary>
        /// The backing field for the BillingDate property
        /// </summary>
        private string _billingDate;
        
        private static Lazy<ITypedElement> _billingDateAttribute = new Lazy<ITypedElement>(RetrieveBillingDateAttribute);
        
        /// <summary>
        /// The backing field for the LastPaymentAmt property
        /// </summary>
        private float _lastPaymentAmt;
        
        private static Lazy<ITypedElement> _lastPaymentAmtAttribute = new Lazy<ITypedElement>(RetrieveLastPaymentAmtAttribute);
        
        /// <summary>
        /// The backing field for the PymtPlanType property
        /// </summary>
        private string _pymtPlanType;
        
        private static Lazy<ITypedElement> _pymtPlanTypeAttribute = new Lazy<ITypedElement>(RetrievePymtPlanTypeAttribute);
        
        /// <summary>
        /// The backing field for the OutBalance property
        /// </summary>
        private float _outBalance;
        
        private static Lazy<ITypedElement> _outBalanceAttribute = new Lazy<ITypedElement>(RetrieveOutBalanceAttribute);
        
        /// <summary>
        /// The backing field for the Kind property
        /// </summary>
        private Nullable<CustomerBillingKind> _kind;
        
        private static Lazy<ITypedElement> _kindAttribute = new Lazy<ITypedElement>(RetrieveKindAttribute);
        
        private static Lazy<ITypedElement> _customerAccountReference = new Lazy<ITypedElement>(RetrieveCustomerAccountReference);
        
        /// <summary>
        /// The backing field for the CustomerAccount property
        /// </summary>
        private ICustomerAccount _customerAccount;
        
        private static Lazy<ITypedElement> _erpInvoiceLineItemsReference = new Lazy<ITypedElement>(RetrieveErpInvoiceLineItemsReference);
        
        /// <summary>
        /// The backing field for the ErpInvoiceLineItems property
        /// </summary>
        private CustomerBillingInfoErpInvoiceLineItemsCollection _erpInvoiceLineItems;
        
        private static IClass _classInstance;
        
        public CustomerBillingInfo()
        {
            this._erpInvoiceLineItems = new CustomerBillingInfoErpInvoiceLineItemsCollection(this);
            this._erpInvoiceLineItems.CollectionChanging += this.ErpInvoiceLineItemsCollectionChanging;
            this._erpInvoiceLineItems.CollectionChanged += this.ErpInvoiceLineItemsCollectionChanged;
        }
        
        /// <summary>
        /// The dueDate property
        /// </summary>
        [XmlElementNameAttribute("dueDate")]
        [XmlAttributeAttribute(true)]
        public virtual string DueDate
        {
            get
            {
                return this._dueDate;
            }
            set
            {
                if ((this._dueDate != value))
                {
                    string old = this._dueDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDueDateChanging(e);
                    this.OnPropertyChanging("DueDate", e, _dueDateAttribute);
                    this._dueDate = value;
                    this.OnDueDateChanged(e);
                    this.OnPropertyChanged("DueDate", e, _dueDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The pymtPlanAmt property
        /// </summary>
        [XmlElementNameAttribute("pymtPlanAmt")]
        [XmlAttributeAttribute(true)]
        public virtual float PymtPlanAmt
        {
            get
            {
                return this._pymtPlanAmt;
            }
            set
            {
                if ((this._pymtPlanAmt != value))
                {
                    float old = this._pymtPlanAmt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPymtPlanAmtChanging(e);
                    this.OnPropertyChanging("PymtPlanAmt", e, _pymtPlanAmtAttribute);
                    this._pymtPlanAmt = value;
                    this.OnPymtPlanAmtChanged(e);
                    this.OnPropertyChanged("PymtPlanAmt", e, _pymtPlanAmtAttribute);
                }
            }
        }
        
        /// <summary>
        /// The lastPaymentDate property
        /// </summary>
        [XmlElementNameAttribute("lastPaymentDate")]
        [XmlAttributeAttribute(true)]
        public virtual string LastPaymentDate
        {
            get
            {
                return this._lastPaymentDate;
            }
            set
            {
                if ((this._lastPaymentDate != value))
                {
                    string old = this._lastPaymentDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLastPaymentDateChanging(e);
                    this.OnPropertyChanging("LastPaymentDate", e, _lastPaymentDateAttribute);
                    this._lastPaymentDate = value;
                    this.OnLastPaymentDateChanged(e);
                    this.OnPropertyChanged("LastPaymentDate", e, _lastPaymentDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The billingDate property
        /// </summary>
        [XmlElementNameAttribute("billingDate")]
        [XmlAttributeAttribute(true)]
        public virtual string BillingDate
        {
            get
            {
                return this._billingDate;
            }
            set
            {
                if ((this._billingDate != value))
                {
                    string old = this._billingDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBillingDateChanging(e);
                    this.OnPropertyChanging("BillingDate", e, _billingDateAttribute);
                    this._billingDate = value;
                    this.OnBillingDateChanged(e);
                    this.OnPropertyChanged("BillingDate", e, _billingDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The lastPaymentAmt property
        /// </summary>
        [XmlElementNameAttribute("lastPaymentAmt")]
        [XmlAttributeAttribute(true)]
        public virtual float LastPaymentAmt
        {
            get
            {
                return this._lastPaymentAmt;
            }
            set
            {
                if ((this._lastPaymentAmt != value))
                {
                    float old = this._lastPaymentAmt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLastPaymentAmtChanging(e);
                    this.OnPropertyChanging("LastPaymentAmt", e, _lastPaymentAmtAttribute);
                    this._lastPaymentAmt = value;
                    this.OnLastPaymentAmtChanged(e);
                    this.OnPropertyChanged("LastPaymentAmt", e, _lastPaymentAmtAttribute);
                }
            }
        }
        
        /// <summary>
        /// The pymtPlanType property
        /// </summary>
        [XmlElementNameAttribute("pymtPlanType")]
        [XmlAttributeAttribute(true)]
        public virtual string PymtPlanType
        {
            get
            {
                return this._pymtPlanType;
            }
            set
            {
                if ((this._pymtPlanType != value))
                {
                    string old = this._pymtPlanType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPymtPlanTypeChanging(e);
                    this.OnPropertyChanging("PymtPlanType", e, _pymtPlanTypeAttribute);
                    this._pymtPlanType = value;
                    this.OnPymtPlanTypeChanged(e);
                    this.OnPropertyChanged("PymtPlanType", e, _pymtPlanTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The outBalance property
        /// </summary>
        [XmlElementNameAttribute("outBalance")]
        [XmlAttributeAttribute(true)]
        public virtual float OutBalance
        {
            get
            {
                return this._outBalance;
            }
            set
            {
                if ((this._outBalance != value))
                {
                    float old = this._outBalance;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOutBalanceChanging(e);
                    this.OnPropertyChanging("OutBalance", e, _outBalanceAttribute);
                    this._outBalance = value;
                    this.OnOutBalanceChanged(e);
                    this.OnPropertyChanged("OutBalance", e, _outBalanceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The kind property
        /// </summary>
        [XmlElementNameAttribute("kind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<CustomerBillingKind> Kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                if ((this._kind != value))
                {
                    Nullable<CustomerBillingKind> old = this._kind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKindChanging(e);
                    this.OnPropertyChanging("Kind", e, _kindAttribute);
                    this._kind = value;
                    this.OnKindChanged(e);
                    this.OnPropertyChanged("Kind", e, _kindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The CustomerAccount property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CustomerBillingInfos")]
        public virtual ICustomerAccount CustomerAccount
        {
            get
            {
                return this._customerAccount;
            }
            set
            {
                if ((this._customerAccount != value))
                {
                    ICustomerAccount old = this._customerAccount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCustomerAccountChanging(e);
                    this.OnPropertyChanging("CustomerAccount", e, _customerAccountReference);
                    this._customerAccount = value;
                    if ((old != null))
                    {
                        old.CustomerBillingInfos.Remove(this);
                        old.Deleted -= this.OnResetCustomerAccount;
                    }
                    if ((value != null))
                    {
                        value.CustomerBillingInfos.Add(this);
                        value.Deleted += this.OnResetCustomerAccount;
                    }
                    this.OnCustomerAccountChanged(e);
                    this.OnPropertyChanged("CustomerAccount", e, _customerAccountReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpInvoiceLineItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CustomerBillingInfos")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpInvoiceLineItem> ErpInvoiceLineItems
        {
            get
            {
                return this._erpInvoiceLineItems;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CustomerBillingInfoReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCustomers/Cust" +
                            "omerBillingInfo")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the DueDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DueDateChanging;
        
        /// <summary>
        /// Gets fired when the DueDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DueDateChanged;
        
        /// <summary>
        /// Gets fired before the PymtPlanAmt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PymtPlanAmtChanging;
        
        /// <summary>
        /// Gets fired when the PymtPlanAmt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PymtPlanAmtChanged;
        
        /// <summary>
        /// Gets fired before the LastPaymentDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LastPaymentDateChanging;
        
        /// <summary>
        /// Gets fired when the LastPaymentDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LastPaymentDateChanged;
        
        /// <summary>
        /// Gets fired before the BillingDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillingDateChanging;
        
        /// <summary>
        /// Gets fired when the BillingDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillingDateChanged;
        
        /// <summary>
        /// Gets fired before the LastPaymentAmt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LastPaymentAmtChanging;
        
        /// <summary>
        /// Gets fired when the LastPaymentAmt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LastPaymentAmtChanged;
        
        /// <summary>
        /// Gets fired before the PymtPlanType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PymtPlanTypeChanging;
        
        /// <summary>
        /// Gets fired when the PymtPlanType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PymtPlanTypeChanged;
        
        /// <summary>
        /// Gets fired before the OutBalance property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OutBalanceChanging;
        
        /// <summary>
        /// Gets fired when the OutBalance property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OutBalanceChanged;
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        /// <summary>
        /// Gets fired before the CustomerAccount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerAccountChanging;
        
        /// <summary>
        /// Gets fired when the CustomerAccount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerAccountChanged;
        
        private static ITypedElement RetrieveDueDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CustomerBillingInfo.ClassInstance)).Resolve("dueDate")));
        }
        
        /// <summary>
        /// Raises the DueDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDueDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DueDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DueDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDueDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DueDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePymtPlanAmtAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CustomerBillingInfo.ClassInstance)).Resolve("pymtPlanAmt")));
        }
        
        /// <summary>
        /// Raises the PymtPlanAmtChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPymtPlanAmtChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PymtPlanAmtChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PymtPlanAmtChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPymtPlanAmtChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PymtPlanAmtChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLastPaymentDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CustomerBillingInfo.ClassInstance)).Resolve("lastPaymentDate")));
        }
        
        /// <summary>
        /// Raises the LastPaymentDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLastPaymentDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LastPaymentDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LastPaymentDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLastPaymentDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LastPaymentDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBillingDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CustomerBillingInfo.ClassInstance)).Resolve("billingDate")));
        }
        
        /// <summary>
        /// Raises the BillingDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillingDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BillingDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillingDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLastPaymentAmtAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CustomerBillingInfo.ClassInstance)).Resolve("lastPaymentAmt")));
        }
        
        /// <summary>
        /// Raises the LastPaymentAmtChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLastPaymentAmtChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LastPaymentAmtChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LastPaymentAmtChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLastPaymentAmtChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LastPaymentAmtChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePymtPlanTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CustomerBillingInfo.ClassInstance)).Resolve("pymtPlanType")));
        }
        
        /// <summary>
        /// Raises the PymtPlanTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPymtPlanTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PymtPlanTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PymtPlanTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPymtPlanTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PymtPlanTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOutBalanceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CustomerBillingInfo.ClassInstance)).Resolve("outBalance")));
        }
        
        /// <summary>
        /// Raises the OutBalanceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutBalanceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OutBalanceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OutBalanceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutBalanceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OutBalanceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CustomerBillingInfo.ClassInstance)).Resolve("kind")));
        }
        
        /// <summary>
        /// Raises the KindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCustomerAccountReference()
        {
            return ((ITypedElement)(((ModelElement)(CustomerBillingInfo.ClassInstance)).Resolve("CustomerAccount")));
        }
        
        /// <summary>
        /// Raises the CustomerAccountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerAccountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerAccountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CustomerAccountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerAccountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerAccountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CustomerAccount property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCustomerAccount(object sender, System.EventArgs eventArgs)
        {
            this.CustomerAccount = null;
        }
        
        private static ITypedElement RetrieveErpInvoiceLineItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(CustomerBillingInfo.ClassInstance)).Resolve("ErpInvoiceLineItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpInvoiceLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpInvoiceLineItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ErpInvoiceLineItems", e, _erpInvoiceLineItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpInvoiceLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpInvoiceLineItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpInvoiceLineItems", e, _erpInvoiceLineItemsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "DUEDATE"))
            {
                return this.DueDate;
            }
            if ((attribute == "PYMTPLANAMT"))
            {
                return this.PymtPlanAmt;
            }
            if ((attribute == "LASTPAYMENTDATE"))
            {
                return this.LastPaymentDate;
            }
            if ((attribute == "BILLINGDATE"))
            {
                return this.BillingDate;
            }
            if ((attribute == "LASTPAYMENTAMT"))
            {
                return this.LastPaymentAmt;
            }
            if ((attribute == "PYMTPLANTYPE"))
            {
                return this.PymtPlanType;
            }
            if ((attribute == "OUTBALANCE"))
            {
                return this.OutBalance;
            }
            if ((attribute == "KIND"))
            {
                return this.Kind;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ERPINVOICELINEITEMS"))
            {
                return this._erpInvoiceLineItems;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CUSTOMERACCOUNT"))
            {
                this.CustomerAccount = ((ICustomerAccount)(value));
                return;
            }
            if ((feature == "DUEDATE"))
            {
                this.DueDate = ((string)(value));
                return;
            }
            if ((feature == "PYMTPLANAMT"))
            {
                this.PymtPlanAmt = ((float)(value));
                return;
            }
            if ((feature == "LASTPAYMENTDATE"))
            {
                this.LastPaymentDate = ((string)(value));
                return;
            }
            if ((feature == "BILLINGDATE"))
            {
                this.BillingDate = ((string)(value));
                return;
            }
            if ((feature == "LASTPAYMENTAMT"))
            {
                this.LastPaymentAmt = ((float)(value));
                return;
            }
            if ((feature == "PYMTPLANTYPE"))
            {
                this.PymtPlanType = ((string)(value));
                return;
            }
            if ((feature == "OUTBALANCE"))
            {
                this.OutBalance = ((float)(value));
                return;
            }
            if ((feature == "KIND"))
            {
                this.Kind = ((CustomerBillingKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CustomerAccount"))
            {
                return new CustomerAccountProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CustomerAccount"))
            {
                return new CustomerAccountProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfCustomers/Cust" +
                        "omerBillingInfo")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CustomerBillingInfo class
        /// </summary>
        public class CustomerBillingInfoReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CustomerBillingInfo _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CustomerBillingInfoReferencedElementsCollection(CustomerBillingInfo parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.CustomerAccount != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ErpInvoiceLineItems.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CustomerAccountChanged += this.PropagateValueChanges;
                this._parent.ErpInvoiceLineItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CustomerAccountChanged -= this.PropagateValueChanges;
                this._parent.ErpInvoiceLineItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.CustomerAccount == null))
                {
                    ICustomerAccount customerAccountCasted = item.As<ICustomerAccount>();
                    if ((customerAccountCasted != null))
                    {
                        this._parent.CustomerAccount = customerAccountCasted;
                        return;
                    }
                }
                IErpInvoiceLineItem erpInvoiceLineItemsCasted = item.As<IErpInvoiceLineItem>();
                if ((erpInvoiceLineItemsCasted != null))
                {
                    this._parent.ErpInvoiceLineItems.Add(erpInvoiceLineItemsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CustomerAccount = null;
                this._parent.ErpInvoiceLineItems.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.CustomerAccount))
                {
                    return true;
                }
                if (this._parent.ErpInvoiceLineItems.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.CustomerAccount != null))
                {
                    array[arrayIndex] = this._parent.CustomerAccount;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> erpInvoiceLineItemsEnumerator = this._parent.ErpInvoiceLineItems.GetEnumerator();
                try
                {
                    for (
                    ; erpInvoiceLineItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpInvoiceLineItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpInvoiceLineItemsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.CustomerAccount == item))
                {
                    this._parent.CustomerAccount = null;
                    return true;
                }
                IErpInvoiceLineItem erpInvoiceLineItemItem = item.As<IErpInvoiceLineItem>();
                if (((erpInvoiceLineItemItem != null) 
                            && this._parent.ErpInvoiceLineItems.Remove(erpInvoiceLineItemItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CustomerAccount).Concat(this._parent.ErpInvoiceLineItems).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dueDate property
        /// </summary>
        private sealed class DueDateProxy : ModelPropertyChange<ICustomerBillingInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DueDateProxy(ICustomerBillingInfo modelElement) : 
                    base(modelElement, "dueDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.DueDate;
                }
                set
                {
                    this.ModelElement.DueDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pymtPlanAmt property
        /// </summary>
        private sealed class PymtPlanAmtProxy : ModelPropertyChange<ICustomerBillingInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PymtPlanAmtProxy(ICustomerBillingInfo modelElement) : 
                    base(modelElement, "pymtPlanAmt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PymtPlanAmt;
                }
                set
                {
                    this.ModelElement.PymtPlanAmt = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lastPaymentDate property
        /// </summary>
        private sealed class LastPaymentDateProxy : ModelPropertyChange<ICustomerBillingInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LastPaymentDateProxy(ICustomerBillingInfo modelElement) : 
                    base(modelElement, "lastPaymentDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.LastPaymentDate;
                }
                set
                {
                    this.ModelElement.LastPaymentDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the billingDate property
        /// </summary>
        private sealed class BillingDateProxy : ModelPropertyChange<ICustomerBillingInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BillingDateProxy(ICustomerBillingInfo modelElement) : 
                    base(modelElement, "billingDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.BillingDate;
                }
                set
                {
                    this.ModelElement.BillingDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lastPaymentAmt property
        /// </summary>
        private sealed class LastPaymentAmtProxy : ModelPropertyChange<ICustomerBillingInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LastPaymentAmtProxy(ICustomerBillingInfo modelElement) : 
                    base(modelElement, "lastPaymentAmt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.LastPaymentAmt;
                }
                set
                {
                    this.ModelElement.LastPaymentAmt = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pymtPlanType property
        /// </summary>
        private sealed class PymtPlanTypeProxy : ModelPropertyChange<ICustomerBillingInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PymtPlanTypeProxy(ICustomerBillingInfo modelElement) : 
                    base(modelElement, "pymtPlanType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.PymtPlanType;
                }
                set
                {
                    this.ModelElement.PymtPlanType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the outBalance property
        /// </summary>
        private sealed class OutBalanceProxy : ModelPropertyChange<ICustomerBillingInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OutBalanceProxy(ICustomerBillingInfo modelElement) : 
                    base(modelElement, "outBalance")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.OutBalance;
                }
                set
                {
                    this.ModelElement.OutBalance = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kind property
        /// </summary>
        private sealed class KindProxy : ModelPropertyChange<ICustomerBillingInfo, Nullable<CustomerBillingKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KindProxy(ICustomerBillingInfo modelElement) : 
                    base(modelElement, "kind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<CustomerBillingKind> Value
            {
                get
                {
                    return this.ModelElement.Kind;
                }
                set
                {
                    this.ModelElement.Kind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CustomerAccount property
        /// </summary>
        private sealed class CustomerAccountProxy : ModelPropertyChange<ICustomerBillingInfo, ICustomerAccount>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CustomerAccountProxy(ICustomerBillingInfo modelElement) : 
                    base(modelElement, "CustomerAccount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICustomerAccount Value
            {
                get
                {
                    return this.ModelElement.CustomerAccount;
                }
                set
                {
                    this.ModelElement.CustomerAccount = value;
                }
            }
        }
    }
}

