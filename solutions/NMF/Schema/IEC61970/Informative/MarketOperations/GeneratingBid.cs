using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the GeneratingBid class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "GeneratingBid")]
    [DebuggerDisplayAttribute("GeneratingBid {UUID}")]
    public partial class GeneratingBid : ResourceBid, IGeneratingBid, IModelElement
    {
        
        /// <summary>
        /// The backing field for the UpTimeMin property
        /// </summary>
        private float _upTimeMin;
        
        private static Lazy<ITypedElement> _upTimeMinAttribute = new Lazy<ITypedElement>(RetrieveUpTimeMinAttribute);
        
        /// <summary>
        /// The backing field for the MaximumEconomicMW property
        /// </summary>
        private float _maximumEconomicMW;
        
        private static Lazy<ITypedElement> _maximumEconomicMWAttribute = new Lazy<ITypedElement>(RetrieveMaximumEconomicMWAttribute);
        
        /// <summary>
        /// The backing field for the UpTimeMax property
        /// </summary>
        private float _upTimeMax;
        
        private static Lazy<ITypedElement> _upTimeMaxAttribute = new Lazy<ITypedElement>(RetrieveUpTimeMaxAttribute);
        
        /// <summary>
        /// The backing field for the StartUpType property
        /// </summary>
        private int _startUpType;
        
        private static Lazy<ITypedElement> _startUpTypeAttribute = new Lazy<ITypedElement>(RetrieveStartUpTypeAttribute);
        
        /// <summary>
        /// The backing field for the NotificationTime property
        /// </summary>
        private float _notificationTime;
        
        private static Lazy<ITypedElement> _notificationTimeAttribute = new Lazy<ITypedElement>(RetrieveNotificationTimeAttribute);
        
        /// <summary>
        /// The backing field for the MaxEmergencyMW property
        /// </summary>
        private float _maxEmergencyMW;
        
        private static Lazy<ITypedElement> _maxEmergencyMWAttribute = new Lazy<ITypedElement>(RetrieveMaxEmergencyMWAttribute);
        
        /// <summary>
        /// The backing field for the StartupTime property
        /// </summary>
        private float _startupTime;
        
        private static Lazy<ITypedElement> _startupTimeAttribute = new Lazy<ITypedElement>(RetrieveStartupTimeAttribute);
        
        /// <summary>
        /// The backing field for the MinimumEconomicMW property
        /// </summary>
        private float _minimumEconomicMW;
        
        private static Lazy<ITypedElement> _minimumEconomicMWAttribute = new Lazy<ITypedElement>(RetrieveMinimumEconomicMWAttribute);
        
        /// <summary>
        /// The backing field for the MinEmergencyMW property
        /// </summary>
        private float _minEmergencyMW;
        
        private static Lazy<ITypedElement> _minEmergencyMWAttribute = new Lazy<ITypedElement>(RetrieveMinEmergencyMWAttribute);
        
        /// <summary>
        /// The backing field for the NoLoadCost property
        /// </summary>
        private float _noLoadCost;
        
        private static Lazy<ITypedElement> _noLoadCostAttribute = new Lazy<ITypedElement>(RetrieveNoLoadCostAttribute);
        
        /// <summary>
        /// The backing field for the MinimumDownTime property
        /// </summary>
        private float _minimumDownTime;
        
        private static Lazy<ITypedElement> _minimumDownTimeAttribute = new Lazy<ITypedElement>(RetrieveMinimumDownTimeAttribute);
        
        /// <summary>
        /// The backing field for the DownTimeMax property
        /// </summary>
        private float _downTimeMax;
        
        private static Lazy<ITypedElement> _downTimeMaxAttribute = new Lazy<ITypedElement>(RetrieveDownTimeMaxAttribute);
        
        /// <summary>
        /// The backing field for the StartUpRampRate property
        /// </summary>
        private object _startUpRampRate;
        
        private static Lazy<ITypedElement> _startUpRampRateAttribute = new Lazy<ITypedElement>(RetrieveStartUpRampRateAttribute);
        
        /// <summary>
        /// The backing field for the OperatingMode property
        /// </summary>
        private string _operatingMode;
        
        private static Lazy<ITypedElement> _operatingModeAttribute = new Lazy<ITypedElement>(RetrieveOperatingModeAttribute);
        
        private static Lazy<ITypedElement> _registeredGeneratorReference = new Lazy<ITypedElement>(RetrieveRegisteredGeneratorReference);
        
        /// <summary>
        /// The backing field for the RegisteredGenerator property
        /// </summary>
        private IRegisteredGenerator _registeredGenerator;
        
        private static Lazy<ITypedElement> _bidSetReference = new Lazy<ITypedElement>(RetrieveBidSetReference);
        
        /// <summary>
        /// The backing field for the BidSet property
        /// </summary>
        private IBidSet _bidSet;
        
        private static Lazy<ITypedElement> _startUpTimeCurveReference = new Lazy<ITypedElement>(RetrieveStartUpTimeCurveReference);
        
        /// <summary>
        /// The backing field for the StartUpTimeCurve property
        /// </summary>
        private IStartUpTimeCurve _startUpTimeCurve;
        
        private static Lazy<ITypedElement> _notificationTimeCurveReference = new Lazy<ITypedElement>(RetrieveNotificationTimeCurveReference);
        
        /// <summary>
        /// The backing field for the NotificationTimeCurve property
        /// </summary>
        private INotificationTimeCurve _notificationTimeCurve;
        
        private static Lazy<ITypedElement> _startUpCostCurveReference = new Lazy<ITypedElement>(RetrieveStartUpCostCurveReference);
        
        /// <summary>
        /// The backing field for the StartUpCostCurve property
        /// </summary>
        private IStartUpCostCurve _startUpCostCurve;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The upTimeMin property
        /// </summary>
        [XmlElementNameAttribute("upTimeMin")]
        [XmlAttributeAttribute(true)]
        public virtual float UpTimeMin
        {
            get
            {
                return this._upTimeMin;
            }
            set
            {
                if ((this._upTimeMin != value))
                {
                    float old = this._upTimeMin;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUpTimeMinChanging(e);
                    this.OnPropertyChanging("UpTimeMin", e, _upTimeMinAttribute);
                    this._upTimeMin = value;
                    this.OnUpTimeMinChanged(e);
                    this.OnPropertyChanged("UpTimeMin", e, _upTimeMinAttribute);
                }
            }
        }
        
        /// <summary>
        /// The maximumEconomicMW property
        /// </summary>
        [XmlElementNameAttribute("maximumEconomicMW")]
        [XmlAttributeAttribute(true)]
        public virtual float MaximumEconomicMW
        {
            get
            {
                return this._maximumEconomicMW;
            }
            set
            {
                if ((this._maximumEconomicMW != value))
                {
                    float old = this._maximumEconomicMW;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaximumEconomicMWChanging(e);
                    this.OnPropertyChanging("MaximumEconomicMW", e, _maximumEconomicMWAttribute);
                    this._maximumEconomicMW = value;
                    this.OnMaximumEconomicMWChanged(e);
                    this.OnPropertyChanged("MaximumEconomicMW", e, _maximumEconomicMWAttribute);
                }
            }
        }
        
        /// <summary>
        /// The upTimeMax property
        /// </summary>
        [XmlElementNameAttribute("upTimeMax")]
        [XmlAttributeAttribute(true)]
        public virtual float UpTimeMax
        {
            get
            {
                return this._upTimeMax;
            }
            set
            {
                if ((this._upTimeMax != value))
                {
                    float old = this._upTimeMax;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUpTimeMaxChanging(e);
                    this.OnPropertyChanging("UpTimeMax", e, _upTimeMaxAttribute);
                    this._upTimeMax = value;
                    this.OnUpTimeMaxChanged(e);
                    this.OnPropertyChanged("UpTimeMax", e, _upTimeMaxAttribute);
                }
            }
        }
        
        /// <summary>
        /// The startUpType property
        /// </summary>
        [XmlElementNameAttribute("startUpType")]
        [XmlAttributeAttribute(true)]
        public virtual int StartUpType
        {
            get
            {
                return this._startUpType;
            }
            set
            {
                if ((this._startUpType != value))
                {
                    int old = this._startUpType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStartUpTypeChanging(e);
                    this.OnPropertyChanging("StartUpType", e, _startUpTypeAttribute);
                    this._startUpType = value;
                    this.OnStartUpTypeChanged(e);
                    this.OnPropertyChanged("StartUpType", e, _startUpTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The notificationTime property
        /// </summary>
        [XmlElementNameAttribute("notificationTime")]
        [XmlAttributeAttribute(true)]
        public virtual float NotificationTime
        {
            get
            {
                return this._notificationTime;
            }
            set
            {
                if ((this._notificationTime != value))
                {
                    float old = this._notificationTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNotificationTimeChanging(e);
                    this.OnPropertyChanging("NotificationTime", e, _notificationTimeAttribute);
                    this._notificationTime = value;
                    this.OnNotificationTimeChanged(e);
                    this.OnPropertyChanged("NotificationTime", e, _notificationTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The maxEmergencyMW property
        /// </summary>
        [XmlElementNameAttribute("maxEmergencyMW")]
        [XmlAttributeAttribute(true)]
        public virtual float MaxEmergencyMW
        {
            get
            {
                return this._maxEmergencyMW;
            }
            set
            {
                if ((this._maxEmergencyMW != value))
                {
                    float old = this._maxEmergencyMW;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxEmergencyMWChanging(e);
                    this.OnPropertyChanging("MaxEmergencyMW", e, _maxEmergencyMWAttribute);
                    this._maxEmergencyMW = value;
                    this.OnMaxEmergencyMWChanged(e);
                    this.OnPropertyChanged("MaxEmergencyMW", e, _maxEmergencyMWAttribute);
                }
            }
        }
        
        /// <summary>
        /// The startupTime property
        /// </summary>
        [XmlElementNameAttribute("startupTime")]
        [XmlAttributeAttribute(true)]
        public virtual float StartupTime
        {
            get
            {
                return this._startupTime;
            }
            set
            {
                if ((this._startupTime != value))
                {
                    float old = this._startupTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStartupTimeChanging(e);
                    this.OnPropertyChanging("StartupTime", e, _startupTimeAttribute);
                    this._startupTime = value;
                    this.OnStartupTimeChanged(e);
                    this.OnPropertyChanged("StartupTime", e, _startupTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The minimumEconomicMW property
        /// </summary>
        [XmlElementNameAttribute("minimumEconomicMW")]
        [XmlAttributeAttribute(true)]
        public virtual float MinimumEconomicMW
        {
            get
            {
                return this._minimumEconomicMW;
            }
            set
            {
                if ((this._minimumEconomicMW != value))
                {
                    float old = this._minimumEconomicMW;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinimumEconomicMWChanging(e);
                    this.OnPropertyChanging("MinimumEconomicMW", e, _minimumEconomicMWAttribute);
                    this._minimumEconomicMW = value;
                    this.OnMinimumEconomicMWChanged(e);
                    this.OnPropertyChanged("MinimumEconomicMW", e, _minimumEconomicMWAttribute);
                }
            }
        }
        
        /// <summary>
        /// The minEmergencyMW property
        /// </summary>
        [XmlElementNameAttribute("minEmergencyMW")]
        [XmlAttributeAttribute(true)]
        public virtual float MinEmergencyMW
        {
            get
            {
                return this._minEmergencyMW;
            }
            set
            {
                if ((this._minEmergencyMW != value))
                {
                    float old = this._minEmergencyMW;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinEmergencyMWChanging(e);
                    this.OnPropertyChanging("MinEmergencyMW", e, _minEmergencyMWAttribute);
                    this._minEmergencyMW = value;
                    this.OnMinEmergencyMWChanged(e);
                    this.OnPropertyChanged("MinEmergencyMW", e, _minEmergencyMWAttribute);
                }
            }
        }
        
        /// <summary>
        /// The noLoadCost property
        /// </summary>
        [XmlElementNameAttribute("noLoadCost")]
        [XmlAttributeAttribute(true)]
        public virtual float NoLoadCost
        {
            get
            {
                return this._noLoadCost;
            }
            set
            {
                if ((this._noLoadCost != value))
                {
                    float old = this._noLoadCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNoLoadCostChanging(e);
                    this.OnPropertyChanging("NoLoadCost", e, _noLoadCostAttribute);
                    this._noLoadCost = value;
                    this.OnNoLoadCostChanged(e);
                    this.OnPropertyChanged("NoLoadCost", e, _noLoadCostAttribute);
                }
            }
        }
        
        /// <summary>
        /// The minimumDownTime property
        /// </summary>
        [XmlElementNameAttribute("minimumDownTime")]
        [XmlAttributeAttribute(true)]
        public virtual float MinimumDownTime
        {
            get
            {
                return this._minimumDownTime;
            }
            set
            {
                if ((this._minimumDownTime != value))
                {
                    float old = this._minimumDownTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinimumDownTimeChanging(e);
                    this.OnPropertyChanging("MinimumDownTime", e, _minimumDownTimeAttribute);
                    this._minimumDownTime = value;
                    this.OnMinimumDownTimeChanged(e);
                    this.OnPropertyChanged("MinimumDownTime", e, _minimumDownTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The downTimeMax property
        /// </summary>
        [XmlElementNameAttribute("downTimeMax")]
        [XmlAttributeAttribute(true)]
        public virtual float DownTimeMax
        {
            get
            {
                return this._downTimeMax;
            }
            set
            {
                if ((this._downTimeMax != value))
                {
                    float old = this._downTimeMax;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDownTimeMaxChanging(e);
                    this.OnPropertyChanging("DownTimeMax", e, _downTimeMaxAttribute);
                    this._downTimeMax = value;
                    this.OnDownTimeMaxChanged(e);
                    this.OnPropertyChanged("DownTimeMax", e, _downTimeMaxAttribute);
                }
            }
        }
        
        /// <summary>
        /// The startUpRampRate property
        /// </summary>
        [XmlElementNameAttribute("startUpRampRate")]
        [XmlAttributeAttribute(true)]
        public virtual object StartUpRampRate
        {
            get
            {
                return this._startUpRampRate;
            }
            set
            {
                if ((this._startUpRampRate != value))
                {
                    object old = this._startUpRampRate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStartUpRampRateChanging(e);
                    this.OnPropertyChanging("StartUpRampRate", e, _startUpRampRateAttribute);
                    this._startUpRampRate = value;
                    this.OnStartUpRampRateChanged(e);
                    this.OnPropertyChanged("StartUpRampRate", e, _startUpRampRateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The operatingMode property
        /// </summary>
        [XmlElementNameAttribute("operatingMode")]
        [XmlAttributeAttribute(true)]
        public virtual string OperatingMode
        {
            get
            {
                return this._operatingMode;
            }
            set
            {
                if ((this._operatingMode != value))
                {
                    string old = this._operatingMode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOperatingModeChanging(e);
                    this.OnPropertyChanging("OperatingMode", e, _operatingModeAttribute);
                    this._operatingMode = value;
                    this.OnOperatingModeChanged(e);
                    this.OnPropertyChanged("OperatingMode", e, _operatingModeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The RegisteredGenerator property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GeneratingBids")]
        public virtual IRegisteredGenerator RegisteredGenerator
        {
            get
            {
                return this._registeredGenerator;
            }
            set
            {
                if ((this._registeredGenerator != value))
                {
                    IRegisteredGenerator old = this._registeredGenerator;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRegisteredGeneratorChanging(e);
                    this.OnPropertyChanging("RegisteredGenerator", e, _registeredGeneratorReference);
                    this._registeredGenerator = value;
                    if ((old != null))
                    {
                        old.GeneratingBids.Remove(this);
                        old.Deleted -= this.OnResetRegisteredGenerator;
                    }
                    if ((value != null))
                    {
                        value.GeneratingBids.Add(this);
                        value.Deleted += this.OnResetRegisteredGenerator;
                    }
                    this.OnRegisteredGeneratorChanged(e);
                    this.OnPropertyChanged("RegisteredGenerator", e, _registeredGeneratorReference);
                }
            }
        }
        
        /// <summary>
        /// The BidSet property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GeneratingBids")]
        public virtual IBidSet BidSet
        {
            get
            {
                return this._bidSet;
            }
            set
            {
                if ((this._bidSet != value))
                {
                    IBidSet old = this._bidSet;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBidSetChanging(e);
                    this.OnPropertyChanging("BidSet", e, _bidSetReference);
                    this._bidSet = value;
                    if ((old != null))
                    {
                        old.GeneratingBids.Remove(this);
                        old.Deleted -= this.OnResetBidSet;
                    }
                    if ((value != null))
                    {
                        value.GeneratingBids.Add(this);
                        value.Deleted += this.OnResetBidSet;
                    }
                    this.OnBidSetChanged(e);
                    this.OnPropertyChanged("BidSet", e, _bidSetReference);
                }
            }
        }
        
        /// <summary>
        /// The StartUpTimeCurve property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GeneratingBids")]
        public virtual IStartUpTimeCurve StartUpTimeCurve
        {
            get
            {
                return this._startUpTimeCurve;
            }
            set
            {
                if ((this._startUpTimeCurve != value))
                {
                    IStartUpTimeCurve old = this._startUpTimeCurve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStartUpTimeCurveChanging(e);
                    this.OnPropertyChanging("StartUpTimeCurve", e, _startUpTimeCurveReference);
                    this._startUpTimeCurve = value;
                    if ((old != null))
                    {
                        old.GeneratingBids.Remove(this);
                        old.Deleted -= this.OnResetStartUpTimeCurve;
                    }
                    if ((value != null))
                    {
                        value.GeneratingBids.Add(this);
                        value.Deleted += this.OnResetStartUpTimeCurve;
                    }
                    this.OnStartUpTimeCurveChanged(e);
                    this.OnPropertyChanged("StartUpTimeCurve", e, _startUpTimeCurveReference);
                }
            }
        }
        
        /// <summary>
        /// The NotificationTimeCurve property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GeneratingBids")]
        public virtual INotificationTimeCurve NotificationTimeCurve
        {
            get
            {
                return this._notificationTimeCurve;
            }
            set
            {
                if ((this._notificationTimeCurve != value))
                {
                    INotificationTimeCurve old = this._notificationTimeCurve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNotificationTimeCurveChanging(e);
                    this.OnPropertyChanging("NotificationTimeCurve", e, _notificationTimeCurveReference);
                    this._notificationTimeCurve = value;
                    if ((old != null))
                    {
                        old.GeneratingBids.Remove(this);
                        old.Deleted -= this.OnResetNotificationTimeCurve;
                    }
                    if ((value != null))
                    {
                        value.GeneratingBids.Add(this);
                        value.Deleted += this.OnResetNotificationTimeCurve;
                    }
                    this.OnNotificationTimeCurveChanged(e);
                    this.OnPropertyChanged("NotificationTimeCurve", e, _notificationTimeCurveReference);
                }
            }
        }
        
        /// <summary>
        /// The StartUpCostCurve property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("GeneratingBids")]
        public virtual IStartUpCostCurve StartUpCostCurve
        {
            get
            {
                return this._startUpCostCurve;
            }
            set
            {
                if ((this._startUpCostCurve != value))
                {
                    IStartUpCostCurve old = this._startUpCostCurve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStartUpCostCurveChanging(e);
                    this.OnPropertyChanging("StartUpCostCurve", e, _startUpCostCurveReference);
                    this._startUpCostCurve = value;
                    if ((old != null))
                    {
                        old.GeneratingBids.Remove(this);
                        old.Deleted -= this.OnResetStartUpCostCurve;
                    }
                    if ((value != null))
                    {
                        value.GeneratingBids.Add(this);
                        value.Deleted += this.OnResetStartUpCostCurve;
                    }
                    this.OnStartUpCostCurveChanged(e);
                    this.OnPropertyChanged("StartUpCostCurve", e, _startUpCostCurveReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new GeneratingBidReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "GeneratingBid")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the UpTimeMin property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UpTimeMinChanging;
        
        /// <summary>
        /// Gets fired when the UpTimeMin property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UpTimeMinChanged;
        
        /// <summary>
        /// Gets fired before the MaximumEconomicMW property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaximumEconomicMWChanging;
        
        /// <summary>
        /// Gets fired when the MaximumEconomicMW property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaximumEconomicMWChanged;
        
        /// <summary>
        /// Gets fired before the UpTimeMax property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UpTimeMaxChanging;
        
        /// <summary>
        /// Gets fired when the UpTimeMax property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UpTimeMaxChanged;
        
        /// <summary>
        /// Gets fired before the StartUpType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartUpTypeChanging;
        
        /// <summary>
        /// Gets fired when the StartUpType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartUpTypeChanged;
        
        /// <summary>
        /// Gets fired before the NotificationTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NotificationTimeChanging;
        
        /// <summary>
        /// Gets fired when the NotificationTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NotificationTimeChanged;
        
        /// <summary>
        /// Gets fired before the MaxEmergencyMW property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxEmergencyMWChanging;
        
        /// <summary>
        /// Gets fired when the MaxEmergencyMW property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxEmergencyMWChanged;
        
        /// <summary>
        /// Gets fired before the StartupTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartupTimeChanging;
        
        /// <summary>
        /// Gets fired when the StartupTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartupTimeChanged;
        
        /// <summary>
        /// Gets fired before the MinimumEconomicMW property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinimumEconomicMWChanging;
        
        /// <summary>
        /// Gets fired when the MinimumEconomicMW property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinimumEconomicMWChanged;
        
        /// <summary>
        /// Gets fired before the MinEmergencyMW property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinEmergencyMWChanging;
        
        /// <summary>
        /// Gets fired when the MinEmergencyMW property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinEmergencyMWChanged;
        
        /// <summary>
        /// Gets fired before the NoLoadCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NoLoadCostChanging;
        
        /// <summary>
        /// Gets fired when the NoLoadCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NoLoadCostChanged;
        
        /// <summary>
        /// Gets fired before the MinimumDownTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinimumDownTimeChanging;
        
        /// <summary>
        /// Gets fired when the MinimumDownTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinimumDownTimeChanged;
        
        /// <summary>
        /// Gets fired before the DownTimeMax property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DownTimeMaxChanging;
        
        /// <summary>
        /// Gets fired when the DownTimeMax property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DownTimeMaxChanged;
        
        /// <summary>
        /// Gets fired before the StartUpRampRate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartUpRampRateChanging;
        
        /// <summary>
        /// Gets fired when the StartUpRampRate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartUpRampRateChanged;
        
        /// <summary>
        /// Gets fired before the OperatingMode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperatingModeChanging;
        
        /// <summary>
        /// Gets fired when the OperatingMode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperatingModeChanged;
        
        /// <summary>
        /// Gets fired before the RegisteredGenerator property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegisteredGeneratorChanging;
        
        /// <summary>
        /// Gets fired when the RegisteredGenerator property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegisteredGeneratorChanged;
        
        /// <summary>
        /// Gets fired before the BidSet property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BidSetChanging;
        
        /// <summary>
        /// Gets fired when the BidSet property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BidSetChanged;
        
        /// <summary>
        /// Gets fired before the StartUpTimeCurve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartUpTimeCurveChanging;
        
        /// <summary>
        /// Gets fired when the StartUpTimeCurve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartUpTimeCurveChanged;
        
        /// <summary>
        /// Gets fired before the NotificationTimeCurve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NotificationTimeCurveChanging;
        
        /// <summary>
        /// Gets fired when the NotificationTimeCurve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NotificationTimeCurveChanged;
        
        /// <summary>
        /// Gets fired before the StartUpCostCurve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartUpCostCurveChanging;
        
        /// <summary>
        /// Gets fired when the StartUpCostCurve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartUpCostCurveChanged;
        
        private static ITypedElement RetrieveUpTimeMinAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GeneratingBid.ClassInstance)).Resolve("upTimeMin")));
        }
        
        /// <summary>
        /// Raises the UpTimeMinChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpTimeMinChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UpTimeMinChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UpTimeMinChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpTimeMinChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UpTimeMinChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaximumEconomicMWAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GeneratingBid.ClassInstance)).Resolve("maximumEconomicMW")));
        }
        
        /// <summary>
        /// Raises the MaximumEconomicMWChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximumEconomicMWChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaximumEconomicMWChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaximumEconomicMWChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximumEconomicMWChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaximumEconomicMWChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUpTimeMaxAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GeneratingBid.ClassInstance)).Resolve("upTimeMax")));
        }
        
        /// <summary>
        /// Raises the UpTimeMaxChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpTimeMaxChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UpTimeMaxChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UpTimeMaxChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpTimeMaxChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UpTimeMaxChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStartUpTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GeneratingBid.ClassInstance)).Resolve("startUpType")));
        }
        
        /// <summary>
        /// Raises the StartUpTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartUpTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartUpTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartUpTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartUpTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartUpTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNotificationTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GeneratingBid.ClassInstance)).Resolve("notificationTime")));
        }
        
        /// <summary>
        /// Raises the NotificationTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNotificationTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NotificationTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NotificationTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNotificationTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NotificationTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaxEmergencyMWAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GeneratingBid.ClassInstance)).Resolve("maxEmergencyMW")));
        }
        
        /// <summary>
        /// Raises the MaxEmergencyMWChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxEmergencyMWChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxEmergencyMWChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxEmergencyMWChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxEmergencyMWChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxEmergencyMWChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStartupTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GeneratingBid.ClassInstance)).Resolve("startupTime")));
        }
        
        /// <summary>
        /// Raises the StartupTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartupTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartupTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartupTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartupTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartupTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMinimumEconomicMWAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GeneratingBid.ClassInstance)).Resolve("minimumEconomicMW")));
        }
        
        /// <summary>
        /// Raises the MinimumEconomicMWChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimumEconomicMWChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinimumEconomicMWChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinimumEconomicMWChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimumEconomicMWChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinimumEconomicMWChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMinEmergencyMWAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GeneratingBid.ClassInstance)).Resolve("minEmergencyMW")));
        }
        
        /// <summary>
        /// Raises the MinEmergencyMWChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinEmergencyMWChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinEmergencyMWChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinEmergencyMWChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinEmergencyMWChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinEmergencyMWChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNoLoadCostAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GeneratingBid.ClassInstance)).Resolve("noLoadCost")));
        }
        
        /// <summary>
        /// Raises the NoLoadCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNoLoadCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NoLoadCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NoLoadCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNoLoadCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NoLoadCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMinimumDownTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GeneratingBid.ClassInstance)).Resolve("minimumDownTime")));
        }
        
        /// <summary>
        /// Raises the MinimumDownTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimumDownTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinimumDownTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinimumDownTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinimumDownTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinimumDownTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDownTimeMaxAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GeneratingBid.ClassInstance)).Resolve("downTimeMax")));
        }
        
        /// <summary>
        /// Raises the DownTimeMaxChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDownTimeMaxChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DownTimeMaxChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DownTimeMaxChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDownTimeMaxChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DownTimeMaxChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStartUpRampRateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GeneratingBid.ClassInstance)).Resolve("startUpRampRate")));
        }
        
        /// <summary>
        /// Raises the StartUpRampRateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartUpRampRateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartUpRampRateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartUpRampRateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartUpRampRateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartUpRampRateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOperatingModeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(GeneratingBid.ClassInstance)).Resolve("operatingMode")));
        }
        
        /// <summary>
        /// Raises the OperatingModeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperatingModeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperatingModeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OperatingModeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperatingModeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperatingModeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRegisteredGeneratorReference()
        {
            return ((ITypedElement)(((ModelElement)(GeneratingBid.ClassInstance)).Resolve("RegisteredGenerator")));
        }
        
        /// <summary>
        /// Raises the RegisteredGeneratorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegisteredGeneratorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegisteredGeneratorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RegisteredGeneratorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegisteredGeneratorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegisteredGeneratorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RegisteredGenerator property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRegisteredGenerator(object sender, System.EventArgs eventArgs)
        {
            this.RegisteredGenerator = null;
        }
        
        private static ITypedElement RetrieveBidSetReference()
        {
            return ((ITypedElement)(((ModelElement)(GeneratingBid.ClassInstance)).Resolve("BidSet")));
        }
        
        /// <summary>
        /// Raises the BidSetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBidSetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BidSetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BidSetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBidSetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BidSetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BidSet property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBidSet(object sender, System.EventArgs eventArgs)
        {
            this.BidSet = null;
        }
        
        private static ITypedElement RetrieveStartUpTimeCurveReference()
        {
            return ((ITypedElement)(((ModelElement)(GeneratingBid.ClassInstance)).Resolve("StartUpTimeCurve")));
        }
        
        /// <summary>
        /// Raises the StartUpTimeCurveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartUpTimeCurveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartUpTimeCurveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartUpTimeCurveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartUpTimeCurveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartUpTimeCurveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the StartUpTimeCurve property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStartUpTimeCurve(object sender, System.EventArgs eventArgs)
        {
            this.StartUpTimeCurve = null;
        }
        
        private static ITypedElement RetrieveNotificationTimeCurveReference()
        {
            return ((ITypedElement)(((ModelElement)(GeneratingBid.ClassInstance)).Resolve("NotificationTimeCurve")));
        }
        
        /// <summary>
        /// Raises the NotificationTimeCurveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNotificationTimeCurveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NotificationTimeCurveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NotificationTimeCurveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNotificationTimeCurveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NotificationTimeCurveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the NotificationTimeCurve property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetNotificationTimeCurve(object sender, System.EventArgs eventArgs)
        {
            this.NotificationTimeCurve = null;
        }
        
        private static ITypedElement RetrieveStartUpCostCurveReference()
        {
            return ((ITypedElement)(((ModelElement)(GeneratingBid.ClassInstance)).Resolve("StartUpCostCurve")));
        }
        
        /// <summary>
        /// Raises the StartUpCostCurveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartUpCostCurveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartUpCostCurveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartUpCostCurveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartUpCostCurveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartUpCostCurveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the StartUpCostCurve property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStartUpCostCurve(object sender, System.EventArgs eventArgs)
        {
            this.StartUpCostCurve = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "UPTIMEMIN"))
            {
                return this.UpTimeMin;
            }
            if ((attribute == "MAXIMUMECONOMICMW"))
            {
                return this.MaximumEconomicMW;
            }
            if ((attribute == "UPTIMEMAX"))
            {
                return this.UpTimeMax;
            }
            if ((attribute == "STARTUPTYPE"))
            {
                return this.StartUpType;
            }
            if ((attribute == "NOTIFICATIONTIME"))
            {
                return this.NotificationTime;
            }
            if ((attribute == "MAXEMERGENCYMW"))
            {
                return this.MaxEmergencyMW;
            }
            if ((attribute == "STARTUPTIME"))
            {
                return this.StartupTime;
            }
            if ((attribute == "MINIMUMECONOMICMW"))
            {
                return this.MinimumEconomicMW;
            }
            if ((attribute == "MINEMERGENCYMW"))
            {
                return this.MinEmergencyMW;
            }
            if ((attribute == "NOLOADCOST"))
            {
                return this.NoLoadCost;
            }
            if ((attribute == "MINIMUMDOWNTIME"))
            {
                return this.MinimumDownTime;
            }
            if ((attribute == "DOWNTIMEMAX"))
            {
                return this.DownTimeMax;
            }
            if ((attribute == "STARTUPRAMPRATE"))
            {
                return this.StartUpRampRate;
            }
            if ((attribute == "OPERATINGMODE"))
            {
                return this.OperatingMode;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REGISTEREDGENERATOR"))
            {
                this.RegisteredGenerator = ((IRegisteredGenerator)(value));
                return;
            }
            if ((feature == "BIDSET"))
            {
                this.BidSet = ((IBidSet)(value));
                return;
            }
            if ((feature == "STARTUPTIMECURVE"))
            {
                this.StartUpTimeCurve = ((IStartUpTimeCurve)(value));
                return;
            }
            if ((feature == "NOTIFICATIONTIMECURVE"))
            {
                this.NotificationTimeCurve = ((INotificationTimeCurve)(value));
                return;
            }
            if ((feature == "STARTUPCOSTCURVE"))
            {
                this.StartUpCostCurve = ((IStartUpCostCurve)(value));
                return;
            }
            if ((feature == "UPTIMEMIN"))
            {
                this.UpTimeMin = ((float)(value));
                return;
            }
            if ((feature == "MAXIMUMECONOMICMW"))
            {
                this.MaximumEconomicMW = ((float)(value));
                return;
            }
            if ((feature == "UPTIMEMAX"))
            {
                this.UpTimeMax = ((float)(value));
                return;
            }
            if ((feature == "STARTUPTYPE"))
            {
                this.StartUpType = ((int)(value));
                return;
            }
            if ((feature == "NOTIFICATIONTIME"))
            {
                this.NotificationTime = ((float)(value));
                return;
            }
            if ((feature == "MAXEMERGENCYMW"))
            {
                this.MaxEmergencyMW = ((float)(value));
                return;
            }
            if ((feature == "STARTUPTIME"))
            {
                this.StartupTime = ((float)(value));
                return;
            }
            if ((feature == "MINIMUMECONOMICMW"))
            {
                this.MinimumEconomicMW = ((float)(value));
                return;
            }
            if ((feature == "MINEMERGENCYMW"))
            {
                this.MinEmergencyMW = ((float)(value));
                return;
            }
            if ((feature == "NOLOADCOST"))
            {
                this.NoLoadCost = ((float)(value));
                return;
            }
            if ((feature == "MINIMUMDOWNTIME"))
            {
                this.MinimumDownTime = ((float)(value));
                return;
            }
            if ((feature == "DOWNTIMEMAX"))
            {
                this.DownTimeMax = ((float)(value));
                return;
            }
            if ((feature == "STARTUPRAMPRATE"))
            {
                this.StartUpRampRate = ((object)(value));
                return;
            }
            if ((feature == "OPERATINGMODE"))
            {
                this.OperatingMode = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "RegisteredGenerator"))
            {
                return new RegisteredGeneratorProxy(this);
            }
            if ((attribute == "BidSet"))
            {
                return new BidSetProxy(this);
            }
            if ((attribute == "StartUpTimeCurve"))
            {
                return new StartUpTimeCurveProxy(this);
            }
            if ((attribute == "NotificationTimeCurve"))
            {
                return new NotificationTimeCurveProxy(this);
            }
            if ((attribute == "StartUpCostCurve"))
            {
                return new StartUpCostCurveProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "RegisteredGenerator"))
            {
                return new RegisteredGeneratorProxy(this);
            }
            if ((reference == "BidSet"))
            {
                return new BidSetProxy(this);
            }
            if ((reference == "StartUpTimeCurve"))
            {
                return new StartUpTimeCurveProxy(this);
            }
            if ((reference == "NotificationTimeCurve"))
            {
                return new NotificationTimeCurveProxy(this);
            }
            if ((reference == "StartUpCostCurve"))
            {
                return new StartUpCostCurveProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "GeneratingBid")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the GeneratingBid class
        /// </summary>
        public class GeneratingBidReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private GeneratingBid _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public GeneratingBidReferencedElementsCollection(GeneratingBid parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.RegisteredGenerator != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BidSet != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.StartUpTimeCurve != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.NotificationTimeCurve != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.StartUpCostCurve != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.RegisteredGeneratorChanged += this.PropagateValueChanges;
                this._parent.BidSetChanged += this.PropagateValueChanges;
                this._parent.StartUpTimeCurveChanged += this.PropagateValueChanges;
                this._parent.NotificationTimeCurveChanged += this.PropagateValueChanges;
                this._parent.StartUpCostCurveChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.RegisteredGeneratorChanged -= this.PropagateValueChanges;
                this._parent.BidSetChanged -= this.PropagateValueChanges;
                this._parent.StartUpTimeCurveChanged -= this.PropagateValueChanges;
                this._parent.NotificationTimeCurveChanged -= this.PropagateValueChanges;
                this._parent.StartUpCostCurveChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.RegisteredGenerator == null))
                {
                    IRegisteredGenerator registeredGeneratorCasted = item.As<IRegisteredGenerator>();
                    if ((registeredGeneratorCasted != null))
                    {
                        this._parent.RegisteredGenerator = registeredGeneratorCasted;
                        return;
                    }
                }
                if ((this._parent.BidSet == null))
                {
                    IBidSet bidSetCasted = item.As<IBidSet>();
                    if ((bidSetCasted != null))
                    {
                        this._parent.BidSet = bidSetCasted;
                        return;
                    }
                }
                if ((this._parent.StartUpTimeCurve == null))
                {
                    IStartUpTimeCurve startUpTimeCurveCasted = item.As<IStartUpTimeCurve>();
                    if ((startUpTimeCurveCasted != null))
                    {
                        this._parent.StartUpTimeCurve = startUpTimeCurveCasted;
                        return;
                    }
                }
                if ((this._parent.NotificationTimeCurve == null))
                {
                    INotificationTimeCurve notificationTimeCurveCasted = item.As<INotificationTimeCurve>();
                    if ((notificationTimeCurveCasted != null))
                    {
                        this._parent.NotificationTimeCurve = notificationTimeCurveCasted;
                        return;
                    }
                }
                if ((this._parent.StartUpCostCurve == null))
                {
                    IStartUpCostCurve startUpCostCurveCasted = item.As<IStartUpCostCurve>();
                    if ((startUpCostCurveCasted != null))
                    {
                        this._parent.StartUpCostCurve = startUpCostCurveCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.RegisteredGenerator = null;
                this._parent.BidSet = null;
                this._parent.StartUpTimeCurve = null;
                this._parent.NotificationTimeCurve = null;
                this._parent.StartUpCostCurve = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.RegisteredGenerator))
                {
                    return true;
                }
                if ((item == this._parent.BidSet))
                {
                    return true;
                }
                if ((item == this._parent.StartUpTimeCurve))
                {
                    return true;
                }
                if ((item == this._parent.NotificationTimeCurve))
                {
                    return true;
                }
                if ((item == this._parent.StartUpCostCurve))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.RegisteredGenerator != null))
                {
                    array[arrayIndex] = this._parent.RegisteredGenerator;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BidSet != null))
                {
                    array[arrayIndex] = this._parent.BidSet;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.StartUpTimeCurve != null))
                {
                    array[arrayIndex] = this._parent.StartUpTimeCurve;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.NotificationTimeCurve != null))
                {
                    array[arrayIndex] = this._parent.NotificationTimeCurve;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.StartUpCostCurve != null))
                {
                    array[arrayIndex] = this._parent.StartUpCostCurve;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.RegisteredGenerator == item))
                {
                    this._parent.RegisteredGenerator = null;
                    return true;
                }
                if ((this._parent.BidSet == item))
                {
                    this._parent.BidSet = null;
                    return true;
                }
                if ((this._parent.StartUpTimeCurve == item))
                {
                    this._parent.StartUpTimeCurve = null;
                    return true;
                }
                if ((this._parent.NotificationTimeCurve == item))
                {
                    this._parent.NotificationTimeCurve = null;
                    return true;
                }
                if ((this._parent.StartUpCostCurve == item))
                {
                    this._parent.StartUpCostCurve = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.RegisteredGenerator).Concat(this._parent.BidSet).Concat(this._parent.StartUpTimeCurve).Concat(this._parent.NotificationTimeCurve).Concat(this._parent.StartUpCostCurve).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the upTimeMin property
        /// </summary>
        private sealed class UpTimeMinProxy : ModelPropertyChange<IGeneratingBid, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UpTimeMinProxy(IGeneratingBid modelElement) : 
                    base(modelElement, "upTimeMin")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.UpTimeMin;
                }
                set
                {
                    this.ModelElement.UpTimeMin = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maximumEconomicMW property
        /// </summary>
        private sealed class MaximumEconomicMWProxy : ModelPropertyChange<IGeneratingBid, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaximumEconomicMWProxy(IGeneratingBid modelElement) : 
                    base(modelElement, "maximumEconomicMW")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MaximumEconomicMW;
                }
                set
                {
                    this.ModelElement.MaximumEconomicMW = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the upTimeMax property
        /// </summary>
        private sealed class UpTimeMaxProxy : ModelPropertyChange<IGeneratingBid, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UpTimeMaxProxy(IGeneratingBid modelElement) : 
                    base(modelElement, "upTimeMax")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.UpTimeMax;
                }
                set
                {
                    this.ModelElement.UpTimeMax = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the startUpType property
        /// </summary>
        private sealed class StartUpTypeProxy : ModelPropertyChange<IGeneratingBid, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartUpTypeProxy(IGeneratingBid modelElement) : 
                    base(modelElement, "startUpType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.StartUpType;
                }
                set
                {
                    this.ModelElement.StartUpType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the notificationTime property
        /// </summary>
        private sealed class NotificationTimeProxy : ModelPropertyChange<IGeneratingBid, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NotificationTimeProxy(IGeneratingBid modelElement) : 
                    base(modelElement, "notificationTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NotificationTime;
                }
                set
                {
                    this.ModelElement.NotificationTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maxEmergencyMW property
        /// </summary>
        private sealed class MaxEmergencyMWProxy : ModelPropertyChange<IGeneratingBid, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxEmergencyMWProxy(IGeneratingBid modelElement) : 
                    base(modelElement, "maxEmergencyMW")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MaxEmergencyMW;
                }
                set
                {
                    this.ModelElement.MaxEmergencyMW = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the startupTime property
        /// </summary>
        private sealed class StartupTimeProxy : ModelPropertyChange<IGeneratingBid, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartupTimeProxy(IGeneratingBid modelElement) : 
                    base(modelElement, "startupTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.StartupTime;
                }
                set
                {
                    this.ModelElement.StartupTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minimumEconomicMW property
        /// </summary>
        private sealed class MinimumEconomicMWProxy : ModelPropertyChange<IGeneratingBid, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinimumEconomicMWProxy(IGeneratingBid modelElement) : 
                    base(modelElement, "minimumEconomicMW")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinimumEconomicMW;
                }
                set
                {
                    this.ModelElement.MinimumEconomicMW = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minEmergencyMW property
        /// </summary>
        private sealed class MinEmergencyMWProxy : ModelPropertyChange<IGeneratingBid, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinEmergencyMWProxy(IGeneratingBid modelElement) : 
                    base(modelElement, "minEmergencyMW")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinEmergencyMW;
                }
                set
                {
                    this.ModelElement.MinEmergencyMW = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the noLoadCost property
        /// </summary>
        private sealed class NoLoadCostProxy : ModelPropertyChange<IGeneratingBid, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NoLoadCostProxy(IGeneratingBid modelElement) : 
                    base(modelElement, "noLoadCost")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NoLoadCost;
                }
                set
                {
                    this.ModelElement.NoLoadCost = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minimumDownTime property
        /// </summary>
        private sealed class MinimumDownTimeProxy : ModelPropertyChange<IGeneratingBid, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinimumDownTimeProxy(IGeneratingBid modelElement) : 
                    base(modelElement, "minimumDownTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinimumDownTime;
                }
                set
                {
                    this.ModelElement.MinimumDownTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the downTimeMax property
        /// </summary>
        private sealed class DownTimeMaxProxy : ModelPropertyChange<IGeneratingBid, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DownTimeMaxProxy(IGeneratingBid modelElement) : 
                    base(modelElement, "downTimeMax")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.DownTimeMax;
                }
                set
                {
                    this.ModelElement.DownTimeMax = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the startUpRampRate property
        /// </summary>
        private sealed class StartUpRampRateProxy : ModelPropertyChange<IGeneratingBid, object>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartUpRampRateProxy(IGeneratingBid modelElement) : 
                    base(modelElement, "startUpRampRate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override object Value
            {
                get
                {
                    return this.ModelElement.StartUpRampRate;
                }
                set
                {
                    this.ModelElement.StartUpRampRate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the operatingMode property
        /// </summary>
        private sealed class OperatingModeProxy : ModelPropertyChange<IGeneratingBid, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OperatingModeProxy(IGeneratingBid modelElement) : 
                    base(modelElement, "operatingMode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.OperatingMode;
                }
                set
                {
                    this.ModelElement.OperatingMode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RegisteredGenerator property
        /// </summary>
        private sealed class RegisteredGeneratorProxy : ModelPropertyChange<IGeneratingBid, IRegisteredGenerator>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RegisteredGeneratorProxy(IGeneratingBid modelElement) : 
                    base(modelElement, "RegisteredGenerator")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRegisteredGenerator Value
            {
                get
                {
                    return this.ModelElement.RegisteredGenerator;
                }
                set
                {
                    this.ModelElement.RegisteredGenerator = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BidSet property
        /// </summary>
        private sealed class BidSetProxy : ModelPropertyChange<IGeneratingBid, IBidSet>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BidSetProxy(IGeneratingBid modelElement) : 
                    base(modelElement, "BidSet")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBidSet Value
            {
                get
                {
                    return this.ModelElement.BidSet;
                }
                set
                {
                    this.ModelElement.BidSet = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the StartUpTimeCurve property
        /// </summary>
        private sealed class StartUpTimeCurveProxy : ModelPropertyChange<IGeneratingBid, IStartUpTimeCurve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartUpTimeCurveProxy(IGeneratingBid modelElement) : 
                    base(modelElement, "StartUpTimeCurve")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStartUpTimeCurve Value
            {
                get
                {
                    return this.ModelElement.StartUpTimeCurve;
                }
                set
                {
                    this.ModelElement.StartUpTimeCurve = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the NotificationTimeCurve property
        /// </summary>
        private sealed class NotificationTimeCurveProxy : ModelPropertyChange<IGeneratingBid, INotificationTimeCurve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NotificationTimeCurveProxy(IGeneratingBid modelElement) : 
                    base(modelElement, "NotificationTimeCurve")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override INotificationTimeCurve Value
            {
                get
                {
                    return this.ModelElement.NotificationTimeCurve;
                }
                set
                {
                    this.ModelElement.NotificationTimeCurve = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the StartUpCostCurve property
        /// </summary>
        private sealed class StartUpCostCurveProxy : ModelPropertyChange<IGeneratingBid, IStartUpCostCurve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartUpCostCurveProxy(IGeneratingBid modelElement) : 
                    base(modelElement, "StartUpCostCurve")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStartUpCostCurve Value
            {
                get
                {
                    return this.ModelElement.StartUpCostCurve;
                }
                set
                {
                    this.ModelElement.StartUpCostCurve = value;
                }
            }
        }
    }
}

