//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the Flowgate class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "Flowgate")]
    [DebuggerDisplayAttribute("Flowgate {UUID}")]
    public partial class Flowgate : PowerSystemResource, IFlowgate, IModelElement
    {
        
        /// <summary>
        /// The backing field for the AfcUseCode property
        /// </summary>
        private object _afcUseCode;
        
        private static Lazy<ITypedElement> _afcUseCodeAttribute = new Lazy<ITypedElement>(RetrieveAfcUseCodeAttribute);
        
        /// <summary>
        /// The backing field for the IdcOperationalName property
        /// </summary>
        private string _idcOperationalName;
        
        private static Lazy<ITypedElement> _idcOperationalNameAttribute = new Lazy<ITypedElement>(RetrieveIdcOperationalNameAttribute);
        
        /// <summary>
        /// The backing field for the InServiceDate property
        /// </summary>
        private DateTime _inServiceDate;
        
        private static Lazy<ITypedElement> _inServiceDateAttribute = new Lazy<ITypedElement>(RetrieveInServiceDateAttribute);
        
        /// <summary>
        /// The backing field for the OutOfServiceDate property
        /// </summary>
        private DateTime _outOfServiceDate;
        
        private static Lazy<ITypedElement> _outOfServiceDateAttribute = new Lazy<ITypedElement>(RetrieveOutOfServiceDateAttribute);
        
        /// <summary>
        /// The backing field for the CoordinatedFlag property
        /// </summary>
        private bool _coordinatedFlag;
        
        private static Lazy<ITypedElement> _coordinatedFlagAttribute = new Lazy<ITypedElement>(RetrieveCoordinatedFlagAttribute);
        
        /// <summary>
        /// The backing field for the AtcFlag property
        /// </summary>
        private bool _atcFlag;
        
        private static Lazy<ITypedElement> _atcFlagAttribute = new Lazy<ITypedElement>(RetrieveAtcFlagAttribute);
        
        /// <summary>
        /// The backing field for the DeletionDate property
        /// </summary>
        private DateTime _deletionDate;
        
        private static Lazy<ITypedElement> _deletionDateAttribute = new Lazy<ITypedElement>(RetrieveDeletionDateAttribute);
        
        /// <summary>
        /// The backing field for the ReciprocalFlag property
        /// </summary>
        private bool _reciprocalFlag;
        
        private static Lazy<ITypedElement> _reciprocalFlagAttribute = new Lazy<ITypedElement>(RetrieveReciprocalFlagAttribute);
        
        /// <summary>
        /// The backing field for the IdcAssignedId property
        /// </summary>
        private int _idcAssignedId;
        
        private static Lazy<ITypedElement> _idcAssignedIdAttribute = new Lazy<ITypedElement>(RetrieveIdcAssignedIdAttribute);
        
        /// <summary>
        /// The backing field for the PositiveImpactValue property
        /// </summary>
        private int _positiveImpactValue;
        
        private static Lazy<ITypedElement> _positiveImpactValueAttribute = new Lazy<ITypedElement>(RetrievePositiveImpactValueAttribute);
        
        /// <summary>
        /// The backing field for the CounterFlowValue property
        /// </summary>
        private int _counterFlowValue;
        
        private static Lazy<ITypedElement> _counterFlowValueAttribute = new Lazy<ITypedElement>(RetrieveCounterFlowValueAttribute);
        
        /// <summary>
        /// The backing field for the CoordinationStudyDate property
        /// </summary>
        private DateTime _coordinationStudyDate;
        
        private static Lazy<ITypedElement> _coordinationStudyDateAttribute = new Lazy<ITypedElement>(RetrieveCoordinationStudyDateAttribute);
        
        /// <summary>
        /// The backing field for the IdcType property
        /// </summary>
        private object _idcType;
        
        private static Lazy<ITypedElement> _idcTypeAttribute = new Lazy<ITypedElement>(RetrieveIdcTypeAttribute);
        
        /// <summary>
        /// The backing field for the ManagingEntityFlag property
        /// </summary>
        private bool _managingEntityFlag;
        
        private static Lazy<ITypedElement> _managingEntityFlagAttribute = new Lazy<ITypedElement>(RetrieveManagingEntityFlagAttribute);
        
        private static Lazy<ITypedElement> _transmissionReliabilityMarginReference = new Lazy<ITypedElement>(RetrieveTransmissionReliabilityMarginReference);
        
        /// <summary>
        /// The backing field for the TransmissionReliabilityMargin property
        /// </summary>
        private ITransmissionReliabilityMargin _transmissionReliabilityMargin;
        
        private static Lazy<ITypedElement> _violationLimitsReference = new Lazy<ITypedElement>(RetrieveViolationLimitsReference);
        
        /// <summary>
        /// The backing field for the ViolationLimits property
        /// </summary>
        private FlowgateViolationLimitsCollection _violationLimits;
        
        private static Lazy<ITypedElement> _capacityBenefitMarginReference = new Lazy<ITypedElement>(RetrieveCapacityBenefitMarginReference);
        
        /// <summary>
        /// The backing field for the CapacityBenefitMargin property
        /// </summary>
        private FlowgateCapacityBenefitMarginCollection _capacityBenefitMargin;
        
        private static Lazy<ITypedElement> _powerTransormersReference = new Lazy<ITypedElement>(RetrievePowerTransormersReference);
        
        /// <summary>
        /// The backing field for the PowerTransormers property
        /// </summary>
        private FlowgatePowerTransormersCollection _powerTransormers;
        
        private static Lazy<ITypedElement> _fTRsReference = new Lazy<ITypedElement>(RetrieveFTRsReference);
        
        /// <summary>
        /// The backing field for the FTRs property
        /// </summary>
        private FlowgateFTRsCollection _fTRs;
        
        private static Lazy<ITypedElement> _linesReference = new Lazy<ITypedElement>(RetrieveLinesReference);
        
        /// <summary>
        /// The backing field for the Lines property
        /// </summary>
        private FlowgateLinesCollection _lines;
        
        private static Lazy<ITypedElement> _subControlAreaReference = new Lazy<ITypedElement>(RetrieveSubControlAreaReference);
        
        /// <summary>
        /// The backing field for the SubControlArea property
        /// </summary>
        private ISubControlArea _subControlArea;
        
        private static Lazy<ITypedElement> _transmissionProviderReference = new Lazy<ITypedElement>(RetrieveTransmissionProviderReference);
        
        /// <summary>
        /// The backing field for the TransmissionProvider property
        /// </summary>
        private FlowgateTransmissionProviderCollection _transmissionProvider;
        
        private static IClass _classInstance;
        
        public Flowgate()
        {
            this._violationLimits = new FlowgateViolationLimitsCollection(this);
            this._violationLimits.CollectionChanging += this.ViolationLimitsCollectionChanging;
            this._violationLimits.CollectionChanged += this.ViolationLimitsCollectionChanged;
            this._capacityBenefitMargin = new FlowgateCapacityBenefitMarginCollection(this);
            this._capacityBenefitMargin.CollectionChanging += this.CapacityBenefitMarginCollectionChanging;
            this._capacityBenefitMargin.CollectionChanged += this.CapacityBenefitMarginCollectionChanged;
            this._powerTransormers = new FlowgatePowerTransormersCollection(this);
            this._powerTransormers.CollectionChanging += this.PowerTransormersCollectionChanging;
            this._powerTransormers.CollectionChanged += this.PowerTransormersCollectionChanged;
            this._fTRs = new FlowgateFTRsCollection(this);
            this._fTRs.CollectionChanging += this.FTRsCollectionChanging;
            this._fTRs.CollectionChanged += this.FTRsCollectionChanged;
            this._lines = new FlowgateLinesCollection(this);
            this._lines.CollectionChanging += this.LinesCollectionChanging;
            this._lines.CollectionChanged += this.LinesCollectionChanged;
            this._transmissionProvider = new FlowgateTransmissionProviderCollection(this);
            this._transmissionProvider.CollectionChanging += this.TransmissionProviderCollectionChanging;
            this._transmissionProvider.CollectionChanged += this.TransmissionProviderCollectionChanged;
        }
        
        /// <summary>
        /// The AfcUseCode property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual object AfcUseCode
        {
            get
            {
                return this._afcUseCode;
            }
            set
            {
                if ((this._afcUseCode != value))
                {
                    object old = this._afcUseCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAfcUseCodeChanging(e);
                    this.OnPropertyChanging("AfcUseCode", e, _afcUseCodeAttribute);
                    this._afcUseCode = value;
                    this.OnAfcUseCodeChanged(e);
                    this.OnPropertyChanged("AfcUseCode", e, _afcUseCodeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The IdcOperationalName property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string IdcOperationalName
        {
            get
            {
                return this._idcOperationalName;
            }
            set
            {
                if ((this._idcOperationalName != value))
                {
                    string old = this._idcOperationalName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdcOperationalNameChanging(e);
                    this.OnPropertyChanging("IdcOperationalName", e, _idcOperationalNameAttribute);
                    this._idcOperationalName = value;
                    this.OnIdcOperationalNameChanged(e);
                    this.OnPropertyChanged("IdcOperationalName", e, _idcOperationalNameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The inServiceDate property
        /// </summary>
        [XmlElementNameAttribute("inServiceDate")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime InServiceDate
        {
            get
            {
                return this._inServiceDate;
            }
            set
            {
                if ((this._inServiceDate != value))
                {
                    DateTime old = this._inServiceDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInServiceDateChanging(e);
                    this.OnPropertyChanging("InServiceDate", e, _inServiceDateAttribute);
                    this._inServiceDate = value;
                    this.OnInServiceDateChanged(e);
                    this.OnPropertyChanged("InServiceDate", e, _inServiceDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The outOfServiceDate property
        /// </summary>
        [XmlElementNameAttribute("outOfServiceDate")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime OutOfServiceDate
        {
            get
            {
                return this._outOfServiceDate;
            }
            set
            {
                if ((this._outOfServiceDate != value))
                {
                    DateTime old = this._outOfServiceDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOutOfServiceDateChanging(e);
                    this.OnPropertyChanging("OutOfServiceDate", e, _outOfServiceDateAttribute);
                    this._outOfServiceDate = value;
                    this.OnOutOfServiceDateChanged(e);
                    this.OnPropertyChanged("OutOfServiceDate", e, _outOfServiceDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The coordinatedFlag property
        /// </summary>
        [XmlElementNameAttribute("coordinatedFlag")]
        [XmlAttributeAttribute(true)]
        public virtual bool CoordinatedFlag
        {
            get
            {
                return this._coordinatedFlag;
            }
            set
            {
                if ((this._coordinatedFlag != value))
                {
                    bool old = this._coordinatedFlag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCoordinatedFlagChanging(e);
                    this.OnPropertyChanging("CoordinatedFlag", e, _coordinatedFlagAttribute);
                    this._coordinatedFlag = value;
                    this.OnCoordinatedFlagChanged(e);
                    this.OnPropertyChanged("CoordinatedFlag", e, _coordinatedFlagAttribute);
                }
            }
        }
        
        /// <summary>
        /// The AtcFlag property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual bool AtcFlag
        {
            get
            {
                return this._atcFlag;
            }
            set
            {
                if ((this._atcFlag != value))
                {
                    bool old = this._atcFlag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAtcFlagChanging(e);
                    this.OnPropertyChanging("AtcFlag", e, _atcFlagAttribute);
                    this._atcFlag = value;
                    this.OnAtcFlagChanged(e);
                    this.OnPropertyChanged("AtcFlag", e, _atcFlagAttribute);
                }
            }
        }
        
        /// <summary>
        /// The deletionDate property
        /// </summary>
        [XmlElementNameAttribute("deletionDate")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime DeletionDate
        {
            get
            {
                return this._deletionDate;
            }
            set
            {
                if ((this._deletionDate != value))
                {
                    DateTime old = this._deletionDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDeletionDateChanging(e);
                    this.OnPropertyChanging("DeletionDate", e, _deletionDateAttribute);
                    this._deletionDate = value;
                    this.OnDeletionDateChanged(e);
                    this.OnPropertyChanged("DeletionDate", e, _deletionDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The reciprocalFlag property
        /// </summary>
        [XmlElementNameAttribute("reciprocalFlag")]
        [XmlAttributeAttribute(true)]
        public virtual bool ReciprocalFlag
        {
            get
            {
                return this._reciprocalFlag;
            }
            set
            {
                if ((this._reciprocalFlag != value))
                {
                    bool old = this._reciprocalFlag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReciprocalFlagChanging(e);
                    this.OnPropertyChanging("ReciprocalFlag", e, _reciprocalFlagAttribute);
                    this._reciprocalFlag = value;
                    this.OnReciprocalFlagChanged(e);
                    this.OnPropertyChanged("ReciprocalFlag", e, _reciprocalFlagAttribute);
                }
            }
        }
        
        /// <summary>
        /// The IdcAssignedId property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual int IdcAssignedId
        {
            get
            {
                return this._idcAssignedId;
            }
            set
            {
                if ((this._idcAssignedId != value))
                {
                    int old = this._idcAssignedId;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdcAssignedIdChanging(e);
                    this.OnPropertyChanging("IdcAssignedId", e, _idcAssignedIdAttribute);
                    this._idcAssignedId = value;
                    this.OnIdcAssignedIdChanged(e);
                    this.OnPropertyChanged("IdcAssignedId", e, _idcAssignedIdAttribute);
                }
            }
        }
        
        /// <summary>
        /// The positiveImpactValue property
        /// </summary>
        [XmlElementNameAttribute("positiveImpactValue")]
        [XmlAttributeAttribute(true)]
        public virtual int PositiveImpactValue
        {
            get
            {
                return this._positiveImpactValue;
            }
            set
            {
                if ((this._positiveImpactValue != value))
                {
                    int old = this._positiveImpactValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPositiveImpactValueChanging(e);
                    this.OnPropertyChanging("PositiveImpactValue", e, _positiveImpactValueAttribute);
                    this._positiveImpactValue = value;
                    this.OnPositiveImpactValueChanged(e);
                    this.OnPropertyChanged("PositiveImpactValue", e, _positiveImpactValueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The counterFlowValue property
        /// </summary>
        [XmlElementNameAttribute("counterFlowValue")]
        [XmlAttributeAttribute(true)]
        public virtual int CounterFlowValue
        {
            get
            {
                return this._counterFlowValue;
            }
            set
            {
                if ((this._counterFlowValue != value))
                {
                    int old = this._counterFlowValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCounterFlowValueChanging(e);
                    this.OnPropertyChanging("CounterFlowValue", e, _counterFlowValueAttribute);
                    this._counterFlowValue = value;
                    this.OnCounterFlowValueChanged(e);
                    this.OnPropertyChanged("CounterFlowValue", e, _counterFlowValueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The coordinationStudyDate property
        /// </summary>
        [XmlElementNameAttribute("coordinationStudyDate")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime CoordinationStudyDate
        {
            get
            {
                return this._coordinationStudyDate;
            }
            set
            {
                if ((this._coordinationStudyDate != value))
                {
                    DateTime old = this._coordinationStudyDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCoordinationStudyDateChanging(e);
                    this.OnPropertyChanging("CoordinationStudyDate", e, _coordinationStudyDateAttribute);
                    this._coordinationStudyDate = value;
                    this.OnCoordinationStudyDateChanged(e);
                    this.OnPropertyChanged("CoordinationStudyDate", e, _coordinationStudyDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The IdcType property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual object IdcType
        {
            get
            {
                return this._idcType;
            }
            set
            {
                if ((this._idcType != value))
                {
                    object old = this._idcType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIdcTypeChanging(e);
                    this.OnPropertyChanging("IdcType", e, _idcTypeAttribute);
                    this._idcType = value;
                    this.OnIdcTypeChanged(e);
                    this.OnPropertyChanged("IdcType", e, _idcTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The managingEntityFlag property
        /// </summary>
        [XmlElementNameAttribute("managingEntityFlag")]
        [XmlAttributeAttribute(true)]
        public virtual bool ManagingEntityFlag
        {
            get
            {
                return this._managingEntityFlag;
            }
            set
            {
                if ((this._managingEntityFlag != value))
                {
                    bool old = this._managingEntityFlag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnManagingEntityFlagChanging(e);
                    this.OnPropertyChanging("ManagingEntityFlag", e, _managingEntityFlagAttribute);
                    this._managingEntityFlag = value;
                    this.OnManagingEntityFlagChanged(e);
                    this.OnPropertyChanged("ManagingEntityFlag", e, _managingEntityFlagAttribute);
                }
            }
        }
        
        /// <summary>
        /// The TransmissionReliabilityMargin property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Flowgate")]
        public virtual ITransmissionReliabilityMargin TransmissionReliabilityMargin
        {
            get
            {
                return this._transmissionReliabilityMargin;
            }
            set
            {
                if ((this._transmissionReliabilityMargin != value))
                {
                    ITransmissionReliabilityMargin old = this._transmissionReliabilityMargin;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransmissionReliabilityMarginChanging(e);
                    this.OnPropertyChanging("TransmissionReliabilityMargin", e, _transmissionReliabilityMarginReference);
                    this._transmissionReliabilityMargin = value;
                    if ((old != null))
                    {
                        old.Flowgate.Remove(this);
                        old.Deleted -= this.OnResetTransmissionReliabilityMargin;
                    }
                    if ((value != null))
                    {
                        value.Flowgate.Add(this);
                        value.Deleted += this.OnResetTransmissionReliabilityMargin;
                    }
                    this.OnTransmissionReliabilityMarginChanged(e);
                    this.OnPropertyChanged("TransmissionReliabilityMargin", e, _transmissionReliabilityMarginReference);
                }
            }
        }
        
        /// <summary>
        /// The ViolationLimits property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Flowgate")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IViolationLimit> ViolationLimits
        {
            get
            {
                return this._violationLimits;
            }
        }
        
        /// <summary>
        /// The CapacityBenefitMargin property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Flowgate")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICapacityBenefitMargin> CapacityBenefitMargin
        {
            get
            {
                return this._capacityBenefitMargin;
            }
        }
        
        /// <summary>
        /// The PowerTransormers property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Flowgates")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IPowerTransformer> PowerTransormers
        {
            get
            {
                return this._powerTransormers;
            }
        }
        
        /// <summary>
        /// The FTRs property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Flowgate")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IFTR> FTRs
        {
            get
            {
                return this._fTRs;
            }
        }
        
        /// <summary>
        /// The Lines property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Flowgates")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILine> Lines
        {
            get
            {
                return this._lines;
            }
        }
        
        /// <summary>
        /// The SubControlArea property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Flowgate")]
        public virtual ISubControlArea SubControlArea
        {
            get
            {
                return this._subControlArea;
            }
            set
            {
                if ((this._subControlArea != value))
                {
                    ISubControlArea old = this._subControlArea;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubControlAreaChanging(e);
                    this.OnPropertyChanging("SubControlArea", e, _subControlAreaReference);
                    this._subControlArea = value;
                    if ((old != null))
                    {
                        old.Flowgate.Remove(this);
                        old.Deleted -= this.OnResetSubControlArea;
                    }
                    if ((value != null))
                    {
                        value.Flowgate.Add(this);
                        value.Deleted += this.OnResetSubControlArea;
                    }
                    this.OnSubControlAreaChanged(e);
                    this.OnPropertyChanged("SubControlArea", e, _subControlAreaReference);
                }
            }
        }
        
        /// <summary>
        /// The TransmissionProvider property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Flowgate")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransmissionProvider> TransmissionProvider
        {
            get
            {
                return this._transmissionProvider;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new FlowgateReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "Flowgate")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the AfcUseCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AfcUseCodeChanging;
        
        /// <summary>
        /// Gets fired when the AfcUseCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AfcUseCodeChanged;
        
        /// <summary>
        /// Gets fired before the IdcOperationalName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdcOperationalNameChanging;
        
        /// <summary>
        /// Gets fired when the IdcOperationalName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdcOperationalNameChanged;
        
        /// <summary>
        /// Gets fired before the InServiceDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InServiceDateChanging;
        
        /// <summary>
        /// Gets fired when the InServiceDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InServiceDateChanged;
        
        /// <summary>
        /// Gets fired before the OutOfServiceDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OutOfServiceDateChanging;
        
        /// <summary>
        /// Gets fired when the OutOfServiceDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OutOfServiceDateChanged;
        
        /// <summary>
        /// Gets fired before the CoordinatedFlag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoordinatedFlagChanging;
        
        /// <summary>
        /// Gets fired when the CoordinatedFlag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoordinatedFlagChanged;
        
        /// <summary>
        /// Gets fired before the AtcFlag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AtcFlagChanging;
        
        /// <summary>
        /// Gets fired when the AtcFlag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AtcFlagChanged;
        
        /// <summary>
        /// Gets fired before the DeletionDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeletionDateChanging;
        
        /// <summary>
        /// Gets fired when the DeletionDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeletionDateChanged;
        
        /// <summary>
        /// Gets fired before the ReciprocalFlag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReciprocalFlagChanging;
        
        /// <summary>
        /// Gets fired when the ReciprocalFlag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReciprocalFlagChanged;
        
        /// <summary>
        /// Gets fired before the IdcAssignedId property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdcAssignedIdChanging;
        
        /// <summary>
        /// Gets fired when the IdcAssignedId property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdcAssignedIdChanged;
        
        /// <summary>
        /// Gets fired before the PositiveImpactValue property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PositiveImpactValueChanging;
        
        /// <summary>
        /// Gets fired when the PositiveImpactValue property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PositiveImpactValueChanged;
        
        /// <summary>
        /// Gets fired before the CounterFlowValue property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CounterFlowValueChanging;
        
        /// <summary>
        /// Gets fired when the CounterFlowValue property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CounterFlowValueChanged;
        
        /// <summary>
        /// Gets fired before the CoordinationStudyDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoordinationStudyDateChanging;
        
        /// <summary>
        /// Gets fired when the CoordinationStudyDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoordinationStudyDateChanged;
        
        /// <summary>
        /// Gets fired before the IdcType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdcTypeChanging;
        
        /// <summary>
        /// Gets fired when the IdcType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IdcTypeChanged;
        
        /// <summary>
        /// Gets fired before the ManagingEntityFlag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ManagingEntityFlagChanging;
        
        /// <summary>
        /// Gets fired when the ManagingEntityFlag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ManagingEntityFlagChanged;
        
        /// <summary>
        /// Gets fired before the TransmissionReliabilityMargin property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransmissionReliabilityMarginChanging;
        
        /// <summary>
        /// Gets fired when the TransmissionReliabilityMargin property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransmissionReliabilityMarginChanged;
        
        /// <summary>
        /// Gets fired before the SubControlArea property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubControlAreaChanging;
        
        /// <summary>
        /// Gets fired when the SubControlArea property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubControlAreaChanged;
        
        private static ITypedElement RetrieveAfcUseCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Flowgate.ClassInstance)).Resolve("AfcUseCode")));
        }
        
        /// <summary>
        /// Raises the AfcUseCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAfcUseCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AfcUseCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AfcUseCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAfcUseCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AfcUseCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIdcOperationalNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Flowgate.ClassInstance)).Resolve("IdcOperationalName")));
        }
        
        /// <summary>
        /// Raises the IdcOperationalNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdcOperationalNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdcOperationalNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdcOperationalNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdcOperationalNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdcOperationalNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveInServiceDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Flowgate.ClassInstance)).Resolve("inServiceDate")));
        }
        
        /// <summary>
        /// Raises the InServiceDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInServiceDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InServiceDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InServiceDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInServiceDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InServiceDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOutOfServiceDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Flowgate.ClassInstance)).Resolve("outOfServiceDate")));
        }
        
        /// <summary>
        /// Raises the OutOfServiceDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutOfServiceDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OutOfServiceDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OutOfServiceDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutOfServiceDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OutOfServiceDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCoordinatedFlagAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Flowgate.ClassInstance)).Resolve("coordinatedFlag")));
        }
        
        /// <summary>
        /// Raises the CoordinatedFlagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoordinatedFlagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoordinatedFlagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CoordinatedFlagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoordinatedFlagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoordinatedFlagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAtcFlagAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Flowgate.ClassInstance)).Resolve("AtcFlag")));
        }
        
        /// <summary>
        /// Raises the AtcFlagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAtcFlagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AtcFlagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AtcFlagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAtcFlagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AtcFlagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDeletionDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Flowgate.ClassInstance)).Resolve("deletionDate")));
        }
        
        /// <summary>
        /// Raises the DeletionDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeletionDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeletionDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DeletionDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeletionDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeletionDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReciprocalFlagAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Flowgate.ClassInstance)).Resolve("reciprocalFlag")));
        }
        
        /// <summary>
        /// Raises the ReciprocalFlagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReciprocalFlagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReciprocalFlagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReciprocalFlagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReciprocalFlagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReciprocalFlagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIdcAssignedIdAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Flowgate.ClassInstance)).Resolve("IdcAssignedId")));
        }
        
        /// <summary>
        /// Raises the IdcAssignedIdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdcAssignedIdChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdcAssignedIdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdcAssignedIdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdcAssignedIdChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdcAssignedIdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePositiveImpactValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Flowgate.ClassInstance)).Resolve("positiveImpactValue")));
        }
        
        /// <summary>
        /// Raises the PositiveImpactValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPositiveImpactValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PositiveImpactValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PositiveImpactValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPositiveImpactValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PositiveImpactValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCounterFlowValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Flowgate.ClassInstance)).Resolve("counterFlowValue")));
        }
        
        /// <summary>
        /// Raises the CounterFlowValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCounterFlowValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CounterFlowValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CounterFlowValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCounterFlowValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CounterFlowValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCoordinationStudyDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Flowgate.ClassInstance)).Resolve("coordinationStudyDate")));
        }
        
        /// <summary>
        /// Raises the CoordinationStudyDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoordinationStudyDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoordinationStudyDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CoordinationStudyDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoordinationStudyDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoordinationStudyDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIdcTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Flowgate.ClassInstance)).Resolve("IdcType")));
        }
        
        /// <summary>
        /// Raises the IdcTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdcTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdcTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IdcTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIdcTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IdcTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveManagingEntityFlagAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Flowgate.ClassInstance)).Resolve("managingEntityFlag")));
        }
        
        /// <summary>
        /// Raises the ManagingEntityFlagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnManagingEntityFlagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ManagingEntityFlagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ManagingEntityFlagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnManagingEntityFlagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ManagingEntityFlagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransmissionReliabilityMarginReference()
        {
            return ((ITypedElement)(((ModelElement)(Flowgate.ClassInstance)).Resolve("TransmissionReliabilityMargin")));
        }
        
        /// <summary>
        /// Raises the TransmissionReliabilityMarginChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransmissionReliabilityMarginChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransmissionReliabilityMarginChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransmissionReliabilityMarginChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransmissionReliabilityMarginChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransmissionReliabilityMarginChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TransmissionReliabilityMargin property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTransmissionReliabilityMargin(object sender, System.EventArgs eventArgs)
        {
            this.TransmissionReliabilityMargin = null;
        }
        
        private static ITypedElement RetrieveViolationLimitsReference()
        {
            return ((ITypedElement)(((ModelElement)(Flowgate.ClassInstance)).Resolve("ViolationLimits")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ViolationLimits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ViolationLimitsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ViolationLimits", e, _violationLimitsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ViolationLimits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ViolationLimitsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ViolationLimits", e, _violationLimitsReference);
        }
        
        private static ITypedElement RetrieveCapacityBenefitMarginReference()
        {
            return ((ITypedElement)(((ModelElement)(Flowgate.ClassInstance)).Resolve("CapacityBenefitMargin")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CapacityBenefitMargin property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CapacityBenefitMarginCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("CapacityBenefitMargin", e, _capacityBenefitMarginReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CapacityBenefitMargin property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CapacityBenefitMarginCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CapacityBenefitMargin", e, _capacityBenefitMarginReference);
        }
        
        private static ITypedElement RetrievePowerTransormersReference()
        {
            return ((ITypedElement)(((ModelElement)(Flowgate.ClassInstance)).Resolve("PowerTransormers")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PowerTransormers property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PowerTransormersCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("PowerTransormers", e, _powerTransormersReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PowerTransormers property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PowerTransormersCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PowerTransormers", e, _powerTransormersReference);
        }
        
        private static ITypedElement RetrieveFTRsReference()
        {
            return ((ITypedElement)(((ModelElement)(Flowgate.ClassInstance)).Resolve("FTRs")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the FTRs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FTRsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("FTRs", e, _fTRsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the FTRs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FTRsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("FTRs", e, _fTRsReference);
        }
        
        private static ITypedElement RetrieveLinesReference()
        {
            return ((ITypedElement)(((ModelElement)(Flowgate.ClassInstance)).Resolve("Lines")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Lines property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LinesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Lines", e, _linesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Lines property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LinesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Lines", e, _linesReference);
        }
        
        private static ITypedElement RetrieveSubControlAreaReference()
        {
            return ((ITypedElement)(((ModelElement)(Flowgate.ClassInstance)).Resolve("SubControlArea")));
        }
        
        /// <summary>
        /// Raises the SubControlAreaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubControlAreaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubControlAreaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubControlAreaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubControlAreaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubControlAreaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SubControlArea property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSubControlArea(object sender, System.EventArgs eventArgs)
        {
            this.SubControlArea = null;
        }
        
        private static ITypedElement RetrieveTransmissionProviderReference()
        {
            return ((ITypedElement)(((ModelElement)(Flowgate.ClassInstance)).Resolve("TransmissionProvider")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TransmissionProvider property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransmissionProviderCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("TransmissionProvider", e, _transmissionProviderReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TransmissionProvider property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransmissionProviderCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TransmissionProvider", e, _transmissionProviderReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "AFCUSECODE"))
            {
                return this.AfcUseCode;
            }
            if ((attribute == "IDCOPERATIONALNAME"))
            {
                return this.IdcOperationalName;
            }
            if ((attribute == "INSERVICEDATE"))
            {
                return this.InServiceDate;
            }
            if ((attribute == "OUTOFSERVICEDATE"))
            {
                return this.OutOfServiceDate;
            }
            if ((attribute == "COORDINATEDFLAG"))
            {
                return this.CoordinatedFlag;
            }
            if ((attribute == "ATCFLAG"))
            {
                return this.AtcFlag;
            }
            if ((attribute == "DELETIONDATE"))
            {
                return this.DeletionDate;
            }
            if ((attribute == "RECIPROCALFLAG"))
            {
                return this.ReciprocalFlag;
            }
            if ((attribute == "IDCASSIGNEDID"))
            {
                return this.IdcAssignedId;
            }
            if ((attribute == "POSITIVEIMPACTVALUE"))
            {
                return this.PositiveImpactValue;
            }
            if ((attribute == "COUNTERFLOWVALUE"))
            {
                return this.CounterFlowValue;
            }
            if ((attribute == "COORDINATIONSTUDYDATE"))
            {
                return this.CoordinationStudyDate;
            }
            if ((attribute == "IDCTYPE"))
            {
                return this.IdcType;
            }
            if ((attribute == "MANAGINGENTITYFLAG"))
            {
                return this.ManagingEntityFlag;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "VIOLATIONLIMITS"))
            {
                return this._violationLimits;
            }
            if ((feature == "CAPACITYBENEFITMARGIN"))
            {
                return this._capacityBenefitMargin;
            }
            if ((feature == "POWERTRANSORMERS"))
            {
                return this._powerTransormers;
            }
            if ((feature == "FTRS"))
            {
                return this._fTRs;
            }
            if ((feature == "LINES"))
            {
                return this._lines;
            }
            if ((feature == "TRANSMISSIONPROVIDER"))
            {
                return this._transmissionProvider;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TRANSMISSIONRELIABILITYMARGIN"))
            {
                this.TransmissionReliabilityMargin = ((ITransmissionReliabilityMargin)(value));
                return;
            }
            if ((feature == "SUBCONTROLAREA"))
            {
                this.SubControlArea = ((ISubControlArea)(value));
                return;
            }
            if ((feature == "AFCUSECODE"))
            {
                this.AfcUseCode = ((object)(value));
                return;
            }
            if ((feature == "IDCOPERATIONALNAME"))
            {
                this.IdcOperationalName = ((string)(value));
                return;
            }
            if ((feature == "INSERVICEDATE"))
            {
                this.InServiceDate = ((DateTime)(value));
                return;
            }
            if ((feature == "OUTOFSERVICEDATE"))
            {
                this.OutOfServiceDate = ((DateTime)(value));
                return;
            }
            if ((feature == "COORDINATEDFLAG"))
            {
                this.CoordinatedFlag = ((bool)(value));
                return;
            }
            if ((feature == "ATCFLAG"))
            {
                this.AtcFlag = ((bool)(value));
                return;
            }
            if ((feature == "DELETIONDATE"))
            {
                this.DeletionDate = ((DateTime)(value));
                return;
            }
            if ((feature == "RECIPROCALFLAG"))
            {
                this.ReciprocalFlag = ((bool)(value));
                return;
            }
            if ((feature == "IDCASSIGNEDID"))
            {
                this.IdcAssignedId = ((int)(value));
                return;
            }
            if ((feature == "POSITIVEIMPACTVALUE"))
            {
                this.PositiveImpactValue = ((int)(value));
                return;
            }
            if ((feature == "COUNTERFLOWVALUE"))
            {
                this.CounterFlowValue = ((int)(value));
                return;
            }
            if ((feature == "COORDINATIONSTUDYDATE"))
            {
                this.CoordinationStudyDate = ((DateTime)(value));
                return;
            }
            if ((feature == "IDCTYPE"))
            {
                this.IdcType = ((object)(value));
                return;
            }
            if ((feature == "MANAGINGENTITYFLAG"))
            {
                this.ManagingEntityFlag = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TransmissionReliabilityMargin"))
            {
                return new TransmissionReliabilityMarginProxy(this);
            }
            if ((attribute == "SubControlArea"))
            {
                return new SubControlAreaProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TransmissionReliabilityMargin"))
            {
                return new TransmissionReliabilityMarginProxy(this);
            }
            if ((reference == "SubControlArea"))
            {
                return new SubControlAreaProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "Flowgate")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Flowgate class
        /// </summary>
        public class FlowgateReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Flowgate _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FlowgateReferencedElementsCollection(Flowgate parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.TransmissionReliabilityMargin != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ViolationLimits.Count);
                    count = (count + this._parent.CapacityBenefitMargin.Count);
                    count = (count + this._parent.PowerTransormers.Count);
                    count = (count + this._parent.FTRs.Count);
                    count = (count + this._parent.Lines.Count);
                    if ((this._parent.SubControlArea != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.TransmissionProvider.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TransmissionReliabilityMarginChanged += this.PropagateValueChanges;
                this._parent.ViolationLimits.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CapacityBenefitMargin.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PowerTransormers.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.FTRs.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Lines.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SubControlAreaChanged += this.PropagateValueChanges;
                this._parent.TransmissionProvider.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TransmissionReliabilityMarginChanged -= this.PropagateValueChanges;
                this._parent.ViolationLimits.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CapacityBenefitMargin.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PowerTransormers.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.FTRs.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Lines.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SubControlAreaChanged -= this.PropagateValueChanges;
                this._parent.TransmissionProvider.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.TransmissionReliabilityMargin == null))
                {
                    ITransmissionReliabilityMargin transmissionReliabilityMarginCasted = item.As<ITransmissionReliabilityMargin>();
                    if ((transmissionReliabilityMarginCasted != null))
                    {
                        this._parent.TransmissionReliabilityMargin = transmissionReliabilityMarginCasted;
                        return;
                    }
                }
                IViolationLimit violationLimitsCasted = item.As<IViolationLimit>();
                if ((violationLimitsCasted != null))
                {
                    this._parent.ViolationLimits.Add(violationLimitsCasted);
                }
                ICapacityBenefitMargin capacityBenefitMarginCasted = item.As<ICapacityBenefitMargin>();
                if ((capacityBenefitMarginCasted != null))
                {
                    this._parent.CapacityBenefitMargin.Add(capacityBenefitMarginCasted);
                }
                IPowerTransformer powerTransormersCasted = item.As<IPowerTransformer>();
                if ((powerTransormersCasted != null))
                {
                    this._parent.PowerTransormers.Add(powerTransormersCasted);
                }
                IFTR fTRsCasted = item.As<IFTR>();
                if ((fTRsCasted != null))
                {
                    this._parent.FTRs.Add(fTRsCasted);
                }
                ILine linesCasted = item.As<ILine>();
                if ((linesCasted != null))
                {
                    this._parent.Lines.Add(linesCasted);
                }
                if ((this._parent.SubControlArea == null))
                {
                    ISubControlArea subControlAreaCasted = item.As<ISubControlArea>();
                    if ((subControlAreaCasted != null))
                    {
                        this._parent.SubControlArea = subControlAreaCasted;
                        return;
                    }
                }
                ITransmissionProvider transmissionProviderCasted = item.As<ITransmissionProvider>();
                if ((transmissionProviderCasted != null))
                {
                    this._parent.TransmissionProvider.Add(transmissionProviderCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TransmissionReliabilityMargin = null;
                this._parent.ViolationLimits.Clear();
                this._parent.CapacityBenefitMargin.Clear();
                this._parent.PowerTransormers.Clear();
                this._parent.FTRs.Clear();
                this._parent.Lines.Clear();
                this._parent.SubControlArea = null;
                this._parent.TransmissionProvider.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.TransmissionReliabilityMargin))
                {
                    return true;
                }
                if (this._parent.ViolationLimits.Contains(item))
                {
                    return true;
                }
                if (this._parent.CapacityBenefitMargin.Contains(item))
                {
                    return true;
                }
                if (this._parent.PowerTransormers.Contains(item))
                {
                    return true;
                }
                if (this._parent.FTRs.Contains(item))
                {
                    return true;
                }
                if (this._parent.Lines.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.SubControlArea))
                {
                    return true;
                }
                if (this._parent.TransmissionProvider.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.TransmissionReliabilityMargin != null))
                {
                    array[arrayIndex] = this._parent.TransmissionReliabilityMargin;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> violationLimitsEnumerator = this._parent.ViolationLimits.GetEnumerator();
                try
                {
                    for (
                    ; violationLimitsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = violationLimitsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    violationLimitsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> capacityBenefitMarginEnumerator = this._parent.CapacityBenefitMargin.GetEnumerator();
                try
                {
                    for (
                    ; capacityBenefitMarginEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = capacityBenefitMarginEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    capacityBenefitMarginEnumerator.Dispose();
                }
                IEnumerator<IModelElement> powerTransormersEnumerator = this._parent.PowerTransormers.GetEnumerator();
                try
                {
                    for (
                    ; powerTransormersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = powerTransormersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    powerTransormersEnumerator.Dispose();
                }
                IEnumerator<IModelElement> fTRsEnumerator = this._parent.FTRs.GetEnumerator();
                try
                {
                    for (
                    ; fTRsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = fTRsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    fTRsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> linesEnumerator = this._parent.Lines.GetEnumerator();
                try
                {
                    for (
                    ; linesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = linesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    linesEnumerator.Dispose();
                }
                if ((this._parent.SubControlArea != null))
                {
                    array[arrayIndex] = this._parent.SubControlArea;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> transmissionProviderEnumerator = this._parent.TransmissionProvider.GetEnumerator();
                try
                {
                    for (
                    ; transmissionProviderEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = transmissionProviderEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    transmissionProviderEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.TransmissionReliabilityMargin == item))
                {
                    this._parent.TransmissionReliabilityMargin = null;
                    return true;
                }
                IViolationLimit violationLimitItem = item.As<IViolationLimit>();
                if (((violationLimitItem != null) 
                            && this._parent.ViolationLimits.Remove(violationLimitItem)))
                {
                    return true;
                }
                ICapacityBenefitMargin capacityBenefitMarginItem = item.As<ICapacityBenefitMargin>();
                if (((capacityBenefitMarginItem != null) 
                            && this._parent.CapacityBenefitMargin.Remove(capacityBenefitMarginItem)))
                {
                    return true;
                }
                IPowerTransformer powerTransformerItem = item.As<IPowerTransformer>();
                if (((powerTransformerItem != null) 
                            && this._parent.PowerTransormers.Remove(powerTransformerItem)))
                {
                    return true;
                }
                IFTR fTRItem = item.As<IFTR>();
                if (((fTRItem != null) 
                            && this._parent.FTRs.Remove(fTRItem)))
                {
                    return true;
                }
                ILine lineItem = item.As<ILine>();
                if (((lineItem != null) 
                            && this._parent.Lines.Remove(lineItem)))
                {
                    return true;
                }
                if ((this._parent.SubControlArea == item))
                {
                    this._parent.SubControlArea = null;
                    return true;
                }
                ITransmissionProvider transmissionProviderItem = item.As<ITransmissionProvider>();
                if (((transmissionProviderItem != null) 
                            && this._parent.TransmissionProvider.Remove(transmissionProviderItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TransmissionReliabilityMargin).Concat(this._parent.ViolationLimits).Concat(this._parent.CapacityBenefitMargin).Concat(this._parent.PowerTransormers).Concat(this._parent.FTRs).Concat(this._parent.Lines).Concat(this._parent.SubControlArea).Concat(this._parent.TransmissionProvider).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AfcUseCode property
        /// </summary>
        private sealed class AfcUseCodeProxy : ModelPropertyChange<IFlowgate, object>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AfcUseCodeProxy(IFlowgate modelElement) : 
                    base(modelElement, "AfcUseCode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override object Value
            {
                get
                {
                    return this.ModelElement.AfcUseCode;
                }
                set
                {
                    this.ModelElement.AfcUseCode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IdcOperationalName property
        /// </summary>
        private sealed class IdcOperationalNameProxy : ModelPropertyChange<IFlowgate, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdcOperationalNameProxy(IFlowgate modelElement) : 
                    base(modelElement, "IdcOperationalName")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.IdcOperationalName;
                }
                set
                {
                    this.ModelElement.IdcOperationalName = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the inServiceDate property
        /// </summary>
        private sealed class InServiceDateProxy : ModelPropertyChange<IFlowgate, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InServiceDateProxy(IFlowgate modelElement) : 
                    base(modelElement, "inServiceDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.InServiceDate;
                }
                set
                {
                    this.ModelElement.InServiceDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the outOfServiceDate property
        /// </summary>
        private sealed class OutOfServiceDateProxy : ModelPropertyChange<IFlowgate, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OutOfServiceDateProxy(IFlowgate modelElement) : 
                    base(modelElement, "outOfServiceDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.OutOfServiceDate;
                }
                set
                {
                    this.ModelElement.OutOfServiceDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the coordinatedFlag property
        /// </summary>
        private sealed class CoordinatedFlagProxy : ModelPropertyChange<IFlowgate, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CoordinatedFlagProxy(IFlowgate modelElement) : 
                    base(modelElement, "coordinatedFlag")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.CoordinatedFlag;
                }
                set
                {
                    this.ModelElement.CoordinatedFlag = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AtcFlag property
        /// </summary>
        private sealed class AtcFlagProxy : ModelPropertyChange<IFlowgate, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AtcFlagProxy(IFlowgate modelElement) : 
                    base(modelElement, "AtcFlag")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.AtcFlag;
                }
                set
                {
                    this.ModelElement.AtcFlag = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the deletionDate property
        /// </summary>
        private sealed class DeletionDateProxy : ModelPropertyChange<IFlowgate, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DeletionDateProxy(IFlowgate modelElement) : 
                    base(modelElement, "deletionDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.DeletionDate;
                }
                set
                {
                    this.ModelElement.DeletionDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the reciprocalFlag property
        /// </summary>
        private sealed class ReciprocalFlagProxy : ModelPropertyChange<IFlowgate, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReciprocalFlagProxy(IFlowgate modelElement) : 
                    base(modelElement, "reciprocalFlag")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.ReciprocalFlag;
                }
                set
                {
                    this.ModelElement.ReciprocalFlag = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IdcAssignedId property
        /// </summary>
        private sealed class IdcAssignedIdProxy : ModelPropertyChange<IFlowgate, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdcAssignedIdProxy(IFlowgate modelElement) : 
                    base(modelElement, "IdcAssignedId")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.IdcAssignedId;
                }
                set
                {
                    this.ModelElement.IdcAssignedId = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the positiveImpactValue property
        /// </summary>
        private sealed class PositiveImpactValueProxy : ModelPropertyChange<IFlowgate, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PositiveImpactValueProxy(IFlowgate modelElement) : 
                    base(modelElement, "positiveImpactValue")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.PositiveImpactValue;
                }
                set
                {
                    this.ModelElement.PositiveImpactValue = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the counterFlowValue property
        /// </summary>
        private sealed class CounterFlowValueProxy : ModelPropertyChange<IFlowgate, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CounterFlowValueProxy(IFlowgate modelElement) : 
                    base(modelElement, "counterFlowValue")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.CounterFlowValue;
                }
                set
                {
                    this.ModelElement.CounterFlowValue = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the coordinationStudyDate property
        /// </summary>
        private sealed class CoordinationStudyDateProxy : ModelPropertyChange<IFlowgate, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CoordinationStudyDateProxy(IFlowgate modelElement) : 
                    base(modelElement, "coordinationStudyDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.CoordinationStudyDate;
                }
                set
                {
                    this.ModelElement.CoordinationStudyDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the IdcType property
        /// </summary>
        private sealed class IdcTypeProxy : ModelPropertyChange<IFlowgate, object>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IdcTypeProxy(IFlowgate modelElement) : 
                    base(modelElement, "IdcType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override object Value
            {
                get
                {
                    return this.ModelElement.IdcType;
                }
                set
                {
                    this.ModelElement.IdcType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the managingEntityFlag property
        /// </summary>
        private sealed class ManagingEntityFlagProxy : ModelPropertyChange<IFlowgate, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ManagingEntityFlagProxy(IFlowgate modelElement) : 
                    base(modelElement, "managingEntityFlag")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.ManagingEntityFlag;
                }
                set
                {
                    this.ModelElement.ManagingEntityFlag = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TransmissionReliabilityMargin property
        /// </summary>
        private sealed class TransmissionReliabilityMarginProxy : ModelPropertyChange<IFlowgate, ITransmissionReliabilityMargin>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransmissionReliabilityMarginProxy(IFlowgate modelElement) : 
                    base(modelElement, "TransmissionReliabilityMargin")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITransmissionReliabilityMargin Value
            {
                get
                {
                    return this.ModelElement.TransmissionReliabilityMargin;
                }
                set
                {
                    this.ModelElement.TransmissionReliabilityMargin = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SubControlArea property
        /// </summary>
        private sealed class SubControlAreaProxy : ModelPropertyChange<IFlowgate, ISubControlArea>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubControlAreaProxy(IFlowgate modelElement) : 
                    base(modelElement, "SubControlArea")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISubControlArea Value
            {
                get
                {
                    return this.ModelElement.SubControlArea;
                }
                set
                {
                    this.ModelElement.SubControlArea = value;
                }
            }
        }
    }
}

