//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the SecurityConstraintsClearing class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "SecurityConstraintsClearing")]
    [DebuggerDisplayAttribute("SecurityConstraintsClearing {UUID}")]
    public partial class SecurityConstraintsClearing : MarketFactors, ISecurityConstraintsClearing, IModelElement
    {
        
        /// <summary>
        /// The backing field for the MwLimit property
        /// </summary>
        private float _mwLimit;
        
        private static Lazy<ITypedElement> _mwLimitAttribute = new Lazy<ITypedElement>(RetrieveMwLimitAttribute);
        
        /// <summary>
        /// The backing field for the MwFlow property
        /// </summary>
        private float _mwFlow;
        
        private static Lazy<ITypedElement> _mwFlowAttribute = new Lazy<ITypedElement>(RetrieveMwFlowAttribute);
        
        /// <summary>
        /// The backing field for the ShadowPrice property
        /// </summary>
        private float _shadowPrice;
        
        private static Lazy<ITypedElement> _shadowPriceAttribute = new Lazy<ITypedElement>(RetrieveShadowPriceAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The mwLimit property
        /// </summary>
        [XmlElementNameAttribute("mwLimit")]
        [XmlAttributeAttribute(true)]
        public virtual float MwLimit
        {
            get
            {
                return this._mwLimit;
            }
            set
            {
                if ((this._mwLimit != value))
                {
                    float old = this._mwLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMwLimitChanging(e);
                    this.OnPropertyChanging("MwLimit", e, _mwLimitAttribute);
                    this._mwLimit = value;
                    this.OnMwLimitChanged(e);
                    this.OnPropertyChanged("MwLimit", e, _mwLimitAttribute);
                }
            }
        }
        
        /// <summary>
        /// The mwFlow property
        /// </summary>
        [XmlElementNameAttribute("mwFlow")]
        [XmlAttributeAttribute(true)]
        public virtual float MwFlow
        {
            get
            {
                return this._mwFlow;
            }
            set
            {
                if ((this._mwFlow != value))
                {
                    float old = this._mwFlow;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMwFlowChanging(e);
                    this.OnPropertyChanging("MwFlow", e, _mwFlowAttribute);
                    this._mwFlow = value;
                    this.OnMwFlowChanged(e);
                    this.OnPropertyChanged("MwFlow", e, _mwFlowAttribute);
                }
            }
        }
        
        /// <summary>
        /// The shadowPrice property
        /// </summary>
        [XmlElementNameAttribute("shadowPrice")]
        [XmlAttributeAttribute(true)]
        public virtual float ShadowPrice
        {
            get
            {
                return this._shadowPrice;
            }
            set
            {
                if ((this._shadowPrice != value))
                {
                    float old = this._shadowPrice;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnShadowPriceChanging(e);
                    this.OnPropertyChanging("ShadowPrice", e, _shadowPriceAttribute);
                    this._shadowPrice = value;
                    this.OnShadowPriceChanged(e);
                    this.OnPropertyChanged("ShadowPrice", e, _shadowPriceAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "SecurityConstraintsClearing")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the MwLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MwLimitChanging;
        
        /// <summary>
        /// Gets fired when the MwLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MwLimitChanged;
        
        /// <summary>
        /// Gets fired before the MwFlow property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MwFlowChanging;
        
        /// <summary>
        /// Gets fired when the MwFlow property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MwFlowChanged;
        
        /// <summary>
        /// Gets fired before the ShadowPrice property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShadowPriceChanging;
        
        /// <summary>
        /// Gets fired when the ShadowPrice property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShadowPriceChanged;
        
        private static ITypedElement RetrieveMwLimitAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SecurityConstraintsClearing.ClassInstance)).Resolve("mwLimit")));
        }
        
        /// <summary>
        /// Raises the MwLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMwLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MwLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MwLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMwLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MwLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMwFlowAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SecurityConstraintsClearing.ClassInstance)).Resolve("mwFlow")));
        }
        
        /// <summary>
        /// Raises the MwFlowChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMwFlowChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MwFlowChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MwFlowChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMwFlowChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MwFlowChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveShadowPriceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SecurityConstraintsClearing.ClassInstance)).Resolve("shadowPrice")));
        }
        
        /// <summary>
        /// Raises the ShadowPriceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShadowPriceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShadowPriceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ShadowPriceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShadowPriceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShadowPriceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MWLIMIT"))
            {
                return this.MwLimit;
            }
            if ((attribute == "MWFLOW"))
            {
                return this.MwFlow;
            }
            if ((attribute == "SHADOWPRICE"))
            {
                return this.ShadowPrice;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MWLIMIT"))
            {
                this.MwLimit = ((float)(value));
                return;
            }
            if ((feature == "MWFLOW"))
            {
                this.MwFlow = ((float)(value));
                return;
            }
            if ((feature == "SHADOWPRICE"))
            {
                this.ShadowPrice = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "SecurityConstraintsClearing")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the mwLimit property
        /// </summary>
        private sealed class MwLimitProxy : ModelPropertyChange<ISecurityConstraintsClearing, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MwLimitProxy(ISecurityConstraintsClearing modelElement) : 
                    base(modelElement, "mwLimit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MwLimit;
                }
                set
                {
                    this.ModelElement.MwLimit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the mwFlow property
        /// </summary>
        private sealed class MwFlowProxy : ModelPropertyChange<ISecurityConstraintsClearing, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MwFlowProxy(ISecurityConstraintsClearing modelElement) : 
                    base(modelElement, "mwFlow")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MwFlow;
                }
                set
                {
                    this.ModelElement.MwFlow = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the shadowPrice property
        /// </summary>
        private sealed class ShadowPriceProxy : ModelPropertyChange<ISecurityConstraintsClearing, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ShadowPriceProxy(ISecurityConstraintsClearing modelElement) : 
                    base(modelElement, "shadowPrice")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ShadowPrice;
                }
                set
                {
                    this.ModelElement.ShadowPrice = value;
                }
            }
        }
    }
}

