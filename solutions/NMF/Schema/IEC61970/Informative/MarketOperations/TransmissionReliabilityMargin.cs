//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the TransmissionReliabilityMargin class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "TransmissionReliabilityMargin")]
    [DebuggerDisplayAttribute("TransmissionReliabilityMargin {UUID}")]
    public partial class TransmissionReliabilityMargin : IdentifiedObject, ITransmissionReliabilityMargin, IModelElement
    {
        
        /// <summary>
        /// The backing field for the TrmType property
        /// </summary>
        private string _trmType;
        
        private static Lazy<ITypedElement> _trmTypeAttribute = new Lazy<ITypedElement>(RetrieveTrmTypeAttribute);
        
        /// <summary>
        /// The backing field for the ValueUnit property
        /// </summary>
        private string _valueUnit;
        
        private static Lazy<ITypedElement> _valueUnitAttribute = new Lazy<ITypedElement>(RetrieveValueUnitAttribute);
        
        /// <summary>
        /// The backing field for the TrmValue property
        /// </summary>
        private float _trmValue;
        
        private static Lazy<ITypedElement> _trmValueAttribute = new Lazy<ITypedElement>(RetrieveTrmValueAttribute);
        
        private static Lazy<ITypedElement> _flowgateReference = new Lazy<ITypedElement>(RetrieveFlowgateReference);
        
        /// <summary>
        /// The backing field for the Flowgate property
        /// </summary>
        private TransmissionReliabilityMarginFlowgateCollection _flowgate;
        
        private static IClass _classInstance;
        
        public TransmissionReliabilityMargin()
        {
            this._flowgate = new TransmissionReliabilityMarginFlowgateCollection(this);
            this._flowgate.CollectionChanging += this.FlowgateCollectionChanging;
            this._flowgate.CollectionChanged += this.FlowgateCollectionChanged;
        }
        
        /// <summary>
        /// The TrmType property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string TrmType
        {
            get
            {
                return this._trmType;
            }
            set
            {
                if ((this._trmType != value))
                {
                    string old = this._trmType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTrmTypeChanging(e);
                    this.OnPropertyChanging("TrmType", e, _trmTypeAttribute);
                    this._trmType = value;
                    this.OnTrmTypeChanged(e);
                    this.OnPropertyChanged("TrmType", e, _trmTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The valueUnit property
        /// </summary>
        [XmlElementNameAttribute("valueUnit")]
        [XmlAttributeAttribute(true)]
        public virtual string ValueUnit
        {
            get
            {
                return this._valueUnit;
            }
            set
            {
                if ((this._valueUnit != value))
                {
                    string old = this._valueUnit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueUnitChanging(e);
                    this.OnPropertyChanging("ValueUnit", e, _valueUnitAttribute);
                    this._valueUnit = value;
                    this.OnValueUnitChanged(e);
                    this.OnPropertyChanged("ValueUnit", e, _valueUnitAttribute);
                }
            }
        }
        
        /// <summary>
        /// The trmValue property
        /// </summary>
        [XmlElementNameAttribute("trmValue")]
        [XmlAttributeAttribute(true)]
        public virtual float TrmValue
        {
            get
            {
                return this._trmValue;
            }
            set
            {
                if ((this._trmValue != value))
                {
                    float old = this._trmValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTrmValueChanging(e);
                    this.OnPropertyChanging("TrmValue", e, _trmValueAttribute);
                    this._trmValue = value;
                    this.OnTrmValueChanged(e);
                    this.OnPropertyChanged("TrmValue", e, _trmValueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Flowgate property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TransmissionReliabilityMargin")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IFlowgate> Flowgate
        {
            get
            {
                return this._flowgate;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TransmissionReliabilityMarginReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "TransmissionReliabilityMargin")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the TrmType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TrmTypeChanging;
        
        /// <summary>
        /// Gets fired when the TrmType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TrmTypeChanged;
        
        /// <summary>
        /// Gets fired before the ValueUnit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueUnitChanging;
        
        /// <summary>
        /// Gets fired when the ValueUnit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueUnitChanged;
        
        /// <summary>
        /// Gets fired before the TrmValue property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TrmValueChanging;
        
        /// <summary>
        /// Gets fired when the TrmValue property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TrmValueChanged;
        
        private static ITypedElement RetrieveTrmTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransmissionReliabilityMargin.ClassInstance)).Resolve("TrmType")));
        }
        
        /// <summary>
        /// Raises the TrmTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTrmTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TrmTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TrmTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTrmTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TrmTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveValueUnitAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransmissionReliabilityMargin.ClassInstance)).Resolve("valueUnit")));
        }
        
        /// <summary>
        /// Raises the ValueUnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueUnitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueUnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueUnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueUnitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueUnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTrmValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransmissionReliabilityMargin.ClassInstance)).Resolve("trmValue")));
        }
        
        /// <summary>
        /// Raises the TrmValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTrmValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TrmValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TrmValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTrmValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TrmValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFlowgateReference()
        {
            return ((ITypedElement)(((ModelElement)(TransmissionReliabilityMargin.ClassInstance)).Resolve("Flowgate")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Flowgate property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FlowgateCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Flowgate", e, _flowgateReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Flowgate property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FlowgateCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Flowgate", e, _flowgateReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TRMTYPE"))
            {
                return this.TrmType;
            }
            if ((attribute == "VALUEUNIT"))
            {
                return this.ValueUnit;
            }
            if ((attribute == "TRMVALUE"))
            {
                return this.TrmValue;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "FLOWGATE"))
            {
                return this._flowgate;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TRMTYPE"))
            {
                this.TrmType = ((string)(value));
                return;
            }
            if ((feature == "VALUEUNIT"))
            {
                this.ValueUnit = ((string)(value));
                return;
            }
            if ((feature == "TRMVALUE"))
            {
                this.TrmValue = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "TransmissionReliabilityMargin")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TransmissionReliabilityMargin class
        /// </summary>
        public class TransmissionReliabilityMarginReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TransmissionReliabilityMargin _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TransmissionReliabilityMarginReferencedElementsCollection(TransmissionReliabilityMargin parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Flowgate.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Flowgate.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Flowgate.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IFlowgate flowgateCasted = item.As<IFlowgate>();
                if ((flowgateCasted != null))
                {
                    this._parent.Flowgate.Add(flowgateCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Flowgate.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Flowgate.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> flowgateEnumerator = this._parent.Flowgate.GetEnumerator();
                try
                {
                    for (
                    ; flowgateEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = flowgateEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    flowgateEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IFlowgate flowgateItem = item.As<IFlowgate>();
                if (((flowgateItem != null) 
                            && this._parent.Flowgate.Remove(flowgateItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Flowgate).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TrmType property
        /// </summary>
        private sealed class TrmTypeProxy : ModelPropertyChange<ITransmissionReliabilityMargin, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TrmTypeProxy(ITransmissionReliabilityMargin modelElement) : 
                    base(modelElement, "TrmType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.TrmType;
                }
                set
                {
                    this.ModelElement.TrmType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the valueUnit property
        /// </summary>
        private sealed class ValueUnitProxy : ModelPropertyChange<ITransmissionReliabilityMargin, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueUnitProxy(ITransmissionReliabilityMargin modelElement) : 
                    base(modelElement, "valueUnit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ValueUnit;
                }
                set
                {
                    this.ModelElement.ValueUnit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the trmValue property
        /// </summary>
        private sealed class TrmValueProxy : ModelPropertyChange<ITransmissionReliabilityMargin, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TrmValueProxy(ITransmissionReliabilityMargin modelElement) : 
                    base(modelElement, "trmValue")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TrmValue;
                }
                set
                {
                    this.ModelElement.TrmValue = value;
                }
            }
        }
    }
}

