using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the FTR class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "FTR")]
    [DebuggerDisplayAttribute("FTR {UUID}")]
    public partial class FTR : Agreement, IFTR, IModelElement
    {
        
        /// <summary>
        /// The backing field for the BaseEnergy property
        /// </summary>
        private float _baseEnergy;
        
        private static Lazy<ITypedElement> _baseEnergyAttribute = new Lazy<ITypedElement>(RetrieveBaseEnergyAttribute);
        
        /// <summary>
        /// The backing field for the Action property
        /// </summary>
        private string _action;
        
        private static Lazy<ITypedElement> _actionAttribute = new Lazy<ITypedElement>(RetrieveActionAttribute);
        
        /// <summary>
        /// The backing field for the Optimized property
        /// </summary>
        private string _optimized;
        
        private static Lazy<ITypedElement> _optimizedAttribute = new Lazy<ITypedElement>(RetrieveOptimizedAttribute);
        
        /// <summary>
        /// The backing field for the Class property
        /// </summary>
        private string _class;
        
        private static Lazy<ITypedElement> _classAttribute = new Lazy<ITypedElement>(RetrieveClassAttribute);
        
        /// <summary>
        /// The backing field for the FtrType property
        /// </summary>
        private string _ftrType;
        
        private static Lazy<ITypedElement> _ftrTypeAttribute = new Lazy<ITypedElement>(RetrieveFtrTypeAttribute);
        
        private static Lazy<ITypedElement> _energyPriceCurveReference = new Lazy<ITypedElement>(RetrieveEnergyPriceCurveReference);
        
        /// <summary>
        /// The backing field for the EnergyPriceCurve property
        /// </summary>
        private IEnergyPriceCurve _energyPriceCurve;
        
        private static Lazy<ITypedElement> _pnodesReference = new Lazy<ITypedElement>(RetrievePnodesReference);
        
        /// <summary>
        /// The backing field for the Pnodes property
        /// </summary>
        private FTRPnodesCollection _pnodes;
        
        private static Lazy<ITypedElement> _flowgateReference = new Lazy<ITypedElement>(RetrieveFlowgateReference);
        
        /// <summary>
        /// The backing field for the Flowgate property
        /// </summary>
        private IFlowgate _flowgate;
        
        private static IClass _classInstance;
        
        public FTR()
        {
            this._pnodes = new FTRPnodesCollection(this);
            this._pnodes.CollectionChanging += this.PnodesCollectionChanging;
            this._pnodes.CollectionChanged += this.PnodesCollectionChanged;
        }
        
        /// <summary>
        /// The baseEnergy property
        /// </summary>
        [XmlElementNameAttribute("baseEnergy")]
        [XmlAttributeAttribute(true)]
        public virtual float BaseEnergy
        {
            get
            {
                return this._baseEnergy;
            }
            set
            {
                if ((this._baseEnergy != value))
                {
                    float old = this._baseEnergy;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBaseEnergyChanging(e);
                    this.OnPropertyChanging("BaseEnergy", e, _baseEnergyAttribute);
                    this._baseEnergy = value;
                    this.OnBaseEnergyChanged(e);
                    this.OnPropertyChanged("BaseEnergy", e, _baseEnergyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The action property
        /// </summary>
        [XmlElementNameAttribute("action")]
        [XmlAttributeAttribute(true)]
        public virtual string Action
        {
            get
            {
                return this._action;
            }
            set
            {
                if ((this._action != value))
                {
                    string old = this._action;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActionChanging(e);
                    this.OnPropertyChanging("Action", e, _actionAttribute);
                    this._action = value;
                    this.OnActionChanged(e);
                    this.OnPropertyChanged("Action", e, _actionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The optimized property
        /// </summary>
        [XmlElementNameAttribute("optimized")]
        [XmlAttributeAttribute(true)]
        public virtual string Optimized
        {
            get
            {
                return this._optimized;
            }
            set
            {
                if ((this._optimized != value))
                {
                    string old = this._optimized;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOptimizedChanging(e);
                    this.OnPropertyChanging("Optimized", e, _optimizedAttribute);
                    this._optimized = value;
                    this.OnOptimizedChanged(e);
                    this.OnPropertyChanged("Optimized", e, _optimizedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The class property
        /// </summary>
        [XmlElementNameAttribute("class")]
        [XmlAttributeAttribute(true)]
        public virtual string Class
        {
            get
            {
                return this._class;
            }
            set
            {
                if ((this._class != value))
                {
                    string old = this._class;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnClassChanging(e);
                    this.OnPropertyChanging("Class", e, _classAttribute);
                    this._class = value;
                    this.OnClassChanged(e);
                    this.OnPropertyChanged("Class", e, _classAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ftrType property
        /// </summary>
        [XmlElementNameAttribute("ftrType")]
        [XmlAttributeAttribute(true)]
        public virtual string FtrType
        {
            get
            {
                return this._ftrType;
            }
            set
            {
                if ((this._ftrType != value))
                {
                    string old = this._ftrType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFtrTypeChanging(e);
                    this.OnPropertyChanging("FtrType", e, _ftrTypeAttribute);
                    this._ftrType = value;
                    this.OnFtrTypeChanged(e);
                    this.OnPropertyChanged("FtrType", e, _ftrTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The EnergyPriceCurve property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("FTRs")]
        public virtual IEnergyPriceCurve EnergyPriceCurve
        {
            get
            {
                return this._energyPriceCurve;
            }
            set
            {
                if ((this._energyPriceCurve != value))
                {
                    IEnergyPriceCurve old = this._energyPriceCurve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEnergyPriceCurveChanging(e);
                    this.OnPropertyChanging("EnergyPriceCurve", e, _energyPriceCurveReference);
                    this._energyPriceCurve = value;
                    if ((old != null))
                    {
                        old.FTRs.Remove(this);
                        old.Deleted -= this.OnResetEnergyPriceCurve;
                    }
                    if ((value != null))
                    {
                        value.FTRs.Add(this);
                        value.Deleted += this.OnResetEnergyPriceCurve;
                    }
                    this.OnEnergyPriceCurveChanged(e);
                    this.OnPropertyChanged("EnergyPriceCurve", e, _energyPriceCurveReference);
                }
            }
        }
        
        /// <summary>
        /// The Pnodes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("FTRs")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IPnode> Pnodes
        {
            get
            {
                return this._pnodes;
            }
        }
        
        /// <summary>
        /// The Flowgate property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("FTRs")]
        public virtual IFlowgate Flowgate
        {
            get
            {
                return this._flowgate;
            }
            set
            {
                if ((this._flowgate != value))
                {
                    IFlowgate old = this._flowgate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFlowgateChanging(e);
                    this.OnPropertyChanging("Flowgate", e, _flowgateReference);
                    this._flowgate = value;
                    if ((old != null))
                    {
                        old.FTRs.Remove(this);
                        old.Deleted -= this.OnResetFlowgate;
                    }
                    if ((value != null))
                    {
                        value.FTRs.Add(this);
                        value.Deleted += this.OnResetFlowgate;
                    }
                    this.OnFlowgateChanged(e);
                    this.OnPropertyChanged("Flowgate", e, _flowgateReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new FTRReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "FTR")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the BaseEnergy property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BaseEnergyChanging;
        
        /// <summary>
        /// Gets fired when the BaseEnergy property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BaseEnergyChanged;
        
        /// <summary>
        /// Gets fired before the Action property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActionChanging;
        
        /// <summary>
        /// Gets fired when the Action property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActionChanged;
        
        /// <summary>
        /// Gets fired before the Optimized property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OptimizedChanging;
        
        /// <summary>
        /// Gets fired when the Optimized property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OptimizedChanged;
        
        /// <summary>
        /// Gets fired before the Class property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClassChanging;
        
        /// <summary>
        /// Gets fired when the Class property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ClassChanged;
        
        /// <summary>
        /// Gets fired before the FtrType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FtrTypeChanging;
        
        /// <summary>
        /// Gets fired when the FtrType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FtrTypeChanged;
        
        /// <summary>
        /// Gets fired before the EnergyPriceCurve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyPriceCurveChanging;
        
        /// <summary>
        /// Gets fired when the EnergyPriceCurve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyPriceCurveChanged;
        
        /// <summary>
        /// Gets fired before the Flowgate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FlowgateChanging;
        
        /// <summary>
        /// Gets fired when the Flowgate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FlowgateChanged;
        
        private static ITypedElement RetrieveBaseEnergyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FTR.ClassInstance)).Resolve("baseEnergy")));
        }
        
        /// <summary>
        /// Raises the BaseEnergyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBaseEnergyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BaseEnergyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BaseEnergyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBaseEnergyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BaseEnergyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FTR.ClassInstance)).Resolve("action")));
        }
        
        /// <summary>
        /// Raises the ActionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOptimizedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FTR.ClassInstance)).Resolve("optimized")));
        }
        
        /// <summary>
        /// Raises the OptimizedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOptimizedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OptimizedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OptimizedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOptimizedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OptimizedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveClassAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FTR.ClassInstance)).Resolve("class")));
        }
        
        /// <summary>
        /// Raises the ClassChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClassChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClassChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ClassChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnClassChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ClassChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFtrTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FTR.ClassInstance)).Resolve("ftrType")));
        }
        
        /// <summary>
        /// Raises the FtrTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFtrTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FtrTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FtrTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFtrTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FtrTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEnergyPriceCurveReference()
        {
            return ((ITypedElement)(((ModelElement)(FTR.ClassInstance)).Resolve("EnergyPriceCurve")));
        }
        
        /// <summary>
        /// Raises the EnergyPriceCurveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyPriceCurveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyPriceCurveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnergyPriceCurveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyPriceCurveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyPriceCurveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EnergyPriceCurve property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEnergyPriceCurve(object sender, System.EventArgs eventArgs)
        {
            this.EnergyPriceCurve = null;
        }
        
        private static ITypedElement RetrievePnodesReference()
        {
            return ((ITypedElement)(((ModelElement)(FTR.ClassInstance)).Resolve("Pnodes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Pnodes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PnodesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Pnodes", e, _pnodesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Pnodes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PnodesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Pnodes", e, _pnodesReference);
        }
        
        private static ITypedElement RetrieveFlowgateReference()
        {
            return ((ITypedElement)(((ModelElement)(FTR.ClassInstance)).Resolve("Flowgate")));
        }
        
        /// <summary>
        /// Raises the FlowgateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFlowgateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FlowgateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FlowgateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFlowgateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FlowgateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Flowgate property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFlowgate(object sender, System.EventArgs eventArgs)
        {
            this.Flowgate = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "BASEENERGY"))
            {
                return this.BaseEnergy;
            }
            if ((attribute == "ACTION"))
            {
                return this.Action;
            }
            if ((attribute == "OPTIMIZED"))
            {
                return this.Optimized;
            }
            if ((attribute == "CLASS"))
            {
                return this.Class;
            }
            if ((attribute == "FTRTYPE"))
            {
                return this.FtrType;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PNODES"))
            {
                return this._pnodes;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ENERGYPRICECURVE"))
            {
                this.EnergyPriceCurve = ((IEnergyPriceCurve)(value));
                return;
            }
            if ((feature == "FLOWGATE"))
            {
                this.Flowgate = ((IFlowgate)(value));
                return;
            }
            if ((feature == "BASEENERGY"))
            {
                this.BaseEnergy = ((float)(value));
                return;
            }
            if ((feature == "ACTION"))
            {
                this.Action = ((string)(value));
                return;
            }
            if ((feature == "OPTIMIZED"))
            {
                this.Optimized = ((string)(value));
                return;
            }
            if ((feature == "CLASS"))
            {
                this.Class = ((string)(value));
                return;
            }
            if ((feature == "FTRTYPE"))
            {
                this.FtrType = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "EnergyPriceCurve"))
            {
                return new EnergyPriceCurveProxy(this);
            }
            if ((attribute == "Flowgate"))
            {
                return new FlowgateProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "EnergyPriceCurve"))
            {
                return new EnergyPriceCurveProxy(this);
            }
            if ((reference == "Flowgate"))
            {
                return new FlowgateProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "FTR")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the FTR class
        /// </summary>
        public class FTRReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private FTR _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FTRReferencedElementsCollection(FTR parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.EnergyPriceCurve != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Pnodes.Count);
                    if ((this._parent.Flowgate != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.EnergyPriceCurveChanged += this.PropagateValueChanges;
                this._parent.Pnodes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.FlowgateChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.EnergyPriceCurveChanged -= this.PropagateValueChanges;
                this._parent.Pnodes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.FlowgateChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.EnergyPriceCurve == null))
                {
                    IEnergyPriceCurve energyPriceCurveCasted = item.As<IEnergyPriceCurve>();
                    if ((energyPriceCurveCasted != null))
                    {
                        this._parent.EnergyPriceCurve = energyPriceCurveCasted;
                        return;
                    }
                }
                IPnode pnodesCasted = item.As<IPnode>();
                if ((pnodesCasted != null))
                {
                    this._parent.Pnodes.Add(pnodesCasted);
                }
                if ((this._parent.Flowgate == null))
                {
                    IFlowgate flowgateCasted = item.As<IFlowgate>();
                    if ((flowgateCasted != null))
                    {
                        this._parent.Flowgate = flowgateCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EnergyPriceCurve = null;
                this._parent.Pnodes.Clear();
                this._parent.Flowgate = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.EnergyPriceCurve))
                {
                    return true;
                }
                if (this._parent.Pnodes.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Flowgate))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.EnergyPriceCurve != null))
                {
                    array[arrayIndex] = this._parent.EnergyPriceCurve;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> pnodesEnumerator = this._parent.Pnodes.GetEnumerator();
                try
                {
                    for (
                    ; pnodesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = pnodesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    pnodesEnumerator.Dispose();
                }
                if ((this._parent.Flowgate != null))
                {
                    array[arrayIndex] = this._parent.Flowgate;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.EnergyPriceCurve == item))
                {
                    this._parent.EnergyPriceCurve = null;
                    return true;
                }
                IPnode pnodeItem = item.As<IPnode>();
                if (((pnodeItem != null) 
                            && this._parent.Pnodes.Remove(pnodeItem)))
                {
                    return true;
                }
                if ((this._parent.Flowgate == item))
                {
                    this._parent.Flowgate = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EnergyPriceCurve).Concat(this._parent.Pnodes).Concat(this._parent.Flowgate).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the baseEnergy property
        /// </summary>
        private sealed class BaseEnergyProxy : ModelPropertyChange<IFTR, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BaseEnergyProxy(IFTR modelElement) : 
                    base(modelElement, "baseEnergy")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.BaseEnergy;
                }
                set
                {
                    this.ModelElement.BaseEnergy = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the action property
        /// </summary>
        private sealed class ActionProxy : ModelPropertyChange<IFTR, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActionProxy(IFTR modelElement) : 
                    base(modelElement, "action")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Action;
                }
                set
                {
                    this.ModelElement.Action = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the optimized property
        /// </summary>
        private sealed class OptimizedProxy : ModelPropertyChange<IFTR, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OptimizedProxy(IFTR modelElement) : 
                    base(modelElement, "optimized")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Optimized;
                }
                set
                {
                    this.ModelElement.Optimized = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the class property
        /// </summary>
        private sealed class ClassProxy : ModelPropertyChange<IFTR, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ClassProxy(IFTR modelElement) : 
                    base(modelElement, "class")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Class;
                }
                set
                {
                    this.ModelElement.Class = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ftrType property
        /// </summary>
        private sealed class FtrTypeProxy : ModelPropertyChange<IFTR, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FtrTypeProxy(IFTR modelElement) : 
                    base(modelElement, "ftrType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.FtrType;
                }
                set
                {
                    this.ModelElement.FtrType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EnergyPriceCurve property
        /// </summary>
        private sealed class EnergyPriceCurveProxy : ModelPropertyChange<IFTR, IEnergyPriceCurve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnergyPriceCurveProxy(IFTR modelElement) : 
                    base(modelElement, "EnergyPriceCurve")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEnergyPriceCurve Value
            {
                get
                {
                    return this.ModelElement.EnergyPriceCurve;
                }
                set
                {
                    this.ModelElement.EnergyPriceCurve = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Flowgate property
        /// </summary>
        private sealed class FlowgateProxy : ModelPropertyChange<IFTR, IFlowgate>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FlowgateProxy(IFTR modelElement) : 
                    base(modelElement, "Flowgate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFlowgate Value
            {
                get
                {
                    return this.ModelElement.Flowgate;
                }
                set
                {
                    this.ModelElement.Flowgate = value;
                }
            }
        }
    }
}

