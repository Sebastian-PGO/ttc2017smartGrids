using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The public interface for GeneratingBid
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(GeneratingBid))]
    [XmlDefaultImplementationTypeAttribute(typeof(GeneratingBid))]
    public interface IGeneratingBid : IModelElement, IResourceBid
    {
        
        /// <summary>
        /// The upTimeMin property
        /// </summary>
        float UpTimeMin
        {
            get;
            set;
        }
        
        /// <summary>
        /// The maximumEconomicMW property
        /// </summary>
        float MaximumEconomicMW
        {
            get;
            set;
        }
        
        /// <summary>
        /// The upTimeMax property
        /// </summary>
        float UpTimeMax
        {
            get;
            set;
        }
        
        /// <summary>
        /// The startUpType property
        /// </summary>
        int StartUpType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The notificationTime property
        /// </summary>
        float NotificationTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The maxEmergencyMW property
        /// </summary>
        float MaxEmergencyMW
        {
            get;
            set;
        }
        
        /// <summary>
        /// The startupTime property
        /// </summary>
        float StartupTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minimumEconomicMW property
        /// </summary>
        float MinimumEconomicMW
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minEmergencyMW property
        /// </summary>
        float MinEmergencyMW
        {
            get;
            set;
        }
        
        /// <summary>
        /// The noLoadCost property
        /// </summary>
        float NoLoadCost
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minimumDownTime property
        /// </summary>
        float MinimumDownTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The downTimeMax property
        /// </summary>
        float DownTimeMax
        {
            get;
            set;
        }
        
        /// <summary>
        /// The startUpRampRate property
        /// </summary>
        object StartUpRampRate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The operatingMode property
        /// </summary>
        string OperatingMode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The RegisteredGenerator property
        /// </summary>
        IRegisteredGenerator RegisteredGenerator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The BidSet property
        /// </summary>
        IBidSet BidSet
        {
            get;
            set;
        }
        
        /// <summary>
        /// The StartUpTimeCurve property
        /// </summary>
        IStartUpTimeCurve StartUpTimeCurve
        {
            get;
            set;
        }
        
        /// <summary>
        /// The NotificationTimeCurve property
        /// </summary>
        INotificationTimeCurve NotificationTimeCurve
        {
            get;
            set;
        }
        
        /// <summary>
        /// The StartUpCostCurve property
        /// </summary>
        IStartUpCostCurve StartUpCostCurve
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the UpTimeMin property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UpTimeMinChanging;
        
        /// <summary>
        /// Gets fired when the UpTimeMin property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UpTimeMinChanged;
        
        /// <summary>
        /// Gets fired before the MaximumEconomicMW property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaximumEconomicMWChanging;
        
        /// <summary>
        /// Gets fired when the MaximumEconomicMW property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaximumEconomicMWChanged;
        
        /// <summary>
        /// Gets fired before the UpTimeMax property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UpTimeMaxChanging;
        
        /// <summary>
        /// Gets fired when the UpTimeMax property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UpTimeMaxChanged;
        
        /// <summary>
        /// Gets fired before the StartUpType property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartUpTypeChanging;
        
        /// <summary>
        /// Gets fired when the StartUpType property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartUpTypeChanged;
        
        /// <summary>
        /// Gets fired before the NotificationTime property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NotificationTimeChanging;
        
        /// <summary>
        /// Gets fired when the NotificationTime property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NotificationTimeChanged;
        
        /// <summary>
        /// Gets fired before the MaxEmergencyMW property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxEmergencyMWChanging;
        
        /// <summary>
        /// Gets fired when the MaxEmergencyMW property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxEmergencyMWChanged;
        
        /// <summary>
        /// Gets fired before the StartupTime property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartupTimeChanging;
        
        /// <summary>
        /// Gets fired when the StartupTime property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartupTimeChanged;
        
        /// <summary>
        /// Gets fired before the MinimumEconomicMW property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinimumEconomicMWChanging;
        
        /// <summary>
        /// Gets fired when the MinimumEconomicMW property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinimumEconomicMWChanged;
        
        /// <summary>
        /// Gets fired before the MinEmergencyMW property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinEmergencyMWChanging;
        
        /// <summary>
        /// Gets fired when the MinEmergencyMW property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinEmergencyMWChanged;
        
        /// <summary>
        /// Gets fired before the NoLoadCost property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NoLoadCostChanging;
        
        /// <summary>
        /// Gets fired when the NoLoadCost property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NoLoadCostChanged;
        
        /// <summary>
        /// Gets fired before the MinimumDownTime property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinimumDownTimeChanging;
        
        /// <summary>
        /// Gets fired when the MinimumDownTime property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinimumDownTimeChanged;
        
        /// <summary>
        /// Gets fired before the DownTimeMax property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DownTimeMaxChanging;
        
        /// <summary>
        /// Gets fired when the DownTimeMax property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DownTimeMaxChanged;
        
        /// <summary>
        /// Gets fired before the StartUpRampRate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartUpRampRateChanging;
        
        /// <summary>
        /// Gets fired when the StartUpRampRate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartUpRampRateChanged;
        
        /// <summary>
        /// Gets fired before the OperatingMode property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OperatingModeChanging;
        
        /// <summary>
        /// Gets fired when the OperatingMode property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OperatingModeChanged;
        
        /// <summary>
        /// Gets fired before the RegisteredGenerator property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RegisteredGeneratorChanging;
        
        /// <summary>
        /// Gets fired when the RegisteredGenerator property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RegisteredGeneratorChanged;
        
        /// <summary>
        /// Gets fired before the BidSet property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BidSetChanging;
        
        /// <summary>
        /// Gets fired when the BidSet property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BidSetChanged;
        
        /// <summary>
        /// Gets fired before the StartUpTimeCurve property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartUpTimeCurveChanging;
        
        /// <summary>
        /// Gets fired when the StartUpTimeCurve property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartUpTimeCurveChanged;
        
        /// <summary>
        /// Gets fired before the NotificationTimeCurve property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NotificationTimeCurveChanging;
        
        /// <summary>
        /// Gets fired when the NotificationTimeCurve property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NotificationTimeCurveChanged;
        
        /// <summary>
        /// Gets fired before the StartUpCostCurve property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartUpCostCurveChanging;
        
        /// <summary>
        /// Gets fired when the StartUpCostCurve property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartUpCostCurveChanged;
    }
}

