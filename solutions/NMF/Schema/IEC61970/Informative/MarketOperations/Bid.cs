using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the Bid class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "Bid")]
    [DebuggerDisplayAttribute("Bid {UUID}")]
    public partial class Bid : Document, IBid, IModelElement
    {
        
        /// <summary>
        /// The backing field for the StopTime property
        /// </summary>
        private DateTime _stopTime;
        
        private static Lazy<ITypedElement> _stopTimeAttribute = new Lazy<ITypedElement>(RetrieveStopTimeAttribute);
        
        /// <summary>
        /// The backing field for the MarketType property
        /// </summary>
        private string _marketType;
        
        private static Lazy<ITypedElement> _marketTypeAttribute = new Lazy<ITypedElement>(RetrieveMarketTypeAttribute);
        
        /// <summary>
        /// The backing field for the StartTime property
        /// </summary>
        private DateTime _startTime;
        
        private static Lazy<ITypedElement> _startTimeAttribute = new Lazy<ITypedElement>(RetrieveStartTimeAttribute);
        
        private static Lazy<ITypedElement> _productBidsReference = new Lazy<ITypedElement>(RetrieveProductBidsReference);
        
        /// <summary>
        /// The backing field for the ProductBids property
        /// </summary>
        private BidProductBidsCollection _productBids;
        
        private static Lazy<ITypedElement> _bidClearingReference = new Lazy<ITypedElement>(RetrieveBidClearingReference);
        
        /// <summary>
        /// The backing field for the BidClearing property
        /// </summary>
        private IBidClearing _bidClearing;
        
        private static Lazy<ITypedElement> _marketReference = new Lazy<ITypedElement>(RetrieveMarketReference);
        
        /// <summary>
        /// The backing field for the Market property
        /// </summary>
        private IMarket _market;
        
        private static IClass _classInstance;
        
        public Bid()
        {
            this._productBids = new BidProductBidsCollection(this);
            this._productBids.CollectionChanging += this.ProductBidsCollectionChanging;
            this._productBids.CollectionChanged += this.ProductBidsCollectionChanged;
        }
        
        /// <summary>
        /// The stopTime property
        /// </summary>
        [XmlElementNameAttribute("stopTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime StopTime
        {
            get
            {
                return this._stopTime;
            }
            set
            {
                if ((this._stopTime != value))
                {
                    DateTime old = this._stopTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStopTimeChanging(e);
                    this.OnPropertyChanging("StopTime", e, _stopTimeAttribute);
                    this._stopTime = value;
                    this.OnStopTimeChanged(e);
                    this.OnPropertyChanged("StopTime", e, _stopTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The marketType property
        /// </summary>
        [XmlElementNameAttribute("marketType")]
        [XmlAttributeAttribute(true)]
        public virtual string MarketType
        {
            get
            {
                return this._marketType;
            }
            set
            {
                if ((this._marketType != value))
                {
                    string old = this._marketType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMarketTypeChanging(e);
                    this.OnPropertyChanging("MarketType", e, _marketTypeAttribute);
                    this._marketType = value;
                    this.OnMarketTypeChanged(e);
                    this.OnPropertyChanged("MarketType", e, _marketTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The startTime property
        /// </summary>
        [XmlElementNameAttribute("startTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime StartTime
        {
            get
            {
                return this._startTime;
            }
            set
            {
                if ((this._startTime != value))
                {
                    DateTime old = this._startTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStartTimeChanging(e);
                    this.OnPropertyChanging("StartTime", e, _startTimeAttribute);
                    this._startTime = value;
                    this.OnStartTimeChanged(e);
                    this.OnPropertyChanged("StartTime", e, _startTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ProductBids property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Bid")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IProductBid> ProductBids
        {
            get
            {
                return this._productBids;
            }
        }
        
        /// <summary>
        /// The BidClearing property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Bid")]
        public virtual IBidClearing BidClearing
        {
            get
            {
                return this._bidClearing;
            }
            set
            {
                if ((this._bidClearing != value))
                {
                    IBidClearing old = this._bidClearing;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBidClearingChanging(e);
                    this.OnPropertyChanging("BidClearing", e, _bidClearingReference);
                    this._bidClearing = value;
                    if ((old != null))
                    {
                        old.Bid = null;
                        old.Deleted -= this.OnResetBidClearing;
                    }
                    if ((value != null))
                    {
                        value.Bid = this;
                        value.Deleted += this.OnResetBidClearing;
                    }
                    this.OnBidClearingChanged(e);
                    this.OnPropertyChanged("BidClearing", e, _bidClearingReference);
                }
            }
        }
        
        /// <summary>
        /// The Market property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Bids")]
        public virtual IMarket Market
        {
            get
            {
                return this._market;
            }
            set
            {
                if ((this._market != value))
                {
                    IMarket old = this._market;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMarketChanging(e);
                    this.OnPropertyChanging("Market", e, _marketReference);
                    this._market = value;
                    if ((old != null))
                    {
                        old.Bids.Remove(this);
                        old.Deleted -= this.OnResetMarket;
                    }
                    if ((value != null))
                    {
                        value.Bids.Add(this);
                        value.Deleted += this.OnResetMarket;
                    }
                    this.OnMarketChanged(e);
                    this.OnPropertyChanged("Market", e, _marketReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new BidReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "Bid")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the StopTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StopTimeChanging;
        
        /// <summary>
        /// Gets fired when the StopTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StopTimeChanged;
        
        /// <summary>
        /// Gets fired before the MarketType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MarketTypeChanging;
        
        /// <summary>
        /// Gets fired when the MarketType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MarketTypeChanged;
        
        /// <summary>
        /// Gets fired before the StartTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartTimeChanging;
        
        /// <summary>
        /// Gets fired when the StartTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartTimeChanged;
        
        /// <summary>
        /// Gets fired before the BidClearing property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BidClearingChanging;
        
        /// <summary>
        /// Gets fired when the BidClearing property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BidClearingChanged;
        
        /// <summary>
        /// Gets fired before the Market property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MarketChanging;
        
        /// <summary>
        /// Gets fired when the Market property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MarketChanged;
        
        private static ITypedElement RetrieveStopTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Bid.ClassInstance)).Resolve("stopTime")));
        }
        
        /// <summary>
        /// Raises the StopTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStopTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StopTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StopTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStopTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StopTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMarketTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Bid.ClassInstance)).Resolve("marketType")));
        }
        
        /// <summary>
        /// Raises the MarketTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMarketTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MarketTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MarketTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMarketTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MarketTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStartTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Bid.ClassInstance)).Resolve("startTime")));
        }
        
        /// <summary>
        /// Raises the StartTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveProductBidsReference()
        {
            return ((ITypedElement)(((ModelElement)(Bid.ClassInstance)).Resolve("ProductBids")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ProductBids property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProductBidsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ProductBids", e, _productBidsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ProductBids property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProductBidsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ProductBids", e, _productBidsReference);
        }
        
        private static ITypedElement RetrieveBidClearingReference()
        {
            return ((ITypedElement)(((ModelElement)(Bid.ClassInstance)).Resolve("BidClearing")));
        }
        
        /// <summary>
        /// Raises the BidClearingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBidClearingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BidClearingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BidClearingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBidClearingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BidClearingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BidClearing property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBidClearing(object sender, System.EventArgs eventArgs)
        {
            this.BidClearing = null;
        }
        
        private static ITypedElement RetrieveMarketReference()
        {
            return ((ITypedElement)(((ModelElement)(Bid.ClassInstance)).Resolve("Market")));
        }
        
        /// <summary>
        /// Raises the MarketChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMarketChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MarketChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MarketChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMarketChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MarketChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Market property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMarket(object sender, System.EventArgs eventArgs)
        {
            this.Market = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "STOPTIME"))
            {
                return this.StopTime;
            }
            if ((attribute == "MARKETTYPE"))
            {
                return this.MarketType;
            }
            if ((attribute == "STARTTIME"))
            {
                return this.StartTime;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PRODUCTBIDS"))
            {
                return this._productBids;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "BIDCLEARING"))
            {
                this.BidClearing = ((IBidClearing)(value));
                return;
            }
            if ((feature == "MARKET"))
            {
                this.Market = ((IMarket)(value));
                return;
            }
            if ((feature == "STOPTIME"))
            {
                this.StopTime = ((DateTime)(value));
                return;
            }
            if ((feature == "MARKETTYPE"))
            {
                this.MarketType = ((string)(value));
                return;
            }
            if ((feature == "STARTTIME"))
            {
                this.StartTime = ((DateTime)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "BidClearing"))
            {
                return new BidClearingProxy(this);
            }
            if ((attribute == "Market"))
            {
                return new MarketProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "BidClearing"))
            {
                return new BidClearingProxy(this);
            }
            if ((reference == "Market"))
            {
                return new MarketProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "Bid")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Bid class
        /// </summary>
        public class BidReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Bid _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BidReferencedElementsCollection(Bid parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ProductBids.Count);
                    if ((this._parent.BidClearing != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Market != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ProductBids.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BidClearingChanged += this.PropagateValueChanges;
                this._parent.MarketChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ProductBids.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BidClearingChanged -= this.PropagateValueChanges;
                this._parent.MarketChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IProductBid productBidsCasted = item.As<IProductBid>();
                if ((productBidsCasted != null))
                {
                    this._parent.ProductBids.Add(productBidsCasted);
                }
                if ((this._parent.BidClearing == null))
                {
                    IBidClearing bidClearingCasted = item.As<IBidClearing>();
                    if ((bidClearingCasted != null))
                    {
                        this._parent.BidClearing = bidClearingCasted;
                        return;
                    }
                }
                if ((this._parent.Market == null))
                {
                    IMarket marketCasted = item.As<IMarket>();
                    if ((marketCasted != null))
                    {
                        this._parent.Market = marketCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ProductBids.Clear();
                this._parent.BidClearing = null;
                this._parent.Market = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ProductBids.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.BidClearing))
                {
                    return true;
                }
                if ((item == this._parent.Market))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> productBidsEnumerator = this._parent.ProductBids.GetEnumerator();
                try
                {
                    for (
                    ; productBidsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = productBidsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    productBidsEnumerator.Dispose();
                }
                if ((this._parent.BidClearing != null))
                {
                    array[arrayIndex] = this._parent.BidClearing;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Market != null))
                {
                    array[arrayIndex] = this._parent.Market;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IProductBid productBidItem = item.As<IProductBid>();
                if (((productBidItem != null) 
                            && this._parent.ProductBids.Remove(productBidItem)))
                {
                    return true;
                }
                if ((this._parent.BidClearing == item))
                {
                    this._parent.BidClearing = null;
                    return true;
                }
                if ((this._parent.Market == item))
                {
                    this._parent.Market = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ProductBids).Concat(this._parent.BidClearing).Concat(this._parent.Market).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the stopTime property
        /// </summary>
        private sealed class StopTimeProxy : ModelPropertyChange<IBid, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StopTimeProxy(IBid modelElement) : 
                    base(modelElement, "stopTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.StopTime;
                }
                set
                {
                    this.ModelElement.StopTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the marketType property
        /// </summary>
        private sealed class MarketTypeProxy : ModelPropertyChange<IBid, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MarketTypeProxy(IBid modelElement) : 
                    base(modelElement, "marketType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.MarketType;
                }
                set
                {
                    this.ModelElement.MarketType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the startTime property
        /// </summary>
        private sealed class StartTimeProxy : ModelPropertyChange<IBid, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartTimeProxy(IBid modelElement) : 
                    base(modelElement, "startTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.StartTime;
                }
                set
                {
                    this.ModelElement.StartTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BidClearing property
        /// </summary>
        private sealed class BidClearingProxy : ModelPropertyChange<IBid, IBidClearing>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BidClearingProxy(IBid modelElement) : 
                    base(modelElement, "BidClearing")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBidClearing Value
            {
                get
                {
                    return this.ModelElement.BidClearing;
                }
                set
                {
                    this.ModelElement.BidClearing = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Market property
        /// </summary>
        private sealed class MarketProxy : ModelPropertyChange<IBid, IMarket>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MarketProxy(IBid modelElement) : 
                    base(modelElement, "Market")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMarket Value
            {
                get
                {
                    return this.ModelElement.Market;
                }
                set
                {
                    this.ModelElement.Market = value;
                }
            }
        }
    }
}

