using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the LoadBid class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "LoadBid")]
    [DebuggerDisplayAttribute("LoadBid {UUID}")]
    public partial class LoadBid : ResourceBid, ILoadBid, IModelElement
    {
        
        /// <summary>
        /// The backing field for the MinLoadReduction property
        /// </summary>
        private float _minLoadReduction;
        
        private static Lazy<ITypedElement> _minLoadReductionAttribute = new Lazy<ITypedElement>(RetrieveMinLoadReductionAttribute);
        
        /// <summary>
        /// The backing field for the DropRampRate property
        /// </summary>
        private object _dropRampRate;
        
        private static Lazy<ITypedElement> _dropRampRateAttribute = new Lazy<ITypedElement>(RetrieveDropRampRateAttribute);
        
        /// <summary>
        /// The backing field for the MinLoadReductionInterval property
        /// </summary>
        private float _minLoadReductionInterval;
        
        private static Lazy<ITypedElement> _minLoadReductionIntervalAttribute = new Lazy<ITypedElement>(RetrieveMinLoadReductionIntervalAttribute);
        
        /// <summary>
        /// The backing field for the MinLoadReductionCost property
        /// </summary>
        private float _minLoadReductionCost;
        
        private static Lazy<ITypedElement> _minLoadReductionCostAttribute = new Lazy<ITypedElement>(RetrieveMinLoadReductionCostAttribute);
        
        /// <summary>
        /// The backing field for the PickUpRampRate property
        /// </summary>
        private object _pickUpRampRate;
        
        private static Lazy<ITypedElement> _pickUpRampRateAttribute = new Lazy<ITypedElement>(RetrievePickUpRampRateAttribute);
        
        /// <summary>
        /// The backing field for the ReqNoticeTime property
        /// </summary>
        private float _reqNoticeTime;
        
        private static Lazy<ITypedElement> _reqNoticeTimeAttribute = new Lazy<ITypedElement>(RetrieveReqNoticeTimeAttribute);
        
        /// <summary>
        /// The backing field for the MinLoad property
        /// </summary>
        private float _minLoad;
        
        private static Lazy<ITypedElement> _minLoadAttribute = new Lazy<ITypedElement>(RetrieveMinLoadAttribute);
        
        /// <summary>
        /// The backing field for the MinTimeBetLoadRed property
        /// </summary>
        private float _minTimeBetLoadRed;
        
        private static Lazy<ITypedElement> _minTimeBetLoadRedAttribute = new Lazy<ITypedElement>(RetrieveMinTimeBetLoadRedAttribute);
        
        /// <summary>
        /// The backing field for the ShutdownCost property
        /// </summary>
        private float _shutdownCost;
        
        private static Lazy<ITypedElement> _shutdownCostAttribute = new Lazy<ITypedElement>(RetrieveShutdownCostAttribute);
        
        private static Lazy<ITypedElement> _loadReductionPriceCurveReference = new Lazy<ITypedElement>(RetrieveLoadReductionPriceCurveReference);
        
        /// <summary>
        /// The backing field for the LoadReductionPriceCurve property
        /// </summary>
        private ILoadReductionPriceCurve _loadReductionPriceCurve;
        
        private static Lazy<ITypedElement> _registeredLoadReference = new Lazy<ITypedElement>(RetrieveRegisteredLoadReference);
        
        /// <summary>
        /// The backing field for the RegisteredLoad property
        /// </summary>
        private IRegisteredLoad _registeredLoad;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The minLoadReduction property
        /// </summary>
        [XmlElementNameAttribute("minLoadReduction")]
        [XmlAttributeAttribute(true)]
        public virtual float MinLoadReduction
        {
            get
            {
                return this._minLoadReduction;
            }
            set
            {
                if ((this._minLoadReduction != value))
                {
                    float old = this._minLoadReduction;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinLoadReductionChanging(e);
                    this.OnPropertyChanging("MinLoadReduction", e, _minLoadReductionAttribute);
                    this._minLoadReduction = value;
                    this.OnMinLoadReductionChanged(e);
                    this.OnPropertyChanged("MinLoadReduction", e, _minLoadReductionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The dropRampRate property
        /// </summary>
        [XmlElementNameAttribute("dropRampRate")]
        [XmlAttributeAttribute(true)]
        public virtual object DropRampRate
        {
            get
            {
                return this._dropRampRate;
            }
            set
            {
                if ((this._dropRampRate != value))
                {
                    object old = this._dropRampRate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDropRampRateChanging(e);
                    this.OnPropertyChanging("DropRampRate", e, _dropRampRateAttribute);
                    this._dropRampRate = value;
                    this.OnDropRampRateChanged(e);
                    this.OnPropertyChanged("DropRampRate", e, _dropRampRateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The minLoadReductionInterval property
        /// </summary>
        [XmlElementNameAttribute("minLoadReductionInterval")]
        [XmlAttributeAttribute(true)]
        public virtual float MinLoadReductionInterval
        {
            get
            {
                return this._minLoadReductionInterval;
            }
            set
            {
                if ((this._minLoadReductionInterval != value))
                {
                    float old = this._minLoadReductionInterval;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinLoadReductionIntervalChanging(e);
                    this.OnPropertyChanging("MinLoadReductionInterval", e, _minLoadReductionIntervalAttribute);
                    this._minLoadReductionInterval = value;
                    this.OnMinLoadReductionIntervalChanged(e);
                    this.OnPropertyChanged("MinLoadReductionInterval", e, _minLoadReductionIntervalAttribute);
                }
            }
        }
        
        /// <summary>
        /// The minLoadReductionCost property
        /// </summary>
        [XmlElementNameAttribute("minLoadReductionCost")]
        [XmlAttributeAttribute(true)]
        public virtual float MinLoadReductionCost
        {
            get
            {
                return this._minLoadReductionCost;
            }
            set
            {
                if ((this._minLoadReductionCost != value))
                {
                    float old = this._minLoadReductionCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinLoadReductionCostChanging(e);
                    this.OnPropertyChanging("MinLoadReductionCost", e, _minLoadReductionCostAttribute);
                    this._minLoadReductionCost = value;
                    this.OnMinLoadReductionCostChanged(e);
                    this.OnPropertyChanged("MinLoadReductionCost", e, _minLoadReductionCostAttribute);
                }
            }
        }
        
        /// <summary>
        /// The pickUpRampRate property
        /// </summary>
        [XmlElementNameAttribute("pickUpRampRate")]
        [XmlAttributeAttribute(true)]
        public virtual object PickUpRampRate
        {
            get
            {
                return this._pickUpRampRate;
            }
            set
            {
                if ((this._pickUpRampRate != value))
                {
                    object old = this._pickUpRampRate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPickUpRampRateChanging(e);
                    this.OnPropertyChanging("PickUpRampRate", e, _pickUpRampRateAttribute);
                    this._pickUpRampRate = value;
                    this.OnPickUpRampRateChanged(e);
                    this.OnPropertyChanged("PickUpRampRate", e, _pickUpRampRateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The reqNoticeTime property
        /// </summary>
        [XmlElementNameAttribute("reqNoticeTime")]
        [XmlAttributeAttribute(true)]
        public virtual float ReqNoticeTime
        {
            get
            {
                return this._reqNoticeTime;
            }
            set
            {
                if ((this._reqNoticeTime != value))
                {
                    float old = this._reqNoticeTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReqNoticeTimeChanging(e);
                    this.OnPropertyChanging("ReqNoticeTime", e, _reqNoticeTimeAttribute);
                    this._reqNoticeTime = value;
                    this.OnReqNoticeTimeChanged(e);
                    this.OnPropertyChanged("ReqNoticeTime", e, _reqNoticeTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The minLoad property
        /// </summary>
        [XmlElementNameAttribute("minLoad")]
        [XmlAttributeAttribute(true)]
        public virtual float MinLoad
        {
            get
            {
                return this._minLoad;
            }
            set
            {
                if ((this._minLoad != value))
                {
                    float old = this._minLoad;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinLoadChanging(e);
                    this.OnPropertyChanging("MinLoad", e, _minLoadAttribute);
                    this._minLoad = value;
                    this.OnMinLoadChanged(e);
                    this.OnPropertyChanged("MinLoad", e, _minLoadAttribute);
                }
            }
        }
        
        /// <summary>
        /// The minTimeBetLoadRed property
        /// </summary>
        [XmlElementNameAttribute("minTimeBetLoadRed")]
        [XmlAttributeAttribute(true)]
        public virtual float MinTimeBetLoadRed
        {
            get
            {
                return this._minTimeBetLoadRed;
            }
            set
            {
                if ((this._minTimeBetLoadRed != value))
                {
                    float old = this._minTimeBetLoadRed;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinTimeBetLoadRedChanging(e);
                    this.OnPropertyChanging("MinTimeBetLoadRed", e, _minTimeBetLoadRedAttribute);
                    this._minTimeBetLoadRed = value;
                    this.OnMinTimeBetLoadRedChanged(e);
                    this.OnPropertyChanged("MinTimeBetLoadRed", e, _minTimeBetLoadRedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The shutdownCost property
        /// </summary>
        [XmlElementNameAttribute("shutdownCost")]
        [XmlAttributeAttribute(true)]
        public virtual float ShutdownCost
        {
            get
            {
                return this._shutdownCost;
            }
            set
            {
                if ((this._shutdownCost != value))
                {
                    float old = this._shutdownCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnShutdownCostChanging(e);
                    this.OnPropertyChanging("ShutdownCost", e, _shutdownCostAttribute);
                    this._shutdownCost = value;
                    this.OnShutdownCostChanged(e);
                    this.OnPropertyChanged("ShutdownCost", e, _shutdownCostAttribute);
                }
            }
        }
        
        /// <summary>
        /// The LoadReductionPriceCurve property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("LoadBids")]
        public virtual ILoadReductionPriceCurve LoadReductionPriceCurve
        {
            get
            {
                return this._loadReductionPriceCurve;
            }
            set
            {
                if ((this._loadReductionPriceCurve != value))
                {
                    ILoadReductionPriceCurve old = this._loadReductionPriceCurve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLoadReductionPriceCurveChanging(e);
                    this.OnPropertyChanging("LoadReductionPriceCurve", e, _loadReductionPriceCurveReference);
                    this._loadReductionPriceCurve = value;
                    if ((old != null))
                    {
                        old.LoadBids.Remove(this);
                        old.Deleted -= this.OnResetLoadReductionPriceCurve;
                    }
                    if ((value != null))
                    {
                        value.LoadBids.Add(this);
                        value.Deleted += this.OnResetLoadReductionPriceCurve;
                    }
                    this.OnLoadReductionPriceCurveChanged(e);
                    this.OnPropertyChanged("LoadReductionPriceCurve", e, _loadReductionPriceCurveReference);
                }
            }
        }
        
        /// <summary>
        /// The RegisteredLoad property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("LoadBids")]
        public virtual IRegisteredLoad RegisteredLoad
        {
            get
            {
                return this._registeredLoad;
            }
            set
            {
                if ((this._registeredLoad != value))
                {
                    IRegisteredLoad old = this._registeredLoad;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRegisteredLoadChanging(e);
                    this.OnPropertyChanging("RegisteredLoad", e, _registeredLoadReference);
                    this._registeredLoad = value;
                    if ((old != null))
                    {
                        old.LoadBids.Remove(this);
                        old.Deleted -= this.OnResetRegisteredLoad;
                    }
                    if ((value != null))
                    {
                        value.LoadBids.Add(this);
                        value.Deleted += this.OnResetRegisteredLoad;
                    }
                    this.OnRegisteredLoadChanged(e);
                    this.OnPropertyChanged("RegisteredLoad", e, _registeredLoadReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new LoadBidReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "LoadBid")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the MinLoadReduction property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinLoadReductionChanging;
        
        /// <summary>
        /// Gets fired when the MinLoadReduction property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinLoadReductionChanged;
        
        /// <summary>
        /// Gets fired before the DropRampRate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DropRampRateChanging;
        
        /// <summary>
        /// Gets fired when the DropRampRate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DropRampRateChanged;
        
        /// <summary>
        /// Gets fired before the MinLoadReductionInterval property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinLoadReductionIntervalChanging;
        
        /// <summary>
        /// Gets fired when the MinLoadReductionInterval property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinLoadReductionIntervalChanged;
        
        /// <summary>
        /// Gets fired before the MinLoadReductionCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinLoadReductionCostChanging;
        
        /// <summary>
        /// Gets fired when the MinLoadReductionCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinLoadReductionCostChanged;
        
        /// <summary>
        /// Gets fired before the PickUpRampRate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PickUpRampRateChanging;
        
        /// <summary>
        /// Gets fired when the PickUpRampRate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PickUpRampRateChanged;
        
        /// <summary>
        /// Gets fired before the ReqNoticeTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReqNoticeTimeChanging;
        
        /// <summary>
        /// Gets fired when the ReqNoticeTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReqNoticeTimeChanged;
        
        /// <summary>
        /// Gets fired before the MinLoad property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinLoadChanging;
        
        /// <summary>
        /// Gets fired when the MinLoad property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinLoadChanged;
        
        /// <summary>
        /// Gets fired before the MinTimeBetLoadRed property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinTimeBetLoadRedChanging;
        
        /// <summary>
        /// Gets fired when the MinTimeBetLoadRed property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinTimeBetLoadRedChanged;
        
        /// <summary>
        /// Gets fired before the ShutdownCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShutdownCostChanging;
        
        /// <summary>
        /// Gets fired when the ShutdownCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShutdownCostChanged;
        
        /// <summary>
        /// Gets fired before the LoadReductionPriceCurve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoadReductionPriceCurveChanging;
        
        /// <summary>
        /// Gets fired when the LoadReductionPriceCurve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoadReductionPriceCurveChanged;
        
        /// <summary>
        /// Gets fired before the RegisteredLoad property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegisteredLoadChanging;
        
        /// <summary>
        /// Gets fired when the RegisteredLoad property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegisteredLoadChanged;
        
        private static ITypedElement RetrieveMinLoadReductionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(LoadBid.ClassInstance)).Resolve("minLoadReduction")));
        }
        
        /// <summary>
        /// Raises the MinLoadReductionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinLoadReductionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinLoadReductionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinLoadReductionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinLoadReductionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinLoadReductionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDropRampRateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(LoadBid.ClassInstance)).Resolve("dropRampRate")));
        }
        
        /// <summary>
        /// Raises the DropRampRateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDropRampRateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DropRampRateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DropRampRateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDropRampRateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DropRampRateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMinLoadReductionIntervalAttribute()
        {
            return ((ITypedElement)(((ModelElement)(LoadBid.ClassInstance)).Resolve("minLoadReductionInterval")));
        }
        
        /// <summary>
        /// Raises the MinLoadReductionIntervalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinLoadReductionIntervalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinLoadReductionIntervalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinLoadReductionIntervalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinLoadReductionIntervalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinLoadReductionIntervalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMinLoadReductionCostAttribute()
        {
            return ((ITypedElement)(((ModelElement)(LoadBid.ClassInstance)).Resolve("minLoadReductionCost")));
        }
        
        /// <summary>
        /// Raises the MinLoadReductionCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinLoadReductionCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinLoadReductionCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinLoadReductionCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinLoadReductionCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinLoadReductionCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePickUpRampRateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(LoadBid.ClassInstance)).Resolve("pickUpRampRate")));
        }
        
        /// <summary>
        /// Raises the PickUpRampRateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPickUpRampRateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PickUpRampRateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PickUpRampRateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPickUpRampRateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PickUpRampRateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReqNoticeTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(LoadBid.ClassInstance)).Resolve("reqNoticeTime")));
        }
        
        /// <summary>
        /// Raises the ReqNoticeTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReqNoticeTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReqNoticeTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReqNoticeTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReqNoticeTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReqNoticeTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMinLoadAttribute()
        {
            return ((ITypedElement)(((ModelElement)(LoadBid.ClassInstance)).Resolve("minLoad")));
        }
        
        /// <summary>
        /// Raises the MinLoadChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinLoadChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinLoadChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinLoadChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinLoadChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinLoadChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMinTimeBetLoadRedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(LoadBid.ClassInstance)).Resolve("minTimeBetLoadRed")));
        }
        
        /// <summary>
        /// Raises the MinTimeBetLoadRedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinTimeBetLoadRedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinTimeBetLoadRedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinTimeBetLoadRedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinTimeBetLoadRedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinTimeBetLoadRedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveShutdownCostAttribute()
        {
            return ((ITypedElement)(((ModelElement)(LoadBid.ClassInstance)).Resolve("shutdownCost")));
        }
        
        /// <summary>
        /// Raises the ShutdownCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShutdownCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShutdownCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ShutdownCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShutdownCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShutdownCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLoadReductionPriceCurveReference()
        {
            return ((ITypedElement)(((ModelElement)(LoadBid.ClassInstance)).Resolve("LoadReductionPriceCurve")));
        }
        
        /// <summary>
        /// Raises the LoadReductionPriceCurveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoadReductionPriceCurveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoadReductionPriceCurveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LoadReductionPriceCurveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoadReductionPriceCurveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoadReductionPriceCurveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LoadReductionPriceCurve property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLoadReductionPriceCurve(object sender, System.EventArgs eventArgs)
        {
            this.LoadReductionPriceCurve = null;
        }
        
        private static ITypedElement RetrieveRegisteredLoadReference()
        {
            return ((ITypedElement)(((ModelElement)(LoadBid.ClassInstance)).Resolve("RegisteredLoad")));
        }
        
        /// <summary>
        /// Raises the RegisteredLoadChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegisteredLoadChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegisteredLoadChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RegisteredLoadChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegisteredLoadChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegisteredLoadChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RegisteredLoad property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRegisteredLoad(object sender, System.EventArgs eventArgs)
        {
            this.RegisteredLoad = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MINLOADREDUCTION"))
            {
                return this.MinLoadReduction;
            }
            if ((attribute == "DROPRAMPRATE"))
            {
                return this.DropRampRate;
            }
            if ((attribute == "MINLOADREDUCTIONINTERVAL"))
            {
                return this.MinLoadReductionInterval;
            }
            if ((attribute == "MINLOADREDUCTIONCOST"))
            {
                return this.MinLoadReductionCost;
            }
            if ((attribute == "PICKUPRAMPRATE"))
            {
                return this.PickUpRampRate;
            }
            if ((attribute == "REQNOTICETIME"))
            {
                return this.ReqNoticeTime;
            }
            if ((attribute == "MINLOAD"))
            {
                return this.MinLoad;
            }
            if ((attribute == "MINTIMEBETLOADRED"))
            {
                return this.MinTimeBetLoadRed;
            }
            if ((attribute == "SHUTDOWNCOST"))
            {
                return this.ShutdownCost;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "LOADREDUCTIONPRICECURVE"))
            {
                this.LoadReductionPriceCurve = ((ILoadReductionPriceCurve)(value));
                return;
            }
            if ((feature == "REGISTEREDLOAD"))
            {
                this.RegisteredLoad = ((IRegisteredLoad)(value));
                return;
            }
            if ((feature == "MINLOADREDUCTION"))
            {
                this.MinLoadReduction = ((float)(value));
                return;
            }
            if ((feature == "DROPRAMPRATE"))
            {
                this.DropRampRate = ((object)(value));
                return;
            }
            if ((feature == "MINLOADREDUCTIONINTERVAL"))
            {
                this.MinLoadReductionInterval = ((float)(value));
                return;
            }
            if ((feature == "MINLOADREDUCTIONCOST"))
            {
                this.MinLoadReductionCost = ((float)(value));
                return;
            }
            if ((feature == "PICKUPRAMPRATE"))
            {
                this.PickUpRampRate = ((object)(value));
                return;
            }
            if ((feature == "REQNOTICETIME"))
            {
                this.ReqNoticeTime = ((float)(value));
                return;
            }
            if ((feature == "MINLOAD"))
            {
                this.MinLoad = ((float)(value));
                return;
            }
            if ((feature == "MINTIMEBETLOADRED"))
            {
                this.MinTimeBetLoadRed = ((float)(value));
                return;
            }
            if ((feature == "SHUTDOWNCOST"))
            {
                this.ShutdownCost = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "LoadReductionPriceCurve"))
            {
                return new LoadReductionPriceCurveProxy(this);
            }
            if ((attribute == "RegisteredLoad"))
            {
                return new RegisteredLoadProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "LoadReductionPriceCurve"))
            {
                return new LoadReductionPriceCurveProxy(this);
            }
            if ((reference == "RegisteredLoad"))
            {
                return new RegisteredLoadProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "LoadBid")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the LoadBid class
        /// </summary>
        public class LoadBidReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private LoadBid _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public LoadBidReferencedElementsCollection(LoadBid parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.LoadReductionPriceCurve != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RegisteredLoad != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.LoadReductionPriceCurveChanged += this.PropagateValueChanges;
                this._parent.RegisteredLoadChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.LoadReductionPriceCurveChanged -= this.PropagateValueChanges;
                this._parent.RegisteredLoadChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.LoadReductionPriceCurve == null))
                {
                    ILoadReductionPriceCurve loadReductionPriceCurveCasted = item.As<ILoadReductionPriceCurve>();
                    if ((loadReductionPriceCurveCasted != null))
                    {
                        this._parent.LoadReductionPriceCurve = loadReductionPriceCurveCasted;
                        return;
                    }
                }
                if ((this._parent.RegisteredLoad == null))
                {
                    IRegisteredLoad registeredLoadCasted = item.As<IRegisteredLoad>();
                    if ((registeredLoadCasted != null))
                    {
                        this._parent.RegisteredLoad = registeredLoadCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.LoadReductionPriceCurve = null;
                this._parent.RegisteredLoad = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.LoadReductionPriceCurve))
                {
                    return true;
                }
                if ((item == this._parent.RegisteredLoad))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.LoadReductionPriceCurve != null))
                {
                    array[arrayIndex] = this._parent.LoadReductionPriceCurve;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RegisteredLoad != null))
                {
                    array[arrayIndex] = this._parent.RegisteredLoad;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.LoadReductionPriceCurve == item))
                {
                    this._parent.LoadReductionPriceCurve = null;
                    return true;
                }
                if ((this._parent.RegisteredLoad == item))
                {
                    this._parent.RegisteredLoad = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.LoadReductionPriceCurve).Concat(this._parent.RegisteredLoad).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minLoadReduction property
        /// </summary>
        private sealed class MinLoadReductionProxy : ModelPropertyChange<ILoadBid, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinLoadReductionProxy(ILoadBid modelElement) : 
                    base(modelElement, "minLoadReduction")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinLoadReduction;
                }
                set
                {
                    this.ModelElement.MinLoadReduction = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dropRampRate property
        /// </summary>
        private sealed class DropRampRateProxy : ModelPropertyChange<ILoadBid, object>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DropRampRateProxy(ILoadBid modelElement) : 
                    base(modelElement, "dropRampRate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override object Value
            {
                get
                {
                    return this.ModelElement.DropRampRate;
                }
                set
                {
                    this.ModelElement.DropRampRate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minLoadReductionInterval property
        /// </summary>
        private sealed class MinLoadReductionIntervalProxy : ModelPropertyChange<ILoadBid, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinLoadReductionIntervalProxy(ILoadBid modelElement) : 
                    base(modelElement, "minLoadReductionInterval")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinLoadReductionInterval;
                }
                set
                {
                    this.ModelElement.MinLoadReductionInterval = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minLoadReductionCost property
        /// </summary>
        private sealed class MinLoadReductionCostProxy : ModelPropertyChange<ILoadBid, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinLoadReductionCostProxy(ILoadBid modelElement) : 
                    base(modelElement, "minLoadReductionCost")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinLoadReductionCost;
                }
                set
                {
                    this.ModelElement.MinLoadReductionCost = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pickUpRampRate property
        /// </summary>
        private sealed class PickUpRampRateProxy : ModelPropertyChange<ILoadBid, object>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PickUpRampRateProxy(ILoadBid modelElement) : 
                    base(modelElement, "pickUpRampRate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override object Value
            {
                get
                {
                    return this.ModelElement.PickUpRampRate;
                }
                set
                {
                    this.ModelElement.PickUpRampRate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the reqNoticeTime property
        /// </summary>
        private sealed class ReqNoticeTimeProxy : ModelPropertyChange<ILoadBid, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReqNoticeTimeProxy(ILoadBid modelElement) : 
                    base(modelElement, "reqNoticeTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ReqNoticeTime;
                }
                set
                {
                    this.ModelElement.ReqNoticeTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minLoad property
        /// </summary>
        private sealed class MinLoadProxy : ModelPropertyChange<ILoadBid, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinLoadProxy(ILoadBid modelElement) : 
                    base(modelElement, "minLoad")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinLoad;
                }
                set
                {
                    this.ModelElement.MinLoad = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minTimeBetLoadRed property
        /// </summary>
        private sealed class MinTimeBetLoadRedProxy : ModelPropertyChange<ILoadBid, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinTimeBetLoadRedProxy(ILoadBid modelElement) : 
                    base(modelElement, "minTimeBetLoadRed")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinTimeBetLoadRed;
                }
                set
                {
                    this.ModelElement.MinTimeBetLoadRed = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the shutdownCost property
        /// </summary>
        private sealed class ShutdownCostProxy : ModelPropertyChange<ILoadBid, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ShutdownCostProxy(ILoadBid modelElement) : 
                    base(modelElement, "shutdownCost")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ShutdownCost;
                }
                set
                {
                    this.ModelElement.ShutdownCost = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LoadReductionPriceCurve property
        /// </summary>
        private sealed class LoadReductionPriceCurveProxy : ModelPropertyChange<ILoadBid, ILoadReductionPriceCurve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LoadReductionPriceCurveProxy(ILoadBid modelElement) : 
                    base(modelElement, "LoadReductionPriceCurve")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ILoadReductionPriceCurve Value
            {
                get
                {
                    return this.ModelElement.LoadReductionPriceCurve;
                }
                set
                {
                    this.ModelElement.LoadReductionPriceCurve = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RegisteredLoad property
        /// </summary>
        private sealed class RegisteredLoadProxy : ModelPropertyChange<ILoadBid, IRegisteredLoad>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RegisteredLoadProxy(ILoadBid modelElement) : 
                    base(modelElement, "RegisteredLoad")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRegisteredLoad Value
            {
                get
                {
                    return this.ModelElement.RegisteredLoad;
                }
                set
                {
                    this.ModelElement.RegisteredLoad = value;
                }
            }
        }
    }
}

