using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the PassThroughBill class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "PassThroughBill")]
    [DebuggerDisplayAttribute("PassThroughBill {UUID}")]
    public partial class PassThroughBill : Document, IPassThroughBill, IModelElement
    {
        
        /// <summary>
        /// The backing field for the BillEnd property
        /// </summary>
        private DateTime _billEnd;
        
        private static Lazy<ITypedElement> _billEndAttribute = new Lazy<ITypedElement>(RetrieveBillEndAttribute);
        
        /// <summary>
        /// The backing field for the EffectiveDate property
        /// </summary>
        private DateTime _effectiveDate;
        
        private static Lazy<ITypedElement> _effectiveDateAttribute = new Lazy<ITypedElement>(RetrieveEffectiveDateAttribute);
        
        /// <summary>
        /// The backing field for the ServiceEnd property
        /// </summary>
        private DateTime _serviceEnd;
        
        private static Lazy<ITypedElement> _serviceEndAttribute = new Lazy<ITypedElement>(RetrieveServiceEndAttribute);
        
        /// <summary>
        /// The backing field for the IsProfiled property
        /// </summary>
        private bool _isProfiled;
        
        private static Lazy<ITypedElement> _isProfiledAttribute = new Lazy<ITypedElement>(RetrieveIsProfiledAttribute);
        
        /// <summary>
        /// The backing field for the PreviousEnd property
        /// </summary>
        private DateTime _previousEnd;
        
        private static Lazy<ITypedElement> _previousEndAttribute = new Lazy<ITypedElement>(RetrievePreviousEndAttribute);
        
        /// <summary>
        /// The backing field for the Amount property
        /// </summary>
        private float _amount;
        
        private static Lazy<ITypedElement> _amountAttribute = new Lazy<ITypedElement>(RetrieveAmountAttribute);
        
        /// <summary>
        /// The backing field for the TimeZone property
        /// </summary>
        private string _timeZone;
        
        private static Lazy<ITypedElement> _timeZoneAttribute = new Lazy<ITypedElement>(RetrieveTimeZoneAttribute);
        
        /// <summary>
        /// The backing field for the BilledTo property
        /// </summary>
        private string _billedTo;
        
        private static Lazy<ITypedElement> _billedToAttribute = new Lazy<ITypedElement>(RetrieveBilledToAttribute);
        
        /// <summary>
        /// The backing field for the IsDisputed property
        /// </summary>
        private bool _isDisputed;
        
        private static Lazy<ITypedElement> _isDisputedAttribute = new Lazy<ITypedElement>(RetrieveIsDisputedAttribute);
        
        /// <summary>
        /// The backing field for the ProvidedBy property
        /// </summary>
        private string _providedBy;
        
        private static Lazy<ITypedElement> _providedByAttribute = new Lazy<ITypedElement>(RetrieveProvidedByAttribute);
        
        /// <summary>
        /// The backing field for the BillStart property
        /// </summary>
        private DateTime _billStart;
        
        private static Lazy<ITypedElement> _billStartAttribute = new Lazy<ITypedElement>(RetrieveBillStartAttribute);
        
        /// <summary>
        /// The backing field for the PreviousStart property
        /// </summary>
        private DateTime _previousStart;
        
        private static Lazy<ITypedElement> _previousStartAttribute = new Lazy<ITypedElement>(RetrievePreviousStartAttribute);
        
        /// <summary>
        /// The backing field for the ServiceStart property
        /// </summary>
        private DateTime _serviceStart;
        
        private static Lazy<ITypedElement> _serviceStartAttribute = new Lazy<ITypedElement>(RetrieveServiceStartAttribute);
        
        /// <summary>
        /// The backing field for the ProductCode property
        /// </summary>
        private string _productCode;
        
        private static Lazy<ITypedElement> _productCodeAttribute = new Lazy<ITypedElement>(RetrieveProductCodeAttribute);
        
        /// <summary>
        /// The backing field for the BillRunType property
        /// </summary>
        private string _billRunType;
        
        private static Lazy<ITypedElement> _billRunTypeAttribute = new Lazy<ITypedElement>(RetrieveBillRunTypeAttribute);
        
        /// <summary>
        /// The backing field for the TransactionType property
        /// </summary>
        private string _transactionType;
        
        private static Lazy<ITypedElement> _transactionTypeAttribute = new Lazy<ITypedElement>(RetrieveTransactionTypeAttribute);
        
        /// <summary>
        /// The backing field for the TradeDate property
        /// </summary>
        private DateTime _tradeDate;
        
        private static Lazy<ITypedElement> _tradeDateAttribute = new Lazy<ITypedElement>(RetrieveTradeDateAttribute);
        
        /// <summary>
        /// The backing field for the Price property
        /// </summary>
        private float _price;
        
        private static Lazy<ITypedElement> _priceAttribute = new Lazy<ITypedElement>(RetrievePriceAttribute);
        
        /// <summary>
        /// The backing field for the TaxAmount property
        /// </summary>
        private float _taxAmount;
        
        private static Lazy<ITypedElement> _taxAmountAttribute = new Lazy<ITypedElement>(RetrieveTaxAmountAttribute);
        
        /// <summary>
        /// The backing field for the SoldTo property
        /// </summary>
        private string _soldTo;
        
        private static Lazy<ITypedElement> _soldToAttribute = new Lazy<ITypedElement>(RetrieveSoldToAttribute);
        
        /// <summary>
        /// The backing field for the TransactionDate property
        /// </summary>
        private DateTime _transactionDate;
        
        private static Lazy<ITypedElement> _transactionDateAttribute = new Lazy<ITypedElement>(RetrieveTransactionDateAttribute);
        
        /// <summary>
        /// The backing field for the PaidTo property
        /// </summary>
        private string _paidTo;
        
        private static Lazy<ITypedElement> _paidToAttribute = new Lazy<ITypedElement>(RetrievePaidToAttribute);
        
        /// <summary>
        /// The backing field for the Quantity property
        /// </summary>
        private object _quantity;
        
        private static Lazy<ITypedElement> _quantityAttribute = new Lazy<ITypedElement>(RetrieveQuantityAttribute);
        
        private static Lazy<ITypedElement> _marketStatementLineItemReference = new Lazy<ITypedElement>(RetrieveMarketStatementLineItemReference);
        
        /// <summary>
        /// The backing field for the MarketStatementLineItem property
        /// </summary>
        private IMarketStatementLineItem _marketStatementLineItem;
        
        private static Lazy<ITypedElement> _userAttributesReference = new Lazy<ITypedElement>(RetrieveUserAttributesReference);
        
        /// <summary>
        /// The backing field for the UserAttributes property
        /// </summary>
        private PassThroughBillUserAttributesCollection _userAttributes;
        
        private static Lazy<ITypedElement> _chargeProfilesReference = new Lazy<ITypedElement>(RetrieveChargeProfilesReference);
        
        /// <summary>
        /// The backing field for the ChargeProfiles property
        /// </summary>
        private PassThroughBillChargeProfilesCollection _chargeProfiles;
        
        private static IClass _classInstance;
        
        public PassThroughBill()
        {
            this._userAttributes = new PassThroughBillUserAttributesCollection(this);
            this._userAttributes.CollectionChanging += this.UserAttributesCollectionChanging;
            this._userAttributes.CollectionChanged += this.UserAttributesCollectionChanged;
            this._chargeProfiles = new PassThroughBillChargeProfilesCollection(this);
            this._chargeProfiles.CollectionChanging += this.ChargeProfilesCollectionChanging;
            this._chargeProfiles.CollectionChanged += this.ChargeProfilesCollectionChanged;
        }
        
        /// <summary>
        /// The billEnd property
        /// </summary>
        [XmlElementNameAttribute("billEnd")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime BillEnd
        {
            get
            {
                return this._billEnd;
            }
            set
            {
                if ((this._billEnd != value))
                {
                    DateTime old = this._billEnd;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBillEndChanging(e);
                    this.OnPropertyChanging("BillEnd", e, _billEndAttribute);
                    this._billEnd = value;
                    this.OnBillEndChanged(e);
                    this.OnPropertyChanged("BillEnd", e, _billEndAttribute);
                }
            }
        }
        
        /// <summary>
        /// The effectiveDate property
        /// </summary>
        [XmlElementNameAttribute("effectiveDate")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime EffectiveDate
        {
            get
            {
                return this._effectiveDate;
            }
            set
            {
                if ((this._effectiveDate != value))
                {
                    DateTime old = this._effectiveDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEffectiveDateChanging(e);
                    this.OnPropertyChanging("EffectiveDate", e, _effectiveDateAttribute);
                    this._effectiveDate = value;
                    this.OnEffectiveDateChanged(e);
                    this.OnPropertyChanged("EffectiveDate", e, _effectiveDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The serviceEnd property
        /// </summary>
        [XmlElementNameAttribute("serviceEnd")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime ServiceEnd
        {
            get
            {
                return this._serviceEnd;
            }
            set
            {
                if ((this._serviceEnd != value))
                {
                    DateTime old = this._serviceEnd;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnServiceEndChanging(e);
                    this.OnPropertyChanging("ServiceEnd", e, _serviceEndAttribute);
                    this._serviceEnd = value;
                    this.OnServiceEndChanged(e);
                    this.OnPropertyChanged("ServiceEnd", e, _serviceEndAttribute);
                }
            }
        }
        
        /// <summary>
        /// The isProfiled property
        /// </summary>
        [XmlElementNameAttribute("isProfiled")]
        [XmlAttributeAttribute(true)]
        public virtual bool IsProfiled
        {
            get
            {
                return this._isProfiled;
            }
            set
            {
                if ((this._isProfiled != value))
                {
                    bool old = this._isProfiled;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsProfiledChanging(e);
                    this.OnPropertyChanging("IsProfiled", e, _isProfiledAttribute);
                    this._isProfiled = value;
                    this.OnIsProfiledChanged(e);
                    this.OnPropertyChanged("IsProfiled", e, _isProfiledAttribute);
                }
            }
        }
        
        /// <summary>
        /// The previousEnd property
        /// </summary>
        [XmlElementNameAttribute("previousEnd")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime PreviousEnd
        {
            get
            {
                return this._previousEnd;
            }
            set
            {
                if ((this._previousEnd != value))
                {
                    DateTime old = this._previousEnd;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPreviousEndChanging(e);
                    this.OnPropertyChanging("PreviousEnd", e, _previousEndAttribute);
                    this._previousEnd = value;
                    this.OnPreviousEndChanged(e);
                    this.OnPropertyChanged("PreviousEnd", e, _previousEndAttribute);
                }
            }
        }
        
        /// <summary>
        /// The amount property
        /// </summary>
        [XmlElementNameAttribute("amount")]
        [XmlAttributeAttribute(true)]
        public virtual float Amount
        {
            get
            {
                return this._amount;
            }
            set
            {
                if ((this._amount != value))
                {
                    float old = this._amount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmountChanging(e);
                    this.OnPropertyChanging("Amount", e, _amountAttribute);
                    this._amount = value;
                    this.OnAmountChanged(e);
                    this.OnPropertyChanged("Amount", e, _amountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The timeZone property
        /// </summary>
        [XmlElementNameAttribute("timeZone")]
        [XmlAttributeAttribute(true)]
        public virtual string TimeZone
        {
            get
            {
                return this._timeZone;
            }
            set
            {
                if ((this._timeZone != value))
                {
                    string old = this._timeZone;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeZoneChanging(e);
                    this.OnPropertyChanging("TimeZone", e, _timeZoneAttribute);
                    this._timeZone = value;
                    this.OnTimeZoneChanged(e);
                    this.OnPropertyChanged("TimeZone", e, _timeZoneAttribute);
                }
            }
        }
        
        /// <summary>
        /// The billedTo property
        /// </summary>
        [XmlElementNameAttribute("billedTo")]
        [XmlAttributeAttribute(true)]
        public virtual string BilledTo
        {
            get
            {
                return this._billedTo;
            }
            set
            {
                if ((this._billedTo != value))
                {
                    string old = this._billedTo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBilledToChanging(e);
                    this.OnPropertyChanging("BilledTo", e, _billedToAttribute);
                    this._billedTo = value;
                    this.OnBilledToChanged(e);
                    this.OnPropertyChanged("BilledTo", e, _billedToAttribute);
                }
            }
        }
        
        /// <summary>
        /// The isDisputed property
        /// </summary>
        [XmlElementNameAttribute("isDisputed")]
        [XmlAttributeAttribute(true)]
        public virtual bool IsDisputed
        {
            get
            {
                return this._isDisputed;
            }
            set
            {
                if ((this._isDisputed != value))
                {
                    bool old = this._isDisputed;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsDisputedChanging(e);
                    this.OnPropertyChanging("IsDisputed", e, _isDisputedAttribute);
                    this._isDisputed = value;
                    this.OnIsDisputedChanged(e);
                    this.OnPropertyChanged("IsDisputed", e, _isDisputedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The providedBy property
        /// </summary>
        [XmlElementNameAttribute("providedBy")]
        [XmlAttributeAttribute(true)]
        public virtual string ProvidedBy
        {
            get
            {
                return this._providedBy;
            }
            set
            {
                if ((this._providedBy != value))
                {
                    string old = this._providedBy;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnProvidedByChanging(e);
                    this.OnPropertyChanging("ProvidedBy", e, _providedByAttribute);
                    this._providedBy = value;
                    this.OnProvidedByChanged(e);
                    this.OnPropertyChanged("ProvidedBy", e, _providedByAttribute);
                }
            }
        }
        
        /// <summary>
        /// The billStart property
        /// </summary>
        [XmlElementNameAttribute("billStart")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime BillStart
        {
            get
            {
                return this._billStart;
            }
            set
            {
                if ((this._billStart != value))
                {
                    DateTime old = this._billStart;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBillStartChanging(e);
                    this.OnPropertyChanging("BillStart", e, _billStartAttribute);
                    this._billStart = value;
                    this.OnBillStartChanged(e);
                    this.OnPropertyChanged("BillStart", e, _billStartAttribute);
                }
            }
        }
        
        /// <summary>
        /// The previousStart property
        /// </summary>
        [XmlElementNameAttribute("previousStart")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime PreviousStart
        {
            get
            {
                return this._previousStart;
            }
            set
            {
                if ((this._previousStart != value))
                {
                    DateTime old = this._previousStart;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPreviousStartChanging(e);
                    this.OnPropertyChanging("PreviousStart", e, _previousStartAttribute);
                    this._previousStart = value;
                    this.OnPreviousStartChanged(e);
                    this.OnPropertyChanged("PreviousStart", e, _previousStartAttribute);
                }
            }
        }
        
        /// <summary>
        /// The serviceStart property
        /// </summary>
        [XmlElementNameAttribute("serviceStart")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime ServiceStart
        {
            get
            {
                return this._serviceStart;
            }
            set
            {
                if ((this._serviceStart != value))
                {
                    DateTime old = this._serviceStart;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnServiceStartChanging(e);
                    this.OnPropertyChanging("ServiceStart", e, _serviceStartAttribute);
                    this._serviceStart = value;
                    this.OnServiceStartChanged(e);
                    this.OnPropertyChanged("ServiceStart", e, _serviceStartAttribute);
                }
            }
        }
        
        /// <summary>
        /// The productCode property
        /// </summary>
        [XmlElementNameAttribute("productCode")]
        [XmlAttributeAttribute(true)]
        public virtual string ProductCode
        {
            get
            {
                return this._productCode;
            }
            set
            {
                if ((this._productCode != value))
                {
                    string old = this._productCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnProductCodeChanging(e);
                    this.OnPropertyChanging("ProductCode", e, _productCodeAttribute);
                    this._productCode = value;
                    this.OnProductCodeChanged(e);
                    this.OnPropertyChanged("ProductCode", e, _productCodeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The billRunType property
        /// </summary>
        [XmlElementNameAttribute("billRunType")]
        [XmlAttributeAttribute(true)]
        public virtual string BillRunType
        {
            get
            {
                return this._billRunType;
            }
            set
            {
                if ((this._billRunType != value))
                {
                    string old = this._billRunType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBillRunTypeChanging(e);
                    this.OnPropertyChanging("BillRunType", e, _billRunTypeAttribute);
                    this._billRunType = value;
                    this.OnBillRunTypeChanged(e);
                    this.OnPropertyChanged("BillRunType", e, _billRunTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The transactionType property
        /// </summary>
        [XmlElementNameAttribute("transactionType")]
        [XmlAttributeAttribute(true)]
        public virtual string TransactionType
        {
            get
            {
                return this._transactionType;
            }
            set
            {
                if ((this._transactionType != value))
                {
                    string old = this._transactionType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransactionTypeChanging(e);
                    this.OnPropertyChanging("TransactionType", e, _transactionTypeAttribute);
                    this._transactionType = value;
                    this.OnTransactionTypeChanged(e);
                    this.OnPropertyChanged("TransactionType", e, _transactionTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The tradeDate property
        /// </summary>
        [XmlElementNameAttribute("tradeDate")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime TradeDate
        {
            get
            {
                return this._tradeDate;
            }
            set
            {
                if ((this._tradeDate != value))
                {
                    DateTime old = this._tradeDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTradeDateChanging(e);
                    this.OnPropertyChanging("TradeDate", e, _tradeDateAttribute);
                    this._tradeDate = value;
                    this.OnTradeDateChanged(e);
                    this.OnPropertyChanged("TradeDate", e, _tradeDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The price property
        /// </summary>
        [XmlElementNameAttribute("price")]
        [XmlAttributeAttribute(true)]
        public virtual float Price
        {
            get
            {
                return this._price;
            }
            set
            {
                if ((this._price != value))
                {
                    float old = this._price;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPriceChanging(e);
                    this.OnPropertyChanging("Price", e, _priceAttribute);
                    this._price = value;
                    this.OnPriceChanged(e);
                    this.OnPropertyChanged("Price", e, _priceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The taxAmount property
        /// </summary>
        [XmlElementNameAttribute("taxAmount")]
        [XmlAttributeAttribute(true)]
        public virtual float TaxAmount
        {
            get
            {
                return this._taxAmount;
            }
            set
            {
                if ((this._taxAmount != value))
                {
                    float old = this._taxAmount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTaxAmountChanging(e);
                    this.OnPropertyChanging("TaxAmount", e, _taxAmountAttribute);
                    this._taxAmount = value;
                    this.OnTaxAmountChanged(e);
                    this.OnPropertyChanged("TaxAmount", e, _taxAmountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The soldTo property
        /// </summary>
        [XmlElementNameAttribute("soldTo")]
        [XmlAttributeAttribute(true)]
        public virtual string SoldTo
        {
            get
            {
                return this._soldTo;
            }
            set
            {
                if ((this._soldTo != value))
                {
                    string old = this._soldTo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSoldToChanging(e);
                    this.OnPropertyChanging("SoldTo", e, _soldToAttribute);
                    this._soldTo = value;
                    this.OnSoldToChanged(e);
                    this.OnPropertyChanged("SoldTo", e, _soldToAttribute);
                }
            }
        }
        
        /// <summary>
        /// The transactionDate property
        /// </summary>
        [XmlElementNameAttribute("transactionDate")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime TransactionDate
        {
            get
            {
                return this._transactionDate;
            }
            set
            {
                if ((this._transactionDate != value))
                {
                    DateTime old = this._transactionDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransactionDateChanging(e);
                    this.OnPropertyChanging("TransactionDate", e, _transactionDateAttribute);
                    this._transactionDate = value;
                    this.OnTransactionDateChanged(e);
                    this.OnPropertyChanged("TransactionDate", e, _transactionDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The paidTo property
        /// </summary>
        [XmlElementNameAttribute("paidTo")]
        [XmlAttributeAttribute(true)]
        public virtual string PaidTo
        {
            get
            {
                return this._paidTo;
            }
            set
            {
                if ((this._paidTo != value))
                {
                    string old = this._paidTo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPaidToChanging(e);
                    this.OnPropertyChanging("PaidTo", e, _paidToAttribute);
                    this._paidTo = value;
                    this.OnPaidToChanged(e);
                    this.OnPropertyChanged("PaidTo", e, _paidToAttribute);
                }
            }
        }
        
        /// <summary>
        /// The quantity property
        /// </summary>
        [XmlElementNameAttribute("quantity")]
        [XmlAttributeAttribute(true)]
        public virtual object Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    object old = this._quantity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQuantityChanging(e);
                    this.OnPropertyChanging("Quantity", e, _quantityAttribute);
                    this._quantity = value;
                    this.OnQuantityChanged(e);
                    this.OnPropertyChanged("Quantity", e, _quantityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The MarketStatementLineItem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PassThroughBill")]
        public virtual IMarketStatementLineItem MarketStatementLineItem
        {
            get
            {
                return this._marketStatementLineItem;
            }
            set
            {
                if ((this._marketStatementLineItem != value))
                {
                    IMarketStatementLineItem old = this._marketStatementLineItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMarketStatementLineItemChanging(e);
                    this.OnPropertyChanging("MarketStatementLineItem", e, _marketStatementLineItemReference);
                    this._marketStatementLineItem = value;
                    if ((old != null))
                    {
                        old.PassThroughBill = null;
                        old.Deleted -= this.OnResetMarketStatementLineItem;
                    }
                    if ((value != null))
                    {
                        value.PassThroughBill = this;
                        value.Deleted += this.OnResetMarketStatementLineItem;
                    }
                    this.OnMarketStatementLineItemChanged(e);
                    this.OnPropertyChanged("MarketStatementLineItem", e, _marketStatementLineItemReference);
                }
            }
        }
        
        /// <summary>
        /// The UserAttributes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PassThroughBills")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IUserAttribute> UserAttributes
        {
            get
            {
                return this._userAttributes;
            }
        }
        
        /// <summary>
        /// The ChargeProfiles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PassTroughBill")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IChargeProfile> ChargeProfiles
        {
            get
            {
                return this._chargeProfiles;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PassThroughBillReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "PassThroughBill")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the BillEnd property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillEndChanging;
        
        /// <summary>
        /// Gets fired when the BillEnd property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillEndChanged;
        
        /// <summary>
        /// Gets fired before the EffectiveDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EffectiveDateChanging;
        
        /// <summary>
        /// Gets fired when the EffectiveDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EffectiveDateChanged;
        
        /// <summary>
        /// Gets fired before the ServiceEnd property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceEndChanging;
        
        /// <summary>
        /// Gets fired when the ServiceEnd property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceEndChanged;
        
        /// <summary>
        /// Gets fired before the IsProfiled property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsProfiledChanging;
        
        /// <summary>
        /// Gets fired when the IsProfiled property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsProfiledChanged;
        
        /// <summary>
        /// Gets fired before the PreviousEnd property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreviousEndChanging;
        
        /// <summary>
        /// Gets fired when the PreviousEnd property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreviousEndChanged;
        
        /// <summary>
        /// Gets fired before the Amount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmountChanging;
        
        /// <summary>
        /// Gets fired when the Amount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmountChanged;
        
        /// <summary>
        /// Gets fired before the TimeZone property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeZoneChanging;
        
        /// <summary>
        /// Gets fired when the TimeZone property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeZoneChanged;
        
        /// <summary>
        /// Gets fired before the BilledTo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BilledToChanging;
        
        /// <summary>
        /// Gets fired when the BilledTo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BilledToChanged;
        
        /// <summary>
        /// Gets fired before the IsDisputed property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsDisputedChanging;
        
        /// <summary>
        /// Gets fired when the IsDisputed property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsDisputedChanged;
        
        /// <summary>
        /// Gets fired before the ProvidedBy property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProvidedByChanging;
        
        /// <summary>
        /// Gets fired when the ProvidedBy property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProvidedByChanged;
        
        /// <summary>
        /// Gets fired before the BillStart property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillStartChanging;
        
        /// <summary>
        /// Gets fired when the BillStart property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillStartChanged;
        
        /// <summary>
        /// Gets fired before the PreviousStart property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreviousStartChanging;
        
        /// <summary>
        /// Gets fired when the PreviousStart property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PreviousStartChanged;
        
        /// <summary>
        /// Gets fired before the ServiceStart property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceStartChanging;
        
        /// <summary>
        /// Gets fired when the ServiceStart property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceStartChanged;
        
        /// <summary>
        /// Gets fired before the ProductCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProductCodeChanging;
        
        /// <summary>
        /// Gets fired when the ProductCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProductCodeChanged;
        
        /// <summary>
        /// Gets fired before the BillRunType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillRunTypeChanging;
        
        /// <summary>
        /// Gets fired when the BillRunType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillRunTypeChanged;
        
        /// <summary>
        /// Gets fired before the TransactionType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransactionTypeChanging;
        
        /// <summary>
        /// Gets fired when the TransactionType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransactionTypeChanged;
        
        /// <summary>
        /// Gets fired before the TradeDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TradeDateChanging;
        
        /// <summary>
        /// Gets fired when the TradeDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TradeDateChanged;
        
        /// <summary>
        /// Gets fired before the Price property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PriceChanging;
        
        /// <summary>
        /// Gets fired when the Price property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PriceChanged;
        
        /// <summary>
        /// Gets fired before the TaxAmount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TaxAmountChanging;
        
        /// <summary>
        /// Gets fired when the TaxAmount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TaxAmountChanged;
        
        /// <summary>
        /// Gets fired before the SoldTo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SoldToChanging;
        
        /// <summary>
        /// Gets fired when the SoldTo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SoldToChanged;
        
        /// <summary>
        /// Gets fired before the TransactionDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransactionDateChanging;
        
        /// <summary>
        /// Gets fired when the TransactionDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransactionDateChanged;
        
        /// <summary>
        /// Gets fired before the PaidTo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PaidToChanging;
        
        /// <summary>
        /// Gets fired when the PaidTo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PaidToChanged;
        
        /// <summary>
        /// Gets fired before the Quantity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuantityChanging;
        
        /// <summary>
        /// Gets fired when the Quantity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuantityChanged;
        
        /// <summary>
        /// Gets fired before the MarketStatementLineItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MarketStatementLineItemChanging;
        
        /// <summary>
        /// Gets fired when the MarketStatementLineItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MarketStatementLineItemChanged;
        
        private static ITypedElement RetrieveBillEndAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("billEnd")));
        }
        
        /// <summary>
        /// Raises the BillEndChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillEndChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillEndChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BillEndChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillEndChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillEndChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEffectiveDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("effectiveDate")));
        }
        
        /// <summary>
        /// Raises the EffectiveDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEffectiveDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EffectiveDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EffectiveDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEffectiveDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EffectiveDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveServiceEndAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("serviceEnd")));
        }
        
        /// <summary>
        /// Raises the ServiceEndChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceEndChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceEndChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServiceEndChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceEndChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceEndChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIsProfiledAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("isProfiled")));
        }
        
        /// <summary>
        /// Raises the IsProfiledChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsProfiledChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsProfiledChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsProfiledChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsProfiledChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsProfiledChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePreviousEndAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("previousEnd")));
        }
        
        /// <summary>
        /// Raises the PreviousEndChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreviousEndChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreviousEndChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PreviousEndChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreviousEndChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreviousEndChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAmountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("amount")));
        }
        
        /// <summary>
        /// Raises the AmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTimeZoneAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("timeZone")));
        }
        
        /// <summary>
        /// Raises the TimeZoneChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeZoneChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeZoneChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeZoneChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeZoneChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeZoneChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBilledToAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("billedTo")));
        }
        
        /// <summary>
        /// Raises the BilledToChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBilledToChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BilledToChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BilledToChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBilledToChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BilledToChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIsDisputedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("isDisputed")));
        }
        
        /// <summary>
        /// Raises the IsDisputedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsDisputedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsDisputedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsDisputedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsDisputedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsDisputedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveProvidedByAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("providedBy")));
        }
        
        /// <summary>
        /// Raises the ProvidedByChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProvidedByChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProvidedByChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ProvidedByChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProvidedByChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProvidedByChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBillStartAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("billStart")));
        }
        
        /// <summary>
        /// Raises the BillStartChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillStartChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillStartChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BillStartChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillStartChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillStartChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePreviousStartAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("previousStart")));
        }
        
        /// <summary>
        /// Raises the PreviousStartChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreviousStartChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreviousStartChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PreviousStartChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPreviousStartChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PreviousStartChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveServiceStartAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("serviceStart")));
        }
        
        /// <summary>
        /// Raises the ServiceStartChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceStartChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceStartChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServiceStartChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceStartChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceStartChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveProductCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("productCode")));
        }
        
        /// <summary>
        /// Raises the ProductCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProductCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProductCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ProductCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProductCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProductCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBillRunTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("billRunType")));
        }
        
        /// <summary>
        /// Raises the BillRunTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillRunTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillRunTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BillRunTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillRunTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillRunTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransactionTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("transactionType")));
        }
        
        /// <summary>
        /// Raises the TransactionTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransactionTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransactionTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransactionTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransactionTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransactionTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTradeDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("tradeDate")));
        }
        
        /// <summary>
        /// Raises the TradeDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTradeDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TradeDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TradeDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTradeDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TradeDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePriceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("price")));
        }
        
        /// <summary>
        /// Raises the PriceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPriceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PriceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PriceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPriceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PriceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTaxAmountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("taxAmount")));
        }
        
        /// <summary>
        /// Raises the TaxAmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTaxAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TaxAmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TaxAmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTaxAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TaxAmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSoldToAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("soldTo")));
        }
        
        /// <summary>
        /// Raises the SoldToChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSoldToChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SoldToChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SoldToChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSoldToChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SoldToChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransactionDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("transactionDate")));
        }
        
        /// <summary>
        /// Raises the TransactionDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransactionDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransactionDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransactionDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransactionDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransactionDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePaidToAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("paidTo")));
        }
        
        /// <summary>
        /// Raises the PaidToChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPaidToChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PaidToChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PaidToChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPaidToChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PaidToChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveQuantityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("quantity")));
        }
        
        /// <summary>
        /// Raises the QuantityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuantityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuantityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QuantityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuantityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuantityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMarketStatementLineItemReference()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("MarketStatementLineItem")));
        }
        
        /// <summary>
        /// Raises the MarketStatementLineItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMarketStatementLineItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MarketStatementLineItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MarketStatementLineItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMarketStatementLineItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MarketStatementLineItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MarketStatementLineItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMarketStatementLineItem(object sender, System.EventArgs eventArgs)
        {
            this.MarketStatementLineItem = null;
        }
        
        private static ITypedElement RetrieveUserAttributesReference()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("UserAttributes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the UserAttributes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UserAttributesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("UserAttributes", e, _userAttributesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the UserAttributes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UserAttributesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("UserAttributes", e, _userAttributesReference);
        }
        
        private static ITypedElement RetrieveChargeProfilesReference()
        {
            return ((ITypedElement)(((ModelElement)(PassThroughBill.ClassInstance)).Resolve("ChargeProfiles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ChargeProfiles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChargeProfilesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ChargeProfiles", e, _chargeProfilesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ChargeProfiles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChargeProfilesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ChargeProfiles", e, _chargeProfilesReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "BILLEND"))
            {
                return this.BillEnd;
            }
            if ((attribute == "EFFECTIVEDATE"))
            {
                return this.EffectiveDate;
            }
            if ((attribute == "SERVICEEND"))
            {
                return this.ServiceEnd;
            }
            if ((attribute == "ISPROFILED"))
            {
                return this.IsProfiled;
            }
            if ((attribute == "PREVIOUSEND"))
            {
                return this.PreviousEnd;
            }
            if ((attribute == "AMOUNT"))
            {
                return this.Amount;
            }
            if ((attribute == "TIMEZONE"))
            {
                return this.TimeZone;
            }
            if ((attribute == "BILLEDTO"))
            {
                return this.BilledTo;
            }
            if ((attribute == "ISDISPUTED"))
            {
                return this.IsDisputed;
            }
            if ((attribute == "PROVIDEDBY"))
            {
                return this.ProvidedBy;
            }
            if ((attribute == "BILLSTART"))
            {
                return this.BillStart;
            }
            if ((attribute == "PREVIOUSSTART"))
            {
                return this.PreviousStart;
            }
            if ((attribute == "SERVICESTART"))
            {
                return this.ServiceStart;
            }
            if ((attribute == "PRODUCTCODE"))
            {
                return this.ProductCode;
            }
            if ((attribute == "BILLRUNTYPE"))
            {
                return this.BillRunType;
            }
            if ((attribute == "TRANSACTIONTYPE"))
            {
                return this.TransactionType;
            }
            if ((attribute == "TRADEDATE"))
            {
                return this.TradeDate;
            }
            if ((attribute == "PRICE"))
            {
                return this.Price;
            }
            if ((attribute == "TAXAMOUNT"))
            {
                return this.TaxAmount;
            }
            if ((attribute == "SOLDTO"))
            {
                return this.SoldTo;
            }
            if ((attribute == "TRANSACTIONDATE"))
            {
                return this.TransactionDate;
            }
            if ((attribute == "PAIDTO"))
            {
                return this.PaidTo;
            }
            if ((attribute == "QUANTITY"))
            {
                return this.Quantity;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "USERATTRIBUTES"))
            {
                return this._userAttributes;
            }
            if ((feature == "CHARGEPROFILES"))
            {
                return this._chargeProfiles;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MARKETSTATEMENTLINEITEM"))
            {
                this.MarketStatementLineItem = ((IMarketStatementLineItem)(value));
                return;
            }
            if ((feature == "BILLEND"))
            {
                this.BillEnd = ((DateTime)(value));
                return;
            }
            if ((feature == "EFFECTIVEDATE"))
            {
                this.EffectiveDate = ((DateTime)(value));
                return;
            }
            if ((feature == "SERVICEEND"))
            {
                this.ServiceEnd = ((DateTime)(value));
                return;
            }
            if ((feature == "ISPROFILED"))
            {
                this.IsProfiled = ((bool)(value));
                return;
            }
            if ((feature == "PREVIOUSEND"))
            {
                this.PreviousEnd = ((DateTime)(value));
                return;
            }
            if ((feature == "AMOUNT"))
            {
                this.Amount = ((float)(value));
                return;
            }
            if ((feature == "TIMEZONE"))
            {
                this.TimeZone = ((string)(value));
                return;
            }
            if ((feature == "BILLEDTO"))
            {
                this.BilledTo = ((string)(value));
                return;
            }
            if ((feature == "ISDISPUTED"))
            {
                this.IsDisputed = ((bool)(value));
                return;
            }
            if ((feature == "PROVIDEDBY"))
            {
                this.ProvidedBy = ((string)(value));
                return;
            }
            if ((feature == "BILLSTART"))
            {
                this.BillStart = ((DateTime)(value));
                return;
            }
            if ((feature == "PREVIOUSSTART"))
            {
                this.PreviousStart = ((DateTime)(value));
                return;
            }
            if ((feature == "SERVICESTART"))
            {
                this.ServiceStart = ((DateTime)(value));
                return;
            }
            if ((feature == "PRODUCTCODE"))
            {
                this.ProductCode = ((string)(value));
                return;
            }
            if ((feature == "BILLRUNTYPE"))
            {
                this.BillRunType = ((string)(value));
                return;
            }
            if ((feature == "TRANSACTIONTYPE"))
            {
                this.TransactionType = ((string)(value));
                return;
            }
            if ((feature == "TRADEDATE"))
            {
                this.TradeDate = ((DateTime)(value));
                return;
            }
            if ((feature == "PRICE"))
            {
                this.Price = ((float)(value));
                return;
            }
            if ((feature == "TAXAMOUNT"))
            {
                this.TaxAmount = ((float)(value));
                return;
            }
            if ((feature == "SOLDTO"))
            {
                this.SoldTo = ((string)(value));
                return;
            }
            if ((feature == "TRANSACTIONDATE"))
            {
                this.TransactionDate = ((DateTime)(value));
                return;
            }
            if ((feature == "PAIDTO"))
            {
                this.PaidTo = ((string)(value));
                return;
            }
            if ((feature == "QUANTITY"))
            {
                this.Quantity = ((object)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "MarketStatementLineItem"))
            {
                return new MarketStatementLineItemProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "MarketStatementLineItem"))
            {
                return new MarketStatementLineItemProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "PassThroughBill")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PassThroughBill class
        /// </summary>
        public class PassThroughBillReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PassThroughBill _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PassThroughBillReferencedElementsCollection(PassThroughBill parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.MarketStatementLineItem != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.UserAttributes.Count);
                    count = (count + this._parent.ChargeProfiles.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.MarketStatementLineItemChanged += this.PropagateValueChanges;
                this._parent.UserAttributes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ChargeProfiles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.MarketStatementLineItemChanged -= this.PropagateValueChanges;
                this._parent.UserAttributes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ChargeProfiles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.MarketStatementLineItem == null))
                {
                    IMarketStatementLineItem marketStatementLineItemCasted = item.As<IMarketStatementLineItem>();
                    if ((marketStatementLineItemCasted != null))
                    {
                        this._parent.MarketStatementLineItem = marketStatementLineItemCasted;
                        return;
                    }
                }
                IUserAttribute userAttributesCasted = item.As<IUserAttribute>();
                if ((userAttributesCasted != null))
                {
                    this._parent.UserAttributes.Add(userAttributesCasted);
                }
                IChargeProfile chargeProfilesCasted = item.As<IChargeProfile>();
                if ((chargeProfilesCasted != null))
                {
                    this._parent.ChargeProfiles.Add(chargeProfilesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.MarketStatementLineItem = null;
                this._parent.UserAttributes.Clear();
                this._parent.ChargeProfiles.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.MarketStatementLineItem))
                {
                    return true;
                }
                if (this._parent.UserAttributes.Contains(item))
                {
                    return true;
                }
                if (this._parent.ChargeProfiles.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.MarketStatementLineItem != null))
                {
                    array[arrayIndex] = this._parent.MarketStatementLineItem;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> userAttributesEnumerator = this._parent.UserAttributes.GetEnumerator();
                try
                {
                    for (
                    ; userAttributesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = userAttributesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    userAttributesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> chargeProfilesEnumerator = this._parent.ChargeProfiles.GetEnumerator();
                try
                {
                    for (
                    ; chargeProfilesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = chargeProfilesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    chargeProfilesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.MarketStatementLineItem == item))
                {
                    this._parent.MarketStatementLineItem = null;
                    return true;
                }
                IUserAttribute userAttributeItem = item.As<IUserAttribute>();
                if (((userAttributeItem != null) 
                            && this._parent.UserAttributes.Remove(userAttributeItem)))
                {
                    return true;
                }
                IChargeProfile chargeProfileItem = item.As<IChargeProfile>();
                if (((chargeProfileItem != null) 
                            && this._parent.ChargeProfiles.Remove(chargeProfileItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.MarketStatementLineItem).Concat(this._parent.UserAttributes).Concat(this._parent.ChargeProfiles).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the billEnd property
        /// </summary>
        private sealed class BillEndProxy : ModelPropertyChange<IPassThroughBill, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BillEndProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "billEnd")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.BillEnd;
                }
                set
                {
                    this.ModelElement.BillEnd = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the effectiveDate property
        /// </summary>
        private sealed class EffectiveDateProxy : ModelPropertyChange<IPassThroughBill, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EffectiveDateProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "effectiveDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.EffectiveDate;
                }
                set
                {
                    this.ModelElement.EffectiveDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the serviceEnd property
        /// </summary>
        private sealed class ServiceEndProxy : ModelPropertyChange<IPassThroughBill, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ServiceEndProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "serviceEnd")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.ServiceEnd;
                }
                set
                {
                    this.ModelElement.ServiceEnd = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isProfiled property
        /// </summary>
        private sealed class IsProfiledProxy : ModelPropertyChange<IPassThroughBill, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsProfiledProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "isProfiled")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsProfiled;
                }
                set
                {
                    this.ModelElement.IsProfiled = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the previousEnd property
        /// </summary>
        private sealed class PreviousEndProxy : ModelPropertyChange<IPassThroughBill, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PreviousEndProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "previousEnd")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.PreviousEnd;
                }
                set
                {
                    this.ModelElement.PreviousEnd = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the amount property
        /// </summary>
        private sealed class AmountProxy : ModelPropertyChange<IPassThroughBill, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AmountProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "amount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Amount;
                }
                set
                {
                    this.ModelElement.Amount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the timeZone property
        /// </summary>
        private sealed class TimeZoneProxy : ModelPropertyChange<IPassThroughBill, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeZoneProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "timeZone")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.TimeZone;
                }
                set
                {
                    this.ModelElement.TimeZone = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the billedTo property
        /// </summary>
        private sealed class BilledToProxy : ModelPropertyChange<IPassThroughBill, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BilledToProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "billedTo")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.BilledTo;
                }
                set
                {
                    this.ModelElement.BilledTo = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isDisputed property
        /// </summary>
        private sealed class IsDisputedProxy : ModelPropertyChange<IPassThroughBill, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsDisputedProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "isDisputed")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsDisputed;
                }
                set
                {
                    this.ModelElement.IsDisputed = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the providedBy property
        /// </summary>
        private sealed class ProvidedByProxy : ModelPropertyChange<IPassThroughBill, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProvidedByProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "providedBy")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ProvidedBy;
                }
                set
                {
                    this.ModelElement.ProvidedBy = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the billStart property
        /// </summary>
        private sealed class BillStartProxy : ModelPropertyChange<IPassThroughBill, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BillStartProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "billStart")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.BillStart;
                }
                set
                {
                    this.ModelElement.BillStart = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the previousStart property
        /// </summary>
        private sealed class PreviousStartProxy : ModelPropertyChange<IPassThroughBill, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PreviousStartProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "previousStart")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.PreviousStart;
                }
                set
                {
                    this.ModelElement.PreviousStart = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the serviceStart property
        /// </summary>
        private sealed class ServiceStartProxy : ModelPropertyChange<IPassThroughBill, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ServiceStartProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "serviceStart")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.ServiceStart;
                }
                set
                {
                    this.ModelElement.ServiceStart = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the productCode property
        /// </summary>
        private sealed class ProductCodeProxy : ModelPropertyChange<IPassThroughBill, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProductCodeProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "productCode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ProductCode;
                }
                set
                {
                    this.ModelElement.ProductCode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the billRunType property
        /// </summary>
        private sealed class BillRunTypeProxy : ModelPropertyChange<IPassThroughBill, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BillRunTypeProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "billRunType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.BillRunType;
                }
                set
                {
                    this.ModelElement.BillRunType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the transactionType property
        /// </summary>
        private sealed class TransactionTypeProxy : ModelPropertyChange<IPassThroughBill, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransactionTypeProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "transactionType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.TransactionType;
                }
                set
                {
                    this.ModelElement.TransactionType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the tradeDate property
        /// </summary>
        private sealed class TradeDateProxy : ModelPropertyChange<IPassThroughBill, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TradeDateProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "tradeDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.TradeDate;
                }
                set
                {
                    this.ModelElement.TradeDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the price property
        /// </summary>
        private sealed class PriceProxy : ModelPropertyChange<IPassThroughBill, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PriceProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "price")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Price;
                }
                set
                {
                    this.ModelElement.Price = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the taxAmount property
        /// </summary>
        private sealed class TaxAmountProxy : ModelPropertyChange<IPassThroughBill, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TaxAmountProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "taxAmount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TaxAmount;
                }
                set
                {
                    this.ModelElement.TaxAmount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the soldTo property
        /// </summary>
        private sealed class SoldToProxy : ModelPropertyChange<IPassThroughBill, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SoldToProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "soldTo")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.SoldTo;
                }
                set
                {
                    this.ModelElement.SoldTo = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the transactionDate property
        /// </summary>
        private sealed class TransactionDateProxy : ModelPropertyChange<IPassThroughBill, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransactionDateProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "transactionDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.TransactionDate;
                }
                set
                {
                    this.ModelElement.TransactionDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the paidTo property
        /// </summary>
        private sealed class PaidToProxy : ModelPropertyChange<IPassThroughBill, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PaidToProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "paidTo")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.PaidTo;
                }
                set
                {
                    this.ModelElement.PaidTo = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the quantity property
        /// </summary>
        private sealed class QuantityProxy : ModelPropertyChange<IPassThroughBill, object>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QuantityProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "quantity")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override object Value
            {
                get
                {
                    return this.ModelElement.Quantity;
                }
                set
                {
                    this.ModelElement.Quantity = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MarketStatementLineItem property
        /// </summary>
        private sealed class MarketStatementLineItemProxy : ModelPropertyChange<IPassThroughBill, IMarketStatementLineItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MarketStatementLineItemProxy(IPassThroughBill modelElement) : 
                    base(modelElement, "MarketStatementLineItem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMarketStatementLineItem Value
            {
                get
                {
                    return this.ModelElement.MarketStatementLineItem;
                }
                set
                {
                    this.ModelElement.MarketStatementLineItem = value;
                }
            }
        }
    }
}

