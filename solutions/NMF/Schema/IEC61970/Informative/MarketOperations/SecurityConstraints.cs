using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the SecurityConstraints class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "SecurityConstraints")]
    [DebuggerDisplayAttribute("SecurityConstraints {UUID}")]
    public partial class SecurityConstraints : IdentifiedObject, ISecurityConstraints, IModelElement
    {
        
        /// <summary>
        /// The backing field for the MinMW property
        /// </summary>
        private float _minMW;
        
        private static Lazy<ITypedElement> _minMWAttribute = new Lazy<ITypedElement>(RetrieveMinMWAttribute);
        
        /// <summary>
        /// The backing field for the MaxMW property
        /// </summary>
        private float _maxMW;
        
        private static Lazy<ITypedElement> _maxMWAttribute = new Lazy<ITypedElement>(RetrieveMaxMWAttribute);
        
        /// <summary>
        /// The backing field for the ActualMW property
        /// </summary>
        private float _actualMW;
        
        private static Lazy<ITypedElement> _actualMWAttribute = new Lazy<ITypedElement>(RetrieveActualMWAttribute);
        
        private static Lazy<ITypedElement> _rTOReference = new Lazy<ITypedElement>(RetrieveRTOReference);
        
        /// <summary>
        /// The backing field for the RTO property
        /// </summary>
        private IRTO _rTO;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The minMW property
        /// </summary>
        [XmlElementNameAttribute("minMW")]
        [XmlAttributeAttribute(true)]
        public virtual float MinMW
        {
            get
            {
                return this._minMW;
            }
            set
            {
                if ((this._minMW != value))
                {
                    float old = this._minMW;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinMWChanging(e);
                    this.OnPropertyChanging("MinMW", e, _minMWAttribute);
                    this._minMW = value;
                    this.OnMinMWChanged(e);
                    this.OnPropertyChanged("MinMW", e, _minMWAttribute);
                }
            }
        }
        
        /// <summary>
        /// The maxMW property
        /// </summary>
        [XmlElementNameAttribute("maxMW")]
        [XmlAttributeAttribute(true)]
        public virtual float MaxMW
        {
            get
            {
                return this._maxMW;
            }
            set
            {
                if ((this._maxMW != value))
                {
                    float old = this._maxMW;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxMWChanging(e);
                    this.OnPropertyChanging("MaxMW", e, _maxMWAttribute);
                    this._maxMW = value;
                    this.OnMaxMWChanged(e);
                    this.OnPropertyChanged("MaxMW", e, _maxMWAttribute);
                }
            }
        }
        
        /// <summary>
        /// The actualMW property
        /// </summary>
        [XmlElementNameAttribute("actualMW")]
        [XmlAttributeAttribute(true)]
        public virtual float ActualMW
        {
            get
            {
                return this._actualMW;
            }
            set
            {
                if ((this._actualMW != value))
                {
                    float old = this._actualMW;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActualMWChanging(e);
                    this.OnPropertyChanging("ActualMW", e, _actualMWAttribute);
                    this._actualMW = value;
                    this.OnActualMWChanged(e);
                    this.OnPropertyChanged("ActualMW", e, _actualMWAttribute);
                }
            }
        }
        
        /// <summary>
        /// The RTO property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SecurityConstraints")]
        public virtual IRTO RTO
        {
            get
            {
                return this._rTO;
            }
            set
            {
                if ((this._rTO != value))
                {
                    IRTO old = this._rTO;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRTOChanging(e);
                    this.OnPropertyChanging("RTO", e, _rTOReference);
                    this._rTO = value;
                    if ((old != null))
                    {
                        old.SecurityConstraints.Remove(this);
                        old.Deleted -= this.OnResetRTO;
                    }
                    if ((value != null))
                    {
                        value.SecurityConstraints.Add(this);
                        value.Deleted += this.OnResetRTO;
                    }
                    this.OnRTOChanged(e);
                    this.OnPropertyChanged("RTO", e, _rTOReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SecurityConstraintsReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "SecurityConstraints")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the MinMW property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinMWChanging;
        
        /// <summary>
        /// Gets fired when the MinMW property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinMWChanged;
        
        /// <summary>
        /// Gets fired before the MaxMW property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxMWChanging;
        
        /// <summary>
        /// Gets fired when the MaxMW property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxMWChanged;
        
        /// <summary>
        /// Gets fired before the ActualMW property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActualMWChanging;
        
        /// <summary>
        /// Gets fired when the ActualMW property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActualMWChanged;
        
        /// <summary>
        /// Gets fired before the RTO property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RTOChanging;
        
        /// <summary>
        /// Gets fired when the RTO property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RTOChanged;
        
        private static ITypedElement RetrieveMinMWAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SecurityConstraints.ClassInstance)).Resolve("minMW")));
        }
        
        /// <summary>
        /// Raises the MinMWChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinMWChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinMWChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinMWChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinMWChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinMWChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaxMWAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SecurityConstraints.ClassInstance)).Resolve("maxMW")));
        }
        
        /// <summary>
        /// Raises the MaxMWChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxMWChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxMWChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxMWChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxMWChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxMWChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActualMWAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SecurityConstraints.ClassInstance)).Resolve("actualMW")));
        }
        
        /// <summary>
        /// Raises the ActualMWChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActualMWChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActualMWChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActualMWChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActualMWChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActualMWChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRTOReference()
        {
            return ((ITypedElement)(((ModelElement)(SecurityConstraints.ClassInstance)).Resolve("RTO")));
        }
        
        /// <summary>
        /// Raises the RTOChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRTOChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RTOChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RTOChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRTOChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RTOChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RTO property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRTO(object sender, System.EventArgs eventArgs)
        {
            this.RTO = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MINMW"))
            {
                return this.MinMW;
            }
            if ((attribute == "MAXMW"))
            {
                return this.MaxMW;
            }
            if ((attribute == "ACTUALMW"))
            {
                return this.ActualMW;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RTO"))
            {
                this.RTO = ((IRTO)(value));
                return;
            }
            if ((feature == "MINMW"))
            {
                this.MinMW = ((float)(value));
                return;
            }
            if ((feature == "MAXMW"))
            {
                this.MaxMW = ((float)(value));
                return;
            }
            if ((feature == "ACTUALMW"))
            {
                this.ActualMW = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "RTO"))
            {
                return new RTOProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "RTO"))
            {
                return new RTOProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "SecurityConstraints")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SecurityConstraints class
        /// </summary>
        public class SecurityConstraintsReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SecurityConstraints _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SecurityConstraintsReferencedElementsCollection(SecurityConstraints parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.RTO != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.RTOChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.RTOChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.RTO == null))
                {
                    IRTO rTOCasted = item.As<IRTO>();
                    if ((rTOCasted != null))
                    {
                        this._parent.RTO = rTOCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.RTO = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.RTO))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.RTO != null))
                {
                    array[arrayIndex] = this._parent.RTO;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.RTO == item))
                {
                    this._parent.RTO = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.RTO).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minMW property
        /// </summary>
        private sealed class MinMWProxy : ModelPropertyChange<ISecurityConstraints, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinMWProxy(ISecurityConstraints modelElement) : 
                    base(modelElement, "minMW")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinMW;
                }
                set
                {
                    this.ModelElement.MinMW = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maxMW property
        /// </summary>
        private sealed class MaxMWProxy : ModelPropertyChange<ISecurityConstraints, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxMWProxy(ISecurityConstraints modelElement) : 
                    base(modelElement, "maxMW")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MaxMW;
                }
                set
                {
                    this.ModelElement.MaxMW = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the actualMW property
        /// </summary>
        private sealed class ActualMWProxy : ModelPropertyChange<ISecurityConstraints, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActualMWProxy(ISecurityConstraints modelElement) : 
                    base(modelElement, "actualMW")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ActualMW;
                }
                set
                {
                    this.ModelElement.ActualMW = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RTO property
        /// </summary>
        private sealed class RTOProxy : ModelPropertyChange<ISecurityConstraints, IRTO>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RTOProxy(ISecurityConstraints modelElement) : 
                    base(modelElement, "RTO")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRTO Value
            {
                get
                {
                    return this.ModelElement.RTO;
                }
                set
                {
                    this.ModelElement.RTO = value;
                }
            }
        }
    }
}

