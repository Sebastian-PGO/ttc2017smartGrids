//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The public interface for RegisteredGenerator
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(RegisteredGenerator))]
    [XmlDefaultImplementationTypeAttribute(typeof(RegisteredGenerator))]
    public interface IRegisteredGenerator : IModelElement, IRegisteredResource
    {
        
        /// <summary>
        /// The lowControlLImit property
        /// </summary>
        float LowControlLImit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The lowerControlRate property
        /// </summary>
        object LowerControlRate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The raiseRampRate property
        /// </summary>
        object RaiseRampRate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The raiseControlRate property
        /// </summary>
        object RaiseControlRate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The maximumAllowableSpinningReserve property
        /// </summary>
        float MaximumAllowableSpinningReserve
        {
            get;
            set;
        }
        
        /// <summary>
        /// The maximumOperatingMW property
        /// </summary>
        float MaximumOperatingMW
        {
            get;
            set;
        }
        
        /// <summary>
        /// The highControlLimit property
        /// </summary>
        float HighControlLimit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minimumOperatingMW property
        /// </summary>
        float MinimumOperatingMW
        {
            get;
            set;
        }
        
        /// <summary>
        /// The lowerRampRate property
        /// </summary>
        object LowerRampRate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The spinReserveRamp property
        /// </summary>
        object SpinReserveRamp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The RampRateCurves property
        /// </summary>
        IOrderedSetExpression<IRampRateCurve> RampRateCurves
        {
            get;
        }
        
        /// <summary>
        /// The UnitInitialConditions property
        /// </summary>
        IOrderedSetExpression<IUnitInitialConditions> UnitInitialConditions
        {
            get;
        }
        
        /// <summary>
        /// The StartUpCostCurves property
        /// </summary>
        IOrderedSetExpression<IStartUpCostCurve> StartUpCostCurves
        {
            get;
        }
        
        /// <summary>
        /// The GeneratingUnit property
        /// </summary>
        IGeneratingUnit GeneratingUnit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The GeneratingBids property
        /// </summary>
        IOrderedSetExpression<IGeneratingBid> GeneratingBids
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the LowControlLImit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowControlLImitChanging;
        
        /// <summary>
        /// Gets fired when the LowControlLImit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowControlLImitChanged;
        
        /// <summary>
        /// Gets fired before the LowerControlRate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowerControlRateChanging;
        
        /// <summary>
        /// Gets fired when the LowerControlRate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowerControlRateChanged;
        
        /// <summary>
        /// Gets fired before the RaiseRampRate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RaiseRampRateChanging;
        
        /// <summary>
        /// Gets fired when the RaiseRampRate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RaiseRampRateChanged;
        
        /// <summary>
        /// Gets fired before the RaiseControlRate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RaiseControlRateChanging;
        
        /// <summary>
        /// Gets fired when the RaiseControlRate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RaiseControlRateChanged;
        
        /// <summary>
        /// Gets fired before the MaximumAllowableSpinningReserve property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaximumAllowableSpinningReserveChanging;
        
        /// <summary>
        /// Gets fired when the MaximumAllowableSpinningReserve property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaximumAllowableSpinningReserveChanged;
        
        /// <summary>
        /// Gets fired before the MaximumOperatingMW property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaximumOperatingMWChanging;
        
        /// <summary>
        /// Gets fired when the MaximumOperatingMW property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaximumOperatingMWChanged;
        
        /// <summary>
        /// Gets fired before the HighControlLimit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HighControlLimitChanging;
        
        /// <summary>
        /// Gets fired when the HighControlLimit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HighControlLimitChanged;
        
        /// <summary>
        /// Gets fired before the MinimumOperatingMW property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinimumOperatingMWChanging;
        
        /// <summary>
        /// Gets fired when the MinimumOperatingMW property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinimumOperatingMWChanged;
        
        /// <summary>
        /// Gets fired before the LowerRampRate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowerRampRateChanging;
        
        /// <summary>
        /// Gets fired when the LowerRampRate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowerRampRateChanged;
        
        /// <summary>
        /// Gets fired before the SpinReserveRamp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpinReserveRampChanging;
        
        /// <summary>
        /// Gets fired when the SpinReserveRamp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpinReserveRampChanged;
        
        /// <summary>
        /// Gets fired before the GeneratingUnit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GeneratingUnitChanging;
        
        /// <summary>
        /// Gets fired when the GeneratingUnit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GeneratingUnitChanged;
    }
}

