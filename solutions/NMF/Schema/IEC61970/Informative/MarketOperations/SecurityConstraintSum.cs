//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the SecurityConstraintSum class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "SecurityConstraintSum")]
    [DebuggerDisplayAttribute("SecurityConstraintSum {UUID}")]
    public partial class SecurityConstraintSum : MarketFactors, ISecurityConstraintSum, IModelElement
    {
        
        private static Lazy<ITypedElement> _contingencyConstraintLimitsReference = new Lazy<ITypedElement>(RetrieveContingencyConstraintLimitsReference);
        
        /// <summary>
        /// The backing field for the ContingencyConstraintLimits property
        /// </summary>
        private SecurityConstraintSumContingencyConstraintLimitsCollection _contingencyConstraintLimits;
        
        private static Lazy<ITypedElement> _defaultConstraintLimitReference = new Lazy<ITypedElement>(RetrieveDefaultConstraintLimitReference);
        
        /// <summary>
        /// The backing field for the DefaultConstraintLimit property
        /// </summary>
        private IDefaultConstraintLimit _defaultConstraintLimit;
        
        private static Lazy<ITypedElement> _baseCaseConstraintLimitReference = new Lazy<ITypedElement>(RetrieveBaseCaseConstraintLimitReference);
        
        /// <summary>
        /// The backing field for the BaseCaseConstraintLimit property
        /// </summary>
        private IBaseCaseConstraintLimit _baseCaseConstraintLimit;
        
        private static Lazy<ITypedElement> _constraintTermsReference = new Lazy<ITypedElement>(RetrieveConstraintTermsReference);
        
        /// <summary>
        /// The backing field for the ConstraintTerms property
        /// </summary>
        private SecurityConstraintSumConstraintTermsCollection _constraintTerms;
        
        private static Lazy<ITypedElement> _rTOReference = new Lazy<ITypedElement>(RetrieveRTOReference);
        
        /// <summary>
        /// The backing field for the RTO property
        /// </summary>
        private IRTO _rTO;
        
        private static IClass _classInstance;
        
        public SecurityConstraintSum()
        {
            this._contingencyConstraintLimits = new SecurityConstraintSumContingencyConstraintLimitsCollection(this);
            this._contingencyConstraintLimits.CollectionChanging += this.ContingencyConstraintLimitsCollectionChanging;
            this._contingencyConstraintLimits.CollectionChanged += this.ContingencyConstraintLimitsCollectionChanged;
            this._constraintTerms = new SecurityConstraintSumConstraintTermsCollection(this);
            this._constraintTerms.CollectionChanging += this.ConstraintTermsCollectionChanging;
            this._constraintTerms.CollectionChanged += this.ConstraintTermsCollectionChanged;
        }
        
        /// <summary>
        /// The ContingencyConstraintLimits property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SecurityConstraintSum")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IContingencyConstraintLimit> ContingencyConstraintLimits
        {
            get
            {
                return this._contingencyConstraintLimits;
            }
        }
        
        /// <summary>
        /// The DefaultConstraintLimit property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SecurityConstraintSum")]
        public virtual IDefaultConstraintLimit DefaultConstraintLimit
        {
            get
            {
                return this._defaultConstraintLimit;
            }
            set
            {
                if ((this._defaultConstraintLimit != value))
                {
                    IDefaultConstraintLimit old = this._defaultConstraintLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDefaultConstraintLimitChanging(e);
                    this.OnPropertyChanging("DefaultConstraintLimit", e, _defaultConstraintLimitReference);
                    this._defaultConstraintLimit = value;
                    if ((old != null))
                    {
                        old.SecurityConstraintSum = null;
                        old.Deleted -= this.OnResetDefaultConstraintLimit;
                    }
                    if ((value != null))
                    {
                        value.SecurityConstraintSum = this;
                        value.Deleted += this.OnResetDefaultConstraintLimit;
                    }
                    this.OnDefaultConstraintLimitChanged(e);
                    this.OnPropertyChanged("DefaultConstraintLimit", e, _defaultConstraintLimitReference);
                }
            }
        }
        
        /// <summary>
        /// The BaseCaseConstraintLimit property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SecurityConstraintSum")]
        public virtual IBaseCaseConstraintLimit BaseCaseConstraintLimit
        {
            get
            {
                return this._baseCaseConstraintLimit;
            }
            set
            {
                if ((this._baseCaseConstraintLimit != value))
                {
                    IBaseCaseConstraintLimit old = this._baseCaseConstraintLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBaseCaseConstraintLimitChanging(e);
                    this.OnPropertyChanging("BaseCaseConstraintLimit", e, _baseCaseConstraintLimitReference);
                    this._baseCaseConstraintLimit = value;
                    if ((old != null))
                    {
                        old.SecurityConstraintSum = null;
                        old.Deleted -= this.OnResetBaseCaseConstraintLimit;
                    }
                    if ((value != null))
                    {
                        value.SecurityConstraintSum = this;
                        value.Deleted += this.OnResetBaseCaseConstraintLimit;
                    }
                    this.OnBaseCaseConstraintLimitChanged(e);
                    this.OnPropertyChanged("BaseCaseConstraintLimit", e, _baseCaseConstraintLimitReference);
                }
            }
        }
        
        /// <summary>
        /// The ConstraintTerms property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SecurityConstraintSum")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IConstraintTerm> ConstraintTerms
        {
            get
            {
                return this._constraintTerms;
            }
        }
        
        /// <summary>
        /// The RTO property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SecurityConstraintsLinear")]
        public virtual IRTO RTO
        {
            get
            {
                return this._rTO;
            }
            set
            {
                if ((this._rTO != value))
                {
                    IRTO old = this._rTO;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRTOChanging(e);
                    this.OnPropertyChanging("RTO", e, _rTOReference);
                    this._rTO = value;
                    if ((old != null))
                    {
                        old.SecurityConstraintsLinear.Remove(this);
                        old.Deleted -= this.OnResetRTO;
                    }
                    if ((value != null))
                    {
                        value.SecurityConstraintsLinear.Add(this);
                        value.Deleted += this.OnResetRTO;
                    }
                    this.OnRTOChanged(e);
                    this.OnPropertyChanged("RTO", e, _rTOReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SecurityConstraintSumReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "SecurityConstraintSum")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the DefaultConstraintLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DefaultConstraintLimitChanging;
        
        /// <summary>
        /// Gets fired when the DefaultConstraintLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DefaultConstraintLimitChanged;
        
        /// <summary>
        /// Gets fired before the BaseCaseConstraintLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BaseCaseConstraintLimitChanging;
        
        /// <summary>
        /// Gets fired when the BaseCaseConstraintLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BaseCaseConstraintLimitChanged;
        
        /// <summary>
        /// Gets fired before the RTO property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RTOChanging;
        
        /// <summary>
        /// Gets fired when the RTO property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RTOChanged;
        
        private static ITypedElement RetrieveContingencyConstraintLimitsReference()
        {
            return ((ITypedElement)(((ModelElement)(SecurityConstraintSum.ClassInstance)).Resolve("ContingencyConstraintLimits")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ContingencyConstraintLimits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ContingencyConstraintLimitsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ContingencyConstraintLimits", e, _contingencyConstraintLimitsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ContingencyConstraintLimits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ContingencyConstraintLimitsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ContingencyConstraintLimits", e, _contingencyConstraintLimitsReference);
        }
        
        private static ITypedElement RetrieveDefaultConstraintLimitReference()
        {
            return ((ITypedElement)(((ModelElement)(SecurityConstraintSum.ClassInstance)).Resolve("DefaultConstraintLimit")));
        }
        
        /// <summary>
        /// Raises the DefaultConstraintLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDefaultConstraintLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DefaultConstraintLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DefaultConstraintLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDefaultConstraintLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DefaultConstraintLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DefaultConstraintLimit property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDefaultConstraintLimit(object sender, System.EventArgs eventArgs)
        {
            this.DefaultConstraintLimit = null;
        }
        
        private static ITypedElement RetrieveBaseCaseConstraintLimitReference()
        {
            return ((ITypedElement)(((ModelElement)(SecurityConstraintSum.ClassInstance)).Resolve("BaseCaseConstraintLimit")));
        }
        
        /// <summary>
        /// Raises the BaseCaseConstraintLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBaseCaseConstraintLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BaseCaseConstraintLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BaseCaseConstraintLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBaseCaseConstraintLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BaseCaseConstraintLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BaseCaseConstraintLimit property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBaseCaseConstraintLimit(object sender, System.EventArgs eventArgs)
        {
            this.BaseCaseConstraintLimit = null;
        }
        
        private static ITypedElement RetrieveConstraintTermsReference()
        {
            return ((ITypedElement)(((ModelElement)(SecurityConstraintSum.ClassInstance)).Resolve("ConstraintTerms")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ConstraintTerms property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConstraintTermsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ConstraintTerms", e, _constraintTermsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ConstraintTerms property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConstraintTermsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ConstraintTerms", e, _constraintTermsReference);
        }
        
        private static ITypedElement RetrieveRTOReference()
        {
            return ((ITypedElement)(((ModelElement)(SecurityConstraintSum.ClassInstance)).Resolve("RTO")));
        }
        
        /// <summary>
        /// Raises the RTOChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRTOChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RTOChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RTOChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRTOChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RTOChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RTO property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRTO(object sender, System.EventArgs eventArgs)
        {
            this.RTO = null;
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CONTINGENCYCONSTRAINTLIMITS"))
            {
                return this._contingencyConstraintLimits;
            }
            if ((feature == "CONSTRAINTTERMS"))
            {
                return this._constraintTerms;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DEFAULTCONSTRAINTLIMIT"))
            {
                this.DefaultConstraintLimit = ((IDefaultConstraintLimit)(value));
                return;
            }
            if ((feature == "BASECASECONSTRAINTLIMIT"))
            {
                this.BaseCaseConstraintLimit = ((IBaseCaseConstraintLimit)(value));
                return;
            }
            if ((feature == "RTO"))
            {
                this.RTO = ((IRTO)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "DefaultConstraintLimit"))
            {
                return new DefaultConstraintLimitProxy(this);
            }
            if ((attribute == "BaseCaseConstraintLimit"))
            {
                return new BaseCaseConstraintLimitProxy(this);
            }
            if ((attribute == "RTO"))
            {
                return new RTOProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "DefaultConstraintLimit"))
            {
                return new DefaultConstraintLimitProxy(this);
            }
            if ((reference == "BaseCaseConstraintLimit"))
            {
                return new BaseCaseConstraintLimitProxy(this);
            }
            if ((reference == "RTO"))
            {
                return new RTOProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "SecurityConstraintSum")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SecurityConstraintSum class
        /// </summary>
        public class SecurityConstraintSumReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SecurityConstraintSum _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SecurityConstraintSumReferencedElementsCollection(SecurityConstraintSum parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ContingencyConstraintLimits.Count);
                    if ((this._parent.DefaultConstraintLimit != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BaseCaseConstraintLimit != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ConstraintTerms.Count);
                    if ((this._parent.RTO != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ContingencyConstraintLimits.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DefaultConstraintLimitChanged += this.PropagateValueChanges;
                this._parent.BaseCaseConstraintLimitChanged += this.PropagateValueChanges;
                this._parent.ConstraintTerms.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RTOChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ContingencyConstraintLimits.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DefaultConstraintLimitChanged -= this.PropagateValueChanges;
                this._parent.BaseCaseConstraintLimitChanged -= this.PropagateValueChanges;
                this._parent.ConstraintTerms.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RTOChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IContingencyConstraintLimit contingencyConstraintLimitsCasted = item.As<IContingencyConstraintLimit>();
                if ((contingencyConstraintLimitsCasted != null))
                {
                    this._parent.ContingencyConstraintLimits.Add(contingencyConstraintLimitsCasted);
                }
                if ((this._parent.DefaultConstraintLimit == null))
                {
                    IDefaultConstraintLimit defaultConstraintLimitCasted = item.As<IDefaultConstraintLimit>();
                    if ((defaultConstraintLimitCasted != null))
                    {
                        this._parent.DefaultConstraintLimit = defaultConstraintLimitCasted;
                        return;
                    }
                }
                if ((this._parent.BaseCaseConstraintLimit == null))
                {
                    IBaseCaseConstraintLimit baseCaseConstraintLimitCasted = item.As<IBaseCaseConstraintLimit>();
                    if ((baseCaseConstraintLimitCasted != null))
                    {
                        this._parent.BaseCaseConstraintLimit = baseCaseConstraintLimitCasted;
                        return;
                    }
                }
                IConstraintTerm constraintTermsCasted = item.As<IConstraintTerm>();
                if ((constraintTermsCasted != null))
                {
                    this._parent.ConstraintTerms.Add(constraintTermsCasted);
                }
                if ((this._parent.RTO == null))
                {
                    IRTO rTOCasted = item.As<IRTO>();
                    if ((rTOCasted != null))
                    {
                        this._parent.RTO = rTOCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ContingencyConstraintLimits.Clear();
                this._parent.DefaultConstraintLimit = null;
                this._parent.BaseCaseConstraintLimit = null;
                this._parent.ConstraintTerms.Clear();
                this._parent.RTO = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ContingencyConstraintLimits.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.DefaultConstraintLimit))
                {
                    return true;
                }
                if ((item == this._parent.BaseCaseConstraintLimit))
                {
                    return true;
                }
                if (this._parent.ConstraintTerms.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.RTO))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> contingencyConstraintLimitsEnumerator = this._parent.ContingencyConstraintLimits.GetEnumerator();
                try
                {
                    for (
                    ; contingencyConstraintLimitsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = contingencyConstraintLimitsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    contingencyConstraintLimitsEnumerator.Dispose();
                }
                if ((this._parent.DefaultConstraintLimit != null))
                {
                    array[arrayIndex] = this._parent.DefaultConstraintLimit;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BaseCaseConstraintLimit != null))
                {
                    array[arrayIndex] = this._parent.BaseCaseConstraintLimit;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> constraintTermsEnumerator = this._parent.ConstraintTerms.GetEnumerator();
                try
                {
                    for (
                    ; constraintTermsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = constraintTermsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    constraintTermsEnumerator.Dispose();
                }
                if ((this._parent.RTO != null))
                {
                    array[arrayIndex] = this._parent.RTO;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IContingencyConstraintLimit contingencyConstraintLimitItem = item.As<IContingencyConstraintLimit>();
                if (((contingencyConstraintLimitItem != null) 
                            && this._parent.ContingencyConstraintLimits.Remove(contingencyConstraintLimitItem)))
                {
                    return true;
                }
                if ((this._parent.DefaultConstraintLimit == item))
                {
                    this._parent.DefaultConstraintLimit = null;
                    return true;
                }
                if ((this._parent.BaseCaseConstraintLimit == item))
                {
                    this._parent.BaseCaseConstraintLimit = null;
                    return true;
                }
                IConstraintTerm constraintTermItem = item.As<IConstraintTerm>();
                if (((constraintTermItem != null) 
                            && this._parent.ConstraintTerms.Remove(constraintTermItem)))
                {
                    return true;
                }
                if ((this._parent.RTO == item))
                {
                    this._parent.RTO = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ContingencyConstraintLimits).Concat(this._parent.DefaultConstraintLimit).Concat(this._parent.BaseCaseConstraintLimit).Concat(this._parent.ConstraintTerms).Concat(this._parent.RTO).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DefaultConstraintLimit property
        /// </summary>
        private sealed class DefaultConstraintLimitProxy : ModelPropertyChange<ISecurityConstraintSum, IDefaultConstraintLimit>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DefaultConstraintLimitProxy(ISecurityConstraintSum modelElement) : 
                    base(modelElement, "DefaultConstraintLimit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDefaultConstraintLimit Value
            {
                get
                {
                    return this.ModelElement.DefaultConstraintLimit;
                }
                set
                {
                    this.ModelElement.DefaultConstraintLimit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BaseCaseConstraintLimit property
        /// </summary>
        private sealed class BaseCaseConstraintLimitProxy : ModelPropertyChange<ISecurityConstraintSum, IBaseCaseConstraintLimit>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BaseCaseConstraintLimitProxy(ISecurityConstraintSum modelElement) : 
                    base(modelElement, "BaseCaseConstraintLimit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBaseCaseConstraintLimit Value
            {
                get
                {
                    return this.ModelElement.BaseCaseConstraintLimit;
                }
                set
                {
                    this.ModelElement.BaseCaseConstraintLimit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RTO property
        /// </summary>
        private sealed class RTOProxy : ModelPropertyChange<ISecurityConstraintSum, IRTO>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RTOProxy(ISecurityConstraintSum modelElement) : 
                    base(modelElement, "RTO")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRTO Value
            {
                get
                {
                    return this.ModelElement.RTO;
                }
                set
                {
                    this.ModelElement.RTO = value;
                }
            }
        }
    }
}

