using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the RegisteredResource class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "RegisteredResource")]
    [DebuggerDisplayAttribute("RegisteredResource {UUID}")]
    public partial class RegisteredResource : IdentifiedObject, IRegisteredResource, IModelElement
    {
        
        /// <summary>
        /// The backing field for the RtoID property
        /// </summary>
        private string _rtoID;
        
        private static Lazy<ITypedElement> _rtoIDAttribute = new Lazy<ITypedElement>(RetrieveRtoIDAttribute);
        
        private static Lazy<ITypedElement> _marketsReference = new Lazy<ITypedElement>(RetrieveMarketsReference);
        
        /// <summary>
        /// The backing field for the Markets property
        /// </summary>
        private RegisteredResourceMarketsCollection _markets;
        
        private static Lazy<ITypedElement> _marketProductsReference = new Lazy<ITypedElement>(RetrieveMarketProductsReference);
        
        /// <summary>
        /// The backing field for the MarketProducts property
        /// </summary>
        private RegisteredResourceMarketProductsCollection _marketProducts;
        
        private static Lazy<ITypedElement> _metersReference = new Lazy<ITypedElement>(RetrieveMetersReference);
        
        /// <summary>
        /// The backing field for the Meters property
        /// </summary>
        private RegisteredResourceMetersCollection _meters;
        
        private static Lazy<ITypedElement> _pnodeReference = new Lazy<ITypedElement>(RetrievePnodeReference);
        
        /// <summary>
        /// The backing field for the Pnode property
        /// </summary>
        private IPnode _pnode;
        
        private static Lazy<ITypedElement> _organisationReference = new Lazy<ITypedElement>(RetrieveOrganisationReference);
        
        /// <summary>
        /// The backing field for the Organisation property
        /// </summary>
        private IErpOrganisation _organisation;
        
        private static Lazy<ITypedElement> _resourceGroupsReference = new Lazy<ITypedElement>(RetrieveResourceGroupsReference);
        
        /// <summary>
        /// The backing field for the ResourceGroups property
        /// </summary>
        private RegisteredResourceResourceGroupsCollection _resourceGroups;
        
        private static IClass _classInstance;
        
        public RegisteredResource()
        {
            this._markets = new RegisteredResourceMarketsCollection(this);
            this._markets.CollectionChanging += this.MarketsCollectionChanging;
            this._markets.CollectionChanged += this.MarketsCollectionChanged;
            this._marketProducts = new RegisteredResourceMarketProductsCollection(this);
            this._marketProducts.CollectionChanging += this.MarketProductsCollectionChanging;
            this._marketProducts.CollectionChanged += this.MarketProductsCollectionChanged;
            this._meters = new RegisteredResourceMetersCollection(this);
            this._meters.CollectionChanging += this.MetersCollectionChanging;
            this._meters.CollectionChanged += this.MetersCollectionChanged;
            this._resourceGroups = new RegisteredResourceResourceGroupsCollection(this);
            this._resourceGroups.CollectionChanging += this.ResourceGroupsCollectionChanging;
            this._resourceGroups.CollectionChanged += this.ResourceGroupsCollectionChanged;
        }
        
        /// <summary>
        /// The rtoID property
        /// </summary>
        [XmlElementNameAttribute("rtoID")]
        [XmlAttributeAttribute(true)]
        public virtual string RtoID
        {
            get
            {
                return this._rtoID;
            }
            set
            {
                if ((this._rtoID != value))
                {
                    string old = this._rtoID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRtoIDChanging(e);
                    this.OnPropertyChanging("RtoID", e, _rtoIDAttribute);
                    this._rtoID = value;
                    this.OnRtoIDChanged(e);
                    this.OnPropertyChanged("RtoID", e, _rtoIDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Markets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("RegisteredResources")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMarket> Markets
        {
            get
            {
                return this._markets;
            }
        }
        
        /// <summary>
        /// The MarketProducts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("RegisteredResources")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMarketProduct> MarketProducts
        {
            get
            {
                return this._marketProducts;
            }
        }
        
        /// <summary>
        /// The Meters property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("RegisteredResource")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMeter> Meters
        {
            get
            {
                return this._meters;
            }
        }
        
        /// <summary>
        /// The Pnode property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("RegisteredResources")]
        public virtual IPnode Pnode
        {
            get
            {
                return this._pnode;
            }
            set
            {
                if ((this._pnode != value))
                {
                    IPnode old = this._pnode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPnodeChanging(e);
                    this.OnPropertyChanging("Pnode", e, _pnodeReference);
                    this._pnode = value;
                    if ((old != null))
                    {
                        old.RegisteredResources.Remove(this);
                        old.Deleted -= this.OnResetPnode;
                    }
                    if ((value != null))
                    {
                        value.RegisteredResources.Add(this);
                        value.Deleted += this.OnResetPnode;
                    }
                    this.OnPnodeChanged(e);
                    this.OnPropertyChanged("Pnode", e, _pnodeReference);
                }
            }
        }
        
        /// <summary>
        /// The Organisation property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("RegisteredResources")]
        public virtual IErpOrganisation Organisation
        {
            get
            {
                return this._organisation;
            }
            set
            {
                if ((this._organisation != value))
                {
                    IErpOrganisation old = this._organisation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOrganisationChanging(e);
                    this.OnPropertyChanging("Organisation", e, _organisationReference);
                    this._organisation = value;
                    if ((old != null))
                    {
                        old.RegisteredResources.Remove(this);
                        old.Deleted -= this.OnResetOrganisation;
                    }
                    if ((value != null))
                    {
                        value.RegisteredResources.Add(this);
                        value.Deleted += this.OnResetOrganisation;
                    }
                    this.OnOrganisationChanged(e);
                    this.OnPropertyChanged("Organisation", e, _organisationReference);
                }
            }
        }
        
        /// <summary>
        /// The ResourceGroups property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("RegisteredResources")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IResourceGroup> ResourceGroups
        {
            get
            {
                return this._resourceGroups;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RegisteredResourceReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "RegisteredResource")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the RtoID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RtoIDChanging;
        
        /// <summary>
        /// Gets fired when the RtoID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RtoIDChanged;
        
        /// <summary>
        /// Gets fired before the Pnode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PnodeChanging;
        
        /// <summary>
        /// Gets fired when the Pnode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PnodeChanged;
        
        /// <summary>
        /// Gets fired before the Organisation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OrganisationChanging;
        
        /// <summary>
        /// Gets fired when the Organisation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OrganisationChanged;
        
        private static ITypedElement RetrieveRtoIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RegisteredResource.ClassInstance)).Resolve("rtoID")));
        }
        
        /// <summary>
        /// Raises the RtoIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRtoIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RtoIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RtoIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRtoIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RtoIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMarketsReference()
        {
            return ((ITypedElement)(((ModelElement)(RegisteredResource.ClassInstance)).Resolve("Markets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Markets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MarketsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Markets", e, _marketsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Markets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MarketsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Markets", e, _marketsReference);
        }
        
        private static ITypedElement RetrieveMarketProductsReference()
        {
            return ((ITypedElement)(((ModelElement)(RegisteredResource.ClassInstance)).Resolve("MarketProducts")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MarketProducts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MarketProductsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("MarketProducts", e, _marketProductsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MarketProducts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MarketProductsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MarketProducts", e, _marketProductsReference);
        }
        
        private static ITypedElement RetrieveMetersReference()
        {
            return ((ITypedElement)(((ModelElement)(RegisteredResource.ClassInstance)).Resolve("Meters")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Meters property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MetersCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Meters", e, _metersReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Meters property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MetersCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Meters", e, _metersReference);
        }
        
        private static ITypedElement RetrievePnodeReference()
        {
            return ((ITypedElement)(((ModelElement)(RegisteredResource.ClassInstance)).Resolve("Pnode")));
        }
        
        /// <summary>
        /// Raises the PnodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPnodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PnodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PnodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPnodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PnodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Pnode property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPnode(object sender, System.EventArgs eventArgs)
        {
            this.Pnode = null;
        }
        
        private static ITypedElement RetrieveOrganisationReference()
        {
            return ((ITypedElement)(((ModelElement)(RegisteredResource.ClassInstance)).Resolve("Organisation")));
        }
        
        /// <summary>
        /// Raises the OrganisationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOrganisationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OrganisationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OrganisationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOrganisationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OrganisationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Organisation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOrganisation(object sender, System.EventArgs eventArgs)
        {
            this.Organisation = null;
        }
        
        private static ITypedElement RetrieveResourceGroupsReference()
        {
            return ((ITypedElement)(((ModelElement)(RegisteredResource.ClassInstance)).Resolve("ResourceGroups")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ResourceGroups property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ResourceGroupsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ResourceGroups", e, _resourceGroupsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ResourceGroups property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ResourceGroupsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ResourceGroups", e, _resourceGroupsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "RTOID"))
            {
                return this.RtoID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "MARKETS"))
            {
                return this._markets;
            }
            if ((feature == "MARKETPRODUCTS"))
            {
                return this._marketProducts;
            }
            if ((feature == "METERS"))
            {
                return this._meters;
            }
            if ((feature == "RESOURCEGROUPS"))
            {
                return this._resourceGroups;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PNODE"))
            {
                this.Pnode = ((IPnode)(value));
                return;
            }
            if ((feature == "ORGANISATION"))
            {
                this.Organisation = ((IErpOrganisation)(value));
                return;
            }
            if ((feature == "RTOID"))
            {
                this.RtoID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Pnode"))
            {
                return new PnodeProxy(this);
            }
            if ((attribute == "Organisation"))
            {
                return new OrganisationProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Pnode"))
            {
                return new PnodeProxy(this);
            }
            if ((reference == "Organisation"))
            {
                return new OrganisationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "RegisteredResource")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RegisteredResource class
        /// </summary>
        public class RegisteredResourceReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RegisteredResource _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RegisteredResourceReferencedElementsCollection(RegisteredResource parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Markets.Count);
                    count = (count + this._parent.MarketProducts.Count);
                    count = (count + this._parent.Meters.Count);
                    if ((this._parent.Pnode != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Organisation != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ResourceGroups.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Markets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MarketProducts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Meters.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PnodeChanged += this.PropagateValueChanges;
                this._parent.OrganisationChanged += this.PropagateValueChanges;
                this._parent.ResourceGroups.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Markets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MarketProducts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Meters.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PnodeChanged -= this.PropagateValueChanges;
                this._parent.OrganisationChanged -= this.PropagateValueChanges;
                this._parent.ResourceGroups.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IMarket marketsCasted = item.As<IMarket>();
                if ((marketsCasted != null))
                {
                    this._parent.Markets.Add(marketsCasted);
                }
                IMarketProduct marketProductsCasted = item.As<IMarketProduct>();
                if ((marketProductsCasted != null))
                {
                    this._parent.MarketProducts.Add(marketProductsCasted);
                }
                IMeter metersCasted = item.As<IMeter>();
                if ((metersCasted != null))
                {
                    this._parent.Meters.Add(metersCasted);
                }
                if ((this._parent.Pnode == null))
                {
                    IPnode pnodeCasted = item.As<IPnode>();
                    if ((pnodeCasted != null))
                    {
                        this._parent.Pnode = pnodeCasted;
                        return;
                    }
                }
                if ((this._parent.Organisation == null))
                {
                    IErpOrganisation organisationCasted = item.As<IErpOrganisation>();
                    if ((organisationCasted != null))
                    {
                        this._parent.Organisation = organisationCasted;
                        return;
                    }
                }
                IResourceGroup resourceGroupsCasted = item.As<IResourceGroup>();
                if ((resourceGroupsCasted != null))
                {
                    this._parent.ResourceGroups.Add(resourceGroupsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Markets.Clear();
                this._parent.MarketProducts.Clear();
                this._parent.Meters.Clear();
                this._parent.Pnode = null;
                this._parent.Organisation = null;
                this._parent.ResourceGroups.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Markets.Contains(item))
                {
                    return true;
                }
                if (this._parent.MarketProducts.Contains(item))
                {
                    return true;
                }
                if (this._parent.Meters.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Pnode))
                {
                    return true;
                }
                if ((item == this._parent.Organisation))
                {
                    return true;
                }
                if (this._parent.ResourceGroups.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> marketsEnumerator = this._parent.Markets.GetEnumerator();
                try
                {
                    for (
                    ; marketsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = marketsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    marketsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> marketProductsEnumerator = this._parent.MarketProducts.GetEnumerator();
                try
                {
                    for (
                    ; marketProductsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = marketProductsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    marketProductsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> metersEnumerator = this._parent.Meters.GetEnumerator();
                try
                {
                    for (
                    ; metersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = metersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    metersEnumerator.Dispose();
                }
                if ((this._parent.Pnode != null))
                {
                    array[arrayIndex] = this._parent.Pnode;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Organisation != null))
                {
                    array[arrayIndex] = this._parent.Organisation;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> resourceGroupsEnumerator = this._parent.ResourceGroups.GetEnumerator();
                try
                {
                    for (
                    ; resourceGroupsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = resourceGroupsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    resourceGroupsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IMarket marketItem = item.As<IMarket>();
                if (((marketItem != null) 
                            && this._parent.Markets.Remove(marketItem)))
                {
                    return true;
                }
                IMarketProduct marketProductItem = item.As<IMarketProduct>();
                if (((marketProductItem != null) 
                            && this._parent.MarketProducts.Remove(marketProductItem)))
                {
                    return true;
                }
                IMeter meterItem = item.As<IMeter>();
                if (((meterItem != null) 
                            && this._parent.Meters.Remove(meterItem)))
                {
                    return true;
                }
                if ((this._parent.Pnode == item))
                {
                    this._parent.Pnode = null;
                    return true;
                }
                if ((this._parent.Organisation == item))
                {
                    this._parent.Organisation = null;
                    return true;
                }
                IResourceGroup resourceGroupItem = item.As<IResourceGroup>();
                if (((resourceGroupItem != null) 
                            && this._parent.ResourceGroups.Remove(resourceGroupItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Markets).Concat(this._parent.MarketProducts).Concat(this._parent.Meters).Concat(this._parent.Pnode).Concat(this._parent.Organisation).Concat(this._parent.ResourceGroups).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rtoID property
        /// </summary>
        private sealed class RtoIDProxy : ModelPropertyChange<IRegisteredResource, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RtoIDProxy(IRegisteredResource modelElement) : 
                    base(modelElement, "rtoID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.RtoID;
                }
                set
                {
                    this.ModelElement.RtoID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Pnode property
        /// </summary>
        private sealed class PnodeProxy : ModelPropertyChange<IRegisteredResource, IPnode>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PnodeProxy(IRegisteredResource modelElement) : 
                    base(modelElement, "Pnode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPnode Value
            {
                get
                {
                    return this.ModelElement.Pnode;
                }
                set
                {
                    this.ModelElement.Pnode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Organisation property
        /// </summary>
        private sealed class OrganisationProxy : ModelPropertyChange<IRegisteredResource, IErpOrganisation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OrganisationProxy(IRegisteredResource modelElement) : 
                    base(modelElement, "Organisation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpOrganisation Value
            {
                get
                {
                    return this.ModelElement.Organisation;
                }
                set
                {
                    this.ModelElement.Organisation = value;
                }
            }
        }
    }
}

