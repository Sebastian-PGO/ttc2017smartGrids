using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the BilateralTransaction class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "BilateralTransaction")]
    [DebuggerDisplayAttribute("BilateralTransaction {UUID}")]
    public partial class BilateralTransaction : Element, IBilateralTransaction, IModelElement
    {
        
        /// <summary>
        /// The backing field for the PurchaseTimeMax property
        /// </summary>
        private int _purchaseTimeMax;
        
        private static Lazy<ITypedElement> _purchaseTimeMaxAttribute = new Lazy<ITypedElement>(RetrievePurchaseTimeMaxAttribute);
        
        /// <summary>
        /// The backing field for the PurchaseTimeMin property
        /// </summary>
        private int _purchaseTimeMin;
        
        private static Lazy<ITypedElement> _purchaseTimeMinAttribute = new Lazy<ITypedElement>(RetrievePurchaseTimeMinAttribute);
        
        /// <summary>
        /// The backing field for the CurtailTimeMax property
        /// </summary>
        private int _curtailTimeMax;
        
        private static Lazy<ITypedElement> _curtailTimeMaxAttribute = new Lazy<ITypedElement>(RetrieveCurtailTimeMaxAttribute);
        
        /// <summary>
        /// The backing field for the CurtailTimeMin property
        /// </summary>
        private int _curtailTimeMin;
        
        private static Lazy<ITypedElement> _curtailTimeMinAttribute = new Lazy<ITypedElement>(RetrieveCurtailTimeMinAttribute);
        
        /// <summary>
        /// The backing field for the TotalTranChargeMax property
        /// </summary>
        private float _totalTranChargeMax;
        
        private static Lazy<ITypedElement> _totalTranChargeMaxAttribute = new Lazy<ITypedElement>(RetrieveTotalTranChargeMaxAttribute);
        
        /// <summary>
        /// The backing field for the TransactionType property
        /// </summary>
        private string _transactionType;
        
        private static Lazy<ITypedElement> _transactionTypeAttribute = new Lazy<ITypedElement>(RetrieveTransactionTypeAttribute);
        
        /// <summary>
        /// The backing field for the MarketType property
        /// </summary>
        private string _marketType;
        
        private static Lazy<ITypedElement> _marketTypeAttribute = new Lazy<ITypedElement>(RetrieveMarketTypeAttribute);
        
        /// <summary>
        /// The backing field for the Scope property
        /// </summary>
        private string _scope;
        
        private static Lazy<ITypedElement> _scopeAttribute = new Lazy<ITypedElement>(RetrieveScopeAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The purchaseTimeMax property
        /// </summary>
        [XmlElementNameAttribute("purchaseTimeMax")]
        [XmlAttributeAttribute(true)]
        public virtual int PurchaseTimeMax
        {
            get
            {
                return this._purchaseTimeMax;
            }
            set
            {
                if ((this._purchaseTimeMax != value))
                {
                    int old = this._purchaseTimeMax;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPurchaseTimeMaxChanging(e);
                    this.OnPropertyChanging("PurchaseTimeMax", e, _purchaseTimeMaxAttribute);
                    this._purchaseTimeMax = value;
                    this.OnPurchaseTimeMaxChanged(e);
                    this.OnPropertyChanged("PurchaseTimeMax", e, _purchaseTimeMaxAttribute);
                }
            }
        }
        
        /// <summary>
        /// The purchaseTimeMin property
        /// </summary>
        [XmlElementNameAttribute("purchaseTimeMin")]
        [XmlAttributeAttribute(true)]
        public virtual int PurchaseTimeMin
        {
            get
            {
                return this._purchaseTimeMin;
            }
            set
            {
                if ((this._purchaseTimeMin != value))
                {
                    int old = this._purchaseTimeMin;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPurchaseTimeMinChanging(e);
                    this.OnPropertyChanging("PurchaseTimeMin", e, _purchaseTimeMinAttribute);
                    this._purchaseTimeMin = value;
                    this.OnPurchaseTimeMinChanged(e);
                    this.OnPropertyChanged("PurchaseTimeMin", e, _purchaseTimeMinAttribute);
                }
            }
        }
        
        /// <summary>
        /// The curtailTimeMax property
        /// </summary>
        [XmlElementNameAttribute("curtailTimeMax")]
        [XmlAttributeAttribute(true)]
        public virtual int CurtailTimeMax
        {
            get
            {
                return this._curtailTimeMax;
            }
            set
            {
                if ((this._curtailTimeMax != value))
                {
                    int old = this._curtailTimeMax;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurtailTimeMaxChanging(e);
                    this.OnPropertyChanging("CurtailTimeMax", e, _curtailTimeMaxAttribute);
                    this._curtailTimeMax = value;
                    this.OnCurtailTimeMaxChanged(e);
                    this.OnPropertyChanged("CurtailTimeMax", e, _curtailTimeMaxAttribute);
                }
            }
        }
        
        /// <summary>
        /// The curtailTimeMin property
        /// </summary>
        [XmlElementNameAttribute("curtailTimeMin")]
        [XmlAttributeAttribute(true)]
        public virtual int CurtailTimeMin
        {
            get
            {
                return this._curtailTimeMin;
            }
            set
            {
                if ((this._curtailTimeMin != value))
                {
                    int old = this._curtailTimeMin;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurtailTimeMinChanging(e);
                    this.OnPropertyChanging("CurtailTimeMin", e, _curtailTimeMinAttribute);
                    this._curtailTimeMin = value;
                    this.OnCurtailTimeMinChanged(e);
                    this.OnPropertyChanged("CurtailTimeMin", e, _curtailTimeMinAttribute);
                }
            }
        }
        
        /// <summary>
        /// The totalTranChargeMax property
        /// </summary>
        [XmlElementNameAttribute("totalTranChargeMax")]
        [XmlAttributeAttribute(true)]
        public virtual float TotalTranChargeMax
        {
            get
            {
                return this._totalTranChargeMax;
            }
            set
            {
                if ((this._totalTranChargeMax != value))
                {
                    float old = this._totalTranChargeMax;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTotalTranChargeMaxChanging(e);
                    this.OnPropertyChanging("TotalTranChargeMax", e, _totalTranChargeMaxAttribute);
                    this._totalTranChargeMax = value;
                    this.OnTotalTranChargeMaxChanged(e);
                    this.OnPropertyChanged("TotalTranChargeMax", e, _totalTranChargeMaxAttribute);
                }
            }
        }
        
        /// <summary>
        /// The transactionType property
        /// </summary>
        [XmlElementNameAttribute("transactionType")]
        [XmlAttributeAttribute(true)]
        public virtual string TransactionType
        {
            get
            {
                return this._transactionType;
            }
            set
            {
                if ((this._transactionType != value))
                {
                    string old = this._transactionType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransactionTypeChanging(e);
                    this.OnPropertyChanging("TransactionType", e, _transactionTypeAttribute);
                    this._transactionType = value;
                    this.OnTransactionTypeChanged(e);
                    this.OnPropertyChanged("TransactionType", e, _transactionTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The marketType property
        /// </summary>
        [XmlElementNameAttribute("marketType")]
        [XmlAttributeAttribute(true)]
        public virtual string MarketType
        {
            get
            {
                return this._marketType;
            }
            set
            {
                if ((this._marketType != value))
                {
                    string old = this._marketType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMarketTypeChanging(e);
                    this.OnPropertyChanging("MarketType", e, _marketTypeAttribute);
                    this._marketType = value;
                    this.OnMarketTypeChanged(e);
                    this.OnPropertyChanged("MarketType", e, _marketTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The scope property
        /// </summary>
        [XmlElementNameAttribute("scope")]
        [XmlAttributeAttribute(true)]
        public virtual string Scope
        {
            get
            {
                return this._scope;
            }
            set
            {
                if ((this._scope != value))
                {
                    string old = this._scope;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnScopeChanging(e);
                    this.OnPropertyChanging("Scope", e, _scopeAttribute);
                    this._scope = value;
                    this.OnScopeChanged(e);
                    this.OnPropertyChanged("Scope", e, _scopeAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "BilateralTransaction")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PurchaseTimeMax property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PurchaseTimeMaxChanging;
        
        /// <summary>
        /// Gets fired when the PurchaseTimeMax property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PurchaseTimeMaxChanged;
        
        /// <summary>
        /// Gets fired before the PurchaseTimeMin property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PurchaseTimeMinChanging;
        
        /// <summary>
        /// Gets fired when the PurchaseTimeMin property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PurchaseTimeMinChanged;
        
        /// <summary>
        /// Gets fired before the CurtailTimeMax property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurtailTimeMaxChanging;
        
        /// <summary>
        /// Gets fired when the CurtailTimeMax property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurtailTimeMaxChanged;
        
        /// <summary>
        /// Gets fired before the CurtailTimeMin property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurtailTimeMinChanging;
        
        /// <summary>
        /// Gets fired when the CurtailTimeMin property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurtailTimeMinChanged;
        
        /// <summary>
        /// Gets fired before the TotalTranChargeMax property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotalTranChargeMaxChanging;
        
        /// <summary>
        /// Gets fired when the TotalTranChargeMax property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotalTranChargeMaxChanged;
        
        /// <summary>
        /// Gets fired before the TransactionType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransactionTypeChanging;
        
        /// <summary>
        /// Gets fired when the TransactionType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransactionTypeChanged;
        
        /// <summary>
        /// Gets fired before the MarketType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MarketTypeChanging;
        
        /// <summary>
        /// Gets fired when the MarketType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MarketTypeChanged;
        
        /// <summary>
        /// Gets fired before the Scope property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ScopeChanging;
        
        /// <summary>
        /// Gets fired when the Scope property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ScopeChanged;
        
        private static ITypedElement RetrievePurchaseTimeMaxAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BilateralTransaction.ClassInstance)).Resolve("purchaseTimeMax")));
        }
        
        /// <summary>
        /// Raises the PurchaseTimeMaxChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPurchaseTimeMaxChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PurchaseTimeMaxChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PurchaseTimeMaxChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPurchaseTimeMaxChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PurchaseTimeMaxChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePurchaseTimeMinAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BilateralTransaction.ClassInstance)).Resolve("purchaseTimeMin")));
        }
        
        /// <summary>
        /// Raises the PurchaseTimeMinChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPurchaseTimeMinChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PurchaseTimeMinChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PurchaseTimeMinChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPurchaseTimeMinChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PurchaseTimeMinChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCurtailTimeMaxAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BilateralTransaction.ClassInstance)).Resolve("curtailTimeMax")));
        }
        
        /// <summary>
        /// Raises the CurtailTimeMaxChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurtailTimeMaxChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurtailTimeMaxChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurtailTimeMaxChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurtailTimeMaxChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurtailTimeMaxChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCurtailTimeMinAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BilateralTransaction.ClassInstance)).Resolve("curtailTimeMin")));
        }
        
        /// <summary>
        /// Raises the CurtailTimeMinChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurtailTimeMinChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurtailTimeMinChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurtailTimeMinChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurtailTimeMinChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurtailTimeMinChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTotalTranChargeMaxAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BilateralTransaction.ClassInstance)).Resolve("totalTranChargeMax")));
        }
        
        /// <summary>
        /// Raises the TotalTranChargeMaxChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotalTranChargeMaxChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotalTranChargeMaxChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TotalTranChargeMaxChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotalTranChargeMaxChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotalTranChargeMaxChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransactionTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BilateralTransaction.ClassInstance)).Resolve("transactionType")));
        }
        
        /// <summary>
        /// Raises the TransactionTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransactionTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransactionTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransactionTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransactionTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransactionTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMarketTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BilateralTransaction.ClassInstance)).Resolve("marketType")));
        }
        
        /// <summary>
        /// Raises the MarketTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMarketTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MarketTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MarketTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMarketTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MarketTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveScopeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BilateralTransaction.ClassInstance)).Resolve("scope")));
        }
        
        /// <summary>
        /// Raises the ScopeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScopeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ScopeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ScopeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScopeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ScopeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PURCHASETIMEMAX"))
            {
                return this.PurchaseTimeMax;
            }
            if ((attribute == "PURCHASETIMEMIN"))
            {
                return this.PurchaseTimeMin;
            }
            if ((attribute == "CURTAILTIMEMAX"))
            {
                return this.CurtailTimeMax;
            }
            if ((attribute == "CURTAILTIMEMIN"))
            {
                return this.CurtailTimeMin;
            }
            if ((attribute == "TOTALTRANCHARGEMAX"))
            {
                return this.TotalTranChargeMax;
            }
            if ((attribute == "TRANSACTIONTYPE"))
            {
                return this.TransactionType;
            }
            if ((attribute == "MARKETTYPE"))
            {
                return this.MarketType;
            }
            if ((attribute == "SCOPE"))
            {
                return this.Scope;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PURCHASETIMEMAX"))
            {
                this.PurchaseTimeMax = ((int)(value));
                return;
            }
            if ((feature == "PURCHASETIMEMIN"))
            {
                this.PurchaseTimeMin = ((int)(value));
                return;
            }
            if ((feature == "CURTAILTIMEMAX"))
            {
                this.CurtailTimeMax = ((int)(value));
                return;
            }
            if ((feature == "CURTAILTIMEMIN"))
            {
                this.CurtailTimeMin = ((int)(value));
                return;
            }
            if ((feature == "TOTALTRANCHARGEMAX"))
            {
                this.TotalTranChargeMax = ((float)(value));
                return;
            }
            if ((feature == "TRANSACTIONTYPE"))
            {
                this.TransactionType = ((string)(value));
                return;
            }
            if ((feature == "MARKETTYPE"))
            {
                this.MarketType = ((string)(value));
                return;
            }
            if ((feature == "SCOPE"))
            {
                this.Scope = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "BilateralTransaction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the purchaseTimeMax property
        /// </summary>
        private sealed class PurchaseTimeMaxProxy : ModelPropertyChange<IBilateralTransaction, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PurchaseTimeMaxProxy(IBilateralTransaction modelElement) : 
                    base(modelElement, "purchaseTimeMax")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.PurchaseTimeMax;
                }
                set
                {
                    this.ModelElement.PurchaseTimeMax = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the purchaseTimeMin property
        /// </summary>
        private sealed class PurchaseTimeMinProxy : ModelPropertyChange<IBilateralTransaction, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PurchaseTimeMinProxy(IBilateralTransaction modelElement) : 
                    base(modelElement, "purchaseTimeMin")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.PurchaseTimeMin;
                }
                set
                {
                    this.ModelElement.PurchaseTimeMin = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the curtailTimeMax property
        /// </summary>
        private sealed class CurtailTimeMaxProxy : ModelPropertyChange<IBilateralTransaction, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurtailTimeMaxProxy(IBilateralTransaction modelElement) : 
                    base(modelElement, "curtailTimeMax")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.CurtailTimeMax;
                }
                set
                {
                    this.ModelElement.CurtailTimeMax = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the curtailTimeMin property
        /// </summary>
        private sealed class CurtailTimeMinProxy : ModelPropertyChange<IBilateralTransaction, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurtailTimeMinProxy(IBilateralTransaction modelElement) : 
                    base(modelElement, "curtailTimeMin")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.CurtailTimeMin;
                }
                set
                {
                    this.ModelElement.CurtailTimeMin = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the totalTranChargeMax property
        /// </summary>
        private sealed class TotalTranChargeMaxProxy : ModelPropertyChange<IBilateralTransaction, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TotalTranChargeMaxProxy(IBilateralTransaction modelElement) : 
                    base(modelElement, "totalTranChargeMax")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TotalTranChargeMax;
                }
                set
                {
                    this.ModelElement.TotalTranChargeMax = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the transactionType property
        /// </summary>
        private sealed class TransactionTypeProxy : ModelPropertyChange<IBilateralTransaction, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransactionTypeProxy(IBilateralTransaction modelElement) : 
                    base(modelElement, "transactionType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.TransactionType;
                }
                set
                {
                    this.ModelElement.TransactionType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the marketType property
        /// </summary>
        private sealed class MarketTypeProxy : ModelPropertyChange<IBilateralTransaction, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MarketTypeProxy(IBilateralTransaction modelElement) : 
                    base(modelElement, "marketType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.MarketType;
                }
                set
                {
                    this.ModelElement.MarketType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the scope property
        /// </summary>
        private sealed class ScopeProxy : ModelPropertyChange<IBilateralTransaction, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ScopeProxy(IBilateralTransaction modelElement) : 
                    base(modelElement, "scope")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Scope;
                }
                set
                {
                    this.ModelElement.Scope = value;
                }
            }
        }
    }
}

