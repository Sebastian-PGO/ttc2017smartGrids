using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the ChargeProfile class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "ChargeProfile")]
    [DebuggerDisplayAttribute("ChargeProfile {UUID}")]
    public partial class ChargeProfile : Profile, IChargeProfile, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Type property
        /// </summary>
        private string _type;
        
        private static Lazy<ITypedElement> _typeAttribute = new Lazy<ITypedElement>(RetrieveTypeAttribute);
        
        /// <summary>
        /// The backing field for the UnitOfMeasure property
        /// </summary>
        private string _unitOfMeasure;
        
        private static Lazy<ITypedElement> _unitOfMeasureAttribute = new Lazy<ITypedElement>(RetrieveUnitOfMeasureAttribute);
        
        /// <summary>
        /// The backing field for the Frequency property
        /// </summary>
        private string _frequency;
        
        private static Lazy<ITypedElement> _frequencyAttribute = new Lazy<ITypedElement>(RetrieveFrequencyAttribute);
        
        /// <summary>
        /// The backing field for the NumberInterval property
        /// </summary>
        private int _numberInterval;
        
        private static Lazy<ITypedElement> _numberIntervalAttribute = new Lazy<ITypedElement>(RetrieveNumberIntervalAttribute);
        
        private static Lazy<ITypedElement> _passTroughBillReference = new Lazy<ITypedElement>(RetrievePassTroughBillReference);
        
        /// <summary>
        /// The backing field for the PassTroughBill property
        /// </summary>
        private IPassThroughBill _passTroughBill;
        
        private static Lazy<ITypedElement> _chargeProfileDataReference = new Lazy<ITypedElement>(RetrieveChargeProfileDataReference);
        
        /// <summary>
        /// The backing field for the ChargeProfileData property
        /// </summary>
        private ChargeProfileChargeProfileDataCollection _chargeProfileData;
        
        private static Lazy<ITypedElement> _billDeterminantReference = new Lazy<ITypedElement>(RetrieveBillDeterminantReference);
        
        /// <summary>
        /// The backing field for the BillDeterminant property
        /// </summary>
        private IBillDeterminant _billDeterminant;
        
        private static IClass _classInstance;
        
        public ChargeProfile()
        {
            this._chargeProfileData = new ChargeProfileChargeProfileDataCollection(this);
            this._chargeProfileData.CollectionChanging += this.ChargeProfileDataCollectionChanging;
            this._chargeProfileData.CollectionChanged += this.ChargeProfileDataCollectionChanged;
        }
        
        /// <summary>
        /// The type property
        /// </summary>
        [XmlElementNameAttribute("type")]
        [XmlAttributeAttribute(true)]
        public virtual string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    string old = this._type;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeChanging(e);
                    this.OnPropertyChanging("Type", e, _typeAttribute);
                    this._type = value;
                    this.OnTypeChanged(e);
                    this.OnPropertyChanged("Type", e, _typeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The unitOfMeasure property
        /// </summary>
        [XmlElementNameAttribute("unitOfMeasure")]
        [XmlAttributeAttribute(true)]
        public virtual string UnitOfMeasure
        {
            get
            {
                return this._unitOfMeasure;
            }
            set
            {
                if ((this._unitOfMeasure != value))
                {
                    string old = this._unitOfMeasure;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUnitOfMeasureChanging(e);
                    this.OnPropertyChanging("UnitOfMeasure", e, _unitOfMeasureAttribute);
                    this._unitOfMeasure = value;
                    this.OnUnitOfMeasureChanged(e);
                    this.OnPropertyChanged("UnitOfMeasure", e, _unitOfMeasureAttribute);
                }
            }
        }
        
        /// <summary>
        /// The frequency property
        /// </summary>
        [XmlElementNameAttribute("frequency")]
        [XmlAttributeAttribute(true)]
        public virtual string Frequency
        {
            get
            {
                return this._frequency;
            }
            set
            {
                if ((this._frequency != value))
                {
                    string old = this._frequency;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFrequencyChanging(e);
                    this.OnPropertyChanging("Frequency", e, _frequencyAttribute);
                    this._frequency = value;
                    this.OnFrequencyChanged(e);
                    this.OnPropertyChanged("Frequency", e, _frequencyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The numberInterval property
        /// </summary>
        [XmlElementNameAttribute("numberInterval")]
        [XmlAttributeAttribute(true)]
        public virtual int NumberInterval
        {
            get
            {
                return this._numberInterval;
            }
            set
            {
                if ((this._numberInterval != value))
                {
                    int old = this._numberInterval;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNumberIntervalChanging(e);
                    this.OnPropertyChanging("NumberInterval", e, _numberIntervalAttribute);
                    this._numberInterval = value;
                    this.OnNumberIntervalChanged(e);
                    this.OnPropertyChanged("NumberInterval", e, _numberIntervalAttribute);
                }
            }
        }
        
        /// <summary>
        /// The PassTroughBill property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ChargeProfiles")]
        public virtual IPassThroughBill PassTroughBill
        {
            get
            {
                return this._passTroughBill;
            }
            set
            {
                if ((this._passTroughBill != value))
                {
                    IPassThroughBill old = this._passTroughBill;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPassTroughBillChanging(e);
                    this.OnPropertyChanging("PassTroughBill", e, _passTroughBillReference);
                    this._passTroughBill = value;
                    if ((old != null))
                    {
                        old.ChargeProfiles.Remove(this);
                        old.Deleted -= this.OnResetPassTroughBill;
                    }
                    if ((value != null))
                    {
                        value.ChargeProfiles.Add(this);
                        value.Deleted += this.OnResetPassTroughBill;
                    }
                    this.OnPassTroughBillChanged(e);
                    this.OnPropertyChanged("PassTroughBill", e, _passTroughBillReference);
                }
            }
        }
        
        /// <summary>
        /// The ChargeProfileData property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ChargeProfile")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IChargeProfileData> ChargeProfileData
        {
            get
            {
                return this._chargeProfileData;
            }
        }
        
        /// <summary>
        /// The BillDeterminant property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ChargeProfile")]
        public virtual IBillDeterminant BillDeterminant
        {
            get
            {
                return this._billDeterminant;
            }
            set
            {
                if ((this._billDeterminant != value))
                {
                    IBillDeterminant old = this._billDeterminant;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBillDeterminantChanging(e);
                    this.OnPropertyChanging("BillDeterminant", e, _billDeterminantReference);
                    this._billDeterminant = value;
                    if ((old != null))
                    {
                        old.ChargeProfile = null;
                        old.Deleted -= this.OnResetBillDeterminant;
                    }
                    if ((value != null))
                    {
                        value.ChargeProfile = this;
                        value.Deleted += this.OnResetBillDeterminant;
                    }
                    this.OnBillDeterminantChanged(e);
                    this.OnPropertyChanged("BillDeterminant", e, _billDeterminantReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ChargeProfileReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "ChargeProfile")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Type property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanging;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanged;
        
        /// <summary>
        /// Gets fired before the UnitOfMeasure property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitOfMeasureChanging;
        
        /// <summary>
        /// Gets fired when the UnitOfMeasure property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UnitOfMeasureChanged;
        
        /// <summary>
        /// Gets fired before the Frequency property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrequencyChanging;
        
        /// <summary>
        /// Gets fired when the Frequency property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrequencyChanged;
        
        /// <summary>
        /// Gets fired before the NumberInterval property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NumberIntervalChanging;
        
        /// <summary>
        /// Gets fired when the NumberInterval property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NumberIntervalChanged;
        
        /// <summary>
        /// Gets fired before the PassTroughBill property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PassTroughBillChanging;
        
        /// <summary>
        /// Gets fired when the PassTroughBill property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PassTroughBillChanged;
        
        /// <summary>
        /// Gets fired before the BillDeterminant property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillDeterminantChanging;
        
        /// <summary>
        /// Gets fired when the BillDeterminant property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillDeterminantChanged;
        
        private static ITypedElement RetrieveTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ChargeProfile.ClassInstance)).Resolve("type")));
        }
        
        /// <summary>
        /// Raises the TypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUnitOfMeasureAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ChargeProfile.ClassInstance)).Resolve("unitOfMeasure")));
        }
        
        /// <summary>
        /// Raises the UnitOfMeasureChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitOfMeasureChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitOfMeasureChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UnitOfMeasureChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUnitOfMeasureChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UnitOfMeasureChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFrequencyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ChargeProfile.ClassInstance)).Resolve("frequency")));
        }
        
        /// <summary>
        /// Raises the FrequencyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrequencyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrequencyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FrequencyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrequencyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrequencyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNumberIntervalAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ChargeProfile.ClassInstance)).Resolve("numberInterval")));
        }
        
        /// <summary>
        /// Raises the NumberIntervalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberIntervalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NumberIntervalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NumberIntervalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberIntervalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NumberIntervalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePassTroughBillReference()
        {
            return ((ITypedElement)(((ModelElement)(ChargeProfile.ClassInstance)).Resolve("PassTroughBill")));
        }
        
        /// <summary>
        /// Raises the PassTroughBillChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPassTroughBillChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PassTroughBillChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PassTroughBillChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPassTroughBillChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PassTroughBillChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PassTroughBill property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPassTroughBill(object sender, System.EventArgs eventArgs)
        {
            this.PassTroughBill = null;
        }
        
        private static ITypedElement RetrieveChargeProfileDataReference()
        {
            return ((ITypedElement)(((ModelElement)(ChargeProfile.ClassInstance)).Resolve("ChargeProfileData")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ChargeProfileData property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChargeProfileDataCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ChargeProfileData", e, _chargeProfileDataReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ChargeProfileData property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChargeProfileDataCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ChargeProfileData", e, _chargeProfileDataReference);
        }
        
        private static ITypedElement RetrieveBillDeterminantReference()
        {
            return ((ITypedElement)(((ModelElement)(ChargeProfile.ClassInstance)).Resolve("BillDeterminant")));
        }
        
        /// <summary>
        /// Raises the BillDeterminantChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillDeterminantChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillDeterminantChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BillDeterminantChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillDeterminantChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillDeterminantChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BillDeterminant property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBillDeterminant(object sender, System.EventArgs eventArgs)
        {
            this.BillDeterminant = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TYPE"))
            {
                return this.Type;
            }
            if ((attribute == "UNITOFMEASURE"))
            {
                return this.UnitOfMeasure;
            }
            if ((attribute == "FREQUENCY"))
            {
                return this.Frequency;
            }
            if ((attribute == "NUMBERINTERVAL"))
            {
                return this.NumberInterval;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CHARGEPROFILEDATA"))
            {
                return this._chargeProfileData;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PASSTROUGHBILL"))
            {
                this.PassTroughBill = ((IPassThroughBill)(value));
                return;
            }
            if ((feature == "BILLDETERMINANT"))
            {
                this.BillDeterminant = ((IBillDeterminant)(value));
                return;
            }
            if ((feature == "TYPE"))
            {
                this.Type = ((string)(value));
                return;
            }
            if ((feature == "UNITOFMEASURE"))
            {
                this.UnitOfMeasure = ((string)(value));
                return;
            }
            if ((feature == "FREQUENCY"))
            {
                this.Frequency = ((string)(value));
                return;
            }
            if ((feature == "NUMBERINTERVAL"))
            {
                this.NumberInterval = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "PassTroughBill"))
            {
                return new PassTroughBillProxy(this);
            }
            if ((attribute == "BillDeterminant"))
            {
                return new BillDeterminantProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PassTroughBill"))
            {
                return new PassTroughBillProxy(this);
            }
            if ((reference == "BillDeterminant"))
            {
                return new BillDeterminantProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "ChargeProfile")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ChargeProfile class
        /// </summary>
        public class ChargeProfileReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ChargeProfile _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ChargeProfileReferencedElementsCollection(ChargeProfile parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.PassTroughBill != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ChargeProfileData.Count);
                    if ((this._parent.BillDeterminant != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PassTroughBillChanged += this.PropagateValueChanges;
                this._parent.ChargeProfileData.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BillDeterminantChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PassTroughBillChanged -= this.PropagateValueChanges;
                this._parent.ChargeProfileData.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BillDeterminantChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.PassTroughBill == null))
                {
                    IPassThroughBill passTroughBillCasted = item.As<IPassThroughBill>();
                    if ((passTroughBillCasted != null))
                    {
                        this._parent.PassTroughBill = passTroughBillCasted;
                        return;
                    }
                }
                IChargeProfileData chargeProfileDataCasted = item.As<IChargeProfileData>();
                if ((chargeProfileDataCasted != null))
                {
                    this._parent.ChargeProfileData.Add(chargeProfileDataCasted);
                }
                if ((this._parent.BillDeterminant == null))
                {
                    IBillDeterminant billDeterminantCasted = item.As<IBillDeterminant>();
                    if ((billDeterminantCasted != null))
                    {
                        this._parent.BillDeterminant = billDeterminantCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PassTroughBill = null;
                this._parent.ChargeProfileData.Clear();
                this._parent.BillDeterminant = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.PassTroughBill))
                {
                    return true;
                }
                if (this._parent.ChargeProfileData.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.BillDeterminant))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.PassTroughBill != null))
                {
                    array[arrayIndex] = this._parent.PassTroughBill;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> chargeProfileDataEnumerator = this._parent.ChargeProfileData.GetEnumerator();
                try
                {
                    for (
                    ; chargeProfileDataEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = chargeProfileDataEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    chargeProfileDataEnumerator.Dispose();
                }
                if ((this._parent.BillDeterminant != null))
                {
                    array[arrayIndex] = this._parent.BillDeterminant;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.PassTroughBill == item))
                {
                    this._parent.PassTroughBill = null;
                    return true;
                }
                IChargeProfileData chargeProfileDataItem = item.As<IChargeProfileData>();
                if (((chargeProfileDataItem != null) 
                            && this._parent.ChargeProfileData.Remove(chargeProfileDataItem)))
                {
                    return true;
                }
                if ((this._parent.BillDeterminant == item))
                {
                    this._parent.BillDeterminant = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PassTroughBill).Concat(this._parent.ChargeProfileData).Concat(this._parent.BillDeterminant).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<IChargeProfile, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(IChargeProfile modelElement) : 
                    base(modelElement, "type")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the unitOfMeasure property
        /// </summary>
        private sealed class UnitOfMeasureProxy : ModelPropertyChange<IChargeProfile, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UnitOfMeasureProxy(IChargeProfile modelElement) : 
                    base(modelElement, "unitOfMeasure")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.UnitOfMeasure;
                }
                set
                {
                    this.ModelElement.UnitOfMeasure = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the frequency property
        /// </summary>
        private sealed class FrequencyProxy : ModelPropertyChange<IChargeProfile, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FrequencyProxy(IChargeProfile modelElement) : 
                    base(modelElement, "frequency")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Frequency;
                }
                set
                {
                    this.ModelElement.Frequency = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the numberInterval property
        /// </summary>
        private sealed class NumberIntervalProxy : ModelPropertyChange<IChargeProfile, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NumberIntervalProxy(IChargeProfile modelElement) : 
                    base(modelElement, "numberInterval")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.NumberInterval;
                }
                set
                {
                    this.ModelElement.NumberInterval = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PassTroughBill property
        /// </summary>
        private sealed class PassTroughBillProxy : ModelPropertyChange<IChargeProfile, IPassThroughBill>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PassTroughBillProxy(IChargeProfile modelElement) : 
                    base(modelElement, "PassTroughBill")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPassThroughBill Value
            {
                get
                {
                    return this.ModelElement.PassTroughBill;
                }
                set
                {
                    this.ModelElement.PassTroughBill = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BillDeterminant property
        /// </summary>
        private sealed class BillDeterminantProxy : ModelPropertyChange<IChargeProfile, IBillDeterminant>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BillDeterminantProxy(IChargeProfile modelElement) : 
                    base(modelElement, "BillDeterminant")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBillDeterminant Value
            {
                get
                {
                    return this.ModelElement.BillDeterminant;
                }
                set
                {
                    this.ModelElement.BillDeterminant = value;
                }
            }
        }
    }
}

