using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the ReserveReq class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "ReserveReq")]
    [DebuggerDisplayAttribute("ReserveReq {UUID}")]
    public partial class ReserveReq : ResourceGroupReq, IReserveReq, IModelElement
    {
        
        private static Lazy<ITypedElement> _sensitivityPriceCurveReference = new Lazy<ITypedElement>(RetrieveSensitivityPriceCurveReference);
        
        /// <summary>
        /// The backing field for the SensitivityPriceCurve property
        /// </summary>
        private ISensitivityPriceCurve _sensitivityPriceCurve;
        
        private static Lazy<ITypedElement> _reserveReqCurveReference = new Lazy<ITypedElement>(RetrieveReserveReqCurveReference);
        
        /// <summary>
        /// The backing field for the ReserveReqCurve property
        /// </summary>
        private IReserveReqCurve _reserveReqCurve;
        
        private static Lazy<ITypedElement> _marketProductReference = new Lazy<ITypedElement>(RetrieveMarketProductReference);
        
        /// <summary>
        /// The backing field for the MarketProduct property
        /// </summary>
        private IMarketProduct _marketProduct;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The SensitivityPriceCurve property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ReserveReq")]
        public virtual ISensitivityPriceCurve SensitivityPriceCurve
        {
            get
            {
                return this._sensitivityPriceCurve;
            }
            set
            {
                if ((this._sensitivityPriceCurve != value))
                {
                    ISensitivityPriceCurve old = this._sensitivityPriceCurve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSensitivityPriceCurveChanging(e);
                    this.OnPropertyChanging("SensitivityPriceCurve", e, _sensitivityPriceCurveReference);
                    this._sensitivityPriceCurve = value;
                    if ((old != null))
                    {
                        old.ReserveReq = null;
                        old.Deleted -= this.OnResetSensitivityPriceCurve;
                    }
                    if ((value != null))
                    {
                        value.ReserveReq = this;
                        value.Deleted += this.OnResetSensitivityPriceCurve;
                    }
                    this.OnSensitivityPriceCurveChanged(e);
                    this.OnPropertyChanged("SensitivityPriceCurve", e, _sensitivityPriceCurveReference);
                }
            }
        }
        
        /// <summary>
        /// The ReserveReqCurve property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ReserveReq")]
        public virtual IReserveReqCurve ReserveReqCurve
        {
            get
            {
                return this._reserveReqCurve;
            }
            set
            {
                if ((this._reserveReqCurve != value))
                {
                    IReserveReqCurve old = this._reserveReqCurve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReserveReqCurveChanging(e);
                    this.OnPropertyChanging("ReserveReqCurve", e, _reserveReqCurveReference);
                    this._reserveReqCurve = value;
                    if ((old != null))
                    {
                        old.ReserveReq = null;
                        old.Deleted -= this.OnResetReserveReqCurve;
                    }
                    if ((value != null))
                    {
                        value.ReserveReq = this;
                        value.Deleted += this.OnResetReserveReqCurve;
                    }
                    this.OnReserveReqCurveChanged(e);
                    this.OnPropertyChanged("ReserveReqCurve", e, _reserveReqCurveReference);
                }
            }
        }
        
        /// <summary>
        /// The MarketProduct property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ReserveReqs")]
        public virtual IMarketProduct MarketProduct
        {
            get
            {
                return this._marketProduct;
            }
            set
            {
                if ((this._marketProduct != value))
                {
                    IMarketProduct old = this._marketProduct;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMarketProductChanging(e);
                    this.OnPropertyChanging("MarketProduct", e, _marketProductReference);
                    this._marketProduct = value;
                    if ((old != null))
                    {
                        old.ReserveReqs.Remove(this);
                        old.Deleted -= this.OnResetMarketProduct;
                    }
                    if ((value != null))
                    {
                        value.ReserveReqs.Add(this);
                        value.Deleted += this.OnResetMarketProduct;
                    }
                    this.OnMarketProductChanged(e);
                    this.OnPropertyChanged("MarketProduct", e, _marketProductReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ReserveReqReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "ReserveReq")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the SensitivityPriceCurve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SensitivityPriceCurveChanging;
        
        /// <summary>
        /// Gets fired when the SensitivityPriceCurve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SensitivityPriceCurveChanged;
        
        /// <summary>
        /// Gets fired before the ReserveReqCurve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReserveReqCurveChanging;
        
        /// <summary>
        /// Gets fired when the ReserveReqCurve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReserveReqCurveChanged;
        
        /// <summary>
        /// Gets fired before the MarketProduct property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MarketProductChanging;
        
        /// <summary>
        /// Gets fired when the MarketProduct property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MarketProductChanged;
        
        private static ITypedElement RetrieveSensitivityPriceCurveReference()
        {
            return ((ITypedElement)(((ModelElement)(ReserveReq.ClassInstance)).Resolve("SensitivityPriceCurve")));
        }
        
        /// <summary>
        /// Raises the SensitivityPriceCurveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSensitivityPriceCurveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SensitivityPriceCurveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SensitivityPriceCurveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSensitivityPriceCurveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SensitivityPriceCurveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SensitivityPriceCurve property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSensitivityPriceCurve(object sender, System.EventArgs eventArgs)
        {
            this.SensitivityPriceCurve = null;
        }
        
        private static ITypedElement RetrieveReserveReqCurveReference()
        {
            return ((ITypedElement)(((ModelElement)(ReserveReq.ClassInstance)).Resolve("ReserveReqCurve")));
        }
        
        /// <summary>
        /// Raises the ReserveReqCurveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReserveReqCurveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReserveReqCurveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReserveReqCurveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReserveReqCurveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReserveReqCurveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ReserveReqCurve property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReserveReqCurve(object sender, System.EventArgs eventArgs)
        {
            this.ReserveReqCurve = null;
        }
        
        private static ITypedElement RetrieveMarketProductReference()
        {
            return ((ITypedElement)(((ModelElement)(ReserveReq.ClassInstance)).Resolve("MarketProduct")));
        }
        
        /// <summary>
        /// Raises the MarketProductChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMarketProductChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MarketProductChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MarketProductChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMarketProductChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MarketProductChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MarketProduct property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMarketProduct(object sender, System.EventArgs eventArgs)
        {
            this.MarketProduct = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SENSITIVITYPRICECURVE"))
            {
                this.SensitivityPriceCurve = ((ISensitivityPriceCurve)(value));
                return;
            }
            if ((feature == "RESERVEREQCURVE"))
            {
                this.ReserveReqCurve = ((IReserveReqCurve)(value));
                return;
            }
            if ((feature == "MARKETPRODUCT"))
            {
                this.MarketProduct = ((IMarketProduct)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SensitivityPriceCurve"))
            {
                return new SensitivityPriceCurveProxy(this);
            }
            if ((attribute == "ReserveReqCurve"))
            {
                return new ReserveReqCurveProxy(this);
            }
            if ((attribute == "MarketProduct"))
            {
                return new MarketProductProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SensitivityPriceCurve"))
            {
                return new SensitivityPriceCurveProxy(this);
            }
            if ((reference == "ReserveReqCurve"))
            {
                return new ReserveReqCurveProxy(this);
            }
            if ((reference == "MarketProduct"))
            {
                return new MarketProductProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "ReserveReq")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ReserveReq class
        /// </summary>
        public class ReserveReqReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ReserveReq _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ReserveReqReferencedElementsCollection(ReserveReq parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.SensitivityPriceCurve != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ReserveReqCurve != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MarketProduct != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SensitivityPriceCurveChanged += this.PropagateValueChanges;
                this._parent.ReserveReqCurveChanged += this.PropagateValueChanges;
                this._parent.MarketProductChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SensitivityPriceCurveChanged -= this.PropagateValueChanges;
                this._parent.ReserveReqCurveChanged -= this.PropagateValueChanges;
                this._parent.MarketProductChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.SensitivityPriceCurve == null))
                {
                    ISensitivityPriceCurve sensitivityPriceCurveCasted = item.As<ISensitivityPriceCurve>();
                    if ((sensitivityPriceCurveCasted != null))
                    {
                        this._parent.SensitivityPriceCurve = sensitivityPriceCurveCasted;
                        return;
                    }
                }
                if ((this._parent.ReserveReqCurve == null))
                {
                    IReserveReqCurve reserveReqCurveCasted = item.As<IReserveReqCurve>();
                    if ((reserveReqCurveCasted != null))
                    {
                        this._parent.ReserveReqCurve = reserveReqCurveCasted;
                        return;
                    }
                }
                if ((this._parent.MarketProduct == null))
                {
                    IMarketProduct marketProductCasted = item.As<IMarketProduct>();
                    if ((marketProductCasted != null))
                    {
                        this._parent.MarketProduct = marketProductCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SensitivityPriceCurve = null;
                this._parent.ReserveReqCurve = null;
                this._parent.MarketProduct = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.SensitivityPriceCurve))
                {
                    return true;
                }
                if ((item == this._parent.ReserveReqCurve))
                {
                    return true;
                }
                if ((item == this._parent.MarketProduct))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.SensitivityPriceCurve != null))
                {
                    array[arrayIndex] = this._parent.SensitivityPriceCurve;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ReserveReqCurve != null))
                {
                    array[arrayIndex] = this._parent.ReserveReqCurve;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MarketProduct != null))
                {
                    array[arrayIndex] = this._parent.MarketProduct;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.SensitivityPriceCurve == item))
                {
                    this._parent.SensitivityPriceCurve = null;
                    return true;
                }
                if ((this._parent.ReserveReqCurve == item))
                {
                    this._parent.ReserveReqCurve = null;
                    return true;
                }
                if ((this._parent.MarketProduct == item))
                {
                    this._parent.MarketProduct = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SensitivityPriceCurve).Concat(this._parent.ReserveReqCurve).Concat(this._parent.MarketProduct).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SensitivityPriceCurve property
        /// </summary>
        private sealed class SensitivityPriceCurveProxy : ModelPropertyChange<IReserveReq, ISensitivityPriceCurve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SensitivityPriceCurveProxy(IReserveReq modelElement) : 
                    base(modelElement, "SensitivityPriceCurve")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISensitivityPriceCurve Value
            {
                get
                {
                    return this.ModelElement.SensitivityPriceCurve;
                }
                set
                {
                    this.ModelElement.SensitivityPriceCurve = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReserveReqCurve property
        /// </summary>
        private sealed class ReserveReqCurveProxy : ModelPropertyChange<IReserveReq, IReserveReqCurve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReserveReqCurveProxy(IReserveReq modelElement) : 
                    base(modelElement, "ReserveReqCurve")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReserveReqCurve Value
            {
                get
                {
                    return this.ModelElement.ReserveReqCurve;
                }
                set
                {
                    this.ModelElement.ReserveReqCurve = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MarketProduct property
        /// </summary>
        private sealed class MarketProductProxy : ModelPropertyChange<IReserveReq, IMarketProduct>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MarketProductProxy(IReserveReq modelElement) : 
                    base(modelElement, "MarketProduct")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMarketProduct Value
            {
                get
                {
                    return this.ModelElement.MarketProduct;
                }
                set
                {
                    this.ModelElement.MarketProduct = value;
                }
            }
        }
    }
}

