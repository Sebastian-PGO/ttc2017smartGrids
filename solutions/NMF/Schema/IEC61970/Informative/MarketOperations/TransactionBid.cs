using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the TransactionBid class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "TransactionBid")]
    [DebuggerDisplayAttribute("TransactionBid {UUID}")]
    public partial class TransactionBid : Bid, ITransactionBid, IModelElement
    {
        
        /// <summary>
        /// The backing field for the EnergyTransId property
        /// </summary>
        private string _energyTransId;
        
        private static Lazy<ITypedElement> _energyTransIdAttribute = new Lazy<ITypedElement>(RetrieveEnergyTransIdAttribute);
        
        private static Lazy<ITypedElement> _energyProfilesReference = new Lazy<ITypedElement>(RetrieveEnergyProfilesReference);
        
        /// <summary>
        /// The backing field for the EnergyProfiles property
        /// </summary>
        private TransactionBidEnergyProfilesCollection _energyProfiles;
        
        private static Lazy<ITypedElement> _delivery_PnodeReference = new Lazy<ITypedElement>(RetrieveDelivery_PnodeReference);
        
        /// <summary>
        /// The backing field for the Delivery_Pnode property
        /// </summary>
        private IPnode _delivery_Pnode;
        
        private static Lazy<ITypedElement> _receipt_PnodeReference = new Lazy<ITypedElement>(RetrieveReceipt_PnodeReference);
        
        /// <summary>
        /// The backing field for the Receipt_Pnode property
        /// </summary>
        private IPnode _receipt_Pnode;
        
        private static IClass _classInstance;
        
        public TransactionBid()
        {
            this._energyProfiles = new TransactionBidEnergyProfilesCollection(this);
            this._energyProfiles.CollectionChanging += this.EnergyProfilesCollectionChanging;
            this._energyProfiles.CollectionChanged += this.EnergyProfilesCollectionChanged;
        }
        
        /// <summary>
        /// The EnergyTransId property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string EnergyTransId
        {
            get
            {
                return this._energyTransId;
            }
            set
            {
                if ((this._energyTransId != value))
                {
                    string old = this._energyTransId;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEnergyTransIdChanging(e);
                    this.OnPropertyChanging("EnergyTransId", e, _energyTransIdAttribute);
                    this._energyTransId = value;
                    this.OnEnergyTransIdChanged(e);
                    this.OnPropertyChanged("EnergyTransId", e, _energyTransIdAttribute);
                }
            }
        }
        
        /// <summary>
        /// The EnergyProfiles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TransactionBid")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEnergyProfile> EnergyProfiles
        {
            get
            {
                return this._energyProfiles;
            }
        }
        
        /// <summary>
        /// The Delivery_Pnode property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("DeliveryTransactionBids")]
        public virtual IPnode Delivery_Pnode
        {
            get
            {
                return this._delivery_Pnode;
            }
            set
            {
                if ((this._delivery_Pnode != value))
                {
                    IPnode old = this._delivery_Pnode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDelivery_PnodeChanging(e);
                    this.OnPropertyChanging("Delivery_Pnode", e, _delivery_PnodeReference);
                    this._delivery_Pnode = value;
                    if ((old != null))
                    {
                        old.DeliveryTransactionBids.Remove(this);
                        old.Deleted -= this.OnResetDelivery_Pnode;
                    }
                    if ((value != null))
                    {
                        value.DeliveryTransactionBids.Add(this);
                        value.Deleted += this.OnResetDelivery_Pnode;
                    }
                    this.OnDelivery_PnodeChanged(e);
                    this.OnPropertyChanged("Delivery_Pnode", e, _delivery_PnodeReference);
                }
            }
        }
        
        /// <summary>
        /// The Receipt_Pnode property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ReceiptTransactionBids")]
        public virtual IPnode Receipt_Pnode
        {
            get
            {
                return this._receipt_Pnode;
            }
            set
            {
                if ((this._receipt_Pnode != value))
                {
                    IPnode old = this._receipt_Pnode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReceipt_PnodeChanging(e);
                    this.OnPropertyChanging("Receipt_Pnode", e, _receipt_PnodeReference);
                    this._receipt_Pnode = value;
                    if ((old != null))
                    {
                        old.ReceiptTransactionBids.Remove(this);
                        old.Deleted -= this.OnResetReceipt_Pnode;
                    }
                    if ((value != null))
                    {
                        value.ReceiptTransactionBids.Add(this);
                        value.Deleted += this.OnResetReceipt_Pnode;
                    }
                    this.OnReceipt_PnodeChanged(e);
                    this.OnPropertyChanged("Receipt_Pnode", e, _receipt_PnodeReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TransactionBidReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "TransactionBid")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the EnergyTransId property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyTransIdChanging;
        
        /// <summary>
        /// Gets fired when the EnergyTransId property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyTransIdChanged;
        
        /// <summary>
        /// Gets fired before the Delivery_Pnode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Delivery_PnodeChanging;
        
        /// <summary>
        /// Gets fired when the Delivery_Pnode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Delivery_PnodeChanged;
        
        /// <summary>
        /// Gets fired before the Receipt_Pnode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Receipt_PnodeChanging;
        
        /// <summary>
        /// Gets fired when the Receipt_Pnode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Receipt_PnodeChanged;
        
        private static ITypedElement RetrieveEnergyTransIdAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransactionBid.ClassInstance)).Resolve("EnergyTransId")));
        }
        
        /// <summary>
        /// Raises the EnergyTransIdChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyTransIdChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyTransIdChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnergyTransIdChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyTransIdChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyTransIdChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEnergyProfilesReference()
        {
            return ((ITypedElement)(((ModelElement)(TransactionBid.ClassInstance)).Resolve("EnergyProfiles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EnergyProfiles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EnergyProfilesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("EnergyProfiles", e, _energyProfilesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EnergyProfiles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EnergyProfilesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EnergyProfiles", e, _energyProfilesReference);
        }
        
        private static ITypedElement RetrieveDelivery_PnodeReference()
        {
            return ((ITypedElement)(((ModelElement)(TransactionBid.ClassInstance)).Resolve("Delivery_Pnode")));
        }
        
        /// <summary>
        /// Raises the Delivery_PnodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDelivery_PnodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Delivery_PnodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Delivery_PnodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDelivery_PnodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Delivery_PnodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Delivery_Pnode property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDelivery_Pnode(object sender, System.EventArgs eventArgs)
        {
            this.Delivery_Pnode = null;
        }
        
        private static ITypedElement RetrieveReceipt_PnodeReference()
        {
            return ((ITypedElement)(((ModelElement)(TransactionBid.ClassInstance)).Resolve("Receipt_Pnode")));
        }
        
        /// <summary>
        /// Raises the Receipt_PnodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceipt_PnodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Receipt_PnodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Receipt_PnodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceipt_PnodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Receipt_PnodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Receipt_Pnode property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReceipt_Pnode(object sender, System.EventArgs eventArgs)
        {
            this.Receipt_Pnode = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ENERGYTRANSID"))
            {
                return this.EnergyTransId;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ENERGYPROFILES"))
            {
                return this._energyProfiles;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DELIVERY_PNODE"))
            {
                this.Delivery_Pnode = ((IPnode)(value));
                return;
            }
            if ((feature == "RECEIPT_PNODE"))
            {
                this.Receipt_Pnode = ((IPnode)(value));
                return;
            }
            if ((feature == "ENERGYTRANSID"))
            {
                this.EnergyTransId = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Delivery_Pnode"))
            {
                return new Delivery_PnodeProxy(this);
            }
            if ((attribute == "Receipt_Pnode"))
            {
                return new Receipt_PnodeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Delivery_Pnode"))
            {
                return new Delivery_PnodeProxy(this);
            }
            if ((reference == "Receipt_Pnode"))
            {
                return new Receipt_PnodeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "TransactionBid")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TransactionBid class
        /// </summary>
        public class TransactionBidReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TransactionBid _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TransactionBidReferencedElementsCollection(TransactionBid parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.EnergyProfiles.Count);
                    if ((this._parent.Delivery_Pnode != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Receipt_Pnode != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.EnergyProfiles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Delivery_PnodeChanged += this.PropagateValueChanges;
                this._parent.Receipt_PnodeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.EnergyProfiles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Delivery_PnodeChanged -= this.PropagateValueChanges;
                this._parent.Receipt_PnodeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IEnergyProfile energyProfilesCasted = item.As<IEnergyProfile>();
                if ((energyProfilesCasted != null))
                {
                    this._parent.EnergyProfiles.Add(energyProfilesCasted);
                }
                if ((this._parent.Delivery_Pnode == null))
                {
                    IPnode delivery_PnodeCasted = item.As<IPnode>();
                    if ((delivery_PnodeCasted != null))
                    {
                        this._parent.Delivery_Pnode = delivery_PnodeCasted;
                        return;
                    }
                }
                if ((this._parent.Receipt_Pnode == null))
                {
                    IPnode receipt_PnodeCasted = item.As<IPnode>();
                    if ((receipt_PnodeCasted != null))
                    {
                        this._parent.Receipt_Pnode = receipt_PnodeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EnergyProfiles.Clear();
                this._parent.Delivery_Pnode = null;
                this._parent.Receipt_Pnode = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.EnergyProfiles.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Delivery_Pnode))
                {
                    return true;
                }
                if ((item == this._parent.Receipt_Pnode))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> energyProfilesEnumerator = this._parent.EnergyProfiles.GetEnumerator();
                try
                {
                    for (
                    ; energyProfilesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = energyProfilesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    energyProfilesEnumerator.Dispose();
                }
                if ((this._parent.Delivery_Pnode != null))
                {
                    array[arrayIndex] = this._parent.Delivery_Pnode;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Receipt_Pnode != null))
                {
                    array[arrayIndex] = this._parent.Receipt_Pnode;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IEnergyProfile energyProfileItem = item.As<IEnergyProfile>();
                if (((energyProfileItem != null) 
                            && this._parent.EnergyProfiles.Remove(energyProfileItem)))
                {
                    return true;
                }
                if ((this._parent.Delivery_Pnode == item))
                {
                    this._parent.Delivery_Pnode = null;
                    return true;
                }
                if ((this._parent.Receipt_Pnode == item))
                {
                    this._parent.Receipt_Pnode = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EnergyProfiles).Concat(this._parent.Delivery_Pnode).Concat(this._parent.Receipt_Pnode).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EnergyTransId property
        /// </summary>
        private sealed class EnergyTransIdProxy : ModelPropertyChange<ITransactionBid, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnergyTransIdProxy(ITransactionBid modelElement) : 
                    base(modelElement, "EnergyTransId")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.EnergyTransId;
                }
                set
                {
                    this.ModelElement.EnergyTransId = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Delivery_Pnode property
        /// </summary>
        private sealed class Delivery_PnodeProxy : ModelPropertyChange<ITransactionBid, IPnode>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Delivery_PnodeProxy(ITransactionBid modelElement) : 
                    base(modelElement, "Delivery_Pnode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPnode Value
            {
                get
                {
                    return this.ModelElement.Delivery_Pnode;
                }
                set
                {
                    this.ModelElement.Delivery_Pnode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Receipt_Pnode property
        /// </summary>
        private sealed class Receipt_PnodeProxy : ModelPropertyChange<ITransactionBid, IPnode>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Receipt_PnodeProxy(ITransactionBid modelElement) : 
                    base(modelElement, "Receipt_Pnode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPnode Value
            {
                get
                {
                    return this.ModelElement.Receipt_Pnode;
                }
                set
                {
                    this.ModelElement.Receipt_Pnode = value;
                }
            }
        }
    }
}

