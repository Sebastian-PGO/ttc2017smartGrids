using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the ViolationLimit class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "ViolationLimit")]
    [DebuggerDisplayAttribute("ViolationLimit {UUID}")]
    public partial class ViolationLimit : Limit, IViolationLimit, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Enforced property
        /// </summary>
        private bool _enforced;
        
        private static Lazy<ITypedElement> _enforcedAttribute = new Lazy<ITypedElement>(RetrieveEnforcedAttribute);
        
        private static Lazy<ITypedElement> _seasonReference = new Lazy<ITypedElement>(RetrieveSeasonReference);
        
        /// <summary>
        /// The backing field for the Season property
        /// </summary>
        private ISeason _season;
        
        private static Lazy<ITypedElement> _measurementReference = new Lazy<ITypedElement>(RetrieveMeasurementReference);
        
        /// <summary>
        /// The backing field for the Measurement property
        /// </summary>
        private IMeasurement _measurement;
        
        private static Lazy<ITypedElement> _organisationsReference = new Lazy<ITypedElement>(RetrieveOrganisationsReference);
        
        /// <summary>
        /// The backing field for the Organisations property
        /// </summary>
        private ViolationLimitOrganisationsCollection _organisations;
        
        private static Lazy<ITypedElement> _flowgateReference = new Lazy<ITypedElement>(RetrieveFlowgateReference);
        
        /// <summary>
        /// The backing field for the Flowgate property
        /// </summary>
        private IFlowgate _flowgate;
        
        private static IClass _classInstance;
        
        public ViolationLimit()
        {
            this._organisations = new ViolationLimitOrganisationsCollection(this);
            this._organisations.CollectionChanging += this.OrganisationsCollectionChanging;
            this._organisations.CollectionChanged += this.OrganisationsCollectionChanged;
        }
        
        /// <summary>
        /// The enforced property
        /// </summary>
        [XmlElementNameAttribute("enforced")]
        [XmlAttributeAttribute(true)]
        public virtual bool Enforced
        {
            get
            {
                return this._enforced;
            }
            set
            {
                if ((this._enforced != value))
                {
                    bool old = this._enforced;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEnforcedChanging(e);
                    this.OnPropertyChanging("Enforced", e, _enforcedAttribute);
                    this._enforced = value;
                    this.OnEnforcedChanged(e);
                    this.OnPropertyChanged("Enforced", e, _enforcedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Season property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ViolationLimits")]
        public virtual ISeason Season
        {
            get
            {
                return this._season;
            }
            set
            {
                if ((this._season != value))
                {
                    ISeason old = this._season;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSeasonChanging(e);
                    this.OnPropertyChanging("Season", e, _seasonReference);
                    this._season = value;
                    if ((old != null))
                    {
                        old.ViolationLimits.Remove(this);
                        old.Deleted -= this.OnResetSeason;
                    }
                    if ((value != null))
                    {
                        value.ViolationLimits.Add(this);
                        value.Deleted += this.OnResetSeason;
                    }
                    this.OnSeasonChanged(e);
                    this.OnPropertyChanged("Season", e, _seasonReference);
                }
            }
        }
        
        /// <summary>
        /// The Measurement property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ViolationLimits")]
        public virtual IMeasurement Measurement
        {
            get
            {
                return this._measurement;
            }
            set
            {
                if ((this._measurement != value))
                {
                    IMeasurement old = this._measurement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurementChanging(e);
                    this.OnPropertyChanging("Measurement", e, _measurementReference);
                    this._measurement = value;
                    if ((old != null))
                    {
                        old.ViolationLimits.Remove(this);
                        old.Deleted -= this.OnResetMeasurement;
                    }
                    if ((value != null))
                    {
                        value.ViolationLimits.Add(this);
                        value.Deleted += this.OnResetMeasurement;
                    }
                    this.OnMeasurementChanged(e);
                    this.OnPropertyChanged("Measurement", e, _measurementReference);
                }
            }
        }
        
        /// <summary>
        /// The Organisations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ViolationLimits")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpOrganisation> Organisations
        {
            get
            {
                return this._organisations;
            }
        }
        
        /// <summary>
        /// The Flowgate property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ViolationLimits")]
        public virtual IFlowgate Flowgate
        {
            get
            {
                return this._flowgate;
            }
            set
            {
                if ((this._flowgate != value))
                {
                    IFlowgate old = this._flowgate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFlowgateChanging(e);
                    this.OnPropertyChanging("Flowgate", e, _flowgateReference);
                    this._flowgate = value;
                    if ((old != null))
                    {
                        old.ViolationLimits.Remove(this);
                        old.Deleted -= this.OnResetFlowgate;
                    }
                    if ((value != null))
                    {
                        value.ViolationLimits.Add(this);
                        value.Deleted += this.OnResetFlowgate;
                    }
                    this.OnFlowgateChanged(e);
                    this.OnPropertyChanged("Flowgate", e, _flowgateReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ViolationLimitReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "ViolationLimit")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Enforced property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnforcedChanging;
        
        /// <summary>
        /// Gets fired when the Enforced property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnforcedChanged;
        
        /// <summary>
        /// Gets fired before the Season property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SeasonChanging;
        
        /// <summary>
        /// Gets fired when the Season property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SeasonChanged;
        
        /// <summary>
        /// Gets fired before the Measurement property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeasurementChanging;
        
        /// <summary>
        /// Gets fired when the Measurement property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeasurementChanged;
        
        /// <summary>
        /// Gets fired before the Flowgate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FlowgateChanging;
        
        /// <summary>
        /// Gets fired when the Flowgate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FlowgateChanged;
        
        private static ITypedElement RetrieveEnforcedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ViolationLimit.ClassInstance)).Resolve("enforced")));
        }
        
        /// <summary>
        /// Raises the EnforcedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnforcedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnforcedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnforcedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnforcedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnforcedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSeasonReference()
        {
            return ((ITypedElement)(((ModelElement)(ViolationLimit.ClassInstance)).Resolve("Season")));
        }
        
        /// <summary>
        /// Raises the SeasonChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSeasonChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SeasonChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SeasonChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSeasonChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SeasonChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Season property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSeason(object sender, System.EventArgs eventArgs)
        {
            this.Season = null;
        }
        
        private static ITypedElement RetrieveMeasurementReference()
        {
            return ((ITypedElement)(((ModelElement)(ViolationLimit.ClassInstance)).Resolve("Measurement")));
        }
        
        /// <summary>
        /// Raises the MeasurementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeasurementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeasurementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeasurementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Measurement property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeasurement(object sender, System.EventArgs eventArgs)
        {
            this.Measurement = null;
        }
        
        private static ITypedElement RetrieveOrganisationsReference()
        {
            return ((ITypedElement)(((ModelElement)(ViolationLimit.ClassInstance)).Resolve("Organisations")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Organisations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OrganisationsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Organisations", e, _organisationsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Organisations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OrganisationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Organisations", e, _organisationsReference);
        }
        
        private static ITypedElement RetrieveFlowgateReference()
        {
            return ((ITypedElement)(((ModelElement)(ViolationLimit.ClassInstance)).Resolve("Flowgate")));
        }
        
        /// <summary>
        /// Raises the FlowgateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFlowgateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FlowgateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FlowgateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFlowgateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FlowgateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Flowgate property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFlowgate(object sender, System.EventArgs eventArgs)
        {
            this.Flowgate = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ENFORCED"))
            {
                return this.Enforced;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ORGANISATIONS"))
            {
                return this._organisations;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SEASON"))
            {
                this.Season = ((ISeason)(value));
                return;
            }
            if ((feature == "MEASUREMENT"))
            {
                this.Measurement = ((IMeasurement)(value));
                return;
            }
            if ((feature == "FLOWGATE"))
            {
                this.Flowgate = ((IFlowgate)(value));
                return;
            }
            if ((feature == "ENFORCED"))
            {
                this.Enforced = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Season"))
            {
                return new SeasonProxy(this);
            }
            if ((attribute == "Measurement"))
            {
                return new MeasurementProxy(this);
            }
            if ((attribute == "Flowgate"))
            {
                return new FlowgateProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Season"))
            {
                return new SeasonProxy(this);
            }
            if ((reference == "Measurement"))
            {
                return new MeasurementProxy(this);
            }
            if ((reference == "Flowgate"))
            {
                return new FlowgateProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "ViolationLimit")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ViolationLimit class
        /// </summary>
        public class ViolationLimitReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ViolationLimit _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ViolationLimitReferencedElementsCollection(ViolationLimit parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Season != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Measurement != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Organisations.Count);
                    if ((this._parent.Flowgate != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SeasonChanged += this.PropagateValueChanges;
                this._parent.MeasurementChanged += this.PropagateValueChanges;
                this._parent.Organisations.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.FlowgateChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SeasonChanged -= this.PropagateValueChanges;
                this._parent.MeasurementChanged -= this.PropagateValueChanges;
                this._parent.Organisations.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.FlowgateChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Season == null))
                {
                    ISeason seasonCasted = item.As<ISeason>();
                    if ((seasonCasted != null))
                    {
                        this._parent.Season = seasonCasted;
                        return;
                    }
                }
                if ((this._parent.Measurement == null))
                {
                    IMeasurement measurementCasted = item.As<IMeasurement>();
                    if ((measurementCasted != null))
                    {
                        this._parent.Measurement = measurementCasted;
                        return;
                    }
                }
                IErpOrganisation organisationsCasted = item.As<IErpOrganisation>();
                if ((organisationsCasted != null))
                {
                    this._parent.Organisations.Add(organisationsCasted);
                }
                if ((this._parent.Flowgate == null))
                {
                    IFlowgate flowgateCasted = item.As<IFlowgate>();
                    if ((flowgateCasted != null))
                    {
                        this._parent.Flowgate = flowgateCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Season = null;
                this._parent.Measurement = null;
                this._parent.Organisations.Clear();
                this._parent.Flowgate = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Season))
                {
                    return true;
                }
                if ((item == this._parent.Measurement))
                {
                    return true;
                }
                if (this._parent.Organisations.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Flowgate))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Season != null))
                {
                    array[arrayIndex] = this._parent.Season;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Measurement != null))
                {
                    array[arrayIndex] = this._parent.Measurement;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> organisationsEnumerator = this._parent.Organisations.GetEnumerator();
                try
                {
                    for (
                    ; organisationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = organisationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    organisationsEnumerator.Dispose();
                }
                if ((this._parent.Flowgate != null))
                {
                    array[arrayIndex] = this._parent.Flowgate;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Season == item))
                {
                    this._parent.Season = null;
                    return true;
                }
                if ((this._parent.Measurement == item))
                {
                    this._parent.Measurement = null;
                    return true;
                }
                IErpOrganisation erpOrganisationItem = item.As<IErpOrganisation>();
                if (((erpOrganisationItem != null) 
                            && this._parent.Organisations.Remove(erpOrganisationItem)))
                {
                    return true;
                }
                if ((this._parent.Flowgate == item))
                {
                    this._parent.Flowgate = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Season).Concat(this._parent.Measurement).Concat(this._parent.Organisations).Concat(this._parent.Flowgate).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the enforced property
        /// </summary>
        private sealed class EnforcedProxy : ModelPropertyChange<IViolationLimit, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnforcedProxy(IViolationLimit modelElement) : 
                    base(modelElement, "enforced")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Enforced;
                }
                set
                {
                    this.ModelElement.Enforced = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Season property
        /// </summary>
        private sealed class SeasonProxy : ModelPropertyChange<IViolationLimit, ISeason>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SeasonProxy(IViolationLimit modelElement) : 
                    base(modelElement, "Season")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISeason Value
            {
                get
                {
                    return this.ModelElement.Season;
                }
                set
                {
                    this.ModelElement.Season = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Measurement property
        /// </summary>
        private sealed class MeasurementProxy : ModelPropertyChange<IViolationLimit, IMeasurement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeasurementProxy(IViolationLimit modelElement) : 
                    base(modelElement, "Measurement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeasurement Value
            {
                get
                {
                    return this.ModelElement.Measurement;
                }
                set
                {
                    this.ModelElement.Measurement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Flowgate property
        /// </summary>
        private sealed class FlowgateProxy : ModelPropertyChange<IViolationLimit, IFlowgate>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FlowgateProxy(IViolationLimit modelElement) : 
                    base(modelElement, "Flowgate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFlowgate Value
            {
                get
                {
                    return this.ModelElement.Flowgate;
                }
                set
                {
                    this.ModelElement.Flowgate = value;
                }
            }
        }
    }
}

