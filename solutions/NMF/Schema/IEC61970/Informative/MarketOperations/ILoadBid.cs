//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The public interface for LoadBid
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(LoadBid))]
    [XmlDefaultImplementationTypeAttribute(typeof(LoadBid))]
    public interface ILoadBid : IModelElement, IResourceBid
    {
        
        /// <summary>
        /// The minLoadReduction property
        /// </summary>
        float MinLoadReduction
        {
            get;
            set;
        }
        
        /// <summary>
        /// The dropRampRate property
        /// </summary>
        object DropRampRate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minLoadReductionInterval property
        /// </summary>
        float MinLoadReductionInterval
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minLoadReductionCost property
        /// </summary>
        float MinLoadReductionCost
        {
            get;
            set;
        }
        
        /// <summary>
        /// The pickUpRampRate property
        /// </summary>
        object PickUpRampRate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reqNoticeTime property
        /// </summary>
        float ReqNoticeTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minLoad property
        /// </summary>
        float MinLoad
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minTimeBetLoadRed property
        /// </summary>
        float MinTimeBetLoadRed
        {
            get;
            set;
        }
        
        /// <summary>
        /// The shutdownCost property
        /// </summary>
        float ShutdownCost
        {
            get;
            set;
        }
        
        /// <summary>
        /// The LoadReductionPriceCurve property
        /// </summary>
        ILoadReductionPriceCurve LoadReductionPriceCurve
        {
            get;
            set;
        }
        
        /// <summary>
        /// The RegisteredLoad property
        /// </summary>
        IRegisteredLoad RegisteredLoad
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the MinLoadReduction property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinLoadReductionChanging;
        
        /// <summary>
        /// Gets fired when the MinLoadReduction property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinLoadReductionChanged;
        
        /// <summary>
        /// Gets fired before the DropRampRate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DropRampRateChanging;
        
        /// <summary>
        /// Gets fired when the DropRampRate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DropRampRateChanged;
        
        /// <summary>
        /// Gets fired before the MinLoadReductionInterval property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinLoadReductionIntervalChanging;
        
        /// <summary>
        /// Gets fired when the MinLoadReductionInterval property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinLoadReductionIntervalChanged;
        
        /// <summary>
        /// Gets fired before the MinLoadReductionCost property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinLoadReductionCostChanging;
        
        /// <summary>
        /// Gets fired when the MinLoadReductionCost property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinLoadReductionCostChanged;
        
        /// <summary>
        /// Gets fired before the PickUpRampRate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PickUpRampRateChanging;
        
        /// <summary>
        /// Gets fired when the PickUpRampRate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PickUpRampRateChanged;
        
        /// <summary>
        /// Gets fired before the ReqNoticeTime property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReqNoticeTimeChanging;
        
        /// <summary>
        /// Gets fired when the ReqNoticeTime property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReqNoticeTimeChanged;
        
        /// <summary>
        /// Gets fired before the MinLoad property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinLoadChanging;
        
        /// <summary>
        /// Gets fired when the MinLoad property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinLoadChanged;
        
        /// <summary>
        /// Gets fired before the MinTimeBetLoadRed property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinTimeBetLoadRedChanging;
        
        /// <summary>
        /// Gets fired when the MinTimeBetLoadRed property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinTimeBetLoadRedChanged;
        
        /// <summary>
        /// Gets fired before the ShutdownCost property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ShutdownCostChanging;
        
        /// <summary>
        /// Gets fired when the ShutdownCost property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ShutdownCostChanged;
        
        /// <summary>
        /// Gets fired before the LoadReductionPriceCurve property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LoadReductionPriceCurveChanging;
        
        /// <summary>
        /// Gets fired when the LoadReductionPriceCurve property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LoadReductionPriceCurveChanged;
        
        /// <summary>
        /// Gets fired before the RegisteredLoad property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RegisteredLoadChanging;
        
        /// <summary>
        /// Gets fired when the RegisteredLoad property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RegisteredLoadChanged;
    }
}

