using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the UnitInitialConditions class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "UnitInitialConditions")]
    [DebuggerDisplayAttribute("UnitInitialConditions {UUID}")]
    public partial class UnitInitialConditions : IdentifiedObject, IUnitInitialConditions, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ResourceStatus property
        /// </summary>
        private int _resourceStatus;
        
        private static Lazy<ITypedElement> _resourceStatusAttribute = new Lazy<ITypedElement>(RetrieveResourceStatusAttribute);
        
        /// <summary>
        /// The backing field for the TimeInStatus property
        /// </summary>
        private float _timeInStatus;
        
        private static Lazy<ITypedElement> _timeInStatusAttribute = new Lazy<ITypedElement>(RetrieveTimeInStatusAttribute);
        
        /// <summary>
        /// The backing field for the ResourceMW property
        /// </summary>
        private float _resourceMW;
        
        private static Lazy<ITypedElement> _resourceMWAttribute = new Lazy<ITypedElement>(RetrieveResourceMWAttribute);
        
        /// <summary>
        /// The backing field for the CumEnergy property
        /// </summary>
        private object _cumEnergy;
        
        private static Lazy<ITypedElement> _cumEnergyAttribute = new Lazy<ITypedElement>(RetrieveCumEnergyAttribute);
        
        /// <summary>
        /// The backing field for the StatusDate property
        /// </summary>
        private DateTime _statusDate;
        
        private static Lazy<ITypedElement> _statusDateAttribute = new Lazy<ITypedElement>(RetrieveStatusDateAttribute);
        
        /// <summary>
        /// The backing field for the CumStatusChanges property
        /// </summary>
        private int _cumStatusChanges;
        
        private static Lazy<ITypedElement> _cumStatusChangesAttribute = new Lazy<ITypedElement>(RetrieveCumStatusChangesAttribute);
        
        private static Lazy<ITypedElement> _generatingUnitReference = new Lazy<ITypedElement>(RetrieveGeneratingUnitReference);
        
        /// <summary>
        /// The backing field for the GeneratingUnit property
        /// </summary>
        private IRegisteredGenerator _generatingUnit;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The resourceStatus property
        /// </summary>
        [XmlElementNameAttribute("resourceStatus")]
        [XmlAttributeAttribute(true)]
        public virtual int ResourceStatus
        {
            get
            {
                return this._resourceStatus;
            }
            set
            {
                if ((this._resourceStatus != value))
                {
                    int old = this._resourceStatus;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnResourceStatusChanging(e);
                    this.OnPropertyChanging("ResourceStatus", e, _resourceStatusAttribute);
                    this._resourceStatus = value;
                    this.OnResourceStatusChanged(e);
                    this.OnPropertyChanged("ResourceStatus", e, _resourceStatusAttribute);
                }
            }
        }
        
        /// <summary>
        /// The timeInStatus property
        /// </summary>
        [XmlElementNameAttribute("timeInStatus")]
        [XmlAttributeAttribute(true)]
        public virtual float TimeInStatus
        {
            get
            {
                return this._timeInStatus;
            }
            set
            {
                if ((this._timeInStatus != value))
                {
                    float old = this._timeInStatus;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeInStatusChanging(e);
                    this.OnPropertyChanging("TimeInStatus", e, _timeInStatusAttribute);
                    this._timeInStatus = value;
                    this.OnTimeInStatusChanged(e);
                    this.OnPropertyChanged("TimeInStatus", e, _timeInStatusAttribute);
                }
            }
        }
        
        /// <summary>
        /// The resourceMW property
        /// </summary>
        [XmlElementNameAttribute("resourceMW")]
        [XmlAttributeAttribute(true)]
        public virtual float ResourceMW
        {
            get
            {
                return this._resourceMW;
            }
            set
            {
                if ((this._resourceMW != value))
                {
                    float old = this._resourceMW;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnResourceMWChanging(e);
                    this.OnPropertyChanging("ResourceMW", e, _resourceMWAttribute);
                    this._resourceMW = value;
                    this.OnResourceMWChanged(e);
                    this.OnPropertyChanged("ResourceMW", e, _resourceMWAttribute);
                }
            }
        }
        
        /// <summary>
        /// The cumEnergy property
        /// </summary>
        [XmlElementNameAttribute("cumEnergy")]
        [XmlAttributeAttribute(true)]
        public virtual object CumEnergy
        {
            get
            {
                return this._cumEnergy;
            }
            set
            {
                if ((this._cumEnergy != value))
                {
                    object old = this._cumEnergy;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCumEnergyChanging(e);
                    this.OnPropertyChanging("CumEnergy", e, _cumEnergyAttribute);
                    this._cumEnergy = value;
                    this.OnCumEnergyChanged(e);
                    this.OnPropertyChanged("CumEnergy", e, _cumEnergyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The statusDate property
        /// </summary>
        [XmlElementNameAttribute("statusDate")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime StatusDate
        {
            get
            {
                return this._statusDate;
            }
            set
            {
                if ((this._statusDate != value))
                {
                    DateTime old = this._statusDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusDateChanging(e);
                    this.OnPropertyChanging("StatusDate", e, _statusDateAttribute);
                    this._statusDate = value;
                    this.OnStatusDateChanged(e);
                    this.OnPropertyChanged("StatusDate", e, _statusDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The cumStatusChanges property
        /// </summary>
        [XmlElementNameAttribute("cumStatusChanges")]
        [XmlAttributeAttribute(true)]
        public virtual int CumStatusChanges
        {
            get
            {
                return this._cumStatusChanges;
            }
            set
            {
                if ((this._cumStatusChanges != value))
                {
                    int old = this._cumStatusChanges;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCumStatusChangesChanging(e);
                    this.OnPropertyChanging("CumStatusChanges", e, _cumStatusChangesAttribute);
                    this._cumStatusChanges = value;
                    this.OnCumStatusChangesChanged(e);
                    this.OnPropertyChanged("CumStatusChanges", e, _cumStatusChangesAttribute);
                }
            }
        }
        
        /// <summary>
        /// The GeneratingUnit property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("UnitInitialConditions")]
        public virtual IRegisteredGenerator GeneratingUnit
        {
            get
            {
                return this._generatingUnit;
            }
            set
            {
                if ((this._generatingUnit != value))
                {
                    IRegisteredGenerator old = this._generatingUnit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGeneratingUnitChanging(e);
                    this.OnPropertyChanging("GeneratingUnit", e, _generatingUnitReference);
                    this._generatingUnit = value;
                    if ((old != null))
                    {
                        old.UnitInitialConditions.Remove(this);
                        old.Deleted -= this.OnResetGeneratingUnit;
                    }
                    if ((value != null))
                    {
                        value.UnitInitialConditions.Add(this);
                        value.Deleted += this.OnResetGeneratingUnit;
                    }
                    this.OnGeneratingUnitChanged(e);
                    this.OnPropertyChanged("GeneratingUnit", e, _generatingUnitReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new UnitInitialConditionsReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "UnitInitialConditions")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ResourceStatus property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ResourceStatusChanging;
        
        /// <summary>
        /// Gets fired when the ResourceStatus property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ResourceStatusChanged;
        
        /// <summary>
        /// Gets fired before the TimeInStatus property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeInStatusChanging;
        
        /// <summary>
        /// Gets fired when the TimeInStatus property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeInStatusChanged;
        
        /// <summary>
        /// Gets fired before the ResourceMW property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ResourceMWChanging;
        
        /// <summary>
        /// Gets fired when the ResourceMW property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ResourceMWChanged;
        
        /// <summary>
        /// Gets fired before the CumEnergy property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CumEnergyChanging;
        
        /// <summary>
        /// Gets fired when the CumEnergy property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CumEnergyChanged;
        
        /// <summary>
        /// Gets fired before the StatusDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusDateChanging;
        
        /// <summary>
        /// Gets fired when the StatusDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusDateChanged;
        
        /// <summary>
        /// Gets fired before the CumStatusChanges property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CumStatusChangesChanging;
        
        /// <summary>
        /// Gets fired when the CumStatusChanges property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CumStatusChangesChanged;
        
        /// <summary>
        /// Gets fired before the GeneratingUnit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GeneratingUnitChanging;
        
        /// <summary>
        /// Gets fired when the GeneratingUnit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GeneratingUnitChanged;
        
        private static ITypedElement RetrieveResourceStatusAttribute()
        {
            return ((ITypedElement)(((ModelElement)(UnitInitialConditions.ClassInstance)).Resolve("resourceStatus")));
        }
        
        /// <summary>
        /// Raises the ResourceStatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ResourceStatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ResourceStatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ResourceStatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTimeInStatusAttribute()
        {
            return ((ITypedElement)(((ModelElement)(UnitInitialConditions.ClassInstance)).Resolve("timeInStatus")));
        }
        
        /// <summary>
        /// Raises the TimeInStatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeInStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeInStatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeInStatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeInStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeInStatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveResourceMWAttribute()
        {
            return ((ITypedElement)(((ModelElement)(UnitInitialConditions.ClassInstance)).Resolve("resourceMW")));
        }
        
        /// <summary>
        /// Raises the ResourceMWChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceMWChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ResourceMWChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ResourceMWChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnResourceMWChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ResourceMWChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCumEnergyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(UnitInitialConditions.ClassInstance)).Resolve("cumEnergy")));
        }
        
        /// <summary>
        /// Raises the CumEnergyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCumEnergyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CumEnergyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CumEnergyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCumEnergyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CumEnergyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStatusDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(UnitInitialConditions.ClassInstance)).Resolve("statusDate")));
        }
        
        /// <summary>
        /// Raises the StatusDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCumStatusChangesAttribute()
        {
            return ((ITypedElement)(((ModelElement)(UnitInitialConditions.ClassInstance)).Resolve("cumStatusChanges")));
        }
        
        /// <summary>
        /// Raises the CumStatusChangesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCumStatusChangesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CumStatusChangesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CumStatusChangesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCumStatusChangesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CumStatusChangesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGeneratingUnitReference()
        {
            return ((ITypedElement)(((ModelElement)(UnitInitialConditions.ClassInstance)).Resolve("GeneratingUnit")));
        }
        
        /// <summary>
        /// Raises the GeneratingUnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGeneratingUnitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GeneratingUnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GeneratingUnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGeneratingUnitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GeneratingUnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the GeneratingUnit property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGeneratingUnit(object sender, System.EventArgs eventArgs)
        {
            this.GeneratingUnit = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "RESOURCESTATUS"))
            {
                return this.ResourceStatus;
            }
            if ((attribute == "TIMEINSTATUS"))
            {
                return this.TimeInStatus;
            }
            if ((attribute == "RESOURCEMW"))
            {
                return this.ResourceMW;
            }
            if ((attribute == "CUMENERGY"))
            {
                return this.CumEnergy;
            }
            if ((attribute == "STATUSDATE"))
            {
                return this.StatusDate;
            }
            if ((attribute == "CUMSTATUSCHANGES"))
            {
                return this.CumStatusChanges;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "GENERATINGUNIT"))
            {
                this.GeneratingUnit = ((IRegisteredGenerator)(value));
                return;
            }
            if ((feature == "RESOURCESTATUS"))
            {
                this.ResourceStatus = ((int)(value));
                return;
            }
            if ((feature == "TIMEINSTATUS"))
            {
                this.TimeInStatus = ((float)(value));
                return;
            }
            if ((feature == "RESOURCEMW"))
            {
                this.ResourceMW = ((float)(value));
                return;
            }
            if ((feature == "CUMENERGY"))
            {
                this.CumEnergy = ((object)(value));
                return;
            }
            if ((feature == "STATUSDATE"))
            {
                this.StatusDate = ((DateTime)(value));
                return;
            }
            if ((feature == "CUMSTATUSCHANGES"))
            {
                this.CumStatusChanges = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "GeneratingUnit"))
            {
                return new GeneratingUnitProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "GeneratingUnit"))
            {
                return new GeneratingUnitProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "UnitInitialConditions")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the UnitInitialConditions class
        /// </summary>
        public class UnitInitialConditionsReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private UnitInitialConditions _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public UnitInitialConditionsReferencedElementsCollection(UnitInitialConditions parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.GeneratingUnit != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.GeneratingUnitChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.GeneratingUnitChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.GeneratingUnit == null))
                {
                    IRegisteredGenerator generatingUnitCasted = item.As<IRegisteredGenerator>();
                    if ((generatingUnitCasted != null))
                    {
                        this._parent.GeneratingUnit = generatingUnitCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.GeneratingUnit = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.GeneratingUnit))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.GeneratingUnit != null))
                {
                    array[arrayIndex] = this._parent.GeneratingUnit;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.GeneratingUnit == item))
                {
                    this._parent.GeneratingUnit = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.GeneratingUnit).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the resourceStatus property
        /// </summary>
        private sealed class ResourceStatusProxy : ModelPropertyChange<IUnitInitialConditions, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ResourceStatusProxy(IUnitInitialConditions modelElement) : 
                    base(modelElement, "resourceStatus")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.ResourceStatus;
                }
                set
                {
                    this.ModelElement.ResourceStatus = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the timeInStatus property
        /// </summary>
        private sealed class TimeInStatusProxy : ModelPropertyChange<IUnitInitialConditions, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeInStatusProxy(IUnitInitialConditions modelElement) : 
                    base(modelElement, "timeInStatus")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TimeInStatus;
                }
                set
                {
                    this.ModelElement.TimeInStatus = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the resourceMW property
        /// </summary>
        private sealed class ResourceMWProxy : ModelPropertyChange<IUnitInitialConditions, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ResourceMWProxy(IUnitInitialConditions modelElement) : 
                    base(modelElement, "resourceMW")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ResourceMW;
                }
                set
                {
                    this.ModelElement.ResourceMW = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the cumEnergy property
        /// </summary>
        private sealed class CumEnergyProxy : ModelPropertyChange<IUnitInitialConditions, object>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CumEnergyProxy(IUnitInitialConditions modelElement) : 
                    base(modelElement, "cumEnergy")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override object Value
            {
                get
                {
                    return this.ModelElement.CumEnergy;
                }
                set
                {
                    this.ModelElement.CumEnergy = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the statusDate property
        /// </summary>
        private sealed class StatusDateProxy : ModelPropertyChange<IUnitInitialConditions, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusDateProxy(IUnitInitialConditions modelElement) : 
                    base(modelElement, "statusDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.StatusDate;
                }
                set
                {
                    this.ModelElement.StatusDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the cumStatusChanges property
        /// </summary>
        private sealed class CumStatusChangesProxy : ModelPropertyChange<IUnitInitialConditions, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CumStatusChangesProxy(IUnitInitialConditions modelElement) : 
                    base(modelElement, "cumStatusChanges")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.CumStatusChanges;
                }
                set
                {
                    this.ModelElement.CumStatusChanges = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the GeneratingUnit property
        /// </summary>
        private sealed class GeneratingUnitProxy : ModelPropertyChange<IUnitInitialConditions, IRegisteredGenerator>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GeneratingUnitProxy(IUnitInitialConditions modelElement) : 
                    base(modelElement, "GeneratingUnit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRegisteredGenerator Value
            {
                get
                {
                    return this.ModelElement.GeneratingUnit;
                }
                set
                {
                    this.ModelElement.GeneratingUnit = value;
                }
            }
        }
    }
}

