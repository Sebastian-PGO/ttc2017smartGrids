using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The public interface for BilateralTransaction
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(BilateralTransaction))]
    [XmlDefaultImplementationTypeAttribute(typeof(BilateralTransaction))]
    public interface IBilateralTransaction : IModelElement, IElement
    {
        
        /// <summary>
        /// The purchaseTimeMax property
        /// </summary>
        int PurchaseTimeMax
        {
            get;
            set;
        }
        
        /// <summary>
        /// The purchaseTimeMin property
        /// </summary>
        int PurchaseTimeMin
        {
            get;
            set;
        }
        
        /// <summary>
        /// The curtailTimeMax property
        /// </summary>
        int CurtailTimeMax
        {
            get;
            set;
        }
        
        /// <summary>
        /// The curtailTimeMin property
        /// </summary>
        int CurtailTimeMin
        {
            get;
            set;
        }
        
        /// <summary>
        /// The totalTranChargeMax property
        /// </summary>
        float TotalTranChargeMax
        {
            get;
            set;
        }
        
        /// <summary>
        /// The transactionType property
        /// </summary>
        string TransactionType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The marketType property
        /// </summary>
        string MarketType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The scope property
        /// </summary>
        string Scope
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the PurchaseTimeMax property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PurchaseTimeMaxChanging;
        
        /// <summary>
        /// Gets fired when the PurchaseTimeMax property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PurchaseTimeMaxChanged;
        
        /// <summary>
        /// Gets fired before the PurchaseTimeMin property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PurchaseTimeMinChanging;
        
        /// <summary>
        /// Gets fired when the PurchaseTimeMin property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PurchaseTimeMinChanged;
        
        /// <summary>
        /// Gets fired before the CurtailTimeMax property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CurtailTimeMaxChanging;
        
        /// <summary>
        /// Gets fired when the CurtailTimeMax property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CurtailTimeMaxChanged;
        
        /// <summary>
        /// Gets fired before the CurtailTimeMin property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CurtailTimeMinChanging;
        
        /// <summary>
        /// Gets fired when the CurtailTimeMin property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CurtailTimeMinChanged;
        
        /// <summary>
        /// Gets fired before the TotalTranChargeMax property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TotalTranChargeMaxChanging;
        
        /// <summary>
        /// Gets fired when the TotalTranChargeMax property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TotalTranChargeMaxChanged;
        
        /// <summary>
        /// Gets fired before the TransactionType property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TransactionTypeChanging;
        
        /// <summary>
        /// Gets fired when the TransactionType property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TransactionTypeChanged;
        
        /// <summary>
        /// Gets fired before the MarketType property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MarketTypeChanging;
        
        /// <summary>
        /// Gets fired when the MarketType property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MarketTypeChanged;
        
        /// <summary>
        /// Gets fired before the Scope property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ScopeChanging;
        
        /// <summary>
        /// Gets fired when the Scope property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ScopeChanged;
    }
}

