using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Contingency;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations
{
    
    
    /// <summary>
    /// The default implementation of the Pnode class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#MarketOperations")]
    [XmlNamespacePrefixAttribute("cimMarketOperations")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
        "Pnode")]
    [DebuggerDisplayAttribute("Pnode {UUID}")]
    public partial class Pnode : IdentifiedObject, IPnode, IModelElement
    {
        
        /// <summary>
        /// The backing field for the BeginPeriod property
        /// </summary>
        private DateTime _beginPeriod;
        
        private static Lazy<ITypedElement> _beginPeriodAttribute = new Lazy<ITypedElement>(RetrieveBeginPeriodAttribute);
        
        /// <summary>
        /// The backing field for the Type property
        /// </summary>
        private string _type;
        
        private static Lazy<ITypedElement> _typeAttribute = new Lazy<ITypedElement>(RetrieveTypeAttribute);
        
        /// <summary>
        /// The backing field for the IsPublic property
        /// </summary>
        private bool _isPublic;
        
        private static Lazy<ITypedElement> _isPublicAttribute = new Lazy<ITypedElement>(RetrieveIsPublicAttribute);
        
        /// <summary>
        /// The backing field for the EndPeriod property
        /// </summary>
        private DateTime _endPeriod;
        
        private static Lazy<ITypedElement> _endPeriodAttribute = new Lazy<ITypedElement>(RetrieveEndPeriodAttribute);
        
        /// <summary>
        /// The backing field for the Usage property
        /// </summary>
        private string _usage;
        
        private static Lazy<ITypedElement> _usageAttribute = new Lazy<ITypedElement>(RetrieveUsageAttribute);
        
        private static Lazy<ITypedElement> _receiptTransactionBidsReference = new Lazy<ITypedElement>(RetrieveReceiptTransactionBidsReference);
        
        /// <summary>
        /// The backing field for the ReceiptTransactionBids property
        /// </summary>
        private PnodeReceiptTransactionBidsCollection _receiptTransactionBids;
        
        private static Lazy<ITypedElement> _rTOReference = new Lazy<ITypedElement>(RetrieveRTOReference);
        
        /// <summary>
        /// The backing field for the RTO property
        /// </summary>
        private IRTO _rTO;
        
        private static Lazy<ITypedElement> _registeredResourcesReference = new Lazy<ITypedElement>(RetrieveRegisteredResourcesReference);
        
        /// <summary>
        /// The backing field for the RegisteredResources property
        /// </summary>
        private PnodeRegisteredResourcesCollection _registeredResources;
        
        private static Lazy<ITypedElement> _pnodeClearingReference = new Lazy<ITypedElement>(RetrievePnodeClearingReference);
        
        /// <summary>
        /// The backing field for the PnodeClearing property
        /// </summary>
        private IPnodeClearing _pnodeClearing;
        
        private static Lazy<ITypedElement> _deliveryTransactionBidsReference = new Lazy<ITypedElement>(RetrieveDeliveryTransactionBidsReference);
        
        /// <summary>
        /// The backing field for the DeliveryTransactionBids property
        /// </summary>
        private PnodeDeliveryTransactionBidsCollection _deliveryTransactionBids;
        
        private static Lazy<ITypedElement> _connectivityNodeReference = new Lazy<ITypedElement>(RetrieveConnectivityNodeReference);
        
        /// <summary>
        /// The backing field for the ConnectivityNode property
        /// </summary>
        private IConnectivityNode _connectivityNode;
        
        private static Lazy<ITypedElement> _fTRsReference = new Lazy<ITypedElement>(RetrieveFTRsReference);
        
        /// <summary>
        /// The backing field for the FTRs property
        /// </summary>
        private PnodeFTRsCollection _fTRs;
        
        private static Lazy<ITypedElement> _measurementsReference = new Lazy<ITypedElement>(RetrieveMeasurementsReference);
        
        /// <summary>
        /// The backing field for the Measurements property
        /// </summary>
        private PnodeMeasurementsCollection _measurements;
        
        private static IClass _classInstance;
        
        public Pnode()
        {
            this._receiptTransactionBids = new PnodeReceiptTransactionBidsCollection(this);
            this._receiptTransactionBids.CollectionChanging += this.ReceiptTransactionBidsCollectionChanging;
            this._receiptTransactionBids.CollectionChanged += this.ReceiptTransactionBidsCollectionChanged;
            this._registeredResources = new PnodeRegisteredResourcesCollection(this);
            this._registeredResources.CollectionChanging += this.RegisteredResourcesCollectionChanging;
            this._registeredResources.CollectionChanged += this.RegisteredResourcesCollectionChanged;
            this._deliveryTransactionBids = new PnodeDeliveryTransactionBidsCollection(this);
            this._deliveryTransactionBids.CollectionChanging += this.DeliveryTransactionBidsCollectionChanging;
            this._deliveryTransactionBids.CollectionChanged += this.DeliveryTransactionBidsCollectionChanged;
            this._fTRs = new PnodeFTRsCollection(this);
            this._fTRs.CollectionChanging += this.FTRsCollectionChanging;
            this._fTRs.CollectionChanged += this.FTRsCollectionChanged;
            this._measurements = new PnodeMeasurementsCollection(this);
            this._measurements.CollectionChanging += this.MeasurementsCollectionChanging;
            this._measurements.CollectionChanged += this.MeasurementsCollectionChanged;
        }
        
        /// <summary>
        /// The beginPeriod property
        /// </summary>
        [XmlElementNameAttribute("beginPeriod")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime BeginPeriod
        {
            get
            {
                return this._beginPeriod;
            }
            set
            {
                if ((this._beginPeriod != value))
                {
                    DateTime old = this._beginPeriod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBeginPeriodChanging(e);
                    this.OnPropertyChanging("BeginPeriod", e, _beginPeriodAttribute);
                    this._beginPeriod = value;
                    this.OnBeginPeriodChanged(e);
                    this.OnPropertyChanged("BeginPeriod", e, _beginPeriodAttribute);
                }
            }
        }
        
        /// <summary>
        /// The type property
        /// </summary>
        [XmlElementNameAttribute("type")]
        [XmlAttributeAttribute(true)]
        public virtual string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    string old = this._type;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeChanging(e);
                    this.OnPropertyChanging("Type", e, _typeAttribute);
                    this._type = value;
                    this.OnTypeChanged(e);
                    this.OnPropertyChanged("Type", e, _typeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The isPublic property
        /// </summary>
        [XmlElementNameAttribute("isPublic")]
        [XmlAttributeAttribute(true)]
        public virtual bool IsPublic
        {
            get
            {
                return this._isPublic;
            }
            set
            {
                if ((this._isPublic != value))
                {
                    bool old = this._isPublic;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsPublicChanging(e);
                    this.OnPropertyChanging("IsPublic", e, _isPublicAttribute);
                    this._isPublic = value;
                    this.OnIsPublicChanged(e);
                    this.OnPropertyChanged("IsPublic", e, _isPublicAttribute);
                }
            }
        }
        
        /// <summary>
        /// The endPeriod property
        /// </summary>
        [XmlElementNameAttribute("endPeriod")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime EndPeriod
        {
            get
            {
                return this._endPeriod;
            }
            set
            {
                if ((this._endPeriod != value))
                {
                    DateTime old = this._endPeriod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEndPeriodChanging(e);
                    this.OnPropertyChanging("EndPeriod", e, _endPeriodAttribute);
                    this._endPeriod = value;
                    this.OnEndPeriodChanged(e);
                    this.OnPropertyChanged("EndPeriod", e, _endPeriodAttribute);
                }
            }
        }
        
        /// <summary>
        /// The usage property
        /// </summary>
        [XmlElementNameAttribute("usage")]
        [XmlAttributeAttribute(true)]
        public virtual string Usage
        {
            get
            {
                return this._usage;
            }
            set
            {
                if ((this._usage != value))
                {
                    string old = this._usage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUsageChanging(e);
                    this.OnPropertyChanging("Usage", e, _usageAttribute);
                    this._usage = value;
                    this.OnUsageChanged(e);
                    this.OnPropertyChanged("Usage", e, _usageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ReceiptTransactionBids property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Receipt_Pnode")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransactionBid> ReceiptTransactionBids
        {
            get
            {
                return this._receiptTransactionBids;
            }
        }
        
        /// <summary>
        /// The RTO property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Pnodes")]
        public virtual IRTO RTO
        {
            get
            {
                return this._rTO;
            }
            set
            {
                if ((this._rTO != value))
                {
                    IRTO old = this._rTO;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRTOChanging(e);
                    this.OnPropertyChanging("RTO", e, _rTOReference);
                    this._rTO = value;
                    if ((old != null))
                    {
                        old.Pnodes.Remove(this);
                        old.Deleted -= this.OnResetRTO;
                    }
                    if ((value != null))
                    {
                        value.Pnodes.Add(this);
                        value.Deleted += this.OnResetRTO;
                    }
                    this.OnRTOChanged(e);
                    this.OnPropertyChanged("RTO", e, _rTOReference);
                }
            }
        }
        
        /// <summary>
        /// The RegisteredResources property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Pnode")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IRegisteredResource> RegisteredResources
        {
            get
            {
                return this._registeredResources;
            }
        }
        
        /// <summary>
        /// The PnodeClearing property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Pnode")]
        public virtual IPnodeClearing PnodeClearing
        {
            get
            {
                return this._pnodeClearing;
            }
            set
            {
                if ((this._pnodeClearing != value))
                {
                    IPnodeClearing old = this._pnodeClearing;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPnodeClearingChanging(e);
                    this.OnPropertyChanging("PnodeClearing", e, _pnodeClearingReference);
                    this._pnodeClearing = value;
                    if ((old != null))
                    {
                        old.Pnode = null;
                        old.Deleted -= this.OnResetPnodeClearing;
                    }
                    if ((value != null))
                    {
                        value.Pnode = this;
                        value.Deleted += this.OnResetPnodeClearing;
                    }
                    this.OnPnodeClearingChanged(e);
                    this.OnPropertyChanged("PnodeClearing", e, _pnodeClearingReference);
                }
            }
        }
        
        /// <summary>
        /// The DeliveryTransactionBids property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Delivery_Pnode")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransactionBid> DeliveryTransactionBids
        {
            get
            {
                return this._deliveryTransactionBids;
            }
        }
        
        /// <summary>
        /// The ConnectivityNode property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Pnode")]
        public virtual IConnectivityNode ConnectivityNode
        {
            get
            {
                return this._connectivityNode;
            }
            set
            {
                if ((this._connectivityNode != value))
                {
                    IConnectivityNode old = this._connectivityNode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConnectivityNodeChanging(e);
                    this.OnPropertyChanging("ConnectivityNode", e, _connectivityNodeReference);
                    this._connectivityNode = value;
                    if ((old != null))
                    {
                        old.Pnode = null;
                        old.Deleted -= this.OnResetConnectivityNode;
                    }
                    if ((value != null))
                    {
                        value.Pnode = this;
                        value.Deleted += this.OnResetConnectivityNode;
                    }
                    this.OnConnectivityNodeChanged(e);
                    this.OnPropertyChanged("ConnectivityNode", e, _connectivityNodeReference);
                }
            }
        }
        
        /// <summary>
        /// The FTRs property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Pnodes")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IFTR> FTRs
        {
            get
            {
                return this._fTRs;
            }
        }
        
        /// <summary>
        /// The Measurements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Pnode")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMeasurement> Measurements
        {
            get
            {
                return this._measurements;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PnodeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                            "Pnode")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the BeginPeriod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BeginPeriodChanging;
        
        /// <summary>
        /// Gets fired when the BeginPeriod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BeginPeriodChanged;
        
        /// <summary>
        /// Gets fired before the Type property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanging;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanged;
        
        /// <summary>
        /// Gets fired before the IsPublic property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsPublicChanging;
        
        /// <summary>
        /// Gets fired when the IsPublic property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsPublicChanged;
        
        /// <summary>
        /// Gets fired before the EndPeriod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EndPeriodChanging;
        
        /// <summary>
        /// Gets fired when the EndPeriod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EndPeriodChanged;
        
        /// <summary>
        /// Gets fired before the Usage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UsageChanging;
        
        /// <summary>
        /// Gets fired when the Usage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UsageChanged;
        
        /// <summary>
        /// Gets fired before the RTO property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RTOChanging;
        
        /// <summary>
        /// Gets fired when the RTO property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RTOChanged;
        
        /// <summary>
        /// Gets fired before the PnodeClearing property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PnodeClearingChanging;
        
        /// <summary>
        /// Gets fired when the PnodeClearing property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PnodeClearingChanged;
        
        /// <summary>
        /// Gets fired before the ConnectivityNode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConnectivityNodeChanging;
        
        /// <summary>
        /// Gets fired when the ConnectivityNode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConnectivityNodeChanged;
        
        private static ITypedElement RetrieveBeginPeriodAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Pnode.ClassInstance)).Resolve("beginPeriod")));
        }
        
        /// <summary>
        /// Raises the BeginPeriodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBeginPeriodChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BeginPeriodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BeginPeriodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBeginPeriodChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BeginPeriodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Pnode.ClassInstance)).Resolve("type")));
        }
        
        /// <summary>
        /// Raises the TypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIsPublicAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Pnode.ClassInstance)).Resolve("isPublic")));
        }
        
        /// <summary>
        /// Raises the IsPublicChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsPublicChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsPublicChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsPublicChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsPublicChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsPublicChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEndPeriodAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Pnode.ClassInstance)).Resolve("endPeriod")));
        }
        
        /// <summary>
        /// Raises the EndPeriodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEndPeriodChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EndPeriodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EndPeriodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEndPeriodChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EndPeriodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUsageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Pnode.ClassInstance)).Resolve("usage")));
        }
        
        /// <summary>
        /// Raises the UsageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUsageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UsageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UsageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUsageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UsageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReceiptTransactionBidsReference()
        {
            return ((ITypedElement)(((ModelElement)(Pnode.ClassInstance)).Resolve("ReceiptTransactionBids")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ReceiptTransactionBids property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReceiptTransactionBidsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ReceiptTransactionBids", e, _receiptTransactionBidsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ReceiptTransactionBids property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReceiptTransactionBidsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ReceiptTransactionBids", e, _receiptTransactionBidsReference);
        }
        
        private static ITypedElement RetrieveRTOReference()
        {
            return ((ITypedElement)(((ModelElement)(Pnode.ClassInstance)).Resolve("RTO")));
        }
        
        /// <summary>
        /// Raises the RTOChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRTOChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RTOChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RTOChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRTOChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RTOChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RTO property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRTO(object sender, System.EventArgs eventArgs)
        {
            this.RTO = null;
        }
        
        private static ITypedElement RetrieveRegisteredResourcesReference()
        {
            return ((ITypedElement)(((ModelElement)(Pnode.ClassInstance)).Resolve("RegisteredResources")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RegisteredResources property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RegisteredResourcesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("RegisteredResources", e, _registeredResourcesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RegisteredResources property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RegisteredResourcesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RegisteredResources", e, _registeredResourcesReference);
        }
        
        private static ITypedElement RetrievePnodeClearingReference()
        {
            return ((ITypedElement)(((ModelElement)(Pnode.ClassInstance)).Resolve("PnodeClearing")));
        }
        
        /// <summary>
        /// Raises the PnodeClearingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPnodeClearingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PnodeClearingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PnodeClearingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPnodeClearingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PnodeClearingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PnodeClearing property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPnodeClearing(object sender, System.EventArgs eventArgs)
        {
            this.PnodeClearing = null;
        }
        
        private static ITypedElement RetrieveDeliveryTransactionBidsReference()
        {
            return ((ITypedElement)(((ModelElement)(Pnode.ClassInstance)).Resolve("DeliveryTransactionBids")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DeliveryTransactionBids property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DeliveryTransactionBidsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("DeliveryTransactionBids", e, _deliveryTransactionBidsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DeliveryTransactionBids property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DeliveryTransactionBidsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DeliveryTransactionBids", e, _deliveryTransactionBidsReference);
        }
        
        private static ITypedElement RetrieveConnectivityNodeReference()
        {
            return ((ITypedElement)(((ModelElement)(Pnode.ClassInstance)).Resolve("ConnectivityNode")));
        }
        
        /// <summary>
        /// Raises the ConnectivityNodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConnectivityNodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConnectivityNodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConnectivityNodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConnectivityNodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConnectivityNodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ConnectivityNode property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetConnectivityNode(object sender, System.EventArgs eventArgs)
        {
            this.ConnectivityNode = null;
        }
        
        private static ITypedElement RetrieveFTRsReference()
        {
            return ((ITypedElement)(((ModelElement)(Pnode.ClassInstance)).Resolve("FTRs")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the FTRs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FTRsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("FTRs", e, _fTRsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the FTRs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FTRsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("FTRs", e, _fTRsReference);
        }
        
        private static ITypedElement RetrieveMeasurementsReference()
        {
            return ((ITypedElement)(((ModelElement)(Pnode.ClassInstance)).Resolve("Measurements")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Measurements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeasurementsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Measurements", e, _measurementsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Measurements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeasurementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Measurements", e, _measurementsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "BEGINPERIOD"))
            {
                return this.BeginPeriod;
            }
            if ((attribute == "TYPE"))
            {
                return this.Type;
            }
            if ((attribute == "ISPUBLIC"))
            {
                return this.IsPublic;
            }
            if ((attribute == "ENDPERIOD"))
            {
                return this.EndPeriod;
            }
            if ((attribute == "USAGE"))
            {
                return this.Usage;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "RECEIPTTRANSACTIONBIDS"))
            {
                return this._receiptTransactionBids;
            }
            if ((feature == "REGISTEREDRESOURCES"))
            {
                return this._registeredResources;
            }
            if ((feature == "DELIVERYTRANSACTIONBIDS"))
            {
                return this._deliveryTransactionBids;
            }
            if ((feature == "FTRS"))
            {
                return this._fTRs;
            }
            if ((feature == "MEASUREMENTS"))
            {
                return this._measurements;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RTO"))
            {
                this.RTO = ((IRTO)(value));
                return;
            }
            if ((feature == "PNODECLEARING"))
            {
                this.PnodeClearing = ((IPnodeClearing)(value));
                return;
            }
            if ((feature == "CONNECTIVITYNODE"))
            {
                this.ConnectivityNode = ((IConnectivityNode)(value));
                return;
            }
            if ((feature == "BEGINPERIOD"))
            {
                this.BeginPeriod = ((DateTime)(value));
                return;
            }
            if ((feature == "TYPE"))
            {
                this.Type = ((string)(value));
                return;
            }
            if ((feature == "ISPUBLIC"))
            {
                this.IsPublic = ((bool)(value));
                return;
            }
            if ((feature == "ENDPERIOD"))
            {
                this.EndPeriod = ((DateTime)(value));
                return;
            }
            if ((feature == "USAGE"))
            {
                this.Usage = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "RTO"))
            {
                return new RTOProxy(this);
            }
            if ((attribute == "PnodeClearing"))
            {
                return new PnodeClearingProxy(this);
            }
            if ((attribute == "ConnectivityNode"))
            {
                return new ConnectivityNodeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "RTO"))
            {
                return new RTOProxy(this);
            }
            if ((reference == "PnodeClearing"))
            {
                return new PnodeClearingProxy(this);
            }
            if ((reference == "ConnectivityNode"))
            {
                return new ConnectivityNodeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/MarketOperations/" +
                        "Pnode")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Pnode class
        /// </summary>
        public class PnodeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Pnode _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PnodeReferencedElementsCollection(Pnode parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ReceiptTransactionBids.Count);
                    if ((this._parent.RTO != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.RegisteredResources.Count);
                    if ((this._parent.PnodeClearing != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.DeliveryTransactionBids.Count);
                    if ((this._parent.ConnectivityNode != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.FTRs.Count);
                    count = (count + this._parent.Measurements.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ReceiptTransactionBids.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RTOChanged += this.PropagateValueChanges;
                this._parent.RegisteredResources.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PnodeClearingChanged += this.PropagateValueChanges;
                this._parent.DeliveryTransactionBids.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ConnectivityNodeChanged += this.PropagateValueChanges;
                this._parent.FTRs.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Measurements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ReceiptTransactionBids.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RTOChanged -= this.PropagateValueChanges;
                this._parent.RegisteredResources.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PnodeClearingChanged -= this.PropagateValueChanges;
                this._parent.DeliveryTransactionBids.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ConnectivityNodeChanged -= this.PropagateValueChanges;
                this._parent.FTRs.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Measurements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITransactionBid receiptTransactionBidsCasted = item.As<ITransactionBid>();
                if ((receiptTransactionBidsCasted != null))
                {
                    this._parent.ReceiptTransactionBids.Add(receiptTransactionBidsCasted);
                }
                if ((this._parent.RTO == null))
                {
                    IRTO rTOCasted = item.As<IRTO>();
                    if ((rTOCasted != null))
                    {
                        this._parent.RTO = rTOCasted;
                        return;
                    }
                }
                IRegisteredResource registeredResourcesCasted = item.As<IRegisteredResource>();
                if ((registeredResourcesCasted != null))
                {
                    this._parent.RegisteredResources.Add(registeredResourcesCasted);
                }
                if ((this._parent.PnodeClearing == null))
                {
                    IPnodeClearing pnodeClearingCasted = item.As<IPnodeClearing>();
                    if ((pnodeClearingCasted != null))
                    {
                        this._parent.PnodeClearing = pnodeClearingCasted;
                        return;
                    }
                }
                ITransactionBid deliveryTransactionBidsCasted = item.As<ITransactionBid>();
                if ((deliveryTransactionBidsCasted != null))
                {
                    this._parent.DeliveryTransactionBids.Add(deliveryTransactionBidsCasted);
                }
                if ((this._parent.ConnectivityNode == null))
                {
                    IConnectivityNode connectivityNodeCasted = item.As<IConnectivityNode>();
                    if ((connectivityNodeCasted != null))
                    {
                        this._parent.ConnectivityNode = connectivityNodeCasted;
                        return;
                    }
                }
                IFTR fTRsCasted = item.As<IFTR>();
                if ((fTRsCasted != null))
                {
                    this._parent.FTRs.Add(fTRsCasted);
                }
                IMeasurement measurementsCasted = item.As<IMeasurement>();
                if ((measurementsCasted != null))
                {
                    this._parent.Measurements.Add(measurementsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ReceiptTransactionBids.Clear();
                this._parent.RTO = null;
                this._parent.RegisteredResources.Clear();
                this._parent.PnodeClearing = null;
                this._parent.DeliveryTransactionBids.Clear();
                this._parent.ConnectivityNode = null;
                this._parent.FTRs.Clear();
                this._parent.Measurements.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ReceiptTransactionBids.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.RTO))
                {
                    return true;
                }
                if (this._parent.RegisteredResources.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.PnodeClearing))
                {
                    return true;
                }
                if (this._parent.DeliveryTransactionBids.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ConnectivityNode))
                {
                    return true;
                }
                if (this._parent.FTRs.Contains(item))
                {
                    return true;
                }
                if (this._parent.Measurements.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> receiptTransactionBidsEnumerator = this._parent.ReceiptTransactionBids.GetEnumerator();
                try
                {
                    for (
                    ; receiptTransactionBidsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = receiptTransactionBidsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    receiptTransactionBidsEnumerator.Dispose();
                }
                if ((this._parent.RTO != null))
                {
                    array[arrayIndex] = this._parent.RTO;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> registeredResourcesEnumerator = this._parent.RegisteredResources.GetEnumerator();
                try
                {
                    for (
                    ; registeredResourcesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = registeredResourcesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    registeredResourcesEnumerator.Dispose();
                }
                if ((this._parent.PnodeClearing != null))
                {
                    array[arrayIndex] = this._parent.PnodeClearing;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> deliveryTransactionBidsEnumerator = this._parent.DeliveryTransactionBids.GetEnumerator();
                try
                {
                    for (
                    ; deliveryTransactionBidsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = deliveryTransactionBidsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    deliveryTransactionBidsEnumerator.Dispose();
                }
                if ((this._parent.ConnectivityNode != null))
                {
                    array[arrayIndex] = this._parent.ConnectivityNode;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> fTRsEnumerator = this._parent.FTRs.GetEnumerator();
                try
                {
                    for (
                    ; fTRsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = fTRsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    fTRsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> measurementsEnumerator = this._parent.Measurements.GetEnumerator();
                try
                {
                    for (
                    ; measurementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = measurementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    measurementsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITransactionBid transactionBidItem = item.As<ITransactionBid>();
                if (((transactionBidItem != null) 
                            && this._parent.ReceiptTransactionBids.Remove(transactionBidItem)))
                {
                    return true;
                }
                if ((this._parent.RTO == item))
                {
                    this._parent.RTO = null;
                    return true;
                }
                IRegisteredResource registeredResourceItem = item.As<IRegisteredResource>();
                if (((registeredResourceItem != null) 
                            && this._parent.RegisteredResources.Remove(registeredResourceItem)))
                {
                    return true;
                }
                if ((this._parent.PnodeClearing == item))
                {
                    this._parent.PnodeClearing = null;
                    return true;
                }
                if (((transactionBidItem != null) 
                            && this._parent.DeliveryTransactionBids.Remove(transactionBidItem)))
                {
                    return true;
                }
                if ((this._parent.ConnectivityNode == item))
                {
                    this._parent.ConnectivityNode = null;
                    return true;
                }
                IFTR fTRItem = item.As<IFTR>();
                if (((fTRItem != null) 
                            && this._parent.FTRs.Remove(fTRItem)))
                {
                    return true;
                }
                IMeasurement measurementItem = item.As<IMeasurement>();
                if (((measurementItem != null) 
                            && this._parent.Measurements.Remove(measurementItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ReceiptTransactionBids).Concat(this._parent.RTO).Concat(this._parent.RegisteredResources).Concat(this._parent.PnodeClearing).Concat(this._parent.DeliveryTransactionBids).Concat(this._parent.ConnectivityNode).Concat(this._parent.FTRs).Concat(this._parent.Measurements).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the beginPeriod property
        /// </summary>
        private sealed class BeginPeriodProxy : ModelPropertyChange<IPnode, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BeginPeriodProxy(IPnode modelElement) : 
                    base(modelElement, "beginPeriod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.BeginPeriod;
                }
                set
                {
                    this.ModelElement.BeginPeriod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<IPnode, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(IPnode modelElement) : 
                    base(modelElement, "type")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isPublic property
        /// </summary>
        private sealed class IsPublicProxy : ModelPropertyChange<IPnode, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsPublicProxy(IPnode modelElement) : 
                    base(modelElement, "isPublic")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsPublic;
                }
                set
                {
                    this.ModelElement.IsPublic = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the endPeriod property
        /// </summary>
        private sealed class EndPeriodProxy : ModelPropertyChange<IPnode, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EndPeriodProxy(IPnode modelElement) : 
                    base(modelElement, "endPeriod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.EndPeriod;
                }
                set
                {
                    this.ModelElement.EndPeriod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the usage property
        /// </summary>
        private sealed class UsageProxy : ModelPropertyChange<IPnode, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UsageProxy(IPnode modelElement) : 
                    base(modelElement, "usage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Usage;
                }
                set
                {
                    this.ModelElement.Usage = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RTO property
        /// </summary>
        private sealed class RTOProxy : ModelPropertyChange<IPnode, IRTO>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RTOProxy(IPnode modelElement) : 
                    base(modelElement, "RTO")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRTO Value
            {
                get
                {
                    return this.ModelElement.RTO;
                }
                set
                {
                    this.ModelElement.RTO = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PnodeClearing property
        /// </summary>
        private sealed class PnodeClearingProxy : ModelPropertyChange<IPnode, IPnodeClearing>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PnodeClearingProxy(IPnode modelElement) : 
                    base(modelElement, "PnodeClearing")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPnodeClearing Value
            {
                get
                {
                    return this.ModelElement.PnodeClearing;
                }
                set
                {
                    this.ModelElement.PnodeClearing = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ConnectivityNode property
        /// </summary>
        private sealed class ConnectivityNodeProxy : ModelPropertyChange<IPnode, IConnectivityNode>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConnectivityNodeProxy(IPnode modelElement) : 
                    base(modelElement, "ConnectivityNode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IConnectivityNode Value
            {
                get
                {
                    return this.ModelElement.ConnectivityNode;
                }
                set
                {
                    this.ModelElement.ConnectivityNode = value;
                }
            }
        }
    }
}

