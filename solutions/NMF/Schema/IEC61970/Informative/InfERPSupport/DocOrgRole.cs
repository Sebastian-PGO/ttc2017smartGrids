//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport
{
    
    
    /// <summary>
    /// The default implementation of the DocOrgRole class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfERPSupport")]
    [XmlNamespacePrefixAttribute("cimInfERPSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Doc" +
        "OrgRole")]
    [DebuggerDisplayAttribute("DocOrgRole {UUID}")]
    public partial class DocOrgRole : Role, IDocOrgRole, IModelElement
    {
        
        private static Lazy<ITypedElement> _documentReference = new Lazy<ITypedElement>(RetrieveDocumentReference);
        
        /// <summary>
        /// The backing field for the Document property
        /// </summary>
        private IDocument _document;
        
        private static Lazy<ITypedElement> _erpOrganisationReference = new Lazy<ITypedElement>(RetrieveErpOrganisationReference);
        
        /// <summary>
        /// The backing field for the ErpOrganisation property
        /// </summary>
        private IErpOrganisation _erpOrganisation;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Document property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpOrganisationRoles")]
        public virtual IDocument Document
        {
            get
            {
                return this._document;
            }
            set
            {
                if ((this._document != value))
                {
                    IDocument old = this._document;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDocumentChanging(e);
                    this.OnPropertyChanging("Document", e, _documentReference);
                    this._document = value;
                    if ((old != null))
                    {
                        old.ErpOrganisationRoles.Remove(this);
                        old.Deleted -= this.OnResetDocument;
                    }
                    if ((value != null))
                    {
                        value.ErpOrganisationRoles.Add(this);
                        value.Deleted += this.OnResetDocument;
                    }
                    this.OnDocumentChanged(e);
                    this.OnPropertyChanged("Document", e, _documentReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpOrganisation property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("DocumentRoles")]
        public virtual IErpOrganisation ErpOrganisation
        {
            get
            {
                return this._erpOrganisation;
            }
            set
            {
                if ((this._erpOrganisation != value))
                {
                    IErpOrganisation old = this._erpOrganisation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpOrganisationChanging(e);
                    this.OnPropertyChanging("ErpOrganisation", e, _erpOrganisationReference);
                    this._erpOrganisation = value;
                    if ((old != null))
                    {
                        old.DocumentRoles.Remove(this);
                        old.Deleted -= this.OnResetErpOrganisation;
                    }
                    if ((value != null))
                    {
                        value.DocumentRoles.Add(this);
                        value.Deleted += this.OnResetErpOrganisation;
                    }
                    this.OnErpOrganisationChanged(e);
                    this.OnPropertyChanged("ErpOrganisation", e, _erpOrganisationReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new DocOrgRoleReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Doc" +
                            "OrgRole")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Document property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DocumentChanging;
        
        /// <summary>
        /// Gets fired when the Document property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DocumentChanged;
        
        /// <summary>
        /// Gets fired before the ErpOrganisation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpOrganisationChanging;
        
        /// <summary>
        /// Gets fired when the ErpOrganisation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpOrganisationChanged;
        
        private static ITypedElement RetrieveDocumentReference()
        {
            return ((ITypedElement)(((ModelElement)(DocOrgRole.ClassInstance)).Resolve("Document")));
        }
        
        /// <summary>
        /// Raises the DocumentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDocumentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DocumentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DocumentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDocumentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DocumentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Document property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDocument(object sender, System.EventArgs eventArgs)
        {
            this.Document = null;
        }
        
        private static ITypedElement RetrieveErpOrganisationReference()
        {
            return ((ITypedElement)(((ModelElement)(DocOrgRole.ClassInstance)).Resolve("ErpOrganisation")));
        }
        
        /// <summary>
        /// Raises the ErpOrganisationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpOrganisationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpOrganisationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpOrganisationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpOrganisationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpOrganisationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpOrganisation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpOrganisation(object sender, System.EventArgs eventArgs)
        {
            this.ErpOrganisation = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DOCUMENT"))
            {
                this.Document = ((IDocument)(value));
                return;
            }
            if ((feature == "ERPORGANISATION"))
            {
                this.ErpOrganisation = ((IErpOrganisation)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Document"))
            {
                return new DocumentProxy(this);
            }
            if ((attribute == "ErpOrganisation"))
            {
                return new ErpOrganisationProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Document"))
            {
                return new DocumentProxy(this);
            }
            if ((reference == "ErpOrganisation"))
            {
                return new ErpOrganisationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Doc" +
                        "OrgRole")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the DocOrgRole class
        /// </summary>
        public class DocOrgRoleReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private DocOrgRole _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public DocOrgRoleReferencedElementsCollection(DocOrgRole parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Document != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpOrganisation != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.DocumentChanged += this.PropagateValueChanges;
                this._parent.ErpOrganisationChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.DocumentChanged -= this.PropagateValueChanges;
                this._parent.ErpOrganisationChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Document == null))
                {
                    IDocument documentCasted = item.As<IDocument>();
                    if ((documentCasted != null))
                    {
                        this._parent.Document = documentCasted;
                        return;
                    }
                }
                if ((this._parent.ErpOrganisation == null))
                {
                    IErpOrganisation erpOrganisationCasted = item.As<IErpOrganisation>();
                    if ((erpOrganisationCasted != null))
                    {
                        this._parent.ErpOrganisation = erpOrganisationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Document = null;
                this._parent.ErpOrganisation = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Document))
                {
                    return true;
                }
                if ((item == this._parent.ErpOrganisation))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Document != null))
                {
                    array[arrayIndex] = this._parent.Document;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpOrganisation != null))
                {
                    array[arrayIndex] = this._parent.ErpOrganisation;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Document == item))
                {
                    this._parent.Document = null;
                    return true;
                }
                if ((this._parent.ErpOrganisation == item))
                {
                    this._parent.ErpOrganisation = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Document).Concat(this._parent.ErpOrganisation).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Document property
        /// </summary>
        private sealed class DocumentProxy : ModelPropertyChange<IDocOrgRole, IDocument>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DocumentProxy(IDocOrgRole modelElement) : 
                    base(modelElement, "Document")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDocument Value
            {
                get
                {
                    return this.ModelElement.Document;
                }
                set
                {
                    this.ModelElement.Document = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpOrganisation property
        /// </summary>
        private sealed class ErpOrganisationProxy : ModelPropertyChange<IDocOrgRole, IErpOrganisation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpOrganisationProxy(IDocOrgRole modelElement) : 
                    base(modelElement, "ErpOrganisation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpOrganisation Value
            {
                get
                {
                    return this.ModelElement.ErpOrganisation;
                }
                set
                {
                    this.ModelElement.ErpOrganisation = value;
                }
            }
        }
    }
}

