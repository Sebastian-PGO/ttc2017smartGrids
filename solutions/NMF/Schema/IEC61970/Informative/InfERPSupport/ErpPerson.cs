using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport
{
    
    
    /// <summary>
    /// The default implementation of the ErpPerson class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfERPSupport")]
    [XmlNamespacePrefixAttribute("cimInfERPSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
        "Person")]
    [DebuggerDisplayAttribute("ErpPerson {UUID}")]
    public partial class ErpPerson : IdentifiedObject, IErpPerson, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Category property
        /// </summary>
        private string _category;
        
        private static Lazy<ITypedElement> _categoryAttribute = new Lazy<ITypedElement>(RetrieveCategoryAttribute);
        
        /// <summary>
        /// The backing field for the FirstName property
        /// </summary>
        private string _firstName;
        
        private static Lazy<ITypedElement> _firstNameAttribute = new Lazy<ITypedElement>(RetrieveFirstNameAttribute);
        
        /// <summary>
        /// The backing field for the LastName property
        /// </summary>
        private string _lastName;
        
        private static Lazy<ITypedElement> _lastNameAttribute = new Lazy<ITypedElement>(RetrieveLastNameAttribute);
        
        /// <summary>
        /// The backing field for the MName property
        /// </summary>
        private string _mName;
        
        private static Lazy<ITypedElement> _mNameAttribute = new Lazy<ITypedElement>(RetrieveMNameAttribute);
        
        /// <summary>
        /// The backing field for the GovernmentID property
        /// </summary>
        private string _governmentID;
        
        private static Lazy<ITypedElement> _governmentIDAttribute = new Lazy<ITypedElement>(RetrieveGovernmentIDAttribute);
        
        /// <summary>
        /// The backing field for the SpecialNeed property
        /// </summary>
        private string _specialNeed;
        
        private static Lazy<ITypedElement> _specialNeedAttribute = new Lazy<ITypedElement>(RetrieveSpecialNeedAttribute);
        
        /// <summary>
        /// The backing field for the Prefix property
        /// </summary>
        private string _prefix;
        
        private static Lazy<ITypedElement> _prefixAttribute = new Lazy<ITypedElement>(RetrievePrefixAttribute);
        
        /// <summary>
        /// The backing field for the Suffix property
        /// </summary>
        private string _suffix;
        
        private static Lazy<ITypedElement> _suffixAttribute = new Lazy<ITypedElement>(RetrieveSuffixAttribute);
        
        private static Lazy<ITypedElement> _callBacksReference = new Lazy<ITypedElement>(RetrieveCallBacksReference);
        
        /// <summary>
        /// The backing field for the CallBacks property
        /// </summary>
        private ErpPersonCallBacksCollection _callBacks;
        
        private static Lazy<ITypedElement> _serviceLocationReference = new Lazy<ITypedElement>(RetrieveServiceLocationReference);
        
        /// <summary>
        /// The backing field for the ServiceLocation property
        /// </summary>
        private IServiceLocation _serviceLocation;
        
        private static Lazy<ITypedElement> _documentRolesReference = new Lazy<ITypedElement>(RetrieveDocumentRolesReference);
        
        /// <summary>
        /// The backing field for the DocumentRoles property
        /// </summary>
        private ErpPersonDocumentRolesCollection _documentRoles;
        
        private static Lazy<ITypedElement> _switchingStepRolesReference = new Lazy<ITypedElement>(RetrieveSwitchingStepRolesReference);
        
        /// <summary>
        /// The backing field for the SwitchingStepRoles property
        /// </summary>
        private ErpPersonSwitchingStepRolesCollection _switchingStepRoles;
        
        private static Lazy<ITypedElement> _changeItemsReference = new Lazy<ITypedElement>(RetrieveChangeItemsReference);
        
        /// <summary>
        /// The backing field for the ChangeItems property
        /// </summary>
        private ErpPersonChangeItemsCollection _changeItems;
        
        private static Lazy<ITypedElement> _skillsReference = new Lazy<ITypedElement>(RetrieveSkillsReference);
        
        /// <summary>
        /// The backing field for the Skills property
        /// </summary>
        private ErpPersonSkillsCollection _skills;
        
        private static Lazy<ITypedElement> _electronicAddressReference = new Lazy<ITypedElement>(RetrieveElectronicAddressReference);
        
        /// <summary>
        /// The backing field for the ElectronicAddress property
        /// </summary>
        private IElectronicAddress _electronicAddress;
        
        private static Lazy<ITypedElement> _erpOrganisationRolesReference = new Lazy<ITypedElement>(RetrieveErpOrganisationRolesReference);
        
        /// <summary>
        /// The backing field for the ErpOrganisationRoles property
        /// </summary>
        private ErpPersonErpOrganisationRolesCollection _erpOrganisationRoles;
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static Lazy<ITypedElement> _laborItemsReference = new Lazy<ITypedElement>(RetrieveLaborItemsReference);
        
        /// <summary>
        /// The backing field for the LaborItems property
        /// </summary>
        private ErpPersonLaborItemsCollection _laborItems;
        
        private static Lazy<ITypedElement> _craftsReference = new Lazy<ITypedElement>(RetrieveCraftsReference);
        
        /// <summary>
        /// The backing field for the Crafts property
        /// </summary>
        private ErpPersonCraftsCollection _crafts;
        
        private static Lazy<ITypedElement> _mobilePhoneReference = new Lazy<ITypedElement>(RetrieveMobilePhoneReference);
        
        /// <summary>
        /// The backing field for the MobilePhone property
        /// </summary>
        private ITelephoneNumber _mobilePhone;
        
        private static Lazy<ITypedElement> _erpCompetencyReference = new Lazy<ITypedElement>(RetrieveErpCompetencyReference);
        
        /// <summary>
        /// The backing field for the ErpCompetency property
        /// </summary>
        private IErpCompetency _erpCompetency;
        
        private static Lazy<ITypedElement> _landPropertyRolesReference = new Lazy<ITypedElement>(RetrieveLandPropertyRolesReference);
        
        /// <summary>
        /// The backing field for the LandPropertyRoles property
        /// </summary>
        private ErpPersonLandPropertyRolesCollection _landPropertyRoles;
        
        private static Lazy<ITypedElement> _landlinePhoneReference = new Lazy<ITypedElement>(RetrieveLandlinePhoneReference);
        
        /// <summary>
        /// The backing field for the LandlinePhone property
        /// </summary>
        private ITelephoneNumber _landlinePhone;
        
        private static Lazy<ITypedElement> _measurementValuesReference = new Lazy<ITypedElement>(RetrieveMeasurementValuesReference);
        
        /// <summary>
        /// The backing field for the MeasurementValues property
        /// </summary>
        private ErpPersonMeasurementValuesCollection _measurementValues;
        
        private static Lazy<ITypedElement> _activityRecordsReference = new Lazy<ITypedElement>(RetrieveActivityRecordsReference);
        
        /// <summary>
        /// The backing field for the ActivityRecords property
        /// </summary>
        private ErpPersonActivityRecordsCollection _activityRecords;
        
        private static Lazy<ITypedElement> _crewsReference = new Lazy<ITypedElement>(RetrieveCrewsReference);
        
        /// <summary>
        /// The backing field for the Crews property
        /// </summary>
        private ErpPersonCrewsCollection _crews;
        
        private static Lazy<ITypedElement> _appointmentsReference = new Lazy<ITypedElement>(RetrieveAppointmentsReference);
        
        /// <summary>
        /// The backing field for the Appointments property
        /// </summary>
        private ErpPersonAppointmentsCollection _appointments;
        
        private static Lazy<ITypedElement> _erpPersonnelReference = new Lazy<ITypedElement>(RetrieveErpPersonnelReference);
        
        /// <summary>
        /// The backing field for the ErpPersonnel property
        /// </summary>
        private IErpPersonnel _erpPersonnel;
        
        private static Lazy<ITypedElement> _customerDataReference = new Lazy<ITypedElement>(RetrieveCustomerDataReference);
        
        /// <summary>
        /// The backing field for the CustomerData property
        /// </summary>
        private ICustomer _customerData;
        
        private static IClass _classInstance;
        
        public ErpPerson()
        {
            this._callBacks = new ErpPersonCallBacksCollection(this);
            this._callBacks.CollectionChanging += this.CallBacksCollectionChanging;
            this._callBacks.CollectionChanged += this.CallBacksCollectionChanged;
            this._documentRoles = new ErpPersonDocumentRolesCollection(this);
            this._documentRoles.CollectionChanging += this.DocumentRolesCollectionChanging;
            this._documentRoles.CollectionChanged += this.DocumentRolesCollectionChanged;
            this._switchingStepRoles = new ErpPersonSwitchingStepRolesCollection(this);
            this._switchingStepRoles.CollectionChanging += this.SwitchingStepRolesCollectionChanging;
            this._switchingStepRoles.CollectionChanged += this.SwitchingStepRolesCollectionChanged;
            this._changeItems = new ErpPersonChangeItemsCollection(this);
            this._changeItems.CollectionChanging += this.ChangeItemsCollectionChanging;
            this._changeItems.CollectionChanged += this.ChangeItemsCollectionChanged;
            this._skills = new ErpPersonSkillsCollection(this);
            this._skills.CollectionChanging += this.SkillsCollectionChanging;
            this._skills.CollectionChanged += this.SkillsCollectionChanged;
            this._erpOrganisationRoles = new ErpPersonErpOrganisationRolesCollection(this);
            this._erpOrganisationRoles.CollectionChanging += this.ErpOrganisationRolesCollectionChanging;
            this._erpOrganisationRoles.CollectionChanged += this.ErpOrganisationRolesCollectionChanged;
            this._laborItems = new ErpPersonLaborItemsCollection(this);
            this._laborItems.CollectionChanging += this.LaborItemsCollectionChanging;
            this._laborItems.CollectionChanged += this.LaborItemsCollectionChanged;
            this._crafts = new ErpPersonCraftsCollection(this);
            this._crafts.CollectionChanging += this.CraftsCollectionChanging;
            this._crafts.CollectionChanged += this.CraftsCollectionChanged;
            this._landPropertyRoles = new ErpPersonLandPropertyRolesCollection(this);
            this._landPropertyRoles.CollectionChanging += this.LandPropertyRolesCollectionChanging;
            this._landPropertyRoles.CollectionChanged += this.LandPropertyRolesCollectionChanged;
            this._measurementValues = new ErpPersonMeasurementValuesCollection(this);
            this._measurementValues.CollectionChanging += this.MeasurementValuesCollectionChanging;
            this._measurementValues.CollectionChanged += this.MeasurementValuesCollectionChanged;
            this._activityRecords = new ErpPersonActivityRecordsCollection(this);
            this._activityRecords.CollectionChanging += this.ActivityRecordsCollectionChanging;
            this._activityRecords.CollectionChanged += this.ActivityRecordsCollectionChanged;
            this._crews = new ErpPersonCrewsCollection(this);
            this._crews.CollectionChanging += this.CrewsCollectionChanging;
            this._crews.CollectionChanged += this.CrewsCollectionChanged;
            this._appointments = new ErpPersonAppointmentsCollection(this);
            this._appointments.CollectionChanging += this.AppointmentsCollectionChanging;
            this._appointments.CollectionChanged += this.AppointmentsCollectionChanged;
        }
        
        /// <summary>
        /// The category property
        /// </summary>
        [XmlElementNameAttribute("category")]
        [XmlAttributeAttribute(true)]
        public virtual string Category
        {
            get
            {
                return this._category;
            }
            set
            {
                if ((this._category != value))
                {
                    string old = this._category;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCategoryChanging(e);
                    this.OnPropertyChanging("Category", e, _categoryAttribute);
                    this._category = value;
                    this.OnCategoryChanged(e);
                    this.OnPropertyChanged("Category", e, _categoryAttribute);
                }
            }
        }
        
        /// <summary>
        /// The firstName property
        /// </summary>
        [XmlElementNameAttribute("firstName")]
        [XmlAttributeAttribute(true)]
        public virtual string FirstName
        {
            get
            {
                return this._firstName;
            }
            set
            {
                if ((this._firstName != value))
                {
                    string old = this._firstName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFirstNameChanging(e);
                    this.OnPropertyChanging("FirstName", e, _firstNameAttribute);
                    this._firstName = value;
                    this.OnFirstNameChanged(e);
                    this.OnPropertyChanged("FirstName", e, _firstNameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The lastName property
        /// </summary>
        [XmlElementNameAttribute("lastName")]
        [XmlAttributeAttribute(true)]
        public virtual string LastName
        {
            get
            {
                return this._lastName;
            }
            set
            {
                if ((this._lastName != value))
                {
                    string old = this._lastName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLastNameChanging(e);
                    this.OnPropertyChanging("LastName", e, _lastNameAttribute);
                    this._lastName = value;
                    this.OnLastNameChanged(e);
                    this.OnPropertyChanged("LastName", e, _lastNameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The mName property
        /// </summary>
        [XmlElementNameAttribute("mName")]
        [XmlAttributeAttribute(true)]
        public virtual string MName
        {
            get
            {
                return this._mName;
            }
            set
            {
                if ((this._mName != value))
                {
                    string old = this._mName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMNameChanging(e);
                    this.OnPropertyChanging("MName", e, _mNameAttribute);
                    this._mName = value;
                    this.OnMNameChanged(e);
                    this.OnPropertyChanged("MName", e, _mNameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The governmentID property
        /// </summary>
        [XmlElementNameAttribute("governmentID")]
        [XmlAttributeAttribute(true)]
        public virtual string GovernmentID
        {
            get
            {
                return this._governmentID;
            }
            set
            {
                if ((this._governmentID != value))
                {
                    string old = this._governmentID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGovernmentIDChanging(e);
                    this.OnPropertyChanging("GovernmentID", e, _governmentIDAttribute);
                    this._governmentID = value;
                    this.OnGovernmentIDChanged(e);
                    this.OnPropertyChanged("GovernmentID", e, _governmentIDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The specialNeed property
        /// </summary>
        [XmlElementNameAttribute("specialNeed")]
        [XmlAttributeAttribute(true)]
        public virtual string SpecialNeed
        {
            get
            {
                return this._specialNeed;
            }
            set
            {
                if ((this._specialNeed != value))
                {
                    string old = this._specialNeed;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSpecialNeedChanging(e);
                    this.OnPropertyChanging("SpecialNeed", e, _specialNeedAttribute);
                    this._specialNeed = value;
                    this.OnSpecialNeedChanged(e);
                    this.OnPropertyChanged("SpecialNeed", e, _specialNeedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The prefix property
        /// </summary>
        [XmlElementNameAttribute("prefix")]
        [XmlAttributeAttribute(true)]
        public virtual string Prefix
        {
            get
            {
                return this._prefix;
            }
            set
            {
                if ((this._prefix != value))
                {
                    string old = this._prefix;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPrefixChanging(e);
                    this.OnPropertyChanging("Prefix", e, _prefixAttribute);
                    this._prefix = value;
                    this.OnPrefixChanged(e);
                    this.OnPropertyChanged("Prefix", e, _prefixAttribute);
                }
            }
        }
        
        /// <summary>
        /// The suffix property
        /// </summary>
        [XmlElementNameAttribute("suffix")]
        [XmlAttributeAttribute(true)]
        public virtual string Suffix
        {
            get
            {
                return this._suffix;
            }
            set
            {
                if ((this._suffix != value))
                {
                    string old = this._suffix;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSuffixChanging(e);
                    this.OnPropertyChanging("Suffix", e, _suffixAttribute);
                    this._suffix = value;
                    this.OnSuffixChanged(e);
                    this.OnPropertyChanged("Suffix", e, _suffixAttribute);
                }
            }
        }
        
        /// <summary>
        /// The CallBacks property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpPersons")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICallBack> CallBacks
        {
            get
            {
                return this._callBacks;
            }
        }
        
        /// <summary>
        /// The ServiceLocation property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpPersons")]
        public virtual IServiceLocation ServiceLocation
        {
            get
            {
                return this._serviceLocation;
            }
            set
            {
                if ((this._serviceLocation != value))
                {
                    IServiceLocation old = this._serviceLocation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnServiceLocationChanging(e);
                    this.OnPropertyChanging("ServiceLocation", e, _serviceLocationReference);
                    this._serviceLocation = value;
                    if ((old != null))
                    {
                        old.ErpPersons.Remove(this);
                        old.Deleted -= this.OnResetServiceLocation;
                    }
                    if ((value != null))
                    {
                        value.ErpPersons.Add(this);
                        value.Deleted += this.OnResetServiceLocation;
                    }
                    this.OnServiceLocationChanged(e);
                    this.OnPropertyChanged("ServiceLocation", e, _serviceLocationReference);
                }
            }
        }
        
        /// <summary>
        /// The DocumentRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpPerson")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDocErpPersonRole> DocumentRoles
        {
            get
            {
                return this._documentRoles;
            }
        }
        
        /// <summary>
        /// The SwitchingStepRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpPerson")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpPersonScheduleStepRole> SwitchingStepRoles
        {
            get
            {
                return this._switchingStepRoles;
            }
        }
        
        /// <summary>
        /// The ChangeItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpPerson")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IChangeItem> ChangeItems
        {
            get
            {
                return this._changeItems;
            }
        }
        
        /// <summary>
        /// The Skills property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpPerson")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISkill> Skills
        {
            get
            {
                return this._skills;
            }
        }
        
        /// <summary>
        /// The electronicAddress property
        /// </summary>
        [XmlElementNameAttribute("electronicAddress")]
        [XmlAttributeAttribute(true)]
        public virtual IElectronicAddress ElectronicAddress
        {
            get
            {
                return this._electronicAddress;
            }
            set
            {
                if ((this._electronicAddress != value))
                {
                    IElectronicAddress old = this._electronicAddress;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnElectronicAddressChanging(e);
                    this.OnPropertyChanging("ElectronicAddress", e, _electronicAddressReference);
                    this._electronicAddress = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetElectronicAddress;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetElectronicAddress;
                    }
                    this.OnElectronicAddressChanged(e);
                    this.OnPropertyChanged("ElectronicAddress", e, _electronicAddressReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpOrganisationRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpPerson")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IOrgErpPersonRole> ErpOrganisationRoles
        {
            get
            {
                return this._erpOrganisationRoles;
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// The LaborItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpPersons")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILaborItem> LaborItems
        {
            get
            {
                return this._laborItems;
            }
        }
        
        /// <summary>
        /// The Crafts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpPersons")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICraft> Crafts
        {
            get
            {
                return this._crafts;
            }
        }
        
        /// <summary>
        /// The mobilePhone property
        /// </summary>
        [XmlElementNameAttribute("mobilePhone")]
        [XmlAttributeAttribute(true)]
        public virtual ITelephoneNumber MobilePhone
        {
            get
            {
                return this._mobilePhone;
            }
            set
            {
                if ((this._mobilePhone != value))
                {
                    ITelephoneNumber old = this._mobilePhone;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMobilePhoneChanging(e);
                    this.OnPropertyChanging("MobilePhone", e, _mobilePhoneReference);
                    this._mobilePhone = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMobilePhone;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMobilePhone;
                    }
                    this.OnMobilePhoneChanged(e);
                    this.OnPropertyChanged("MobilePhone", e, _mobilePhoneReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpCompetency property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpPersons")]
        public virtual IErpCompetency ErpCompetency
        {
            get
            {
                return this._erpCompetency;
            }
            set
            {
                if ((this._erpCompetency != value))
                {
                    IErpCompetency old = this._erpCompetency;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpCompetencyChanging(e);
                    this.OnPropertyChanging("ErpCompetency", e, _erpCompetencyReference);
                    this._erpCompetency = value;
                    if ((old != null))
                    {
                        old.ErpPersons.Remove(this);
                        old.Deleted -= this.OnResetErpCompetency;
                    }
                    if ((value != null))
                    {
                        value.ErpPersons.Add(this);
                        value.Deleted += this.OnResetErpCompetency;
                    }
                    this.OnErpCompetencyChanged(e);
                    this.OnPropertyChanged("ErpCompetency", e, _erpCompetencyReference);
                }
            }
        }
        
        /// <summary>
        /// The LandPropertyRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpPerson")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IPersonPropertyRole> LandPropertyRoles
        {
            get
            {
                return this._landPropertyRoles;
            }
        }
        
        /// <summary>
        /// The landlinePhone property
        /// </summary>
        [XmlElementNameAttribute("landlinePhone")]
        [XmlAttributeAttribute(true)]
        public virtual ITelephoneNumber LandlinePhone
        {
            get
            {
                return this._landlinePhone;
            }
            set
            {
                if ((this._landlinePhone != value))
                {
                    ITelephoneNumber old = this._landlinePhone;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLandlinePhoneChanging(e);
                    this.OnPropertyChanging("LandlinePhone", e, _landlinePhoneReference);
                    this._landlinePhone = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLandlinePhone;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLandlinePhone;
                    }
                    this.OnLandlinePhoneChanged(e);
                    this.OnPropertyChanged("LandlinePhone", e, _landlinePhoneReference);
                }
            }
        }
        
        /// <summary>
        /// The MeasurementValues property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpPerson")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMeasurementValue> MeasurementValues
        {
            get
            {
                return this._measurementValues;
            }
        }
        
        /// <summary>
        /// The ActivityRecords property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpPersons")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IActivityRecord> ActivityRecords
        {
            get
            {
                return this._activityRecords;
            }
        }
        
        /// <summary>
        /// The Crews property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CrewMembers")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICrew> Crews
        {
            get
            {
                return this._crews;
            }
        }
        
        /// <summary>
        /// The Appointments property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpPersons")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAppointment> Appointments
        {
            get
            {
                return this._appointments;
            }
        }
        
        /// <summary>
        /// The ErpPersonnel property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpPersons")]
        public virtual IErpPersonnel ErpPersonnel
        {
            get
            {
                return this._erpPersonnel;
            }
            set
            {
                if ((this._erpPersonnel != value))
                {
                    IErpPersonnel old = this._erpPersonnel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpPersonnelChanging(e);
                    this.OnPropertyChanging("ErpPersonnel", e, _erpPersonnelReference);
                    this._erpPersonnel = value;
                    if ((old != null))
                    {
                        old.ErpPersons.Remove(this);
                        old.Deleted -= this.OnResetErpPersonnel;
                    }
                    if ((value != null))
                    {
                        value.ErpPersons.Add(this);
                        value.Deleted += this.OnResetErpPersonnel;
                    }
                    this.OnErpPersonnelChanged(e);
                    this.OnPropertyChanged("ErpPersonnel", e, _erpPersonnelReference);
                }
            }
        }
        
        /// <summary>
        /// The CustomerData property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpPersons")]
        public virtual ICustomer CustomerData
        {
            get
            {
                return this._customerData;
            }
            set
            {
                if ((this._customerData != value))
                {
                    ICustomer old = this._customerData;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCustomerDataChanging(e);
                    this.OnPropertyChanging("CustomerData", e, _customerDataReference);
                    this._customerData = value;
                    if ((old != null))
                    {
                        old.ErpPersons.Remove(this);
                        old.Deleted -= this.OnResetCustomerData;
                    }
                    if ((value != null))
                    {
                        value.ErpPersons.Add(this);
                        value.Deleted += this.OnResetCustomerData;
                    }
                    this.OnCustomerDataChanged(e);
                    this.OnPropertyChanged("CustomerData", e, _customerDataReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ErpPersonReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                            "Person")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Category property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CategoryChanging;
        
        /// <summary>
        /// Gets fired when the Category property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CategoryChanged;
        
        /// <summary>
        /// Gets fired before the FirstName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FirstNameChanging;
        
        /// <summary>
        /// Gets fired when the FirstName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FirstNameChanged;
        
        /// <summary>
        /// Gets fired before the LastName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LastNameChanging;
        
        /// <summary>
        /// Gets fired when the LastName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LastNameChanged;
        
        /// <summary>
        /// Gets fired before the MName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MNameChanging;
        
        /// <summary>
        /// Gets fired when the MName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MNameChanged;
        
        /// <summary>
        /// Gets fired before the GovernmentID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GovernmentIDChanging;
        
        /// <summary>
        /// Gets fired when the GovernmentID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GovernmentIDChanged;
        
        /// <summary>
        /// Gets fired before the SpecialNeed property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpecialNeedChanging;
        
        /// <summary>
        /// Gets fired when the SpecialNeed property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpecialNeedChanged;
        
        /// <summary>
        /// Gets fired before the Prefix property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PrefixChanging;
        
        /// <summary>
        /// Gets fired when the Prefix property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PrefixChanged;
        
        /// <summary>
        /// Gets fired before the Suffix property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SuffixChanging;
        
        /// <summary>
        /// Gets fired when the Suffix property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SuffixChanged;
        
        /// <summary>
        /// Gets fired before the ServiceLocation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceLocationChanging;
        
        /// <summary>
        /// Gets fired when the ServiceLocation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceLocationChanged;
        
        /// <summary>
        /// Gets fired before the ElectronicAddress property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ElectronicAddressChanging;
        
        /// <summary>
        /// Gets fired when the ElectronicAddress property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ElectronicAddressChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the MobilePhone property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MobilePhoneChanging;
        
        /// <summary>
        /// Gets fired when the MobilePhone property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MobilePhoneChanged;
        
        /// <summary>
        /// Gets fired before the ErpCompetency property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpCompetencyChanging;
        
        /// <summary>
        /// Gets fired when the ErpCompetency property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpCompetencyChanged;
        
        /// <summary>
        /// Gets fired before the LandlinePhone property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LandlinePhoneChanging;
        
        /// <summary>
        /// Gets fired when the LandlinePhone property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LandlinePhoneChanged;
        
        /// <summary>
        /// Gets fired before the ErpPersonnel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpPersonnelChanging;
        
        /// <summary>
        /// Gets fired when the ErpPersonnel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpPersonnelChanged;
        
        /// <summary>
        /// Gets fired before the CustomerData property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerDataChanging;
        
        /// <summary>
        /// Gets fired when the CustomerData property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerDataChanged;
        
        private static ITypedElement RetrieveCategoryAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("category")));
        }
        
        /// <summary>
        /// Raises the CategoryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCategoryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CategoryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CategoryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCategoryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CategoryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFirstNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("firstName")));
        }
        
        /// <summary>
        /// Raises the FirstNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFirstNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FirstNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FirstNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFirstNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FirstNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLastNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("lastName")));
        }
        
        /// <summary>
        /// Raises the LastNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLastNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LastNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LastNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLastNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LastNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("mName")));
        }
        
        /// <summary>
        /// Raises the MNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGovernmentIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("governmentID")));
        }
        
        /// <summary>
        /// Raises the GovernmentIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGovernmentIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GovernmentIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GovernmentIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGovernmentIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GovernmentIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSpecialNeedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("specialNeed")));
        }
        
        /// <summary>
        /// Raises the SpecialNeedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpecialNeedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpecialNeedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpecialNeedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpecialNeedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpecialNeedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePrefixAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("prefix")));
        }
        
        /// <summary>
        /// Raises the PrefixChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPrefixChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PrefixChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PrefixChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPrefixChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PrefixChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSuffixAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("suffix")));
        }
        
        /// <summary>
        /// Raises the SuffixChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSuffixChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SuffixChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SuffixChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSuffixChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SuffixChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCallBacksReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("CallBacks")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CallBacks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CallBacksCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("CallBacks", e, _callBacksReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CallBacks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CallBacksCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CallBacks", e, _callBacksReference);
        }
        
        private static ITypedElement RetrieveServiceLocationReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("ServiceLocation")));
        }
        
        /// <summary>
        /// Raises the ServiceLocationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceLocationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceLocationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServiceLocationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceLocationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceLocationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ServiceLocation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetServiceLocation(object sender, System.EventArgs eventArgs)
        {
            this.ServiceLocation = null;
        }
        
        private static ITypedElement RetrieveDocumentRolesReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("DocumentRoles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DocumentRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DocumentRolesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("DocumentRoles", e, _documentRolesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DocumentRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DocumentRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DocumentRoles", e, _documentRolesReference);
        }
        
        private static ITypedElement RetrieveSwitchingStepRolesReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("SwitchingStepRoles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SwitchingStepRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SwitchingStepRolesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("SwitchingStepRoles", e, _switchingStepRolesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SwitchingStepRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SwitchingStepRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SwitchingStepRoles", e, _switchingStepRolesReference);
        }
        
        private static ITypedElement RetrieveChangeItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("ChangeItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ChangeItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChangeItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ChangeItems", e, _changeItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ChangeItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChangeItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ChangeItems", e, _changeItemsReference);
        }
        
        private static ITypedElement RetrieveSkillsReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("Skills")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Skills property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SkillsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Skills", e, _skillsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Skills property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SkillsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Skills", e, _skillsReference);
        }
        
        private static ITypedElement RetrieveElectronicAddressReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("electronicAddress")));
        }
        
        /// <summary>
        /// Raises the ElectronicAddressChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectronicAddressChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ElectronicAddressChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ElectronicAddressChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectronicAddressChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ElectronicAddressChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ElectronicAddress property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetElectronicAddress(object sender, System.EventArgs eventArgs)
        {
            this.ElectronicAddress = null;
        }
        
        private static ITypedElement RetrieveErpOrganisationRolesReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("ErpOrganisationRoles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpOrganisationRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpOrganisationRolesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ErpOrganisationRoles", e, _erpOrganisationRolesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpOrganisationRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpOrganisationRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpOrganisationRoles", e, _erpOrganisationRolesReference);
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        private static ITypedElement RetrieveLaborItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("LaborItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the LaborItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LaborItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("LaborItems", e, _laborItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the LaborItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LaborItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("LaborItems", e, _laborItemsReference);
        }
        
        private static ITypedElement RetrieveCraftsReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("Crafts")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Crafts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CraftsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Crafts", e, _craftsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Crafts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CraftsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Crafts", e, _craftsReference);
        }
        
        private static ITypedElement RetrieveMobilePhoneReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("mobilePhone")));
        }
        
        /// <summary>
        /// Raises the MobilePhoneChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMobilePhoneChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MobilePhoneChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MobilePhoneChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMobilePhoneChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MobilePhoneChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MobilePhone property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMobilePhone(object sender, System.EventArgs eventArgs)
        {
            this.MobilePhone = null;
        }
        
        private static ITypedElement RetrieveErpCompetencyReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("ErpCompetency")));
        }
        
        /// <summary>
        /// Raises the ErpCompetencyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpCompetencyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpCompetencyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpCompetencyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpCompetencyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpCompetencyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpCompetency property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpCompetency(object sender, System.EventArgs eventArgs)
        {
            this.ErpCompetency = null;
        }
        
        private static ITypedElement RetrieveLandPropertyRolesReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("LandPropertyRoles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the LandPropertyRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LandPropertyRolesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("LandPropertyRoles", e, _landPropertyRolesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the LandPropertyRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LandPropertyRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("LandPropertyRoles", e, _landPropertyRolesReference);
        }
        
        private static ITypedElement RetrieveLandlinePhoneReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("landlinePhone")));
        }
        
        /// <summary>
        /// Raises the LandlinePhoneChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLandlinePhoneChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LandlinePhoneChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LandlinePhoneChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLandlinePhoneChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LandlinePhoneChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LandlinePhone property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLandlinePhone(object sender, System.EventArgs eventArgs)
        {
            this.LandlinePhone = null;
        }
        
        private static ITypedElement RetrieveMeasurementValuesReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("MeasurementValues")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MeasurementValues property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeasurementValuesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("MeasurementValues", e, _measurementValuesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MeasurementValues property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeasurementValuesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MeasurementValues", e, _measurementValuesReference);
        }
        
        private static ITypedElement RetrieveActivityRecordsReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("ActivityRecords")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ActivityRecords property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ActivityRecordsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ActivityRecords", e, _activityRecordsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ActivityRecords property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ActivityRecordsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ActivityRecords", e, _activityRecordsReference);
        }
        
        private static ITypedElement RetrieveCrewsReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("Crews")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Crews property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CrewsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Crews", e, _crewsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Crews property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CrewsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Crews", e, _crewsReference);
        }
        
        private static ITypedElement RetrieveAppointmentsReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("Appointments")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Appointments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AppointmentsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Appointments", e, _appointmentsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Appointments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AppointmentsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Appointments", e, _appointmentsReference);
        }
        
        private static ITypedElement RetrieveErpPersonnelReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("ErpPersonnel")));
        }
        
        /// <summary>
        /// Raises the ErpPersonnelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpPersonnelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpPersonnelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpPersonnelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpPersonnelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpPersonnelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpPersonnel property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpPersonnel(object sender, System.EventArgs eventArgs)
        {
            this.ErpPersonnel = null;
        }
        
        private static ITypedElement RetrieveCustomerDataReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpPerson.ClassInstance)).Resolve("CustomerData")));
        }
        
        /// <summary>
        /// Raises the CustomerDataChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerDataChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerDataChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CustomerDataChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerDataChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerDataChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CustomerData property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCustomerData(object sender, System.EventArgs eventArgs)
        {
            this.CustomerData = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CATEGORY"))
            {
                return this.Category;
            }
            if ((attribute == "FIRSTNAME"))
            {
                return this.FirstName;
            }
            if ((attribute == "LASTNAME"))
            {
                return this.LastName;
            }
            if ((attribute == "MNAME"))
            {
                return this.MName;
            }
            if ((attribute == "GOVERNMENTID"))
            {
                return this.GovernmentID;
            }
            if ((attribute == "SPECIALNEED"))
            {
                return this.SpecialNeed;
            }
            if ((attribute == "PREFIX"))
            {
                return this.Prefix;
            }
            if ((attribute == "SUFFIX"))
            {
                return this.Suffix;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CALLBACKS"))
            {
                return this._callBacks;
            }
            if ((feature == "DOCUMENTROLES"))
            {
                return this._documentRoles;
            }
            if ((feature == "SWITCHINGSTEPROLES"))
            {
                return this._switchingStepRoles;
            }
            if ((feature == "CHANGEITEMS"))
            {
                return this._changeItems;
            }
            if ((feature == "SKILLS"))
            {
                return this._skills;
            }
            if ((feature == "ERPORGANISATIONROLES"))
            {
                return this._erpOrganisationRoles;
            }
            if ((feature == "LABORITEMS"))
            {
                return this._laborItems;
            }
            if ((feature == "CRAFTS"))
            {
                return this._crafts;
            }
            if ((feature == "LANDPROPERTYROLES"))
            {
                return this._landPropertyRoles;
            }
            if ((feature == "MEASUREMENTVALUES"))
            {
                return this._measurementValues;
            }
            if ((feature == "ACTIVITYRECORDS"))
            {
                return this._activityRecords;
            }
            if ((feature == "CREWS"))
            {
                return this._crews;
            }
            if ((feature == "APPOINTMENTS"))
            {
                return this._appointments;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SERVICELOCATION"))
            {
                this.ServiceLocation = ((IServiceLocation)(value));
                return;
            }
            if ((feature == "ELECTRONICADDRESS"))
            {
                this.ElectronicAddress = ((IElectronicAddress)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "MOBILEPHONE"))
            {
                this.MobilePhone = ((ITelephoneNumber)(value));
                return;
            }
            if ((feature == "ERPCOMPETENCY"))
            {
                this.ErpCompetency = ((IErpCompetency)(value));
                return;
            }
            if ((feature == "LANDLINEPHONE"))
            {
                this.LandlinePhone = ((ITelephoneNumber)(value));
                return;
            }
            if ((feature == "ERPPERSONNEL"))
            {
                this.ErpPersonnel = ((IErpPersonnel)(value));
                return;
            }
            if ((feature == "CUSTOMERDATA"))
            {
                this.CustomerData = ((ICustomer)(value));
                return;
            }
            if ((feature == "CATEGORY"))
            {
                this.Category = ((string)(value));
                return;
            }
            if ((feature == "FIRSTNAME"))
            {
                this.FirstName = ((string)(value));
                return;
            }
            if ((feature == "LASTNAME"))
            {
                this.LastName = ((string)(value));
                return;
            }
            if ((feature == "MNAME"))
            {
                this.MName = ((string)(value));
                return;
            }
            if ((feature == "GOVERNMENTID"))
            {
                this.GovernmentID = ((string)(value));
                return;
            }
            if ((feature == "SPECIALNEED"))
            {
                this.SpecialNeed = ((string)(value));
                return;
            }
            if ((feature == "PREFIX"))
            {
                this.Prefix = ((string)(value));
                return;
            }
            if ((feature == "SUFFIX"))
            {
                this.Suffix = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ServiceLocation"))
            {
                return new ServiceLocationProxy(this);
            }
            if ((attribute == "ElectronicAddress"))
            {
                return new ElectronicAddressProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((attribute == "MobilePhone"))
            {
                return new MobilePhoneProxy(this);
            }
            if ((attribute == "ErpCompetency"))
            {
                return new ErpCompetencyProxy(this);
            }
            if ((attribute == "LandlinePhone"))
            {
                return new LandlinePhoneProxy(this);
            }
            if ((attribute == "ErpPersonnel"))
            {
                return new ErpPersonnelProxy(this);
            }
            if ((attribute == "CustomerData"))
            {
                return new CustomerDataProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ServiceLocation"))
            {
                return new ServiceLocationProxy(this);
            }
            if ((reference == "ElectronicAddress"))
            {
                return new ElectronicAddressProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((reference == "MobilePhone"))
            {
                return new MobilePhoneProxy(this);
            }
            if ((reference == "ErpCompetency"))
            {
                return new ErpCompetencyProxy(this);
            }
            if ((reference == "LandlinePhone"))
            {
                return new LandlinePhoneProxy(this);
            }
            if ((reference == "ErpPersonnel"))
            {
                return new ErpPersonnelProxy(this);
            }
            if ((reference == "CustomerData"))
            {
                return new CustomerDataProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                        "Person")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ErpPerson class
        /// </summary>
        public class ErpPersonReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ErpPerson _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ErpPersonReferencedElementsCollection(ErpPerson parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.CallBacks.Count);
                    if ((this._parent.ServiceLocation != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.DocumentRoles.Count);
                    count = (count + this._parent.SwitchingStepRoles.Count);
                    count = (count + this._parent.ChangeItems.Count);
                    count = (count + this._parent.Skills.Count);
                    if ((this._parent.ElectronicAddress != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ErpOrganisationRoles.Count);
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.LaborItems.Count);
                    count = (count + this._parent.Crafts.Count);
                    if ((this._parent.MobilePhone != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpCompetency != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.LandPropertyRoles.Count);
                    if ((this._parent.LandlinePhone != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.MeasurementValues.Count);
                    count = (count + this._parent.ActivityRecords.Count);
                    count = (count + this._parent.Crews.Count);
                    count = (count + this._parent.Appointments.Count);
                    if ((this._parent.ErpPersonnel != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CustomerData != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CallBacks.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ServiceLocationChanged += this.PropagateValueChanges;
                this._parent.DocumentRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SwitchingStepRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ChangeItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Skills.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ElectronicAddressChanged += this.PropagateValueChanges;
                this._parent.ErpOrganisationRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.LaborItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Crafts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MobilePhoneChanged += this.PropagateValueChanges;
                this._parent.ErpCompetencyChanged += this.PropagateValueChanges;
                this._parent.LandPropertyRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.LandlinePhoneChanged += this.PropagateValueChanges;
                this._parent.MeasurementValues.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ActivityRecords.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Crews.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Appointments.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpPersonnelChanged += this.PropagateValueChanges;
                this._parent.CustomerDataChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CallBacks.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ServiceLocationChanged -= this.PropagateValueChanges;
                this._parent.DocumentRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SwitchingStepRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ChangeItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Skills.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ElectronicAddressChanged -= this.PropagateValueChanges;
                this._parent.ErpOrganisationRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.LaborItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Crafts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MobilePhoneChanged -= this.PropagateValueChanges;
                this._parent.ErpCompetencyChanged -= this.PropagateValueChanges;
                this._parent.LandPropertyRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.LandlinePhoneChanged -= this.PropagateValueChanges;
                this._parent.MeasurementValues.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ActivityRecords.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Crews.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Appointments.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpPersonnelChanged -= this.PropagateValueChanges;
                this._parent.CustomerDataChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ICallBack callBacksCasted = item.As<ICallBack>();
                if ((callBacksCasted != null))
                {
                    this._parent.CallBacks.Add(callBacksCasted);
                }
                if ((this._parent.ServiceLocation == null))
                {
                    IServiceLocation serviceLocationCasted = item.As<IServiceLocation>();
                    if ((serviceLocationCasted != null))
                    {
                        this._parent.ServiceLocation = serviceLocationCasted;
                        return;
                    }
                }
                IDocErpPersonRole documentRolesCasted = item.As<IDocErpPersonRole>();
                if ((documentRolesCasted != null))
                {
                    this._parent.DocumentRoles.Add(documentRolesCasted);
                }
                IErpPersonScheduleStepRole switchingStepRolesCasted = item.As<IErpPersonScheduleStepRole>();
                if ((switchingStepRolesCasted != null))
                {
                    this._parent.SwitchingStepRoles.Add(switchingStepRolesCasted);
                }
                IChangeItem changeItemsCasted = item.As<IChangeItem>();
                if ((changeItemsCasted != null))
                {
                    this._parent.ChangeItems.Add(changeItemsCasted);
                }
                ISkill skillsCasted = item.As<ISkill>();
                if ((skillsCasted != null))
                {
                    this._parent.Skills.Add(skillsCasted);
                }
                if ((this._parent.ElectronicAddress == null))
                {
                    IElectronicAddress electronicAddressCasted = item.As<IElectronicAddress>();
                    if ((electronicAddressCasted != null))
                    {
                        this._parent.ElectronicAddress = electronicAddressCasted;
                        return;
                    }
                }
                IOrgErpPersonRole erpOrganisationRolesCasted = item.As<IOrgErpPersonRole>();
                if ((erpOrganisationRolesCasted != null))
                {
                    this._parent.ErpOrganisationRoles.Add(erpOrganisationRolesCasted);
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                ILaborItem laborItemsCasted = item.As<ILaborItem>();
                if ((laborItemsCasted != null))
                {
                    this._parent.LaborItems.Add(laborItemsCasted);
                }
                ICraft craftsCasted = item.As<ICraft>();
                if ((craftsCasted != null))
                {
                    this._parent.Crafts.Add(craftsCasted);
                }
                if ((this._parent.MobilePhone == null))
                {
                    ITelephoneNumber mobilePhoneCasted = item.As<ITelephoneNumber>();
                    if ((mobilePhoneCasted != null))
                    {
                        this._parent.MobilePhone = mobilePhoneCasted;
                        return;
                    }
                }
                if ((this._parent.ErpCompetency == null))
                {
                    IErpCompetency erpCompetencyCasted = item.As<IErpCompetency>();
                    if ((erpCompetencyCasted != null))
                    {
                        this._parent.ErpCompetency = erpCompetencyCasted;
                        return;
                    }
                }
                IPersonPropertyRole landPropertyRolesCasted = item.As<IPersonPropertyRole>();
                if ((landPropertyRolesCasted != null))
                {
                    this._parent.LandPropertyRoles.Add(landPropertyRolesCasted);
                }
                if ((this._parent.LandlinePhone == null))
                {
                    ITelephoneNumber landlinePhoneCasted = item.As<ITelephoneNumber>();
                    if ((landlinePhoneCasted != null))
                    {
                        this._parent.LandlinePhone = landlinePhoneCasted;
                        return;
                    }
                }
                IMeasurementValue measurementValuesCasted = item.As<IMeasurementValue>();
                if ((measurementValuesCasted != null))
                {
                    this._parent.MeasurementValues.Add(measurementValuesCasted);
                }
                IActivityRecord activityRecordsCasted = item.As<IActivityRecord>();
                if ((activityRecordsCasted != null))
                {
                    this._parent.ActivityRecords.Add(activityRecordsCasted);
                }
                ICrew crewsCasted = item.As<ICrew>();
                if ((crewsCasted != null))
                {
                    this._parent.Crews.Add(crewsCasted);
                }
                IAppointment appointmentsCasted = item.As<IAppointment>();
                if ((appointmentsCasted != null))
                {
                    this._parent.Appointments.Add(appointmentsCasted);
                }
                if ((this._parent.ErpPersonnel == null))
                {
                    IErpPersonnel erpPersonnelCasted = item.As<IErpPersonnel>();
                    if ((erpPersonnelCasted != null))
                    {
                        this._parent.ErpPersonnel = erpPersonnelCasted;
                        return;
                    }
                }
                if ((this._parent.CustomerData == null))
                {
                    ICustomer customerDataCasted = item.As<ICustomer>();
                    if ((customerDataCasted != null))
                    {
                        this._parent.CustomerData = customerDataCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CallBacks.Clear();
                this._parent.ServiceLocation = null;
                this._parent.DocumentRoles.Clear();
                this._parent.SwitchingStepRoles.Clear();
                this._parent.ChangeItems.Clear();
                this._parent.Skills.Clear();
                this._parent.ElectronicAddress = null;
                this._parent.ErpOrganisationRoles.Clear();
                this._parent.Status = null;
                this._parent.LaborItems.Clear();
                this._parent.Crafts.Clear();
                this._parent.MobilePhone = null;
                this._parent.ErpCompetency = null;
                this._parent.LandPropertyRoles.Clear();
                this._parent.LandlinePhone = null;
                this._parent.MeasurementValues.Clear();
                this._parent.ActivityRecords.Clear();
                this._parent.Crews.Clear();
                this._parent.Appointments.Clear();
                this._parent.ErpPersonnel = null;
                this._parent.CustomerData = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.CallBacks.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ServiceLocation))
                {
                    return true;
                }
                if (this._parent.DocumentRoles.Contains(item))
                {
                    return true;
                }
                if (this._parent.SwitchingStepRoles.Contains(item))
                {
                    return true;
                }
                if (this._parent.ChangeItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.Skills.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ElectronicAddress))
                {
                    return true;
                }
                if (this._parent.ErpOrganisationRoles.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if (this._parent.LaborItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.Crafts.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.MobilePhone))
                {
                    return true;
                }
                if ((item == this._parent.ErpCompetency))
                {
                    return true;
                }
                if (this._parent.LandPropertyRoles.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.LandlinePhone))
                {
                    return true;
                }
                if (this._parent.MeasurementValues.Contains(item))
                {
                    return true;
                }
                if (this._parent.ActivityRecords.Contains(item))
                {
                    return true;
                }
                if (this._parent.Crews.Contains(item))
                {
                    return true;
                }
                if (this._parent.Appointments.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ErpPersonnel))
                {
                    return true;
                }
                if ((item == this._parent.CustomerData))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> callBacksEnumerator = this._parent.CallBacks.GetEnumerator();
                try
                {
                    for (
                    ; callBacksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = callBacksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    callBacksEnumerator.Dispose();
                }
                if ((this._parent.ServiceLocation != null))
                {
                    array[arrayIndex] = this._parent.ServiceLocation;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> documentRolesEnumerator = this._parent.DocumentRoles.GetEnumerator();
                try
                {
                    for (
                    ; documentRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = documentRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    documentRolesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> switchingStepRolesEnumerator = this._parent.SwitchingStepRoles.GetEnumerator();
                try
                {
                    for (
                    ; switchingStepRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = switchingStepRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    switchingStepRolesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> changeItemsEnumerator = this._parent.ChangeItems.GetEnumerator();
                try
                {
                    for (
                    ; changeItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = changeItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    changeItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> skillsEnumerator = this._parent.Skills.GetEnumerator();
                try
                {
                    for (
                    ; skillsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = skillsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    skillsEnumerator.Dispose();
                }
                if ((this._parent.ElectronicAddress != null))
                {
                    array[arrayIndex] = this._parent.ElectronicAddress;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> erpOrganisationRolesEnumerator = this._parent.ErpOrganisationRoles.GetEnumerator();
                try
                {
                    for (
                    ; erpOrganisationRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpOrganisationRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpOrganisationRolesEnumerator.Dispose();
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> laborItemsEnumerator = this._parent.LaborItems.GetEnumerator();
                try
                {
                    for (
                    ; laborItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = laborItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    laborItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> craftsEnumerator = this._parent.Crafts.GetEnumerator();
                try
                {
                    for (
                    ; craftsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = craftsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    craftsEnumerator.Dispose();
                }
                if ((this._parent.MobilePhone != null))
                {
                    array[arrayIndex] = this._parent.MobilePhone;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpCompetency != null))
                {
                    array[arrayIndex] = this._parent.ErpCompetency;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> landPropertyRolesEnumerator = this._parent.LandPropertyRoles.GetEnumerator();
                try
                {
                    for (
                    ; landPropertyRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = landPropertyRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    landPropertyRolesEnumerator.Dispose();
                }
                if ((this._parent.LandlinePhone != null))
                {
                    array[arrayIndex] = this._parent.LandlinePhone;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> measurementValuesEnumerator = this._parent.MeasurementValues.GetEnumerator();
                try
                {
                    for (
                    ; measurementValuesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = measurementValuesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    measurementValuesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> activityRecordsEnumerator = this._parent.ActivityRecords.GetEnumerator();
                try
                {
                    for (
                    ; activityRecordsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = activityRecordsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    activityRecordsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> crewsEnumerator = this._parent.Crews.GetEnumerator();
                try
                {
                    for (
                    ; crewsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = crewsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    crewsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> appointmentsEnumerator = this._parent.Appointments.GetEnumerator();
                try
                {
                    for (
                    ; appointmentsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = appointmentsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    appointmentsEnumerator.Dispose();
                }
                if ((this._parent.ErpPersonnel != null))
                {
                    array[arrayIndex] = this._parent.ErpPersonnel;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CustomerData != null))
                {
                    array[arrayIndex] = this._parent.CustomerData;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ICallBack callBackItem = item.As<ICallBack>();
                if (((callBackItem != null) 
                            && this._parent.CallBacks.Remove(callBackItem)))
                {
                    return true;
                }
                if ((this._parent.ServiceLocation == item))
                {
                    this._parent.ServiceLocation = null;
                    return true;
                }
                IDocErpPersonRole docErpPersonRoleItem = item.As<IDocErpPersonRole>();
                if (((docErpPersonRoleItem != null) 
                            && this._parent.DocumentRoles.Remove(docErpPersonRoleItem)))
                {
                    return true;
                }
                IErpPersonScheduleStepRole erpPersonScheduleStepRoleItem = item.As<IErpPersonScheduleStepRole>();
                if (((erpPersonScheduleStepRoleItem != null) 
                            && this._parent.SwitchingStepRoles.Remove(erpPersonScheduleStepRoleItem)))
                {
                    return true;
                }
                IChangeItem changeItemItem = item.As<IChangeItem>();
                if (((changeItemItem != null) 
                            && this._parent.ChangeItems.Remove(changeItemItem)))
                {
                    return true;
                }
                ISkill skillItem = item.As<ISkill>();
                if (((skillItem != null) 
                            && this._parent.Skills.Remove(skillItem)))
                {
                    return true;
                }
                if ((this._parent.ElectronicAddress == item))
                {
                    this._parent.ElectronicAddress = null;
                    return true;
                }
                IOrgErpPersonRole orgErpPersonRoleItem = item.As<IOrgErpPersonRole>();
                if (((orgErpPersonRoleItem != null) 
                            && this._parent.ErpOrganisationRoles.Remove(orgErpPersonRoleItem)))
                {
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                ILaborItem laborItemItem = item.As<ILaborItem>();
                if (((laborItemItem != null) 
                            && this._parent.LaborItems.Remove(laborItemItem)))
                {
                    return true;
                }
                ICraft craftItem = item.As<ICraft>();
                if (((craftItem != null) 
                            && this._parent.Crafts.Remove(craftItem)))
                {
                    return true;
                }
                if ((this._parent.MobilePhone == item))
                {
                    this._parent.MobilePhone = null;
                    return true;
                }
                if ((this._parent.ErpCompetency == item))
                {
                    this._parent.ErpCompetency = null;
                    return true;
                }
                IPersonPropertyRole personPropertyRoleItem = item.As<IPersonPropertyRole>();
                if (((personPropertyRoleItem != null) 
                            && this._parent.LandPropertyRoles.Remove(personPropertyRoleItem)))
                {
                    return true;
                }
                if ((this._parent.LandlinePhone == item))
                {
                    this._parent.LandlinePhone = null;
                    return true;
                }
                IMeasurementValue measurementValueItem = item.As<IMeasurementValue>();
                if (((measurementValueItem != null) 
                            && this._parent.MeasurementValues.Remove(measurementValueItem)))
                {
                    return true;
                }
                IActivityRecord activityRecordItem = item.As<IActivityRecord>();
                if (((activityRecordItem != null) 
                            && this._parent.ActivityRecords.Remove(activityRecordItem)))
                {
                    return true;
                }
                ICrew crewItem = item.As<ICrew>();
                if (((crewItem != null) 
                            && this._parent.Crews.Remove(crewItem)))
                {
                    return true;
                }
                IAppointment appointmentItem = item.As<IAppointment>();
                if (((appointmentItem != null) 
                            && this._parent.Appointments.Remove(appointmentItem)))
                {
                    return true;
                }
                if ((this._parent.ErpPersonnel == item))
                {
                    this._parent.ErpPersonnel = null;
                    return true;
                }
                if ((this._parent.CustomerData == item))
                {
                    this._parent.CustomerData = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CallBacks).Concat(this._parent.ServiceLocation).Concat(this._parent.DocumentRoles).Concat(this._parent.SwitchingStepRoles).Concat(this._parent.ChangeItems).Concat(this._parent.Skills).Concat(this._parent.ElectronicAddress).Concat(this._parent.ErpOrganisationRoles).Concat(this._parent.Status).Concat(this._parent.LaborItems).Concat(this._parent.Crafts).Concat(this._parent.MobilePhone).Concat(this._parent.ErpCompetency).Concat(this._parent.LandPropertyRoles).Concat(this._parent.LandlinePhone).Concat(this._parent.MeasurementValues).Concat(this._parent.ActivityRecords).Concat(this._parent.Crews).Concat(this._parent.Appointments).Concat(this._parent.ErpPersonnel).Concat(this._parent.CustomerData).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the category property
        /// </summary>
        private sealed class CategoryProxy : ModelPropertyChange<IErpPerson, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CategoryProxy(IErpPerson modelElement) : 
                    base(modelElement, "category")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Category;
                }
                set
                {
                    this.ModelElement.Category = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the firstName property
        /// </summary>
        private sealed class FirstNameProxy : ModelPropertyChange<IErpPerson, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FirstNameProxy(IErpPerson modelElement) : 
                    base(modelElement, "firstName")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.FirstName;
                }
                set
                {
                    this.ModelElement.FirstName = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lastName property
        /// </summary>
        private sealed class LastNameProxy : ModelPropertyChange<IErpPerson, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LastNameProxy(IErpPerson modelElement) : 
                    base(modelElement, "lastName")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.LastName;
                }
                set
                {
                    this.ModelElement.LastName = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the mName property
        /// </summary>
        private sealed class MNameProxy : ModelPropertyChange<IErpPerson, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MNameProxy(IErpPerson modelElement) : 
                    base(modelElement, "mName")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.MName;
                }
                set
                {
                    this.ModelElement.MName = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the governmentID property
        /// </summary>
        private sealed class GovernmentIDProxy : ModelPropertyChange<IErpPerson, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GovernmentIDProxy(IErpPerson modelElement) : 
                    base(modelElement, "governmentID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.GovernmentID;
                }
                set
                {
                    this.ModelElement.GovernmentID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the specialNeed property
        /// </summary>
        private sealed class SpecialNeedProxy : ModelPropertyChange<IErpPerson, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpecialNeedProxy(IErpPerson modelElement) : 
                    base(modelElement, "specialNeed")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.SpecialNeed;
                }
                set
                {
                    this.ModelElement.SpecialNeed = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the prefix property
        /// </summary>
        private sealed class PrefixProxy : ModelPropertyChange<IErpPerson, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PrefixProxy(IErpPerson modelElement) : 
                    base(modelElement, "prefix")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Prefix;
                }
                set
                {
                    this.ModelElement.Prefix = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the suffix property
        /// </summary>
        private sealed class SuffixProxy : ModelPropertyChange<IErpPerson, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SuffixProxy(IErpPerson modelElement) : 
                    base(modelElement, "suffix")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Suffix;
                }
                set
                {
                    this.ModelElement.Suffix = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ServiceLocation property
        /// </summary>
        private sealed class ServiceLocationProxy : ModelPropertyChange<IErpPerson, IServiceLocation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ServiceLocationProxy(IErpPerson modelElement) : 
                    base(modelElement, "ServiceLocation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IServiceLocation Value
            {
                get
                {
                    return this.ModelElement.ServiceLocation;
                }
                set
                {
                    this.ModelElement.ServiceLocation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the electronicAddress property
        /// </summary>
        private sealed class ElectronicAddressProxy : ModelPropertyChange<IErpPerson, IElectronicAddress>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ElectronicAddressProxy(IErpPerson modelElement) : 
                    base(modelElement, "electronicAddress")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectronicAddress Value
            {
                get
                {
                    return this.ModelElement.ElectronicAddress;
                }
                set
                {
                    this.ModelElement.ElectronicAddress = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IErpPerson, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IErpPerson modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the mobilePhone property
        /// </summary>
        private sealed class MobilePhoneProxy : ModelPropertyChange<IErpPerson, ITelephoneNumber>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MobilePhoneProxy(IErpPerson modelElement) : 
                    base(modelElement, "mobilePhone")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITelephoneNumber Value
            {
                get
                {
                    return this.ModelElement.MobilePhone;
                }
                set
                {
                    this.ModelElement.MobilePhone = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpCompetency property
        /// </summary>
        private sealed class ErpCompetencyProxy : ModelPropertyChange<IErpPerson, IErpCompetency>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpCompetencyProxy(IErpPerson modelElement) : 
                    base(modelElement, "ErpCompetency")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpCompetency Value
            {
                get
                {
                    return this.ModelElement.ErpCompetency;
                }
                set
                {
                    this.ModelElement.ErpCompetency = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the landlinePhone property
        /// </summary>
        private sealed class LandlinePhoneProxy : ModelPropertyChange<IErpPerson, ITelephoneNumber>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LandlinePhoneProxy(IErpPerson modelElement) : 
                    base(modelElement, "landlinePhone")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITelephoneNumber Value
            {
                get
                {
                    return this.ModelElement.LandlinePhone;
                }
                set
                {
                    this.ModelElement.LandlinePhone = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpPersonnel property
        /// </summary>
        private sealed class ErpPersonnelProxy : ModelPropertyChange<IErpPerson, IErpPersonnel>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpPersonnelProxy(IErpPerson modelElement) : 
                    base(modelElement, "ErpPersonnel")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpPersonnel Value
            {
                get
                {
                    return this.ModelElement.ErpPersonnel;
                }
                set
                {
                    this.ModelElement.ErpPersonnel = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CustomerData property
        /// </summary>
        private sealed class CustomerDataProxy : ModelPropertyChange<IErpPerson, ICustomer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CustomerDataProxy(IErpPerson modelElement) : 
                    base(modelElement, "CustomerData")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICustomer Value
            {
                get
                {
                    return this.ModelElement.CustomerData;
                }
                set
                {
                    this.ModelElement.CustomerData = value;
                }
            }
        }
    }
}

