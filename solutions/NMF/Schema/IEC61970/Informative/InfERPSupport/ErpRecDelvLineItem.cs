using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport
{
    
    
    /// <summary>
    /// The default implementation of the ErpRecDelvLineItem class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfERPSupport")]
    [XmlNamespacePrefixAttribute("cimInfERPSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
        "RecDelvLineItem")]
    [DebuggerDisplayAttribute("ErpRecDelvLineItem {UUID}")]
    public partial class ErpRecDelvLineItem : IdentifiedObject, IErpRecDelvLineItem, IModelElement
    {
        
        private static Lazy<ITypedElement> _erpPOLineItemReference = new Lazy<ITypedElement>(RetrieveErpPOLineItemReference);
        
        /// <summary>
        /// The backing field for the ErpPOLineItem property
        /// </summary>
        private IErpPOLineItem _erpPOLineItem;
        
        private static Lazy<ITypedElement> _erpInvoiceLineItemReference = new Lazy<ITypedElement>(RetrieveErpInvoiceLineItemReference);
        
        /// <summary>
        /// The backing field for the ErpInvoiceLineItem property
        /// </summary>
        private IErpInvoiceLineItem _erpInvoiceLineItem;
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static Lazy<ITypedElement> _erpReceiveDeliveryReference = new Lazy<ITypedElement>(RetrieveErpReceiveDeliveryReference);
        
        /// <summary>
        /// The backing field for the ErpReceiveDelivery property
        /// </summary>
        private IErpReceiveDelivery _erpReceiveDelivery;
        
        private static Lazy<ITypedElement> _materialItemsReference = new Lazy<ITypedElement>(RetrieveMaterialItemsReference);
        
        /// <summary>
        /// The backing field for the MaterialItems property
        /// </summary>
        private ErpRecDelvLineItemMaterialItemsCollection _materialItems;
        
        private static Lazy<ITypedElement> _assetsReference = new Lazy<ITypedElement>(RetrieveAssetsReference);
        
        /// <summary>
        /// The backing field for the Assets property
        /// </summary>
        private ErpRecDelvLineItemAssetsCollection _assets;
        
        private static IClass _classInstance;
        
        public ErpRecDelvLineItem()
        {
            this._materialItems = new ErpRecDelvLineItemMaterialItemsCollection(this);
            this._materialItems.CollectionChanging += this.MaterialItemsCollectionChanging;
            this._materialItems.CollectionChanged += this.MaterialItemsCollectionChanged;
            this._assets = new ErpRecDelvLineItemAssetsCollection(this);
            this._assets.CollectionChanging += this.AssetsCollectionChanging;
            this._assets.CollectionChanged += this.AssetsCollectionChanged;
        }
        
        /// <summary>
        /// The ErpPOLineItem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpRecDelLineItem")]
        public virtual IErpPOLineItem ErpPOLineItem
        {
            get
            {
                return this._erpPOLineItem;
            }
            set
            {
                if ((this._erpPOLineItem != value))
                {
                    IErpPOLineItem old = this._erpPOLineItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpPOLineItemChanging(e);
                    this.OnPropertyChanging("ErpPOLineItem", e, _erpPOLineItemReference);
                    this._erpPOLineItem = value;
                    if ((old != null))
                    {
                        old.ErpRecDelLineItem = null;
                        old.Deleted -= this.OnResetErpPOLineItem;
                    }
                    if ((value != null))
                    {
                        value.ErpRecDelLineItem = this;
                        value.Deleted += this.OnResetErpPOLineItem;
                    }
                    this.OnErpPOLineItemChanged(e);
                    this.OnPropertyChanged("ErpPOLineItem", e, _erpPOLineItemReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpInvoiceLineItem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpRecDelvLineItem")]
        public virtual IErpInvoiceLineItem ErpInvoiceLineItem
        {
            get
            {
                return this._erpInvoiceLineItem;
            }
            set
            {
                if ((this._erpInvoiceLineItem != value))
                {
                    IErpInvoiceLineItem old = this._erpInvoiceLineItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpInvoiceLineItemChanging(e);
                    this.OnPropertyChanging("ErpInvoiceLineItem", e, _erpInvoiceLineItemReference);
                    this._erpInvoiceLineItem = value;
                    if ((old != null))
                    {
                        old.ErpRecDelvLineItem = null;
                        old.Deleted -= this.OnResetErpInvoiceLineItem;
                    }
                    if ((value != null))
                    {
                        value.ErpRecDelvLineItem = this;
                        value.Deleted += this.OnResetErpInvoiceLineItem;
                    }
                    this.OnErpInvoiceLineItemChanged(e);
                    this.OnPropertyChanged("ErpInvoiceLineItem", e, _erpInvoiceLineItemReference);
                }
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpReceiveDelivery property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpRecDelvLineItems")]
        public virtual IErpReceiveDelivery ErpReceiveDelivery
        {
            get
            {
                return this._erpReceiveDelivery;
            }
            set
            {
                if ((this._erpReceiveDelivery != value))
                {
                    IErpReceiveDelivery old = this._erpReceiveDelivery;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpReceiveDeliveryChanging(e);
                    this.OnPropertyChanging("ErpReceiveDelivery", e, _erpReceiveDeliveryReference);
                    this._erpReceiveDelivery = value;
                    if ((old != null))
                    {
                        old.ErpRecDelvLineItems.Remove(this);
                        old.Deleted -= this.OnResetErpReceiveDelivery;
                    }
                    if ((value != null))
                    {
                        value.ErpRecDelvLineItems.Add(this);
                        value.Deleted += this.OnResetErpReceiveDelivery;
                    }
                    this.OnErpReceiveDeliveryChanged(e);
                    this.OnPropertyChanged("ErpReceiveDelivery", e, _erpReceiveDeliveryReference);
                }
            }
        }
        
        /// <summary>
        /// The MaterialItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpRecDelvLineItems")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMaterialItem> MaterialItems
        {
            get
            {
                return this._materialItems;
            }
        }
        
        /// <summary>
        /// The Assets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpRecDeliveryItems")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAsset> Assets
        {
            get
            {
                return this._assets;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ErpRecDelvLineItemReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                            "RecDelvLineItem")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ErpPOLineItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpPOLineItemChanging;
        
        /// <summary>
        /// Gets fired when the ErpPOLineItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpPOLineItemChanged;
        
        /// <summary>
        /// Gets fired before the ErpInvoiceLineItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpInvoiceLineItemChanging;
        
        /// <summary>
        /// Gets fired when the ErpInvoiceLineItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpInvoiceLineItemChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the ErpReceiveDelivery property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpReceiveDeliveryChanging;
        
        /// <summary>
        /// Gets fired when the ErpReceiveDelivery property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpReceiveDeliveryChanged;
        
        private static ITypedElement RetrieveErpPOLineItemReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpRecDelvLineItem.ClassInstance)).Resolve("ErpPOLineItem")));
        }
        
        /// <summary>
        /// Raises the ErpPOLineItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpPOLineItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpPOLineItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpPOLineItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpPOLineItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpPOLineItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpPOLineItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpPOLineItem(object sender, System.EventArgs eventArgs)
        {
            this.ErpPOLineItem = null;
        }
        
        private static ITypedElement RetrieveErpInvoiceLineItemReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpRecDelvLineItem.ClassInstance)).Resolve("ErpInvoiceLineItem")));
        }
        
        /// <summary>
        /// Raises the ErpInvoiceLineItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpInvoiceLineItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpInvoiceLineItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpInvoiceLineItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpInvoiceLineItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpInvoiceLineItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpInvoiceLineItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpInvoiceLineItem(object sender, System.EventArgs eventArgs)
        {
            this.ErpInvoiceLineItem = null;
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpRecDelvLineItem.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        private static ITypedElement RetrieveErpReceiveDeliveryReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpRecDelvLineItem.ClassInstance)).Resolve("ErpReceiveDelivery")));
        }
        
        /// <summary>
        /// Raises the ErpReceiveDeliveryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpReceiveDeliveryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpReceiveDeliveryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpReceiveDeliveryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpReceiveDeliveryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpReceiveDeliveryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpReceiveDelivery property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpReceiveDelivery(object sender, System.EventArgs eventArgs)
        {
            this.ErpReceiveDelivery = null;
        }
        
        private static ITypedElement RetrieveMaterialItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpRecDelvLineItem.ClassInstance)).Resolve("MaterialItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MaterialItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MaterialItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("MaterialItems", e, _materialItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MaterialItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MaterialItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MaterialItems", e, _materialItemsReference);
        }
        
        private static ITypedElement RetrieveAssetsReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpRecDelvLineItem.ClassInstance)).Resolve("Assets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Assets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Assets", e, _assetsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Assets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Assets", e, _assetsReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "MATERIALITEMS"))
            {
                return this._materialItems;
            }
            if ((feature == "ASSETS"))
            {
                return this._assets;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ERPPOLINEITEM"))
            {
                this.ErpPOLineItem = ((IErpPOLineItem)(value));
                return;
            }
            if ((feature == "ERPINVOICELINEITEM"))
            {
                this.ErpInvoiceLineItem = ((IErpInvoiceLineItem)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "ERPRECEIVEDELIVERY"))
            {
                this.ErpReceiveDelivery = ((IErpReceiveDelivery)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ErpPOLineItem"))
            {
                return new ErpPOLineItemProxy(this);
            }
            if ((attribute == "ErpInvoiceLineItem"))
            {
                return new ErpInvoiceLineItemProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((attribute == "ErpReceiveDelivery"))
            {
                return new ErpReceiveDeliveryProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ErpPOLineItem"))
            {
                return new ErpPOLineItemProxy(this);
            }
            if ((reference == "ErpInvoiceLineItem"))
            {
                return new ErpInvoiceLineItemProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((reference == "ErpReceiveDelivery"))
            {
                return new ErpReceiveDeliveryProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                        "RecDelvLineItem")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ErpRecDelvLineItem class
        /// </summary>
        public class ErpRecDelvLineItemReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ErpRecDelvLineItem _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ErpRecDelvLineItemReferencedElementsCollection(ErpRecDelvLineItem parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ErpPOLineItem != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpInvoiceLineItem != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpReceiveDelivery != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.MaterialItems.Count);
                    count = (count + this._parent.Assets.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ErpPOLineItemChanged += this.PropagateValueChanges;
                this._parent.ErpInvoiceLineItemChanged += this.PropagateValueChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.ErpReceiveDeliveryChanged += this.PropagateValueChanges;
                this._parent.MaterialItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Assets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ErpPOLineItemChanged -= this.PropagateValueChanges;
                this._parent.ErpInvoiceLineItemChanged -= this.PropagateValueChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.ErpReceiveDeliveryChanged -= this.PropagateValueChanges;
                this._parent.MaterialItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Assets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ErpPOLineItem == null))
                {
                    IErpPOLineItem erpPOLineItemCasted = item.As<IErpPOLineItem>();
                    if ((erpPOLineItemCasted != null))
                    {
                        this._parent.ErpPOLineItem = erpPOLineItemCasted;
                        return;
                    }
                }
                if ((this._parent.ErpInvoiceLineItem == null))
                {
                    IErpInvoiceLineItem erpInvoiceLineItemCasted = item.As<IErpInvoiceLineItem>();
                    if ((erpInvoiceLineItemCasted != null))
                    {
                        this._parent.ErpInvoiceLineItem = erpInvoiceLineItemCasted;
                        return;
                    }
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                if ((this._parent.ErpReceiveDelivery == null))
                {
                    IErpReceiveDelivery erpReceiveDeliveryCasted = item.As<IErpReceiveDelivery>();
                    if ((erpReceiveDeliveryCasted != null))
                    {
                        this._parent.ErpReceiveDelivery = erpReceiveDeliveryCasted;
                        return;
                    }
                }
                IMaterialItem materialItemsCasted = item.As<IMaterialItem>();
                if ((materialItemsCasted != null))
                {
                    this._parent.MaterialItems.Add(materialItemsCasted);
                }
                IAsset assetsCasted = item.As<IAsset>();
                if ((assetsCasted != null))
                {
                    this._parent.Assets.Add(assetsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ErpPOLineItem = null;
                this._parent.ErpInvoiceLineItem = null;
                this._parent.Status = null;
                this._parent.ErpReceiveDelivery = null;
                this._parent.MaterialItems.Clear();
                this._parent.Assets.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ErpPOLineItem))
                {
                    return true;
                }
                if ((item == this._parent.ErpInvoiceLineItem))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if ((item == this._parent.ErpReceiveDelivery))
                {
                    return true;
                }
                if (this._parent.MaterialItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.Assets.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ErpPOLineItem != null))
                {
                    array[arrayIndex] = this._parent.ErpPOLineItem;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpInvoiceLineItem != null))
                {
                    array[arrayIndex] = this._parent.ErpInvoiceLineItem;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpReceiveDelivery != null))
                {
                    array[arrayIndex] = this._parent.ErpReceiveDelivery;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> materialItemsEnumerator = this._parent.MaterialItems.GetEnumerator();
                try
                {
                    for (
                    ; materialItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = materialItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    materialItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> assetsEnumerator = this._parent.Assets.GetEnumerator();
                try
                {
                    for (
                    ; assetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = assetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    assetsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ErpPOLineItem == item))
                {
                    this._parent.ErpPOLineItem = null;
                    return true;
                }
                if ((this._parent.ErpInvoiceLineItem == item))
                {
                    this._parent.ErpInvoiceLineItem = null;
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                if ((this._parent.ErpReceiveDelivery == item))
                {
                    this._parent.ErpReceiveDelivery = null;
                    return true;
                }
                IMaterialItem materialItemItem = item.As<IMaterialItem>();
                if (((materialItemItem != null) 
                            && this._parent.MaterialItems.Remove(materialItemItem)))
                {
                    return true;
                }
                IAsset assetItem = item.As<IAsset>();
                if (((assetItem != null) 
                            && this._parent.Assets.Remove(assetItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ErpPOLineItem).Concat(this._parent.ErpInvoiceLineItem).Concat(this._parent.Status).Concat(this._parent.ErpReceiveDelivery).Concat(this._parent.MaterialItems).Concat(this._parent.Assets).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpPOLineItem property
        /// </summary>
        private sealed class ErpPOLineItemProxy : ModelPropertyChange<IErpRecDelvLineItem, IErpPOLineItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpPOLineItemProxy(IErpRecDelvLineItem modelElement) : 
                    base(modelElement, "ErpPOLineItem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpPOLineItem Value
            {
                get
                {
                    return this.ModelElement.ErpPOLineItem;
                }
                set
                {
                    this.ModelElement.ErpPOLineItem = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpInvoiceLineItem property
        /// </summary>
        private sealed class ErpInvoiceLineItemProxy : ModelPropertyChange<IErpRecDelvLineItem, IErpInvoiceLineItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpInvoiceLineItemProxy(IErpRecDelvLineItem modelElement) : 
                    base(modelElement, "ErpInvoiceLineItem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpInvoiceLineItem Value
            {
                get
                {
                    return this.ModelElement.ErpInvoiceLineItem;
                }
                set
                {
                    this.ModelElement.ErpInvoiceLineItem = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IErpRecDelvLineItem, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IErpRecDelvLineItem modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpReceiveDelivery property
        /// </summary>
        private sealed class ErpReceiveDeliveryProxy : ModelPropertyChange<IErpRecDelvLineItem, IErpReceiveDelivery>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpReceiveDeliveryProxy(IErpRecDelvLineItem modelElement) : 
                    base(modelElement, "ErpReceiveDelivery")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpReceiveDelivery Value
            {
                get
                {
                    return this.ModelElement.ErpReceiveDelivery;
                }
                set
                {
                    this.ModelElement.ErpReceiveDelivery = value;
                }
            }
        }
    }
}

