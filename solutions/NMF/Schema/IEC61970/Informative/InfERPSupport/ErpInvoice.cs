using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport
{
    
    
    /// <summary>
    /// The default implementation of the ErpInvoice class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfERPSupport")]
    [XmlNamespacePrefixAttribute("cimInfERPSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
        "Invoice")]
    [DebuggerDisplayAttribute("ErpInvoice {UUID}")]
    public partial class ErpInvoice : Document, IErpInvoice, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Amount property
        /// </summary>
        private float _amount;
        
        private static Lazy<ITypedElement> _amountAttribute = new Lazy<ITypedElement>(RetrieveAmountAttribute);
        
        /// <summary>
        /// The backing field for the Kind property
        /// </summary>
        private Nullable<ErpInvoiceKind> _kind;
        
        private static Lazy<ITypedElement> _kindAttribute = new Lazy<ITypedElement>(RetrieveKindAttribute);
        
        /// <summary>
        /// The backing field for the TransactionDateTime property
        /// </summary>
        private DateTime _transactionDateTime;
        
        private static Lazy<ITypedElement> _transactionDateTimeAttribute = new Lazy<ITypedElement>(RetrieveTransactionDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the ReferenceNumber property
        /// </summary>
        private string _referenceNumber;
        
        private static Lazy<ITypedElement> _referenceNumberAttribute = new Lazy<ITypedElement>(RetrieveReferenceNumberAttribute);
        
        /// <summary>
        /// The backing field for the DueDate property
        /// </summary>
        private string _dueDate;
        
        private static Lazy<ITypedElement> _dueDateAttribute = new Lazy<ITypedElement>(RetrieveDueDateAttribute);
        
        /// <summary>
        /// The backing field for the MailedDate property
        /// </summary>
        private string _mailedDate;
        
        private static Lazy<ITypedElement> _mailedDateAttribute = new Lazy<ITypedElement>(RetrieveMailedDateAttribute);
        
        /// <summary>
        /// The backing field for the TransferType property
        /// </summary>
        private string _transferType;
        
        private static Lazy<ITypedElement> _transferTypeAttribute = new Lazy<ITypedElement>(RetrieveTransferTypeAttribute);
        
        /// <summary>
        /// The backing field for the ProForma property
        /// </summary>
        private bool _proForma;
        
        private static Lazy<ITypedElement> _proFormaAttribute = new Lazy<ITypedElement>(RetrieveProFormaAttribute);
        
        /// <summary>
        /// The backing field for the BillMediaKind property
        /// </summary>
        private Nullable<BillMediaKind> _billMediaKind;
        
        private static Lazy<ITypedElement> _billMediaKindAttribute = new Lazy<ITypedElement>(RetrieveBillMediaKindAttribute);
        
        private static Lazy<ITypedElement> _customerAccountReference = new Lazy<ITypedElement>(RetrieveCustomerAccountReference);
        
        /// <summary>
        /// The backing field for the CustomerAccount property
        /// </summary>
        private ICustomerAccount _customerAccount;
        
        private static Lazy<ITypedElement> _erpInvoiceLineItemsReference = new Lazy<ITypedElement>(RetrieveErpInvoiceLineItemsReference);
        
        /// <summary>
        /// The backing field for the ErpInvoiceLineItems property
        /// </summary>
        private ErpInvoiceErpInvoiceLineItemsCollection _erpInvoiceLineItems;
        
        private static IClass _classInstance;
        
        public ErpInvoice()
        {
            this._erpInvoiceLineItems = new ErpInvoiceErpInvoiceLineItemsCollection(this);
            this._erpInvoiceLineItems.CollectionChanging += this.ErpInvoiceLineItemsCollectionChanging;
            this._erpInvoiceLineItems.CollectionChanged += this.ErpInvoiceLineItemsCollectionChanged;
        }
        
        /// <summary>
        /// The amount property
        /// </summary>
        [XmlElementNameAttribute("amount")]
        [XmlAttributeAttribute(true)]
        public virtual float Amount
        {
            get
            {
                return this._amount;
            }
            set
            {
                if ((this._amount != value))
                {
                    float old = this._amount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmountChanging(e);
                    this.OnPropertyChanging("Amount", e, _amountAttribute);
                    this._amount = value;
                    this.OnAmountChanged(e);
                    this.OnPropertyChanged("Amount", e, _amountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The kind property
        /// </summary>
        [XmlElementNameAttribute("kind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<ErpInvoiceKind> Kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                if ((this._kind != value))
                {
                    Nullable<ErpInvoiceKind> old = this._kind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKindChanging(e);
                    this.OnPropertyChanging("Kind", e, _kindAttribute);
                    this._kind = value;
                    this.OnKindChanged(e);
                    this.OnPropertyChanged("Kind", e, _kindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The transactionDateTime property
        /// </summary>
        [XmlElementNameAttribute("transactionDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime TransactionDateTime
        {
            get
            {
                return this._transactionDateTime;
            }
            set
            {
                if ((this._transactionDateTime != value))
                {
                    DateTime old = this._transactionDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransactionDateTimeChanging(e);
                    this.OnPropertyChanging("TransactionDateTime", e, _transactionDateTimeAttribute);
                    this._transactionDateTime = value;
                    this.OnTransactionDateTimeChanged(e);
                    this.OnPropertyChanged("TransactionDateTime", e, _transactionDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The referenceNumber property
        /// </summary>
        [XmlElementNameAttribute("referenceNumber")]
        [XmlAttributeAttribute(true)]
        public virtual string ReferenceNumber
        {
            get
            {
                return this._referenceNumber;
            }
            set
            {
                if ((this._referenceNumber != value))
                {
                    string old = this._referenceNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReferenceNumberChanging(e);
                    this.OnPropertyChanging("ReferenceNumber", e, _referenceNumberAttribute);
                    this._referenceNumber = value;
                    this.OnReferenceNumberChanged(e);
                    this.OnPropertyChanged("ReferenceNumber", e, _referenceNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The dueDate property
        /// </summary>
        [XmlElementNameAttribute("dueDate")]
        [XmlAttributeAttribute(true)]
        public virtual string DueDate
        {
            get
            {
                return this._dueDate;
            }
            set
            {
                if ((this._dueDate != value))
                {
                    string old = this._dueDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDueDateChanging(e);
                    this.OnPropertyChanging("DueDate", e, _dueDateAttribute);
                    this._dueDate = value;
                    this.OnDueDateChanged(e);
                    this.OnPropertyChanged("DueDate", e, _dueDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The mailedDate property
        /// </summary>
        [XmlElementNameAttribute("mailedDate")]
        [XmlAttributeAttribute(true)]
        public virtual string MailedDate
        {
            get
            {
                return this._mailedDate;
            }
            set
            {
                if ((this._mailedDate != value))
                {
                    string old = this._mailedDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMailedDateChanging(e);
                    this.OnPropertyChanging("MailedDate", e, _mailedDateAttribute);
                    this._mailedDate = value;
                    this.OnMailedDateChanged(e);
                    this.OnPropertyChanged("MailedDate", e, _mailedDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The transferType property
        /// </summary>
        [XmlElementNameAttribute("transferType")]
        [XmlAttributeAttribute(true)]
        public virtual string TransferType
        {
            get
            {
                return this._transferType;
            }
            set
            {
                if ((this._transferType != value))
                {
                    string old = this._transferType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransferTypeChanging(e);
                    this.OnPropertyChanging("TransferType", e, _transferTypeAttribute);
                    this._transferType = value;
                    this.OnTransferTypeChanged(e);
                    this.OnPropertyChanged("TransferType", e, _transferTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The proForma property
        /// </summary>
        [XmlElementNameAttribute("proForma")]
        [XmlAttributeAttribute(true)]
        public virtual bool ProForma
        {
            get
            {
                return this._proForma;
            }
            set
            {
                if ((this._proForma != value))
                {
                    bool old = this._proForma;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnProFormaChanging(e);
                    this.OnPropertyChanging("ProForma", e, _proFormaAttribute);
                    this._proForma = value;
                    this.OnProFormaChanged(e);
                    this.OnPropertyChanged("ProForma", e, _proFormaAttribute);
                }
            }
        }
        
        /// <summary>
        /// The billMediaKind property
        /// </summary>
        [XmlElementNameAttribute("billMediaKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<BillMediaKind> BillMediaKind
        {
            get
            {
                return this._billMediaKind;
            }
            set
            {
                if ((this._billMediaKind != value))
                {
                    Nullable<BillMediaKind> old = this._billMediaKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBillMediaKindChanging(e);
                    this.OnPropertyChanging("BillMediaKind", e, _billMediaKindAttribute);
                    this._billMediaKind = value;
                    this.OnBillMediaKindChanged(e);
                    this.OnPropertyChanged("BillMediaKind", e, _billMediaKindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The CustomerAccount property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpInvoicees")]
        public virtual ICustomerAccount CustomerAccount
        {
            get
            {
                return this._customerAccount;
            }
            set
            {
                if ((this._customerAccount != value))
                {
                    ICustomerAccount old = this._customerAccount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCustomerAccountChanging(e);
                    this.OnPropertyChanging("CustomerAccount", e, _customerAccountReference);
                    this._customerAccount = value;
                    if ((old != null))
                    {
                        old.ErpInvoicees.Remove(this);
                        old.Deleted -= this.OnResetCustomerAccount;
                    }
                    if ((value != null))
                    {
                        value.ErpInvoicees.Add(this);
                        value.Deleted += this.OnResetCustomerAccount;
                    }
                    this.OnCustomerAccountChanged(e);
                    this.OnPropertyChanged("CustomerAccount", e, _customerAccountReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpInvoiceLineItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpInvoice")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpInvoiceLineItem> ErpInvoiceLineItems
        {
            get
            {
                return this._erpInvoiceLineItems;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ErpInvoiceReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                            "Invoice")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Amount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmountChanging;
        
        /// <summary>
        /// Gets fired when the Amount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmountChanged;
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        /// <summary>
        /// Gets fired before the TransactionDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransactionDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the TransactionDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransactionDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the ReferenceNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReferenceNumberChanging;
        
        /// <summary>
        /// Gets fired when the ReferenceNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReferenceNumberChanged;
        
        /// <summary>
        /// Gets fired before the DueDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DueDateChanging;
        
        /// <summary>
        /// Gets fired when the DueDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DueDateChanged;
        
        /// <summary>
        /// Gets fired before the MailedDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MailedDateChanging;
        
        /// <summary>
        /// Gets fired when the MailedDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MailedDateChanged;
        
        /// <summary>
        /// Gets fired before the TransferType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransferTypeChanging;
        
        /// <summary>
        /// Gets fired when the TransferType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransferTypeChanged;
        
        /// <summary>
        /// Gets fired before the ProForma property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProFormaChanging;
        
        /// <summary>
        /// Gets fired when the ProForma property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProFormaChanged;
        
        /// <summary>
        /// Gets fired before the BillMediaKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillMediaKindChanging;
        
        /// <summary>
        /// Gets fired when the BillMediaKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillMediaKindChanged;
        
        /// <summary>
        /// Gets fired before the CustomerAccount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerAccountChanging;
        
        /// <summary>
        /// Gets fired when the CustomerAccount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerAccountChanged;
        
        private static ITypedElement RetrieveAmountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoice.ClassInstance)).Resolve("amount")));
        }
        
        /// <summary>
        /// Raises the AmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoice.ClassInstance)).Resolve("kind")));
        }
        
        /// <summary>
        /// Raises the KindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransactionDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoice.ClassInstance)).Resolve("transactionDateTime")));
        }
        
        /// <summary>
        /// Raises the TransactionDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransactionDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransactionDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransactionDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransactionDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransactionDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReferenceNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoice.ClassInstance)).Resolve("referenceNumber")));
        }
        
        /// <summary>
        /// Raises the ReferenceNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReferenceNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReferenceNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReferenceNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReferenceNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReferenceNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDueDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoice.ClassInstance)).Resolve("dueDate")));
        }
        
        /// <summary>
        /// Raises the DueDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDueDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DueDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DueDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDueDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DueDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMailedDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoice.ClassInstance)).Resolve("mailedDate")));
        }
        
        /// <summary>
        /// Raises the MailedDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMailedDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MailedDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MailedDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMailedDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MailedDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransferTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoice.ClassInstance)).Resolve("transferType")));
        }
        
        /// <summary>
        /// Raises the TransferTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransferTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransferTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransferTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransferTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransferTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveProFormaAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoice.ClassInstance)).Resolve("proForma")));
        }
        
        /// <summary>
        /// Raises the ProFormaChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProFormaChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProFormaChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ProFormaChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProFormaChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProFormaChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBillMediaKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoice.ClassInstance)).Resolve("billMediaKind")));
        }
        
        /// <summary>
        /// Raises the BillMediaKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillMediaKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillMediaKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BillMediaKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillMediaKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillMediaKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCustomerAccountReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoice.ClassInstance)).Resolve("CustomerAccount")));
        }
        
        /// <summary>
        /// Raises the CustomerAccountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerAccountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerAccountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CustomerAccountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerAccountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerAccountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CustomerAccount property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCustomerAccount(object sender, System.EventArgs eventArgs)
        {
            this.CustomerAccount = null;
        }
        
        private static ITypedElement RetrieveErpInvoiceLineItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpInvoice.ClassInstance)).Resolve("ErpInvoiceLineItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpInvoiceLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpInvoiceLineItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ErpInvoiceLineItems", e, _erpInvoiceLineItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpInvoiceLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpInvoiceLineItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpInvoiceLineItems", e, _erpInvoiceLineItemsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "AMOUNT"))
            {
                return this.Amount;
            }
            if ((attribute == "KIND"))
            {
                return this.Kind;
            }
            if ((attribute == "TRANSACTIONDATETIME"))
            {
                return this.TransactionDateTime;
            }
            if ((attribute == "REFERENCENUMBER"))
            {
                return this.ReferenceNumber;
            }
            if ((attribute == "DUEDATE"))
            {
                return this.DueDate;
            }
            if ((attribute == "MAILEDDATE"))
            {
                return this.MailedDate;
            }
            if ((attribute == "TRANSFERTYPE"))
            {
                return this.TransferType;
            }
            if ((attribute == "PROFORMA"))
            {
                return this.ProForma;
            }
            if ((attribute == "BILLMEDIAKIND"))
            {
                return this.BillMediaKind;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ERPINVOICELINEITEMS"))
            {
                return this._erpInvoiceLineItems;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CUSTOMERACCOUNT"))
            {
                this.CustomerAccount = ((ICustomerAccount)(value));
                return;
            }
            if ((feature == "AMOUNT"))
            {
                this.Amount = ((float)(value));
                return;
            }
            if ((feature == "KIND"))
            {
                this.Kind = ((ErpInvoiceKind)(value));
                return;
            }
            if ((feature == "TRANSACTIONDATETIME"))
            {
                this.TransactionDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "REFERENCENUMBER"))
            {
                this.ReferenceNumber = ((string)(value));
                return;
            }
            if ((feature == "DUEDATE"))
            {
                this.DueDate = ((string)(value));
                return;
            }
            if ((feature == "MAILEDDATE"))
            {
                this.MailedDate = ((string)(value));
                return;
            }
            if ((feature == "TRANSFERTYPE"))
            {
                this.TransferType = ((string)(value));
                return;
            }
            if ((feature == "PROFORMA"))
            {
                this.ProForma = ((bool)(value));
                return;
            }
            if ((feature == "BILLMEDIAKIND"))
            {
                this.BillMediaKind = ((BillMediaKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CustomerAccount"))
            {
                return new CustomerAccountProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CustomerAccount"))
            {
                return new CustomerAccountProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                        "Invoice")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ErpInvoice class
        /// </summary>
        public class ErpInvoiceReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ErpInvoice _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ErpInvoiceReferencedElementsCollection(ErpInvoice parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.CustomerAccount != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ErpInvoiceLineItems.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CustomerAccountChanged += this.PropagateValueChanges;
                this._parent.ErpInvoiceLineItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CustomerAccountChanged -= this.PropagateValueChanges;
                this._parent.ErpInvoiceLineItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.CustomerAccount == null))
                {
                    ICustomerAccount customerAccountCasted = item.As<ICustomerAccount>();
                    if ((customerAccountCasted != null))
                    {
                        this._parent.CustomerAccount = customerAccountCasted;
                        return;
                    }
                }
                IErpInvoiceLineItem erpInvoiceLineItemsCasted = item.As<IErpInvoiceLineItem>();
                if ((erpInvoiceLineItemsCasted != null))
                {
                    this._parent.ErpInvoiceLineItems.Add(erpInvoiceLineItemsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CustomerAccount = null;
                this._parent.ErpInvoiceLineItems.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.CustomerAccount))
                {
                    return true;
                }
                if (this._parent.ErpInvoiceLineItems.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.CustomerAccount != null))
                {
                    array[arrayIndex] = this._parent.CustomerAccount;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> erpInvoiceLineItemsEnumerator = this._parent.ErpInvoiceLineItems.GetEnumerator();
                try
                {
                    for (
                    ; erpInvoiceLineItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpInvoiceLineItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpInvoiceLineItemsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.CustomerAccount == item))
                {
                    this._parent.CustomerAccount = null;
                    return true;
                }
                IErpInvoiceLineItem erpInvoiceLineItemItem = item.As<IErpInvoiceLineItem>();
                if (((erpInvoiceLineItemItem != null) 
                            && this._parent.ErpInvoiceLineItems.Remove(erpInvoiceLineItemItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CustomerAccount).Concat(this._parent.ErpInvoiceLineItems).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the amount property
        /// </summary>
        private sealed class AmountProxy : ModelPropertyChange<IErpInvoice, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AmountProxy(IErpInvoice modelElement) : 
                    base(modelElement, "amount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Amount;
                }
                set
                {
                    this.ModelElement.Amount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kind property
        /// </summary>
        private sealed class KindProxy : ModelPropertyChange<IErpInvoice, Nullable<ErpInvoiceKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KindProxy(IErpInvoice modelElement) : 
                    base(modelElement, "kind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<ErpInvoiceKind> Value
            {
                get
                {
                    return this.ModelElement.Kind;
                }
                set
                {
                    this.ModelElement.Kind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the transactionDateTime property
        /// </summary>
        private sealed class TransactionDateTimeProxy : ModelPropertyChange<IErpInvoice, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransactionDateTimeProxy(IErpInvoice modelElement) : 
                    base(modelElement, "transactionDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.TransactionDateTime;
                }
                set
                {
                    this.ModelElement.TransactionDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the referenceNumber property
        /// </summary>
        private sealed class ReferenceNumberProxy : ModelPropertyChange<IErpInvoice, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReferenceNumberProxy(IErpInvoice modelElement) : 
                    base(modelElement, "referenceNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ReferenceNumber;
                }
                set
                {
                    this.ModelElement.ReferenceNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dueDate property
        /// </summary>
        private sealed class DueDateProxy : ModelPropertyChange<IErpInvoice, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DueDateProxy(IErpInvoice modelElement) : 
                    base(modelElement, "dueDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.DueDate;
                }
                set
                {
                    this.ModelElement.DueDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the mailedDate property
        /// </summary>
        private sealed class MailedDateProxy : ModelPropertyChange<IErpInvoice, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MailedDateProxy(IErpInvoice modelElement) : 
                    base(modelElement, "mailedDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.MailedDate;
                }
                set
                {
                    this.ModelElement.MailedDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the transferType property
        /// </summary>
        private sealed class TransferTypeProxy : ModelPropertyChange<IErpInvoice, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransferTypeProxy(IErpInvoice modelElement) : 
                    base(modelElement, "transferType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.TransferType;
                }
                set
                {
                    this.ModelElement.TransferType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the proForma property
        /// </summary>
        private sealed class ProFormaProxy : ModelPropertyChange<IErpInvoice, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProFormaProxy(IErpInvoice modelElement) : 
                    base(modelElement, "proForma")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.ProForma;
                }
                set
                {
                    this.ModelElement.ProForma = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the billMediaKind property
        /// </summary>
        private sealed class BillMediaKindProxy : ModelPropertyChange<IErpInvoice, Nullable<BillMediaKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BillMediaKindProxy(IErpInvoice modelElement) : 
                    base(modelElement, "billMediaKind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<BillMediaKind> Value
            {
                get
                {
                    return this.ModelElement.BillMediaKind;
                }
                set
                {
                    this.ModelElement.BillMediaKind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CustomerAccount property
        /// </summary>
        private sealed class CustomerAccountProxy : ModelPropertyChange<IErpInvoice, ICustomerAccount>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CustomerAccountProxy(IErpInvoice modelElement) : 
                    base(modelElement, "CustomerAccount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICustomerAccount Value
            {
                get
                {
                    return this.ModelElement.CustomerAccount;
                }
                set
                {
                    this.ModelElement.CustomerAccount = value;
                }
            }
        }
    }
}

