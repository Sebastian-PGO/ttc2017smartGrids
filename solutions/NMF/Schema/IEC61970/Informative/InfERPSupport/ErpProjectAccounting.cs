using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport
{
    
    
    /// <summary>
    /// The default implementation of the ErpProjectAccounting class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfERPSupport")]
    [XmlNamespacePrefixAttribute("cimInfERPSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
        "ProjectAccounting")]
    [DebuggerDisplayAttribute("ErpProjectAccounting {UUID}")]
    public partial class ErpProjectAccounting : Document, IErpProjectAccounting, IModelElement
    {
        
        private static Lazy<ITypedElement> _projectsReference = new Lazy<ITypedElement>(RetrieveProjectsReference);
        
        /// <summary>
        /// The backing field for the Projects property
        /// </summary>
        private ErpProjectAccountingProjectsCollection _projects;
        
        private static Lazy<ITypedElement> _workCostDetailsReference = new Lazy<ITypedElement>(RetrieveWorkCostDetailsReference);
        
        /// <summary>
        /// The backing field for the WorkCostDetails property
        /// </summary>
        private ErpProjectAccountingWorkCostDetailsCollection _workCostDetails;
        
        private static Lazy<ITypedElement> _erpTimeEntriesReference = new Lazy<ITypedElement>(RetrieveErpTimeEntriesReference);
        
        /// <summary>
        /// The backing field for the ErpTimeEntries property
        /// </summary>
        private ErpProjectAccountingErpTimeEntriesCollection _erpTimeEntries;
        
        private static Lazy<ITypedElement> _worksReference = new Lazy<ITypedElement>(RetrieveWorksReference);
        
        /// <summary>
        /// The backing field for the Works property
        /// </summary>
        private ErpProjectAccountingWorksCollection _works;
        
        private static IClass _classInstance;
        
        public ErpProjectAccounting()
        {
            this._projects = new ErpProjectAccountingProjectsCollection(this);
            this._projects.CollectionChanging += this.ProjectsCollectionChanging;
            this._projects.CollectionChanged += this.ProjectsCollectionChanged;
            this._workCostDetails = new ErpProjectAccountingWorkCostDetailsCollection(this);
            this._workCostDetails.CollectionChanging += this.WorkCostDetailsCollectionChanging;
            this._workCostDetails.CollectionChanged += this.WorkCostDetailsCollectionChanged;
            this._erpTimeEntries = new ErpProjectAccountingErpTimeEntriesCollection(this);
            this._erpTimeEntries.CollectionChanging += this.ErpTimeEntriesCollectionChanging;
            this._erpTimeEntries.CollectionChanged += this.ErpTimeEntriesCollectionChanged;
            this._works = new ErpProjectAccountingWorksCollection(this);
            this._works.CollectionChanging += this.WorksCollectionChanging;
            this._works.CollectionChanged += this.WorksCollectionChanged;
        }
        
        /// <summary>
        /// The Projects property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpProjectAccounting")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IProject> Projects
        {
            get
            {
                return this._projects;
            }
        }
        
        /// <summary>
        /// The WorkCostDetails property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpProjectAccounting")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWorkCostDetail> WorkCostDetails
        {
            get
            {
                return this._workCostDetails;
            }
        }
        
        /// <summary>
        /// The ErpTimeEntries property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpProjectAccounting")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpTimeEntry> ErpTimeEntries
        {
            get
            {
                return this._erpTimeEntries;
            }
        }
        
        /// <summary>
        /// The Works property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpProjectAccounting")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWork> Works
        {
            get
            {
                return this._works;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ErpProjectAccountingReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                            "ProjectAccounting")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveProjectsReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpProjectAccounting.ClassInstance)).Resolve("Projects")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Projects property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProjectsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Projects", e, _projectsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Projects property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProjectsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Projects", e, _projectsReference);
        }
        
        private static ITypedElement RetrieveWorkCostDetailsReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpProjectAccounting.ClassInstance)).Resolve("WorkCostDetails")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WorkCostDetails property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkCostDetailsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("WorkCostDetails", e, _workCostDetailsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WorkCostDetails property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkCostDetailsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WorkCostDetails", e, _workCostDetailsReference);
        }
        
        private static ITypedElement RetrieveErpTimeEntriesReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpProjectAccounting.ClassInstance)).Resolve("ErpTimeEntries")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpTimeEntries property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpTimeEntriesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ErpTimeEntries", e, _erpTimeEntriesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpTimeEntries property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpTimeEntriesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpTimeEntries", e, _erpTimeEntriesReference);
        }
        
        private static ITypedElement RetrieveWorksReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpProjectAccounting.ClassInstance)).Resolve("Works")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Works property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorksCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Works", e, _worksReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Works property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorksCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Works", e, _worksReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PROJECTS"))
            {
                return this._projects;
            }
            if ((feature == "WORKCOSTDETAILS"))
            {
                return this._workCostDetails;
            }
            if ((feature == "ERPTIMEENTRIES"))
            {
                return this._erpTimeEntries;
            }
            if ((feature == "WORKS"))
            {
                return this._works;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                        "ProjectAccounting")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ErpProjectAccounting class
        /// </summary>
        public class ErpProjectAccountingReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ErpProjectAccounting _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ErpProjectAccountingReferencedElementsCollection(ErpProjectAccounting parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Projects.Count);
                    count = (count + this._parent.WorkCostDetails.Count);
                    count = (count + this._parent.ErpTimeEntries.Count);
                    count = (count + this._parent.Works.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Projects.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WorkCostDetails.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpTimeEntries.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Works.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Projects.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WorkCostDetails.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpTimeEntries.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Works.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IProject projectsCasted = item.As<IProject>();
                if ((projectsCasted != null))
                {
                    this._parent.Projects.Add(projectsCasted);
                }
                IWorkCostDetail workCostDetailsCasted = item.As<IWorkCostDetail>();
                if ((workCostDetailsCasted != null))
                {
                    this._parent.WorkCostDetails.Add(workCostDetailsCasted);
                }
                IErpTimeEntry erpTimeEntriesCasted = item.As<IErpTimeEntry>();
                if ((erpTimeEntriesCasted != null))
                {
                    this._parent.ErpTimeEntries.Add(erpTimeEntriesCasted);
                }
                IWork worksCasted = item.As<IWork>();
                if ((worksCasted != null))
                {
                    this._parent.Works.Add(worksCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Projects.Clear();
                this._parent.WorkCostDetails.Clear();
                this._parent.ErpTimeEntries.Clear();
                this._parent.Works.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Projects.Contains(item))
                {
                    return true;
                }
                if (this._parent.WorkCostDetails.Contains(item))
                {
                    return true;
                }
                if (this._parent.ErpTimeEntries.Contains(item))
                {
                    return true;
                }
                if (this._parent.Works.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> projectsEnumerator = this._parent.Projects.GetEnumerator();
                try
                {
                    for (
                    ; projectsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = projectsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    projectsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> workCostDetailsEnumerator = this._parent.WorkCostDetails.GetEnumerator();
                try
                {
                    for (
                    ; workCostDetailsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = workCostDetailsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    workCostDetailsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> erpTimeEntriesEnumerator = this._parent.ErpTimeEntries.GetEnumerator();
                try
                {
                    for (
                    ; erpTimeEntriesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpTimeEntriesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpTimeEntriesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> worksEnumerator = this._parent.Works.GetEnumerator();
                try
                {
                    for (
                    ; worksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = worksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    worksEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IProject projectItem = item.As<IProject>();
                if (((projectItem != null) 
                            && this._parent.Projects.Remove(projectItem)))
                {
                    return true;
                }
                IWorkCostDetail workCostDetailItem = item.As<IWorkCostDetail>();
                if (((workCostDetailItem != null) 
                            && this._parent.WorkCostDetails.Remove(workCostDetailItem)))
                {
                    return true;
                }
                IErpTimeEntry erpTimeEntryItem = item.As<IErpTimeEntry>();
                if (((erpTimeEntryItem != null) 
                            && this._parent.ErpTimeEntries.Remove(erpTimeEntryItem)))
                {
                    return true;
                }
                IWork workItem = item.As<IWork>();
                if (((workItem != null) 
                            && this._parent.Works.Remove(workItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Projects).Concat(this._parent.WorkCostDetails).Concat(this._parent.ErpTimeEntries).Concat(this._parent.Works).GetEnumerator();
            }
        }
    }
}

