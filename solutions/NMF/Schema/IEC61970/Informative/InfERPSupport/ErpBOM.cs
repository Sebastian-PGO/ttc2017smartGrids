using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport
{
    
    
    /// <summary>
    /// The default implementation of the ErpBOM class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfERPSupport")]
    [XmlNamespacePrefixAttribute("cimInfERPSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
        "BOM")]
    [DebuggerDisplayAttribute("ErpBOM {UUID}")]
    public partial class ErpBOM : Document, IErpBOM, IModelElement
    {
        
        private static Lazy<ITypedElement> _erpBomItemDatasReference = new Lazy<ITypedElement>(RetrieveErpBomItemDatasReference);
        
        /// <summary>
        /// The backing field for the ErpBomItemDatas property
        /// </summary>
        private ErpBOMErpBomItemDatasCollection _erpBomItemDatas;
        
        private static Lazy<ITypedElement> _designReference = new Lazy<ITypedElement>(RetrieveDesignReference);
        
        /// <summary>
        /// The backing field for the Design property
        /// </summary>
        private IDesign _design;
        
        private static IClass _classInstance;
        
        public ErpBOM()
        {
            this._erpBomItemDatas = new ErpBOMErpBomItemDatasCollection(this);
            this._erpBomItemDatas.CollectionChanging += this.ErpBomItemDatasCollectionChanging;
            this._erpBomItemDatas.CollectionChanged += this.ErpBomItemDatasCollectionChanged;
        }
        
        /// <summary>
        /// The ErpBomItemDatas property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpBOM")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpBomItemData> ErpBomItemDatas
        {
            get
            {
                return this._erpBomItemDatas;
            }
        }
        
        /// <summary>
        /// The Design property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpBOMs")]
        public virtual IDesign Design
        {
            get
            {
                return this._design;
            }
            set
            {
                if ((this._design != value))
                {
                    IDesign old = this._design;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDesignChanging(e);
                    this.OnPropertyChanging("Design", e, _designReference);
                    this._design = value;
                    if ((old != null))
                    {
                        old.ErpBOMs.Remove(this);
                        old.Deleted -= this.OnResetDesign;
                    }
                    if ((value != null))
                    {
                        value.ErpBOMs.Add(this);
                        value.Deleted += this.OnResetDesign;
                    }
                    this.OnDesignChanged(e);
                    this.OnPropertyChanged("Design", e, _designReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ErpBOMReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                            "BOM")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Design property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DesignChanging;
        
        /// <summary>
        /// Gets fired when the Design property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DesignChanged;
        
        private static ITypedElement RetrieveErpBomItemDatasReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpBOM.ClassInstance)).Resolve("ErpBomItemDatas")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpBomItemDatas property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpBomItemDatasCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ErpBomItemDatas", e, _erpBomItemDatasReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpBomItemDatas property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpBomItemDatasCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpBomItemDatas", e, _erpBomItemDatasReference);
        }
        
        private static ITypedElement RetrieveDesignReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpBOM.ClassInstance)).Resolve("Design")));
        }
        
        /// <summary>
        /// Raises the DesignChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDesignChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DesignChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DesignChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDesignChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DesignChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Design property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDesign(object sender, System.EventArgs eventArgs)
        {
            this.Design = null;
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ERPBOMITEMDATAS"))
            {
                return this._erpBomItemDatas;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DESIGN"))
            {
                this.Design = ((IDesign)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Design"))
            {
                return new DesignProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Design"))
            {
                return new DesignProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                        "BOM")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ErpBOM class
        /// </summary>
        public class ErpBOMReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ErpBOM _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ErpBOMReferencedElementsCollection(ErpBOM parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ErpBomItemDatas.Count);
                    if ((this._parent.Design != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ErpBomItemDatas.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DesignChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ErpBomItemDatas.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DesignChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IErpBomItemData erpBomItemDatasCasted = item.As<IErpBomItemData>();
                if ((erpBomItemDatasCasted != null))
                {
                    this._parent.ErpBomItemDatas.Add(erpBomItemDatasCasted);
                }
                if ((this._parent.Design == null))
                {
                    IDesign designCasted = item.As<IDesign>();
                    if ((designCasted != null))
                    {
                        this._parent.Design = designCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ErpBomItemDatas.Clear();
                this._parent.Design = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ErpBomItemDatas.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Design))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> erpBomItemDatasEnumerator = this._parent.ErpBomItemDatas.GetEnumerator();
                try
                {
                    for (
                    ; erpBomItemDatasEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpBomItemDatasEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpBomItemDatasEnumerator.Dispose();
                }
                if ((this._parent.Design != null))
                {
                    array[arrayIndex] = this._parent.Design;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IErpBomItemData erpBomItemDataItem = item.As<IErpBomItemData>();
                if (((erpBomItemDataItem != null) 
                            && this._parent.ErpBomItemDatas.Remove(erpBomItemDataItem)))
                {
                    return true;
                }
                if ((this._parent.Design == item))
                {
                    this._parent.Design = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ErpBomItemDatas).Concat(this._parent.Design).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Design property
        /// </summary>
        private sealed class DesignProxy : ModelPropertyChange<IErpBOM, IDesign>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DesignProxy(IErpBOM modelElement) : 
                    base(modelElement, "Design")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDesign Value
            {
                get
                {
                    return this.ModelElement.Design;
                }
                set
                {
                    this.ModelElement.Design = value;
                }
            }
        }
    }
}

