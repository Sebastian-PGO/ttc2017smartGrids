//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport
{
    
    
    /// <summary>
    /// The default implementation of the ErpQuoteLineItem class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfERPSupport")]
    [XmlNamespacePrefixAttribute("cimInfERPSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
        "QuoteLineItem")]
    [DebuggerDisplayAttribute("ErpQuoteLineItem {UUID}")]
    public partial class ErpQuoteLineItem : IdentifiedObject, IErpQuoteLineItem, IModelElement
    {
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static Lazy<ITypedElement> _requestReference = new Lazy<ITypedElement>(RetrieveRequestReference);
        
        /// <summary>
        /// The backing field for the Request property
        /// </summary>
        private IRequest _request;
        
        private static Lazy<ITypedElement> _designReference = new Lazy<ITypedElement>(RetrieveDesignReference);
        
        /// <summary>
        /// The backing field for the Design property
        /// </summary>
        private IDesign _design;
        
        private static Lazy<ITypedElement> _erpInvoiceLineItemReference = new Lazy<ITypedElement>(RetrieveErpInvoiceLineItemReference);
        
        /// <summary>
        /// The backing field for the ErpInvoiceLineItem property
        /// </summary>
        private IErpInvoiceLineItem _erpInvoiceLineItem;
        
        private static Lazy<ITypedElement> _erpReqLineItemReference = new Lazy<ITypedElement>(RetrieveErpReqLineItemReference);
        
        /// <summary>
        /// The backing field for the ErpReqLineItem property
        /// </summary>
        private IErpReqLineItem _erpReqLineItem;
        
        private static Lazy<ITypedElement> _erpQuoteReference = new Lazy<ITypedElement>(RetrieveErpQuoteReference);
        
        /// <summary>
        /// The backing field for the ErpQuote property
        /// </summary>
        private IErpQuote _erpQuote;
        
        private static Lazy<ITypedElement> _assetModelCatalogueItemReference = new Lazy<ITypedElement>(RetrieveAssetModelCatalogueItemReference);
        
        /// <summary>
        /// The backing field for the AssetModelCatalogueItem property
        /// </summary>
        private IAssetModelCatalogueItem _assetModelCatalogueItem;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// The Request property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpQuoteLineItem")]
        public virtual IRequest Request
        {
            get
            {
                return this._request;
            }
            set
            {
                if ((this._request != value))
                {
                    IRequest old = this._request;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRequestChanging(e);
                    this.OnPropertyChanging("Request", e, _requestReference);
                    this._request = value;
                    if ((old != null))
                    {
                        old.ErpQuoteLineItem = null;
                        old.Deleted -= this.OnResetRequest;
                    }
                    if ((value != null))
                    {
                        value.ErpQuoteLineItem = this;
                        value.Deleted += this.OnResetRequest;
                    }
                    this.OnRequestChanged(e);
                    this.OnPropertyChanged("Request", e, _requestReference);
                }
            }
        }
        
        /// <summary>
        /// The Design property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpQuoteLineItem")]
        public virtual IDesign Design
        {
            get
            {
                return this._design;
            }
            set
            {
                if ((this._design != value))
                {
                    IDesign old = this._design;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDesignChanging(e);
                    this.OnPropertyChanging("Design", e, _designReference);
                    this._design = value;
                    if ((old != null))
                    {
                        old.ErpQuoteLineItem = null;
                        old.Deleted -= this.OnResetDesign;
                    }
                    if ((value != null))
                    {
                        value.ErpQuoteLineItem = this;
                        value.Deleted += this.OnResetDesign;
                    }
                    this.OnDesignChanged(e);
                    this.OnPropertyChanged("Design", e, _designReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpInvoiceLineItem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpQuoteLineItem")]
        public virtual IErpInvoiceLineItem ErpInvoiceLineItem
        {
            get
            {
                return this._erpInvoiceLineItem;
            }
            set
            {
                if ((this._erpInvoiceLineItem != value))
                {
                    IErpInvoiceLineItem old = this._erpInvoiceLineItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpInvoiceLineItemChanging(e);
                    this.OnPropertyChanging("ErpInvoiceLineItem", e, _erpInvoiceLineItemReference);
                    this._erpInvoiceLineItem = value;
                    if ((old != null))
                    {
                        old.ErpQuoteLineItem = null;
                        old.Deleted -= this.OnResetErpInvoiceLineItem;
                    }
                    if ((value != null))
                    {
                        value.ErpQuoteLineItem = this;
                        value.Deleted += this.OnResetErpInvoiceLineItem;
                    }
                    this.OnErpInvoiceLineItemChanged(e);
                    this.OnPropertyChanged("ErpInvoiceLineItem", e, _erpInvoiceLineItemReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpReqLineItem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpQuoteLineItem")]
        public virtual IErpReqLineItem ErpReqLineItem
        {
            get
            {
                return this._erpReqLineItem;
            }
            set
            {
                if ((this._erpReqLineItem != value))
                {
                    IErpReqLineItem old = this._erpReqLineItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpReqLineItemChanging(e);
                    this.OnPropertyChanging("ErpReqLineItem", e, _erpReqLineItemReference);
                    this._erpReqLineItem = value;
                    if ((old != null))
                    {
                        old.ErpQuoteLineItem = null;
                        old.Deleted -= this.OnResetErpReqLineItem;
                    }
                    if ((value != null))
                    {
                        value.ErpQuoteLineItem = this;
                        value.Deleted += this.OnResetErpReqLineItem;
                    }
                    this.OnErpReqLineItemChanged(e);
                    this.OnPropertyChanged("ErpReqLineItem", e, _erpReqLineItemReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpQuote property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpQuoteLineItems")]
        public virtual IErpQuote ErpQuote
        {
            get
            {
                return this._erpQuote;
            }
            set
            {
                if ((this._erpQuote != value))
                {
                    IErpQuote old = this._erpQuote;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpQuoteChanging(e);
                    this.OnPropertyChanging("ErpQuote", e, _erpQuoteReference);
                    this._erpQuote = value;
                    if ((old != null))
                    {
                        old.ErpQuoteLineItems.Remove(this);
                        old.Deleted -= this.OnResetErpQuote;
                    }
                    if ((value != null))
                    {
                        value.ErpQuoteLineItems.Add(this);
                        value.Deleted += this.OnResetErpQuote;
                    }
                    this.OnErpQuoteChanged(e);
                    this.OnPropertyChanged("ErpQuote", e, _erpQuoteReference);
                }
            }
        }
        
        /// <summary>
        /// The AssetModelCatalogueItem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpQuoteLineItems")]
        public virtual IAssetModelCatalogueItem AssetModelCatalogueItem
        {
            get
            {
                return this._assetModelCatalogueItem;
            }
            set
            {
                if ((this._assetModelCatalogueItem != value))
                {
                    IAssetModelCatalogueItem old = this._assetModelCatalogueItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAssetModelCatalogueItemChanging(e);
                    this.OnPropertyChanging("AssetModelCatalogueItem", e, _assetModelCatalogueItemReference);
                    this._assetModelCatalogueItem = value;
                    if ((old != null))
                    {
                        old.ErpQuoteLineItems.Remove(this);
                        old.Deleted -= this.OnResetAssetModelCatalogueItem;
                    }
                    if ((value != null))
                    {
                        value.ErpQuoteLineItems.Add(this);
                        value.Deleted += this.OnResetAssetModelCatalogueItem;
                    }
                    this.OnAssetModelCatalogueItemChanged(e);
                    this.OnPropertyChanged("AssetModelCatalogueItem", e, _assetModelCatalogueItemReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ErpQuoteLineItemReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                            "QuoteLineItem")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the Request property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RequestChanging;
        
        /// <summary>
        /// Gets fired when the Request property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RequestChanged;
        
        /// <summary>
        /// Gets fired before the Design property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DesignChanging;
        
        /// <summary>
        /// Gets fired when the Design property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DesignChanged;
        
        /// <summary>
        /// Gets fired before the ErpInvoiceLineItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpInvoiceLineItemChanging;
        
        /// <summary>
        /// Gets fired when the ErpInvoiceLineItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpInvoiceLineItemChanged;
        
        /// <summary>
        /// Gets fired before the ErpReqLineItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpReqLineItemChanging;
        
        /// <summary>
        /// Gets fired when the ErpReqLineItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpReqLineItemChanged;
        
        /// <summary>
        /// Gets fired before the ErpQuote property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpQuoteChanging;
        
        /// <summary>
        /// Gets fired when the ErpQuote property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpQuoteChanged;
        
        /// <summary>
        /// Gets fired before the AssetModelCatalogueItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetModelCatalogueItemChanging;
        
        /// <summary>
        /// Gets fired when the AssetModelCatalogueItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetModelCatalogueItemChanged;
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpQuoteLineItem.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        private static ITypedElement RetrieveRequestReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpQuoteLineItem.ClassInstance)).Resolve("Request")));
        }
        
        /// <summary>
        /// Raises the RequestChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRequestChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RequestChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RequestChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRequestChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RequestChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Request property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRequest(object sender, System.EventArgs eventArgs)
        {
            this.Request = null;
        }
        
        private static ITypedElement RetrieveDesignReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpQuoteLineItem.ClassInstance)).Resolve("Design")));
        }
        
        /// <summary>
        /// Raises the DesignChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDesignChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DesignChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DesignChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDesignChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DesignChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Design property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDesign(object sender, System.EventArgs eventArgs)
        {
            this.Design = null;
        }
        
        private static ITypedElement RetrieveErpInvoiceLineItemReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpQuoteLineItem.ClassInstance)).Resolve("ErpInvoiceLineItem")));
        }
        
        /// <summary>
        /// Raises the ErpInvoiceLineItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpInvoiceLineItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpInvoiceLineItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpInvoiceLineItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpInvoiceLineItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpInvoiceLineItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpInvoiceLineItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpInvoiceLineItem(object sender, System.EventArgs eventArgs)
        {
            this.ErpInvoiceLineItem = null;
        }
        
        private static ITypedElement RetrieveErpReqLineItemReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpQuoteLineItem.ClassInstance)).Resolve("ErpReqLineItem")));
        }
        
        /// <summary>
        /// Raises the ErpReqLineItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpReqLineItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpReqLineItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpReqLineItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpReqLineItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpReqLineItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpReqLineItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpReqLineItem(object sender, System.EventArgs eventArgs)
        {
            this.ErpReqLineItem = null;
        }
        
        private static ITypedElement RetrieveErpQuoteReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpQuoteLineItem.ClassInstance)).Resolve("ErpQuote")));
        }
        
        /// <summary>
        /// Raises the ErpQuoteChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpQuoteChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpQuoteChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpQuoteChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpQuoteChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpQuoteChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpQuote property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpQuote(object sender, System.EventArgs eventArgs)
        {
            this.ErpQuote = null;
        }
        
        private static ITypedElement RetrieveAssetModelCatalogueItemReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpQuoteLineItem.ClassInstance)).Resolve("AssetModelCatalogueItem")));
        }
        
        /// <summary>
        /// Raises the AssetModelCatalogueItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetModelCatalogueItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetModelCatalogueItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AssetModelCatalogueItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetModelCatalogueItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetModelCatalogueItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AssetModelCatalogueItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAssetModelCatalogueItem(object sender, System.EventArgs eventArgs)
        {
            this.AssetModelCatalogueItem = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "REQUEST"))
            {
                this.Request = ((IRequest)(value));
                return;
            }
            if ((feature == "DESIGN"))
            {
                this.Design = ((IDesign)(value));
                return;
            }
            if ((feature == "ERPINVOICELINEITEM"))
            {
                this.ErpInvoiceLineItem = ((IErpInvoiceLineItem)(value));
                return;
            }
            if ((feature == "ERPREQLINEITEM"))
            {
                this.ErpReqLineItem = ((IErpReqLineItem)(value));
                return;
            }
            if ((feature == "ERPQUOTE"))
            {
                this.ErpQuote = ((IErpQuote)(value));
                return;
            }
            if ((feature == "ASSETMODELCATALOGUEITEM"))
            {
                this.AssetModelCatalogueItem = ((IAssetModelCatalogueItem)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((attribute == "Request"))
            {
                return new RequestProxy(this);
            }
            if ((attribute == "Design"))
            {
                return new DesignProxy(this);
            }
            if ((attribute == "ErpInvoiceLineItem"))
            {
                return new ErpInvoiceLineItemProxy(this);
            }
            if ((attribute == "ErpReqLineItem"))
            {
                return new ErpReqLineItemProxy(this);
            }
            if ((attribute == "ErpQuote"))
            {
                return new ErpQuoteProxy(this);
            }
            if ((attribute == "AssetModelCatalogueItem"))
            {
                return new AssetModelCatalogueItemProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((reference == "Request"))
            {
                return new RequestProxy(this);
            }
            if ((reference == "Design"))
            {
                return new DesignProxy(this);
            }
            if ((reference == "ErpInvoiceLineItem"))
            {
                return new ErpInvoiceLineItemProxy(this);
            }
            if ((reference == "ErpReqLineItem"))
            {
                return new ErpReqLineItemProxy(this);
            }
            if ((reference == "ErpQuote"))
            {
                return new ErpQuoteProxy(this);
            }
            if ((reference == "AssetModelCatalogueItem"))
            {
                return new AssetModelCatalogueItemProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                        "QuoteLineItem")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ErpQuoteLineItem class
        /// </summary>
        public class ErpQuoteLineItemReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ErpQuoteLineItem _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ErpQuoteLineItemReferencedElementsCollection(ErpQuoteLineItem parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Request != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Design != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpInvoiceLineItem != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpReqLineItem != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpQuote != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AssetModelCatalogueItem != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.RequestChanged += this.PropagateValueChanges;
                this._parent.DesignChanged += this.PropagateValueChanges;
                this._parent.ErpInvoiceLineItemChanged += this.PropagateValueChanges;
                this._parent.ErpReqLineItemChanged += this.PropagateValueChanges;
                this._parent.ErpQuoteChanged += this.PropagateValueChanges;
                this._parent.AssetModelCatalogueItemChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.RequestChanged -= this.PropagateValueChanges;
                this._parent.DesignChanged -= this.PropagateValueChanges;
                this._parent.ErpInvoiceLineItemChanged -= this.PropagateValueChanges;
                this._parent.ErpReqLineItemChanged -= this.PropagateValueChanges;
                this._parent.ErpQuoteChanged -= this.PropagateValueChanges;
                this._parent.AssetModelCatalogueItemChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                if ((this._parent.Request == null))
                {
                    IRequest requestCasted = item.As<IRequest>();
                    if ((requestCasted != null))
                    {
                        this._parent.Request = requestCasted;
                        return;
                    }
                }
                if ((this._parent.Design == null))
                {
                    IDesign designCasted = item.As<IDesign>();
                    if ((designCasted != null))
                    {
                        this._parent.Design = designCasted;
                        return;
                    }
                }
                if ((this._parent.ErpInvoiceLineItem == null))
                {
                    IErpInvoiceLineItem erpInvoiceLineItemCasted = item.As<IErpInvoiceLineItem>();
                    if ((erpInvoiceLineItemCasted != null))
                    {
                        this._parent.ErpInvoiceLineItem = erpInvoiceLineItemCasted;
                        return;
                    }
                }
                if ((this._parent.ErpReqLineItem == null))
                {
                    IErpReqLineItem erpReqLineItemCasted = item.As<IErpReqLineItem>();
                    if ((erpReqLineItemCasted != null))
                    {
                        this._parent.ErpReqLineItem = erpReqLineItemCasted;
                        return;
                    }
                }
                if ((this._parent.ErpQuote == null))
                {
                    IErpQuote erpQuoteCasted = item.As<IErpQuote>();
                    if ((erpQuoteCasted != null))
                    {
                        this._parent.ErpQuote = erpQuoteCasted;
                        return;
                    }
                }
                if ((this._parent.AssetModelCatalogueItem == null))
                {
                    IAssetModelCatalogueItem assetModelCatalogueItemCasted = item.As<IAssetModelCatalogueItem>();
                    if ((assetModelCatalogueItemCasted != null))
                    {
                        this._parent.AssetModelCatalogueItem = assetModelCatalogueItemCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Status = null;
                this._parent.Request = null;
                this._parent.Design = null;
                this._parent.ErpInvoiceLineItem = null;
                this._parent.ErpReqLineItem = null;
                this._parent.ErpQuote = null;
                this._parent.AssetModelCatalogueItem = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if ((item == this._parent.Request))
                {
                    return true;
                }
                if ((item == this._parent.Design))
                {
                    return true;
                }
                if ((item == this._parent.ErpInvoiceLineItem))
                {
                    return true;
                }
                if ((item == this._parent.ErpReqLineItem))
                {
                    return true;
                }
                if ((item == this._parent.ErpQuote))
                {
                    return true;
                }
                if ((item == this._parent.AssetModelCatalogueItem))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Request != null))
                {
                    array[arrayIndex] = this._parent.Request;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Design != null))
                {
                    array[arrayIndex] = this._parent.Design;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpInvoiceLineItem != null))
                {
                    array[arrayIndex] = this._parent.ErpInvoiceLineItem;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpReqLineItem != null))
                {
                    array[arrayIndex] = this._parent.ErpReqLineItem;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpQuote != null))
                {
                    array[arrayIndex] = this._parent.ErpQuote;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AssetModelCatalogueItem != null))
                {
                    array[arrayIndex] = this._parent.AssetModelCatalogueItem;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                if ((this._parent.Request == item))
                {
                    this._parent.Request = null;
                    return true;
                }
                if ((this._parent.Design == item))
                {
                    this._parent.Design = null;
                    return true;
                }
                if ((this._parent.ErpInvoiceLineItem == item))
                {
                    this._parent.ErpInvoiceLineItem = null;
                    return true;
                }
                if ((this._parent.ErpReqLineItem == item))
                {
                    this._parent.ErpReqLineItem = null;
                    return true;
                }
                if ((this._parent.ErpQuote == item))
                {
                    this._parent.ErpQuote = null;
                    return true;
                }
                if ((this._parent.AssetModelCatalogueItem == item))
                {
                    this._parent.AssetModelCatalogueItem = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Status).Concat(this._parent.Request).Concat(this._parent.Design).Concat(this._parent.ErpInvoiceLineItem).Concat(this._parent.ErpReqLineItem).Concat(this._parent.ErpQuote).Concat(this._parent.AssetModelCatalogueItem).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IErpQuoteLineItem, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IErpQuoteLineItem modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Request property
        /// </summary>
        private sealed class RequestProxy : ModelPropertyChange<IErpQuoteLineItem, IRequest>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RequestProxy(IErpQuoteLineItem modelElement) : 
                    base(modelElement, "Request")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRequest Value
            {
                get
                {
                    return this.ModelElement.Request;
                }
                set
                {
                    this.ModelElement.Request = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Design property
        /// </summary>
        private sealed class DesignProxy : ModelPropertyChange<IErpQuoteLineItem, IDesign>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DesignProxy(IErpQuoteLineItem modelElement) : 
                    base(modelElement, "Design")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDesign Value
            {
                get
                {
                    return this.ModelElement.Design;
                }
                set
                {
                    this.ModelElement.Design = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpInvoiceLineItem property
        /// </summary>
        private sealed class ErpInvoiceLineItemProxy : ModelPropertyChange<IErpQuoteLineItem, IErpInvoiceLineItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpInvoiceLineItemProxy(IErpQuoteLineItem modelElement) : 
                    base(modelElement, "ErpInvoiceLineItem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpInvoiceLineItem Value
            {
                get
                {
                    return this.ModelElement.ErpInvoiceLineItem;
                }
                set
                {
                    this.ModelElement.ErpInvoiceLineItem = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpReqLineItem property
        /// </summary>
        private sealed class ErpReqLineItemProxy : ModelPropertyChange<IErpQuoteLineItem, IErpReqLineItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpReqLineItemProxy(IErpQuoteLineItem modelElement) : 
                    base(modelElement, "ErpReqLineItem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpReqLineItem Value
            {
                get
                {
                    return this.ModelElement.ErpReqLineItem;
                }
                set
                {
                    this.ModelElement.ErpReqLineItem = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpQuote property
        /// </summary>
        private sealed class ErpQuoteProxy : ModelPropertyChange<IErpQuoteLineItem, IErpQuote>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpQuoteProxy(IErpQuoteLineItem modelElement) : 
                    base(modelElement, "ErpQuote")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpQuote Value
            {
                get
                {
                    return this.ModelElement.ErpQuote;
                }
                set
                {
                    this.ModelElement.ErpQuote = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AssetModelCatalogueItem property
        /// </summary>
        private sealed class AssetModelCatalogueItemProxy : ModelPropertyChange<IErpQuoteLineItem, IAssetModelCatalogueItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssetModelCatalogueItemProxy(IErpQuoteLineItem modelElement) : 
                    base(modelElement, "AssetModelCatalogueItem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssetModelCatalogueItem Value
            {
                get
                {
                    return this.ModelElement.AssetModelCatalogueItem;
                }
                set
                {
                    this.ModelElement.AssetModelCatalogueItem = value;
                }
            }
        }
    }
}

