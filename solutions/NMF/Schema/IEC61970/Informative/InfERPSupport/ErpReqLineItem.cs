//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport
{
    
    
    /// <summary>
    /// The default implementation of the ErpReqLineItem class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfERPSupport")]
    [XmlNamespacePrefixAttribute("cimInfERPSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
        "ReqLineItem")]
    [DebuggerDisplayAttribute("ErpReqLineItem {UUID}")]
    public partial class ErpReqLineItem : IdentifiedObject, IErpReqLineItem, IModelElement
    {
        
        /// <summary>
        /// The backing field for the DeliveryDate property
        /// </summary>
        private string _deliveryDate;
        
        private static Lazy<ITypedElement> _deliveryDateAttribute = new Lazy<ITypedElement>(RetrieveDeliveryDateAttribute);
        
        /// <summary>
        /// The backing field for the Quantity property
        /// </summary>
        private int _quantity;
        
        private static Lazy<ITypedElement> _quantityAttribute = new Lazy<ITypedElement>(RetrieveQuantityAttribute);
        
        /// <summary>
        /// The backing field for the Code property
        /// </summary>
        private string _code;
        
        private static Lazy<ITypedElement> _codeAttribute = new Lazy<ITypedElement>(RetrieveCodeAttribute);
        
        /// <summary>
        /// The backing field for the Cost property
        /// </summary>
        private float _cost;
        
        private static Lazy<ITypedElement> _costAttribute = new Lazy<ITypedElement>(RetrieveCostAttribute);
        
        private static Lazy<ITypedElement> _typeMaterialReference = new Lazy<ITypedElement>(RetrieveTypeMaterialReference);
        
        /// <summary>
        /// The backing field for the TypeMaterial property
        /// </summary>
        private ITypeMaterial _typeMaterial;
        
        private static Lazy<ITypedElement> _erpQuoteLineItemReference = new Lazy<ITypedElement>(RetrieveErpQuoteLineItemReference);
        
        /// <summary>
        /// The backing field for the ErpQuoteLineItem property
        /// </summary>
        private IErpQuoteLineItem _erpQuoteLineItem;
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static Lazy<ITypedElement> _erpRequisitionReference = new Lazy<ITypedElement>(RetrieveErpRequisitionReference);
        
        /// <summary>
        /// The backing field for the ErpRequisition property
        /// </summary>
        private IErpRequisition _erpRequisition;
        
        private static Lazy<ITypedElement> _typeAssetReference = new Lazy<ITypedElement>(RetrieveTypeAssetReference);
        
        /// <summary>
        /// The backing field for the TypeAsset property
        /// </summary>
        private ITypeAsset _typeAsset;
        
        private static Lazy<ITypedElement> _erpPOLineItemReference = new Lazy<ITypedElement>(RetrieveErpPOLineItemReference);
        
        /// <summary>
        /// The backing field for the ErpPOLineItem property
        /// </summary>
        private IErpPOLineItem _erpPOLineItem;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The deliveryDate property
        /// </summary>
        [XmlElementNameAttribute("deliveryDate")]
        [XmlAttributeAttribute(true)]
        public virtual string DeliveryDate
        {
            get
            {
                return this._deliveryDate;
            }
            set
            {
                if ((this._deliveryDate != value))
                {
                    string old = this._deliveryDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDeliveryDateChanging(e);
                    this.OnPropertyChanging("DeliveryDate", e, _deliveryDateAttribute);
                    this._deliveryDate = value;
                    this.OnDeliveryDateChanged(e);
                    this.OnPropertyChanged("DeliveryDate", e, _deliveryDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The quantity property
        /// </summary>
        [XmlElementNameAttribute("quantity")]
        [XmlAttributeAttribute(true)]
        public virtual int Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    int old = this._quantity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQuantityChanging(e);
                    this.OnPropertyChanging("Quantity", e, _quantityAttribute);
                    this._quantity = value;
                    this.OnQuantityChanged(e);
                    this.OnPropertyChanged("Quantity", e, _quantityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The code property
        /// </summary>
        [XmlElementNameAttribute("code")]
        [XmlAttributeAttribute(true)]
        public virtual string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    string old = this._code;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCodeChanging(e);
                    this.OnPropertyChanging("Code", e, _codeAttribute);
                    this._code = value;
                    this.OnCodeChanged(e);
                    this.OnPropertyChanged("Code", e, _codeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The cost property
        /// </summary>
        [XmlElementNameAttribute("cost")]
        [XmlAttributeAttribute(true)]
        public virtual float Cost
        {
            get
            {
                return this._cost;
            }
            set
            {
                if ((this._cost != value))
                {
                    float old = this._cost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCostChanging(e);
                    this.OnPropertyChanging("Cost", e, _costAttribute);
                    this._cost = value;
                    this.OnCostChanged(e);
                    this.OnPropertyChanged("Cost", e, _costAttribute);
                }
            }
        }
        
        /// <summary>
        /// The TypeMaterial property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpReqLineItems")]
        public virtual ITypeMaterial TypeMaterial
        {
            get
            {
                return this._typeMaterial;
            }
            set
            {
                if ((this._typeMaterial != value))
                {
                    ITypeMaterial old = this._typeMaterial;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeMaterialChanging(e);
                    this.OnPropertyChanging("TypeMaterial", e, _typeMaterialReference);
                    this._typeMaterial = value;
                    if ((old != null))
                    {
                        old.ErpReqLineItems.Remove(this);
                        old.Deleted -= this.OnResetTypeMaterial;
                    }
                    if ((value != null))
                    {
                        value.ErpReqLineItems.Add(this);
                        value.Deleted += this.OnResetTypeMaterial;
                    }
                    this.OnTypeMaterialChanged(e);
                    this.OnPropertyChanged("TypeMaterial", e, _typeMaterialReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpQuoteLineItem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpReqLineItem")]
        public virtual IErpQuoteLineItem ErpQuoteLineItem
        {
            get
            {
                return this._erpQuoteLineItem;
            }
            set
            {
                if ((this._erpQuoteLineItem != value))
                {
                    IErpQuoteLineItem old = this._erpQuoteLineItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpQuoteLineItemChanging(e);
                    this.OnPropertyChanging("ErpQuoteLineItem", e, _erpQuoteLineItemReference);
                    this._erpQuoteLineItem = value;
                    if ((old != null))
                    {
                        old.ErpReqLineItem = null;
                        old.Deleted -= this.OnResetErpQuoteLineItem;
                    }
                    if ((value != null))
                    {
                        value.ErpReqLineItem = this;
                        value.Deleted += this.OnResetErpQuoteLineItem;
                    }
                    this.OnErpQuoteLineItemChanged(e);
                    this.OnPropertyChanged("ErpQuoteLineItem", e, _erpQuoteLineItemReference);
                }
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpRequisition property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpReqLineItems")]
        public virtual IErpRequisition ErpRequisition
        {
            get
            {
                return this._erpRequisition;
            }
            set
            {
                if ((this._erpRequisition != value))
                {
                    IErpRequisition old = this._erpRequisition;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpRequisitionChanging(e);
                    this.OnPropertyChanging("ErpRequisition", e, _erpRequisitionReference);
                    this._erpRequisition = value;
                    if ((old != null))
                    {
                        old.ErpReqLineItems.Remove(this);
                        old.Deleted -= this.OnResetErpRequisition;
                    }
                    if ((value != null))
                    {
                        value.ErpReqLineItems.Add(this);
                        value.Deleted += this.OnResetErpRequisition;
                    }
                    this.OnErpRequisitionChanged(e);
                    this.OnPropertyChanged("ErpRequisition", e, _erpRequisitionReference);
                }
            }
        }
        
        /// <summary>
        /// The TypeAsset property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpReqLineItems")]
        public virtual ITypeAsset TypeAsset
        {
            get
            {
                return this._typeAsset;
            }
            set
            {
                if ((this._typeAsset != value))
                {
                    ITypeAsset old = this._typeAsset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeAssetChanging(e);
                    this.OnPropertyChanging("TypeAsset", e, _typeAssetReference);
                    this._typeAsset = value;
                    if ((old != null))
                    {
                        old.ErpReqLineItems.Remove(this);
                        old.Deleted -= this.OnResetTypeAsset;
                    }
                    if ((value != null))
                    {
                        value.ErpReqLineItems.Add(this);
                        value.Deleted += this.OnResetTypeAsset;
                    }
                    this.OnTypeAssetChanged(e);
                    this.OnPropertyChanged("TypeAsset", e, _typeAssetReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpPOLineItem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpReqLineItem")]
        public virtual IErpPOLineItem ErpPOLineItem
        {
            get
            {
                return this._erpPOLineItem;
            }
            set
            {
                if ((this._erpPOLineItem != value))
                {
                    IErpPOLineItem old = this._erpPOLineItem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpPOLineItemChanging(e);
                    this.OnPropertyChanging("ErpPOLineItem", e, _erpPOLineItemReference);
                    this._erpPOLineItem = value;
                    if ((old != null))
                    {
                        old.ErpReqLineItem = null;
                        old.Deleted -= this.OnResetErpPOLineItem;
                    }
                    if ((value != null))
                    {
                        value.ErpReqLineItem = this;
                        value.Deleted += this.OnResetErpPOLineItem;
                    }
                    this.OnErpPOLineItemChanged(e);
                    this.OnPropertyChanged("ErpPOLineItem", e, _erpPOLineItemReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ErpReqLineItemReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                            "ReqLineItem")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the DeliveryDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeliveryDateChanging;
        
        /// <summary>
        /// Gets fired when the DeliveryDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DeliveryDateChanged;
        
        /// <summary>
        /// Gets fired before the Quantity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuantityChanging;
        
        /// <summary>
        /// Gets fired when the Quantity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuantityChanged;
        
        /// <summary>
        /// Gets fired before the Code property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CodeChanging;
        
        /// <summary>
        /// Gets fired when the Code property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CodeChanged;
        
        /// <summary>
        /// Gets fired before the Cost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostChanging;
        
        /// <summary>
        /// Gets fired when the Cost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostChanged;
        
        /// <summary>
        /// Gets fired before the TypeMaterial property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeMaterialChanging;
        
        /// <summary>
        /// Gets fired when the TypeMaterial property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeMaterialChanged;
        
        /// <summary>
        /// Gets fired before the ErpQuoteLineItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpQuoteLineItemChanging;
        
        /// <summary>
        /// Gets fired when the ErpQuoteLineItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpQuoteLineItemChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the ErpRequisition property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpRequisitionChanging;
        
        /// <summary>
        /// Gets fired when the ErpRequisition property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpRequisitionChanged;
        
        /// <summary>
        /// Gets fired before the TypeAsset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeAssetChanging;
        
        /// <summary>
        /// Gets fired when the TypeAsset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeAssetChanged;
        
        /// <summary>
        /// Gets fired before the ErpPOLineItem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpPOLineItemChanging;
        
        /// <summary>
        /// Gets fired when the ErpPOLineItem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpPOLineItemChanged;
        
        private static ITypedElement RetrieveDeliveryDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpReqLineItem.ClassInstance)).Resolve("deliveryDate")));
        }
        
        /// <summary>
        /// Raises the DeliveryDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeliveryDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeliveryDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DeliveryDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDeliveryDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DeliveryDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveQuantityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpReqLineItem.ClassInstance)).Resolve("quantity")));
        }
        
        /// <summary>
        /// Raises the QuantityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuantityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuantityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QuantityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuantityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuantityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpReqLineItem.ClassInstance)).Resolve("code")));
        }
        
        /// <summary>
        /// Raises the CodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCostAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpReqLineItem.ClassInstance)).Resolve("cost")));
        }
        
        /// <summary>
        /// Raises the CostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTypeMaterialReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpReqLineItem.ClassInstance)).Resolve("TypeMaterial")));
        }
        
        /// <summary>
        /// Raises the TypeMaterialChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeMaterialChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeMaterialChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeMaterialChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeMaterialChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeMaterialChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TypeMaterial property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTypeMaterial(object sender, System.EventArgs eventArgs)
        {
            this.TypeMaterial = null;
        }
        
        private static ITypedElement RetrieveErpQuoteLineItemReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpReqLineItem.ClassInstance)).Resolve("ErpQuoteLineItem")));
        }
        
        /// <summary>
        /// Raises the ErpQuoteLineItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpQuoteLineItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpQuoteLineItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpQuoteLineItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpQuoteLineItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpQuoteLineItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpQuoteLineItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpQuoteLineItem(object sender, System.EventArgs eventArgs)
        {
            this.ErpQuoteLineItem = null;
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpReqLineItem.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        private static ITypedElement RetrieveErpRequisitionReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpReqLineItem.ClassInstance)).Resolve("ErpRequisition")));
        }
        
        /// <summary>
        /// Raises the ErpRequisitionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpRequisitionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpRequisitionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpRequisitionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpRequisitionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpRequisitionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpRequisition property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpRequisition(object sender, System.EventArgs eventArgs)
        {
            this.ErpRequisition = null;
        }
        
        private static ITypedElement RetrieveTypeAssetReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpReqLineItem.ClassInstance)).Resolve("TypeAsset")));
        }
        
        /// <summary>
        /// Raises the TypeAssetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeAssetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeAssetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeAssetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeAssetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeAssetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TypeAsset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTypeAsset(object sender, System.EventArgs eventArgs)
        {
            this.TypeAsset = null;
        }
        
        private static ITypedElement RetrieveErpPOLineItemReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpReqLineItem.ClassInstance)).Resolve("ErpPOLineItem")));
        }
        
        /// <summary>
        /// Raises the ErpPOLineItemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpPOLineItemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpPOLineItemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpPOLineItemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpPOLineItemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpPOLineItemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpPOLineItem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpPOLineItem(object sender, System.EventArgs eventArgs)
        {
            this.ErpPOLineItem = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "DELIVERYDATE"))
            {
                return this.DeliveryDate;
            }
            if ((attribute == "QUANTITY"))
            {
                return this.Quantity;
            }
            if ((attribute == "CODE"))
            {
                return this.Code;
            }
            if ((attribute == "COST"))
            {
                return this.Cost;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TYPEMATERIAL"))
            {
                this.TypeMaterial = ((ITypeMaterial)(value));
                return;
            }
            if ((feature == "ERPQUOTELINEITEM"))
            {
                this.ErpQuoteLineItem = ((IErpQuoteLineItem)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "ERPREQUISITION"))
            {
                this.ErpRequisition = ((IErpRequisition)(value));
                return;
            }
            if ((feature == "TYPEASSET"))
            {
                this.TypeAsset = ((ITypeAsset)(value));
                return;
            }
            if ((feature == "ERPPOLINEITEM"))
            {
                this.ErpPOLineItem = ((IErpPOLineItem)(value));
                return;
            }
            if ((feature == "DELIVERYDATE"))
            {
                this.DeliveryDate = ((string)(value));
                return;
            }
            if ((feature == "QUANTITY"))
            {
                this.Quantity = ((int)(value));
                return;
            }
            if ((feature == "CODE"))
            {
                this.Code = ((string)(value));
                return;
            }
            if ((feature == "COST"))
            {
                this.Cost = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TypeMaterial"))
            {
                return new TypeMaterialProxy(this);
            }
            if ((attribute == "ErpQuoteLineItem"))
            {
                return new ErpQuoteLineItemProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((attribute == "ErpRequisition"))
            {
                return new ErpRequisitionProxy(this);
            }
            if ((attribute == "TypeAsset"))
            {
                return new TypeAssetProxy(this);
            }
            if ((attribute == "ErpPOLineItem"))
            {
                return new ErpPOLineItemProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TypeMaterial"))
            {
                return new TypeMaterialProxy(this);
            }
            if ((reference == "ErpQuoteLineItem"))
            {
                return new ErpQuoteLineItemProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((reference == "ErpRequisition"))
            {
                return new ErpRequisitionProxy(this);
            }
            if ((reference == "TypeAsset"))
            {
                return new TypeAssetProxy(this);
            }
            if ((reference == "ErpPOLineItem"))
            {
                return new ErpPOLineItemProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                        "ReqLineItem")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ErpReqLineItem class
        /// </summary>
        public class ErpReqLineItemReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ErpReqLineItem _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ErpReqLineItemReferencedElementsCollection(ErpReqLineItem parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.TypeMaterial != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpQuoteLineItem != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpRequisition != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TypeAsset != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpPOLineItem != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TypeMaterialChanged += this.PropagateValueChanges;
                this._parent.ErpQuoteLineItemChanged += this.PropagateValueChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.ErpRequisitionChanged += this.PropagateValueChanges;
                this._parent.TypeAssetChanged += this.PropagateValueChanges;
                this._parent.ErpPOLineItemChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TypeMaterialChanged -= this.PropagateValueChanges;
                this._parent.ErpQuoteLineItemChanged -= this.PropagateValueChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.ErpRequisitionChanged -= this.PropagateValueChanges;
                this._parent.TypeAssetChanged -= this.PropagateValueChanges;
                this._parent.ErpPOLineItemChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.TypeMaterial == null))
                {
                    ITypeMaterial typeMaterialCasted = item.As<ITypeMaterial>();
                    if ((typeMaterialCasted != null))
                    {
                        this._parent.TypeMaterial = typeMaterialCasted;
                        return;
                    }
                }
                if ((this._parent.ErpQuoteLineItem == null))
                {
                    IErpQuoteLineItem erpQuoteLineItemCasted = item.As<IErpQuoteLineItem>();
                    if ((erpQuoteLineItemCasted != null))
                    {
                        this._parent.ErpQuoteLineItem = erpQuoteLineItemCasted;
                        return;
                    }
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                if ((this._parent.ErpRequisition == null))
                {
                    IErpRequisition erpRequisitionCasted = item.As<IErpRequisition>();
                    if ((erpRequisitionCasted != null))
                    {
                        this._parent.ErpRequisition = erpRequisitionCasted;
                        return;
                    }
                }
                if ((this._parent.TypeAsset == null))
                {
                    ITypeAsset typeAssetCasted = item.As<ITypeAsset>();
                    if ((typeAssetCasted != null))
                    {
                        this._parent.TypeAsset = typeAssetCasted;
                        return;
                    }
                }
                if ((this._parent.ErpPOLineItem == null))
                {
                    IErpPOLineItem erpPOLineItemCasted = item.As<IErpPOLineItem>();
                    if ((erpPOLineItemCasted != null))
                    {
                        this._parent.ErpPOLineItem = erpPOLineItemCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TypeMaterial = null;
                this._parent.ErpQuoteLineItem = null;
                this._parent.Status = null;
                this._parent.ErpRequisition = null;
                this._parent.TypeAsset = null;
                this._parent.ErpPOLineItem = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.TypeMaterial))
                {
                    return true;
                }
                if ((item == this._parent.ErpQuoteLineItem))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if ((item == this._parent.ErpRequisition))
                {
                    return true;
                }
                if ((item == this._parent.TypeAsset))
                {
                    return true;
                }
                if ((item == this._parent.ErpPOLineItem))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.TypeMaterial != null))
                {
                    array[arrayIndex] = this._parent.TypeMaterial;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpQuoteLineItem != null))
                {
                    array[arrayIndex] = this._parent.ErpQuoteLineItem;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpRequisition != null))
                {
                    array[arrayIndex] = this._parent.ErpRequisition;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TypeAsset != null))
                {
                    array[arrayIndex] = this._parent.TypeAsset;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpPOLineItem != null))
                {
                    array[arrayIndex] = this._parent.ErpPOLineItem;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.TypeMaterial == item))
                {
                    this._parent.TypeMaterial = null;
                    return true;
                }
                if ((this._parent.ErpQuoteLineItem == item))
                {
                    this._parent.ErpQuoteLineItem = null;
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                if ((this._parent.ErpRequisition == item))
                {
                    this._parent.ErpRequisition = null;
                    return true;
                }
                if ((this._parent.TypeAsset == item))
                {
                    this._parent.TypeAsset = null;
                    return true;
                }
                if ((this._parent.ErpPOLineItem == item))
                {
                    this._parent.ErpPOLineItem = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TypeMaterial).Concat(this._parent.ErpQuoteLineItem).Concat(this._parent.Status).Concat(this._parent.ErpRequisition).Concat(this._parent.TypeAsset).Concat(this._parent.ErpPOLineItem).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the deliveryDate property
        /// </summary>
        private sealed class DeliveryDateProxy : ModelPropertyChange<IErpReqLineItem, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DeliveryDateProxy(IErpReqLineItem modelElement) : 
                    base(modelElement, "deliveryDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.DeliveryDate;
                }
                set
                {
                    this.ModelElement.DeliveryDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the quantity property
        /// </summary>
        private sealed class QuantityProxy : ModelPropertyChange<IErpReqLineItem, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QuantityProxy(IErpReqLineItem modelElement) : 
                    base(modelElement, "quantity")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.Quantity;
                }
                set
                {
                    this.ModelElement.Quantity = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the code property
        /// </summary>
        private sealed class CodeProxy : ModelPropertyChange<IErpReqLineItem, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CodeProxy(IErpReqLineItem modelElement) : 
                    base(modelElement, "code")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Code;
                }
                set
                {
                    this.ModelElement.Code = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the cost property
        /// </summary>
        private sealed class CostProxy : ModelPropertyChange<IErpReqLineItem, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CostProxy(IErpReqLineItem modelElement) : 
                    base(modelElement, "cost")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Cost;
                }
                set
                {
                    this.ModelElement.Cost = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TypeMaterial property
        /// </summary>
        private sealed class TypeMaterialProxy : ModelPropertyChange<IErpReqLineItem, ITypeMaterial>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeMaterialProxy(IErpReqLineItem modelElement) : 
                    base(modelElement, "TypeMaterial")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITypeMaterial Value
            {
                get
                {
                    return this.ModelElement.TypeMaterial;
                }
                set
                {
                    this.ModelElement.TypeMaterial = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpQuoteLineItem property
        /// </summary>
        private sealed class ErpQuoteLineItemProxy : ModelPropertyChange<IErpReqLineItem, IErpQuoteLineItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpQuoteLineItemProxy(IErpReqLineItem modelElement) : 
                    base(modelElement, "ErpQuoteLineItem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpQuoteLineItem Value
            {
                get
                {
                    return this.ModelElement.ErpQuoteLineItem;
                }
                set
                {
                    this.ModelElement.ErpQuoteLineItem = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IErpReqLineItem, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IErpReqLineItem modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpRequisition property
        /// </summary>
        private sealed class ErpRequisitionProxy : ModelPropertyChange<IErpReqLineItem, IErpRequisition>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpRequisitionProxy(IErpReqLineItem modelElement) : 
                    base(modelElement, "ErpRequisition")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpRequisition Value
            {
                get
                {
                    return this.ModelElement.ErpRequisition;
                }
                set
                {
                    this.ModelElement.ErpRequisition = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TypeAsset property
        /// </summary>
        private sealed class TypeAssetProxy : ModelPropertyChange<IErpReqLineItem, ITypeAsset>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeAssetProxy(IErpReqLineItem modelElement) : 
                    base(modelElement, "TypeAsset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITypeAsset Value
            {
                get
                {
                    return this.ModelElement.TypeAsset;
                }
                set
                {
                    this.ModelElement.TypeAsset = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpPOLineItem property
        /// </summary>
        private sealed class ErpPOLineItemProxy : ModelPropertyChange<IErpReqLineItem, IErpPOLineItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpPOLineItemProxy(IErpReqLineItem modelElement) : 
                    base(modelElement, "ErpPOLineItem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpPOLineItem Value
            {
                get
                {
                    return this.ModelElement.ErpPOLineItem;
                }
                set
                {
                    this.ModelElement.ErpPOLineItem = value;
                }
            }
        }
    }
}

