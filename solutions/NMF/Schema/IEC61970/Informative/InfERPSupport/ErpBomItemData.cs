//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport
{
    
    
    /// <summary>
    /// The default implementation of the ErpBomItemData class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfERPSupport")]
    [XmlNamespacePrefixAttribute("cimInfERPSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
        "BomItemData")]
    [DebuggerDisplayAttribute("ErpBomItemData {UUID}")]
    public partial class ErpBomItemData : IdentifiedObject, IErpBomItemData, IModelElement
    {
        
        private static Lazy<ITypedElement> _designLocationReference = new Lazy<ITypedElement>(RetrieveDesignLocationReference);
        
        /// <summary>
        /// The backing field for the DesignLocation property
        /// </summary>
        private IDesignLocation _designLocation;
        
        private static Lazy<ITypedElement> _erpBOMReference = new Lazy<ITypedElement>(RetrieveErpBOMReference);
        
        /// <summary>
        /// The backing field for the ErpBOM property
        /// </summary>
        private IErpBOM _erpBOM;
        
        private static Lazy<ITypedElement> _typeAssetReference = new Lazy<ITypedElement>(RetrieveTypeAssetReference);
        
        /// <summary>
        /// The backing field for the TypeAsset property
        /// </summary>
        private ITypeAsset _typeAsset;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The DesignLocation property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpBomItemDatas")]
        public virtual IDesignLocation DesignLocation
        {
            get
            {
                return this._designLocation;
            }
            set
            {
                if ((this._designLocation != value))
                {
                    IDesignLocation old = this._designLocation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDesignLocationChanging(e);
                    this.OnPropertyChanging("DesignLocation", e, _designLocationReference);
                    this._designLocation = value;
                    if ((old != null))
                    {
                        old.ErpBomItemDatas.Remove(this);
                        old.Deleted -= this.OnResetDesignLocation;
                    }
                    if ((value != null))
                    {
                        value.ErpBomItemDatas.Add(this);
                        value.Deleted += this.OnResetDesignLocation;
                    }
                    this.OnDesignLocationChanged(e);
                    this.OnPropertyChanged("DesignLocation", e, _designLocationReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpBOM property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpBomItemDatas")]
        public virtual IErpBOM ErpBOM
        {
            get
            {
                return this._erpBOM;
            }
            set
            {
                if ((this._erpBOM != value))
                {
                    IErpBOM old = this._erpBOM;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpBOMChanging(e);
                    this.OnPropertyChanging("ErpBOM", e, _erpBOMReference);
                    this._erpBOM = value;
                    if ((old != null))
                    {
                        old.ErpBomItemDatas.Remove(this);
                        old.Deleted -= this.OnResetErpBOM;
                    }
                    if ((value != null))
                    {
                        value.ErpBomItemDatas.Add(this);
                        value.Deleted += this.OnResetErpBOM;
                    }
                    this.OnErpBOMChanged(e);
                    this.OnPropertyChanged("ErpBOM", e, _erpBOMReference);
                }
            }
        }
        
        /// <summary>
        /// The TypeAsset property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpBomItemDatas")]
        public virtual ITypeAsset TypeAsset
        {
            get
            {
                return this._typeAsset;
            }
            set
            {
                if ((this._typeAsset != value))
                {
                    ITypeAsset old = this._typeAsset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeAssetChanging(e);
                    this.OnPropertyChanging("TypeAsset", e, _typeAssetReference);
                    this._typeAsset = value;
                    if ((old != null))
                    {
                        old.ErpBomItemDatas.Remove(this);
                        old.Deleted -= this.OnResetTypeAsset;
                    }
                    if ((value != null))
                    {
                        value.ErpBomItemDatas.Add(this);
                        value.Deleted += this.OnResetTypeAsset;
                    }
                    this.OnTypeAssetChanged(e);
                    this.OnPropertyChanged("TypeAsset", e, _typeAssetReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ErpBomItemDataReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                            "BomItemData")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the DesignLocation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DesignLocationChanging;
        
        /// <summary>
        /// Gets fired when the DesignLocation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DesignLocationChanged;
        
        /// <summary>
        /// Gets fired before the ErpBOM property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpBOMChanging;
        
        /// <summary>
        /// Gets fired when the ErpBOM property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpBOMChanged;
        
        /// <summary>
        /// Gets fired before the TypeAsset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeAssetChanging;
        
        /// <summary>
        /// Gets fired when the TypeAsset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeAssetChanged;
        
        private static ITypedElement RetrieveDesignLocationReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpBomItemData.ClassInstance)).Resolve("DesignLocation")));
        }
        
        /// <summary>
        /// Raises the DesignLocationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDesignLocationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DesignLocationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DesignLocationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDesignLocationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DesignLocationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DesignLocation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDesignLocation(object sender, System.EventArgs eventArgs)
        {
            this.DesignLocation = null;
        }
        
        private static ITypedElement RetrieveErpBOMReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpBomItemData.ClassInstance)).Resolve("ErpBOM")));
        }
        
        /// <summary>
        /// Raises the ErpBOMChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpBOMChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpBOMChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpBOMChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpBOMChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpBOMChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpBOM property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpBOM(object sender, System.EventArgs eventArgs)
        {
            this.ErpBOM = null;
        }
        
        private static ITypedElement RetrieveTypeAssetReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpBomItemData.ClassInstance)).Resolve("TypeAsset")));
        }
        
        /// <summary>
        /// Raises the TypeAssetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeAssetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeAssetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeAssetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeAssetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeAssetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TypeAsset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTypeAsset(object sender, System.EventArgs eventArgs)
        {
            this.TypeAsset = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DESIGNLOCATION"))
            {
                this.DesignLocation = ((IDesignLocation)(value));
                return;
            }
            if ((feature == "ERPBOM"))
            {
                this.ErpBOM = ((IErpBOM)(value));
                return;
            }
            if ((feature == "TYPEASSET"))
            {
                this.TypeAsset = ((ITypeAsset)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "DesignLocation"))
            {
                return new DesignLocationProxy(this);
            }
            if ((attribute == "ErpBOM"))
            {
                return new ErpBOMProxy(this);
            }
            if ((attribute == "TypeAsset"))
            {
                return new TypeAssetProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "DesignLocation"))
            {
                return new DesignLocationProxy(this);
            }
            if ((reference == "ErpBOM"))
            {
                return new ErpBOMProxy(this);
            }
            if ((reference == "TypeAsset"))
            {
                return new TypeAssetProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                        "BomItemData")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ErpBomItemData class
        /// </summary>
        public class ErpBomItemDataReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ErpBomItemData _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ErpBomItemDataReferencedElementsCollection(ErpBomItemData parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.DesignLocation != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpBOM != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TypeAsset != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.DesignLocationChanged += this.PropagateValueChanges;
                this._parent.ErpBOMChanged += this.PropagateValueChanges;
                this._parent.TypeAssetChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.DesignLocationChanged -= this.PropagateValueChanges;
                this._parent.ErpBOMChanged -= this.PropagateValueChanges;
                this._parent.TypeAssetChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.DesignLocation == null))
                {
                    IDesignLocation designLocationCasted = item.As<IDesignLocation>();
                    if ((designLocationCasted != null))
                    {
                        this._parent.DesignLocation = designLocationCasted;
                        return;
                    }
                }
                if ((this._parent.ErpBOM == null))
                {
                    IErpBOM erpBOMCasted = item.As<IErpBOM>();
                    if ((erpBOMCasted != null))
                    {
                        this._parent.ErpBOM = erpBOMCasted;
                        return;
                    }
                }
                if ((this._parent.TypeAsset == null))
                {
                    ITypeAsset typeAssetCasted = item.As<ITypeAsset>();
                    if ((typeAssetCasted != null))
                    {
                        this._parent.TypeAsset = typeAssetCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.DesignLocation = null;
                this._parent.ErpBOM = null;
                this._parent.TypeAsset = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.DesignLocation))
                {
                    return true;
                }
                if ((item == this._parent.ErpBOM))
                {
                    return true;
                }
                if ((item == this._parent.TypeAsset))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.DesignLocation != null))
                {
                    array[arrayIndex] = this._parent.DesignLocation;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpBOM != null))
                {
                    array[arrayIndex] = this._parent.ErpBOM;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TypeAsset != null))
                {
                    array[arrayIndex] = this._parent.TypeAsset;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.DesignLocation == item))
                {
                    this._parent.DesignLocation = null;
                    return true;
                }
                if ((this._parent.ErpBOM == item))
                {
                    this._parent.ErpBOM = null;
                    return true;
                }
                if ((this._parent.TypeAsset == item))
                {
                    this._parent.TypeAsset = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.DesignLocation).Concat(this._parent.ErpBOM).Concat(this._parent.TypeAsset).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DesignLocation property
        /// </summary>
        private sealed class DesignLocationProxy : ModelPropertyChange<IErpBomItemData, IDesignLocation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DesignLocationProxy(IErpBomItemData modelElement) : 
                    base(modelElement, "DesignLocation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDesignLocation Value
            {
                get
                {
                    return this.ModelElement.DesignLocation;
                }
                set
                {
                    this.ModelElement.DesignLocation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpBOM property
        /// </summary>
        private sealed class ErpBOMProxy : ModelPropertyChange<IErpBomItemData, IErpBOM>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpBOMProxy(IErpBomItemData modelElement) : 
                    base(modelElement, "ErpBOM")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpBOM Value
            {
                get
                {
                    return this.ModelElement.ErpBOM;
                }
                set
                {
                    this.ModelElement.ErpBOM = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TypeAsset property
        /// </summary>
        private sealed class TypeAssetProxy : ModelPropertyChange<IErpBomItemData, ITypeAsset>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeAssetProxy(IErpBomItemData modelElement) : 
                    base(modelElement, "TypeAsset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITypeAsset Value
            {
                get
                {
                    return this.ModelElement.TypeAsset;
                }
                set
                {
                    this.ModelElement.TypeAsset = value;
                }
            }
        }
    }
}

