//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport
{
    
    
    /// <summary>
    /// The default implementation of the ErpLedgerEntry class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfERPSupport")]
    [XmlNamespacePrefixAttribute("cimInfERPSupport")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
        "LedgerEntry")]
    [DebuggerDisplayAttribute("ErpLedgerEntry {UUID}")]
    public partial class ErpLedgerEntry : IdentifiedObject, IErpLedgerEntry, IModelElement
    {
        
        /// <summary>
        /// The backing field for the TransactionDateTime property
        /// </summary>
        private DateTime _transactionDateTime;
        
        private static Lazy<ITypedElement> _transactionDateTimeAttribute = new Lazy<ITypedElement>(RetrieveTransactionDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the AccountID property
        /// </summary>
        private string _accountID;
        
        private static Lazy<ITypedElement> _accountIDAttribute = new Lazy<ITypedElement>(RetrieveAccountIDAttribute);
        
        /// <summary>
        /// The backing field for the Amount property
        /// </summary>
        private float _amount;
        
        private static Lazy<ITypedElement> _amountAttribute = new Lazy<ITypedElement>(RetrieveAmountAttribute);
        
        /// <summary>
        /// The backing field for the PostedDateTime property
        /// </summary>
        private DateTime _postedDateTime;
        
        private static Lazy<ITypedElement> _postedDateTimeAttribute = new Lazy<ITypedElement>(RetrievePostedDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the AccountKind property
        /// </summary>
        private Nullable<ErpAccountKind> _accountKind;
        
        private static Lazy<ITypedElement> _accountKindAttribute = new Lazy<ITypedElement>(RetrieveAccountKindAttribute);
        
        private static Lazy<ITypedElement> _erpJounalEntryReference = new Lazy<ITypedElement>(RetrieveErpJounalEntryReference);
        
        /// <summary>
        /// The backing field for the ErpJounalEntry property
        /// </summary>
        private IErpJournalEntry _erpJounalEntry;
        
        private static Lazy<ITypedElement> _erpLedgerEntryReference = new Lazy<ITypedElement>(RetrieveErpLedgerEntryReference);
        
        /// <summary>
        /// The backing field for the ErpLedgerEntry_ property
        /// </summary>
        private IErpLedBudLineItem _erpLedgerEntry_;
        
        private static Lazy<ITypedElement> _userAttributesReference = new Lazy<ITypedElement>(RetrieveUserAttributesReference);
        
        /// <summary>
        /// The backing field for the UserAttributes property
        /// </summary>
        private ErpLedgerEntryUserAttributesCollection _userAttributes;
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static Lazy<ITypedElement> _settlementsReference = new Lazy<ITypedElement>(RetrieveSettlementsReference);
        
        /// <summary>
        /// The backing field for the Settlements property
        /// </summary>
        private ErpLedgerEntrySettlementsCollection _settlements;
        
        private static Lazy<ITypedElement> _erpLedgerReference = new Lazy<ITypedElement>(RetrieveErpLedgerReference);
        
        /// <summary>
        /// The backing field for the ErpLedger property
        /// </summary>
        private IErpLedger _erpLedger;
        
        private static IClass _classInstance;
        
        public ErpLedgerEntry()
        {
            this._userAttributes = new ErpLedgerEntryUserAttributesCollection(this);
            this._userAttributes.CollectionChanging += this.UserAttributesCollectionChanging;
            this._userAttributes.CollectionChanged += this.UserAttributesCollectionChanged;
            this._settlements = new ErpLedgerEntrySettlementsCollection(this);
            this._settlements.CollectionChanging += this.SettlementsCollectionChanging;
            this._settlements.CollectionChanged += this.SettlementsCollectionChanged;
        }
        
        /// <summary>
        /// The transactionDateTime property
        /// </summary>
        [XmlElementNameAttribute("transactionDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime TransactionDateTime
        {
            get
            {
                return this._transactionDateTime;
            }
            set
            {
                if ((this._transactionDateTime != value))
                {
                    DateTime old = this._transactionDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransactionDateTimeChanging(e);
                    this.OnPropertyChanging("TransactionDateTime", e, _transactionDateTimeAttribute);
                    this._transactionDateTime = value;
                    this.OnTransactionDateTimeChanged(e);
                    this.OnPropertyChanged("TransactionDateTime", e, _transactionDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The accountID property
        /// </summary>
        [XmlElementNameAttribute("accountID")]
        [XmlAttributeAttribute(true)]
        public virtual string AccountID
        {
            get
            {
                return this._accountID;
            }
            set
            {
                if ((this._accountID != value))
                {
                    string old = this._accountID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAccountIDChanging(e);
                    this.OnPropertyChanging("AccountID", e, _accountIDAttribute);
                    this._accountID = value;
                    this.OnAccountIDChanged(e);
                    this.OnPropertyChanged("AccountID", e, _accountIDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The amount property
        /// </summary>
        [XmlElementNameAttribute("amount")]
        [XmlAttributeAttribute(true)]
        public virtual float Amount
        {
            get
            {
                return this._amount;
            }
            set
            {
                if ((this._amount != value))
                {
                    float old = this._amount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmountChanging(e);
                    this.OnPropertyChanging("Amount", e, _amountAttribute);
                    this._amount = value;
                    this.OnAmountChanged(e);
                    this.OnPropertyChanged("Amount", e, _amountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The postedDateTime property
        /// </summary>
        [XmlElementNameAttribute("postedDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime PostedDateTime
        {
            get
            {
                return this._postedDateTime;
            }
            set
            {
                if ((this._postedDateTime != value))
                {
                    DateTime old = this._postedDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPostedDateTimeChanging(e);
                    this.OnPropertyChanging("PostedDateTime", e, _postedDateTimeAttribute);
                    this._postedDateTime = value;
                    this.OnPostedDateTimeChanged(e);
                    this.OnPropertyChanged("PostedDateTime", e, _postedDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The accountKind property
        /// </summary>
        [XmlElementNameAttribute("accountKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<ErpAccountKind> AccountKind
        {
            get
            {
                return this._accountKind;
            }
            set
            {
                if ((this._accountKind != value))
                {
                    Nullable<ErpAccountKind> old = this._accountKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAccountKindChanging(e);
                    this.OnPropertyChanging("AccountKind", e, _accountKindAttribute);
                    this._accountKind = value;
                    this.OnAccountKindChanged(e);
                    this.OnPropertyChanged("AccountKind", e, _accountKindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ErpJounalEntry property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpLedgerEntry")]
        public virtual IErpJournalEntry ErpJounalEntry
        {
            get
            {
                return this._erpJounalEntry;
            }
            set
            {
                if ((this._erpJounalEntry != value))
                {
                    IErpJournalEntry old = this._erpJounalEntry;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpJounalEntryChanging(e);
                    this.OnPropertyChanging("ErpJounalEntry", e, _erpJounalEntryReference);
                    this._erpJounalEntry = value;
                    if ((old != null))
                    {
                        old.ErpLedgerEntry = null;
                        old.Deleted -= this.OnResetErpJounalEntry;
                    }
                    if ((value != null))
                    {
                        value.ErpLedgerEntry = this;
                        value.Deleted += this.OnResetErpJounalEntry;
                    }
                    this.OnErpJounalEntryChanged(e);
                    this.OnPropertyChanged("ErpJounalEntry", e, _erpJounalEntryReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpLedgerEntry property
        /// </summary>
        [XmlElementNameAttribute("ErpLedgerEntry")]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpLedBudLineItem")]
        public virtual IErpLedBudLineItem ErpLedgerEntry_
        {
            get
            {
                return this._erpLedgerEntry_;
            }
            set
            {
                if ((this._erpLedgerEntry_ != value))
                {
                    IErpLedBudLineItem old = this._erpLedgerEntry_;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpLedgerEntry_Changing(e);
                    this.OnPropertyChanging("ErpLedgerEntry_", e, _erpLedgerEntryReference);
                    this._erpLedgerEntry_ = value;
                    if ((old != null))
                    {
                        old.ErpLedBudLineItem_ = null;
                        old.Deleted -= this.OnResetErpLedgerEntry_;
                    }
                    if ((value != null))
                    {
                        value.ErpLedBudLineItem_ = this;
                        value.Deleted += this.OnResetErpLedgerEntry_;
                    }
                    this.OnErpLedgerEntry_Changed(e);
                    this.OnPropertyChanged("ErpLedgerEntry_", e, _erpLedgerEntryReference);
                }
            }
        }
        
        /// <summary>
        /// The UserAttributes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpLedgerEntries")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IUserAttribute> UserAttributes
        {
            get
            {
                return this._userAttributes;
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// The Settlements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpLedgerEntries")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISettlement> Settlements
        {
            get
            {
                return this._settlements;
            }
        }
        
        /// <summary>
        /// The ErpLedger property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpLedgerEntries")]
        public virtual IErpLedger ErpLedger
        {
            get
            {
                return this._erpLedger;
            }
            set
            {
                if ((this._erpLedger != value))
                {
                    IErpLedger old = this._erpLedger;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpLedgerChanging(e);
                    this.OnPropertyChanging("ErpLedger", e, _erpLedgerReference);
                    this._erpLedger = value;
                    if ((old != null))
                    {
                        old.ErpLedgerEntries.Remove(this);
                        old.Deleted -= this.OnResetErpLedger;
                    }
                    if ((value != null))
                    {
                        value.ErpLedgerEntries.Add(this);
                        value.Deleted += this.OnResetErpLedger;
                    }
                    this.OnErpLedgerChanged(e);
                    this.OnPropertyChanged("ErpLedger", e, _erpLedgerReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ErpLedgerEntryReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                            "LedgerEntry")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the TransactionDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransactionDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the TransactionDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransactionDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the AccountID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccountIDChanging;
        
        /// <summary>
        /// Gets fired when the AccountID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccountIDChanged;
        
        /// <summary>
        /// Gets fired before the Amount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmountChanging;
        
        /// <summary>
        /// Gets fired when the Amount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmountChanged;
        
        /// <summary>
        /// Gets fired before the PostedDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PostedDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the PostedDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PostedDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the AccountKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccountKindChanging;
        
        /// <summary>
        /// Gets fired when the AccountKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccountKindChanged;
        
        /// <summary>
        /// Gets fired before the ErpJounalEntry property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpJounalEntryChanging;
        
        /// <summary>
        /// Gets fired when the ErpJounalEntry property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpJounalEntryChanged;
        
        /// <summary>
        /// Gets fired before the ErpLedgerEntry_ property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpLedgerEntry_Changing;
        
        /// <summary>
        /// Gets fired when the ErpLedgerEntry_ property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpLedgerEntry_Changed;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the ErpLedger property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpLedgerChanging;
        
        /// <summary>
        /// Gets fired when the ErpLedger property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpLedgerChanged;
        
        private static ITypedElement RetrieveTransactionDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpLedgerEntry.ClassInstance)).Resolve("transactionDateTime")));
        }
        
        /// <summary>
        /// Raises the TransactionDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransactionDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransactionDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransactionDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransactionDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransactionDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAccountIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpLedgerEntry.ClassInstance)).Resolve("accountID")));
        }
        
        /// <summary>
        /// Raises the AccountIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccountIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccountIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AccountIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccountIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccountIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAmountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpLedgerEntry.ClassInstance)).Resolve("amount")));
        }
        
        /// <summary>
        /// Raises the AmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePostedDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpLedgerEntry.ClassInstance)).Resolve("postedDateTime")));
        }
        
        /// <summary>
        /// Raises the PostedDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPostedDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PostedDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PostedDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPostedDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PostedDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAccountKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ErpLedgerEntry.ClassInstance)).Resolve("accountKind")));
        }
        
        /// <summary>
        /// Raises the AccountKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccountKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccountKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AccountKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccountKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccountKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveErpJounalEntryReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpLedgerEntry.ClassInstance)).Resolve("ErpJounalEntry")));
        }
        
        /// <summary>
        /// Raises the ErpJounalEntryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpJounalEntryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpJounalEntryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpJounalEntryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpJounalEntryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpJounalEntryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpJounalEntry property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpJounalEntry(object sender, System.EventArgs eventArgs)
        {
            this.ErpJounalEntry = null;
        }
        
        private static ITypedElement RetrieveErpLedgerEntryReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpLedgerEntry.ClassInstance)).Resolve("ErpLedgerEntry")));
        }
        
        /// <summary>
        /// Raises the ErpLedgerEntry_Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpLedgerEntry_Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpLedgerEntry_Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpLedgerEntry_Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpLedgerEntry_Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpLedgerEntry_Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpLedgerEntry_ property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpLedgerEntry_(object sender, System.EventArgs eventArgs)
        {
            this.ErpLedgerEntry_ = null;
        }
        
        private static ITypedElement RetrieveUserAttributesReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpLedgerEntry.ClassInstance)).Resolve("UserAttributes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the UserAttributes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UserAttributesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("UserAttributes", e, _userAttributesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the UserAttributes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void UserAttributesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("UserAttributes", e, _userAttributesReference);
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpLedgerEntry.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        private static ITypedElement RetrieveSettlementsReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpLedgerEntry.ClassInstance)).Resolve("Settlements")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Settlements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SettlementsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Settlements", e, _settlementsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Settlements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SettlementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Settlements", e, _settlementsReference);
        }
        
        private static ITypedElement RetrieveErpLedgerReference()
        {
            return ((ITypedElement)(((ModelElement)(ErpLedgerEntry.ClassInstance)).Resolve("ErpLedger")));
        }
        
        /// <summary>
        /// Raises the ErpLedgerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpLedgerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpLedgerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpLedgerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpLedgerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpLedgerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpLedger property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpLedger(object sender, System.EventArgs eventArgs)
        {
            this.ErpLedger = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TRANSACTIONDATETIME"))
            {
                return this.TransactionDateTime;
            }
            if ((attribute == "ACCOUNTID"))
            {
                return this.AccountID;
            }
            if ((attribute == "AMOUNT"))
            {
                return this.Amount;
            }
            if ((attribute == "POSTEDDATETIME"))
            {
                return this.PostedDateTime;
            }
            if ((attribute == "ACCOUNTKIND"))
            {
                return this.AccountKind;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "USERATTRIBUTES"))
            {
                return this._userAttributes;
            }
            if ((feature == "SETTLEMENTS"))
            {
                return this._settlements;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ERPJOUNALENTRY"))
            {
                this.ErpJounalEntry = ((IErpJournalEntry)(value));
                return;
            }
            if ((feature == "ERPLEDGERENTRY"))
            {
                this.ErpLedgerEntry_ = ((IErpLedBudLineItem)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "ERPLEDGER"))
            {
                this.ErpLedger = ((IErpLedger)(value));
                return;
            }
            if ((feature == "TRANSACTIONDATETIME"))
            {
                this.TransactionDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "ACCOUNTID"))
            {
                this.AccountID = ((string)(value));
                return;
            }
            if ((feature == "AMOUNT"))
            {
                this.Amount = ((float)(value));
                return;
            }
            if ((feature == "POSTEDDATETIME"))
            {
                this.PostedDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "ACCOUNTKIND"))
            {
                this.AccountKind = ((ErpAccountKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ErpJounalEntry"))
            {
                return new ErpJounalEntryProxy(this);
            }
            if ((attribute == "ErpLedgerEntry_"))
            {
                return new ErpLedgerEntryProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((attribute == "ErpLedger"))
            {
                return new ErpLedgerProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ErpJounalEntry"))
            {
                return new ErpJounalEntryProxy(this);
            }
            if ((reference == "ErpLedgerEntry_"))
            {
                return new ErpLedgerEntryProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((reference == "ErpLedger"))
            {
                return new ErpLedgerProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfERPSupport/Erp" +
                        "LedgerEntry")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ErpLedgerEntry class
        /// </summary>
        public class ErpLedgerEntryReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ErpLedgerEntry _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ErpLedgerEntryReferencedElementsCollection(ErpLedgerEntry parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ErpJounalEntry != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpLedgerEntry_ != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.UserAttributes.Count);
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Settlements.Count);
                    if ((this._parent.ErpLedger != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ErpJounalEntryChanged += this.PropagateValueChanges;
                this._parent.ErpLedgerEntry_Changed += this.PropagateValueChanges;
                this._parent.UserAttributes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.Settlements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpLedgerChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ErpJounalEntryChanged -= this.PropagateValueChanges;
                this._parent.ErpLedgerEntry_Changed -= this.PropagateValueChanges;
                this._parent.UserAttributes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.Settlements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpLedgerChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ErpJounalEntry == null))
                {
                    IErpJournalEntry erpJounalEntryCasted = item.As<IErpJournalEntry>();
                    if ((erpJounalEntryCasted != null))
                    {
                        this._parent.ErpJounalEntry = erpJounalEntryCasted;
                        return;
                    }
                }
                if ((this._parent.ErpLedgerEntry_ == null))
                {
                    IErpLedBudLineItem erpLedgerEntryCasted = item.As<IErpLedBudLineItem>();
                    if ((erpLedgerEntryCasted != null))
                    {
                        this._parent.ErpLedgerEntry_ = erpLedgerEntryCasted;
                        return;
                    }
                }
                IUserAttribute userAttributesCasted = item.As<IUserAttribute>();
                if ((userAttributesCasted != null))
                {
                    this._parent.UserAttributes.Add(userAttributesCasted);
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                ISettlement settlementsCasted = item.As<ISettlement>();
                if ((settlementsCasted != null))
                {
                    this._parent.Settlements.Add(settlementsCasted);
                }
                if ((this._parent.ErpLedger == null))
                {
                    IErpLedger erpLedgerCasted = item.As<IErpLedger>();
                    if ((erpLedgerCasted != null))
                    {
                        this._parent.ErpLedger = erpLedgerCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ErpJounalEntry = null;
                this._parent.ErpLedgerEntry_ = null;
                this._parent.UserAttributes.Clear();
                this._parent.Status = null;
                this._parent.Settlements.Clear();
                this._parent.ErpLedger = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ErpJounalEntry))
                {
                    return true;
                }
                if ((item == this._parent.ErpLedgerEntry_))
                {
                    return true;
                }
                if (this._parent.UserAttributes.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if (this._parent.Settlements.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ErpLedger))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ErpJounalEntry != null))
                {
                    array[arrayIndex] = this._parent.ErpJounalEntry;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpLedgerEntry_ != null))
                {
                    array[arrayIndex] = this._parent.ErpLedgerEntry_;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> userAttributesEnumerator = this._parent.UserAttributes.GetEnumerator();
                try
                {
                    for (
                    ; userAttributesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = userAttributesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    userAttributesEnumerator.Dispose();
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> settlementsEnumerator = this._parent.Settlements.GetEnumerator();
                try
                {
                    for (
                    ; settlementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = settlementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    settlementsEnumerator.Dispose();
                }
                if ((this._parent.ErpLedger != null))
                {
                    array[arrayIndex] = this._parent.ErpLedger;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ErpJounalEntry == item))
                {
                    this._parent.ErpJounalEntry = null;
                    return true;
                }
                if ((this._parent.ErpLedgerEntry_ == item))
                {
                    this._parent.ErpLedgerEntry_ = null;
                    return true;
                }
                IUserAttribute userAttributeItem = item.As<IUserAttribute>();
                if (((userAttributeItem != null) 
                            && this._parent.UserAttributes.Remove(userAttributeItem)))
                {
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                ISettlement settlementItem = item.As<ISettlement>();
                if (((settlementItem != null) 
                            && this._parent.Settlements.Remove(settlementItem)))
                {
                    return true;
                }
                if ((this._parent.ErpLedger == item))
                {
                    this._parent.ErpLedger = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ErpJounalEntry).Concat(this._parent.ErpLedgerEntry_).Concat(this._parent.UserAttributes).Concat(this._parent.Status).Concat(this._parent.Settlements).Concat(this._parent.ErpLedger).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the transactionDateTime property
        /// </summary>
        private sealed class TransactionDateTimeProxy : ModelPropertyChange<IErpLedgerEntry, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransactionDateTimeProxy(IErpLedgerEntry modelElement) : 
                    base(modelElement, "transactionDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.TransactionDateTime;
                }
                set
                {
                    this.ModelElement.TransactionDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the accountID property
        /// </summary>
        private sealed class AccountIDProxy : ModelPropertyChange<IErpLedgerEntry, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AccountIDProxy(IErpLedgerEntry modelElement) : 
                    base(modelElement, "accountID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AccountID;
                }
                set
                {
                    this.ModelElement.AccountID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the amount property
        /// </summary>
        private sealed class AmountProxy : ModelPropertyChange<IErpLedgerEntry, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AmountProxy(IErpLedgerEntry modelElement) : 
                    base(modelElement, "amount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Amount;
                }
                set
                {
                    this.ModelElement.Amount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the postedDateTime property
        /// </summary>
        private sealed class PostedDateTimeProxy : ModelPropertyChange<IErpLedgerEntry, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PostedDateTimeProxy(IErpLedgerEntry modelElement) : 
                    base(modelElement, "postedDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.PostedDateTime;
                }
                set
                {
                    this.ModelElement.PostedDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the accountKind property
        /// </summary>
        private sealed class AccountKindProxy : ModelPropertyChange<IErpLedgerEntry, Nullable<ErpAccountKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AccountKindProxy(IErpLedgerEntry modelElement) : 
                    base(modelElement, "accountKind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<ErpAccountKind> Value
            {
                get
                {
                    return this.ModelElement.AccountKind;
                }
                set
                {
                    this.ModelElement.AccountKind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpJounalEntry property
        /// </summary>
        private sealed class ErpJounalEntryProxy : ModelPropertyChange<IErpLedgerEntry, IErpJournalEntry>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpJounalEntryProxy(IErpLedgerEntry modelElement) : 
                    base(modelElement, "ErpJounalEntry")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpJournalEntry Value
            {
                get
                {
                    return this.ModelElement.ErpJounalEntry;
                }
                set
                {
                    this.ModelElement.ErpJounalEntry = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpLedgerEntry property
        /// </summary>
        private sealed class ErpLedgerEntryProxy : ModelPropertyChange<IErpLedgerEntry, IErpLedBudLineItem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpLedgerEntryProxy(IErpLedgerEntry modelElement) : 
                    base(modelElement, "ErpLedgerEntry")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpLedBudLineItem Value
            {
                get
                {
                    return this.ModelElement.ErpLedgerEntry_;
                }
                set
                {
                    this.ModelElement.ErpLedgerEntry_ = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IErpLedgerEntry, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IErpLedgerEntry modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpLedger property
        /// </summary>
        private sealed class ErpLedgerProxy : ModelPropertyChange<IErpLedgerEntry, IErpLedger>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpLedgerProxy(IErpLedgerEntry modelElement) : 
                    base(modelElement, "ErpLedger")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpLedger Value
            {
                get
                {
                    return this.ModelElement.ErpLedger;
                }
                set
                {
                    this.ModelElement.ErpLedger = value;
                }
            }
        }
    }
}

