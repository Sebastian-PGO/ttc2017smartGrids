using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The public interface for ElectricalInfo
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ElectricalInfo))]
    [XmlDefaultImplementationTypeAttribute(typeof(ElectricalInfo))]
    public interface IElectricalInfo : IModelElement, IAssetInfo
    {
        
        /// <summary>
        /// The wireCount property
        /// </summary>
        int WireCount
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isConnected property
        /// </summary>
        bool IsConnected
        {
            get;
            set;
        }
        
        /// <summary>
        /// The frequency property
        /// </summary>
        float Frequency
        {
            get;
            set;
        }
        
        /// <summary>
        /// The b0 property
        /// </summary>
        float B0
        {
            get;
            set;
        }
        
        /// <summary>
        /// The r0 property
        /// </summary>
        float R0
        {
            get;
            set;
        }
        
        /// <summary>
        /// The bil property
        /// </summary>
        float Bil
        {
            get;
            set;
        }
        
        /// <summary>
        /// The phaseCount property
        /// </summary>
        int PhaseCount
        {
            get;
            set;
        }
        
        /// <summary>
        /// The x0 property
        /// </summary>
        float X0
        {
            get;
            set;
        }
        
        /// <summary>
        /// The g0 property
        /// </summary>
        float G0
        {
            get;
            set;
        }
        
        /// <summary>
        /// The phaseCode property
        /// </summary>
        Nullable<PhaseCode> PhaseCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ratedCurrent property
        /// </summary>
        float RatedCurrent
        {
            get;
            set;
        }
        
        /// <summary>
        /// The x property
        /// </summary>
        float X
        {
            get;
            set;
        }
        
        /// <summary>
        /// The r property
        /// </summary>
        float R
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ratedApparentPower property
        /// </summary>
        float RatedApparentPower
        {
            get;
            set;
        }
        
        /// <summary>
        /// The g property
        /// </summary>
        float G
        {
            get;
            set;
        }
        
        /// <summary>
        /// The b property
        /// </summary>
        float B
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ratedVoltage property
        /// </summary>
        float RatedVoltage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ElectricalAssetModels property
        /// </summary>
        IOrderedSetExpression<IElectricalAssetModel> ElectricalAssetModels
        {
            get;
        }
        
        /// <summary>
        /// The ElectricalAssets property
        /// </summary>
        IOrderedSetExpression<IElectricalAsset> ElectricalAssets
        {
            get;
        }
        
        /// <summary>
        /// The ElectricalTypeAssets property
        /// </summary>
        IOrderedSetExpression<IElectricalTypeAsset> ElectricalTypeAssets
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the WireCount property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WireCountChanging;
        
        /// <summary>
        /// Gets fired when the WireCount property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WireCountChanged;
        
        /// <summary>
        /// Gets fired before the IsConnected property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsConnectedChanging;
        
        /// <summary>
        /// Gets fired when the IsConnected property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsConnectedChanged;
        
        /// <summary>
        /// Gets fired before the Frequency property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FrequencyChanging;
        
        /// <summary>
        /// Gets fired when the Frequency property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FrequencyChanged;
        
        /// <summary>
        /// Gets fired before the B0 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> B0Changing;
        
        /// <summary>
        /// Gets fired when the B0 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> B0Changed;
        
        /// <summary>
        /// Gets fired before the R0 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> R0Changing;
        
        /// <summary>
        /// Gets fired when the R0 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> R0Changed;
        
        /// <summary>
        /// Gets fired before the Bil property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BilChanging;
        
        /// <summary>
        /// Gets fired when the Bil property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BilChanged;
        
        /// <summary>
        /// Gets fired before the PhaseCount property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhaseCountChanging;
        
        /// <summary>
        /// Gets fired when the PhaseCount property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhaseCountChanged;
        
        /// <summary>
        /// Gets fired before the X0 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> X0Changing;
        
        /// <summary>
        /// Gets fired when the X0 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> X0Changed;
        
        /// <summary>
        /// Gets fired before the G0 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> G0Changing;
        
        /// <summary>
        /// Gets fired when the G0 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> G0Changed;
        
        /// <summary>
        /// Gets fired before the PhaseCode property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhaseCodeChanging;
        
        /// <summary>
        /// Gets fired when the PhaseCode property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhaseCodeChanged;
        
        /// <summary>
        /// Gets fired before the RatedCurrent property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedCurrentChanging;
        
        /// <summary>
        /// Gets fired when the RatedCurrent property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedCurrentChanged;
        
        /// <summary>
        /// Gets fired before the X property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XChanging;
        
        /// <summary>
        /// Gets fired when the X property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XChanged;
        
        /// <summary>
        /// Gets fired before the R property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RChanging;
        
        /// <summary>
        /// Gets fired when the R property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RChanged;
        
        /// <summary>
        /// Gets fired before the RatedApparentPower property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedApparentPowerChanging;
        
        /// <summary>
        /// Gets fired when the RatedApparentPower property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedApparentPowerChanged;
        
        /// <summary>
        /// Gets fired before the G property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GChanging;
        
        /// <summary>
        /// Gets fired when the G property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GChanged;
        
        /// <summary>
        /// Gets fired before the B property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BChanging;
        
        /// <summary>
        /// Gets fired when the B property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BChanged;
        
        /// <summary>
        /// Gets fired before the RatedVoltage property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedVoltageChanging;
        
        /// <summary>
        /// Gets fired when the RatedVoltage property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedVoltageChanged;
    }
}

