//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The public interface for StructureInfo
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(StructureInfo))]
    [XmlDefaultImplementationTypeAttribute(typeof(StructureInfo))]
    public interface IStructureInfo : IModelElement, IAssetInfo
    {
        
        /// <summary>
        /// The weedRemovedDate property
        /// </summary>
        string WeedRemovedDate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The fumigantName property
        /// </summary>
        string FumigantName
        {
            get;
            set;
        }
        
        /// <summary>
        /// The fumigantAppliedDate property
        /// </summary>
        string FumigantAppliedDate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The removeWeed property
        /// </summary>
        bool RemoveWeed
        {
            get;
            set;
        }
        
        /// <summary>
        /// The height property
        /// </summary>
        float Height
        {
            get;
            set;
        }
        
        /// <summary>
        /// The materialKind property
        /// </summary>
        Nullable<StructureMaterialKind> MaterialKind
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ratedVoltage property
        /// </summary>
        float RatedVoltage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The StructureSupportInfos property
        /// </summary>
        IOrderedSetExpression<IStructureSupportInfo> StructureSupportInfos
        {
            get;
        }
        
        /// <summary>
        /// The MountingConnections property
        /// </summary>
        IOrderedSetExpression<IMountingConnection> MountingConnections
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the WeedRemovedDate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WeedRemovedDateChanging;
        
        /// <summary>
        /// Gets fired when the WeedRemovedDate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WeedRemovedDateChanged;
        
        /// <summary>
        /// Gets fired before the FumigantName property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FumigantNameChanging;
        
        /// <summary>
        /// Gets fired when the FumigantName property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FumigantNameChanged;
        
        /// <summary>
        /// Gets fired before the FumigantAppliedDate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FumigantAppliedDateChanging;
        
        /// <summary>
        /// Gets fired when the FumigantAppliedDate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FumigantAppliedDateChanged;
        
        /// <summary>
        /// Gets fired before the RemoveWeed property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RemoveWeedChanging;
        
        /// <summary>
        /// Gets fired when the RemoveWeed property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RemoveWeedChanged;
        
        /// <summary>
        /// Gets fired before the Height property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HeightChanging;
        
        /// <summary>
        /// Gets fired when the Height property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HeightChanged;
        
        /// <summary>
        /// Gets fired before the MaterialKind property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaterialKindChanging;
        
        /// <summary>
        /// Gets fired when the MaterialKind property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaterialKindChanged;
        
        /// <summary>
        /// Gets fired before the RatedVoltage property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedVoltageChanging;
        
        /// <summary>
        /// Gets fired when the RatedVoltage property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedVoltageChanged;
    }
}

