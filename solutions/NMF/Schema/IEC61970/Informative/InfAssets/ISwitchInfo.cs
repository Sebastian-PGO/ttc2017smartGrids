using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The public interface for SwitchInfo
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(SwitchInfo))]
    [XmlDefaultImplementationTypeAttribute(typeof(SwitchInfo))]
    public interface ISwitchInfo : IModelElement, IElectricalInfo
    {
        
        /// <summary>
        /// The gang property
        /// </summary>
        bool Gang
        {
            get;
            set;
        }
        
        /// <summary>
        /// The poleCount property
        /// </summary>
        int PoleCount
        {
            get;
            set;
        }
        
        /// <summary>
        /// The interruptingRating property
        /// </summary>
        float InterruptingRating
        {
            get;
            set;
        }
        
        /// <summary>
        /// The dielectricStrength property
        /// </summary>
        float DielectricStrength
        {
            get;
            set;
        }
        
        /// <summary>
        /// The loadBreak property
        /// </summary>
        bool LoadBreak
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minimumCurrent property
        /// </summary>
        float MinimumCurrent
        {
            get;
            set;
        }
        
        /// <summary>
        /// The withstandCurrent property
        /// </summary>
        float WithstandCurrent
        {
            get;
            set;
        }
        
        /// <summary>
        /// The makingCapacity property
        /// </summary>
        float MakingCapacity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The remote property
        /// </summary>
        bool Remote
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Gang property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GangChanging;
        
        /// <summary>
        /// Gets fired when the Gang property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GangChanged;
        
        /// <summary>
        /// Gets fired before the PoleCount property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PoleCountChanging;
        
        /// <summary>
        /// Gets fired when the PoleCount property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PoleCountChanged;
        
        /// <summary>
        /// Gets fired before the InterruptingRating property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InterruptingRatingChanging;
        
        /// <summary>
        /// Gets fired when the InterruptingRating property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InterruptingRatingChanged;
        
        /// <summary>
        /// Gets fired before the DielectricStrength property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DielectricStrengthChanging;
        
        /// <summary>
        /// Gets fired when the DielectricStrength property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DielectricStrengthChanged;
        
        /// <summary>
        /// Gets fired before the LoadBreak property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LoadBreakChanging;
        
        /// <summary>
        /// Gets fired when the LoadBreak property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LoadBreakChanged;
        
        /// <summary>
        /// Gets fired before the MinimumCurrent property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinimumCurrentChanging;
        
        /// <summary>
        /// Gets fired when the MinimumCurrent property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinimumCurrentChanged;
        
        /// <summary>
        /// Gets fired before the WithstandCurrent property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WithstandCurrentChanging;
        
        /// <summary>
        /// Gets fired when the WithstandCurrent property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WithstandCurrentChanged;
        
        /// <summary>
        /// Gets fired before the MakingCapacity property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MakingCapacityChanging;
        
        /// <summary>
        /// Gets fired when the MakingCapacity property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MakingCapacityChanged;
        
        /// <summary>
        /// Gets fired before the Remote property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RemoteChanging;
        
        /// <summary>
        /// Gets fired when the Remote property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RemoteChanged;
    }
}

