using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The default implementation of the BushingInsulationPF class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets")]
    [XmlNamespacePrefixAttribute("cimInfAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Bushing" +
        "InsulationPF")]
    [DebuggerDisplayAttribute("BushingInsulationPF {UUID}")]
    public partial class BushingInsulationPF : IdentifiedObject, IBushingInsulationPF, IModelElement
    {
        
        /// <summary>
        /// The backing field for the TestKind property
        /// </summary>
        private Nullable<BushingInsulationPfTestKind> _testKind;
        
        private static Lazy<ITypedElement> _testKindAttribute = new Lazy<ITypedElement>(RetrieveTestKindAttribute);
        
        private static Lazy<ITypedElement> _bushingInfoReference = new Lazy<ITypedElement>(RetrieveBushingInfoReference);
        
        /// <summary>
        /// The backing field for the BushingInfo property
        /// </summary>
        private IBushingInfo _bushingInfo;
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static Lazy<ITypedElement> _transformerObservationReference = new Lazy<ITypedElement>(RetrieveTransformerObservationReference);
        
        /// <summary>
        /// The backing field for the TransformerObservation property
        /// </summary>
        private ITransformerObservation _transformerObservation;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The testKind property
        /// </summary>
        [XmlElementNameAttribute("testKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<BushingInsulationPfTestKind> TestKind
        {
            get
            {
                return this._testKind;
            }
            set
            {
                if ((this._testKind != value))
                {
                    Nullable<BushingInsulationPfTestKind> old = this._testKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTestKindChanging(e);
                    this.OnPropertyChanging("TestKind", e, _testKindAttribute);
                    this._testKind = value;
                    this.OnTestKindChanged(e);
                    this.OnPropertyChanged("TestKind", e, _testKindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The BushingInfo property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("BushingInsulationPFs")]
        public virtual IBushingInfo BushingInfo
        {
            get
            {
                return this._bushingInfo;
            }
            set
            {
                if ((this._bushingInfo != value))
                {
                    IBushingInfo old = this._bushingInfo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBushingInfoChanging(e);
                    this.OnPropertyChanging("BushingInfo", e, _bushingInfoReference);
                    this._bushingInfo = value;
                    if ((old != null))
                    {
                        old.BushingInsulationPFs.Remove(this);
                        old.Deleted -= this.OnResetBushingInfo;
                    }
                    if ((value != null))
                    {
                        value.BushingInsulationPFs.Add(this);
                        value.Deleted += this.OnResetBushingInfo;
                    }
                    this.OnBushingInfoChanged(e);
                    this.OnPropertyChanged("BushingInfo", e, _bushingInfoReference);
                }
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// The TransformerObservation property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("BushingInsultationPFs")]
        public virtual ITransformerObservation TransformerObservation
        {
            get
            {
                return this._transformerObservation;
            }
            set
            {
                if ((this._transformerObservation != value))
                {
                    ITransformerObservation old = this._transformerObservation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerObservationChanging(e);
                    this.OnPropertyChanging("TransformerObservation", e, _transformerObservationReference);
                    this._transformerObservation = value;
                    if ((old != null))
                    {
                        old.BushingInsultationPFs.Remove(this);
                        old.Deleted -= this.OnResetTransformerObservation;
                    }
                    if ((value != null))
                    {
                        value.BushingInsultationPFs.Add(this);
                        value.Deleted += this.OnResetTransformerObservation;
                    }
                    this.OnTransformerObservationChanged(e);
                    this.OnPropertyChanged("TransformerObservation", e, _transformerObservationReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new BushingInsulationPFReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Bushing" +
                            "InsulationPF")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the TestKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TestKindChanging;
        
        /// <summary>
        /// Gets fired when the TestKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TestKindChanged;
        
        /// <summary>
        /// Gets fired before the BushingInfo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BushingInfoChanging;
        
        /// <summary>
        /// Gets fired when the BushingInfo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BushingInfoChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the TransformerObservation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerObservationChanging;
        
        /// <summary>
        /// Gets fired when the TransformerObservation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerObservationChanged;
        
        private static ITypedElement RetrieveTestKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BushingInsulationPF.ClassInstance)).Resolve("testKind")));
        }
        
        /// <summary>
        /// Raises the TestKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTestKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TestKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TestKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTestKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TestKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBushingInfoReference()
        {
            return ((ITypedElement)(((ModelElement)(BushingInsulationPF.ClassInstance)).Resolve("BushingInfo")));
        }
        
        /// <summary>
        /// Raises the BushingInfoChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBushingInfoChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BushingInfoChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BushingInfoChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBushingInfoChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BushingInfoChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BushingInfo property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBushingInfo(object sender, System.EventArgs eventArgs)
        {
            this.BushingInfo = null;
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(BushingInsulationPF.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        private static ITypedElement RetrieveTransformerObservationReference()
        {
            return ((ITypedElement)(((ModelElement)(BushingInsulationPF.ClassInstance)).Resolve("TransformerObservation")));
        }
        
        /// <summary>
        /// Raises the TransformerObservationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerObservationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerObservationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformerObservationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerObservationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerObservationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TransformerObservation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTransformerObservation(object sender, System.EventArgs eventArgs)
        {
            this.TransformerObservation = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TESTKIND"))
            {
                return this.TestKind;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "BUSHINGINFO"))
            {
                this.BushingInfo = ((IBushingInfo)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "TRANSFORMEROBSERVATION"))
            {
                this.TransformerObservation = ((ITransformerObservation)(value));
                return;
            }
            if ((feature == "TESTKIND"))
            {
                this.TestKind = ((BushingInsulationPfTestKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "BushingInfo"))
            {
                return new BushingInfoProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((attribute == "TransformerObservation"))
            {
                return new TransformerObservationProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "BushingInfo"))
            {
                return new BushingInfoProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((reference == "TransformerObservation"))
            {
                return new TransformerObservationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Bushing" +
                        "InsulationPF")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the BushingInsulationPF class
        /// </summary>
        public class BushingInsulationPFReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private BushingInsulationPF _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BushingInsulationPFReferencedElementsCollection(BushingInsulationPF parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.BushingInfo != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TransformerObservation != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BushingInfoChanged += this.PropagateValueChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.TransformerObservationChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BushingInfoChanged -= this.PropagateValueChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.TransformerObservationChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.BushingInfo == null))
                {
                    IBushingInfo bushingInfoCasted = item.As<IBushingInfo>();
                    if ((bushingInfoCasted != null))
                    {
                        this._parent.BushingInfo = bushingInfoCasted;
                        return;
                    }
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                if ((this._parent.TransformerObservation == null))
                {
                    ITransformerObservation transformerObservationCasted = item.As<ITransformerObservation>();
                    if ((transformerObservationCasted != null))
                    {
                        this._parent.TransformerObservation = transformerObservationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.BushingInfo = null;
                this._parent.Status = null;
                this._parent.TransformerObservation = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.BushingInfo))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if ((item == this._parent.TransformerObservation))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.BushingInfo != null))
                {
                    array[arrayIndex] = this._parent.BushingInfo;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TransformerObservation != null))
                {
                    array[arrayIndex] = this._parent.TransformerObservation;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.BushingInfo == item))
                {
                    this._parent.BushingInfo = null;
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                if ((this._parent.TransformerObservation == item))
                {
                    this._parent.TransformerObservation = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.BushingInfo).Concat(this._parent.Status).Concat(this._parent.TransformerObservation).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the testKind property
        /// </summary>
        private sealed class TestKindProxy : ModelPropertyChange<IBushingInsulationPF, Nullable<BushingInsulationPfTestKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TestKindProxy(IBushingInsulationPF modelElement) : 
                    base(modelElement, "testKind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<BushingInsulationPfTestKind> Value
            {
                get
                {
                    return this.ModelElement.TestKind;
                }
                set
                {
                    this.ModelElement.TestKind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BushingInfo property
        /// </summary>
        private sealed class BushingInfoProxy : ModelPropertyChange<IBushingInsulationPF, IBushingInfo>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BushingInfoProxy(IBushingInsulationPF modelElement) : 
                    base(modelElement, "BushingInfo")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBushingInfo Value
            {
                get
                {
                    return this.ModelElement.BushingInfo;
                }
                set
                {
                    this.ModelElement.BushingInfo = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IBushingInsulationPF, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IBushingInsulationPF modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TransformerObservation property
        /// </summary>
        private sealed class TransformerObservationProxy : ModelPropertyChange<IBushingInsulationPF, ITransformerObservation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformerObservationProxy(IBushingInsulationPF modelElement) : 
                    base(modelElement, "TransformerObservation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITransformerObservation Value
            {
                get
                {
                    return this.ModelElement.TransformerObservation;
                }
                set
                {
                    this.ModelElement.TransformerObservation = value;
                }
            }
        }
    }
}

