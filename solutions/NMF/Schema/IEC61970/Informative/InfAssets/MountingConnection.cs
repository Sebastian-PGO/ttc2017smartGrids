using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The default implementation of the MountingConnection class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets")]
    [XmlNamespacePrefixAttribute("cimInfAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Mountin" +
        "gConnection")]
    [DebuggerDisplayAttribute("MountingConnection {UUID}")]
    public partial class MountingConnection : IdentifiedObject, IMountingConnection, IModelElement
    {
        
        private static Lazy<ITypedElement> _structureInfosReference = new Lazy<ITypedElement>(RetrieveStructureInfosReference);
        
        /// <summary>
        /// The backing field for the StructureInfos property
        /// </summary>
        private MountingConnectionStructureInfosCollection _structureInfos;
        
        private static Lazy<ITypedElement> _mountingPointsReference = new Lazy<ITypedElement>(RetrieveMountingPointsReference);
        
        /// <summary>
        /// The backing field for the MountingPoints property
        /// </summary>
        private MountingConnectionMountingPointsCollection _mountingPoints;
        
        private static IClass _classInstance;
        
        public MountingConnection()
        {
            this._structureInfos = new MountingConnectionStructureInfosCollection(this);
            this._structureInfos.CollectionChanging += this.StructureInfosCollectionChanging;
            this._structureInfos.CollectionChanged += this.StructureInfosCollectionChanged;
            this._mountingPoints = new MountingConnectionMountingPointsCollection(this);
            this._mountingPoints.CollectionChanging += this.MountingPointsCollectionChanging;
            this._mountingPoints.CollectionChanged += this.MountingPointsCollectionChanged;
        }
        
        /// <summary>
        /// The StructureInfos property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MountingConnections")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IStructureInfo> StructureInfos
        {
            get
            {
                return this._structureInfos;
            }
        }
        
        /// <summary>
        /// The MountingPoints property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Connections")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMountingPoint> MountingPoints
        {
            get
            {
                return this._mountingPoints;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MountingConnectionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Mountin" +
                            "gConnection")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveStructureInfosReference()
        {
            return ((ITypedElement)(((ModelElement)(MountingConnection.ClassInstance)).Resolve("StructureInfos")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the StructureInfos property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void StructureInfosCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("StructureInfos", e, _structureInfosReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the StructureInfos property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void StructureInfosCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("StructureInfos", e, _structureInfosReference);
        }
        
        private static ITypedElement RetrieveMountingPointsReference()
        {
            return ((ITypedElement)(((ModelElement)(MountingConnection.ClassInstance)).Resolve("MountingPoints")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MountingPoints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MountingPointsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("MountingPoints", e, _mountingPointsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MountingPoints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MountingPointsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MountingPoints", e, _mountingPointsReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "STRUCTUREINFOS"))
            {
                return this._structureInfos;
            }
            if ((feature == "MOUNTINGPOINTS"))
            {
                return this._mountingPoints;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Mountin" +
                        "gConnection")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MountingConnection class
        /// </summary>
        public class MountingConnectionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private MountingConnection _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MountingConnectionReferencedElementsCollection(MountingConnection parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.StructureInfos.Count);
                    count = (count + this._parent.MountingPoints.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.StructureInfos.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MountingPoints.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.StructureInfos.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MountingPoints.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IStructureInfo structureInfosCasted = item.As<IStructureInfo>();
                if ((structureInfosCasted != null))
                {
                    this._parent.StructureInfos.Add(structureInfosCasted);
                }
                IMountingPoint mountingPointsCasted = item.As<IMountingPoint>();
                if ((mountingPointsCasted != null))
                {
                    this._parent.MountingPoints.Add(mountingPointsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.StructureInfos.Clear();
                this._parent.MountingPoints.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.StructureInfos.Contains(item))
                {
                    return true;
                }
                if (this._parent.MountingPoints.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> structureInfosEnumerator = this._parent.StructureInfos.GetEnumerator();
                try
                {
                    for (
                    ; structureInfosEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = structureInfosEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    structureInfosEnumerator.Dispose();
                }
                IEnumerator<IModelElement> mountingPointsEnumerator = this._parent.MountingPoints.GetEnumerator();
                try
                {
                    for (
                    ; mountingPointsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = mountingPointsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    mountingPointsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IStructureInfo structureInfoItem = item.As<IStructureInfo>();
                if (((structureInfoItem != null) 
                            && this._parent.StructureInfos.Remove(structureInfoItem)))
                {
                    return true;
                }
                IMountingPoint mountingPointItem = item.As<IMountingPoint>();
                if (((mountingPointItem != null) 
                            && this._parent.MountingPoints.Remove(mountingPointItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.StructureInfos).Concat(this._parent.MountingPoints).GetEnumerator();
            }
        }
    }
}

