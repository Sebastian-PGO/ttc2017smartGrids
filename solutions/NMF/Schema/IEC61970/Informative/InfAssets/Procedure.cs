using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The default implementation of the Procedure class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets")]
    [XmlNamespacePrefixAttribute("cimInfAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Procedu" +
        "re")]
    [DebuggerDisplayAttribute("Procedure {UUID}")]
    public partial class Procedure : Document, IProcedure, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Kind property
        /// </summary>
        private Nullable<ProcedureKind> _kind;
        
        private static Lazy<ITypedElement> _kindAttribute = new Lazy<ITypedElement>(RetrieveKindAttribute);
        
        /// <summary>
        /// The backing field for the SequenceNumber property
        /// </summary>
        private string _sequenceNumber;
        
        private static Lazy<ITypedElement> _sequenceNumberAttribute = new Lazy<ITypedElement>(RetrieveSequenceNumberAttribute);
        
        /// <summary>
        /// The backing field for the CorporateCode property
        /// </summary>
        private string _corporateCode;
        
        private static Lazy<ITypedElement> _corporateCodeAttribute = new Lazy<ITypedElement>(RetrieveCorporateCodeAttribute);
        
        /// <summary>
        /// The backing field for the Instruction property
        /// </summary>
        private string _instruction;
        
        private static Lazy<ITypedElement> _instructionAttribute = new Lazy<ITypedElement>(RetrieveInstructionAttribute);
        
        private static Lazy<ITypedElement> _limitsReference = new Lazy<ITypedElement>(RetrieveLimitsReference);
        
        /// <summary>
        /// The backing field for the Limits property
        /// </summary>
        private ProcedureLimitsCollection _limits;
        
        private static Lazy<ITypedElement> _compatibleUnitsReference = new Lazy<ITypedElement>(RetrieveCompatibleUnitsReference);
        
        /// <summary>
        /// The backing field for the CompatibleUnits property
        /// </summary>
        private ProcedureCompatibleUnitsCollection _compatibleUnits;
        
        private static Lazy<ITypedElement> _procedureDataSetsReference = new Lazy<ITypedElement>(RetrieveProcedureDataSetsReference);
        
        /// <summary>
        /// The backing field for the ProcedureDataSets property
        /// </summary>
        private ProcedureProcedureDataSetsCollection _procedureDataSets;
        
        private static Lazy<ITypedElement> _procedureValuesReference = new Lazy<ITypedElement>(RetrieveProcedureValuesReference);
        
        /// <summary>
        /// The backing field for the ProcedureValues property
        /// </summary>
        private ProcedureProcedureValuesCollection _procedureValues;
        
        private static IClass _classInstance;
        
        public Procedure()
        {
            this._limits = new ProcedureLimitsCollection(this);
            this._limits.CollectionChanging += this.LimitsCollectionChanging;
            this._limits.CollectionChanged += this.LimitsCollectionChanged;
            this._compatibleUnits = new ProcedureCompatibleUnitsCollection(this);
            this._compatibleUnits.CollectionChanging += this.CompatibleUnitsCollectionChanging;
            this._compatibleUnits.CollectionChanged += this.CompatibleUnitsCollectionChanged;
            this._procedureDataSets = new ProcedureProcedureDataSetsCollection(this);
            this._procedureDataSets.CollectionChanging += this.ProcedureDataSetsCollectionChanging;
            this._procedureDataSets.CollectionChanged += this.ProcedureDataSetsCollectionChanged;
            this._procedureValues = new ProcedureProcedureValuesCollection(this);
            this._procedureValues.CollectionChanging += this.ProcedureValuesCollectionChanging;
            this._procedureValues.CollectionChanged += this.ProcedureValuesCollectionChanged;
        }
        
        /// <summary>
        /// The kind property
        /// </summary>
        [XmlElementNameAttribute("kind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<ProcedureKind> Kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                if ((this._kind != value))
                {
                    Nullable<ProcedureKind> old = this._kind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKindChanging(e);
                    this.OnPropertyChanging("Kind", e, _kindAttribute);
                    this._kind = value;
                    this.OnKindChanged(e);
                    this.OnPropertyChanged("Kind", e, _kindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The sequenceNumber property
        /// </summary>
        [XmlElementNameAttribute("sequenceNumber")]
        [XmlAttributeAttribute(true)]
        public virtual string SequenceNumber
        {
            get
            {
                return this._sequenceNumber;
            }
            set
            {
                if ((this._sequenceNumber != value))
                {
                    string old = this._sequenceNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSequenceNumberChanging(e);
                    this.OnPropertyChanging("SequenceNumber", e, _sequenceNumberAttribute);
                    this._sequenceNumber = value;
                    this.OnSequenceNumberChanged(e);
                    this.OnPropertyChanged("SequenceNumber", e, _sequenceNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The corporateCode property
        /// </summary>
        [XmlElementNameAttribute("corporateCode")]
        [XmlAttributeAttribute(true)]
        public virtual string CorporateCode
        {
            get
            {
                return this._corporateCode;
            }
            set
            {
                if ((this._corporateCode != value))
                {
                    string old = this._corporateCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCorporateCodeChanging(e);
                    this.OnPropertyChanging("CorporateCode", e, _corporateCodeAttribute);
                    this._corporateCode = value;
                    this.OnCorporateCodeChanged(e);
                    this.OnPropertyChanged("CorporateCode", e, _corporateCodeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The instruction property
        /// </summary>
        [XmlElementNameAttribute("instruction")]
        [XmlAttributeAttribute(true)]
        public virtual string Instruction
        {
            get
            {
                return this._instruction;
            }
            set
            {
                if ((this._instruction != value))
                {
                    string old = this._instruction;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInstructionChanging(e);
                    this.OnPropertyChanging("Instruction", e, _instructionAttribute);
                    this._instruction = value;
                    this.OnInstructionChanged(e);
                    this.OnPropertyChanged("Instruction", e, _instructionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Limits property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Procedures")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILimit> Limits
        {
            get
            {
                return this._limits;
            }
        }
        
        /// <summary>
        /// The CompatibleUnits property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Procedures")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICompatibleUnit> CompatibleUnits
        {
            get
            {
                return this._compatibleUnits;
            }
        }
        
        /// <summary>
        /// The ProcedureDataSets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Procedure")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IProcedureDataSet> ProcedureDataSets
        {
            get
            {
                return this._procedureDataSets;
            }
        }
        
        /// <summary>
        /// The ProcedureValues property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Procedure")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IUserAttribute> ProcedureValues
        {
            get
            {
                return this._procedureValues;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ProcedureReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Procedu" +
                            "re")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        /// <summary>
        /// Gets fired before the SequenceNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SequenceNumberChanging;
        
        /// <summary>
        /// Gets fired when the SequenceNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SequenceNumberChanged;
        
        /// <summary>
        /// Gets fired before the CorporateCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CorporateCodeChanging;
        
        /// <summary>
        /// Gets fired when the CorporateCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CorporateCodeChanged;
        
        /// <summary>
        /// Gets fired before the Instruction property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InstructionChanging;
        
        /// <summary>
        /// Gets fired when the Instruction property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InstructionChanged;
        
        private static ITypedElement RetrieveKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Procedure.ClassInstance)).Resolve("kind")));
        }
        
        /// <summary>
        /// Raises the KindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSequenceNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Procedure.ClassInstance)).Resolve("sequenceNumber")));
        }
        
        /// <summary>
        /// Raises the SequenceNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSequenceNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SequenceNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SequenceNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSequenceNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SequenceNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCorporateCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Procedure.ClassInstance)).Resolve("corporateCode")));
        }
        
        /// <summary>
        /// Raises the CorporateCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCorporateCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CorporateCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CorporateCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCorporateCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CorporateCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveInstructionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Procedure.ClassInstance)).Resolve("instruction")));
        }
        
        /// <summary>
        /// Raises the InstructionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstructionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InstructionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InstructionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstructionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InstructionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLimitsReference()
        {
            return ((ITypedElement)(((ModelElement)(Procedure.ClassInstance)).Resolve("Limits")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Limits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LimitsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Limits", e, _limitsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Limits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LimitsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Limits", e, _limitsReference);
        }
        
        private static ITypedElement RetrieveCompatibleUnitsReference()
        {
            return ((ITypedElement)(((ModelElement)(Procedure.ClassInstance)).Resolve("CompatibleUnits")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CompatibleUnits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CompatibleUnitsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("CompatibleUnits", e, _compatibleUnitsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CompatibleUnits property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CompatibleUnitsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CompatibleUnits", e, _compatibleUnitsReference);
        }
        
        private static ITypedElement RetrieveProcedureDataSetsReference()
        {
            return ((ITypedElement)(((ModelElement)(Procedure.ClassInstance)).Resolve("ProcedureDataSets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ProcedureDataSets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProcedureDataSetsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ProcedureDataSets", e, _procedureDataSetsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ProcedureDataSets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProcedureDataSetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ProcedureDataSets", e, _procedureDataSetsReference);
        }
        
        private static ITypedElement RetrieveProcedureValuesReference()
        {
            return ((ITypedElement)(((ModelElement)(Procedure.ClassInstance)).Resolve("ProcedureValues")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ProcedureValues property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProcedureValuesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ProcedureValues", e, _procedureValuesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ProcedureValues property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProcedureValuesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ProcedureValues", e, _procedureValuesReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "KIND"))
            {
                return this.Kind;
            }
            if ((attribute == "SEQUENCENUMBER"))
            {
                return this.SequenceNumber;
            }
            if ((attribute == "CORPORATECODE"))
            {
                return this.CorporateCode;
            }
            if ((attribute == "INSTRUCTION"))
            {
                return this.Instruction;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "LIMITS"))
            {
                return this._limits;
            }
            if ((feature == "COMPATIBLEUNITS"))
            {
                return this._compatibleUnits;
            }
            if ((feature == "PROCEDUREDATASETS"))
            {
                return this._procedureDataSets;
            }
            if ((feature == "PROCEDUREVALUES"))
            {
                return this._procedureValues;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "KIND"))
            {
                this.Kind = ((ProcedureKind)(value));
                return;
            }
            if ((feature == "SEQUENCENUMBER"))
            {
                this.SequenceNumber = ((string)(value));
                return;
            }
            if ((feature == "CORPORATECODE"))
            {
                this.CorporateCode = ((string)(value));
                return;
            }
            if ((feature == "INSTRUCTION"))
            {
                this.Instruction = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Procedu" +
                        "re")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Procedure class
        /// </summary>
        public class ProcedureReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Procedure _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ProcedureReferencedElementsCollection(Procedure parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Limits.Count);
                    count = (count + this._parent.CompatibleUnits.Count);
                    count = (count + this._parent.ProcedureDataSets.Count);
                    count = (count + this._parent.ProcedureValues.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Limits.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CompatibleUnits.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ProcedureDataSets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ProcedureValues.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Limits.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CompatibleUnits.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ProcedureDataSets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ProcedureValues.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ILimit limitsCasted = item.As<ILimit>();
                if ((limitsCasted != null))
                {
                    this._parent.Limits.Add(limitsCasted);
                }
                ICompatibleUnit compatibleUnitsCasted = item.As<ICompatibleUnit>();
                if ((compatibleUnitsCasted != null))
                {
                    this._parent.CompatibleUnits.Add(compatibleUnitsCasted);
                }
                IProcedureDataSet procedureDataSetsCasted = item.As<IProcedureDataSet>();
                if ((procedureDataSetsCasted != null))
                {
                    this._parent.ProcedureDataSets.Add(procedureDataSetsCasted);
                }
                IUserAttribute procedureValuesCasted = item.As<IUserAttribute>();
                if ((procedureValuesCasted != null))
                {
                    this._parent.ProcedureValues.Add(procedureValuesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Limits.Clear();
                this._parent.CompatibleUnits.Clear();
                this._parent.ProcedureDataSets.Clear();
                this._parent.ProcedureValues.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Limits.Contains(item))
                {
                    return true;
                }
                if (this._parent.CompatibleUnits.Contains(item))
                {
                    return true;
                }
                if (this._parent.ProcedureDataSets.Contains(item))
                {
                    return true;
                }
                if (this._parent.ProcedureValues.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> limitsEnumerator = this._parent.Limits.GetEnumerator();
                try
                {
                    for (
                    ; limitsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = limitsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    limitsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> compatibleUnitsEnumerator = this._parent.CompatibleUnits.GetEnumerator();
                try
                {
                    for (
                    ; compatibleUnitsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = compatibleUnitsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    compatibleUnitsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> procedureDataSetsEnumerator = this._parent.ProcedureDataSets.GetEnumerator();
                try
                {
                    for (
                    ; procedureDataSetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = procedureDataSetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    procedureDataSetsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> procedureValuesEnumerator = this._parent.ProcedureValues.GetEnumerator();
                try
                {
                    for (
                    ; procedureValuesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = procedureValuesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    procedureValuesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ILimit limitItem = item.As<ILimit>();
                if (((limitItem != null) 
                            && this._parent.Limits.Remove(limitItem)))
                {
                    return true;
                }
                ICompatibleUnit compatibleUnitItem = item.As<ICompatibleUnit>();
                if (((compatibleUnitItem != null) 
                            && this._parent.CompatibleUnits.Remove(compatibleUnitItem)))
                {
                    return true;
                }
                IProcedureDataSet procedureDataSetItem = item.As<IProcedureDataSet>();
                if (((procedureDataSetItem != null) 
                            && this._parent.ProcedureDataSets.Remove(procedureDataSetItem)))
                {
                    return true;
                }
                IUserAttribute userAttributeItem = item.As<IUserAttribute>();
                if (((userAttributeItem != null) 
                            && this._parent.ProcedureValues.Remove(userAttributeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Limits).Concat(this._parent.CompatibleUnits).Concat(this._parent.ProcedureDataSets).Concat(this._parent.ProcedureValues).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kind property
        /// </summary>
        private sealed class KindProxy : ModelPropertyChange<IProcedure, Nullable<ProcedureKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KindProxy(IProcedure modelElement) : 
                    base(modelElement, "kind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<ProcedureKind> Value
            {
                get
                {
                    return this.ModelElement.Kind;
                }
                set
                {
                    this.ModelElement.Kind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sequenceNumber property
        /// </summary>
        private sealed class SequenceNumberProxy : ModelPropertyChange<IProcedure, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SequenceNumberProxy(IProcedure modelElement) : 
                    base(modelElement, "sequenceNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.SequenceNumber;
                }
                set
                {
                    this.ModelElement.SequenceNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the corporateCode property
        /// </summary>
        private sealed class CorporateCodeProxy : ModelPropertyChange<IProcedure, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CorporateCodeProxy(IProcedure modelElement) : 
                    base(modelElement, "corporateCode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.CorporateCode;
                }
                set
                {
                    this.ModelElement.CorporateCode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the instruction property
        /// </summary>
        private sealed class InstructionProxy : ModelPropertyChange<IProcedure, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InstructionProxy(IProcedure modelElement) : 
                    base(modelElement, "instruction")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Instruction;
                }
                set
                {
                    this.ModelElement.Instruction = value;
                }
            }
        }
    }
}

