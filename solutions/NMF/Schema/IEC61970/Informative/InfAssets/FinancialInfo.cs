//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The default implementation of the FinancialInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets")]
    [XmlNamespacePrefixAttribute("cimInfAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Financi" +
        "alInfo")]
    [DebuggerDisplayAttribute("FinancialInfo {UUID}")]
    public partial class FinancialInfo : IdentifiedObject, IFinancialInfo, IModelElement
    {
        
        /// <summary>
        /// The backing field for the CostType property
        /// </summary>
        private string _costType;
        
        private static Lazy<ITypedElement> _costTypeAttribute = new Lazy<ITypedElement>(RetrieveCostTypeAttribute);
        
        /// <summary>
        /// The backing field for the CostDescription property
        /// </summary>
        private string _costDescription;
        
        private static Lazy<ITypedElement> _costDescriptionAttribute = new Lazy<ITypedElement>(RetrieveCostDescriptionAttribute);
        
        /// <summary>
        /// The backing field for the Account property
        /// </summary>
        private string _account;
        
        private static Lazy<ITypedElement> _accountAttribute = new Lazy<ITypedElement>(RetrieveAccountAttribute);
        
        /// <summary>
        /// The backing field for the PlantTransferDateTime property
        /// </summary>
        private DateTime _plantTransferDateTime;
        
        private static Lazy<ITypedElement> _plantTransferDateTimeAttribute = new Lazy<ITypedElement>(RetrievePlantTransferDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the WarrantyEndDateTime property
        /// </summary>
        private DateTime _warrantyEndDateTime;
        
        private static Lazy<ITypedElement> _warrantyEndDateTimeAttribute = new Lazy<ITypedElement>(RetrieveWarrantyEndDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the ActualPurchaseCost property
        /// </summary>
        private float _actualPurchaseCost;
        
        private static Lazy<ITypedElement> _actualPurchaseCostAttribute = new Lazy<ITypedElement>(RetrieveActualPurchaseCostAttribute);
        
        /// <summary>
        /// The backing field for the PurchaseDateTime property
        /// </summary>
        private DateTime _purchaseDateTime;
        
        private static Lazy<ITypedElement> _purchaseDateTimeAttribute = new Lazy<ITypedElement>(RetrievePurchaseDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the PurchaseOrderNumber property
        /// </summary>
        private string _purchaseOrderNumber;
        
        private static Lazy<ITypedElement> _purchaseOrderNumberAttribute = new Lazy<ITypedElement>(RetrievePurchaseOrderNumberAttribute);
        
        /// <summary>
        /// The backing field for the FinancialValue property
        /// </summary>
        private float _financialValue;
        
        private static Lazy<ITypedElement> _financialValueAttribute = new Lazy<ITypedElement>(RetrieveFinancialValueAttribute);
        
        /// <summary>
        /// The backing field for the Quantity property
        /// </summary>
        private object _quantity;
        
        private static Lazy<ITypedElement> _quantityAttribute = new Lazy<ITypedElement>(RetrieveQuantityAttribute);
        
        /// <summary>
        /// The backing field for the ValueDateTime property
        /// </summary>
        private DateTime _valueDateTime;
        
        private static Lazy<ITypedElement> _valueDateTimeAttribute = new Lazy<ITypedElement>(RetrieveValueDateTimeAttribute);
        
        private static Lazy<ITypedElement> _assetReference = new Lazy<ITypedElement>(RetrieveAssetReference);
        
        /// <summary>
        /// The backing field for the Asset property
        /// </summary>
        private IAsset _asset;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The costType property
        /// </summary>
        [XmlElementNameAttribute("costType")]
        [XmlAttributeAttribute(true)]
        public virtual string CostType
        {
            get
            {
                return this._costType;
            }
            set
            {
                if ((this._costType != value))
                {
                    string old = this._costType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCostTypeChanging(e);
                    this.OnPropertyChanging("CostType", e, _costTypeAttribute);
                    this._costType = value;
                    this.OnCostTypeChanged(e);
                    this.OnPropertyChanged("CostType", e, _costTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The costDescription property
        /// </summary>
        [XmlElementNameAttribute("costDescription")]
        [XmlAttributeAttribute(true)]
        public virtual string CostDescription
        {
            get
            {
                return this._costDescription;
            }
            set
            {
                if ((this._costDescription != value))
                {
                    string old = this._costDescription;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCostDescriptionChanging(e);
                    this.OnPropertyChanging("CostDescription", e, _costDescriptionAttribute);
                    this._costDescription = value;
                    this.OnCostDescriptionChanged(e);
                    this.OnPropertyChanged("CostDescription", e, _costDescriptionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The account property
        /// </summary>
        [XmlElementNameAttribute("account")]
        [XmlAttributeAttribute(true)]
        public virtual string Account
        {
            get
            {
                return this._account;
            }
            set
            {
                if ((this._account != value))
                {
                    string old = this._account;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAccountChanging(e);
                    this.OnPropertyChanging("Account", e, _accountAttribute);
                    this._account = value;
                    this.OnAccountChanged(e);
                    this.OnPropertyChanged("Account", e, _accountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The plantTransferDateTime property
        /// </summary>
        [XmlElementNameAttribute("plantTransferDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime PlantTransferDateTime
        {
            get
            {
                return this._plantTransferDateTime;
            }
            set
            {
                if ((this._plantTransferDateTime != value))
                {
                    DateTime old = this._plantTransferDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPlantTransferDateTimeChanging(e);
                    this.OnPropertyChanging("PlantTransferDateTime", e, _plantTransferDateTimeAttribute);
                    this._plantTransferDateTime = value;
                    this.OnPlantTransferDateTimeChanged(e);
                    this.OnPropertyChanged("PlantTransferDateTime", e, _plantTransferDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The warrantyEndDateTime property
        /// </summary>
        [XmlElementNameAttribute("warrantyEndDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime WarrantyEndDateTime
        {
            get
            {
                return this._warrantyEndDateTime;
            }
            set
            {
                if ((this._warrantyEndDateTime != value))
                {
                    DateTime old = this._warrantyEndDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWarrantyEndDateTimeChanging(e);
                    this.OnPropertyChanging("WarrantyEndDateTime", e, _warrantyEndDateTimeAttribute);
                    this._warrantyEndDateTime = value;
                    this.OnWarrantyEndDateTimeChanged(e);
                    this.OnPropertyChanged("WarrantyEndDateTime", e, _warrantyEndDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The actualPurchaseCost property
        /// </summary>
        [XmlElementNameAttribute("actualPurchaseCost")]
        [XmlAttributeAttribute(true)]
        public virtual float ActualPurchaseCost
        {
            get
            {
                return this._actualPurchaseCost;
            }
            set
            {
                if ((this._actualPurchaseCost != value))
                {
                    float old = this._actualPurchaseCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnActualPurchaseCostChanging(e);
                    this.OnPropertyChanging("ActualPurchaseCost", e, _actualPurchaseCostAttribute);
                    this._actualPurchaseCost = value;
                    this.OnActualPurchaseCostChanged(e);
                    this.OnPropertyChanged("ActualPurchaseCost", e, _actualPurchaseCostAttribute);
                }
            }
        }
        
        /// <summary>
        /// The purchaseDateTime property
        /// </summary>
        [XmlElementNameAttribute("purchaseDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime PurchaseDateTime
        {
            get
            {
                return this._purchaseDateTime;
            }
            set
            {
                if ((this._purchaseDateTime != value))
                {
                    DateTime old = this._purchaseDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPurchaseDateTimeChanging(e);
                    this.OnPropertyChanging("PurchaseDateTime", e, _purchaseDateTimeAttribute);
                    this._purchaseDateTime = value;
                    this.OnPurchaseDateTimeChanged(e);
                    this.OnPropertyChanged("PurchaseDateTime", e, _purchaseDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The purchaseOrderNumber property
        /// </summary>
        [XmlElementNameAttribute("purchaseOrderNumber")]
        [XmlAttributeAttribute(true)]
        public virtual string PurchaseOrderNumber
        {
            get
            {
                return this._purchaseOrderNumber;
            }
            set
            {
                if ((this._purchaseOrderNumber != value))
                {
                    string old = this._purchaseOrderNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPurchaseOrderNumberChanging(e);
                    this.OnPropertyChanging("PurchaseOrderNumber", e, _purchaseOrderNumberAttribute);
                    this._purchaseOrderNumber = value;
                    this.OnPurchaseOrderNumberChanged(e);
                    this.OnPropertyChanged("PurchaseOrderNumber", e, _purchaseOrderNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The financialValue property
        /// </summary>
        [XmlElementNameAttribute("financialValue")]
        [XmlAttributeAttribute(true)]
        public virtual float FinancialValue
        {
            get
            {
                return this._financialValue;
            }
            set
            {
                if ((this._financialValue != value))
                {
                    float old = this._financialValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFinancialValueChanging(e);
                    this.OnPropertyChanging("FinancialValue", e, _financialValueAttribute);
                    this._financialValue = value;
                    this.OnFinancialValueChanged(e);
                    this.OnPropertyChanged("FinancialValue", e, _financialValueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The quantity property
        /// </summary>
        [XmlElementNameAttribute("quantity")]
        [XmlAttributeAttribute(true)]
        public virtual object Quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                if ((this._quantity != value))
                {
                    object old = this._quantity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQuantityChanging(e);
                    this.OnPropertyChanging("Quantity", e, _quantityAttribute);
                    this._quantity = value;
                    this.OnQuantityChanged(e);
                    this.OnPropertyChanged("Quantity", e, _quantityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The valueDateTime property
        /// </summary>
        [XmlElementNameAttribute("valueDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime ValueDateTime
        {
            get
            {
                return this._valueDateTime;
            }
            set
            {
                if ((this._valueDateTime != value))
                {
                    DateTime old = this._valueDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueDateTimeChanging(e);
                    this.OnPropertyChanging("ValueDateTime", e, _valueDateTimeAttribute);
                    this._valueDateTime = value;
                    this.OnValueDateTimeChanged(e);
                    this.OnPropertyChanged("ValueDateTime", e, _valueDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Asset property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("FinancialInfo")]
        public virtual IAsset Asset
        {
            get
            {
                return this._asset;
            }
            set
            {
                if ((this._asset != value))
                {
                    IAsset old = this._asset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAssetChanging(e);
                    this.OnPropertyChanging("Asset", e, _assetReference);
                    this._asset = value;
                    if ((old != null))
                    {
                        old.FinancialInfo = null;
                        old.Deleted -= this.OnResetAsset;
                    }
                    if ((value != null))
                    {
                        value.FinancialInfo = this;
                        value.Deleted += this.OnResetAsset;
                    }
                    this.OnAssetChanged(e);
                    this.OnPropertyChanged("Asset", e, _assetReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new FinancialInfoReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Financi" +
                            "alInfo")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the CostType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostTypeChanging;
        
        /// <summary>
        /// Gets fired when the CostType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostTypeChanged;
        
        /// <summary>
        /// Gets fired before the CostDescription property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostDescriptionChanging;
        
        /// <summary>
        /// Gets fired when the CostDescription property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CostDescriptionChanged;
        
        /// <summary>
        /// Gets fired before the Account property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccountChanging;
        
        /// <summary>
        /// Gets fired when the Account property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccountChanged;
        
        /// <summary>
        /// Gets fired before the PlantTransferDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PlantTransferDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the PlantTransferDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PlantTransferDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the WarrantyEndDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WarrantyEndDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the WarrantyEndDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WarrantyEndDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the ActualPurchaseCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActualPurchaseCostChanging;
        
        /// <summary>
        /// Gets fired when the ActualPurchaseCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ActualPurchaseCostChanged;
        
        /// <summary>
        /// Gets fired before the PurchaseDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PurchaseDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the PurchaseDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PurchaseDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the PurchaseOrderNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PurchaseOrderNumberChanging;
        
        /// <summary>
        /// Gets fired when the PurchaseOrderNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PurchaseOrderNumberChanged;
        
        /// <summary>
        /// Gets fired before the FinancialValue property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FinancialValueChanging;
        
        /// <summary>
        /// Gets fired when the FinancialValue property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FinancialValueChanged;
        
        /// <summary>
        /// Gets fired before the Quantity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuantityChanging;
        
        /// <summary>
        /// Gets fired when the Quantity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuantityChanged;
        
        /// <summary>
        /// Gets fired before the ValueDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the ValueDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the Asset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetChanging;
        
        /// <summary>
        /// Gets fired when the Asset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetChanged;
        
        private static ITypedElement RetrieveCostTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FinancialInfo.ClassInstance)).Resolve("costType")));
        }
        
        /// <summary>
        /// Raises the CostTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CostTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCostDescriptionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FinancialInfo.ClassInstance)).Resolve("costDescription")));
        }
        
        /// <summary>
        /// Raises the CostDescriptionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostDescriptionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostDescriptionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CostDescriptionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCostDescriptionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CostDescriptionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAccountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FinancialInfo.ClassInstance)).Resolve("account")));
        }
        
        /// <summary>
        /// Raises the AccountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AccountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePlantTransferDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FinancialInfo.ClassInstance)).Resolve("plantTransferDateTime")));
        }
        
        /// <summary>
        /// Raises the PlantTransferDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPlantTransferDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PlantTransferDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PlantTransferDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPlantTransferDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PlantTransferDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveWarrantyEndDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FinancialInfo.ClassInstance)).Resolve("warrantyEndDateTime")));
        }
        
        /// <summary>
        /// Raises the WarrantyEndDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWarrantyEndDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WarrantyEndDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WarrantyEndDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWarrantyEndDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WarrantyEndDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveActualPurchaseCostAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FinancialInfo.ClassInstance)).Resolve("actualPurchaseCost")));
        }
        
        /// <summary>
        /// Raises the ActualPurchaseCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActualPurchaseCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActualPurchaseCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ActualPurchaseCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnActualPurchaseCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ActualPurchaseCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePurchaseDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FinancialInfo.ClassInstance)).Resolve("purchaseDateTime")));
        }
        
        /// <summary>
        /// Raises the PurchaseDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPurchaseDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PurchaseDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PurchaseDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPurchaseDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PurchaseDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePurchaseOrderNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FinancialInfo.ClassInstance)).Resolve("purchaseOrderNumber")));
        }
        
        /// <summary>
        /// Raises the PurchaseOrderNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPurchaseOrderNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PurchaseOrderNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PurchaseOrderNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPurchaseOrderNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PurchaseOrderNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFinancialValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FinancialInfo.ClassInstance)).Resolve("financialValue")));
        }
        
        /// <summary>
        /// Raises the FinancialValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFinancialValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FinancialValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FinancialValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFinancialValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FinancialValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveQuantityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FinancialInfo.ClassInstance)).Resolve("quantity")));
        }
        
        /// <summary>
        /// Raises the QuantityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuantityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuantityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QuantityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuantityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuantityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveValueDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FinancialInfo.ClassInstance)).Resolve("valueDateTime")));
        }
        
        /// <summary>
        /// Raises the ValueDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAssetReference()
        {
            return ((ITypedElement)(((ModelElement)(FinancialInfo.ClassInstance)).Resolve("Asset")));
        }
        
        /// <summary>
        /// Raises the AssetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AssetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Asset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAsset(object sender, System.EventArgs eventArgs)
        {
            this.Asset = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "COSTTYPE"))
            {
                return this.CostType;
            }
            if ((attribute == "COSTDESCRIPTION"))
            {
                return this.CostDescription;
            }
            if ((attribute == "ACCOUNT"))
            {
                return this.Account;
            }
            if ((attribute == "PLANTTRANSFERDATETIME"))
            {
                return this.PlantTransferDateTime;
            }
            if ((attribute == "WARRANTYENDDATETIME"))
            {
                return this.WarrantyEndDateTime;
            }
            if ((attribute == "ACTUALPURCHASECOST"))
            {
                return this.ActualPurchaseCost;
            }
            if ((attribute == "PURCHASEDATETIME"))
            {
                return this.PurchaseDateTime;
            }
            if ((attribute == "PURCHASEORDERNUMBER"))
            {
                return this.PurchaseOrderNumber;
            }
            if ((attribute == "FINANCIALVALUE"))
            {
                return this.FinancialValue;
            }
            if ((attribute == "QUANTITY"))
            {
                return this.Quantity;
            }
            if ((attribute == "VALUEDATETIME"))
            {
                return this.ValueDateTime;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ASSET"))
            {
                this.Asset = ((IAsset)(value));
                return;
            }
            if ((feature == "COSTTYPE"))
            {
                this.CostType = ((string)(value));
                return;
            }
            if ((feature == "COSTDESCRIPTION"))
            {
                this.CostDescription = ((string)(value));
                return;
            }
            if ((feature == "ACCOUNT"))
            {
                this.Account = ((string)(value));
                return;
            }
            if ((feature == "PLANTTRANSFERDATETIME"))
            {
                this.PlantTransferDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "WARRANTYENDDATETIME"))
            {
                this.WarrantyEndDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "ACTUALPURCHASECOST"))
            {
                this.ActualPurchaseCost = ((float)(value));
                return;
            }
            if ((feature == "PURCHASEDATETIME"))
            {
                this.PurchaseDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "PURCHASEORDERNUMBER"))
            {
                this.PurchaseOrderNumber = ((string)(value));
                return;
            }
            if ((feature == "FINANCIALVALUE"))
            {
                this.FinancialValue = ((float)(value));
                return;
            }
            if ((feature == "QUANTITY"))
            {
                this.Quantity = ((object)(value));
                return;
            }
            if ((feature == "VALUEDATETIME"))
            {
                this.ValueDateTime = ((DateTime)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Asset"))
            {
                return new AssetProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Asset"))
            {
                return new AssetProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Financi" +
                        "alInfo")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the FinancialInfo class
        /// </summary>
        public class FinancialInfoReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private FinancialInfo _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FinancialInfoReferencedElementsCollection(FinancialInfo parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Asset != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AssetChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AssetChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Asset == null))
                {
                    IAsset assetCasted = item.As<IAsset>();
                    if ((assetCasted != null))
                    {
                        this._parent.Asset = assetCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Asset = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Asset))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Asset != null))
                {
                    array[arrayIndex] = this._parent.Asset;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Asset == item))
                {
                    this._parent.Asset = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Asset).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the costType property
        /// </summary>
        private sealed class CostTypeProxy : ModelPropertyChange<IFinancialInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CostTypeProxy(IFinancialInfo modelElement) : 
                    base(modelElement, "costType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.CostType;
                }
                set
                {
                    this.ModelElement.CostType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the costDescription property
        /// </summary>
        private sealed class CostDescriptionProxy : ModelPropertyChange<IFinancialInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CostDescriptionProxy(IFinancialInfo modelElement) : 
                    base(modelElement, "costDescription")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.CostDescription;
                }
                set
                {
                    this.ModelElement.CostDescription = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the account property
        /// </summary>
        private sealed class AccountProxy : ModelPropertyChange<IFinancialInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AccountProxy(IFinancialInfo modelElement) : 
                    base(modelElement, "account")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Account;
                }
                set
                {
                    this.ModelElement.Account = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the plantTransferDateTime property
        /// </summary>
        private sealed class PlantTransferDateTimeProxy : ModelPropertyChange<IFinancialInfo, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PlantTransferDateTimeProxy(IFinancialInfo modelElement) : 
                    base(modelElement, "plantTransferDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.PlantTransferDateTime;
                }
                set
                {
                    this.ModelElement.PlantTransferDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the warrantyEndDateTime property
        /// </summary>
        private sealed class WarrantyEndDateTimeProxy : ModelPropertyChange<IFinancialInfo, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WarrantyEndDateTimeProxy(IFinancialInfo modelElement) : 
                    base(modelElement, "warrantyEndDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.WarrantyEndDateTime;
                }
                set
                {
                    this.ModelElement.WarrantyEndDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the actualPurchaseCost property
        /// </summary>
        private sealed class ActualPurchaseCostProxy : ModelPropertyChange<IFinancialInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ActualPurchaseCostProxy(IFinancialInfo modelElement) : 
                    base(modelElement, "actualPurchaseCost")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ActualPurchaseCost;
                }
                set
                {
                    this.ModelElement.ActualPurchaseCost = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the purchaseDateTime property
        /// </summary>
        private sealed class PurchaseDateTimeProxy : ModelPropertyChange<IFinancialInfo, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PurchaseDateTimeProxy(IFinancialInfo modelElement) : 
                    base(modelElement, "purchaseDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.PurchaseDateTime;
                }
                set
                {
                    this.ModelElement.PurchaseDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the purchaseOrderNumber property
        /// </summary>
        private sealed class PurchaseOrderNumberProxy : ModelPropertyChange<IFinancialInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PurchaseOrderNumberProxy(IFinancialInfo modelElement) : 
                    base(modelElement, "purchaseOrderNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.PurchaseOrderNumber;
                }
                set
                {
                    this.ModelElement.PurchaseOrderNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the financialValue property
        /// </summary>
        private sealed class FinancialValueProxy : ModelPropertyChange<IFinancialInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FinancialValueProxy(IFinancialInfo modelElement) : 
                    base(modelElement, "financialValue")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.FinancialValue;
                }
                set
                {
                    this.ModelElement.FinancialValue = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the quantity property
        /// </summary>
        private sealed class QuantityProxy : ModelPropertyChange<IFinancialInfo, object>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QuantityProxy(IFinancialInfo modelElement) : 
                    base(modelElement, "quantity")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override object Value
            {
                get
                {
                    return this.ModelElement.Quantity;
                }
                set
                {
                    this.ModelElement.Quantity = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the valueDateTime property
        /// </summary>
        private sealed class ValueDateTimeProxy : ModelPropertyChange<IFinancialInfo, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueDateTimeProxy(IFinancialInfo modelElement) : 
                    base(modelElement, "valueDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.ValueDateTime;
                }
                set
                {
                    this.ModelElement.ValueDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Asset property
        /// </summary>
        private sealed class AssetProxy : ModelPropertyChange<IFinancialInfo, IAsset>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssetProxy(IFinancialInfo modelElement) : 
                    base(modelElement, "Asset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAsset Value
            {
                get
                {
                    return this.ModelElement.Asset;
                }
                set
                {
                    this.ModelElement.Asset = value;
                }
            }
        }
    }
}

