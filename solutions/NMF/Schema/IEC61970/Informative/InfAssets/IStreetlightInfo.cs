//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The public interface for StreetlightInfo
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(StreetlightInfo))]
    [XmlDefaultImplementationTypeAttribute(typeof(StreetlightInfo))]
    public interface IStreetlightInfo : IModelElement, IElectricalInfo
    {
        
        /// <summary>
        /// The lightRating property
        /// </summary>
        float LightRating
        {
            get;
            set;
        }
        
        /// <summary>
        /// The armLength property
        /// </summary>
        float ArmLength
        {
            get;
            set;
        }
        
        /// <summary>
        /// The lampKind property
        /// </summary>
        Nullable<StreetlightLampKind> LampKind
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Pole property
        /// </summary>
        IPoleInfo Pole
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the LightRating property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LightRatingChanging;
        
        /// <summary>
        /// Gets fired when the LightRating property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LightRatingChanged;
        
        /// <summary>
        /// Gets fired before the ArmLength property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ArmLengthChanging;
        
        /// <summary>
        /// Gets fired when the ArmLength property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ArmLengthChanged;
        
        /// <summary>
        /// Gets fired before the LampKind property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LampKindChanging;
        
        /// <summary>
        /// Gets fired when the LampKind property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LampKindChanged;
        
        /// <summary>
        /// Gets fired before the Pole property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PoleChanging;
        
        /// <summary>
        /// Gets fired when the Pole property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PoleChanged;
    }
}

