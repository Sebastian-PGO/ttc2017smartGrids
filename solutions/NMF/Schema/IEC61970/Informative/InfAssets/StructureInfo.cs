using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The default implementation of the StructureInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets")]
    [XmlNamespacePrefixAttribute("cimInfAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Structu" +
        "reInfo")]
    [DebuggerDisplayAttribute("StructureInfo {UUID}")]
    public partial class StructureInfo : AssetInfo, IStructureInfo, IModelElement
    {
        
        /// <summary>
        /// The backing field for the WeedRemovedDate property
        /// </summary>
        private string _weedRemovedDate;
        
        private static Lazy<ITypedElement> _weedRemovedDateAttribute = new Lazy<ITypedElement>(RetrieveWeedRemovedDateAttribute);
        
        /// <summary>
        /// The backing field for the FumigantName property
        /// </summary>
        private string _fumigantName;
        
        private static Lazy<ITypedElement> _fumigantNameAttribute = new Lazy<ITypedElement>(RetrieveFumigantNameAttribute);
        
        /// <summary>
        /// The backing field for the FumigantAppliedDate property
        /// </summary>
        private string _fumigantAppliedDate;
        
        private static Lazy<ITypedElement> _fumigantAppliedDateAttribute = new Lazy<ITypedElement>(RetrieveFumigantAppliedDateAttribute);
        
        /// <summary>
        /// The backing field for the RemoveWeed property
        /// </summary>
        private bool _removeWeed;
        
        private static Lazy<ITypedElement> _removeWeedAttribute = new Lazy<ITypedElement>(RetrieveRemoveWeedAttribute);
        
        /// <summary>
        /// The backing field for the Height property
        /// </summary>
        private float _height;
        
        private static Lazy<ITypedElement> _heightAttribute = new Lazy<ITypedElement>(RetrieveHeightAttribute);
        
        /// <summary>
        /// The backing field for the MaterialKind property
        /// </summary>
        private Nullable<StructureMaterialKind> _materialKind;
        
        private static Lazy<ITypedElement> _materialKindAttribute = new Lazy<ITypedElement>(RetrieveMaterialKindAttribute);
        
        /// <summary>
        /// The backing field for the RatedVoltage property
        /// </summary>
        private float _ratedVoltage;
        
        private static Lazy<ITypedElement> _ratedVoltageAttribute = new Lazy<ITypedElement>(RetrieveRatedVoltageAttribute);
        
        private static Lazy<ITypedElement> _structureSupportInfosReference = new Lazy<ITypedElement>(RetrieveStructureSupportInfosReference);
        
        /// <summary>
        /// The backing field for the StructureSupportInfos property
        /// </summary>
        private StructureInfoStructureSupportInfosCollection _structureSupportInfos;
        
        private static Lazy<ITypedElement> _mountingConnectionsReference = new Lazy<ITypedElement>(RetrieveMountingConnectionsReference);
        
        /// <summary>
        /// The backing field for the MountingConnections property
        /// </summary>
        private StructureInfoMountingConnectionsCollection _mountingConnections;
        
        private static IClass _classInstance;
        
        public StructureInfo()
        {
            this._structureSupportInfos = new StructureInfoStructureSupportInfosCollection(this);
            this._structureSupportInfos.CollectionChanging += this.StructureSupportInfosCollectionChanging;
            this._structureSupportInfos.CollectionChanged += this.StructureSupportInfosCollectionChanged;
            this._mountingConnections = new StructureInfoMountingConnectionsCollection(this);
            this._mountingConnections.CollectionChanging += this.MountingConnectionsCollectionChanging;
            this._mountingConnections.CollectionChanged += this.MountingConnectionsCollectionChanged;
        }
        
        /// <summary>
        /// The weedRemovedDate property
        /// </summary>
        [XmlElementNameAttribute("weedRemovedDate")]
        [XmlAttributeAttribute(true)]
        public virtual string WeedRemovedDate
        {
            get
            {
                return this._weedRemovedDate;
            }
            set
            {
                if ((this._weedRemovedDate != value))
                {
                    string old = this._weedRemovedDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWeedRemovedDateChanging(e);
                    this.OnPropertyChanging("WeedRemovedDate", e, _weedRemovedDateAttribute);
                    this._weedRemovedDate = value;
                    this.OnWeedRemovedDateChanged(e);
                    this.OnPropertyChanged("WeedRemovedDate", e, _weedRemovedDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The fumigantName property
        /// </summary>
        [XmlElementNameAttribute("fumigantName")]
        [XmlAttributeAttribute(true)]
        public virtual string FumigantName
        {
            get
            {
                return this._fumigantName;
            }
            set
            {
                if ((this._fumigantName != value))
                {
                    string old = this._fumigantName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFumigantNameChanging(e);
                    this.OnPropertyChanging("FumigantName", e, _fumigantNameAttribute);
                    this._fumigantName = value;
                    this.OnFumigantNameChanged(e);
                    this.OnPropertyChanged("FumigantName", e, _fumigantNameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The fumigantAppliedDate property
        /// </summary>
        [XmlElementNameAttribute("fumigantAppliedDate")]
        [XmlAttributeAttribute(true)]
        public virtual string FumigantAppliedDate
        {
            get
            {
                return this._fumigantAppliedDate;
            }
            set
            {
                if ((this._fumigantAppliedDate != value))
                {
                    string old = this._fumigantAppliedDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFumigantAppliedDateChanging(e);
                    this.OnPropertyChanging("FumigantAppliedDate", e, _fumigantAppliedDateAttribute);
                    this._fumigantAppliedDate = value;
                    this.OnFumigantAppliedDateChanged(e);
                    this.OnPropertyChanged("FumigantAppliedDate", e, _fumigantAppliedDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The removeWeed property
        /// </summary>
        [XmlElementNameAttribute("removeWeed")]
        [XmlAttributeAttribute(true)]
        public virtual bool RemoveWeed
        {
            get
            {
                return this._removeWeed;
            }
            set
            {
                if ((this._removeWeed != value))
                {
                    bool old = this._removeWeed;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRemoveWeedChanging(e);
                    this.OnPropertyChanging("RemoveWeed", e, _removeWeedAttribute);
                    this._removeWeed = value;
                    this.OnRemoveWeedChanged(e);
                    this.OnPropertyChanged("RemoveWeed", e, _removeWeedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The height property
        /// </summary>
        [XmlElementNameAttribute("height")]
        [XmlAttributeAttribute(true)]
        public virtual float Height
        {
            get
            {
                return this._height;
            }
            set
            {
                if ((this._height != value))
                {
                    float old = this._height;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHeightChanging(e);
                    this.OnPropertyChanging("Height", e, _heightAttribute);
                    this._height = value;
                    this.OnHeightChanged(e);
                    this.OnPropertyChanged("Height", e, _heightAttribute);
                }
            }
        }
        
        /// <summary>
        /// The materialKind property
        /// </summary>
        [XmlElementNameAttribute("materialKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<StructureMaterialKind> MaterialKind
        {
            get
            {
                return this._materialKind;
            }
            set
            {
                if ((this._materialKind != value))
                {
                    Nullable<StructureMaterialKind> old = this._materialKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaterialKindChanging(e);
                    this.OnPropertyChanging("MaterialKind", e, _materialKindAttribute);
                    this._materialKind = value;
                    this.OnMaterialKindChanged(e);
                    this.OnPropertyChanged("MaterialKind", e, _materialKindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ratedVoltage property
        /// </summary>
        [XmlElementNameAttribute("ratedVoltage")]
        [XmlAttributeAttribute(true)]
        public virtual float RatedVoltage
        {
            get
            {
                return this._ratedVoltage;
            }
            set
            {
                if ((this._ratedVoltage != value))
                {
                    float old = this._ratedVoltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatedVoltageChanging(e);
                    this.OnPropertyChanging("RatedVoltage", e, _ratedVoltageAttribute);
                    this._ratedVoltage = value;
                    this.OnRatedVoltageChanged(e);
                    this.OnPropertyChanged("RatedVoltage", e, _ratedVoltageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The StructureSupportInfos property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SecuredStructure")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IStructureSupportInfo> StructureSupportInfos
        {
            get
            {
                return this._structureSupportInfos;
            }
        }
        
        /// <summary>
        /// The MountingConnections property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("StructureInfos")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMountingConnection> MountingConnections
        {
            get
            {
                return this._mountingConnections;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new StructureInfoReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Structu" +
                            "reInfo")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the WeedRemovedDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WeedRemovedDateChanging;
        
        /// <summary>
        /// Gets fired when the WeedRemovedDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WeedRemovedDateChanged;
        
        /// <summary>
        /// Gets fired before the FumigantName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FumigantNameChanging;
        
        /// <summary>
        /// Gets fired when the FumigantName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FumigantNameChanged;
        
        /// <summary>
        /// Gets fired before the FumigantAppliedDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FumigantAppliedDateChanging;
        
        /// <summary>
        /// Gets fired when the FumigantAppliedDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FumigantAppliedDateChanged;
        
        /// <summary>
        /// Gets fired before the RemoveWeed property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RemoveWeedChanging;
        
        /// <summary>
        /// Gets fired when the RemoveWeed property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RemoveWeedChanged;
        
        /// <summary>
        /// Gets fired before the Height property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HeightChanging;
        
        /// <summary>
        /// Gets fired when the Height property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HeightChanged;
        
        /// <summary>
        /// Gets fired before the MaterialKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaterialKindChanging;
        
        /// <summary>
        /// Gets fired when the MaterialKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaterialKindChanged;
        
        /// <summary>
        /// Gets fired before the RatedVoltage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedVoltageChanging;
        
        /// <summary>
        /// Gets fired when the RatedVoltage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedVoltageChanged;
        
        private static ITypedElement RetrieveWeedRemovedDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StructureInfo.ClassInstance)).Resolve("weedRemovedDate")));
        }
        
        /// <summary>
        /// Raises the WeedRemovedDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWeedRemovedDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WeedRemovedDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WeedRemovedDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWeedRemovedDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WeedRemovedDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFumigantNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StructureInfo.ClassInstance)).Resolve("fumigantName")));
        }
        
        /// <summary>
        /// Raises the FumigantNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFumigantNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FumigantNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FumigantNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFumigantNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FumigantNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFumigantAppliedDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StructureInfo.ClassInstance)).Resolve("fumigantAppliedDate")));
        }
        
        /// <summary>
        /// Raises the FumigantAppliedDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFumigantAppliedDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FumigantAppliedDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FumigantAppliedDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFumigantAppliedDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FumigantAppliedDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRemoveWeedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StructureInfo.ClassInstance)).Resolve("removeWeed")));
        }
        
        /// <summary>
        /// Raises the RemoveWeedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemoveWeedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RemoveWeedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RemoveWeedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemoveWeedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RemoveWeedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveHeightAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StructureInfo.ClassInstance)).Resolve("height")));
        }
        
        /// <summary>
        /// Raises the HeightChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHeightChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HeightChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HeightChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHeightChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HeightChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaterialKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StructureInfo.ClassInstance)).Resolve("materialKind")));
        }
        
        /// <summary>
        /// Raises the MaterialKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaterialKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaterialKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaterialKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaterialKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaterialKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRatedVoltageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StructureInfo.ClassInstance)).Resolve("ratedVoltage")));
        }
        
        /// <summary>
        /// Raises the RatedVoltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedVoltageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedVoltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedVoltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedVoltageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedVoltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStructureSupportInfosReference()
        {
            return ((ITypedElement)(((ModelElement)(StructureInfo.ClassInstance)).Resolve("StructureSupportInfos")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the StructureSupportInfos property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void StructureSupportInfosCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("StructureSupportInfos", e, _structureSupportInfosReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the StructureSupportInfos property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void StructureSupportInfosCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("StructureSupportInfos", e, _structureSupportInfosReference);
        }
        
        private static ITypedElement RetrieveMountingConnectionsReference()
        {
            return ((ITypedElement)(((ModelElement)(StructureInfo.ClassInstance)).Resolve("MountingConnections")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MountingConnections property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MountingConnectionsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("MountingConnections", e, _mountingConnectionsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MountingConnections property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MountingConnectionsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MountingConnections", e, _mountingConnectionsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "WEEDREMOVEDDATE"))
            {
                return this.WeedRemovedDate;
            }
            if ((attribute == "FUMIGANTNAME"))
            {
                return this.FumigantName;
            }
            if ((attribute == "FUMIGANTAPPLIEDDATE"))
            {
                return this.FumigantAppliedDate;
            }
            if ((attribute == "REMOVEWEED"))
            {
                return this.RemoveWeed;
            }
            if ((attribute == "HEIGHT"))
            {
                return this.Height;
            }
            if ((attribute == "MATERIALKIND"))
            {
                return this.MaterialKind;
            }
            if ((attribute == "RATEDVOLTAGE"))
            {
                return this.RatedVoltage;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "STRUCTURESUPPORTINFOS"))
            {
                return this._structureSupportInfos;
            }
            if ((feature == "MOUNTINGCONNECTIONS"))
            {
                return this._mountingConnections;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "WEEDREMOVEDDATE"))
            {
                this.WeedRemovedDate = ((string)(value));
                return;
            }
            if ((feature == "FUMIGANTNAME"))
            {
                this.FumigantName = ((string)(value));
                return;
            }
            if ((feature == "FUMIGANTAPPLIEDDATE"))
            {
                this.FumigantAppliedDate = ((string)(value));
                return;
            }
            if ((feature == "REMOVEWEED"))
            {
                this.RemoveWeed = ((bool)(value));
                return;
            }
            if ((feature == "HEIGHT"))
            {
                this.Height = ((float)(value));
                return;
            }
            if ((feature == "MATERIALKIND"))
            {
                this.MaterialKind = ((StructureMaterialKind)(value));
                return;
            }
            if ((feature == "RATEDVOLTAGE"))
            {
                this.RatedVoltage = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Structu" +
                        "reInfo")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the StructureInfo class
        /// </summary>
        public class StructureInfoReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private StructureInfo _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public StructureInfoReferencedElementsCollection(StructureInfo parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.StructureSupportInfos.Count);
                    count = (count + this._parent.MountingConnections.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.StructureSupportInfos.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MountingConnections.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.StructureSupportInfos.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MountingConnections.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IStructureSupportInfo structureSupportInfosCasted = item.As<IStructureSupportInfo>();
                if ((structureSupportInfosCasted != null))
                {
                    this._parent.StructureSupportInfos.Add(structureSupportInfosCasted);
                }
                IMountingConnection mountingConnectionsCasted = item.As<IMountingConnection>();
                if ((mountingConnectionsCasted != null))
                {
                    this._parent.MountingConnections.Add(mountingConnectionsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.StructureSupportInfos.Clear();
                this._parent.MountingConnections.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.StructureSupportInfos.Contains(item))
                {
                    return true;
                }
                if (this._parent.MountingConnections.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> structureSupportInfosEnumerator = this._parent.StructureSupportInfos.GetEnumerator();
                try
                {
                    for (
                    ; structureSupportInfosEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = structureSupportInfosEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    structureSupportInfosEnumerator.Dispose();
                }
                IEnumerator<IModelElement> mountingConnectionsEnumerator = this._parent.MountingConnections.GetEnumerator();
                try
                {
                    for (
                    ; mountingConnectionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = mountingConnectionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    mountingConnectionsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IStructureSupportInfo structureSupportInfoItem = item.As<IStructureSupportInfo>();
                if (((structureSupportInfoItem != null) 
                            && this._parent.StructureSupportInfos.Remove(structureSupportInfoItem)))
                {
                    return true;
                }
                IMountingConnection mountingConnectionItem = item.As<IMountingConnection>();
                if (((mountingConnectionItem != null) 
                            && this._parent.MountingConnections.Remove(mountingConnectionItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.StructureSupportInfos).Concat(this._parent.MountingConnections).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the weedRemovedDate property
        /// </summary>
        private sealed class WeedRemovedDateProxy : ModelPropertyChange<IStructureInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WeedRemovedDateProxy(IStructureInfo modelElement) : 
                    base(modelElement, "weedRemovedDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.WeedRemovedDate;
                }
                set
                {
                    this.ModelElement.WeedRemovedDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fumigantName property
        /// </summary>
        private sealed class FumigantNameProxy : ModelPropertyChange<IStructureInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FumigantNameProxy(IStructureInfo modelElement) : 
                    base(modelElement, "fumigantName")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.FumigantName;
                }
                set
                {
                    this.ModelElement.FumigantName = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fumigantAppliedDate property
        /// </summary>
        private sealed class FumigantAppliedDateProxy : ModelPropertyChange<IStructureInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FumigantAppliedDateProxy(IStructureInfo modelElement) : 
                    base(modelElement, "fumigantAppliedDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.FumigantAppliedDate;
                }
                set
                {
                    this.ModelElement.FumigantAppliedDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the removeWeed property
        /// </summary>
        private sealed class RemoveWeedProxy : ModelPropertyChange<IStructureInfo, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RemoveWeedProxy(IStructureInfo modelElement) : 
                    base(modelElement, "removeWeed")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.RemoveWeed;
                }
                set
                {
                    this.ModelElement.RemoveWeed = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the height property
        /// </summary>
        private sealed class HeightProxy : ModelPropertyChange<IStructureInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HeightProxy(IStructureInfo modelElement) : 
                    base(modelElement, "height")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Height;
                }
                set
                {
                    this.ModelElement.Height = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the materialKind property
        /// </summary>
        private sealed class MaterialKindProxy : ModelPropertyChange<IStructureInfo, Nullable<StructureMaterialKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaterialKindProxy(IStructureInfo modelElement) : 
                    base(modelElement, "materialKind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<StructureMaterialKind> Value
            {
                get
                {
                    return this.ModelElement.MaterialKind;
                }
                set
                {
                    this.ModelElement.MaterialKind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ratedVoltage property
        /// </summary>
        private sealed class RatedVoltageProxy : ModelPropertyChange<IStructureInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatedVoltageProxy(IStructureInfo modelElement) : 
                    base(modelElement, "ratedVoltage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RatedVoltage;
                }
                set
                {
                    this.ModelElement.RatedVoltage = value;
                }
            }
        }
    }
}

