//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The default implementation of the PowerRating class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets")]
    [XmlNamespacePrefixAttribute("cimInfAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/PowerRa" +
        "ting")]
    [DebuggerDisplayAttribute("PowerRating {UUID}")]
    public partial class PowerRating : IdentifiedObject, IPowerRating, IModelElement
    {
        
        /// <summary>
        /// The backing field for the CoolingKind property
        /// </summary>
        private Nullable<CoolingKind> _coolingKind;
        
        private static Lazy<ITypedElement> _coolingKindAttribute = new Lazy<ITypedElement>(RetrieveCoolingKindAttribute);
        
        /// <summary>
        /// The backing field for the PowerRating_ property
        /// </summary>
        private float _powerRating_;
        
        private static Lazy<ITypedElement> _powerRatingAttribute = new Lazy<ITypedElement>(RetrievePowerRatingAttribute);
        
        /// <summary>
        /// The backing field for the Stage property
        /// </summary>
        private int _stage;
        
        private static Lazy<ITypedElement> _stageAttribute = new Lazy<ITypedElement>(RetrieveStageAttribute);
        
        private static Lazy<ITypedElement> _transformerAssetsReference = new Lazy<ITypedElement>(RetrieveTransformerAssetsReference);
        
        /// <summary>
        /// The backing field for the TransformerAssets property
        /// </summary>
        private PowerRatingTransformerAssetsCollection _transformerAssets;
        
        private static IClass _classInstance;
        
        public PowerRating()
        {
            this._transformerAssets = new PowerRatingTransformerAssetsCollection(this);
            this._transformerAssets.CollectionChanging += this.TransformerAssetsCollectionChanging;
            this._transformerAssets.CollectionChanged += this.TransformerAssetsCollectionChanged;
        }
        
        /// <summary>
        /// The coolingKind property
        /// </summary>
        [XmlElementNameAttribute("coolingKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<CoolingKind> CoolingKind
        {
            get
            {
                return this._coolingKind;
            }
            set
            {
                if ((this._coolingKind != value))
                {
                    Nullable<CoolingKind> old = this._coolingKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCoolingKindChanging(e);
                    this.OnPropertyChanging("CoolingKind", e, _coolingKindAttribute);
                    this._coolingKind = value;
                    this.OnCoolingKindChanged(e);
                    this.OnPropertyChanged("CoolingKind", e, _coolingKindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The powerRating property
        /// </summary>
        [XmlElementNameAttribute("powerRating")]
        [XmlAttributeAttribute(true)]
        public virtual float PowerRating_
        {
            get
            {
                return this._powerRating_;
            }
            set
            {
                if ((this._powerRating_ != value))
                {
                    float old = this._powerRating_;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPowerRating_Changing(e);
                    this.OnPropertyChanging("PowerRating_", e, _powerRatingAttribute);
                    this._powerRating_ = value;
                    this.OnPowerRating_Changed(e);
                    this.OnPropertyChanged("PowerRating_", e, _powerRatingAttribute);
                }
            }
        }
        
        /// <summary>
        /// The stage property
        /// </summary>
        [XmlElementNameAttribute("stage")]
        [XmlAttributeAttribute(true)]
        public virtual int Stage
        {
            get
            {
                return this._stage;
            }
            set
            {
                if ((this._stage != value))
                {
                    int old = this._stage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStageChanging(e);
                    this.OnPropertyChanging("Stage", e, _stageAttribute);
                    this._stage = value;
                    this.OnStageChanged(e);
                    this.OnPropertyChanged("Stage", e, _stageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The TransformerAssets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PowerRatings")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransformerAsset> TransformerAssets
        {
            get
            {
                return this._transformerAssets;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PowerRatingReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/PowerRa" +
                            "ting")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the CoolingKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoolingKindChanging;
        
        /// <summary>
        /// Gets fired when the CoolingKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoolingKindChanged;
        
        /// <summary>
        /// Gets fired before the PowerRating_ property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerRating_Changing;
        
        /// <summary>
        /// Gets fired when the PowerRating_ property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerRating_Changed;
        
        /// <summary>
        /// Gets fired before the Stage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StageChanging;
        
        /// <summary>
        /// Gets fired when the Stage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StageChanged;
        
        private static ITypedElement RetrieveCoolingKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PowerRating.ClassInstance)).Resolve("coolingKind")));
        }
        
        /// <summary>
        /// Raises the CoolingKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoolingKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoolingKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CoolingKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoolingKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoolingKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePowerRatingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PowerRating.ClassInstance)).Resolve("powerRating")));
        }
        
        /// <summary>
        /// Raises the PowerRating_Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerRating_Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerRating_Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerRating_Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerRating_Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerRating_Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PowerRating.ClassInstance)).Resolve("stage")));
        }
        
        /// <summary>
        /// Raises the StageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransformerAssetsReference()
        {
            return ((ITypedElement)(((ModelElement)(PowerRating.ClassInstance)).Resolve("TransformerAssets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TransformerAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransformerAssetsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("TransformerAssets", e, _transformerAssetsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TransformerAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransformerAssetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TransformerAssets", e, _transformerAssetsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "COOLINGKIND"))
            {
                return this.CoolingKind;
            }
            if ((attribute == "POWERRATING"))
            {
                return this.PowerRating_;
            }
            if ((attribute == "STAGE"))
            {
                return this.Stage;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "TRANSFORMERASSETS"))
            {
                return this._transformerAssets;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "COOLINGKIND"))
            {
                this.CoolingKind = ((CoolingKind)(value));
                return;
            }
            if ((feature == "POWERRATING"))
            {
                this.PowerRating_ = ((float)(value));
                return;
            }
            if ((feature == "STAGE"))
            {
                this.Stage = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/PowerRa" +
                        "ting")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PowerRating class
        /// </summary>
        public class PowerRatingReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PowerRating _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PowerRatingReferencedElementsCollection(PowerRating parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.TransformerAssets.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TransformerAssets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TransformerAssets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITransformerAsset transformerAssetsCasted = item.As<ITransformerAsset>();
                if ((transformerAssetsCasted != null))
                {
                    this._parent.TransformerAssets.Add(transformerAssetsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TransformerAssets.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.TransformerAssets.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> transformerAssetsEnumerator = this._parent.TransformerAssets.GetEnumerator();
                try
                {
                    for (
                    ; transformerAssetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = transformerAssetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    transformerAssetsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITransformerAsset transformerAssetItem = item.As<ITransformerAsset>();
                if (((transformerAssetItem != null) 
                            && this._parent.TransformerAssets.Remove(transformerAssetItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TransformerAssets).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the coolingKind property
        /// </summary>
        private sealed class CoolingKindProxy : ModelPropertyChange<IPowerRating, Nullable<CoolingKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CoolingKindProxy(IPowerRating modelElement) : 
                    base(modelElement, "coolingKind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<CoolingKind> Value
            {
                get
                {
                    return this.ModelElement.CoolingKind;
                }
                set
                {
                    this.ModelElement.CoolingKind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the powerRating property
        /// </summary>
        private sealed class PowerRatingProxy : ModelPropertyChange<IPowerRating, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PowerRatingProxy(IPowerRating modelElement) : 
                    base(modelElement, "powerRating")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PowerRating_;
                }
                set
                {
                    this.ModelElement.PowerRating_ = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the stage property
        /// </summary>
        private sealed class StageProxy : ModelPropertyChange<IPowerRating, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StageProxy(IPowerRating modelElement) : 
                    base(modelElement, "stage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.Stage;
                }
                set
                {
                    this.ModelElement.Stage = value;
                }
            }
        }
    }
}

