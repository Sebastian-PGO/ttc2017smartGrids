using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The default implementation of the OrgAssetRole class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets")]
    [XmlNamespacePrefixAttribute("cimInfAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/OrgAsse" +
        "tRole")]
    [DebuggerDisplayAttribute("OrgAssetRole {UUID}")]
    public partial class OrgAssetRole : Role, IOrgAssetRole, IModelElement
    {
        
        /// <summary>
        /// The backing field for the PercentOwnership property
        /// </summary>
        private float _percentOwnership;
        
        private static Lazy<ITypedElement> _percentOwnershipAttribute = new Lazy<ITypedElement>(RetrievePercentOwnershipAttribute);
        
        private static Lazy<ITypedElement> _erpOrganisationReference = new Lazy<ITypedElement>(RetrieveErpOrganisationReference);
        
        /// <summary>
        /// The backing field for the ErpOrganisation property
        /// </summary>
        private IErpOrganisation _erpOrganisation;
        
        private static Lazy<ITypedElement> _assetReference = new Lazy<ITypedElement>(RetrieveAssetReference);
        
        /// <summary>
        /// The backing field for the Asset property
        /// </summary>
        private IAsset _asset;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The percentOwnership property
        /// </summary>
        [XmlElementNameAttribute("percentOwnership")]
        [XmlAttributeAttribute(true)]
        public virtual float PercentOwnership
        {
            get
            {
                return this._percentOwnership;
            }
            set
            {
                if ((this._percentOwnership != value))
                {
                    float old = this._percentOwnership;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPercentOwnershipChanging(e);
                    this.OnPropertyChanging("PercentOwnership", e, _percentOwnershipAttribute);
                    this._percentOwnership = value;
                    this.OnPercentOwnershipChanged(e);
                    this.OnPropertyChanged("PercentOwnership", e, _percentOwnershipAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ErpOrganisation property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AssetRoles")]
        public virtual IErpOrganisation ErpOrganisation
        {
            get
            {
                return this._erpOrganisation;
            }
            set
            {
                if ((this._erpOrganisation != value))
                {
                    IErpOrganisation old = this._erpOrganisation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpOrganisationChanging(e);
                    this.OnPropertyChanging("ErpOrganisation", e, _erpOrganisationReference);
                    this._erpOrganisation = value;
                    if ((old != null))
                    {
                        old.AssetRoles.Remove(this);
                        old.Deleted -= this.OnResetErpOrganisation;
                    }
                    if ((value != null))
                    {
                        value.AssetRoles.Add(this);
                        value.Deleted += this.OnResetErpOrganisation;
                    }
                    this.OnErpOrganisationChanged(e);
                    this.OnPropertyChanged("ErpOrganisation", e, _erpOrganisationReference);
                }
            }
        }
        
        /// <summary>
        /// The Asset property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ErpOrganisationRoles")]
        public virtual IAsset Asset
        {
            get
            {
                return this._asset;
            }
            set
            {
                if ((this._asset != value))
                {
                    IAsset old = this._asset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAssetChanging(e);
                    this.OnPropertyChanging("Asset", e, _assetReference);
                    this._asset = value;
                    if ((old != null))
                    {
                        old.ErpOrganisationRoles.Remove(this);
                        old.Deleted -= this.OnResetAsset;
                    }
                    if ((value != null))
                    {
                        value.ErpOrganisationRoles.Add(this);
                        value.Deleted += this.OnResetAsset;
                    }
                    this.OnAssetChanged(e);
                    this.OnPropertyChanged("Asset", e, _assetReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new OrgAssetRoleReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/OrgAsse" +
                            "tRole")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PercentOwnership property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PercentOwnershipChanging;
        
        /// <summary>
        /// Gets fired when the PercentOwnership property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PercentOwnershipChanged;
        
        /// <summary>
        /// Gets fired before the ErpOrganisation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpOrganisationChanging;
        
        /// <summary>
        /// Gets fired when the ErpOrganisation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpOrganisationChanged;
        
        /// <summary>
        /// Gets fired before the Asset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetChanging;
        
        /// <summary>
        /// Gets fired when the Asset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetChanged;
        
        private static ITypedElement RetrievePercentOwnershipAttribute()
        {
            return ((ITypedElement)(((ModelElement)(OrgAssetRole.ClassInstance)).Resolve("percentOwnership")));
        }
        
        /// <summary>
        /// Raises the PercentOwnershipChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPercentOwnershipChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PercentOwnershipChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PercentOwnershipChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPercentOwnershipChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PercentOwnershipChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveErpOrganisationReference()
        {
            return ((ITypedElement)(((ModelElement)(OrgAssetRole.ClassInstance)).Resolve("ErpOrganisation")));
        }
        
        /// <summary>
        /// Raises the ErpOrganisationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpOrganisationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpOrganisationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpOrganisationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpOrganisationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpOrganisationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpOrganisation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpOrganisation(object sender, System.EventArgs eventArgs)
        {
            this.ErpOrganisation = null;
        }
        
        private static ITypedElement RetrieveAssetReference()
        {
            return ((ITypedElement)(((ModelElement)(OrgAssetRole.ClassInstance)).Resolve("Asset")));
        }
        
        /// <summary>
        /// Raises the AssetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AssetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Asset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAsset(object sender, System.EventArgs eventArgs)
        {
            this.Asset = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PERCENTOWNERSHIP"))
            {
                return this.PercentOwnership;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ERPORGANISATION"))
            {
                this.ErpOrganisation = ((IErpOrganisation)(value));
                return;
            }
            if ((feature == "ASSET"))
            {
                this.Asset = ((IAsset)(value));
                return;
            }
            if ((feature == "PERCENTOWNERSHIP"))
            {
                this.PercentOwnership = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ErpOrganisation"))
            {
                return new ErpOrganisationProxy(this);
            }
            if ((attribute == "Asset"))
            {
                return new AssetProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ErpOrganisation"))
            {
                return new ErpOrganisationProxy(this);
            }
            if ((reference == "Asset"))
            {
                return new AssetProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/OrgAsse" +
                        "tRole")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the OrgAssetRole class
        /// </summary>
        public class OrgAssetRoleReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private OrgAssetRole _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OrgAssetRoleReferencedElementsCollection(OrgAssetRole parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ErpOrganisation != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Asset != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ErpOrganisationChanged += this.PropagateValueChanges;
                this._parent.AssetChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ErpOrganisationChanged -= this.PropagateValueChanges;
                this._parent.AssetChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ErpOrganisation == null))
                {
                    IErpOrganisation erpOrganisationCasted = item.As<IErpOrganisation>();
                    if ((erpOrganisationCasted != null))
                    {
                        this._parent.ErpOrganisation = erpOrganisationCasted;
                        return;
                    }
                }
                if ((this._parent.Asset == null))
                {
                    IAsset assetCasted = item.As<IAsset>();
                    if ((assetCasted != null))
                    {
                        this._parent.Asset = assetCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ErpOrganisation = null;
                this._parent.Asset = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ErpOrganisation))
                {
                    return true;
                }
                if ((item == this._parent.Asset))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ErpOrganisation != null))
                {
                    array[arrayIndex] = this._parent.ErpOrganisation;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Asset != null))
                {
                    array[arrayIndex] = this._parent.Asset;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ErpOrganisation == item))
                {
                    this._parent.ErpOrganisation = null;
                    return true;
                }
                if ((this._parent.Asset == item))
                {
                    this._parent.Asset = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ErpOrganisation).Concat(this._parent.Asset).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the percentOwnership property
        /// </summary>
        private sealed class PercentOwnershipProxy : ModelPropertyChange<IOrgAssetRole, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PercentOwnershipProxy(IOrgAssetRole modelElement) : 
                    base(modelElement, "percentOwnership")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PercentOwnership;
                }
                set
                {
                    this.ModelElement.PercentOwnership = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpOrganisation property
        /// </summary>
        private sealed class ErpOrganisationProxy : ModelPropertyChange<IOrgAssetRole, IErpOrganisation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpOrganisationProxy(IOrgAssetRole modelElement) : 
                    base(modelElement, "ErpOrganisation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpOrganisation Value
            {
                get
                {
                    return this.ModelElement.ErpOrganisation;
                }
                set
                {
                    this.ModelElement.ErpOrganisation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Asset property
        /// </summary>
        private sealed class AssetProxy : ModelPropertyChange<IOrgAssetRole, IAsset>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssetProxy(IOrgAssetRole modelElement) : 
                    base(modelElement, "Asset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAsset Value
            {
                get
                {
                    return this.ModelElement.Asset;
                }
                set
                {
                    this.ModelElement.Asset = value;
                }
            }
        }
    }
}

