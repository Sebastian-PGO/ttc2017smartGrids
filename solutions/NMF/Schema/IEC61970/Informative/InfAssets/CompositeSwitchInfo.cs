using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The default implementation of the CompositeSwitchInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets")]
    [XmlNamespacePrefixAttribute("cimInfAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Composi" +
        "teSwitchInfo")]
    [DebuggerDisplayAttribute("CompositeSwitchInfo {UUID}")]
    public partial class CompositeSwitchInfo : ElectricalInfo, ICompositeSwitchInfo, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Kind property
        /// </summary>
        private Nullable<CompositeSwitchKind> _kind;
        
        private static Lazy<ITypedElement> _kindAttribute = new Lazy<ITypedElement>(RetrieveKindAttribute);
        
        /// <summary>
        /// The backing field for the InitOpMode property
        /// </summary>
        private string _initOpMode;
        
        private static Lazy<ITypedElement> _initOpModeAttribute = new Lazy<ITypedElement>(RetrieveInitOpModeAttribute);
        
        /// <summary>
        /// The backing field for the Gang property
        /// </summary>
        private bool _gang;
        
        private static Lazy<ITypedElement> _gangAttribute = new Lazy<ITypedElement>(RetrieveGangAttribute);
        
        /// <summary>
        /// The backing field for the SwitchStateCount property
        /// </summary>
        private int _switchStateCount;
        
        private static Lazy<ITypedElement> _switchStateCountAttribute = new Lazy<ITypedElement>(RetrieveSwitchStateCountAttribute);
        
        /// <summary>
        /// The backing field for the InterruptingRating property
        /// </summary>
        private float _interruptingRating;
        
        private static Lazy<ITypedElement> _interruptingRatingAttribute = new Lazy<ITypedElement>(RetrieveInterruptingRatingAttribute);
        
        /// <summary>
        /// The backing field for the Remote property
        /// </summary>
        private bool _remote;
        
        private static Lazy<ITypedElement> _remoteAttribute = new Lazy<ITypedElement>(RetrieveRemoteAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The kind property
        /// </summary>
        [XmlElementNameAttribute("kind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<CompositeSwitchKind> Kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                if ((this._kind != value))
                {
                    Nullable<CompositeSwitchKind> old = this._kind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKindChanging(e);
                    this.OnPropertyChanging("Kind", e, _kindAttribute);
                    this._kind = value;
                    this.OnKindChanged(e);
                    this.OnPropertyChanged("Kind", e, _kindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The initOpMode property
        /// </summary>
        [XmlElementNameAttribute("initOpMode")]
        [XmlAttributeAttribute(true)]
        public virtual string InitOpMode
        {
            get
            {
                return this._initOpMode;
            }
            set
            {
                if ((this._initOpMode != value))
                {
                    string old = this._initOpMode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInitOpModeChanging(e);
                    this.OnPropertyChanging("InitOpMode", e, _initOpModeAttribute);
                    this._initOpMode = value;
                    this.OnInitOpModeChanged(e);
                    this.OnPropertyChanged("InitOpMode", e, _initOpModeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The gang property
        /// </summary>
        [XmlElementNameAttribute("gang")]
        [XmlAttributeAttribute(true)]
        public virtual bool Gang
        {
            get
            {
                return this._gang;
            }
            set
            {
                if ((this._gang != value))
                {
                    bool old = this._gang;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGangChanging(e);
                    this.OnPropertyChanging("Gang", e, _gangAttribute);
                    this._gang = value;
                    this.OnGangChanged(e);
                    this.OnPropertyChanged("Gang", e, _gangAttribute);
                }
            }
        }
        
        /// <summary>
        /// The switchStateCount property
        /// </summary>
        [XmlElementNameAttribute("switchStateCount")]
        [XmlAttributeAttribute(true)]
        public virtual int SwitchStateCount
        {
            get
            {
                return this._switchStateCount;
            }
            set
            {
                if ((this._switchStateCount != value))
                {
                    int old = this._switchStateCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSwitchStateCountChanging(e);
                    this.OnPropertyChanging("SwitchStateCount", e, _switchStateCountAttribute);
                    this._switchStateCount = value;
                    this.OnSwitchStateCountChanged(e);
                    this.OnPropertyChanged("SwitchStateCount", e, _switchStateCountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The interruptingRating property
        /// </summary>
        [XmlElementNameAttribute("interruptingRating")]
        [XmlAttributeAttribute(true)]
        public virtual float InterruptingRating
        {
            get
            {
                return this._interruptingRating;
            }
            set
            {
                if ((this._interruptingRating != value))
                {
                    float old = this._interruptingRating;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInterruptingRatingChanging(e);
                    this.OnPropertyChanging("InterruptingRating", e, _interruptingRatingAttribute);
                    this._interruptingRating = value;
                    this.OnInterruptingRatingChanged(e);
                    this.OnPropertyChanged("InterruptingRating", e, _interruptingRatingAttribute);
                }
            }
        }
        
        /// <summary>
        /// The remote property
        /// </summary>
        [XmlElementNameAttribute("remote")]
        [XmlAttributeAttribute(true)]
        public virtual bool Remote
        {
            get
            {
                return this._remote;
            }
            set
            {
                if ((this._remote != value))
                {
                    bool old = this._remote;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRemoteChanging(e);
                    this.OnPropertyChanging("Remote", e, _remoteAttribute);
                    this._remote = value;
                    this.OnRemoteChanged(e);
                    this.OnPropertyChanged("Remote", e, _remoteAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Composi" +
                            "teSwitchInfo")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        /// <summary>
        /// Gets fired before the InitOpMode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InitOpModeChanging;
        
        /// <summary>
        /// Gets fired when the InitOpMode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InitOpModeChanged;
        
        /// <summary>
        /// Gets fired before the Gang property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GangChanging;
        
        /// <summary>
        /// Gets fired when the Gang property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GangChanged;
        
        /// <summary>
        /// Gets fired before the SwitchStateCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwitchStateCountChanging;
        
        /// <summary>
        /// Gets fired when the SwitchStateCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwitchStateCountChanged;
        
        /// <summary>
        /// Gets fired before the InterruptingRating property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InterruptingRatingChanging;
        
        /// <summary>
        /// Gets fired when the InterruptingRating property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InterruptingRatingChanged;
        
        /// <summary>
        /// Gets fired before the Remote property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RemoteChanging;
        
        /// <summary>
        /// Gets fired when the Remote property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RemoteChanged;
        
        private static ITypedElement RetrieveKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CompositeSwitchInfo.ClassInstance)).Resolve("kind")));
        }
        
        /// <summary>
        /// Raises the KindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveInitOpModeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CompositeSwitchInfo.ClassInstance)).Resolve("initOpMode")));
        }
        
        /// <summary>
        /// Raises the InitOpModeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInitOpModeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InitOpModeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InitOpModeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInitOpModeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InitOpModeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGangAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CompositeSwitchInfo.ClassInstance)).Resolve("gang")));
        }
        
        /// <summary>
        /// Raises the GangChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGangChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GangChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GangChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGangChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GangChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSwitchStateCountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CompositeSwitchInfo.ClassInstance)).Resolve("switchStateCount")));
        }
        
        /// <summary>
        /// Raises the SwitchStateCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwitchStateCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwitchStateCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SwitchStateCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwitchStateCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwitchStateCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveInterruptingRatingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CompositeSwitchInfo.ClassInstance)).Resolve("interruptingRating")));
        }
        
        /// <summary>
        /// Raises the InterruptingRatingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInterruptingRatingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InterruptingRatingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InterruptingRatingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInterruptingRatingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InterruptingRatingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRemoteAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CompositeSwitchInfo.ClassInstance)).Resolve("remote")));
        }
        
        /// <summary>
        /// Raises the RemoteChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemoteChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RemoteChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RemoteChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemoteChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RemoteChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "KIND"))
            {
                return this.Kind;
            }
            if ((attribute == "INITOPMODE"))
            {
                return this.InitOpMode;
            }
            if ((attribute == "GANG"))
            {
                return this.Gang;
            }
            if ((attribute == "SWITCHSTATECOUNT"))
            {
                return this.SwitchStateCount;
            }
            if ((attribute == "INTERRUPTINGRATING"))
            {
                return this.InterruptingRating;
            }
            if ((attribute == "REMOTE"))
            {
                return this.Remote;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "KIND"))
            {
                this.Kind = ((CompositeSwitchKind)(value));
                return;
            }
            if ((feature == "INITOPMODE"))
            {
                this.InitOpMode = ((string)(value));
                return;
            }
            if ((feature == "GANG"))
            {
                this.Gang = ((bool)(value));
                return;
            }
            if ((feature == "SWITCHSTATECOUNT"))
            {
                this.SwitchStateCount = ((int)(value));
                return;
            }
            if ((feature == "INTERRUPTINGRATING"))
            {
                this.InterruptingRating = ((float)(value));
                return;
            }
            if ((feature == "REMOTE"))
            {
                this.Remote = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Composi" +
                        "teSwitchInfo")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kind property
        /// </summary>
        private sealed class KindProxy : ModelPropertyChange<ICompositeSwitchInfo, Nullable<CompositeSwitchKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KindProxy(ICompositeSwitchInfo modelElement) : 
                    base(modelElement, "kind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<CompositeSwitchKind> Value
            {
                get
                {
                    return this.ModelElement.Kind;
                }
                set
                {
                    this.ModelElement.Kind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the initOpMode property
        /// </summary>
        private sealed class InitOpModeProxy : ModelPropertyChange<ICompositeSwitchInfo, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InitOpModeProxy(ICompositeSwitchInfo modelElement) : 
                    base(modelElement, "initOpMode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.InitOpMode;
                }
                set
                {
                    this.ModelElement.InitOpMode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the gang property
        /// </summary>
        private sealed class GangProxy : ModelPropertyChange<ICompositeSwitchInfo, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GangProxy(ICompositeSwitchInfo modelElement) : 
                    base(modelElement, "gang")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Gang;
                }
                set
                {
                    this.ModelElement.Gang = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the switchStateCount property
        /// </summary>
        private sealed class SwitchStateCountProxy : ModelPropertyChange<ICompositeSwitchInfo, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SwitchStateCountProxy(ICompositeSwitchInfo modelElement) : 
                    base(modelElement, "switchStateCount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.SwitchStateCount;
                }
                set
                {
                    this.ModelElement.SwitchStateCount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the interruptingRating property
        /// </summary>
        private sealed class InterruptingRatingProxy : ModelPropertyChange<ICompositeSwitchInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InterruptingRatingProxy(ICompositeSwitchInfo modelElement) : 
                    base(modelElement, "interruptingRating")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.InterruptingRating;
                }
                set
                {
                    this.ModelElement.InterruptingRating = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the remote property
        /// </summary>
        private sealed class RemoteProxy : ModelPropertyChange<ICompositeSwitchInfo, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RemoteProxy(ICompositeSwitchInfo modelElement) : 
                    base(modelElement, "remote")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Remote;
                }
                set
                {
                    this.ModelElement.Remote = value;
                }
            }
        }
    }
}

