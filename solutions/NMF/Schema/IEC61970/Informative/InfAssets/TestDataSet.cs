//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The default implementation of the TestDataSet class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets")]
    [XmlNamespacePrefixAttribute("cimInfAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/TestDat" +
        "aSet")]
    [DebuggerDisplayAttribute("TestDataSet {UUID}")]
    public partial class TestDataSet : ProcedureDataSet, ITestDataSet, IModelElement
    {
        
        /// <summary>
        /// The backing field for the SpecimenToLabDateTime property
        /// </summary>
        private DateTime _specimenToLabDateTime;
        
        private static Lazy<ITypedElement> _specimenToLabDateTimeAttribute = new Lazy<ITypedElement>(RetrieveSpecimenToLabDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the SpecimenID property
        /// </summary>
        private string _specimenID;
        
        private static Lazy<ITypedElement> _specimenIDAttribute = new Lazy<ITypedElement>(RetrieveSpecimenIDAttribute);
        
        /// <summary>
        /// The backing field for the Conclusion property
        /// </summary>
        private string _conclusion;
        
        private static Lazy<ITypedElement> _conclusionAttribute = new Lazy<ITypedElement>(RetrieveConclusionAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The specimenToLabDateTime property
        /// </summary>
        [XmlElementNameAttribute("specimenToLabDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime SpecimenToLabDateTime
        {
            get
            {
                return this._specimenToLabDateTime;
            }
            set
            {
                if ((this._specimenToLabDateTime != value))
                {
                    DateTime old = this._specimenToLabDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSpecimenToLabDateTimeChanging(e);
                    this.OnPropertyChanging("SpecimenToLabDateTime", e, _specimenToLabDateTimeAttribute);
                    this._specimenToLabDateTime = value;
                    this.OnSpecimenToLabDateTimeChanged(e);
                    this.OnPropertyChanged("SpecimenToLabDateTime", e, _specimenToLabDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The specimenID property
        /// </summary>
        [XmlElementNameAttribute("specimenID")]
        [XmlAttributeAttribute(true)]
        public virtual string SpecimenID
        {
            get
            {
                return this._specimenID;
            }
            set
            {
                if ((this._specimenID != value))
                {
                    string old = this._specimenID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSpecimenIDChanging(e);
                    this.OnPropertyChanging("SpecimenID", e, _specimenIDAttribute);
                    this._specimenID = value;
                    this.OnSpecimenIDChanged(e);
                    this.OnPropertyChanged("SpecimenID", e, _specimenIDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The conclusion property
        /// </summary>
        [XmlElementNameAttribute("conclusion")]
        [XmlAttributeAttribute(true)]
        public virtual string Conclusion
        {
            get
            {
                return this._conclusion;
            }
            set
            {
                if ((this._conclusion != value))
                {
                    string old = this._conclusion;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConclusionChanging(e);
                    this.OnPropertyChanging("Conclusion", e, _conclusionAttribute);
                    this._conclusion = value;
                    this.OnConclusionChanged(e);
                    this.OnPropertyChanged("Conclusion", e, _conclusionAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/TestDat" +
                            "aSet")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the SpecimenToLabDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpecimenToLabDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the SpecimenToLabDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpecimenToLabDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the SpecimenID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpecimenIDChanging;
        
        /// <summary>
        /// Gets fired when the SpecimenID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SpecimenIDChanged;
        
        /// <summary>
        /// Gets fired before the Conclusion property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConclusionChanging;
        
        /// <summary>
        /// Gets fired when the Conclusion property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConclusionChanged;
        
        private static ITypedElement RetrieveSpecimenToLabDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TestDataSet.ClassInstance)).Resolve("specimenToLabDateTime")));
        }
        
        /// <summary>
        /// Raises the SpecimenToLabDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpecimenToLabDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpecimenToLabDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpecimenToLabDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpecimenToLabDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpecimenToLabDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSpecimenIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TestDataSet.ClassInstance)).Resolve("specimenID")));
        }
        
        /// <summary>
        /// Raises the SpecimenIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpecimenIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpecimenIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SpecimenIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSpecimenIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SpecimenIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveConclusionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TestDataSet.ClassInstance)).Resolve("conclusion")));
        }
        
        /// <summary>
        /// Raises the ConclusionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConclusionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConclusionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConclusionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConclusionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConclusionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SPECIMENTOLABDATETIME"))
            {
                return this.SpecimenToLabDateTime;
            }
            if ((attribute == "SPECIMENID"))
            {
                return this.SpecimenID;
            }
            if ((attribute == "CONCLUSION"))
            {
                return this.Conclusion;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SPECIMENTOLABDATETIME"))
            {
                this.SpecimenToLabDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "SPECIMENID"))
            {
                this.SpecimenID = ((string)(value));
                return;
            }
            if ((feature == "CONCLUSION"))
            {
                this.Conclusion = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/TestDat" +
                        "aSet")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the specimenToLabDateTime property
        /// </summary>
        private sealed class SpecimenToLabDateTimeProxy : ModelPropertyChange<ITestDataSet, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpecimenToLabDateTimeProxy(ITestDataSet modelElement) : 
                    base(modelElement, "specimenToLabDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.SpecimenToLabDateTime;
                }
                set
                {
                    this.ModelElement.SpecimenToLabDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the specimenID property
        /// </summary>
        private sealed class SpecimenIDProxy : ModelPropertyChange<ITestDataSet, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SpecimenIDProxy(ITestDataSet modelElement) : 
                    base(modelElement, "specimenID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.SpecimenID;
                }
                set
                {
                    this.ModelElement.SpecimenID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the conclusion property
        /// </summary>
        private sealed class ConclusionProxy : ModelPropertyChange<ITestDataSet, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConclusionProxy(ITestDataSet modelElement) : 
                    base(modelElement, "conclusion")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Conclusion;
                }
                set
                {
                    this.ModelElement.Conclusion = value;
                }
            }
        }
    }
}

