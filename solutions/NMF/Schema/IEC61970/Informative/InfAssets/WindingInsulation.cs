//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The default implementation of the WindingInsulation class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#InfAssets")]
    [XmlNamespacePrefixAttribute("cimInfAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Winding" +
        "Insulation")]
    [DebuggerDisplayAttribute("WindingInsulation {UUID}")]
    public partial class WindingInsulation : IdentifiedObject, IWindingInsulation, IModelElement
    {
        
        /// <summary>
        /// The backing field for the InsulationResistance property
        /// </summary>
        private string _insulationResistance;
        
        private static Lazy<ITypedElement> _insulationResistanceAttribute = new Lazy<ITypedElement>(RetrieveInsulationResistanceAttribute);
        
        /// <summary>
        /// The backing field for the LeakageReactance property
        /// </summary>
        private float _leakageReactance;
        
        private static Lazy<ITypedElement> _leakageReactanceAttribute = new Lazy<ITypedElement>(RetrieveLeakageReactanceAttribute);
        
        /// <summary>
        /// The backing field for the InsulationPFStatus property
        /// </summary>
        private string _insulationPFStatus;
        
        private static Lazy<ITypedElement> _insulationPFStatusAttribute = new Lazy<ITypedElement>(RetrieveInsulationPFStatusAttribute);
        
        private static Lazy<ITypedElement> _toWindingReference = new Lazy<ITypedElement>(RetrieveToWindingReference);
        
        /// <summary>
        /// The backing field for the ToWinding property
        /// </summary>
        private IDistributionTransformerWinding _toWinding;
        
        private static Lazy<ITypedElement> _groundReference = new Lazy<ITypedElement>(RetrieveGroundReference);
        
        /// <summary>
        /// The backing field for the Ground property
        /// </summary>
        private IGround _ground;
        
        private static Lazy<ITypedElement> _transformerObservationReference = new Lazy<ITypedElement>(RetrieveTransformerObservationReference);
        
        /// <summary>
        /// The backing field for the TransformerObservation property
        /// </summary>
        private ITransformerObservation _transformerObservation;
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static Lazy<ITypedElement> _fromWindingReference = new Lazy<ITypedElement>(RetrieveFromWindingReference);
        
        /// <summary>
        /// The backing field for the FromWinding property
        /// </summary>
        private IDistributionTransformerWinding _fromWinding;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The insulationResistance property
        /// </summary>
        [XmlElementNameAttribute("insulationResistance")]
        [XmlAttributeAttribute(true)]
        public virtual string InsulationResistance
        {
            get
            {
                return this._insulationResistance;
            }
            set
            {
                if ((this._insulationResistance != value))
                {
                    string old = this._insulationResistance;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInsulationResistanceChanging(e);
                    this.OnPropertyChanging("InsulationResistance", e, _insulationResistanceAttribute);
                    this._insulationResistance = value;
                    this.OnInsulationResistanceChanged(e);
                    this.OnPropertyChanged("InsulationResistance", e, _insulationResistanceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The leakageReactance property
        /// </summary>
        [XmlElementNameAttribute("leakageReactance")]
        [XmlAttributeAttribute(true)]
        public virtual float LeakageReactance
        {
            get
            {
                return this._leakageReactance;
            }
            set
            {
                if ((this._leakageReactance != value))
                {
                    float old = this._leakageReactance;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLeakageReactanceChanging(e);
                    this.OnPropertyChanging("LeakageReactance", e, _leakageReactanceAttribute);
                    this._leakageReactance = value;
                    this.OnLeakageReactanceChanged(e);
                    this.OnPropertyChanged("LeakageReactance", e, _leakageReactanceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The insulationPFStatus property
        /// </summary>
        [XmlElementNameAttribute("insulationPFStatus")]
        [XmlAttributeAttribute(true)]
        public virtual string InsulationPFStatus
        {
            get
            {
                return this._insulationPFStatus;
            }
            set
            {
                if ((this._insulationPFStatus != value))
                {
                    string old = this._insulationPFStatus;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInsulationPFStatusChanging(e);
                    this.OnPropertyChanging("InsulationPFStatus", e, _insulationPFStatusAttribute);
                    this._insulationPFStatus = value;
                    this.OnInsulationPFStatusChanged(e);
                    this.OnPropertyChanged("InsulationPFStatus", e, _insulationPFStatusAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ToWinding property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ToWindingInsulations")]
        public virtual IDistributionTransformerWinding ToWinding
        {
            get
            {
                return this._toWinding;
            }
            set
            {
                if ((this._toWinding != value))
                {
                    IDistributionTransformerWinding old = this._toWinding;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnToWindingChanging(e);
                    this.OnPropertyChanging("ToWinding", e, _toWindingReference);
                    this._toWinding = value;
                    if ((old != null))
                    {
                        old.ToWindingInsulations.Remove(this);
                        old.Deleted -= this.OnResetToWinding;
                    }
                    if ((value != null))
                    {
                        value.ToWindingInsulations.Add(this);
                        value.Deleted += this.OnResetToWinding;
                    }
                    this.OnToWindingChanged(e);
                    this.OnPropertyChanged("ToWinding", e, _toWindingReference);
                }
            }
        }
        
        /// <summary>
        /// The Ground property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WindingInsulations")]
        public virtual IGround Ground
        {
            get
            {
                return this._ground;
            }
            set
            {
                if ((this._ground != value))
                {
                    IGround old = this._ground;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGroundChanging(e);
                    this.OnPropertyChanging("Ground", e, _groundReference);
                    this._ground = value;
                    if ((old != null))
                    {
                        old.WindingInsulations.Remove(this);
                        old.Deleted -= this.OnResetGround;
                    }
                    if ((value != null))
                    {
                        value.WindingInsulations.Add(this);
                        value.Deleted += this.OnResetGround;
                    }
                    this.OnGroundChanged(e);
                    this.OnPropertyChanged("Ground", e, _groundReference);
                }
            }
        }
        
        /// <summary>
        /// The TransformerObservation property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WindingInsulationPFs")]
        public virtual ITransformerObservation TransformerObservation
        {
            get
            {
                return this._transformerObservation;
            }
            set
            {
                if ((this._transformerObservation != value))
                {
                    ITransformerObservation old = this._transformerObservation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerObservationChanging(e);
                    this.OnPropertyChanging("TransformerObservation", e, _transformerObservationReference);
                    this._transformerObservation = value;
                    if ((old != null))
                    {
                        old.WindingInsulationPFs.Remove(this);
                        old.Deleted -= this.OnResetTransformerObservation;
                    }
                    if ((value != null))
                    {
                        value.WindingInsulationPFs.Add(this);
                        value.Deleted += this.OnResetTransformerObservation;
                    }
                    this.OnTransformerObservationChanged(e);
                    this.OnPropertyChanged("TransformerObservation", e, _transformerObservationReference);
                }
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// The FromWinding property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("FromWindingInsulations")]
        public virtual IDistributionTransformerWinding FromWinding
        {
            get
            {
                return this._fromWinding;
            }
            set
            {
                if ((this._fromWinding != value))
                {
                    IDistributionTransformerWinding old = this._fromWinding;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromWindingChanging(e);
                    this.OnPropertyChanging("FromWinding", e, _fromWindingReference);
                    this._fromWinding = value;
                    if ((old != null))
                    {
                        old.FromWindingInsulations.Remove(this);
                        old.Deleted -= this.OnResetFromWinding;
                    }
                    if ((value != null))
                    {
                        value.FromWindingInsulations.Add(this);
                        value.Deleted += this.OnResetFromWinding;
                    }
                    this.OnFromWindingChanged(e);
                    this.OnPropertyChanged("FromWinding", e, _fromWindingReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new WindingInsulationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Winding" +
                            "Insulation")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the InsulationResistance property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InsulationResistanceChanging;
        
        /// <summary>
        /// Gets fired when the InsulationResistance property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InsulationResistanceChanged;
        
        /// <summary>
        /// Gets fired before the LeakageReactance property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LeakageReactanceChanging;
        
        /// <summary>
        /// Gets fired when the LeakageReactance property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LeakageReactanceChanged;
        
        /// <summary>
        /// Gets fired before the InsulationPFStatus property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InsulationPFStatusChanging;
        
        /// <summary>
        /// Gets fired when the InsulationPFStatus property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InsulationPFStatusChanged;
        
        /// <summary>
        /// Gets fired before the ToWinding property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ToWindingChanging;
        
        /// <summary>
        /// Gets fired when the ToWinding property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ToWindingChanged;
        
        /// <summary>
        /// Gets fired before the Ground property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GroundChanging;
        
        /// <summary>
        /// Gets fired when the Ground property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GroundChanged;
        
        /// <summary>
        /// Gets fired before the TransformerObservation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerObservationChanging;
        
        /// <summary>
        /// Gets fired when the TransformerObservation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerObservationChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the FromWinding property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromWindingChanging;
        
        /// <summary>
        /// Gets fired when the FromWinding property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromWindingChanged;
        
        private static ITypedElement RetrieveInsulationResistanceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WindingInsulation.ClassInstance)).Resolve("insulationResistance")));
        }
        
        /// <summary>
        /// Raises the InsulationResistanceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInsulationResistanceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InsulationResistanceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InsulationResistanceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInsulationResistanceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InsulationResistanceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLeakageReactanceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WindingInsulation.ClassInstance)).Resolve("leakageReactance")));
        }
        
        /// <summary>
        /// Raises the LeakageReactanceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLeakageReactanceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LeakageReactanceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LeakageReactanceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLeakageReactanceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LeakageReactanceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveInsulationPFStatusAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WindingInsulation.ClassInstance)).Resolve("insulationPFStatus")));
        }
        
        /// <summary>
        /// Raises the InsulationPFStatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInsulationPFStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InsulationPFStatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InsulationPFStatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInsulationPFStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InsulationPFStatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveToWindingReference()
        {
            return ((ITypedElement)(((ModelElement)(WindingInsulation.ClassInstance)).Resolve("ToWinding")));
        }
        
        /// <summary>
        /// Raises the ToWindingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnToWindingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ToWindingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ToWindingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnToWindingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ToWindingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ToWinding property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetToWinding(object sender, System.EventArgs eventArgs)
        {
            this.ToWinding = null;
        }
        
        private static ITypedElement RetrieveGroundReference()
        {
            return ((ITypedElement)(((ModelElement)(WindingInsulation.ClassInstance)).Resolve("Ground")));
        }
        
        /// <summary>
        /// Raises the GroundChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGroundChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GroundChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GroundChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGroundChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GroundChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Ground property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetGround(object sender, System.EventArgs eventArgs)
        {
            this.Ground = null;
        }
        
        private static ITypedElement RetrieveTransformerObservationReference()
        {
            return ((ITypedElement)(((ModelElement)(WindingInsulation.ClassInstance)).Resolve("TransformerObservation")));
        }
        
        /// <summary>
        /// Raises the TransformerObservationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerObservationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerObservationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformerObservationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerObservationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerObservationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TransformerObservation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTransformerObservation(object sender, System.EventArgs eventArgs)
        {
            this.TransformerObservation = null;
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(WindingInsulation.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        private static ITypedElement RetrieveFromWindingReference()
        {
            return ((ITypedElement)(((ModelElement)(WindingInsulation.ClassInstance)).Resolve("FromWinding")));
        }
        
        /// <summary>
        /// Raises the FromWindingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromWindingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromWindingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromWindingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromWindingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromWindingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FromWinding property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFromWinding(object sender, System.EventArgs eventArgs)
        {
            this.FromWinding = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "INSULATIONRESISTANCE"))
            {
                return this.InsulationResistance;
            }
            if ((attribute == "LEAKAGEREACTANCE"))
            {
                return this.LeakageReactance;
            }
            if ((attribute == "INSULATIONPFSTATUS"))
            {
                return this.InsulationPFStatus;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TOWINDING"))
            {
                this.ToWinding = ((IDistributionTransformerWinding)(value));
                return;
            }
            if ((feature == "GROUND"))
            {
                this.Ground = ((IGround)(value));
                return;
            }
            if ((feature == "TRANSFORMEROBSERVATION"))
            {
                this.TransformerObservation = ((ITransformerObservation)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "FROMWINDING"))
            {
                this.FromWinding = ((IDistributionTransformerWinding)(value));
                return;
            }
            if ((feature == "INSULATIONRESISTANCE"))
            {
                this.InsulationResistance = ((string)(value));
                return;
            }
            if ((feature == "LEAKAGEREACTANCE"))
            {
                this.LeakageReactance = ((float)(value));
                return;
            }
            if ((feature == "INSULATIONPFSTATUS"))
            {
                this.InsulationPFStatus = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ToWinding"))
            {
                return new ToWindingProxy(this);
            }
            if ((attribute == "Ground"))
            {
                return new GroundProxy(this);
            }
            if ((attribute == "TransformerObservation"))
            {
                return new TransformerObservationProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((attribute == "FromWinding"))
            {
                return new FromWindingProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ToWinding"))
            {
                return new ToWindingProxy(this);
            }
            if ((reference == "Ground"))
            {
                return new GroundProxy(this);
            }
            if ((reference == "TransformerObservation"))
            {
                return new TransformerObservationProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((reference == "FromWinding"))
            {
                return new FromWindingProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Informative/InfAssets/Winding" +
                        "Insulation")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the WindingInsulation class
        /// </summary>
        public class WindingInsulationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private WindingInsulation _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public WindingInsulationReferencedElementsCollection(WindingInsulation parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ToWinding != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Ground != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TransformerObservation != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.FromWinding != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ToWindingChanged += this.PropagateValueChanges;
                this._parent.GroundChanged += this.PropagateValueChanges;
                this._parent.TransformerObservationChanged += this.PropagateValueChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.FromWindingChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ToWindingChanged -= this.PropagateValueChanges;
                this._parent.GroundChanged -= this.PropagateValueChanges;
                this._parent.TransformerObservationChanged -= this.PropagateValueChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.FromWindingChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ToWinding == null))
                {
                    IDistributionTransformerWinding toWindingCasted = item.As<IDistributionTransformerWinding>();
                    if ((toWindingCasted != null))
                    {
                        this._parent.ToWinding = toWindingCasted;
                        return;
                    }
                }
                if ((this._parent.Ground == null))
                {
                    IGround groundCasted = item.As<IGround>();
                    if ((groundCasted != null))
                    {
                        this._parent.Ground = groundCasted;
                        return;
                    }
                }
                if ((this._parent.TransformerObservation == null))
                {
                    ITransformerObservation transformerObservationCasted = item.As<ITransformerObservation>();
                    if ((transformerObservationCasted != null))
                    {
                        this._parent.TransformerObservation = transformerObservationCasted;
                        return;
                    }
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                if ((this._parent.FromWinding == null))
                {
                    IDistributionTransformerWinding fromWindingCasted = item.As<IDistributionTransformerWinding>();
                    if ((fromWindingCasted != null))
                    {
                        this._parent.FromWinding = fromWindingCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ToWinding = null;
                this._parent.Ground = null;
                this._parent.TransformerObservation = null;
                this._parent.Status = null;
                this._parent.FromWinding = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ToWinding))
                {
                    return true;
                }
                if ((item == this._parent.Ground))
                {
                    return true;
                }
                if ((item == this._parent.TransformerObservation))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if ((item == this._parent.FromWinding))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ToWinding != null))
                {
                    array[arrayIndex] = this._parent.ToWinding;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Ground != null))
                {
                    array[arrayIndex] = this._parent.Ground;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TransformerObservation != null))
                {
                    array[arrayIndex] = this._parent.TransformerObservation;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.FromWinding != null))
                {
                    array[arrayIndex] = this._parent.FromWinding;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ToWinding == item))
                {
                    this._parent.ToWinding = null;
                    return true;
                }
                if ((this._parent.Ground == item))
                {
                    this._parent.Ground = null;
                    return true;
                }
                if ((this._parent.TransformerObservation == item))
                {
                    this._parent.TransformerObservation = null;
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                if ((this._parent.FromWinding == item))
                {
                    this._parent.FromWinding = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ToWinding).Concat(this._parent.Ground).Concat(this._parent.TransformerObservation).Concat(this._parent.Status).Concat(this._parent.FromWinding).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the insulationResistance property
        /// </summary>
        private sealed class InsulationResistanceProxy : ModelPropertyChange<IWindingInsulation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InsulationResistanceProxy(IWindingInsulation modelElement) : 
                    base(modelElement, "insulationResistance")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.InsulationResistance;
                }
                set
                {
                    this.ModelElement.InsulationResistance = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the leakageReactance property
        /// </summary>
        private sealed class LeakageReactanceProxy : ModelPropertyChange<IWindingInsulation, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LeakageReactanceProxy(IWindingInsulation modelElement) : 
                    base(modelElement, "leakageReactance")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.LeakageReactance;
                }
                set
                {
                    this.ModelElement.LeakageReactance = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the insulationPFStatus property
        /// </summary>
        private sealed class InsulationPFStatusProxy : ModelPropertyChange<IWindingInsulation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InsulationPFStatusProxy(IWindingInsulation modelElement) : 
                    base(modelElement, "insulationPFStatus")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.InsulationPFStatus;
                }
                set
                {
                    this.ModelElement.InsulationPFStatus = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ToWinding property
        /// </summary>
        private sealed class ToWindingProxy : ModelPropertyChange<IWindingInsulation, IDistributionTransformerWinding>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ToWindingProxy(IWindingInsulation modelElement) : 
                    base(modelElement, "ToWinding")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDistributionTransformerWinding Value
            {
                get
                {
                    return this.ModelElement.ToWinding;
                }
                set
                {
                    this.ModelElement.ToWinding = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Ground property
        /// </summary>
        private sealed class GroundProxy : ModelPropertyChange<IWindingInsulation, IGround>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GroundProxy(IWindingInsulation modelElement) : 
                    base(modelElement, "Ground")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IGround Value
            {
                get
                {
                    return this.ModelElement.Ground;
                }
                set
                {
                    this.ModelElement.Ground = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TransformerObservation property
        /// </summary>
        private sealed class TransformerObservationProxy : ModelPropertyChange<IWindingInsulation, ITransformerObservation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformerObservationProxy(IWindingInsulation modelElement) : 
                    base(modelElement, "TransformerObservation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITransformerObservation Value
            {
                get
                {
                    return this.ModelElement.TransformerObservation;
                }
                set
                {
                    this.ModelElement.TransformerObservation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IWindingInsulation, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IWindingInsulation modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FromWinding property
        /// </summary>
        private sealed class FromWindingProxy : ModelPropertyChange<IWindingInsulation, IDistributionTransformerWinding>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromWindingProxy(IWindingInsulation modelElement) : 
                    base(modelElement, "FromWinding")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDistributionTransformerWinding Value
            {
                get
                {
                    return this.ModelElement.FromWinding;
                }
                set
                {
                    this.ModelElement.FromWinding = value;
                }
            }
        }
    }
}

