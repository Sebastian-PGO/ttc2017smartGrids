using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets
{
    
    
    /// <summary>
    /// The public interface for ConductorAsset
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ConductorAsset))]
    [XmlDefaultImplementationTypeAttribute(typeof(ConductorAsset))]
    public interface IConductorAsset : IModelElement, IAsset
    {
        
        /// <summary>
        /// The groundingMethod property
        /// </summary>
        string GroundingMethod
        {
            get;
            set;
        }
        
        /// <summary>
        /// The insulated property
        /// </summary>
        bool Insulated
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isHorizontal property
        /// </summary>
        bool IsHorizontal
        {
            get;
            set;
        }
        
        /// <summary>
        /// The CircuitSection property
        /// </summary>
        ICircuitSection CircuitSection
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ConductorSegment property
        /// </summary>
        IDistributionLineSegment ConductorSegment
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the GroundingMethod property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GroundingMethodChanging;
        
        /// <summary>
        /// Gets fired when the GroundingMethod property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GroundingMethodChanged;
        
        /// <summary>
        /// Gets fired before the Insulated property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InsulatedChanging;
        
        /// <summary>
        /// Gets fired when the Insulated property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InsulatedChanged;
        
        /// <summary>
        /// Gets fired before the IsHorizontal property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsHorizontalChanging;
        
        /// <summary>
        /// Gets fired when the IsHorizontal property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsHorizontalChanged;
        
        /// <summary>
        /// Gets fired before the CircuitSection property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CircuitSectionChanging;
        
        /// <summary>
        /// Gets fired when the CircuitSection property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CircuitSectionChanged;
        
        /// <summary>
        /// Gets fired before the ConductorSegment property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ConductorSegmentChanging;
        
        /// <summary>
        /// Gets fired when the ConductorSegment property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ConductorSegmentChanged;
    }
}

