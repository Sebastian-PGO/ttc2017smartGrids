using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Protection
{
    
    
    /// <summary>
    /// The public interface for CurrentRelay
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(CurrentRelay))]
    [XmlDefaultImplementationTypeAttribute(typeof(CurrentRelay))]
    public interface ICurrentRelay : IModelElement, IProtectionEquipment
    {
        
        /// <summary>
        /// The timeDelay1 property
        /// </summary>
        float TimeDelay1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The timeDelay2 property
        /// </summary>
        float TimeDelay2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The timeDelay3 property
        /// </summary>
        float TimeDelay3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The inverseTimeFlag property
        /// </summary>
        bool InverseTimeFlag
        {
            get;
            set;
        }
        
        /// <summary>
        /// The currentLimit3 property
        /// </summary>
        float CurrentLimit3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The currentLimit2 property
        /// </summary>
        float CurrentLimit2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The currentLimit1 property
        /// </summary>
        float CurrentLimit1
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the TimeDelay1 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TimeDelay1Changing;
        
        /// <summary>
        /// Gets fired when the TimeDelay1 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TimeDelay1Changed;
        
        /// <summary>
        /// Gets fired before the TimeDelay2 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TimeDelay2Changing;
        
        /// <summary>
        /// Gets fired when the TimeDelay2 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TimeDelay2Changed;
        
        /// <summary>
        /// Gets fired before the TimeDelay3 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TimeDelay3Changing;
        
        /// <summary>
        /// Gets fired when the TimeDelay3 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TimeDelay3Changed;
        
        /// <summary>
        /// Gets fired before the InverseTimeFlag property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InverseTimeFlagChanging;
        
        /// <summary>
        /// Gets fired when the InverseTimeFlag property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InverseTimeFlagChanged;
        
        /// <summary>
        /// Gets fired before the CurrentLimit3 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CurrentLimit3Changing;
        
        /// <summary>
        /// Gets fired when the CurrentLimit3 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CurrentLimit3Changed;
        
        /// <summary>
        /// Gets fired before the CurrentLimit2 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CurrentLimit2Changing;
        
        /// <summary>
        /// Gets fired when the CurrentLimit2 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CurrentLimit2Changed;
        
        /// <summary>
        /// Gets fired before the CurrentLimit1 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CurrentLimit1Changing;
        
        /// <summary>
        /// Gets fired when the CurrentLimit1 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CurrentLimit1Changed;
    }
}

