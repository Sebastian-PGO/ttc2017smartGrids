using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Protection
{
    
    
    /// <summary>
    /// The default implementation of the CurrentRelay class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Protection")]
    [XmlNamespacePrefixAttribute("cimProtection")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Protection/CurrentRelay")]
    [DebuggerDisplayAttribute("CurrentRelay {UUID}")]
    public partial class CurrentRelay : ProtectionEquipment, ICurrentRelay, IModelElement
    {
        
        /// <summary>
        /// The backing field for the TimeDelay1 property
        /// </summary>
        private float _timeDelay1;
        
        private static Lazy<ITypedElement> _timeDelay1Attribute = new Lazy<ITypedElement>(RetrieveTimeDelay1Attribute);
        
        /// <summary>
        /// The backing field for the TimeDelay2 property
        /// </summary>
        private float _timeDelay2;
        
        private static Lazy<ITypedElement> _timeDelay2Attribute = new Lazy<ITypedElement>(RetrieveTimeDelay2Attribute);
        
        /// <summary>
        /// The backing field for the TimeDelay3 property
        /// </summary>
        private float _timeDelay3;
        
        private static Lazy<ITypedElement> _timeDelay3Attribute = new Lazy<ITypedElement>(RetrieveTimeDelay3Attribute);
        
        /// <summary>
        /// The backing field for the InverseTimeFlag property
        /// </summary>
        private bool _inverseTimeFlag;
        
        private static Lazy<ITypedElement> _inverseTimeFlagAttribute = new Lazy<ITypedElement>(RetrieveInverseTimeFlagAttribute);
        
        /// <summary>
        /// The backing field for the CurrentLimit3 property
        /// </summary>
        private float _currentLimit3;
        
        private static Lazy<ITypedElement> _currentLimit3Attribute = new Lazy<ITypedElement>(RetrieveCurrentLimit3Attribute);
        
        /// <summary>
        /// The backing field for the CurrentLimit2 property
        /// </summary>
        private float _currentLimit2;
        
        private static Lazy<ITypedElement> _currentLimit2Attribute = new Lazy<ITypedElement>(RetrieveCurrentLimit2Attribute);
        
        /// <summary>
        /// The backing field for the CurrentLimit1 property
        /// </summary>
        private float _currentLimit1;
        
        private static Lazy<ITypedElement> _currentLimit1Attribute = new Lazy<ITypedElement>(RetrieveCurrentLimit1Attribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The timeDelay1 property
        /// </summary>
        [XmlElementNameAttribute("timeDelay1")]
        [XmlAttributeAttribute(true)]
        public virtual float TimeDelay1
        {
            get
            {
                return this._timeDelay1;
            }
            set
            {
                if ((this._timeDelay1 != value))
                {
                    float old = this._timeDelay1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeDelay1Changing(e);
                    this.OnPropertyChanging("TimeDelay1", e, _timeDelay1Attribute);
                    this._timeDelay1 = value;
                    this.OnTimeDelay1Changed(e);
                    this.OnPropertyChanged("TimeDelay1", e, _timeDelay1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The timeDelay2 property
        /// </summary>
        [XmlElementNameAttribute("timeDelay2")]
        [XmlAttributeAttribute(true)]
        public virtual float TimeDelay2
        {
            get
            {
                return this._timeDelay2;
            }
            set
            {
                if ((this._timeDelay2 != value))
                {
                    float old = this._timeDelay2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeDelay2Changing(e);
                    this.OnPropertyChanging("TimeDelay2", e, _timeDelay2Attribute);
                    this._timeDelay2 = value;
                    this.OnTimeDelay2Changed(e);
                    this.OnPropertyChanged("TimeDelay2", e, _timeDelay2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The timeDelay3 property
        /// </summary>
        [XmlElementNameAttribute("timeDelay3")]
        [XmlAttributeAttribute(true)]
        public virtual float TimeDelay3
        {
            get
            {
                return this._timeDelay3;
            }
            set
            {
                if ((this._timeDelay3 != value))
                {
                    float old = this._timeDelay3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeDelay3Changing(e);
                    this.OnPropertyChanging("TimeDelay3", e, _timeDelay3Attribute);
                    this._timeDelay3 = value;
                    this.OnTimeDelay3Changed(e);
                    this.OnPropertyChanged("TimeDelay3", e, _timeDelay3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The inverseTimeFlag property
        /// </summary>
        [XmlElementNameAttribute("inverseTimeFlag")]
        [XmlAttributeAttribute(true)]
        public virtual bool InverseTimeFlag
        {
            get
            {
                return this._inverseTimeFlag;
            }
            set
            {
                if ((this._inverseTimeFlag != value))
                {
                    bool old = this._inverseTimeFlag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInverseTimeFlagChanging(e);
                    this.OnPropertyChanging("InverseTimeFlag", e, _inverseTimeFlagAttribute);
                    this._inverseTimeFlag = value;
                    this.OnInverseTimeFlagChanged(e);
                    this.OnPropertyChanged("InverseTimeFlag", e, _inverseTimeFlagAttribute);
                }
            }
        }
        
        /// <summary>
        /// The currentLimit3 property
        /// </summary>
        [XmlElementNameAttribute("currentLimit3")]
        [XmlAttributeAttribute(true)]
        public virtual float CurrentLimit3
        {
            get
            {
                return this._currentLimit3;
            }
            set
            {
                if ((this._currentLimit3 != value))
                {
                    float old = this._currentLimit3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurrentLimit3Changing(e);
                    this.OnPropertyChanging("CurrentLimit3", e, _currentLimit3Attribute);
                    this._currentLimit3 = value;
                    this.OnCurrentLimit3Changed(e);
                    this.OnPropertyChanged("CurrentLimit3", e, _currentLimit3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The currentLimit2 property
        /// </summary>
        [XmlElementNameAttribute("currentLimit2")]
        [XmlAttributeAttribute(true)]
        public virtual float CurrentLimit2
        {
            get
            {
                return this._currentLimit2;
            }
            set
            {
                if ((this._currentLimit2 != value))
                {
                    float old = this._currentLimit2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurrentLimit2Changing(e);
                    this.OnPropertyChanging("CurrentLimit2", e, _currentLimit2Attribute);
                    this._currentLimit2 = value;
                    this.OnCurrentLimit2Changed(e);
                    this.OnPropertyChanged("CurrentLimit2", e, _currentLimit2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The currentLimit1 property
        /// </summary>
        [XmlElementNameAttribute("currentLimit1")]
        [XmlAttributeAttribute(true)]
        public virtual float CurrentLimit1
        {
            get
            {
                return this._currentLimit1;
            }
            set
            {
                if ((this._currentLimit1 != value))
                {
                    float old = this._currentLimit1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurrentLimit1Changing(e);
                    this.OnPropertyChanging("CurrentLimit1", e, _currentLimit1Attribute);
                    this._currentLimit1 = value;
                    this.OnCurrentLimit1Changed(e);
                    this.OnPropertyChanged("CurrentLimit1", e, _currentLimit1Attribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Protection/CurrentRelay")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the TimeDelay1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeDelay1Changing;
        
        /// <summary>
        /// Gets fired when the TimeDelay1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeDelay1Changed;
        
        /// <summary>
        /// Gets fired before the TimeDelay2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeDelay2Changing;
        
        /// <summary>
        /// Gets fired when the TimeDelay2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeDelay2Changed;
        
        /// <summary>
        /// Gets fired before the TimeDelay3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeDelay3Changing;
        
        /// <summary>
        /// Gets fired when the TimeDelay3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeDelay3Changed;
        
        /// <summary>
        /// Gets fired before the InverseTimeFlag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InverseTimeFlagChanging;
        
        /// <summary>
        /// Gets fired when the InverseTimeFlag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InverseTimeFlagChanged;
        
        /// <summary>
        /// Gets fired before the CurrentLimit3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentLimit3Changing;
        
        /// <summary>
        /// Gets fired when the CurrentLimit3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentLimit3Changed;
        
        /// <summary>
        /// Gets fired before the CurrentLimit2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentLimit2Changing;
        
        /// <summary>
        /// Gets fired when the CurrentLimit2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentLimit2Changed;
        
        /// <summary>
        /// Gets fired before the CurrentLimit1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentLimit1Changing;
        
        /// <summary>
        /// Gets fired when the CurrentLimit1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentLimit1Changed;
        
        private static ITypedElement RetrieveTimeDelay1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(CurrentRelay.ClassInstance)).Resolve("timeDelay1")));
        }
        
        /// <summary>
        /// Raises the TimeDelay1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeDelay1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeDelay1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeDelay1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeDelay1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeDelay1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTimeDelay2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(CurrentRelay.ClassInstance)).Resolve("timeDelay2")));
        }
        
        /// <summary>
        /// Raises the TimeDelay2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeDelay2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeDelay2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeDelay2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeDelay2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeDelay2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTimeDelay3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(CurrentRelay.ClassInstance)).Resolve("timeDelay3")));
        }
        
        /// <summary>
        /// Raises the TimeDelay3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeDelay3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeDelay3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeDelay3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeDelay3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeDelay3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveInverseTimeFlagAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CurrentRelay.ClassInstance)).Resolve("inverseTimeFlag")));
        }
        
        /// <summary>
        /// Raises the InverseTimeFlagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInverseTimeFlagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InverseTimeFlagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InverseTimeFlagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInverseTimeFlagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InverseTimeFlagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCurrentLimit3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(CurrentRelay.ClassInstance)).Resolve("currentLimit3")));
        }
        
        /// <summary>
        /// Raises the CurrentLimit3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentLimit3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentLimit3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentLimit3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentLimit3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentLimit3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCurrentLimit2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(CurrentRelay.ClassInstance)).Resolve("currentLimit2")));
        }
        
        /// <summary>
        /// Raises the CurrentLimit2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentLimit2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentLimit2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentLimit2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentLimit2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentLimit2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCurrentLimit1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(CurrentRelay.ClassInstance)).Resolve("currentLimit1")));
        }
        
        /// <summary>
        /// Raises the CurrentLimit1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentLimit1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentLimit1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentLimit1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentLimit1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentLimit1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TIMEDELAY1"))
            {
                return this.TimeDelay1;
            }
            if ((attribute == "TIMEDELAY2"))
            {
                return this.TimeDelay2;
            }
            if ((attribute == "TIMEDELAY3"))
            {
                return this.TimeDelay3;
            }
            if ((attribute == "INVERSETIMEFLAG"))
            {
                return this.InverseTimeFlag;
            }
            if ((attribute == "CURRENTLIMIT3"))
            {
                return this.CurrentLimit3;
            }
            if ((attribute == "CURRENTLIMIT2"))
            {
                return this.CurrentLimit2;
            }
            if ((attribute == "CURRENTLIMIT1"))
            {
                return this.CurrentLimit1;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TIMEDELAY1"))
            {
                this.TimeDelay1 = ((float)(value));
                return;
            }
            if ((feature == "TIMEDELAY2"))
            {
                this.TimeDelay2 = ((float)(value));
                return;
            }
            if ((feature == "TIMEDELAY3"))
            {
                this.TimeDelay3 = ((float)(value));
                return;
            }
            if ((feature == "INVERSETIMEFLAG"))
            {
                this.InverseTimeFlag = ((bool)(value));
                return;
            }
            if ((feature == "CURRENTLIMIT3"))
            {
                this.CurrentLimit3 = ((float)(value));
                return;
            }
            if ((feature == "CURRENTLIMIT2"))
            {
                this.CurrentLimit2 = ((float)(value));
                return;
            }
            if ((feature == "CURRENTLIMIT1"))
            {
                this.CurrentLimit1 = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Protection/CurrentRelay")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the timeDelay1 property
        /// </summary>
        private sealed class TimeDelay1Proxy : ModelPropertyChange<ICurrentRelay, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeDelay1Proxy(ICurrentRelay modelElement) : 
                    base(modelElement, "timeDelay1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TimeDelay1;
                }
                set
                {
                    this.ModelElement.TimeDelay1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the timeDelay2 property
        /// </summary>
        private sealed class TimeDelay2Proxy : ModelPropertyChange<ICurrentRelay, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeDelay2Proxy(ICurrentRelay modelElement) : 
                    base(modelElement, "timeDelay2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TimeDelay2;
                }
                set
                {
                    this.ModelElement.TimeDelay2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the timeDelay3 property
        /// </summary>
        private sealed class TimeDelay3Proxy : ModelPropertyChange<ICurrentRelay, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeDelay3Proxy(ICurrentRelay modelElement) : 
                    base(modelElement, "timeDelay3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TimeDelay3;
                }
                set
                {
                    this.ModelElement.TimeDelay3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the inverseTimeFlag property
        /// </summary>
        private sealed class InverseTimeFlagProxy : ModelPropertyChange<ICurrentRelay, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InverseTimeFlagProxy(ICurrentRelay modelElement) : 
                    base(modelElement, "inverseTimeFlag")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.InverseTimeFlag;
                }
                set
                {
                    this.ModelElement.InverseTimeFlag = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the currentLimit3 property
        /// </summary>
        private sealed class CurrentLimit3Proxy : ModelPropertyChange<ICurrentRelay, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurrentLimit3Proxy(ICurrentRelay modelElement) : 
                    base(modelElement, "currentLimit3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CurrentLimit3;
                }
                set
                {
                    this.ModelElement.CurrentLimit3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the currentLimit2 property
        /// </summary>
        private sealed class CurrentLimit2Proxy : ModelPropertyChange<ICurrentRelay, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurrentLimit2Proxy(ICurrentRelay modelElement) : 
                    base(modelElement, "currentLimit2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CurrentLimit2;
                }
                set
                {
                    this.ModelElement.CurrentLimit2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the currentLimit1 property
        /// </summary>
        private sealed class CurrentLimit1Proxy : ModelPropertyChange<ICurrentRelay, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurrentLimit1Proxy(ICurrentRelay modelElement) : 
                    base(modelElement, "currentLimit1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CurrentLimit1;
                }
                set
                {
                    this.ModelElement.CurrentLimit1 = value;
                }
            }
        }
    }
}

