//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;

namespace TTC2017.SmartGrids.CIM.IEC61970.Contingency
{
    
    
    /// <summary>
    /// The default implementation of the Contingency class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Contingency")]
    [XmlNamespacePrefixAttribute("cimContingency")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Contingency/Contingency")]
    [DebuggerDisplayAttribute("Contingency {UUID}")]
    public partial class Contingency : IdentifiedObject, IContingency, IModelElement
    {
        
        /// <summary>
        /// The backing field for the MustStudy property
        /// </summary>
        private bool _mustStudy;
        
        private static Lazy<ITypedElement> _mustStudyAttribute = new Lazy<ITypedElement>(RetrieveMustStudyAttribute);
        
        private static Lazy<ITypedElement> _contingencyConstraintLimitReference = new Lazy<ITypedElement>(RetrieveContingencyConstraintLimitReference);
        
        /// <summary>
        /// The backing field for the ContingencyConstraintLimit property
        /// </summary>
        private ContingencyContingencyConstraintLimitCollection _contingencyConstraintLimit;
        
        private static Lazy<ITypedElement> _contingencyElementReference = new Lazy<ITypedElement>(RetrieveContingencyElementReference);
        
        /// <summary>
        /// The backing field for the ContingencyElement property
        /// </summary>
        private ContingencyContingencyElementCollection _contingencyElement;
        
        private static IClass _classInstance;
        
        public Contingency()
        {
            this._contingencyConstraintLimit = new ContingencyContingencyConstraintLimitCollection(this);
            this._contingencyConstraintLimit.CollectionChanging += this.ContingencyConstraintLimitCollectionChanging;
            this._contingencyConstraintLimit.CollectionChanged += this.ContingencyConstraintLimitCollectionChanged;
            this._contingencyElement = new ContingencyContingencyElementCollection(this);
            this._contingencyElement.CollectionChanging += this.ContingencyElementCollectionChanging;
            this._contingencyElement.CollectionChanged += this.ContingencyElementCollectionChanged;
        }
        
        /// <summary>
        /// The mustStudy property
        /// </summary>
        [XmlElementNameAttribute("mustStudy")]
        [XmlAttributeAttribute(true)]
        public virtual bool MustStudy
        {
            get
            {
                return this._mustStudy;
            }
            set
            {
                if ((this._mustStudy != value))
                {
                    bool old = this._mustStudy;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMustStudyChanging(e);
                    this.OnPropertyChanging("MustStudy", e, _mustStudyAttribute);
                    this._mustStudy = value;
                    this.OnMustStudyChanged(e);
                    this.OnPropertyChanged("MustStudy", e, _mustStudyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ContingencyConstraintLimit property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Contingency")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IContingencyConstraintLimit> ContingencyConstraintLimit
        {
            get
            {
                return this._contingencyConstraintLimit;
            }
        }
        
        /// <summary>
        /// The ContingencyElement property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Contingency")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IContingencyElement> ContingencyElement
        {
            get
            {
                return this._contingencyElement;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ContingencyReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Contingency/Contingency")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the MustStudy property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MustStudyChanging;
        
        /// <summary>
        /// Gets fired when the MustStudy property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MustStudyChanged;
        
        private static ITypedElement RetrieveMustStudyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Contingency.ClassInstance)).Resolve("mustStudy")));
        }
        
        /// <summary>
        /// Raises the MustStudyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMustStudyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MustStudyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MustStudyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMustStudyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MustStudyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveContingencyConstraintLimitReference()
        {
            return ((ITypedElement)(((ModelElement)(Contingency.ClassInstance)).Resolve("ContingencyConstraintLimit")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ContingencyConstraintLimit property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ContingencyConstraintLimitCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ContingencyConstraintLimit", e, _contingencyConstraintLimitReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ContingencyConstraintLimit property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ContingencyConstraintLimitCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ContingencyConstraintLimit", e, _contingencyConstraintLimitReference);
        }
        
        private static ITypedElement RetrieveContingencyElementReference()
        {
            return ((ITypedElement)(((ModelElement)(Contingency.ClassInstance)).Resolve("ContingencyElement")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ContingencyElement property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ContingencyElementCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ContingencyElement", e, _contingencyElementReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ContingencyElement property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ContingencyElementCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ContingencyElement", e, _contingencyElementReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MUSTSTUDY"))
            {
                return this.MustStudy;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CONTINGENCYCONSTRAINTLIMIT"))
            {
                return this._contingencyConstraintLimit;
            }
            if ((feature == "CONTINGENCYELEMENT"))
            {
                return this._contingencyElement;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MUSTSTUDY"))
            {
                this.MustStudy = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Contingency/Contingency")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Contingency class
        /// </summary>
        public class ContingencyReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Contingency _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ContingencyReferencedElementsCollection(Contingency parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ContingencyConstraintLimit.Count);
                    count = (count + this._parent.ContingencyElement.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ContingencyConstraintLimit.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ContingencyElement.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ContingencyConstraintLimit.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ContingencyElement.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IContingencyConstraintLimit contingencyConstraintLimitCasted = item.As<IContingencyConstraintLimit>();
                if ((contingencyConstraintLimitCasted != null))
                {
                    this._parent.ContingencyConstraintLimit.Add(contingencyConstraintLimitCasted);
                }
                IContingencyElement contingencyElementCasted = item.As<IContingencyElement>();
                if ((contingencyElementCasted != null))
                {
                    this._parent.ContingencyElement.Add(contingencyElementCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ContingencyConstraintLimit.Clear();
                this._parent.ContingencyElement.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ContingencyConstraintLimit.Contains(item))
                {
                    return true;
                }
                if (this._parent.ContingencyElement.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> contingencyConstraintLimitEnumerator = this._parent.ContingencyConstraintLimit.GetEnumerator();
                try
                {
                    for (
                    ; contingencyConstraintLimitEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = contingencyConstraintLimitEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    contingencyConstraintLimitEnumerator.Dispose();
                }
                IEnumerator<IModelElement> contingencyElementEnumerator = this._parent.ContingencyElement.GetEnumerator();
                try
                {
                    for (
                    ; contingencyElementEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = contingencyElementEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    contingencyElementEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IContingencyConstraintLimit contingencyConstraintLimitItem = item.As<IContingencyConstraintLimit>();
                if (((contingencyConstraintLimitItem != null) 
                            && this._parent.ContingencyConstraintLimit.Remove(contingencyConstraintLimitItem)))
                {
                    return true;
                }
                IContingencyElement contingencyElementItem = item.As<IContingencyElement>();
                if (((contingencyElementItem != null) 
                            && this._parent.ContingencyElement.Remove(contingencyElementItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ContingencyConstraintLimit).Concat(this._parent.ContingencyElement).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the mustStudy property
        /// </summary>
        private sealed class MustStudyProxy : ModelPropertyChange<IContingency, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MustStudyProxy(IContingency modelElement) : 
                    base(modelElement, "mustStudy")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.MustStudy;
                }
                set
                {
                    this.ModelElement.MustStudy = value;
                }
            }
        }
    }
}

