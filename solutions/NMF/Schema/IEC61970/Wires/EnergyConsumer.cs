using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.LoadControl;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Wires
{
    
    
    /// <summary>
    /// The default implementation of the EnergyConsumer class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Wires")]
    [XmlNamespacePrefixAttribute("cimWires")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/EnergyConsumer")]
    [DebuggerDisplayAttribute("EnergyConsumer {UUID}")]
    public partial class EnergyConsumer : ConductingEquipment, IEnergyConsumer, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Pfixed property
        /// </summary>
        private float _pfixed;
        
        private static Lazy<ITypedElement> _pfixedAttribute = new Lazy<ITypedElement>(RetrievePfixedAttribute);
        
        /// <summary>
        /// The backing field for the QfixedPct property
        /// </summary>
        private float _qfixedPct;
        
        private static Lazy<ITypedElement> _qfixedPctAttribute = new Lazy<ITypedElement>(RetrieveQfixedPctAttribute);
        
        /// <summary>
        /// The backing field for the CustomerCount property
        /// </summary>
        private int _customerCount;
        
        private static Lazy<ITypedElement> _customerCountAttribute = new Lazy<ITypedElement>(RetrieveCustomerCountAttribute);
        
        /// <summary>
        /// The backing field for the PfixedPct property
        /// </summary>
        private float _pfixedPct;
        
        private static Lazy<ITypedElement> _pfixedPctAttribute = new Lazy<ITypedElement>(RetrievePfixedPctAttribute);
        
        /// <summary>
        /// The backing field for the Qfixed property
        /// </summary>
        private float _qfixed;
        
        private static Lazy<ITypedElement> _qfixedAttribute = new Lazy<ITypedElement>(RetrieveQfixedAttribute);
        
        private static Lazy<ITypedElement> _serviceDeliveryPointsReference = new Lazy<ITypedElement>(RetrieveServiceDeliveryPointsReference);
        
        /// <summary>
        /// The backing field for the ServiceDeliveryPoints property
        /// </summary>
        private EnergyConsumerServiceDeliveryPointsCollection _serviceDeliveryPoints;
        
        private static Lazy<ITypedElement> _powerCutZoneReference = new Lazy<ITypedElement>(RetrievePowerCutZoneReference);
        
        /// <summary>
        /// The backing field for the PowerCutZone property
        /// </summary>
        private IPowerCutZone _powerCutZone;
        
        private static Lazy<ITypedElement> _loadResponseReference = new Lazy<ITypedElement>(RetrieveLoadResponseReference);
        
        /// <summary>
        /// The backing field for the LoadResponse property
        /// </summary>
        private ILoadResponseCharacteristic _loadResponse;
        
        private static IClass _classInstance;
        
        public EnergyConsumer()
        {
            this._serviceDeliveryPoints = new EnergyConsumerServiceDeliveryPointsCollection(this);
            this._serviceDeliveryPoints.CollectionChanging += this.ServiceDeliveryPointsCollectionChanging;
            this._serviceDeliveryPoints.CollectionChanged += this.ServiceDeliveryPointsCollectionChanged;
        }
        
        /// <summary>
        /// The pfixed property
        /// </summary>
        [XmlElementNameAttribute("pfixed")]
        [XmlAttributeAttribute(true)]
        public virtual float Pfixed
        {
            get
            {
                return this._pfixed;
            }
            set
            {
                if ((this._pfixed != value))
                {
                    float old = this._pfixed;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPfixedChanging(e);
                    this.OnPropertyChanging("Pfixed", e, _pfixedAttribute);
                    this._pfixed = value;
                    this.OnPfixedChanged(e);
                    this.OnPropertyChanged("Pfixed", e, _pfixedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The qfixedPct property
        /// </summary>
        [XmlElementNameAttribute("qfixedPct")]
        [XmlAttributeAttribute(true)]
        public virtual float QfixedPct
        {
            get
            {
                return this._qfixedPct;
            }
            set
            {
                if ((this._qfixedPct != value))
                {
                    float old = this._qfixedPct;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQfixedPctChanging(e);
                    this.OnPropertyChanging("QfixedPct", e, _qfixedPctAttribute);
                    this._qfixedPct = value;
                    this.OnQfixedPctChanged(e);
                    this.OnPropertyChanged("QfixedPct", e, _qfixedPctAttribute);
                }
            }
        }
        
        /// <summary>
        /// The customerCount property
        /// </summary>
        [XmlElementNameAttribute("customerCount")]
        [XmlAttributeAttribute(true)]
        public virtual int CustomerCount
        {
            get
            {
                return this._customerCount;
            }
            set
            {
                if ((this._customerCount != value))
                {
                    int old = this._customerCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCustomerCountChanging(e);
                    this.OnPropertyChanging("CustomerCount", e, _customerCountAttribute);
                    this._customerCount = value;
                    this.OnCustomerCountChanged(e);
                    this.OnPropertyChanged("CustomerCount", e, _customerCountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The pfixedPct property
        /// </summary>
        [XmlElementNameAttribute("pfixedPct")]
        [XmlAttributeAttribute(true)]
        public virtual float PfixedPct
        {
            get
            {
                return this._pfixedPct;
            }
            set
            {
                if ((this._pfixedPct != value))
                {
                    float old = this._pfixedPct;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPfixedPctChanging(e);
                    this.OnPropertyChanging("PfixedPct", e, _pfixedPctAttribute);
                    this._pfixedPct = value;
                    this.OnPfixedPctChanged(e);
                    this.OnPropertyChanged("PfixedPct", e, _pfixedPctAttribute);
                }
            }
        }
        
        /// <summary>
        /// The qfixed property
        /// </summary>
        [XmlElementNameAttribute("qfixed")]
        [XmlAttributeAttribute(true)]
        public virtual float Qfixed
        {
            get
            {
                return this._qfixed;
            }
            set
            {
                if ((this._qfixed != value))
                {
                    float old = this._qfixed;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQfixedChanging(e);
                    this.OnPropertyChanging("Qfixed", e, _qfixedAttribute);
                    this._qfixed = value;
                    this.OnQfixedChanged(e);
                    this.OnPropertyChanged("Qfixed", e, _qfixedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ServiceDeliveryPoints property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EnergyConsumer")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IServiceDeliveryPoint> ServiceDeliveryPoints
        {
            get
            {
                return this._serviceDeliveryPoints;
            }
        }
        
        /// <summary>
        /// The PowerCutZone property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EnergyConsumers")]
        public virtual IPowerCutZone PowerCutZone
        {
            get
            {
                return this._powerCutZone;
            }
            set
            {
                if ((this._powerCutZone != value))
                {
                    IPowerCutZone old = this._powerCutZone;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPowerCutZoneChanging(e);
                    this.OnPropertyChanging("PowerCutZone", e, _powerCutZoneReference);
                    this._powerCutZone = value;
                    if ((old != null))
                    {
                        old.EnergyConsumers.Remove(this);
                        old.Deleted -= this.OnResetPowerCutZone;
                    }
                    if ((value != null))
                    {
                        value.EnergyConsumers.Add(this);
                        value.Deleted += this.OnResetPowerCutZone;
                    }
                    this.OnPowerCutZoneChanged(e);
                    this.OnPropertyChanged("PowerCutZone", e, _powerCutZoneReference);
                }
            }
        }
        
        /// <summary>
        /// The LoadResponse property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EnergyConsumer")]
        public virtual ILoadResponseCharacteristic LoadResponse
        {
            get
            {
                return this._loadResponse;
            }
            set
            {
                if ((this._loadResponse != value))
                {
                    ILoadResponseCharacteristic old = this._loadResponse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLoadResponseChanging(e);
                    this.OnPropertyChanging("LoadResponse", e, _loadResponseReference);
                    this._loadResponse = value;
                    if ((old != null))
                    {
                        old.EnergyConsumer.Remove(this);
                        old.Deleted -= this.OnResetLoadResponse;
                    }
                    if ((value != null))
                    {
                        value.EnergyConsumer.Add(this);
                        value.Deleted += this.OnResetLoadResponse;
                    }
                    this.OnLoadResponseChanged(e);
                    this.OnPropertyChanged("LoadResponse", e, _loadResponseReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new EnergyConsumerReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/EnergyConsumer")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Pfixed property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PfixedChanging;
        
        /// <summary>
        /// Gets fired when the Pfixed property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PfixedChanged;
        
        /// <summary>
        /// Gets fired before the QfixedPct property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QfixedPctChanging;
        
        /// <summary>
        /// Gets fired when the QfixedPct property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QfixedPctChanged;
        
        /// <summary>
        /// Gets fired before the CustomerCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerCountChanging;
        
        /// <summary>
        /// Gets fired when the CustomerCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerCountChanged;
        
        /// <summary>
        /// Gets fired before the PfixedPct property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PfixedPctChanging;
        
        /// <summary>
        /// Gets fired when the PfixedPct property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PfixedPctChanged;
        
        /// <summary>
        /// Gets fired before the Qfixed property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QfixedChanging;
        
        /// <summary>
        /// Gets fired when the Qfixed property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QfixedChanged;
        
        /// <summary>
        /// Gets fired before the PowerCutZone property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerCutZoneChanging;
        
        /// <summary>
        /// Gets fired when the PowerCutZone property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerCutZoneChanged;
        
        /// <summary>
        /// Gets fired before the LoadResponse property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoadResponseChanging;
        
        /// <summary>
        /// Gets fired when the LoadResponse property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoadResponseChanged;
        
        private static ITypedElement RetrievePfixedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EnergyConsumer.ClassInstance)).Resolve("pfixed")));
        }
        
        /// <summary>
        /// Raises the PfixedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPfixedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PfixedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PfixedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPfixedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PfixedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveQfixedPctAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EnergyConsumer.ClassInstance)).Resolve("qfixedPct")));
        }
        
        /// <summary>
        /// Raises the QfixedPctChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQfixedPctChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QfixedPctChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QfixedPctChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQfixedPctChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QfixedPctChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCustomerCountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EnergyConsumer.ClassInstance)).Resolve("customerCount")));
        }
        
        /// <summary>
        /// Raises the CustomerCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CustomerCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePfixedPctAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EnergyConsumer.ClassInstance)).Resolve("pfixedPct")));
        }
        
        /// <summary>
        /// Raises the PfixedPctChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPfixedPctChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PfixedPctChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PfixedPctChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPfixedPctChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PfixedPctChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveQfixedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EnergyConsumer.ClassInstance)).Resolve("qfixed")));
        }
        
        /// <summary>
        /// Raises the QfixedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQfixedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QfixedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QfixedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQfixedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QfixedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveServiceDeliveryPointsReference()
        {
            return ((ITypedElement)(((ModelElement)(EnergyConsumer.ClassInstance)).Resolve("ServiceDeliveryPoints")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ServiceDeliveryPoints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ServiceDeliveryPointsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ServiceDeliveryPoints", e, _serviceDeliveryPointsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ServiceDeliveryPoints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ServiceDeliveryPointsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ServiceDeliveryPoints", e, _serviceDeliveryPointsReference);
        }
        
        private static ITypedElement RetrievePowerCutZoneReference()
        {
            return ((ITypedElement)(((ModelElement)(EnergyConsumer.ClassInstance)).Resolve("PowerCutZone")));
        }
        
        /// <summary>
        /// Raises the PowerCutZoneChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerCutZoneChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerCutZoneChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerCutZoneChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerCutZoneChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerCutZoneChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PowerCutZone property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPowerCutZone(object sender, System.EventArgs eventArgs)
        {
            this.PowerCutZone = null;
        }
        
        private static ITypedElement RetrieveLoadResponseReference()
        {
            return ((ITypedElement)(((ModelElement)(EnergyConsumer.ClassInstance)).Resolve("LoadResponse")));
        }
        
        /// <summary>
        /// Raises the LoadResponseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoadResponseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoadResponseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LoadResponseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoadResponseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoadResponseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LoadResponse property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLoadResponse(object sender, System.EventArgs eventArgs)
        {
            this.LoadResponse = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PFIXED"))
            {
                return this.Pfixed;
            }
            if ((attribute == "QFIXEDPCT"))
            {
                return this.QfixedPct;
            }
            if ((attribute == "CUSTOMERCOUNT"))
            {
                return this.CustomerCount;
            }
            if ((attribute == "PFIXEDPCT"))
            {
                return this.PfixedPct;
            }
            if ((attribute == "QFIXED"))
            {
                return this.Qfixed;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SERVICEDELIVERYPOINTS"))
            {
                return this._serviceDeliveryPoints;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "POWERCUTZONE"))
            {
                this.PowerCutZone = ((IPowerCutZone)(value));
                return;
            }
            if ((feature == "LOADRESPONSE"))
            {
                this.LoadResponse = ((ILoadResponseCharacteristic)(value));
                return;
            }
            if ((feature == "PFIXED"))
            {
                this.Pfixed = ((float)(value));
                return;
            }
            if ((feature == "QFIXEDPCT"))
            {
                this.QfixedPct = ((float)(value));
                return;
            }
            if ((feature == "CUSTOMERCOUNT"))
            {
                this.CustomerCount = ((int)(value));
                return;
            }
            if ((feature == "PFIXEDPCT"))
            {
                this.PfixedPct = ((float)(value));
                return;
            }
            if ((feature == "QFIXED"))
            {
                this.Qfixed = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "PowerCutZone"))
            {
                return new PowerCutZoneProxy(this);
            }
            if ((attribute == "LoadResponse"))
            {
                return new LoadResponseProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PowerCutZone"))
            {
                return new PowerCutZoneProxy(this);
            }
            if ((reference == "LoadResponse"))
            {
                return new LoadResponseProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/EnergyConsumer")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EnergyConsumer class
        /// </summary>
        public class EnergyConsumerReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EnergyConsumer _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EnergyConsumerReferencedElementsCollection(EnergyConsumer parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ServiceDeliveryPoints.Count);
                    if ((this._parent.PowerCutZone != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LoadResponse != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ServiceDeliveryPoints.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PowerCutZoneChanged += this.PropagateValueChanges;
                this._parent.LoadResponseChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ServiceDeliveryPoints.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PowerCutZoneChanged -= this.PropagateValueChanges;
                this._parent.LoadResponseChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IServiceDeliveryPoint serviceDeliveryPointsCasted = item.As<IServiceDeliveryPoint>();
                if ((serviceDeliveryPointsCasted != null))
                {
                    this._parent.ServiceDeliveryPoints.Add(serviceDeliveryPointsCasted);
                }
                if ((this._parent.PowerCutZone == null))
                {
                    IPowerCutZone powerCutZoneCasted = item.As<IPowerCutZone>();
                    if ((powerCutZoneCasted != null))
                    {
                        this._parent.PowerCutZone = powerCutZoneCasted;
                        return;
                    }
                }
                if ((this._parent.LoadResponse == null))
                {
                    ILoadResponseCharacteristic loadResponseCasted = item.As<ILoadResponseCharacteristic>();
                    if ((loadResponseCasted != null))
                    {
                        this._parent.LoadResponse = loadResponseCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ServiceDeliveryPoints.Clear();
                this._parent.PowerCutZone = null;
                this._parent.LoadResponse = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ServiceDeliveryPoints.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.PowerCutZone))
                {
                    return true;
                }
                if ((item == this._parent.LoadResponse))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> serviceDeliveryPointsEnumerator = this._parent.ServiceDeliveryPoints.GetEnumerator();
                try
                {
                    for (
                    ; serviceDeliveryPointsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = serviceDeliveryPointsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    serviceDeliveryPointsEnumerator.Dispose();
                }
                if ((this._parent.PowerCutZone != null))
                {
                    array[arrayIndex] = this._parent.PowerCutZone;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LoadResponse != null))
                {
                    array[arrayIndex] = this._parent.LoadResponse;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IServiceDeliveryPoint serviceDeliveryPointItem = item.As<IServiceDeliveryPoint>();
                if (((serviceDeliveryPointItem != null) 
                            && this._parent.ServiceDeliveryPoints.Remove(serviceDeliveryPointItem)))
                {
                    return true;
                }
                if ((this._parent.PowerCutZone == item))
                {
                    this._parent.PowerCutZone = null;
                    return true;
                }
                if ((this._parent.LoadResponse == item))
                {
                    this._parent.LoadResponse = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ServiceDeliveryPoints).Concat(this._parent.PowerCutZone).Concat(this._parent.LoadResponse).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pfixed property
        /// </summary>
        private sealed class PfixedProxy : ModelPropertyChange<IEnergyConsumer, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PfixedProxy(IEnergyConsumer modelElement) : 
                    base(modelElement, "pfixed")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Pfixed;
                }
                set
                {
                    this.ModelElement.Pfixed = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the qfixedPct property
        /// </summary>
        private sealed class QfixedPctProxy : ModelPropertyChange<IEnergyConsumer, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QfixedPctProxy(IEnergyConsumer modelElement) : 
                    base(modelElement, "qfixedPct")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.QfixedPct;
                }
                set
                {
                    this.ModelElement.QfixedPct = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the customerCount property
        /// </summary>
        private sealed class CustomerCountProxy : ModelPropertyChange<IEnergyConsumer, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CustomerCountProxy(IEnergyConsumer modelElement) : 
                    base(modelElement, "customerCount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.CustomerCount;
                }
                set
                {
                    this.ModelElement.CustomerCount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pfixedPct property
        /// </summary>
        private sealed class PfixedPctProxy : ModelPropertyChange<IEnergyConsumer, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PfixedPctProxy(IEnergyConsumer modelElement) : 
                    base(modelElement, "pfixedPct")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PfixedPct;
                }
                set
                {
                    this.ModelElement.PfixedPct = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the qfixed property
        /// </summary>
        private sealed class QfixedProxy : ModelPropertyChange<IEnergyConsumer, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QfixedProxy(IEnergyConsumer modelElement) : 
                    base(modelElement, "qfixed")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Qfixed;
                }
                set
                {
                    this.ModelElement.Qfixed = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PowerCutZone property
        /// </summary>
        private sealed class PowerCutZoneProxy : ModelPropertyChange<IEnergyConsumer, IPowerCutZone>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PowerCutZoneProxy(IEnergyConsumer modelElement) : 
                    base(modelElement, "PowerCutZone")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPowerCutZone Value
            {
                get
                {
                    return this.ModelElement.PowerCutZone;
                }
                set
                {
                    this.ModelElement.PowerCutZone = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LoadResponse property
        /// </summary>
        private sealed class LoadResponseProxy : ModelPropertyChange<IEnergyConsumer, ILoadResponseCharacteristic>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LoadResponseProxy(IEnergyConsumer modelElement) : 
                    base(modelElement, "LoadResponse")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ILoadResponseCharacteristic Value
            {
                get
                {
                    return this.ModelElement.LoadResponse;
                }
                set
                {
                    this.ModelElement.LoadResponse = value;
                }
            }
        }
    }
}

