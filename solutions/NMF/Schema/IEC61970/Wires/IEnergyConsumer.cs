//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.LoadControl;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Wires
{
    
    
    /// <summary>
    /// The public interface for EnergyConsumer
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(EnergyConsumer))]
    [XmlDefaultImplementationTypeAttribute(typeof(EnergyConsumer))]
    public interface IEnergyConsumer : IModelElement, IConductingEquipment
    {
        
        /// <summary>
        /// The pfixed property
        /// </summary>
        float Pfixed
        {
            get;
            set;
        }
        
        /// <summary>
        /// The qfixedPct property
        /// </summary>
        float QfixedPct
        {
            get;
            set;
        }
        
        /// <summary>
        /// The customerCount property
        /// </summary>
        int CustomerCount
        {
            get;
            set;
        }
        
        /// <summary>
        /// The pfixedPct property
        /// </summary>
        float PfixedPct
        {
            get;
            set;
        }
        
        /// <summary>
        /// The qfixed property
        /// </summary>
        float Qfixed
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ServiceDeliveryPoints property
        /// </summary>
        IOrderedSetExpression<IServiceDeliveryPoint> ServiceDeliveryPoints
        {
            get;
        }
        
        /// <summary>
        /// The PowerCutZone property
        /// </summary>
        IPowerCutZone PowerCutZone
        {
            get;
            set;
        }
        
        /// <summary>
        /// The LoadResponse property
        /// </summary>
        ILoadResponseCharacteristic LoadResponse
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Pfixed property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PfixedChanging;
        
        /// <summary>
        /// Gets fired when the Pfixed property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PfixedChanged;
        
        /// <summary>
        /// Gets fired before the QfixedPct property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> QfixedPctChanging;
        
        /// <summary>
        /// Gets fired when the QfixedPct property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> QfixedPctChanged;
        
        /// <summary>
        /// Gets fired before the CustomerCount property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CustomerCountChanging;
        
        /// <summary>
        /// Gets fired when the CustomerCount property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CustomerCountChanged;
        
        /// <summary>
        /// Gets fired before the PfixedPct property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PfixedPctChanging;
        
        /// <summary>
        /// Gets fired when the PfixedPct property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PfixedPctChanged;
        
        /// <summary>
        /// Gets fired before the Qfixed property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> QfixedChanging;
        
        /// <summary>
        /// Gets fired when the Qfixed property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> QfixedChanged;
        
        /// <summary>
        /// Gets fired before the PowerCutZone property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PowerCutZoneChanging;
        
        /// <summary>
        /// Gets fired when the PowerCutZone property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PowerCutZoneChanged;
        
        /// <summary>
        /// Gets fired before the LoadResponse property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LoadResponseChanging;
        
        /// <summary>
        /// Gets fired when the LoadResponse property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LoadResponseChanged;
    }
}

