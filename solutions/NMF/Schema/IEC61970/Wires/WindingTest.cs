//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.LoadControl;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Wires
{
    
    
    /// <summary>
    /// The default implementation of the WindingTest class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Wires")]
    [XmlNamespacePrefixAttribute("cimWires")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/WindingTest")]
    [DebuggerDisplayAttribute("WindingTest {UUID}")]
    public partial class WindingTest : IdentifiedObject, IWindingTest, IModelElement
    {
        
        /// <summary>
        /// The backing field for the FromTapStep property
        /// </summary>
        private int _fromTapStep;
        
        private static Lazy<ITypedElement> _fromTapStepAttribute = new Lazy<ITypedElement>(RetrieveFromTapStepAttribute);
        
        /// <summary>
        /// The backing field for the LeakageImpedance property
        /// </summary>
        private float _leakageImpedance;
        
        private static Lazy<ITypedElement> _leakageImpedanceAttribute = new Lazy<ITypedElement>(RetrieveLeakageImpedanceAttribute);
        
        /// <summary>
        /// The backing field for the NoLoadLoss property
        /// </summary>
        private float _noLoadLoss;
        
        private static Lazy<ITypedElement> _noLoadLossAttribute = new Lazy<ITypedElement>(RetrieveNoLoadLossAttribute);
        
        /// <summary>
        /// The backing field for the PhaseShift property
        /// </summary>
        private float _phaseShift;
        
        private static Lazy<ITypedElement> _phaseShiftAttribute = new Lazy<ITypedElement>(RetrievePhaseShiftAttribute);
        
        /// <summary>
        /// The backing field for the LoadLoss property
        /// </summary>
        private float _loadLoss;
        
        private static Lazy<ITypedElement> _loadLossAttribute = new Lazy<ITypedElement>(RetrieveLoadLossAttribute);
        
        /// <summary>
        /// The backing field for the ToTapStep property
        /// </summary>
        private int _toTapStep;
        
        private static Lazy<ITypedElement> _toTapStepAttribute = new Lazy<ITypedElement>(RetrieveToTapStepAttribute);
        
        /// <summary>
        /// The backing field for the Voltage property
        /// </summary>
        private float _voltage;
        
        private static Lazy<ITypedElement> _voltageAttribute = new Lazy<ITypedElement>(RetrieveVoltageAttribute);
        
        /// <summary>
        /// The backing field for the ExcitingCurrent property
        /// </summary>
        private float _excitingCurrent;
        
        private static Lazy<ITypedElement> _excitingCurrentAttribute = new Lazy<ITypedElement>(RetrieveExcitingCurrentAttribute);
        
        private static Lazy<ITypedElement> _from_TransformerWindingReference = new Lazy<ITypedElement>(RetrieveFrom_TransformerWindingReference);
        
        /// <summary>
        /// The backing field for the From_TransformerWinding property
        /// </summary>
        private ITransformerWinding _from_TransformerWinding;
        
        private static Lazy<ITypedElement> _to_TransformerWindingReference = new Lazy<ITypedElement>(RetrieveTo_TransformerWindingReference);
        
        /// <summary>
        /// The backing field for the To_TransformerWinding property
        /// </summary>
        private ITransformerWinding _to_TransformerWinding;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The fromTapStep property
        /// </summary>
        [XmlElementNameAttribute("fromTapStep")]
        [XmlAttributeAttribute(true)]
        public virtual int FromTapStep
        {
            get
            {
                return this._fromTapStep;
            }
            set
            {
                if ((this._fromTapStep != value))
                {
                    int old = this._fromTapStep;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFromTapStepChanging(e);
                    this.OnPropertyChanging("FromTapStep", e, _fromTapStepAttribute);
                    this._fromTapStep = value;
                    this.OnFromTapStepChanged(e);
                    this.OnPropertyChanged("FromTapStep", e, _fromTapStepAttribute);
                }
            }
        }
        
        /// <summary>
        /// The leakageImpedance property
        /// </summary>
        [XmlElementNameAttribute("leakageImpedance")]
        [XmlAttributeAttribute(true)]
        public virtual float LeakageImpedance
        {
            get
            {
                return this._leakageImpedance;
            }
            set
            {
                if ((this._leakageImpedance != value))
                {
                    float old = this._leakageImpedance;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLeakageImpedanceChanging(e);
                    this.OnPropertyChanging("LeakageImpedance", e, _leakageImpedanceAttribute);
                    this._leakageImpedance = value;
                    this.OnLeakageImpedanceChanged(e);
                    this.OnPropertyChanged("LeakageImpedance", e, _leakageImpedanceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The noLoadLoss property
        /// </summary>
        [XmlElementNameAttribute("noLoadLoss")]
        [XmlAttributeAttribute(true)]
        public virtual float NoLoadLoss
        {
            get
            {
                return this._noLoadLoss;
            }
            set
            {
                if ((this._noLoadLoss != value))
                {
                    float old = this._noLoadLoss;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNoLoadLossChanging(e);
                    this.OnPropertyChanging("NoLoadLoss", e, _noLoadLossAttribute);
                    this._noLoadLoss = value;
                    this.OnNoLoadLossChanged(e);
                    this.OnPropertyChanged("NoLoadLoss", e, _noLoadLossAttribute);
                }
            }
        }
        
        /// <summary>
        /// The phaseShift property
        /// </summary>
        [XmlElementNameAttribute("phaseShift")]
        [XmlAttributeAttribute(true)]
        public virtual float PhaseShift
        {
            get
            {
                return this._phaseShift;
            }
            set
            {
                if ((this._phaseShift != value))
                {
                    float old = this._phaseShift;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhaseShiftChanging(e);
                    this.OnPropertyChanging("PhaseShift", e, _phaseShiftAttribute);
                    this._phaseShift = value;
                    this.OnPhaseShiftChanged(e);
                    this.OnPropertyChanged("PhaseShift", e, _phaseShiftAttribute);
                }
            }
        }
        
        /// <summary>
        /// The loadLoss property
        /// </summary>
        [XmlElementNameAttribute("loadLoss")]
        [XmlAttributeAttribute(true)]
        public virtual float LoadLoss
        {
            get
            {
                return this._loadLoss;
            }
            set
            {
                if ((this._loadLoss != value))
                {
                    float old = this._loadLoss;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLoadLossChanging(e);
                    this.OnPropertyChanging("LoadLoss", e, _loadLossAttribute);
                    this._loadLoss = value;
                    this.OnLoadLossChanged(e);
                    this.OnPropertyChanged("LoadLoss", e, _loadLossAttribute);
                }
            }
        }
        
        /// <summary>
        /// The toTapStep property
        /// </summary>
        [XmlElementNameAttribute("toTapStep")]
        [XmlAttributeAttribute(true)]
        public virtual int ToTapStep
        {
            get
            {
                return this._toTapStep;
            }
            set
            {
                if ((this._toTapStep != value))
                {
                    int old = this._toTapStep;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnToTapStepChanging(e);
                    this.OnPropertyChanging("ToTapStep", e, _toTapStepAttribute);
                    this._toTapStep = value;
                    this.OnToTapStepChanged(e);
                    this.OnPropertyChanged("ToTapStep", e, _toTapStepAttribute);
                }
            }
        }
        
        /// <summary>
        /// The voltage property
        /// </summary>
        [XmlElementNameAttribute("voltage")]
        [XmlAttributeAttribute(true)]
        public virtual float Voltage
        {
            get
            {
                return this._voltage;
            }
            set
            {
                if ((this._voltage != value))
                {
                    float old = this._voltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageChanging(e);
                    this.OnPropertyChanging("Voltage", e, _voltageAttribute);
                    this._voltage = value;
                    this.OnVoltageChanged(e);
                    this.OnPropertyChanged("Voltage", e, _voltageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The excitingCurrent property
        /// </summary>
        [XmlElementNameAttribute("excitingCurrent")]
        [XmlAttributeAttribute(true)]
        public virtual float ExcitingCurrent
        {
            get
            {
                return this._excitingCurrent;
            }
            set
            {
                if ((this._excitingCurrent != value))
                {
                    float old = this._excitingCurrent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnExcitingCurrentChanging(e);
                    this.OnPropertyChanging("ExcitingCurrent", e, _excitingCurrentAttribute);
                    this._excitingCurrent = value;
                    this.OnExcitingCurrentChanged(e);
                    this.OnPropertyChanged("ExcitingCurrent", e, _excitingCurrentAttribute);
                }
            }
        }
        
        /// <summary>
        /// The From_TransformerWinding property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("From_WindingTest")]
        public virtual ITransformerWinding From_TransformerWinding
        {
            get
            {
                return this._from_TransformerWinding;
            }
            set
            {
                if ((this._from_TransformerWinding != value))
                {
                    ITransformerWinding old = this._from_TransformerWinding;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFrom_TransformerWindingChanging(e);
                    this.OnPropertyChanging("From_TransformerWinding", e, _from_TransformerWindingReference);
                    this._from_TransformerWinding = value;
                    if ((old != null))
                    {
                        old.From_WindingTest.Remove(this);
                        old.Deleted -= this.OnResetFrom_TransformerWinding;
                    }
                    if ((value != null))
                    {
                        value.From_WindingTest.Add(this);
                        value.Deleted += this.OnResetFrom_TransformerWinding;
                    }
                    this.OnFrom_TransformerWindingChanged(e);
                    this.OnPropertyChanged("From_TransformerWinding", e, _from_TransformerWindingReference);
                }
            }
        }
        
        /// <summary>
        /// The To_TransformerWinding property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("To_WindingTest")]
        public virtual ITransformerWinding To_TransformerWinding
        {
            get
            {
                return this._to_TransformerWinding;
            }
            set
            {
                if ((this._to_TransformerWinding != value))
                {
                    ITransformerWinding old = this._to_TransformerWinding;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTo_TransformerWindingChanging(e);
                    this.OnPropertyChanging("To_TransformerWinding", e, _to_TransformerWindingReference);
                    this._to_TransformerWinding = value;
                    if ((old != null))
                    {
                        old.To_WindingTest.Remove(this);
                        old.Deleted -= this.OnResetTo_TransformerWinding;
                    }
                    if ((value != null))
                    {
                        value.To_WindingTest.Add(this);
                        value.Deleted += this.OnResetTo_TransformerWinding;
                    }
                    this.OnTo_TransformerWindingChanged(e);
                    this.OnPropertyChanged("To_TransformerWinding", e, _to_TransformerWindingReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new WindingTestReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/WindingTest")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the FromTapStep property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromTapStepChanging;
        
        /// <summary>
        /// Gets fired when the FromTapStep property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FromTapStepChanged;
        
        /// <summary>
        /// Gets fired before the LeakageImpedance property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LeakageImpedanceChanging;
        
        /// <summary>
        /// Gets fired when the LeakageImpedance property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LeakageImpedanceChanged;
        
        /// <summary>
        /// Gets fired before the NoLoadLoss property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NoLoadLossChanging;
        
        /// <summary>
        /// Gets fired when the NoLoadLoss property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NoLoadLossChanged;
        
        /// <summary>
        /// Gets fired before the PhaseShift property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseShiftChanging;
        
        /// <summary>
        /// Gets fired when the PhaseShift property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseShiftChanged;
        
        /// <summary>
        /// Gets fired before the LoadLoss property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoadLossChanging;
        
        /// <summary>
        /// Gets fired when the LoadLoss property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoadLossChanged;
        
        /// <summary>
        /// Gets fired before the ToTapStep property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ToTapStepChanging;
        
        /// <summary>
        /// Gets fired when the ToTapStep property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ToTapStepChanged;
        
        /// <summary>
        /// Gets fired before the Voltage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageChanging;
        
        /// <summary>
        /// Gets fired when the Voltage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageChanged;
        
        /// <summary>
        /// Gets fired before the ExcitingCurrent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExcitingCurrentChanging;
        
        /// <summary>
        /// Gets fired when the ExcitingCurrent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExcitingCurrentChanged;
        
        /// <summary>
        /// Gets fired before the From_TransformerWinding property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> From_TransformerWindingChanging;
        
        /// <summary>
        /// Gets fired when the From_TransformerWinding property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> From_TransformerWindingChanged;
        
        /// <summary>
        /// Gets fired before the To_TransformerWinding property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> To_TransformerWindingChanging;
        
        /// <summary>
        /// Gets fired when the To_TransformerWinding property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> To_TransformerWindingChanged;
        
        private static ITypedElement RetrieveFromTapStepAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WindingTest.ClassInstance)).Resolve("fromTapStep")));
        }
        
        /// <summary>
        /// Raises the FromTapStepChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromTapStepChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromTapStepChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FromTapStepChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFromTapStepChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FromTapStepChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLeakageImpedanceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WindingTest.ClassInstance)).Resolve("leakageImpedance")));
        }
        
        /// <summary>
        /// Raises the LeakageImpedanceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLeakageImpedanceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LeakageImpedanceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LeakageImpedanceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLeakageImpedanceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LeakageImpedanceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNoLoadLossAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WindingTest.ClassInstance)).Resolve("noLoadLoss")));
        }
        
        /// <summary>
        /// Raises the NoLoadLossChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNoLoadLossChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NoLoadLossChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NoLoadLossChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNoLoadLossChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NoLoadLossChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePhaseShiftAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WindingTest.ClassInstance)).Resolve("phaseShift")));
        }
        
        /// <summary>
        /// Raises the PhaseShiftChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseShiftChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseShiftChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhaseShiftChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseShiftChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseShiftChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLoadLossAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WindingTest.ClassInstance)).Resolve("loadLoss")));
        }
        
        /// <summary>
        /// Raises the LoadLossChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoadLossChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoadLossChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LoadLossChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoadLossChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoadLossChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveToTapStepAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WindingTest.ClassInstance)).Resolve("toTapStep")));
        }
        
        /// <summary>
        /// Raises the ToTapStepChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnToTapStepChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ToTapStepChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ToTapStepChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnToTapStepChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ToTapStepChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVoltageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WindingTest.ClassInstance)).Resolve("voltage")));
        }
        
        /// <summary>
        /// Raises the VoltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveExcitingCurrentAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WindingTest.ClassInstance)).Resolve("excitingCurrent")));
        }
        
        /// <summary>
        /// Raises the ExcitingCurrentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExcitingCurrentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExcitingCurrentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ExcitingCurrentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExcitingCurrentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExcitingCurrentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFrom_TransformerWindingReference()
        {
            return ((ITypedElement)(((ModelElement)(WindingTest.ClassInstance)).Resolve("From_TransformerWinding")));
        }
        
        /// <summary>
        /// Raises the From_TransformerWindingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrom_TransformerWindingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.From_TransformerWindingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the From_TransformerWindingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrom_TransformerWindingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.From_TransformerWindingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the From_TransformerWinding property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFrom_TransformerWinding(object sender, System.EventArgs eventArgs)
        {
            this.From_TransformerWinding = null;
        }
        
        private static ITypedElement RetrieveTo_TransformerWindingReference()
        {
            return ((ITypedElement)(((ModelElement)(WindingTest.ClassInstance)).Resolve("To_TransformerWinding")));
        }
        
        /// <summary>
        /// Raises the To_TransformerWindingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTo_TransformerWindingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.To_TransformerWindingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the To_TransformerWindingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTo_TransformerWindingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.To_TransformerWindingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the To_TransformerWinding property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTo_TransformerWinding(object sender, System.EventArgs eventArgs)
        {
            this.To_TransformerWinding = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "FROMTAPSTEP"))
            {
                return this.FromTapStep;
            }
            if ((attribute == "LEAKAGEIMPEDANCE"))
            {
                return this.LeakageImpedance;
            }
            if ((attribute == "NOLOADLOSS"))
            {
                return this.NoLoadLoss;
            }
            if ((attribute == "PHASESHIFT"))
            {
                return this.PhaseShift;
            }
            if ((attribute == "LOADLOSS"))
            {
                return this.LoadLoss;
            }
            if ((attribute == "TOTAPSTEP"))
            {
                return this.ToTapStep;
            }
            if ((attribute == "VOLTAGE"))
            {
                return this.Voltage;
            }
            if ((attribute == "EXCITINGCURRENT"))
            {
                return this.ExcitingCurrent;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FROM_TRANSFORMERWINDING"))
            {
                this.From_TransformerWinding = ((ITransformerWinding)(value));
                return;
            }
            if ((feature == "TO_TRANSFORMERWINDING"))
            {
                this.To_TransformerWinding = ((ITransformerWinding)(value));
                return;
            }
            if ((feature == "FROMTAPSTEP"))
            {
                this.FromTapStep = ((int)(value));
                return;
            }
            if ((feature == "LEAKAGEIMPEDANCE"))
            {
                this.LeakageImpedance = ((float)(value));
                return;
            }
            if ((feature == "NOLOADLOSS"))
            {
                this.NoLoadLoss = ((float)(value));
                return;
            }
            if ((feature == "PHASESHIFT"))
            {
                this.PhaseShift = ((float)(value));
                return;
            }
            if ((feature == "LOADLOSS"))
            {
                this.LoadLoss = ((float)(value));
                return;
            }
            if ((feature == "TOTAPSTEP"))
            {
                this.ToTapStep = ((int)(value));
                return;
            }
            if ((feature == "VOLTAGE"))
            {
                this.Voltage = ((float)(value));
                return;
            }
            if ((feature == "EXCITINGCURRENT"))
            {
                this.ExcitingCurrent = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "From_TransformerWinding"))
            {
                return new From_TransformerWindingProxy(this);
            }
            if ((attribute == "To_TransformerWinding"))
            {
                return new To_TransformerWindingProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "From_TransformerWinding"))
            {
                return new From_TransformerWindingProxy(this);
            }
            if ((reference == "To_TransformerWinding"))
            {
                return new To_TransformerWindingProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/WindingTest")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the WindingTest class
        /// </summary>
        public class WindingTestReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private WindingTest _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public WindingTestReferencedElementsCollection(WindingTest parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.From_TransformerWinding != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.To_TransformerWinding != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.From_TransformerWindingChanged += this.PropagateValueChanges;
                this._parent.To_TransformerWindingChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.From_TransformerWindingChanged -= this.PropagateValueChanges;
                this._parent.To_TransformerWindingChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.From_TransformerWinding == null))
                {
                    ITransformerWinding from_TransformerWindingCasted = item.As<ITransformerWinding>();
                    if ((from_TransformerWindingCasted != null))
                    {
                        this._parent.From_TransformerWinding = from_TransformerWindingCasted;
                        return;
                    }
                }
                if ((this._parent.To_TransformerWinding == null))
                {
                    ITransformerWinding to_TransformerWindingCasted = item.As<ITransformerWinding>();
                    if ((to_TransformerWindingCasted != null))
                    {
                        this._parent.To_TransformerWinding = to_TransformerWindingCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.From_TransformerWinding = null;
                this._parent.To_TransformerWinding = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.From_TransformerWinding))
                {
                    return true;
                }
                if ((item == this._parent.To_TransformerWinding))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.From_TransformerWinding != null))
                {
                    array[arrayIndex] = this._parent.From_TransformerWinding;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.To_TransformerWinding != null))
                {
                    array[arrayIndex] = this._parent.To_TransformerWinding;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.From_TransformerWinding == item))
                {
                    this._parent.From_TransformerWinding = null;
                    return true;
                }
                if ((this._parent.To_TransformerWinding == item))
                {
                    this._parent.To_TransformerWinding = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.From_TransformerWinding).Concat(this._parent.To_TransformerWinding).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fromTapStep property
        /// </summary>
        private sealed class FromTapStepProxy : ModelPropertyChange<IWindingTest, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FromTapStepProxy(IWindingTest modelElement) : 
                    base(modelElement, "fromTapStep")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.FromTapStep;
                }
                set
                {
                    this.ModelElement.FromTapStep = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the leakageImpedance property
        /// </summary>
        private sealed class LeakageImpedanceProxy : ModelPropertyChange<IWindingTest, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LeakageImpedanceProxy(IWindingTest modelElement) : 
                    base(modelElement, "leakageImpedance")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.LeakageImpedance;
                }
                set
                {
                    this.ModelElement.LeakageImpedance = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the noLoadLoss property
        /// </summary>
        private sealed class NoLoadLossProxy : ModelPropertyChange<IWindingTest, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NoLoadLossProxy(IWindingTest modelElement) : 
                    base(modelElement, "noLoadLoss")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NoLoadLoss;
                }
                set
                {
                    this.ModelElement.NoLoadLoss = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phaseShift property
        /// </summary>
        private sealed class PhaseShiftProxy : ModelPropertyChange<IWindingTest, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhaseShiftProxy(IWindingTest modelElement) : 
                    base(modelElement, "phaseShift")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PhaseShift;
                }
                set
                {
                    this.ModelElement.PhaseShift = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the loadLoss property
        /// </summary>
        private sealed class LoadLossProxy : ModelPropertyChange<IWindingTest, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LoadLossProxy(IWindingTest modelElement) : 
                    base(modelElement, "loadLoss")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.LoadLoss;
                }
                set
                {
                    this.ModelElement.LoadLoss = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the toTapStep property
        /// </summary>
        private sealed class ToTapStepProxy : ModelPropertyChange<IWindingTest, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ToTapStepProxy(IWindingTest modelElement) : 
                    base(modelElement, "toTapStep")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.ToTapStep;
                }
                set
                {
                    this.ModelElement.ToTapStep = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the voltage property
        /// </summary>
        private sealed class VoltageProxy : ModelPropertyChange<IWindingTest, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageProxy(IWindingTest modelElement) : 
                    base(modelElement, "voltage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Voltage;
                }
                set
                {
                    this.ModelElement.Voltage = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the excitingCurrent property
        /// </summary>
        private sealed class ExcitingCurrentProxy : ModelPropertyChange<IWindingTest, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ExcitingCurrentProxy(IWindingTest modelElement) : 
                    base(modelElement, "excitingCurrent")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ExcitingCurrent;
                }
                set
                {
                    this.ModelElement.ExcitingCurrent = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the From_TransformerWinding property
        /// </summary>
        private sealed class From_TransformerWindingProxy : ModelPropertyChange<IWindingTest, ITransformerWinding>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public From_TransformerWindingProxy(IWindingTest modelElement) : 
                    base(modelElement, "From_TransformerWinding")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITransformerWinding Value
            {
                get
                {
                    return this.ModelElement.From_TransformerWinding;
                }
                set
                {
                    this.ModelElement.From_TransformerWinding = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the To_TransformerWinding property
        /// </summary>
        private sealed class To_TransformerWindingProxy : ModelPropertyChange<IWindingTest, ITransformerWinding>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public To_TransformerWindingProxy(IWindingTest modelElement) : 
                    base(modelElement, "To_TransformerWinding")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITransformerWinding Value
            {
                get
                {
                    return this.ModelElement.To_TransformerWinding;
                }
                set
                {
                    this.ModelElement.To_TransformerWinding = value;
                }
            }
        }
    }
}

