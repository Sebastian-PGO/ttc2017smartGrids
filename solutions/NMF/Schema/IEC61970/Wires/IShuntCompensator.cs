using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.LoadControl;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Wires
{
    
    
    /// <summary>
    /// The public interface for ShuntCompensator
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ShuntCompensator))]
    [XmlDefaultImplementationTypeAttribute(typeof(ShuntCompensator))]
    public interface IShuntCompensator : IModelElement, IRegulatingCondEq
    {
        
        /// <summary>
        /// The normalSections property
        /// </summary>
        int NormalSections
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minU property
        /// </summary>
        float MinU
        {
            get;
            set;
        }
        
        /// <summary>
        /// The b0PerSection property
        /// </summary>
        float B0PerSection
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nomQ property
        /// </summary>
        float NomQ
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nomU property
        /// </summary>
        float NomU
        {
            get;
            set;
        }
        
        /// <summary>
        /// The maximumSections property
        /// </summary>
        int MaximumSections
        {
            get;
            set;
        }
        
        /// <summary>
        /// The switchOnCount property
        /// </summary>
        int SwitchOnCount
        {
            get;
            set;
        }
        
        /// <summary>
        /// The maxU property
        /// </summary>
        float MaxU
        {
            get;
            set;
        }
        
        /// <summary>
        /// The bPerSection property
        /// </summary>
        float BPerSection
        {
            get;
            set;
        }
        
        /// <summary>
        /// The gPerSection property
        /// </summary>
        float GPerSection
        {
            get;
            set;
        }
        
        /// <summary>
        /// The switchOnDate property
        /// </summary>
        DateTime SwitchOnDate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The aVRDelay property
        /// </summary>
        float AVRDelay
        {
            get;
            set;
        }
        
        /// <summary>
        /// The voltageSensitivity property
        /// </summary>
        float VoltageSensitivity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The g0PerSection property
        /// </summary>
        float G0PerSection
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reactivePerSection property
        /// </summary>
        float ReactivePerSection
        {
            get;
            set;
        }
        
        /// <summary>
        /// The SvShuntCompensatorSections property
        /// </summary>
        ISvShuntCompensatorSections SvShuntCompensatorSections
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the NormalSections property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NormalSectionsChanging;
        
        /// <summary>
        /// Gets fired when the NormalSections property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NormalSectionsChanged;
        
        /// <summary>
        /// Gets fired before the MinU property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinUChanging;
        
        /// <summary>
        /// Gets fired when the MinU property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinUChanged;
        
        /// <summary>
        /// Gets fired before the B0PerSection property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> B0PerSectionChanging;
        
        /// <summary>
        /// Gets fired when the B0PerSection property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> B0PerSectionChanged;
        
        /// <summary>
        /// Gets fired before the NomQ property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NomQChanging;
        
        /// <summary>
        /// Gets fired when the NomQ property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NomQChanged;
        
        /// <summary>
        /// Gets fired before the NomU property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NomUChanging;
        
        /// <summary>
        /// Gets fired when the NomU property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NomUChanged;
        
        /// <summary>
        /// Gets fired before the MaximumSections property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaximumSectionsChanging;
        
        /// <summary>
        /// Gets fired when the MaximumSections property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaximumSectionsChanged;
        
        /// <summary>
        /// Gets fired before the SwitchOnCount property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SwitchOnCountChanging;
        
        /// <summary>
        /// Gets fired when the SwitchOnCount property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SwitchOnCountChanged;
        
        /// <summary>
        /// Gets fired before the MaxU property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxUChanging;
        
        /// <summary>
        /// Gets fired when the MaxU property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxUChanged;
        
        /// <summary>
        /// Gets fired before the BPerSection property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BPerSectionChanging;
        
        /// <summary>
        /// Gets fired when the BPerSection property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BPerSectionChanged;
        
        /// <summary>
        /// Gets fired before the GPerSection property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GPerSectionChanging;
        
        /// <summary>
        /// Gets fired when the GPerSection property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GPerSectionChanged;
        
        /// <summary>
        /// Gets fired before the SwitchOnDate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SwitchOnDateChanging;
        
        /// <summary>
        /// Gets fired when the SwitchOnDate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SwitchOnDateChanged;
        
        /// <summary>
        /// Gets fired before the AVRDelay property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AVRDelayChanging;
        
        /// <summary>
        /// Gets fired when the AVRDelay property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AVRDelayChanged;
        
        /// <summary>
        /// Gets fired before the VoltageSensitivity property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VoltageSensitivityChanging;
        
        /// <summary>
        /// Gets fired when the VoltageSensitivity property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VoltageSensitivityChanged;
        
        /// <summary>
        /// Gets fired before the G0PerSection property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> G0PerSectionChanging;
        
        /// <summary>
        /// Gets fired when the G0PerSection property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> G0PerSectionChanged;
        
        /// <summary>
        /// Gets fired before the ReactivePerSection property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReactivePerSectionChanging;
        
        /// <summary>
        /// Gets fired when the ReactivePerSection property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReactivePerSectionChanged;
        
        /// <summary>
        /// Gets fired before the SvShuntCompensatorSections property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SvShuntCompensatorSectionsChanging;
        
        /// <summary>
        /// Gets fired when the SvShuntCompensatorSections property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SvShuntCompensatorSectionsChanged;
    }
}

