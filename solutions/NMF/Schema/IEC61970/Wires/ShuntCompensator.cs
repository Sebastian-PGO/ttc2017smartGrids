//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.LoadControl;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Wires
{
    
    
    /// <summary>
    /// The default implementation of the ShuntCompensator class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Wires")]
    [XmlNamespacePrefixAttribute("cimWires")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/ShuntCompensator")]
    [DebuggerDisplayAttribute("ShuntCompensator {UUID}")]
    public partial class ShuntCompensator : RegulatingCondEq, IShuntCompensator, IModelElement
    {
        
        /// <summary>
        /// The backing field for the NormalSections property
        /// </summary>
        private int _normalSections;
        
        private static Lazy<ITypedElement> _normalSectionsAttribute = new Lazy<ITypedElement>(RetrieveNormalSectionsAttribute);
        
        /// <summary>
        /// The backing field for the MinU property
        /// </summary>
        private float _minU;
        
        private static Lazy<ITypedElement> _minUAttribute = new Lazy<ITypedElement>(RetrieveMinUAttribute);
        
        /// <summary>
        /// The backing field for the B0PerSection property
        /// </summary>
        private float _b0PerSection;
        
        private static Lazy<ITypedElement> _b0PerSectionAttribute = new Lazy<ITypedElement>(RetrieveB0PerSectionAttribute);
        
        /// <summary>
        /// The backing field for the NomQ property
        /// </summary>
        private float _nomQ;
        
        private static Lazy<ITypedElement> _nomQAttribute = new Lazy<ITypedElement>(RetrieveNomQAttribute);
        
        /// <summary>
        /// The backing field for the NomU property
        /// </summary>
        private float _nomU;
        
        private static Lazy<ITypedElement> _nomUAttribute = new Lazy<ITypedElement>(RetrieveNomUAttribute);
        
        /// <summary>
        /// The backing field for the MaximumSections property
        /// </summary>
        private int _maximumSections;
        
        private static Lazy<ITypedElement> _maximumSectionsAttribute = new Lazy<ITypedElement>(RetrieveMaximumSectionsAttribute);
        
        /// <summary>
        /// The backing field for the SwitchOnCount property
        /// </summary>
        private int _switchOnCount;
        
        private static Lazy<ITypedElement> _switchOnCountAttribute = new Lazy<ITypedElement>(RetrieveSwitchOnCountAttribute);
        
        /// <summary>
        /// The backing field for the MaxU property
        /// </summary>
        private float _maxU;
        
        private static Lazy<ITypedElement> _maxUAttribute = new Lazy<ITypedElement>(RetrieveMaxUAttribute);
        
        /// <summary>
        /// The backing field for the BPerSection property
        /// </summary>
        private float _bPerSection;
        
        private static Lazy<ITypedElement> _bPerSectionAttribute = new Lazy<ITypedElement>(RetrieveBPerSectionAttribute);
        
        /// <summary>
        /// The backing field for the GPerSection property
        /// </summary>
        private float _gPerSection;
        
        private static Lazy<ITypedElement> _gPerSectionAttribute = new Lazy<ITypedElement>(RetrieveGPerSectionAttribute);
        
        /// <summary>
        /// The backing field for the SwitchOnDate property
        /// </summary>
        private DateTime _switchOnDate;
        
        private static Lazy<ITypedElement> _switchOnDateAttribute = new Lazy<ITypedElement>(RetrieveSwitchOnDateAttribute);
        
        /// <summary>
        /// The backing field for the AVRDelay property
        /// </summary>
        private float _aVRDelay;
        
        private static Lazy<ITypedElement> _aVRDelayAttribute = new Lazy<ITypedElement>(RetrieveAVRDelayAttribute);
        
        /// <summary>
        /// The backing field for the VoltageSensitivity property
        /// </summary>
        private float _voltageSensitivity;
        
        private static Lazy<ITypedElement> _voltageSensitivityAttribute = new Lazy<ITypedElement>(RetrieveVoltageSensitivityAttribute);
        
        /// <summary>
        /// The backing field for the G0PerSection property
        /// </summary>
        private float _g0PerSection;
        
        private static Lazy<ITypedElement> _g0PerSectionAttribute = new Lazy<ITypedElement>(RetrieveG0PerSectionAttribute);
        
        /// <summary>
        /// The backing field for the ReactivePerSection property
        /// </summary>
        private float _reactivePerSection;
        
        private static Lazy<ITypedElement> _reactivePerSectionAttribute = new Lazy<ITypedElement>(RetrieveReactivePerSectionAttribute);
        
        private static Lazy<ITypedElement> _svShuntCompensatorSectionsReference = new Lazy<ITypedElement>(RetrieveSvShuntCompensatorSectionsReference);
        
        /// <summary>
        /// The backing field for the SvShuntCompensatorSections property
        /// </summary>
        private ISvShuntCompensatorSections _svShuntCompensatorSections;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The normalSections property
        /// </summary>
        [XmlElementNameAttribute("normalSections")]
        [XmlAttributeAttribute(true)]
        public virtual int NormalSections
        {
            get
            {
                return this._normalSections;
            }
            set
            {
                if ((this._normalSections != value))
                {
                    int old = this._normalSections;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNormalSectionsChanging(e);
                    this.OnPropertyChanging("NormalSections", e, _normalSectionsAttribute);
                    this._normalSections = value;
                    this.OnNormalSectionsChanged(e);
                    this.OnPropertyChanged("NormalSections", e, _normalSectionsAttribute);
                }
            }
        }
        
        /// <summary>
        /// The minU property
        /// </summary>
        [XmlElementNameAttribute("minU")]
        [XmlAttributeAttribute(true)]
        public virtual float MinU
        {
            get
            {
                return this._minU;
            }
            set
            {
                if ((this._minU != value))
                {
                    float old = this._minU;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinUChanging(e);
                    this.OnPropertyChanging("MinU", e, _minUAttribute);
                    this._minU = value;
                    this.OnMinUChanged(e);
                    this.OnPropertyChanged("MinU", e, _minUAttribute);
                }
            }
        }
        
        /// <summary>
        /// The b0PerSection property
        /// </summary>
        [XmlElementNameAttribute("b0PerSection")]
        [XmlAttributeAttribute(true)]
        public virtual float B0PerSection
        {
            get
            {
                return this._b0PerSection;
            }
            set
            {
                if ((this._b0PerSection != value))
                {
                    float old = this._b0PerSection;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnB0PerSectionChanging(e);
                    this.OnPropertyChanging("B0PerSection", e, _b0PerSectionAttribute);
                    this._b0PerSection = value;
                    this.OnB0PerSectionChanged(e);
                    this.OnPropertyChanged("B0PerSection", e, _b0PerSectionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The nomQ property
        /// </summary>
        [XmlElementNameAttribute("nomQ")]
        [XmlAttributeAttribute(true)]
        public virtual float NomQ
        {
            get
            {
                return this._nomQ;
            }
            set
            {
                if ((this._nomQ != value))
                {
                    float old = this._nomQ;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNomQChanging(e);
                    this.OnPropertyChanging("NomQ", e, _nomQAttribute);
                    this._nomQ = value;
                    this.OnNomQChanged(e);
                    this.OnPropertyChanged("NomQ", e, _nomQAttribute);
                }
            }
        }
        
        /// <summary>
        /// The nomU property
        /// </summary>
        [XmlElementNameAttribute("nomU")]
        [XmlAttributeAttribute(true)]
        public virtual float NomU
        {
            get
            {
                return this._nomU;
            }
            set
            {
                if ((this._nomU != value))
                {
                    float old = this._nomU;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNomUChanging(e);
                    this.OnPropertyChanging("NomU", e, _nomUAttribute);
                    this._nomU = value;
                    this.OnNomUChanged(e);
                    this.OnPropertyChanged("NomU", e, _nomUAttribute);
                }
            }
        }
        
        /// <summary>
        /// The maximumSections property
        /// </summary>
        [XmlElementNameAttribute("maximumSections")]
        [XmlAttributeAttribute(true)]
        public virtual int MaximumSections
        {
            get
            {
                return this._maximumSections;
            }
            set
            {
                if ((this._maximumSections != value))
                {
                    int old = this._maximumSections;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaximumSectionsChanging(e);
                    this.OnPropertyChanging("MaximumSections", e, _maximumSectionsAttribute);
                    this._maximumSections = value;
                    this.OnMaximumSectionsChanged(e);
                    this.OnPropertyChanged("MaximumSections", e, _maximumSectionsAttribute);
                }
            }
        }
        
        /// <summary>
        /// The switchOnCount property
        /// </summary>
        [XmlElementNameAttribute("switchOnCount")]
        [XmlAttributeAttribute(true)]
        public virtual int SwitchOnCount
        {
            get
            {
                return this._switchOnCount;
            }
            set
            {
                if ((this._switchOnCount != value))
                {
                    int old = this._switchOnCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSwitchOnCountChanging(e);
                    this.OnPropertyChanging("SwitchOnCount", e, _switchOnCountAttribute);
                    this._switchOnCount = value;
                    this.OnSwitchOnCountChanged(e);
                    this.OnPropertyChanged("SwitchOnCount", e, _switchOnCountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The maxU property
        /// </summary>
        [XmlElementNameAttribute("maxU")]
        [XmlAttributeAttribute(true)]
        public virtual float MaxU
        {
            get
            {
                return this._maxU;
            }
            set
            {
                if ((this._maxU != value))
                {
                    float old = this._maxU;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxUChanging(e);
                    this.OnPropertyChanging("MaxU", e, _maxUAttribute);
                    this._maxU = value;
                    this.OnMaxUChanged(e);
                    this.OnPropertyChanged("MaxU", e, _maxUAttribute);
                }
            }
        }
        
        /// <summary>
        /// The bPerSection property
        /// </summary>
        [XmlElementNameAttribute("bPerSection")]
        [XmlAttributeAttribute(true)]
        public virtual float BPerSection
        {
            get
            {
                return this._bPerSection;
            }
            set
            {
                if ((this._bPerSection != value))
                {
                    float old = this._bPerSection;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBPerSectionChanging(e);
                    this.OnPropertyChanging("BPerSection", e, _bPerSectionAttribute);
                    this._bPerSection = value;
                    this.OnBPerSectionChanged(e);
                    this.OnPropertyChanged("BPerSection", e, _bPerSectionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The gPerSection property
        /// </summary>
        [XmlElementNameAttribute("gPerSection")]
        [XmlAttributeAttribute(true)]
        public virtual float GPerSection
        {
            get
            {
                return this._gPerSection;
            }
            set
            {
                if ((this._gPerSection != value))
                {
                    float old = this._gPerSection;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGPerSectionChanging(e);
                    this.OnPropertyChanging("GPerSection", e, _gPerSectionAttribute);
                    this._gPerSection = value;
                    this.OnGPerSectionChanged(e);
                    this.OnPropertyChanged("GPerSection", e, _gPerSectionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The switchOnDate property
        /// </summary>
        [XmlElementNameAttribute("switchOnDate")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime SwitchOnDate
        {
            get
            {
                return this._switchOnDate;
            }
            set
            {
                if ((this._switchOnDate != value))
                {
                    DateTime old = this._switchOnDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSwitchOnDateChanging(e);
                    this.OnPropertyChanging("SwitchOnDate", e, _switchOnDateAttribute);
                    this._switchOnDate = value;
                    this.OnSwitchOnDateChanged(e);
                    this.OnPropertyChanged("SwitchOnDate", e, _switchOnDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The aVRDelay property
        /// </summary>
        [XmlElementNameAttribute("aVRDelay")]
        [XmlAttributeAttribute(true)]
        public virtual float AVRDelay
        {
            get
            {
                return this._aVRDelay;
            }
            set
            {
                if ((this._aVRDelay != value))
                {
                    float old = this._aVRDelay;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAVRDelayChanging(e);
                    this.OnPropertyChanging("AVRDelay", e, _aVRDelayAttribute);
                    this._aVRDelay = value;
                    this.OnAVRDelayChanged(e);
                    this.OnPropertyChanged("AVRDelay", e, _aVRDelayAttribute);
                }
            }
        }
        
        /// <summary>
        /// The voltageSensitivity property
        /// </summary>
        [XmlElementNameAttribute("voltageSensitivity")]
        [XmlAttributeAttribute(true)]
        public virtual float VoltageSensitivity
        {
            get
            {
                return this._voltageSensitivity;
            }
            set
            {
                if ((this._voltageSensitivity != value))
                {
                    float old = this._voltageSensitivity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageSensitivityChanging(e);
                    this.OnPropertyChanging("VoltageSensitivity", e, _voltageSensitivityAttribute);
                    this._voltageSensitivity = value;
                    this.OnVoltageSensitivityChanged(e);
                    this.OnPropertyChanged("VoltageSensitivity", e, _voltageSensitivityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The g0PerSection property
        /// </summary>
        [XmlElementNameAttribute("g0PerSection")]
        [XmlAttributeAttribute(true)]
        public virtual float G0PerSection
        {
            get
            {
                return this._g0PerSection;
            }
            set
            {
                if ((this._g0PerSection != value))
                {
                    float old = this._g0PerSection;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnG0PerSectionChanging(e);
                    this.OnPropertyChanging("G0PerSection", e, _g0PerSectionAttribute);
                    this._g0PerSection = value;
                    this.OnG0PerSectionChanged(e);
                    this.OnPropertyChanged("G0PerSection", e, _g0PerSectionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The reactivePerSection property
        /// </summary>
        [XmlElementNameAttribute("reactivePerSection")]
        [XmlAttributeAttribute(true)]
        public virtual float ReactivePerSection
        {
            get
            {
                return this._reactivePerSection;
            }
            set
            {
                if ((this._reactivePerSection != value))
                {
                    float old = this._reactivePerSection;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReactivePerSectionChanging(e);
                    this.OnPropertyChanging("ReactivePerSection", e, _reactivePerSectionAttribute);
                    this._reactivePerSection = value;
                    this.OnReactivePerSectionChanged(e);
                    this.OnPropertyChanged("ReactivePerSection", e, _reactivePerSectionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The SvShuntCompensatorSections property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ShuntCompensator")]
        public virtual ISvShuntCompensatorSections SvShuntCompensatorSections
        {
            get
            {
                return this._svShuntCompensatorSections;
            }
            set
            {
                if ((this._svShuntCompensatorSections != value))
                {
                    ISvShuntCompensatorSections old = this._svShuntCompensatorSections;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSvShuntCompensatorSectionsChanging(e);
                    this.OnPropertyChanging("SvShuntCompensatorSections", e, _svShuntCompensatorSectionsReference);
                    this._svShuntCompensatorSections = value;
                    if ((old != null))
                    {
                        old.ShuntCompensator = null;
                        old.Deleted -= this.OnResetSvShuntCompensatorSections;
                    }
                    if ((value != null))
                    {
                        value.ShuntCompensator = this;
                        value.Deleted += this.OnResetSvShuntCompensatorSections;
                    }
                    this.OnSvShuntCompensatorSectionsChanged(e);
                    this.OnPropertyChanged("SvShuntCompensatorSections", e, _svShuntCompensatorSectionsReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ShuntCompensatorReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/ShuntCompensator")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the NormalSections property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormalSectionsChanging;
        
        /// <summary>
        /// Gets fired when the NormalSections property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormalSectionsChanged;
        
        /// <summary>
        /// Gets fired before the MinU property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinUChanging;
        
        /// <summary>
        /// Gets fired when the MinU property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinUChanged;
        
        /// <summary>
        /// Gets fired before the B0PerSection property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> B0PerSectionChanging;
        
        /// <summary>
        /// Gets fired when the B0PerSection property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> B0PerSectionChanged;
        
        /// <summary>
        /// Gets fired before the NomQ property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NomQChanging;
        
        /// <summary>
        /// Gets fired when the NomQ property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NomQChanged;
        
        /// <summary>
        /// Gets fired before the NomU property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NomUChanging;
        
        /// <summary>
        /// Gets fired when the NomU property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NomUChanged;
        
        /// <summary>
        /// Gets fired before the MaximumSections property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaximumSectionsChanging;
        
        /// <summary>
        /// Gets fired when the MaximumSections property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaximumSectionsChanged;
        
        /// <summary>
        /// Gets fired before the SwitchOnCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwitchOnCountChanging;
        
        /// <summary>
        /// Gets fired when the SwitchOnCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwitchOnCountChanged;
        
        /// <summary>
        /// Gets fired before the MaxU property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxUChanging;
        
        /// <summary>
        /// Gets fired when the MaxU property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxUChanged;
        
        /// <summary>
        /// Gets fired before the BPerSection property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BPerSectionChanging;
        
        /// <summary>
        /// Gets fired when the BPerSection property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BPerSectionChanged;
        
        /// <summary>
        /// Gets fired before the GPerSection property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GPerSectionChanging;
        
        /// <summary>
        /// Gets fired when the GPerSection property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GPerSectionChanged;
        
        /// <summary>
        /// Gets fired before the SwitchOnDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwitchOnDateChanging;
        
        /// <summary>
        /// Gets fired when the SwitchOnDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwitchOnDateChanged;
        
        /// <summary>
        /// Gets fired before the AVRDelay property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AVRDelayChanging;
        
        /// <summary>
        /// Gets fired when the AVRDelay property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AVRDelayChanged;
        
        /// <summary>
        /// Gets fired before the VoltageSensitivity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageSensitivityChanging;
        
        /// <summary>
        /// Gets fired when the VoltageSensitivity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageSensitivityChanged;
        
        /// <summary>
        /// Gets fired before the G0PerSection property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> G0PerSectionChanging;
        
        /// <summary>
        /// Gets fired when the G0PerSection property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> G0PerSectionChanged;
        
        /// <summary>
        /// Gets fired before the ReactivePerSection property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePerSectionChanging;
        
        /// <summary>
        /// Gets fired when the ReactivePerSection property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReactivePerSectionChanged;
        
        /// <summary>
        /// Gets fired before the SvShuntCompensatorSections property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SvShuntCompensatorSectionsChanging;
        
        /// <summary>
        /// Gets fired when the SvShuntCompensatorSections property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SvShuntCompensatorSectionsChanged;
        
        private static ITypedElement RetrieveNormalSectionsAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntCompensator.ClassInstance)).Resolve("normalSections")));
        }
        
        /// <summary>
        /// Raises the NormalSectionsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormalSectionsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormalSectionsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NormalSectionsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormalSectionsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormalSectionsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMinUAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntCompensator.ClassInstance)).Resolve("minU")));
        }
        
        /// <summary>
        /// Raises the MinUChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinUChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinUChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinUChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinUChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinUChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveB0PerSectionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntCompensator.ClassInstance)).Resolve("b0PerSection")));
        }
        
        /// <summary>
        /// Raises the B0PerSectionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnB0PerSectionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.B0PerSectionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the B0PerSectionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnB0PerSectionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.B0PerSectionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNomQAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntCompensator.ClassInstance)).Resolve("nomQ")));
        }
        
        /// <summary>
        /// Raises the NomQChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNomQChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NomQChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NomQChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNomQChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NomQChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNomUAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntCompensator.ClassInstance)).Resolve("nomU")));
        }
        
        /// <summary>
        /// Raises the NomUChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNomUChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NomUChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NomUChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNomUChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NomUChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaximumSectionsAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntCompensator.ClassInstance)).Resolve("maximumSections")));
        }
        
        /// <summary>
        /// Raises the MaximumSectionsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximumSectionsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaximumSectionsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaximumSectionsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaximumSectionsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaximumSectionsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSwitchOnCountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntCompensator.ClassInstance)).Resolve("switchOnCount")));
        }
        
        /// <summary>
        /// Raises the SwitchOnCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwitchOnCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwitchOnCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SwitchOnCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwitchOnCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwitchOnCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaxUAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntCompensator.ClassInstance)).Resolve("maxU")));
        }
        
        /// <summary>
        /// Raises the MaxUChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxUChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxUChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxUChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxUChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxUChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBPerSectionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntCompensator.ClassInstance)).Resolve("bPerSection")));
        }
        
        /// <summary>
        /// Raises the BPerSectionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBPerSectionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BPerSectionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BPerSectionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBPerSectionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BPerSectionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGPerSectionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntCompensator.ClassInstance)).Resolve("gPerSection")));
        }
        
        /// <summary>
        /// Raises the GPerSectionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGPerSectionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GPerSectionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GPerSectionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGPerSectionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GPerSectionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSwitchOnDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntCompensator.ClassInstance)).Resolve("switchOnDate")));
        }
        
        /// <summary>
        /// Raises the SwitchOnDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwitchOnDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwitchOnDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SwitchOnDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwitchOnDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwitchOnDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAVRDelayAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntCompensator.ClassInstance)).Resolve("aVRDelay")));
        }
        
        /// <summary>
        /// Raises the AVRDelayChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAVRDelayChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AVRDelayChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AVRDelayChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAVRDelayChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AVRDelayChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVoltageSensitivityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntCompensator.ClassInstance)).Resolve("voltageSensitivity")));
        }
        
        /// <summary>
        /// Raises the VoltageSensitivityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageSensitivityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageSensitivityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageSensitivityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageSensitivityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageSensitivityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveG0PerSectionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntCompensator.ClassInstance)).Resolve("g0PerSection")));
        }
        
        /// <summary>
        /// Raises the G0PerSectionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnG0PerSectionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.G0PerSectionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the G0PerSectionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnG0PerSectionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.G0PerSectionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReactivePerSectionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ShuntCompensator.ClassInstance)).Resolve("reactivePerSection")));
        }
        
        /// <summary>
        /// Raises the ReactivePerSectionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePerSectionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePerSectionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReactivePerSectionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReactivePerSectionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReactivePerSectionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSvShuntCompensatorSectionsReference()
        {
            return ((ITypedElement)(((ModelElement)(ShuntCompensator.ClassInstance)).Resolve("SvShuntCompensatorSections")));
        }
        
        /// <summary>
        /// Raises the SvShuntCompensatorSectionsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSvShuntCompensatorSectionsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SvShuntCompensatorSectionsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SvShuntCompensatorSectionsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSvShuntCompensatorSectionsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SvShuntCompensatorSectionsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SvShuntCompensatorSections property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSvShuntCompensatorSections(object sender, System.EventArgs eventArgs)
        {
            this.SvShuntCompensatorSections = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NORMALSECTIONS"))
            {
                return this.NormalSections;
            }
            if ((attribute == "MINU"))
            {
                return this.MinU;
            }
            if ((attribute == "B0PERSECTION"))
            {
                return this.B0PerSection;
            }
            if ((attribute == "NOMQ"))
            {
                return this.NomQ;
            }
            if ((attribute == "NOMU"))
            {
                return this.NomU;
            }
            if ((attribute == "MAXIMUMSECTIONS"))
            {
                return this.MaximumSections;
            }
            if ((attribute == "SWITCHONCOUNT"))
            {
                return this.SwitchOnCount;
            }
            if ((attribute == "MAXU"))
            {
                return this.MaxU;
            }
            if ((attribute == "BPERSECTION"))
            {
                return this.BPerSection;
            }
            if ((attribute == "GPERSECTION"))
            {
                return this.GPerSection;
            }
            if ((attribute == "SWITCHONDATE"))
            {
                return this.SwitchOnDate;
            }
            if ((attribute == "AVRDELAY"))
            {
                return this.AVRDelay;
            }
            if ((attribute == "VOLTAGESENSITIVITY"))
            {
                return this.VoltageSensitivity;
            }
            if ((attribute == "G0PERSECTION"))
            {
                return this.G0PerSection;
            }
            if ((attribute == "REACTIVEPERSECTION"))
            {
                return this.ReactivePerSection;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SVSHUNTCOMPENSATORSECTIONS"))
            {
                this.SvShuntCompensatorSections = ((ISvShuntCompensatorSections)(value));
                return;
            }
            if ((feature == "NORMALSECTIONS"))
            {
                this.NormalSections = ((int)(value));
                return;
            }
            if ((feature == "MINU"))
            {
                this.MinU = ((float)(value));
                return;
            }
            if ((feature == "B0PERSECTION"))
            {
                this.B0PerSection = ((float)(value));
                return;
            }
            if ((feature == "NOMQ"))
            {
                this.NomQ = ((float)(value));
                return;
            }
            if ((feature == "NOMU"))
            {
                this.NomU = ((float)(value));
                return;
            }
            if ((feature == "MAXIMUMSECTIONS"))
            {
                this.MaximumSections = ((int)(value));
                return;
            }
            if ((feature == "SWITCHONCOUNT"))
            {
                this.SwitchOnCount = ((int)(value));
                return;
            }
            if ((feature == "MAXU"))
            {
                this.MaxU = ((float)(value));
                return;
            }
            if ((feature == "BPERSECTION"))
            {
                this.BPerSection = ((float)(value));
                return;
            }
            if ((feature == "GPERSECTION"))
            {
                this.GPerSection = ((float)(value));
                return;
            }
            if ((feature == "SWITCHONDATE"))
            {
                this.SwitchOnDate = ((DateTime)(value));
                return;
            }
            if ((feature == "AVRDELAY"))
            {
                this.AVRDelay = ((float)(value));
                return;
            }
            if ((feature == "VOLTAGESENSITIVITY"))
            {
                this.VoltageSensitivity = ((float)(value));
                return;
            }
            if ((feature == "G0PERSECTION"))
            {
                this.G0PerSection = ((float)(value));
                return;
            }
            if ((feature == "REACTIVEPERSECTION"))
            {
                this.ReactivePerSection = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SvShuntCompensatorSections"))
            {
                return new SvShuntCompensatorSectionsProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SvShuntCompensatorSections"))
            {
                return new SvShuntCompensatorSectionsProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/ShuntCompensator")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ShuntCompensator class
        /// </summary>
        public class ShuntCompensatorReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ShuntCompensator _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ShuntCompensatorReferencedElementsCollection(ShuntCompensator parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.SvShuntCompensatorSections != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SvShuntCompensatorSectionsChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SvShuntCompensatorSectionsChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.SvShuntCompensatorSections == null))
                {
                    ISvShuntCompensatorSections svShuntCompensatorSectionsCasted = item.As<ISvShuntCompensatorSections>();
                    if ((svShuntCompensatorSectionsCasted != null))
                    {
                        this._parent.SvShuntCompensatorSections = svShuntCompensatorSectionsCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SvShuntCompensatorSections = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.SvShuntCompensatorSections))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.SvShuntCompensatorSections != null))
                {
                    array[arrayIndex] = this._parent.SvShuntCompensatorSections;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.SvShuntCompensatorSections == item))
                {
                    this._parent.SvShuntCompensatorSections = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SvShuntCompensatorSections).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the normalSections property
        /// </summary>
        private sealed class NormalSectionsProxy : ModelPropertyChange<IShuntCompensator, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NormalSectionsProxy(IShuntCompensator modelElement) : 
                    base(modelElement, "normalSections")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.NormalSections;
                }
                set
                {
                    this.ModelElement.NormalSections = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minU property
        /// </summary>
        private sealed class MinUProxy : ModelPropertyChange<IShuntCompensator, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinUProxy(IShuntCompensator modelElement) : 
                    base(modelElement, "minU")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinU;
                }
                set
                {
                    this.ModelElement.MinU = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the b0PerSection property
        /// </summary>
        private sealed class B0PerSectionProxy : ModelPropertyChange<IShuntCompensator, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public B0PerSectionProxy(IShuntCompensator modelElement) : 
                    base(modelElement, "b0PerSection")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.B0PerSection;
                }
                set
                {
                    this.ModelElement.B0PerSection = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the nomQ property
        /// </summary>
        private sealed class NomQProxy : ModelPropertyChange<IShuntCompensator, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NomQProxy(IShuntCompensator modelElement) : 
                    base(modelElement, "nomQ")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NomQ;
                }
                set
                {
                    this.ModelElement.NomQ = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the nomU property
        /// </summary>
        private sealed class NomUProxy : ModelPropertyChange<IShuntCompensator, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NomUProxy(IShuntCompensator modelElement) : 
                    base(modelElement, "nomU")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NomU;
                }
                set
                {
                    this.ModelElement.NomU = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maximumSections property
        /// </summary>
        private sealed class MaximumSectionsProxy : ModelPropertyChange<IShuntCompensator, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaximumSectionsProxy(IShuntCompensator modelElement) : 
                    base(modelElement, "maximumSections")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.MaximumSections;
                }
                set
                {
                    this.ModelElement.MaximumSections = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the switchOnCount property
        /// </summary>
        private sealed class SwitchOnCountProxy : ModelPropertyChange<IShuntCompensator, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SwitchOnCountProxy(IShuntCompensator modelElement) : 
                    base(modelElement, "switchOnCount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.SwitchOnCount;
                }
                set
                {
                    this.ModelElement.SwitchOnCount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maxU property
        /// </summary>
        private sealed class MaxUProxy : ModelPropertyChange<IShuntCompensator, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxUProxy(IShuntCompensator modelElement) : 
                    base(modelElement, "maxU")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MaxU;
                }
                set
                {
                    this.ModelElement.MaxU = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the bPerSection property
        /// </summary>
        private sealed class BPerSectionProxy : ModelPropertyChange<IShuntCompensator, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BPerSectionProxy(IShuntCompensator modelElement) : 
                    base(modelElement, "bPerSection")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.BPerSection;
                }
                set
                {
                    this.ModelElement.BPerSection = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the gPerSection property
        /// </summary>
        private sealed class GPerSectionProxy : ModelPropertyChange<IShuntCompensator, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GPerSectionProxy(IShuntCompensator modelElement) : 
                    base(modelElement, "gPerSection")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.GPerSection;
                }
                set
                {
                    this.ModelElement.GPerSection = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the switchOnDate property
        /// </summary>
        private sealed class SwitchOnDateProxy : ModelPropertyChange<IShuntCompensator, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SwitchOnDateProxy(IShuntCompensator modelElement) : 
                    base(modelElement, "switchOnDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.SwitchOnDate;
                }
                set
                {
                    this.ModelElement.SwitchOnDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the aVRDelay property
        /// </summary>
        private sealed class AVRDelayProxy : ModelPropertyChange<IShuntCompensator, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AVRDelayProxy(IShuntCompensator modelElement) : 
                    base(modelElement, "aVRDelay")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.AVRDelay;
                }
                set
                {
                    this.ModelElement.AVRDelay = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the voltageSensitivity property
        /// </summary>
        private sealed class VoltageSensitivityProxy : ModelPropertyChange<IShuntCompensator, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageSensitivityProxy(IShuntCompensator modelElement) : 
                    base(modelElement, "voltageSensitivity")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.VoltageSensitivity;
                }
                set
                {
                    this.ModelElement.VoltageSensitivity = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the g0PerSection property
        /// </summary>
        private sealed class G0PerSectionProxy : ModelPropertyChange<IShuntCompensator, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public G0PerSectionProxy(IShuntCompensator modelElement) : 
                    base(modelElement, "g0PerSection")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.G0PerSection;
                }
                set
                {
                    this.ModelElement.G0PerSection = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the reactivePerSection property
        /// </summary>
        private sealed class ReactivePerSectionProxy : ModelPropertyChange<IShuntCompensator, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReactivePerSectionProxy(IShuntCompensator modelElement) : 
                    base(modelElement, "reactivePerSection")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ReactivePerSection;
                }
                set
                {
                    this.ModelElement.ReactivePerSection = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the SvShuntCompensatorSections property
        /// </summary>
        private sealed class SvShuntCompensatorSectionsProxy : ModelPropertyChange<IShuntCompensator, ISvShuntCompensatorSections>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SvShuntCompensatorSectionsProxy(IShuntCompensator modelElement) : 
                    base(modelElement, "SvShuntCompensatorSections")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISvShuntCompensatorSections Value
            {
                get
                {
                    return this.ModelElement.SvShuntCompensatorSections;
                }
                set
                {
                    this.ModelElement.SvShuntCompensatorSections = value;
                }
            }
        }
    }
}

