using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.LoadControl;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Wires
{
    
    
    /// <summary>
    /// The default implementation of the RegulatingControl class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Wires")]
    [XmlNamespacePrefixAttribute("cimWires")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/RegulatingControl")]
    [DebuggerDisplayAttribute("RegulatingControl {UUID}")]
    public partial class RegulatingControl : PowerSystemResource, IRegulatingControl, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Mode property
        /// </summary>
        private Nullable<RegulatingControlModeKind> _mode;
        
        private static Lazy<ITypedElement> _modeAttribute = new Lazy<ITypedElement>(RetrieveModeAttribute);
        
        /// <summary>
        /// The backing field for the TargetRange property
        /// </summary>
        private float _targetRange;
        
        private static Lazy<ITypedElement> _targetRangeAttribute = new Lazy<ITypedElement>(RetrieveTargetRangeAttribute);
        
        /// <summary>
        /// The backing field for the TargetValue property
        /// </summary>
        private float _targetValue;
        
        private static Lazy<ITypedElement> _targetValueAttribute = new Lazy<ITypedElement>(RetrieveTargetValueAttribute);
        
        /// <summary>
        /// The backing field for the Discrete property
        /// </summary>
        private bool _discrete;
        
        private static Lazy<ITypedElement> _discreteAttribute = new Lazy<ITypedElement>(RetrieveDiscreteAttribute);
        
        private static Lazy<ITypedElement> _tapChangerReference = new Lazy<ITypedElement>(RetrieveTapChangerReference);
        
        /// <summary>
        /// The backing field for the TapChanger property
        /// </summary>
        private RegulatingControlTapChangerCollection _tapChanger;
        
        private static Lazy<ITypedElement> _terminalReference = new Lazy<ITypedElement>(RetrieveTerminalReference);
        
        /// <summary>
        /// The backing field for the Terminal property
        /// </summary>
        private ITerminal _terminal;
        
        private static Lazy<ITypedElement> _regulatingCondEqReference = new Lazy<ITypedElement>(RetrieveRegulatingCondEqReference);
        
        /// <summary>
        /// The backing field for the RegulatingCondEq property
        /// </summary>
        private RegulatingControlRegulatingCondEqCollection _regulatingCondEq;
        
        private static Lazy<ITypedElement> _regulationScheduleReference = new Lazy<ITypedElement>(RetrieveRegulationScheduleReference);
        
        /// <summary>
        /// The backing field for the RegulationSchedule property
        /// </summary>
        private RegulatingControlRegulationScheduleCollection _regulationSchedule;
        
        private static IClass _classInstance;
        
        public RegulatingControl()
        {
            this._tapChanger = new RegulatingControlTapChangerCollection(this);
            this._tapChanger.CollectionChanging += this.TapChangerCollectionChanging;
            this._tapChanger.CollectionChanged += this.TapChangerCollectionChanged;
            this._regulatingCondEq = new RegulatingControlRegulatingCondEqCollection(this);
            this._regulatingCondEq.CollectionChanging += this.RegulatingCondEqCollectionChanging;
            this._regulatingCondEq.CollectionChanged += this.RegulatingCondEqCollectionChanged;
            this._regulationSchedule = new RegulatingControlRegulationScheduleCollection(this);
            this._regulationSchedule.CollectionChanging += this.RegulationScheduleCollectionChanging;
            this._regulationSchedule.CollectionChanged += this.RegulationScheduleCollectionChanged;
        }
        
        /// <summary>
        /// The mode property
        /// </summary>
        [XmlElementNameAttribute("mode")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<RegulatingControlModeKind> Mode
        {
            get
            {
                return this._mode;
            }
            set
            {
                if ((this._mode != value))
                {
                    Nullable<RegulatingControlModeKind> old = this._mode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnModeChanging(e);
                    this.OnPropertyChanging("Mode", e, _modeAttribute);
                    this._mode = value;
                    this.OnModeChanged(e);
                    this.OnPropertyChanged("Mode", e, _modeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The targetRange property
        /// </summary>
        [XmlElementNameAttribute("targetRange")]
        [XmlAttributeAttribute(true)]
        public virtual float TargetRange
        {
            get
            {
                return this._targetRange;
            }
            set
            {
                if ((this._targetRange != value))
                {
                    float old = this._targetRange;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTargetRangeChanging(e);
                    this.OnPropertyChanging("TargetRange", e, _targetRangeAttribute);
                    this._targetRange = value;
                    this.OnTargetRangeChanged(e);
                    this.OnPropertyChanged("TargetRange", e, _targetRangeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The targetValue property
        /// </summary>
        [XmlElementNameAttribute("targetValue")]
        [XmlAttributeAttribute(true)]
        public virtual float TargetValue
        {
            get
            {
                return this._targetValue;
            }
            set
            {
                if ((this._targetValue != value))
                {
                    float old = this._targetValue;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTargetValueChanging(e);
                    this.OnPropertyChanging("TargetValue", e, _targetValueAttribute);
                    this._targetValue = value;
                    this.OnTargetValueChanged(e);
                    this.OnPropertyChanged("TargetValue", e, _targetValueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The discrete property
        /// </summary>
        [XmlElementNameAttribute("discrete")]
        [XmlAttributeAttribute(true)]
        public virtual bool Discrete
        {
            get
            {
                return this._discrete;
            }
            set
            {
                if ((this._discrete != value))
                {
                    bool old = this._discrete;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDiscreteChanging(e);
                    this.OnPropertyChanging("Discrete", e, _discreteAttribute);
                    this._discrete = value;
                    this.OnDiscreteChanged(e);
                    this.OnPropertyChanged("Discrete", e, _discreteAttribute);
                }
            }
        }
        
        /// <summary>
        /// The TapChanger property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("RegulatingControl")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITapChanger> TapChanger
        {
            get
            {
                return this._tapChanger;
            }
        }
        
        /// <summary>
        /// The Terminal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("RegulatingControl")]
        public virtual ITerminal Terminal
        {
            get
            {
                return this._terminal;
            }
            set
            {
                if ((this._terminal != value))
                {
                    ITerminal old = this._terminal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTerminalChanging(e);
                    this.OnPropertyChanging("Terminal", e, _terminalReference);
                    this._terminal = value;
                    if ((old != null))
                    {
                        old.RegulatingControl.Remove(this);
                        old.Deleted -= this.OnResetTerminal;
                    }
                    if ((value != null))
                    {
                        value.RegulatingControl.Add(this);
                        value.Deleted += this.OnResetTerminal;
                    }
                    this.OnTerminalChanged(e);
                    this.OnPropertyChanged("Terminal", e, _terminalReference);
                }
            }
        }
        
        /// <summary>
        /// The RegulatingCondEq property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("RegulatingControl")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IRegulatingCondEq> RegulatingCondEq
        {
            get
            {
                return this._regulatingCondEq;
            }
        }
        
        /// <summary>
        /// The RegulationSchedule property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("RegulatingControl")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IRegulationSchedule> RegulationSchedule
        {
            get
            {
                return this._regulationSchedule;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RegulatingControlReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/RegulatingControl")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Mode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ModeChanging;
        
        /// <summary>
        /// Gets fired when the Mode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ModeChanged;
        
        /// <summary>
        /// Gets fired before the TargetRange property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TargetRangeChanging;
        
        /// <summary>
        /// Gets fired when the TargetRange property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TargetRangeChanged;
        
        /// <summary>
        /// Gets fired before the TargetValue property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TargetValueChanging;
        
        /// <summary>
        /// Gets fired when the TargetValue property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TargetValueChanged;
        
        /// <summary>
        /// Gets fired before the Discrete property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DiscreteChanging;
        
        /// <summary>
        /// Gets fired when the Discrete property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DiscreteChanged;
        
        /// <summary>
        /// Gets fired before the Terminal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TerminalChanging;
        
        /// <summary>
        /// Gets fired when the Terminal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TerminalChanged;
        
        private static ITypedElement RetrieveModeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RegulatingControl.ClassInstance)).Resolve("mode")));
        }
        
        /// <summary>
        /// Raises the ModeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnModeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ModeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ModeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnModeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ModeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTargetRangeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RegulatingControl.ClassInstance)).Resolve("targetRange")));
        }
        
        /// <summary>
        /// Raises the TargetRangeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetRangeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TargetRangeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TargetRangeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetRangeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TargetRangeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTargetValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RegulatingControl.ClassInstance)).Resolve("targetValue")));
        }
        
        /// <summary>
        /// Raises the TargetValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TargetValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TargetValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TargetValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDiscreteAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RegulatingControl.ClassInstance)).Resolve("discrete")));
        }
        
        /// <summary>
        /// Raises the DiscreteChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDiscreteChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DiscreteChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DiscreteChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDiscreteChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DiscreteChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTapChangerReference()
        {
            return ((ITypedElement)(((ModelElement)(RegulatingControl.ClassInstance)).Resolve("TapChanger")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TapChanger property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TapChangerCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("TapChanger", e, _tapChangerReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TapChanger property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TapChangerCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TapChanger", e, _tapChangerReference);
        }
        
        private static ITypedElement RetrieveTerminalReference()
        {
            return ((ITypedElement)(((ModelElement)(RegulatingControl.ClassInstance)).Resolve("Terminal")));
        }
        
        /// <summary>
        /// Raises the TerminalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TerminalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TerminalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TerminalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Terminal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTerminal(object sender, System.EventArgs eventArgs)
        {
            this.Terminal = null;
        }
        
        private static ITypedElement RetrieveRegulatingCondEqReference()
        {
            return ((ITypedElement)(((ModelElement)(RegulatingControl.ClassInstance)).Resolve("RegulatingCondEq")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RegulatingCondEq property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RegulatingCondEqCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("RegulatingCondEq", e, _regulatingCondEqReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RegulatingCondEq property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RegulatingCondEqCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RegulatingCondEq", e, _regulatingCondEqReference);
        }
        
        private static ITypedElement RetrieveRegulationScheduleReference()
        {
            return ((ITypedElement)(((ModelElement)(RegulatingControl.ClassInstance)).Resolve("RegulationSchedule")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RegulationSchedule property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RegulationScheduleCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("RegulationSchedule", e, _regulationScheduleReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RegulationSchedule property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RegulationScheduleCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RegulationSchedule", e, _regulationScheduleReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MODE"))
            {
                return this.Mode;
            }
            if ((attribute == "TARGETRANGE"))
            {
                return this.TargetRange;
            }
            if ((attribute == "TARGETVALUE"))
            {
                return this.TargetValue;
            }
            if ((attribute == "DISCRETE"))
            {
                return this.Discrete;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "TAPCHANGER"))
            {
                return this._tapChanger;
            }
            if ((feature == "REGULATINGCONDEQ"))
            {
                return this._regulatingCondEq;
            }
            if ((feature == "REGULATIONSCHEDULE"))
            {
                return this._regulationSchedule;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TERMINAL"))
            {
                this.Terminal = ((ITerminal)(value));
                return;
            }
            if ((feature == "MODE"))
            {
                this.Mode = ((RegulatingControlModeKind)(value));
                return;
            }
            if ((feature == "TARGETRANGE"))
            {
                this.TargetRange = ((float)(value));
                return;
            }
            if ((feature == "TARGETVALUE"))
            {
                this.TargetValue = ((float)(value));
                return;
            }
            if ((feature == "DISCRETE"))
            {
                this.Discrete = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Terminal"))
            {
                return new TerminalProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Terminal"))
            {
                return new TerminalProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/RegulatingControl")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RegulatingControl class
        /// </summary>
        public class RegulatingControlReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RegulatingControl _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RegulatingControlReferencedElementsCollection(RegulatingControl parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.TapChanger.Count);
                    if ((this._parent.Terminal != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.RegulatingCondEq.Count);
                    count = (count + this._parent.RegulationSchedule.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TapChanger.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TerminalChanged += this.PropagateValueChanges;
                this._parent.RegulatingCondEq.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RegulationSchedule.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TapChanger.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TerminalChanged -= this.PropagateValueChanges;
                this._parent.RegulatingCondEq.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RegulationSchedule.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITapChanger tapChangerCasted = item.As<ITapChanger>();
                if ((tapChangerCasted != null))
                {
                    this._parent.TapChanger.Add(tapChangerCasted);
                }
                if ((this._parent.Terminal == null))
                {
                    ITerminal terminalCasted = item.As<ITerminal>();
                    if ((terminalCasted != null))
                    {
                        this._parent.Terminal = terminalCasted;
                        return;
                    }
                }
                IRegulatingCondEq regulatingCondEqCasted = item.As<IRegulatingCondEq>();
                if ((regulatingCondEqCasted != null))
                {
                    this._parent.RegulatingCondEq.Add(regulatingCondEqCasted);
                }
                IRegulationSchedule regulationScheduleCasted = item.As<IRegulationSchedule>();
                if ((regulationScheduleCasted != null))
                {
                    this._parent.RegulationSchedule.Add(regulationScheduleCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TapChanger.Clear();
                this._parent.Terminal = null;
                this._parent.RegulatingCondEq.Clear();
                this._parent.RegulationSchedule.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.TapChanger.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Terminal))
                {
                    return true;
                }
                if (this._parent.RegulatingCondEq.Contains(item))
                {
                    return true;
                }
                if (this._parent.RegulationSchedule.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> tapChangerEnumerator = this._parent.TapChanger.GetEnumerator();
                try
                {
                    for (
                    ; tapChangerEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = tapChangerEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    tapChangerEnumerator.Dispose();
                }
                if ((this._parent.Terminal != null))
                {
                    array[arrayIndex] = this._parent.Terminal;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> regulatingCondEqEnumerator = this._parent.RegulatingCondEq.GetEnumerator();
                try
                {
                    for (
                    ; regulatingCondEqEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = regulatingCondEqEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    regulatingCondEqEnumerator.Dispose();
                }
                IEnumerator<IModelElement> regulationScheduleEnumerator = this._parent.RegulationSchedule.GetEnumerator();
                try
                {
                    for (
                    ; regulationScheduleEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = regulationScheduleEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    regulationScheduleEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITapChanger tapChangerItem = item.As<ITapChanger>();
                if (((tapChangerItem != null) 
                            && this._parent.TapChanger.Remove(tapChangerItem)))
                {
                    return true;
                }
                if ((this._parent.Terminal == item))
                {
                    this._parent.Terminal = null;
                    return true;
                }
                IRegulatingCondEq regulatingCondEqItem = item.As<IRegulatingCondEq>();
                if (((regulatingCondEqItem != null) 
                            && this._parent.RegulatingCondEq.Remove(regulatingCondEqItem)))
                {
                    return true;
                }
                IRegulationSchedule regulationScheduleItem = item.As<IRegulationSchedule>();
                if (((regulationScheduleItem != null) 
                            && this._parent.RegulationSchedule.Remove(regulationScheduleItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TapChanger).Concat(this._parent.Terminal).Concat(this._parent.RegulatingCondEq).Concat(this._parent.RegulationSchedule).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the mode property
        /// </summary>
        private sealed class ModeProxy : ModelPropertyChange<IRegulatingControl, Nullable<RegulatingControlModeKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ModeProxy(IRegulatingControl modelElement) : 
                    base(modelElement, "mode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<RegulatingControlModeKind> Value
            {
                get
                {
                    return this.ModelElement.Mode;
                }
                set
                {
                    this.ModelElement.Mode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the targetRange property
        /// </summary>
        private sealed class TargetRangeProxy : ModelPropertyChange<IRegulatingControl, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TargetRangeProxy(IRegulatingControl modelElement) : 
                    base(modelElement, "targetRange")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TargetRange;
                }
                set
                {
                    this.ModelElement.TargetRange = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the targetValue property
        /// </summary>
        private sealed class TargetValueProxy : ModelPropertyChange<IRegulatingControl, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TargetValueProxy(IRegulatingControl modelElement) : 
                    base(modelElement, "targetValue")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TargetValue;
                }
                set
                {
                    this.ModelElement.TargetValue = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the discrete property
        /// </summary>
        private sealed class DiscreteProxy : ModelPropertyChange<IRegulatingControl, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DiscreteProxy(IRegulatingControl modelElement) : 
                    base(modelElement, "discrete")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Discrete;
                }
                set
                {
                    this.ModelElement.Discrete = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Terminal property
        /// </summary>
        private sealed class TerminalProxy : ModelPropertyChange<IRegulatingControl, ITerminal>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TerminalProxy(IRegulatingControl modelElement) : 
                    base(modelElement, "Terminal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITerminal Value
            {
                get
                {
                    return this.ModelElement.Terminal;
                }
                set
                {
                    this.ModelElement.Terminal = value;
                }
            }
        }
    }
}

