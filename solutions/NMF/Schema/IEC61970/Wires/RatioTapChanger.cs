using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.LoadControl;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Wires
{
    
    
    /// <summary>
    /// The default implementation of the RatioTapChanger class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Wires")]
    [XmlNamespacePrefixAttribute("cimWires")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/RatioTapChanger")]
    [DebuggerDisplayAttribute("RatioTapChanger {UUID}")]
    public partial class RatioTapChanger : TapChanger, IRatioTapChanger, IModelElement
    {
        
        /// <summary>
        /// The backing field for the TculControlMode property
        /// </summary>
        private Nullable<TransformerControlMode> _tculControlMode;
        
        private static Lazy<ITypedElement> _tculControlModeAttribute = new Lazy<ITypedElement>(RetrieveTculControlModeAttribute);
        
        private static Lazy<ITypedElement> _ratioVariationCurveReference = new Lazy<ITypedElement>(RetrieveRatioVariationCurveReference);
        
        /// <summary>
        /// The backing field for the RatioVariationCurve property
        /// </summary>
        private IRatioVariationCurve _ratioVariationCurve;
        
        private static Lazy<ITypedElement> _transformerWindingReference = new Lazy<ITypedElement>(RetrieveTransformerWindingReference);
        
        /// <summary>
        /// The backing field for the TransformerWinding property
        /// </summary>
        private ITransformerWinding _transformerWinding;
        
        private static Lazy<ITypedElement> _windingReference = new Lazy<ITypedElement>(RetrieveWindingReference);
        
        /// <summary>
        /// The backing field for the Winding property
        /// </summary>
        private IDistributionTransformerWinding _winding;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The tculControlMode property
        /// </summary>
        [XmlElementNameAttribute("tculControlMode")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<TransformerControlMode> TculControlMode
        {
            get
            {
                return this._tculControlMode;
            }
            set
            {
                if ((this._tculControlMode != value))
                {
                    Nullable<TransformerControlMode> old = this._tculControlMode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTculControlModeChanging(e);
                    this.OnPropertyChanging("TculControlMode", e, _tculControlModeAttribute);
                    this._tculControlMode = value;
                    this.OnTculControlModeChanged(e);
                    this.OnPropertyChanged("TculControlMode", e, _tculControlModeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The RatioVariationCurve property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("RatioTapChanger")]
        public virtual IRatioVariationCurve RatioVariationCurve
        {
            get
            {
                return this._ratioVariationCurve;
            }
            set
            {
                if ((this._ratioVariationCurve != value))
                {
                    IRatioVariationCurve old = this._ratioVariationCurve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatioVariationCurveChanging(e);
                    this.OnPropertyChanging("RatioVariationCurve", e, _ratioVariationCurveReference);
                    this._ratioVariationCurve = value;
                    if ((old != null))
                    {
                        old.RatioTapChanger = null;
                        old.Deleted -= this.OnResetRatioVariationCurve;
                    }
                    if ((value != null))
                    {
                        value.RatioTapChanger = this;
                        value.Deleted += this.OnResetRatioVariationCurve;
                    }
                    this.OnRatioVariationCurveChanged(e);
                    this.OnPropertyChanged("RatioVariationCurve", e, _ratioVariationCurveReference);
                }
            }
        }
        
        /// <summary>
        /// The TransformerWinding property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("RatioTapChanger")]
        public virtual ITransformerWinding TransformerWinding
        {
            get
            {
                return this._transformerWinding;
            }
            set
            {
                if ((this._transformerWinding != value))
                {
                    ITransformerWinding old = this._transformerWinding;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerWindingChanging(e);
                    this.OnPropertyChanging("TransformerWinding", e, _transformerWindingReference);
                    this._transformerWinding = value;
                    if ((old != null))
                    {
                        old.RatioTapChanger = null;
                        old.Deleted -= this.OnResetTransformerWinding;
                    }
                    if ((value != null))
                    {
                        value.RatioTapChanger = this;
                        value.Deleted += this.OnResetTransformerWinding;
                    }
                    this.OnTransformerWindingChanged(e);
                    this.OnPropertyChanged("TransformerWinding", e, _transformerWindingReference);
                }
            }
        }
        
        /// <summary>
        /// The Winding property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("RatioTapChanger")]
        public virtual IDistributionTransformerWinding Winding
        {
            get
            {
                return this._winding;
            }
            set
            {
                if ((this._winding != value))
                {
                    IDistributionTransformerWinding old = this._winding;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWindingChanging(e);
                    this.OnPropertyChanging("Winding", e, _windingReference);
                    this._winding = value;
                    if ((old != null))
                    {
                        old.RatioTapChanger = null;
                        old.Deleted -= this.OnResetWinding;
                    }
                    if ((value != null))
                    {
                        value.RatioTapChanger = this;
                        value.Deleted += this.OnResetWinding;
                    }
                    this.OnWindingChanged(e);
                    this.OnPropertyChanged("Winding", e, _windingReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new RatioTapChangerReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/RatioTapChanger")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the TculControlMode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TculControlModeChanging;
        
        /// <summary>
        /// Gets fired when the TculControlMode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TculControlModeChanged;
        
        /// <summary>
        /// Gets fired before the RatioVariationCurve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatioVariationCurveChanging;
        
        /// <summary>
        /// Gets fired when the RatioVariationCurve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatioVariationCurveChanged;
        
        /// <summary>
        /// Gets fired before the TransformerWinding property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerWindingChanging;
        
        /// <summary>
        /// Gets fired when the TransformerWinding property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerWindingChanged;
        
        /// <summary>
        /// Gets fired before the Winding property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WindingChanging;
        
        /// <summary>
        /// Gets fired when the Winding property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WindingChanged;
        
        private static ITypedElement RetrieveTculControlModeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RatioTapChanger.ClassInstance)).Resolve("tculControlMode")));
        }
        
        /// <summary>
        /// Raises the TculControlModeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTculControlModeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TculControlModeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TculControlModeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTculControlModeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TculControlModeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRatioVariationCurveReference()
        {
            return ((ITypedElement)(((ModelElement)(RatioTapChanger.ClassInstance)).Resolve("RatioVariationCurve")));
        }
        
        /// <summary>
        /// Raises the RatioVariationCurveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatioVariationCurveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatioVariationCurveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatioVariationCurveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatioVariationCurveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatioVariationCurveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RatioVariationCurve property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRatioVariationCurve(object sender, System.EventArgs eventArgs)
        {
            this.RatioVariationCurve = null;
        }
        
        private static ITypedElement RetrieveTransformerWindingReference()
        {
            return ((ITypedElement)(((ModelElement)(RatioTapChanger.ClassInstance)).Resolve("TransformerWinding")));
        }
        
        /// <summary>
        /// Raises the TransformerWindingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerWindingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerWindingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformerWindingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerWindingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerWindingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TransformerWinding property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTransformerWinding(object sender, System.EventArgs eventArgs)
        {
            this.TransformerWinding = null;
        }
        
        private static ITypedElement RetrieveWindingReference()
        {
            return ((ITypedElement)(((ModelElement)(RatioTapChanger.ClassInstance)).Resolve("Winding")));
        }
        
        /// <summary>
        /// Raises the WindingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWindingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WindingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WindingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWindingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WindingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Winding property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWinding(object sender, System.EventArgs eventArgs)
        {
            this.Winding = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TCULCONTROLMODE"))
            {
                return this.TculControlMode;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RATIOVARIATIONCURVE"))
            {
                this.RatioVariationCurve = ((IRatioVariationCurve)(value));
                return;
            }
            if ((feature == "TRANSFORMERWINDING"))
            {
                this.TransformerWinding = ((ITransformerWinding)(value));
                return;
            }
            if ((feature == "WINDING"))
            {
                this.Winding = ((IDistributionTransformerWinding)(value));
                return;
            }
            if ((feature == "TCULCONTROLMODE"))
            {
                this.TculControlMode = ((TransformerControlMode)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "RatioVariationCurve"))
            {
                return new RatioVariationCurveProxy(this);
            }
            if ((attribute == "TransformerWinding"))
            {
                return new TransformerWindingProxy(this);
            }
            if ((attribute == "Winding"))
            {
                return new WindingProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "RatioVariationCurve"))
            {
                return new RatioVariationCurveProxy(this);
            }
            if ((reference == "TransformerWinding"))
            {
                return new TransformerWindingProxy(this);
            }
            if ((reference == "Winding"))
            {
                return new WindingProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/RatioTapChanger")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the RatioTapChanger class
        /// </summary>
        public class RatioTapChangerReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private RatioTapChanger _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public RatioTapChangerReferencedElementsCollection(RatioTapChanger parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.RatioVariationCurve != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TransformerWinding != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Winding != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.RatioVariationCurveChanged += this.PropagateValueChanges;
                this._parent.TransformerWindingChanged += this.PropagateValueChanges;
                this._parent.WindingChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.RatioVariationCurveChanged -= this.PropagateValueChanges;
                this._parent.TransformerWindingChanged -= this.PropagateValueChanges;
                this._parent.WindingChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.RatioVariationCurve == null))
                {
                    IRatioVariationCurve ratioVariationCurveCasted = item.As<IRatioVariationCurve>();
                    if ((ratioVariationCurveCasted != null))
                    {
                        this._parent.RatioVariationCurve = ratioVariationCurveCasted;
                        return;
                    }
                }
                if ((this._parent.TransformerWinding == null))
                {
                    ITransformerWinding transformerWindingCasted = item.As<ITransformerWinding>();
                    if ((transformerWindingCasted != null))
                    {
                        this._parent.TransformerWinding = transformerWindingCasted;
                        return;
                    }
                }
                if ((this._parent.Winding == null))
                {
                    IDistributionTransformerWinding windingCasted = item.As<IDistributionTransformerWinding>();
                    if ((windingCasted != null))
                    {
                        this._parent.Winding = windingCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.RatioVariationCurve = null;
                this._parent.TransformerWinding = null;
                this._parent.Winding = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.RatioVariationCurve))
                {
                    return true;
                }
                if ((item == this._parent.TransformerWinding))
                {
                    return true;
                }
                if ((item == this._parent.Winding))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.RatioVariationCurve != null))
                {
                    array[arrayIndex] = this._parent.RatioVariationCurve;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TransformerWinding != null))
                {
                    array[arrayIndex] = this._parent.TransformerWinding;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Winding != null))
                {
                    array[arrayIndex] = this._parent.Winding;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.RatioVariationCurve == item))
                {
                    this._parent.RatioVariationCurve = null;
                    return true;
                }
                if ((this._parent.TransformerWinding == item))
                {
                    this._parent.TransformerWinding = null;
                    return true;
                }
                if ((this._parent.Winding == item))
                {
                    this._parent.Winding = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.RatioVariationCurve).Concat(this._parent.TransformerWinding).Concat(this._parent.Winding).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the tculControlMode property
        /// </summary>
        private sealed class TculControlModeProxy : ModelPropertyChange<IRatioTapChanger, Nullable<TransformerControlMode>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TculControlModeProxy(IRatioTapChanger modelElement) : 
                    base(modelElement, "tculControlMode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<TransformerControlMode> Value
            {
                get
                {
                    return this.ModelElement.TculControlMode;
                }
                set
                {
                    this.ModelElement.TculControlMode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RatioVariationCurve property
        /// </summary>
        private sealed class RatioVariationCurveProxy : ModelPropertyChange<IRatioTapChanger, IRatioVariationCurve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatioVariationCurveProxy(IRatioTapChanger modelElement) : 
                    base(modelElement, "RatioVariationCurve")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRatioVariationCurve Value
            {
                get
                {
                    return this.ModelElement.RatioVariationCurve;
                }
                set
                {
                    this.ModelElement.RatioVariationCurve = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TransformerWinding property
        /// </summary>
        private sealed class TransformerWindingProxy : ModelPropertyChange<IRatioTapChanger, ITransformerWinding>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformerWindingProxy(IRatioTapChanger modelElement) : 
                    base(modelElement, "TransformerWinding")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITransformerWinding Value
            {
                get
                {
                    return this.ModelElement.TransformerWinding;
                }
                set
                {
                    this.ModelElement.TransformerWinding = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Winding property
        /// </summary>
        private sealed class WindingProxy : ModelPropertyChange<IRatioTapChanger, IDistributionTransformerWinding>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WindingProxy(IRatioTapChanger modelElement) : 
                    base(modelElement, "Winding")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDistributionTransformerWinding Value
            {
                get
                {
                    return this.ModelElement.Winding;
                }
                set
                {
                    this.ModelElement.Winding = value;
                }
            }
        }
    }
}

