using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.LoadControl;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Wires
{
    
    
    /// <summary>
    /// The public interface for TransformerWinding
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(TransformerWinding))]
    [XmlDefaultImplementationTypeAttribute(typeof(TransformerWinding))]
    public interface ITransformerWinding : IModelElement, IConductingEquipment
    {
        
        /// <summary>
        /// The g0 property
        /// </summary>
        float G0
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rground property
        /// </summary>
        float Rground
        {
            get;
            set;
        }
        
        /// <summary>
        /// The grounded property
        /// </summary>
        bool Grounded
        {
            get;
            set;
        }
        
        /// <summary>
        /// The shortTermS property
        /// </summary>
        float ShortTermS
        {
            get;
            set;
        }
        
        /// <summary>
        /// The g property
        /// </summary>
        float G
        {
            get;
            set;
        }
        
        /// <summary>
        /// The b property
        /// </summary>
        float B
        {
            get;
            set;
        }
        
        /// <summary>
        /// The x property
        /// </summary>
        float X
        {
            get;
            set;
        }
        
        /// <summary>
        /// The r property
        /// </summary>
        float R
        {
            get;
            set;
        }
        
        /// <summary>
        /// The r0 property
        /// </summary>
        float R0
        {
            get;
            set;
        }
        
        /// <summary>
        /// The b0 property
        /// </summary>
        float B0
        {
            get;
            set;
        }
        
        /// <summary>
        /// The windingType property
        /// </summary>
        Nullable<WindingType> WindingType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The x0 property
        /// </summary>
        float X0
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ratedS property
        /// </summary>
        float RatedS
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ratedU property
        /// </summary>
        float RatedU
        {
            get;
            set;
        }
        
        /// <summary>
        /// The insulationU property
        /// </summary>
        float InsulationU
        {
            get;
            set;
        }
        
        /// <summary>
        /// The emergencyS property
        /// </summary>
        float EmergencyS
        {
            get;
            set;
        }
        
        /// <summary>
        /// The connectionType property
        /// </summary>
        Nullable<WindingConnection> ConnectionType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The xground property
        /// </summary>
        float Xground
        {
            get;
            set;
        }
        
        /// <summary>
        /// The To_WindingTest property
        /// </summary>
        IOrderedSetExpression<IWindingTest> To_WindingTest
        {
            get;
        }
        
        /// <summary>
        /// The PhaseTapChanger property
        /// </summary>
        IPhaseTapChanger PhaseTapChanger
        {
            get;
            set;
        }
        
        /// <summary>
        /// The PowerTransformer property
        /// </summary>
        IPowerTransformer PowerTransformer
        {
            get;
            set;
        }
        
        /// <summary>
        /// The From_WindingTest property
        /// </summary>
        IOrderedSetExpression<IWindingTest> From_WindingTest
        {
            get;
        }
        
        /// <summary>
        /// The RatioTapChanger property
        /// </summary>
        IRatioTapChanger RatioTapChanger
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the G0 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> G0Changing;
        
        /// <summary>
        /// Gets fired when the G0 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> G0Changed;
        
        /// <summary>
        /// Gets fired before the Rground property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RgroundChanging;
        
        /// <summary>
        /// Gets fired when the Rground property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RgroundChanged;
        
        /// <summary>
        /// Gets fired before the Grounded property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GroundedChanging;
        
        /// <summary>
        /// Gets fired when the Grounded property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GroundedChanged;
        
        /// <summary>
        /// Gets fired before the ShortTermS property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ShortTermSChanging;
        
        /// <summary>
        /// Gets fired when the ShortTermS property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ShortTermSChanged;
        
        /// <summary>
        /// Gets fired before the G property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GChanging;
        
        /// <summary>
        /// Gets fired when the G property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GChanged;
        
        /// <summary>
        /// Gets fired before the B property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BChanging;
        
        /// <summary>
        /// Gets fired when the B property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BChanged;
        
        /// <summary>
        /// Gets fired before the X property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XChanging;
        
        /// <summary>
        /// Gets fired when the X property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XChanged;
        
        /// <summary>
        /// Gets fired before the R property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RChanging;
        
        /// <summary>
        /// Gets fired when the R property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RChanged;
        
        /// <summary>
        /// Gets fired before the R0 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> R0Changing;
        
        /// <summary>
        /// Gets fired when the R0 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> R0Changed;
        
        /// <summary>
        /// Gets fired before the B0 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> B0Changing;
        
        /// <summary>
        /// Gets fired when the B0 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> B0Changed;
        
        /// <summary>
        /// Gets fired before the WindingType property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WindingTypeChanging;
        
        /// <summary>
        /// Gets fired when the WindingType property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WindingTypeChanged;
        
        /// <summary>
        /// Gets fired before the X0 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> X0Changing;
        
        /// <summary>
        /// Gets fired when the X0 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> X0Changed;
        
        /// <summary>
        /// Gets fired before the RatedS property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedSChanging;
        
        /// <summary>
        /// Gets fired when the RatedS property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedSChanged;
        
        /// <summary>
        /// Gets fired before the RatedU property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedUChanging;
        
        /// <summary>
        /// Gets fired when the RatedU property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedUChanged;
        
        /// <summary>
        /// Gets fired before the InsulationU property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InsulationUChanging;
        
        /// <summary>
        /// Gets fired when the InsulationU property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InsulationUChanged;
        
        /// <summary>
        /// Gets fired before the EmergencyS property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EmergencySChanging;
        
        /// <summary>
        /// Gets fired when the EmergencyS property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EmergencySChanged;
        
        /// <summary>
        /// Gets fired before the ConnectionType property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ConnectionTypeChanging;
        
        /// <summary>
        /// Gets fired when the ConnectionType property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ConnectionTypeChanged;
        
        /// <summary>
        /// Gets fired before the Xground property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XgroundChanging;
        
        /// <summary>
        /// Gets fired when the Xground property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XgroundChanged;
        
        /// <summary>
        /// Gets fired before the PhaseTapChanger property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhaseTapChangerChanging;
        
        /// <summary>
        /// Gets fired when the PhaseTapChanger property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhaseTapChangerChanged;
        
        /// <summary>
        /// Gets fired before the PowerTransformer property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PowerTransformerChanging;
        
        /// <summary>
        /// Gets fired when the PowerTransformer property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PowerTransformerChanged;
        
        /// <summary>
        /// Gets fired before the RatioTapChanger property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatioTapChangerChanging;
        
        /// <summary>
        /// Gets fired when the RatioTapChanger property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatioTapChangerChanged;
    }
}

