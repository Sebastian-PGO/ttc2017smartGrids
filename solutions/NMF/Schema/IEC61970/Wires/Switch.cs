//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.LoadControl;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Wires
{
    
    
    /// <summary>
    /// The default implementation of the Switch class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Wires")]
    [XmlNamespacePrefixAttribute("cimWires")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/Switch")]
    [DebuggerDisplayAttribute("Switch {UUID}")]
    public partial class Switch : ConductingEquipment, ISwitch, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Retained property
        /// </summary>
        private bool _retained;
        
        private static Lazy<ITypedElement> _retainedAttribute = new Lazy<ITypedElement>(RetrieveRetainedAttribute);
        
        /// <summary>
        /// The backing field for the SwitchOnDate property
        /// </summary>
        private DateTime _switchOnDate;
        
        private static Lazy<ITypedElement> _switchOnDateAttribute = new Lazy<ITypedElement>(RetrieveSwitchOnDateAttribute);
        
        /// <summary>
        /// The backing field for the NormalOpen property
        /// </summary>
        private bool _normalOpen;
        
        private static Lazy<ITypedElement> _normalOpenAttribute = new Lazy<ITypedElement>(RetrieveNormalOpenAttribute);
        
        /// <summary>
        /// The backing field for the SwitchOnCount property
        /// </summary>
        private int _switchOnCount;
        
        private static Lazy<ITypedElement> _switchOnCountAttribute = new Lazy<ITypedElement>(RetrieveSwitchOnCountAttribute);
        
        private static Lazy<ITypedElement> _loadMgmtFunctionsReference = new Lazy<ITypedElement>(RetrieveLoadMgmtFunctionsReference);
        
        /// <summary>
        /// The backing field for the LoadMgmtFunctions property
        /// </summary>
        private SwitchLoadMgmtFunctionsCollection _loadMgmtFunctions;
        
        private static Lazy<ITypedElement> _connectDisconnectFunctionsReference = new Lazy<ITypedElement>(RetrieveConnectDisconnectFunctionsReference);
        
        /// <summary>
        /// The backing field for the ConnectDisconnectFunctions property
        /// </summary>
        private SwitchConnectDisconnectFunctionsCollection _connectDisconnectFunctions;
        
        private static Lazy<ITypedElement> _switchingOperationsReference = new Lazy<ITypedElement>(RetrieveSwitchingOperationsReference);
        
        /// <summary>
        /// The backing field for the SwitchingOperations property
        /// </summary>
        private SwitchSwitchingOperationsCollection _switchingOperations;
        
        private static Lazy<ITypedElement> _switchSchedulesReference = new Lazy<ITypedElement>(RetrieveSwitchSchedulesReference);
        
        /// <summary>
        /// The backing field for the SwitchSchedules property
        /// </summary>
        private SwitchSwitchSchedulesCollection _switchSchedules;
        
        private static Lazy<ITypedElement> _compositeSwitchReference = new Lazy<ITypedElement>(RetrieveCompositeSwitchReference);
        
        /// <summary>
        /// The backing field for the CompositeSwitch property
        /// </summary>
        private ICompositeSwitch _compositeSwitch;
        
        private static IClass _classInstance;
        
        public Switch()
        {
            this._loadMgmtFunctions = new SwitchLoadMgmtFunctionsCollection(this);
            this._loadMgmtFunctions.CollectionChanging += this.LoadMgmtFunctionsCollectionChanging;
            this._loadMgmtFunctions.CollectionChanged += this.LoadMgmtFunctionsCollectionChanged;
            this._connectDisconnectFunctions = new SwitchConnectDisconnectFunctionsCollection(this);
            this._connectDisconnectFunctions.CollectionChanging += this.ConnectDisconnectFunctionsCollectionChanging;
            this._connectDisconnectFunctions.CollectionChanged += this.ConnectDisconnectFunctionsCollectionChanged;
            this._switchingOperations = new SwitchSwitchingOperationsCollection(this);
            this._switchingOperations.CollectionChanging += this.SwitchingOperationsCollectionChanging;
            this._switchingOperations.CollectionChanged += this.SwitchingOperationsCollectionChanged;
            this._switchSchedules = new SwitchSwitchSchedulesCollection(this);
            this._switchSchedules.CollectionChanging += this.SwitchSchedulesCollectionChanging;
            this._switchSchedules.CollectionChanged += this.SwitchSchedulesCollectionChanged;
        }
        
        /// <summary>
        /// The retained property
        /// </summary>
        [XmlElementNameAttribute("retained")]
        [XmlAttributeAttribute(true)]
        public virtual bool Retained
        {
            get
            {
                return this._retained;
            }
            set
            {
                if ((this._retained != value))
                {
                    bool old = this._retained;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRetainedChanging(e);
                    this.OnPropertyChanging("Retained", e, _retainedAttribute);
                    this._retained = value;
                    this.OnRetainedChanged(e);
                    this.OnPropertyChanged("Retained", e, _retainedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The switchOnDate property
        /// </summary>
        [XmlElementNameAttribute("switchOnDate")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime SwitchOnDate
        {
            get
            {
                return this._switchOnDate;
            }
            set
            {
                if ((this._switchOnDate != value))
                {
                    DateTime old = this._switchOnDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSwitchOnDateChanging(e);
                    this.OnPropertyChanging("SwitchOnDate", e, _switchOnDateAttribute);
                    this._switchOnDate = value;
                    this.OnSwitchOnDateChanged(e);
                    this.OnPropertyChanged("SwitchOnDate", e, _switchOnDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The normalOpen property
        /// </summary>
        [XmlElementNameAttribute("normalOpen")]
        [XmlAttributeAttribute(true)]
        public virtual bool NormalOpen
        {
            get
            {
                return this._normalOpen;
            }
            set
            {
                if ((this._normalOpen != value))
                {
                    bool old = this._normalOpen;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNormalOpenChanging(e);
                    this.OnPropertyChanging("NormalOpen", e, _normalOpenAttribute);
                    this._normalOpen = value;
                    this.OnNormalOpenChanged(e);
                    this.OnPropertyChanged("NormalOpen", e, _normalOpenAttribute);
                }
            }
        }
        
        /// <summary>
        /// The switchOnCount property
        /// </summary>
        [XmlElementNameAttribute("switchOnCount")]
        [XmlAttributeAttribute(true)]
        public virtual int SwitchOnCount
        {
            get
            {
                return this._switchOnCount;
            }
            set
            {
                if ((this._switchOnCount != value))
                {
                    int old = this._switchOnCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSwitchOnCountChanging(e);
                    this.OnPropertyChanging("SwitchOnCount", e, _switchOnCountAttribute);
                    this._switchOnCount = value;
                    this.OnSwitchOnCountChanged(e);
                    this.OnPropertyChanged("SwitchOnCount", e, _switchOnCountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The LoadMgmtFunctions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Switches")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILoadMgmtFunction> LoadMgmtFunctions
        {
            get
            {
                return this._loadMgmtFunctions;
            }
        }
        
        /// <summary>
        /// The ConnectDisconnectFunctions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Switches")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IConnectDisconnectFunction> ConnectDisconnectFunctions
        {
            get
            {
                return this._connectDisconnectFunctions;
            }
        }
        
        /// <summary>
        /// The SwitchingOperations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Switches")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISwitchingOperation> SwitchingOperations
        {
            get
            {
                return this._switchingOperations;
            }
        }
        
        /// <summary>
        /// The SwitchSchedules property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Switch")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISwitchSchedule> SwitchSchedules
        {
            get
            {
                return this._switchSchedules;
            }
        }
        
        /// <summary>
        /// The CompositeSwitch property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Switches")]
        public virtual ICompositeSwitch CompositeSwitch
        {
            get
            {
                return this._compositeSwitch;
            }
            set
            {
                if ((this._compositeSwitch != value))
                {
                    ICompositeSwitch old = this._compositeSwitch;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCompositeSwitchChanging(e);
                    this.OnPropertyChanging("CompositeSwitch", e, _compositeSwitchReference);
                    this._compositeSwitch = value;
                    if ((old != null))
                    {
                        old.Switches.Remove(this);
                        old.Deleted -= this.OnResetCompositeSwitch;
                    }
                    if ((value != null))
                    {
                        value.Switches.Add(this);
                        value.Deleted += this.OnResetCompositeSwitch;
                    }
                    this.OnCompositeSwitchChanged(e);
                    this.OnPropertyChanged("CompositeSwitch", e, _compositeSwitchReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SwitchReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/Switch")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Retained property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RetainedChanging;
        
        /// <summary>
        /// Gets fired when the Retained property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RetainedChanged;
        
        /// <summary>
        /// Gets fired before the SwitchOnDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwitchOnDateChanging;
        
        /// <summary>
        /// Gets fired when the SwitchOnDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwitchOnDateChanged;
        
        /// <summary>
        /// Gets fired before the NormalOpen property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormalOpenChanging;
        
        /// <summary>
        /// Gets fired when the NormalOpen property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NormalOpenChanged;
        
        /// <summary>
        /// Gets fired before the SwitchOnCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwitchOnCountChanging;
        
        /// <summary>
        /// Gets fired when the SwitchOnCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SwitchOnCountChanged;
        
        /// <summary>
        /// Gets fired before the CompositeSwitch property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CompositeSwitchChanging;
        
        /// <summary>
        /// Gets fired when the CompositeSwitch property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CompositeSwitchChanged;
        
        private static ITypedElement RetrieveRetainedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Switch.ClassInstance)).Resolve("retained")));
        }
        
        /// <summary>
        /// Raises the RetainedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRetainedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RetainedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RetainedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRetainedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RetainedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSwitchOnDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Switch.ClassInstance)).Resolve("switchOnDate")));
        }
        
        /// <summary>
        /// Raises the SwitchOnDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwitchOnDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwitchOnDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SwitchOnDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwitchOnDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwitchOnDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNormalOpenAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Switch.ClassInstance)).Resolve("normalOpen")));
        }
        
        /// <summary>
        /// Raises the NormalOpenChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormalOpenChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormalOpenChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NormalOpenChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNormalOpenChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NormalOpenChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSwitchOnCountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Switch.ClassInstance)).Resolve("switchOnCount")));
        }
        
        /// <summary>
        /// Raises the SwitchOnCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwitchOnCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwitchOnCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SwitchOnCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSwitchOnCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SwitchOnCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLoadMgmtFunctionsReference()
        {
            return ((ITypedElement)(((ModelElement)(Switch.ClassInstance)).Resolve("LoadMgmtFunctions")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the LoadMgmtFunctions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LoadMgmtFunctionsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("LoadMgmtFunctions", e, _loadMgmtFunctionsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the LoadMgmtFunctions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LoadMgmtFunctionsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("LoadMgmtFunctions", e, _loadMgmtFunctionsReference);
        }
        
        private static ITypedElement RetrieveConnectDisconnectFunctionsReference()
        {
            return ((ITypedElement)(((ModelElement)(Switch.ClassInstance)).Resolve("ConnectDisconnectFunctions")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ConnectDisconnectFunctions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConnectDisconnectFunctionsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ConnectDisconnectFunctions", e, _connectDisconnectFunctionsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ConnectDisconnectFunctions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConnectDisconnectFunctionsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ConnectDisconnectFunctions", e, _connectDisconnectFunctionsReference);
        }
        
        private static ITypedElement RetrieveSwitchingOperationsReference()
        {
            return ((ITypedElement)(((ModelElement)(Switch.ClassInstance)).Resolve("SwitchingOperations")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SwitchingOperations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SwitchingOperationsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("SwitchingOperations", e, _switchingOperationsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SwitchingOperations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SwitchingOperationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SwitchingOperations", e, _switchingOperationsReference);
        }
        
        private static ITypedElement RetrieveSwitchSchedulesReference()
        {
            return ((ITypedElement)(((ModelElement)(Switch.ClassInstance)).Resolve("SwitchSchedules")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SwitchSchedules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SwitchSchedulesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("SwitchSchedules", e, _switchSchedulesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SwitchSchedules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SwitchSchedulesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SwitchSchedules", e, _switchSchedulesReference);
        }
        
        private static ITypedElement RetrieveCompositeSwitchReference()
        {
            return ((ITypedElement)(((ModelElement)(Switch.ClassInstance)).Resolve("CompositeSwitch")));
        }
        
        /// <summary>
        /// Raises the CompositeSwitchChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompositeSwitchChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CompositeSwitchChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CompositeSwitchChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCompositeSwitchChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CompositeSwitchChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CompositeSwitch property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCompositeSwitch(object sender, System.EventArgs eventArgs)
        {
            this.CompositeSwitch = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "RETAINED"))
            {
                return this.Retained;
            }
            if ((attribute == "SWITCHONDATE"))
            {
                return this.SwitchOnDate;
            }
            if ((attribute == "NORMALOPEN"))
            {
                return this.NormalOpen;
            }
            if ((attribute == "SWITCHONCOUNT"))
            {
                return this.SwitchOnCount;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "LOADMGMTFUNCTIONS"))
            {
                return this._loadMgmtFunctions;
            }
            if ((feature == "CONNECTDISCONNECTFUNCTIONS"))
            {
                return this._connectDisconnectFunctions;
            }
            if ((feature == "SWITCHINGOPERATIONS"))
            {
                return this._switchingOperations;
            }
            if ((feature == "SWITCHSCHEDULES"))
            {
                return this._switchSchedules;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "COMPOSITESWITCH"))
            {
                this.CompositeSwitch = ((ICompositeSwitch)(value));
                return;
            }
            if ((feature == "RETAINED"))
            {
                this.Retained = ((bool)(value));
                return;
            }
            if ((feature == "SWITCHONDATE"))
            {
                this.SwitchOnDate = ((DateTime)(value));
                return;
            }
            if ((feature == "NORMALOPEN"))
            {
                this.NormalOpen = ((bool)(value));
                return;
            }
            if ((feature == "SWITCHONCOUNT"))
            {
                this.SwitchOnCount = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CompositeSwitch"))
            {
                return new CompositeSwitchProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CompositeSwitch"))
            {
                return new CompositeSwitchProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/Switch")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Switch class
        /// </summary>
        public class SwitchReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Switch _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SwitchReferencedElementsCollection(Switch parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.LoadMgmtFunctions.Count);
                    count = (count + this._parent.ConnectDisconnectFunctions.Count);
                    count = (count + this._parent.SwitchingOperations.Count);
                    count = (count + this._parent.SwitchSchedules.Count);
                    if ((this._parent.CompositeSwitch != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.LoadMgmtFunctions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ConnectDisconnectFunctions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SwitchingOperations.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.SwitchSchedules.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CompositeSwitchChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.LoadMgmtFunctions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ConnectDisconnectFunctions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SwitchingOperations.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.SwitchSchedules.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CompositeSwitchChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ILoadMgmtFunction loadMgmtFunctionsCasted = item.As<ILoadMgmtFunction>();
                if ((loadMgmtFunctionsCasted != null))
                {
                    this._parent.LoadMgmtFunctions.Add(loadMgmtFunctionsCasted);
                }
                IConnectDisconnectFunction connectDisconnectFunctionsCasted = item.As<IConnectDisconnectFunction>();
                if ((connectDisconnectFunctionsCasted != null))
                {
                    this._parent.ConnectDisconnectFunctions.Add(connectDisconnectFunctionsCasted);
                }
                ISwitchingOperation switchingOperationsCasted = item.As<ISwitchingOperation>();
                if ((switchingOperationsCasted != null))
                {
                    this._parent.SwitchingOperations.Add(switchingOperationsCasted);
                }
                ISwitchSchedule switchSchedulesCasted = item.As<ISwitchSchedule>();
                if ((switchSchedulesCasted != null))
                {
                    this._parent.SwitchSchedules.Add(switchSchedulesCasted);
                }
                if ((this._parent.CompositeSwitch == null))
                {
                    ICompositeSwitch compositeSwitchCasted = item.As<ICompositeSwitch>();
                    if ((compositeSwitchCasted != null))
                    {
                        this._parent.CompositeSwitch = compositeSwitchCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.LoadMgmtFunctions.Clear();
                this._parent.ConnectDisconnectFunctions.Clear();
                this._parent.SwitchingOperations.Clear();
                this._parent.SwitchSchedules.Clear();
                this._parent.CompositeSwitch = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.LoadMgmtFunctions.Contains(item))
                {
                    return true;
                }
                if (this._parent.ConnectDisconnectFunctions.Contains(item))
                {
                    return true;
                }
                if (this._parent.SwitchingOperations.Contains(item))
                {
                    return true;
                }
                if (this._parent.SwitchSchedules.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.CompositeSwitch))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> loadMgmtFunctionsEnumerator = this._parent.LoadMgmtFunctions.GetEnumerator();
                try
                {
                    for (
                    ; loadMgmtFunctionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = loadMgmtFunctionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    loadMgmtFunctionsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> connectDisconnectFunctionsEnumerator = this._parent.ConnectDisconnectFunctions.GetEnumerator();
                try
                {
                    for (
                    ; connectDisconnectFunctionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = connectDisconnectFunctionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    connectDisconnectFunctionsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> switchingOperationsEnumerator = this._parent.SwitchingOperations.GetEnumerator();
                try
                {
                    for (
                    ; switchingOperationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = switchingOperationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    switchingOperationsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> switchSchedulesEnumerator = this._parent.SwitchSchedules.GetEnumerator();
                try
                {
                    for (
                    ; switchSchedulesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = switchSchedulesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    switchSchedulesEnumerator.Dispose();
                }
                if ((this._parent.CompositeSwitch != null))
                {
                    array[arrayIndex] = this._parent.CompositeSwitch;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ILoadMgmtFunction loadMgmtFunctionItem = item.As<ILoadMgmtFunction>();
                if (((loadMgmtFunctionItem != null) 
                            && this._parent.LoadMgmtFunctions.Remove(loadMgmtFunctionItem)))
                {
                    return true;
                }
                IConnectDisconnectFunction connectDisconnectFunctionItem = item.As<IConnectDisconnectFunction>();
                if (((connectDisconnectFunctionItem != null) 
                            && this._parent.ConnectDisconnectFunctions.Remove(connectDisconnectFunctionItem)))
                {
                    return true;
                }
                ISwitchingOperation switchingOperationItem = item.As<ISwitchingOperation>();
                if (((switchingOperationItem != null) 
                            && this._parent.SwitchingOperations.Remove(switchingOperationItem)))
                {
                    return true;
                }
                ISwitchSchedule switchScheduleItem = item.As<ISwitchSchedule>();
                if (((switchScheduleItem != null) 
                            && this._parent.SwitchSchedules.Remove(switchScheduleItem)))
                {
                    return true;
                }
                if ((this._parent.CompositeSwitch == item))
                {
                    this._parent.CompositeSwitch = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.LoadMgmtFunctions).Concat(this._parent.ConnectDisconnectFunctions).Concat(this._parent.SwitchingOperations).Concat(this._parent.SwitchSchedules).Concat(this._parent.CompositeSwitch).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the retained property
        /// </summary>
        private sealed class RetainedProxy : ModelPropertyChange<ISwitch, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RetainedProxy(ISwitch modelElement) : 
                    base(modelElement, "retained")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Retained;
                }
                set
                {
                    this.ModelElement.Retained = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the switchOnDate property
        /// </summary>
        private sealed class SwitchOnDateProxy : ModelPropertyChange<ISwitch, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SwitchOnDateProxy(ISwitch modelElement) : 
                    base(modelElement, "switchOnDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.SwitchOnDate;
                }
                set
                {
                    this.ModelElement.SwitchOnDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the normalOpen property
        /// </summary>
        private sealed class NormalOpenProxy : ModelPropertyChange<ISwitch, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NormalOpenProxy(ISwitch modelElement) : 
                    base(modelElement, "normalOpen")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.NormalOpen;
                }
                set
                {
                    this.ModelElement.NormalOpen = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the switchOnCount property
        /// </summary>
        private sealed class SwitchOnCountProxy : ModelPropertyChange<ISwitch, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SwitchOnCountProxy(ISwitch modelElement) : 
                    base(modelElement, "switchOnCount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.SwitchOnCount;
                }
                set
                {
                    this.ModelElement.SwitchOnCount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CompositeSwitch property
        /// </summary>
        private sealed class CompositeSwitchProxy : ModelPropertyChange<ISwitch, ICompositeSwitch>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CompositeSwitchProxy(ISwitch modelElement) : 
                    base(modelElement, "CompositeSwitch")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICompositeSwitch Value
            {
                get
                {
                    return this.ModelElement.CompositeSwitch;
                }
                set
                {
                    this.ModelElement.CompositeSwitch = value;
                }
            }
        }
    }
}

