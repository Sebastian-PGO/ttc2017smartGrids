using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.LoadControl;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Wires
{
    
    
    /// <summary>
    /// The default implementation of the FrequencyConverter class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Wires")]
    [XmlNamespacePrefixAttribute("cimWires")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/FrequencyConverter")]
    [DebuggerDisplayAttribute("FrequencyConverter {UUID}")]
    public partial class FrequencyConverter : RegulatingCondEq, IFrequencyConverter, IModelElement
    {
        
        /// <summary>
        /// The backing field for the OperatingMode property
        /// </summary>
        private string _operatingMode;
        
        private static Lazy<ITypedElement> _operatingModeAttribute = new Lazy<ITypedElement>(RetrieveOperatingModeAttribute);
        
        /// <summary>
        /// The backing field for the Frequency property
        /// </summary>
        private float _frequency;
        
        private static Lazy<ITypedElement> _frequencyAttribute = new Lazy<ITypedElement>(RetrieveFrequencyAttribute);
        
        /// <summary>
        /// The backing field for the MaxP property
        /// </summary>
        private float _maxP;
        
        private static Lazy<ITypedElement> _maxPAttribute = new Lazy<ITypedElement>(RetrieveMaxPAttribute);
        
        /// <summary>
        /// The backing field for the MaxU property
        /// </summary>
        private float _maxU;
        
        private static Lazy<ITypedElement> _maxUAttribute = new Lazy<ITypedElement>(RetrieveMaxUAttribute);
        
        /// <summary>
        /// The backing field for the MinU property
        /// </summary>
        private float _minU;
        
        private static Lazy<ITypedElement> _minUAttribute = new Lazy<ITypedElement>(RetrieveMinUAttribute);
        
        /// <summary>
        /// The backing field for the MinP property
        /// </summary>
        private float _minP;
        
        private static Lazy<ITypedElement> _minPAttribute = new Lazy<ITypedElement>(RetrieveMinPAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The operatingMode property
        /// </summary>
        [XmlElementNameAttribute("operatingMode")]
        [XmlAttributeAttribute(true)]
        public virtual string OperatingMode
        {
            get
            {
                return this._operatingMode;
            }
            set
            {
                if ((this._operatingMode != value))
                {
                    string old = this._operatingMode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOperatingModeChanging(e);
                    this.OnPropertyChanging("OperatingMode", e, _operatingModeAttribute);
                    this._operatingMode = value;
                    this.OnOperatingModeChanged(e);
                    this.OnPropertyChanged("OperatingMode", e, _operatingModeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The frequency property
        /// </summary>
        [XmlElementNameAttribute("frequency")]
        [XmlAttributeAttribute(true)]
        public virtual float Frequency
        {
            get
            {
                return this._frequency;
            }
            set
            {
                if ((this._frequency != value))
                {
                    float old = this._frequency;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFrequencyChanging(e);
                    this.OnPropertyChanging("Frequency", e, _frequencyAttribute);
                    this._frequency = value;
                    this.OnFrequencyChanged(e);
                    this.OnPropertyChanged("Frequency", e, _frequencyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The maxP property
        /// </summary>
        [XmlElementNameAttribute("maxP")]
        [XmlAttributeAttribute(true)]
        public virtual float MaxP
        {
            get
            {
                return this._maxP;
            }
            set
            {
                if ((this._maxP != value))
                {
                    float old = this._maxP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxPChanging(e);
                    this.OnPropertyChanging("MaxP", e, _maxPAttribute);
                    this._maxP = value;
                    this.OnMaxPChanged(e);
                    this.OnPropertyChanged("MaxP", e, _maxPAttribute);
                }
            }
        }
        
        /// <summary>
        /// The maxU property
        /// </summary>
        [XmlElementNameAttribute("maxU")]
        [XmlAttributeAttribute(true)]
        public virtual float MaxU
        {
            get
            {
                return this._maxU;
            }
            set
            {
                if ((this._maxU != value))
                {
                    float old = this._maxU;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaxUChanging(e);
                    this.OnPropertyChanging("MaxU", e, _maxUAttribute);
                    this._maxU = value;
                    this.OnMaxUChanged(e);
                    this.OnPropertyChanged("MaxU", e, _maxUAttribute);
                }
            }
        }
        
        /// <summary>
        /// The minU property
        /// </summary>
        [XmlElementNameAttribute("minU")]
        [XmlAttributeAttribute(true)]
        public virtual float MinU
        {
            get
            {
                return this._minU;
            }
            set
            {
                if ((this._minU != value))
                {
                    float old = this._minU;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinUChanging(e);
                    this.OnPropertyChanging("MinU", e, _minUAttribute);
                    this._minU = value;
                    this.OnMinUChanged(e);
                    this.OnPropertyChanged("MinU", e, _minUAttribute);
                }
            }
        }
        
        /// <summary>
        /// The minP property
        /// </summary>
        [XmlElementNameAttribute("minP")]
        [XmlAttributeAttribute(true)]
        public virtual float MinP
        {
            get
            {
                return this._minP;
            }
            set
            {
                if ((this._minP != value))
                {
                    float old = this._minP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMinPChanging(e);
                    this.OnPropertyChanging("MinP", e, _minPAttribute);
                    this._minP = value;
                    this.OnMinPChanged(e);
                    this.OnPropertyChanged("MinP", e, _minPAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/FrequencyConverter")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the OperatingMode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperatingModeChanging;
        
        /// <summary>
        /// Gets fired when the OperatingMode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperatingModeChanged;
        
        /// <summary>
        /// Gets fired before the Frequency property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrequencyChanging;
        
        /// <summary>
        /// Gets fired when the Frequency property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FrequencyChanged;
        
        /// <summary>
        /// Gets fired before the MaxP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxPChanging;
        
        /// <summary>
        /// Gets fired when the MaxP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxPChanged;
        
        /// <summary>
        /// Gets fired before the MaxU property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxUChanging;
        
        /// <summary>
        /// Gets fired when the MaxU property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaxUChanged;
        
        /// <summary>
        /// Gets fired before the MinU property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinUChanging;
        
        /// <summary>
        /// Gets fired when the MinU property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinUChanged;
        
        /// <summary>
        /// Gets fired before the MinP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinPChanging;
        
        /// <summary>
        /// Gets fired when the MinP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MinPChanged;
        
        private static ITypedElement RetrieveOperatingModeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FrequencyConverter.ClassInstance)).Resolve("operatingMode")));
        }
        
        /// <summary>
        /// Raises the OperatingModeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperatingModeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperatingModeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OperatingModeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperatingModeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperatingModeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFrequencyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FrequencyConverter.ClassInstance)).Resolve("frequency")));
        }
        
        /// <summary>
        /// Raises the FrequencyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrequencyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrequencyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FrequencyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFrequencyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FrequencyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaxPAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FrequencyConverter.ClassInstance)).Resolve("maxP")));
        }
        
        /// <summary>
        /// Raises the MaxPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaxUAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FrequencyConverter.ClassInstance)).Resolve("maxU")));
        }
        
        /// <summary>
        /// Raises the MaxUChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxUChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxUChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaxUChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaxUChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaxUChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMinUAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FrequencyConverter.ClassInstance)).Resolve("minU")));
        }
        
        /// <summary>
        /// Raises the MinUChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinUChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinUChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinUChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinUChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinUChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMinPAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FrequencyConverter.ClassInstance)).Resolve("minP")));
        }
        
        /// <summary>
        /// Raises the MinPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MinPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMinPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MinPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "OPERATINGMODE"))
            {
                return this.OperatingMode;
            }
            if ((attribute == "FREQUENCY"))
            {
                return this.Frequency;
            }
            if ((attribute == "MAXP"))
            {
                return this.MaxP;
            }
            if ((attribute == "MAXU"))
            {
                return this.MaxU;
            }
            if ((attribute == "MINU"))
            {
                return this.MinU;
            }
            if ((attribute == "MINP"))
            {
                return this.MinP;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OPERATINGMODE"))
            {
                this.OperatingMode = ((string)(value));
                return;
            }
            if ((feature == "FREQUENCY"))
            {
                this.Frequency = ((float)(value));
                return;
            }
            if ((feature == "MAXP"))
            {
                this.MaxP = ((float)(value));
                return;
            }
            if ((feature == "MAXU"))
            {
                this.MaxU = ((float)(value));
                return;
            }
            if ((feature == "MINU"))
            {
                this.MinU = ((float)(value));
                return;
            }
            if ((feature == "MINP"))
            {
                this.MinP = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/FrequencyConverter")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the operatingMode property
        /// </summary>
        private sealed class OperatingModeProxy : ModelPropertyChange<IFrequencyConverter, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OperatingModeProxy(IFrequencyConverter modelElement) : 
                    base(modelElement, "operatingMode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.OperatingMode;
                }
                set
                {
                    this.ModelElement.OperatingMode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the frequency property
        /// </summary>
        private sealed class FrequencyProxy : ModelPropertyChange<IFrequencyConverter, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FrequencyProxy(IFrequencyConverter modelElement) : 
                    base(modelElement, "frequency")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Frequency;
                }
                set
                {
                    this.ModelElement.Frequency = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maxP property
        /// </summary>
        private sealed class MaxPProxy : ModelPropertyChange<IFrequencyConverter, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxPProxy(IFrequencyConverter modelElement) : 
                    base(modelElement, "maxP")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MaxP;
                }
                set
                {
                    this.ModelElement.MaxP = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the maxU property
        /// </summary>
        private sealed class MaxUProxy : ModelPropertyChange<IFrequencyConverter, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaxUProxy(IFrequencyConverter modelElement) : 
                    base(modelElement, "maxU")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MaxU;
                }
                set
                {
                    this.ModelElement.MaxU = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minU property
        /// </summary>
        private sealed class MinUProxy : ModelPropertyChange<IFrequencyConverter, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinUProxy(IFrequencyConverter modelElement) : 
                    base(modelElement, "minU")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinU;
                }
                set
                {
                    this.ModelElement.MinU = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the minP property
        /// </summary>
        private sealed class MinPProxy : ModelPropertyChange<IFrequencyConverter, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MinPProxy(IFrequencyConverter modelElement) : 
                    base(modelElement, "minP")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.MinP;
                }
                set
                {
                    this.ModelElement.MinP = value;
                }
            }
        }
    }
}

