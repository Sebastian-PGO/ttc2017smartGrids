using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.LoadControl;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Wires
{
    
    
    /// <summary>
    /// The public interface for RegulatingControl
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(RegulatingControl))]
    [XmlDefaultImplementationTypeAttribute(typeof(RegulatingControl))]
    public interface IRegulatingControl : IModelElement, IPowerSystemResource
    {
        
        /// <summary>
        /// The mode property
        /// </summary>
        Nullable<RegulatingControlModeKind> Mode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The targetRange property
        /// </summary>
        float TargetRange
        {
            get;
            set;
        }
        
        /// <summary>
        /// The targetValue property
        /// </summary>
        float TargetValue
        {
            get;
            set;
        }
        
        /// <summary>
        /// The discrete property
        /// </summary>
        bool Discrete
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TapChanger property
        /// </summary>
        IOrderedSetExpression<ITapChanger> TapChanger
        {
            get;
        }
        
        /// <summary>
        /// The Terminal property
        /// </summary>
        ITerminal Terminal
        {
            get;
            set;
        }
        
        /// <summary>
        /// The RegulatingCondEq property
        /// </summary>
        IOrderedSetExpression<IRegulatingCondEq> RegulatingCondEq
        {
            get;
        }
        
        /// <summary>
        /// The RegulationSchedule property
        /// </summary>
        IOrderedSetExpression<IRegulationSchedule> RegulationSchedule
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the Mode property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ModeChanging;
        
        /// <summary>
        /// Gets fired when the Mode property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ModeChanged;
        
        /// <summary>
        /// Gets fired before the TargetRange property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TargetRangeChanging;
        
        /// <summary>
        /// Gets fired when the TargetRange property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TargetRangeChanged;
        
        /// <summary>
        /// Gets fired before the TargetValue property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TargetValueChanging;
        
        /// <summary>
        /// Gets fired when the TargetValue property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TargetValueChanged;
        
        /// <summary>
        /// Gets fired before the Discrete property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DiscreteChanging;
        
        /// <summary>
        /// Gets fired when the Discrete property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DiscreteChanged;
        
        /// <summary>
        /// Gets fired before the Terminal property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TerminalChanging;
        
        /// <summary>
        /// Gets fired when the Terminal property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TerminalChanged;
    }
}

