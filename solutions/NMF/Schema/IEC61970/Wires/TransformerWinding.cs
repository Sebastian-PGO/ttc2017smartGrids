using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.LoadControl;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Wires
{
    
    
    /// <summary>
    /// The default implementation of the TransformerWinding class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Wires")]
    [XmlNamespacePrefixAttribute("cimWires")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/TransformerWinding")]
    [DebuggerDisplayAttribute("TransformerWinding {UUID}")]
    public partial class TransformerWinding : ConductingEquipment, ITransformerWinding, IModelElement
    {
        
        /// <summary>
        /// The backing field for the G0 property
        /// </summary>
        private float _g0;
        
        private static Lazy<ITypedElement> _g0Attribute = new Lazy<ITypedElement>(RetrieveG0Attribute);
        
        /// <summary>
        /// The backing field for the Rground property
        /// </summary>
        private float _rground;
        
        private static Lazy<ITypedElement> _rgroundAttribute = new Lazy<ITypedElement>(RetrieveRgroundAttribute);
        
        /// <summary>
        /// The backing field for the Grounded property
        /// </summary>
        private bool _grounded;
        
        private static Lazy<ITypedElement> _groundedAttribute = new Lazy<ITypedElement>(RetrieveGroundedAttribute);
        
        /// <summary>
        /// The backing field for the ShortTermS property
        /// </summary>
        private float _shortTermS;
        
        private static Lazy<ITypedElement> _shortTermSAttribute = new Lazy<ITypedElement>(RetrieveShortTermSAttribute);
        
        /// <summary>
        /// The backing field for the G property
        /// </summary>
        private float _g;
        
        private static Lazy<ITypedElement> _gAttribute = new Lazy<ITypedElement>(RetrieveGAttribute);
        
        /// <summary>
        /// The backing field for the B property
        /// </summary>
        private float _b;
        
        private static Lazy<ITypedElement> _bAttribute = new Lazy<ITypedElement>(RetrieveBAttribute);
        
        /// <summary>
        /// The backing field for the X property
        /// </summary>
        private float _x;
        
        private static Lazy<ITypedElement> _xAttribute = new Lazy<ITypedElement>(RetrieveXAttribute);
        
        /// <summary>
        /// The backing field for the R property
        /// </summary>
        private float _r;
        
        private static Lazy<ITypedElement> _rAttribute = new Lazy<ITypedElement>(RetrieveRAttribute);
        
        /// <summary>
        /// The backing field for the R0 property
        /// </summary>
        private float _r0;
        
        private static Lazy<ITypedElement> _r0Attribute = new Lazy<ITypedElement>(RetrieveR0Attribute);
        
        /// <summary>
        /// The backing field for the B0 property
        /// </summary>
        private float _b0;
        
        private static Lazy<ITypedElement> _b0Attribute = new Lazy<ITypedElement>(RetrieveB0Attribute);
        
        /// <summary>
        /// The backing field for the WindingType property
        /// </summary>
        private Nullable<WindingType> _windingType;
        
        private static Lazy<ITypedElement> _windingTypeAttribute = new Lazy<ITypedElement>(RetrieveWindingTypeAttribute);
        
        /// <summary>
        /// The backing field for the X0 property
        /// </summary>
        private float _x0;
        
        private static Lazy<ITypedElement> _x0Attribute = new Lazy<ITypedElement>(RetrieveX0Attribute);
        
        /// <summary>
        /// The backing field for the RatedS property
        /// </summary>
        private float _ratedS;
        
        private static Lazy<ITypedElement> _ratedSAttribute = new Lazy<ITypedElement>(RetrieveRatedSAttribute);
        
        /// <summary>
        /// The backing field for the RatedU property
        /// </summary>
        private float _ratedU;
        
        private static Lazy<ITypedElement> _ratedUAttribute = new Lazy<ITypedElement>(RetrieveRatedUAttribute);
        
        /// <summary>
        /// The backing field for the InsulationU property
        /// </summary>
        private float _insulationU;
        
        private static Lazy<ITypedElement> _insulationUAttribute = new Lazy<ITypedElement>(RetrieveInsulationUAttribute);
        
        /// <summary>
        /// The backing field for the EmergencyS property
        /// </summary>
        private float _emergencyS;
        
        private static Lazy<ITypedElement> _emergencySAttribute = new Lazy<ITypedElement>(RetrieveEmergencySAttribute);
        
        /// <summary>
        /// The backing field for the ConnectionType property
        /// </summary>
        private Nullable<WindingConnection> _connectionType;
        
        private static Lazy<ITypedElement> _connectionTypeAttribute = new Lazy<ITypedElement>(RetrieveConnectionTypeAttribute);
        
        /// <summary>
        /// The backing field for the Xground property
        /// </summary>
        private float _xground;
        
        private static Lazy<ITypedElement> _xgroundAttribute = new Lazy<ITypedElement>(RetrieveXgroundAttribute);
        
        private static Lazy<ITypedElement> _to_WindingTestReference = new Lazy<ITypedElement>(RetrieveTo_WindingTestReference);
        
        /// <summary>
        /// The backing field for the To_WindingTest property
        /// </summary>
        private TransformerWindingTo_WindingTestCollection _to_WindingTest;
        
        private static Lazy<ITypedElement> _phaseTapChangerReference = new Lazy<ITypedElement>(RetrievePhaseTapChangerReference);
        
        /// <summary>
        /// The backing field for the PhaseTapChanger property
        /// </summary>
        private IPhaseTapChanger _phaseTapChanger;
        
        private static Lazy<ITypedElement> _powerTransformerReference = new Lazy<ITypedElement>(RetrievePowerTransformerReference);
        
        /// <summary>
        /// The backing field for the PowerTransformer property
        /// </summary>
        private IPowerTransformer _powerTransformer;
        
        private static Lazy<ITypedElement> _from_WindingTestReference = new Lazy<ITypedElement>(RetrieveFrom_WindingTestReference);
        
        /// <summary>
        /// The backing field for the From_WindingTest property
        /// </summary>
        private TransformerWindingFrom_WindingTestCollection _from_WindingTest;
        
        private static Lazy<ITypedElement> _ratioTapChangerReference = new Lazy<ITypedElement>(RetrieveRatioTapChangerReference);
        
        /// <summary>
        /// The backing field for the RatioTapChanger property
        /// </summary>
        private IRatioTapChanger _ratioTapChanger;
        
        private static IClass _classInstance;
        
        public TransformerWinding()
        {
            this._to_WindingTest = new TransformerWindingTo_WindingTestCollection(this);
            this._to_WindingTest.CollectionChanging += this.To_WindingTestCollectionChanging;
            this._to_WindingTest.CollectionChanged += this.To_WindingTestCollectionChanged;
            this._from_WindingTest = new TransformerWindingFrom_WindingTestCollection(this);
            this._from_WindingTest.CollectionChanging += this.From_WindingTestCollectionChanging;
            this._from_WindingTest.CollectionChanged += this.From_WindingTestCollectionChanged;
        }
        
        /// <summary>
        /// The g0 property
        /// </summary>
        [XmlElementNameAttribute("g0")]
        [XmlAttributeAttribute(true)]
        public virtual float G0
        {
            get
            {
                return this._g0;
            }
            set
            {
                if ((this._g0 != value))
                {
                    float old = this._g0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnG0Changing(e);
                    this.OnPropertyChanging("G0", e, _g0Attribute);
                    this._g0 = value;
                    this.OnG0Changed(e);
                    this.OnPropertyChanged("G0", e, _g0Attribute);
                }
            }
        }
        
        /// <summary>
        /// The rground property
        /// </summary>
        [XmlElementNameAttribute("rground")]
        [XmlAttributeAttribute(true)]
        public virtual float Rground
        {
            get
            {
                return this._rground;
            }
            set
            {
                if ((this._rground != value))
                {
                    float old = this._rground;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRgroundChanging(e);
                    this.OnPropertyChanging("Rground", e, _rgroundAttribute);
                    this._rground = value;
                    this.OnRgroundChanged(e);
                    this.OnPropertyChanged("Rground", e, _rgroundAttribute);
                }
            }
        }
        
        /// <summary>
        /// The grounded property
        /// </summary>
        [XmlElementNameAttribute("grounded")]
        [XmlAttributeAttribute(true)]
        public virtual bool Grounded
        {
            get
            {
                return this._grounded;
            }
            set
            {
                if ((this._grounded != value))
                {
                    bool old = this._grounded;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGroundedChanging(e);
                    this.OnPropertyChanging("Grounded", e, _groundedAttribute);
                    this._grounded = value;
                    this.OnGroundedChanged(e);
                    this.OnPropertyChanged("Grounded", e, _groundedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The shortTermS property
        /// </summary>
        [XmlElementNameAttribute("shortTermS")]
        [XmlAttributeAttribute(true)]
        public virtual float ShortTermS
        {
            get
            {
                return this._shortTermS;
            }
            set
            {
                if ((this._shortTermS != value))
                {
                    float old = this._shortTermS;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnShortTermSChanging(e);
                    this.OnPropertyChanging("ShortTermS", e, _shortTermSAttribute);
                    this._shortTermS = value;
                    this.OnShortTermSChanged(e);
                    this.OnPropertyChanged("ShortTermS", e, _shortTermSAttribute);
                }
            }
        }
        
        /// <summary>
        /// The g property
        /// </summary>
        [XmlElementNameAttribute("g")]
        [XmlAttributeAttribute(true)]
        public virtual float G
        {
            get
            {
                return this._g;
            }
            set
            {
                if ((this._g != value))
                {
                    float old = this._g;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGChanging(e);
                    this.OnPropertyChanging("G", e, _gAttribute);
                    this._g = value;
                    this.OnGChanged(e);
                    this.OnPropertyChanged("G", e, _gAttribute);
                }
            }
        }
        
        /// <summary>
        /// The b property
        /// </summary>
        [XmlElementNameAttribute("b")]
        [XmlAttributeAttribute(true)]
        public virtual float B
        {
            get
            {
                return this._b;
            }
            set
            {
                if ((this._b != value))
                {
                    float old = this._b;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBChanging(e);
                    this.OnPropertyChanging("B", e, _bAttribute);
                    this._b = value;
                    this.OnBChanged(e);
                    this.OnPropertyChanged("B", e, _bAttribute);
                }
            }
        }
        
        /// <summary>
        /// The x property
        /// </summary>
        [XmlElementNameAttribute("x")]
        [XmlAttributeAttribute(true)]
        public virtual float X
        {
            get
            {
                return this._x;
            }
            set
            {
                if ((this._x != value))
                {
                    float old = this._x;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXChanging(e);
                    this.OnPropertyChanging("X", e, _xAttribute);
                    this._x = value;
                    this.OnXChanged(e);
                    this.OnPropertyChanged("X", e, _xAttribute);
                }
            }
        }
        
        /// <summary>
        /// The r property
        /// </summary>
        [XmlElementNameAttribute("r")]
        [XmlAttributeAttribute(true)]
        public virtual float R
        {
            get
            {
                return this._r;
            }
            set
            {
                if ((this._r != value))
                {
                    float old = this._r;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRChanging(e);
                    this.OnPropertyChanging("R", e, _rAttribute);
                    this._r = value;
                    this.OnRChanged(e);
                    this.OnPropertyChanged("R", e, _rAttribute);
                }
            }
        }
        
        /// <summary>
        /// The r0 property
        /// </summary>
        [XmlElementNameAttribute("r0")]
        [XmlAttributeAttribute(true)]
        public virtual float R0
        {
            get
            {
                return this._r0;
            }
            set
            {
                if ((this._r0 != value))
                {
                    float old = this._r0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnR0Changing(e);
                    this.OnPropertyChanging("R0", e, _r0Attribute);
                    this._r0 = value;
                    this.OnR0Changed(e);
                    this.OnPropertyChanged("R0", e, _r0Attribute);
                }
            }
        }
        
        /// <summary>
        /// The b0 property
        /// </summary>
        [XmlElementNameAttribute("b0")]
        [XmlAttributeAttribute(true)]
        public virtual float B0
        {
            get
            {
                return this._b0;
            }
            set
            {
                if ((this._b0 != value))
                {
                    float old = this._b0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnB0Changing(e);
                    this.OnPropertyChanging("B0", e, _b0Attribute);
                    this._b0 = value;
                    this.OnB0Changed(e);
                    this.OnPropertyChanged("B0", e, _b0Attribute);
                }
            }
        }
        
        /// <summary>
        /// The windingType property
        /// </summary>
        [XmlElementNameAttribute("windingType")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<WindingType> WindingType
        {
            get
            {
                return this._windingType;
            }
            set
            {
                if ((this._windingType != value))
                {
                    Nullable<WindingType> old = this._windingType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWindingTypeChanging(e);
                    this.OnPropertyChanging("WindingType", e, _windingTypeAttribute);
                    this._windingType = value;
                    this.OnWindingTypeChanged(e);
                    this.OnPropertyChanged("WindingType", e, _windingTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The x0 property
        /// </summary>
        [XmlElementNameAttribute("x0")]
        [XmlAttributeAttribute(true)]
        public virtual float X0
        {
            get
            {
                return this._x0;
            }
            set
            {
                if ((this._x0 != value))
                {
                    float old = this._x0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnX0Changing(e);
                    this.OnPropertyChanging("X0", e, _x0Attribute);
                    this._x0 = value;
                    this.OnX0Changed(e);
                    this.OnPropertyChanged("X0", e, _x0Attribute);
                }
            }
        }
        
        /// <summary>
        /// The ratedS property
        /// </summary>
        [XmlElementNameAttribute("ratedS")]
        [XmlAttributeAttribute(true)]
        public virtual float RatedS
        {
            get
            {
                return this._ratedS;
            }
            set
            {
                if ((this._ratedS != value))
                {
                    float old = this._ratedS;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatedSChanging(e);
                    this.OnPropertyChanging("RatedS", e, _ratedSAttribute);
                    this._ratedS = value;
                    this.OnRatedSChanged(e);
                    this.OnPropertyChanged("RatedS", e, _ratedSAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ratedU property
        /// </summary>
        [XmlElementNameAttribute("ratedU")]
        [XmlAttributeAttribute(true)]
        public virtual float RatedU
        {
            get
            {
                return this._ratedU;
            }
            set
            {
                if ((this._ratedU != value))
                {
                    float old = this._ratedU;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatedUChanging(e);
                    this.OnPropertyChanging("RatedU", e, _ratedUAttribute);
                    this._ratedU = value;
                    this.OnRatedUChanged(e);
                    this.OnPropertyChanged("RatedU", e, _ratedUAttribute);
                }
            }
        }
        
        /// <summary>
        /// The insulationU property
        /// </summary>
        [XmlElementNameAttribute("insulationU")]
        [XmlAttributeAttribute(true)]
        public virtual float InsulationU
        {
            get
            {
                return this._insulationU;
            }
            set
            {
                if ((this._insulationU != value))
                {
                    float old = this._insulationU;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInsulationUChanging(e);
                    this.OnPropertyChanging("InsulationU", e, _insulationUAttribute);
                    this._insulationU = value;
                    this.OnInsulationUChanged(e);
                    this.OnPropertyChanged("InsulationU", e, _insulationUAttribute);
                }
            }
        }
        
        /// <summary>
        /// The emergencyS property
        /// </summary>
        [XmlElementNameAttribute("emergencyS")]
        [XmlAttributeAttribute(true)]
        public virtual float EmergencyS
        {
            get
            {
                return this._emergencyS;
            }
            set
            {
                if ((this._emergencyS != value))
                {
                    float old = this._emergencyS;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEmergencySChanging(e);
                    this.OnPropertyChanging("EmergencyS", e, _emergencySAttribute);
                    this._emergencyS = value;
                    this.OnEmergencySChanged(e);
                    this.OnPropertyChanged("EmergencyS", e, _emergencySAttribute);
                }
            }
        }
        
        /// <summary>
        /// The connectionType property
        /// </summary>
        [XmlElementNameAttribute("connectionType")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<WindingConnection> ConnectionType
        {
            get
            {
                return this._connectionType;
            }
            set
            {
                if ((this._connectionType != value))
                {
                    Nullable<WindingConnection> old = this._connectionType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConnectionTypeChanging(e);
                    this.OnPropertyChanging("ConnectionType", e, _connectionTypeAttribute);
                    this._connectionType = value;
                    this.OnConnectionTypeChanged(e);
                    this.OnPropertyChanged("ConnectionType", e, _connectionTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The xground property
        /// </summary>
        [XmlElementNameAttribute("xground")]
        [XmlAttributeAttribute(true)]
        public virtual float Xground
        {
            get
            {
                return this._xground;
            }
            set
            {
                if ((this._xground != value))
                {
                    float old = this._xground;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXgroundChanging(e);
                    this.OnPropertyChanging("Xground", e, _xgroundAttribute);
                    this._xground = value;
                    this.OnXgroundChanged(e);
                    this.OnPropertyChanged("Xground", e, _xgroundAttribute);
                }
            }
        }
        
        /// <summary>
        /// The To_WindingTest property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("To_TransformerWinding")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWindingTest> To_WindingTest
        {
            get
            {
                return this._to_WindingTest;
            }
        }
        
        /// <summary>
        /// The PhaseTapChanger property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TransformerWinding")]
        public virtual IPhaseTapChanger PhaseTapChanger
        {
            get
            {
                return this._phaseTapChanger;
            }
            set
            {
                if ((this._phaseTapChanger != value))
                {
                    IPhaseTapChanger old = this._phaseTapChanger;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhaseTapChangerChanging(e);
                    this.OnPropertyChanging("PhaseTapChanger", e, _phaseTapChangerReference);
                    this._phaseTapChanger = value;
                    if ((old != null))
                    {
                        old.TransformerWinding = null;
                        old.Deleted -= this.OnResetPhaseTapChanger;
                    }
                    if ((value != null))
                    {
                        value.TransformerWinding = this;
                        value.Deleted += this.OnResetPhaseTapChanger;
                    }
                    this.OnPhaseTapChangerChanged(e);
                    this.OnPropertyChanged("PhaseTapChanger", e, _phaseTapChangerReference);
                }
            }
        }
        
        /// <summary>
        /// The PowerTransformer property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TransformerWindings")]
        public virtual IPowerTransformer PowerTransformer
        {
            get
            {
                return this._powerTransformer;
            }
            set
            {
                if ((this._powerTransformer != value))
                {
                    IPowerTransformer old = this._powerTransformer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPowerTransformerChanging(e);
                    this.OnPropertyChanging("PowerTransformer", e, _powerTransformerReference);
                    this._powerTransformer = value;
                    if ((old != null))
                    {
                        old.TransformerWindings.Remove(this);
                        old.Deleted -= this.OnResetPowerTransformer;
                    }
                    if ((value != null))
                    {
                        value.TransformerWindings.Add(this);
                        value.Deleted += this.OnResetPowerTransformer;
                    }
                    this.OnPowerTransformerChanged(e);
                    this.OnPropertyChanged("PowerTransformer", e, _powerTransformerReference);
                }
            }
        }
        
        /// <summary>
        /// The From_WindingTest property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("From_TransformerWinding")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWindingTest> From_WindingTest
        {
            get
            {
                return this._from_WindingTest;
            }
        }
        
        /// <summary>
        /// The RatioTapChanger property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TransformerWinding")]
        public virtual IRatioTapChanger RatioTapChanger
        {
            get
            {
                return this._ratioTapChanger;
            }
            set
            {
                if ((this._ratioTapChanger != value))
                {
                    IRatioTapChanger old = this._ratioTapChanger;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatioTapChangerChanging(e);
                    this.OnPropertyChanging("RatioTapChanger", e, _ratioTapChangerReference);
                    this._ratioTapChanger = value;
                    if ((old != null))
                    {
                        old.TransformerWinding = null;
                        old.Deleted -= this.OnResetRatioTapChanger;
                    }
                    if ((value != null))
                    {
                        value.TransformerWinding = this;
                        value.Deleted += this.OnResetRatioTapChanger;
                    }
                    this.OnRatioTapChangerChanged(e);
                    this.OnPropertyChanged("RatioTapChanger", e, _ratioTapChangerReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TransformerWindingReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/TransformerWinding")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the G0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> G0Changing;
        
        /// <summary>
        /// Gets fired when the G0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> G0Changed;
        
        /// <summary>
        /// Gets fired before the Rground property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RgroundChanging;
        
        /// <summary>
        /// Gets fired when the Rground property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RgroundChanged;
        
        /// <summary>
        /// Gets fired before the Grounded property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GroundedChanging;
        
        /// <summary>
        /// Gets fired when the Grounded property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GroundedChanged;
        
        /// <summary>
        /// Gets fired before the ShortTermS property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShortTermSChanging;
        
        /// <summary>
        /// Gets fired when the ShortTermS property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShortTermSChanged;
        
        /// <summary>
        /// Gets fired before the G property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GChanging;
        
        /// <summary>
        /// Gets fired when the G property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GChanged;
        
        /// <summary>
        /// Gets fired before the B property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BChanging;
        
        /// <summary>
        /// Gets fired when the B property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BChanged;
        
        /// <summary>
        /// Gets fired before the X property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XChanging;
        
        /// <summary>
        /// Gets fired when the X property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XChanged;
        
        /// <summary>
        /// Gets fired before the R property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RChanging;
        
        /// <summary>
        /// Gets fired when the R property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RChanged;
        
        /// <summary>
        /// Gets fired before the R0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> R0Changing;
        
        /// <summary>
        /// Gets fired when the R0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> R0Changed;
        
        /// <summary>
        /// Gets fired before the B0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> B0Changing;
        
        /// <summary>
        /// Gets fired when the B0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> B0Changed;
        
        /// <summary>
        /// Gets fired before the WindingType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WindingTypeChanging;
        
        /// <summary>
        /// Gets fired when the WindingType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WindingTypeChanged;
        
        /// <summary>
        /// Gets fired before the X0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> X0Changing;
        
        /// <summary>
        /// Gets fired when the X0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> X0Changed;
        
        /// <summary>
        /// Gets fired before the RatedS property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedSChanging;
        
        /// <summary>
        /// Gets fired when the RatedS property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedSChanged;
        
        /// <summary>
        /// Gets fired before the RatedU property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedUChanging;
        
        /// <summary>
        /// Gets fired when the RatedU property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedUChanged;
        
        /// <summary>
        /// Gets fired before the InsulationU property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InsulationUChanging;
        
        /// <summary>
        /// Gets fired when the InsulationU property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InsulationUChanged;
        
        /// <summary>
        /// Gets fired before the EmergencyS property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EmergencySChanging;
        
        /// <summary>
        /// Gets fired when the EmergencyS property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EmergencySChanged;
        
        /// <summary>
        /// Gets fired before the ConnectionType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConnectionTypeChanging;
        
        /// <summary>
        /// Gets fired when the ConnectionType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConnectionTypeChanged;
        
        /// <summary>
        /// Gets fired before the Xground property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XgroundChanging;
        
        /// <summary>
        /// Gets fired when the Xground property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XgroundChanged;
        
        /// <summary>
        /// Gets fired before the PhaseTapChanger property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseTapChangerChanging;
        
        /// <summary>
        /// Gets fired when the PhaseTapChanger property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseTapChangerChanged;
        
        /// <summary>
        /// Gets fired before the PowerTransformer property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerTransformerChanging;
        
        /// <summary>
        /// Gets fired when the PowerTransformer property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerTransformerChanged;
        
        /// <summary>
        /// Gets fired before the RatioTapChanger property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatioTapChangerChanging;
        
        /// <summary>
        /// Gets fired when the RatioTapChanger property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatioTapChangerChanged;
        
        private static ITypedElement RetrieveG0Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("g0")));
        }
        
        /// <summary>
        /// Raises the G0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnG0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.G0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the G0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnG0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.G0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRgroundAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("rground")));
        }
        
        /// <summary>
        /// Raises the RgroundChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRgroundChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RgroundChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RgroundChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRgroundChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RgroundChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGroundedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("grounded")));
        }
        
        /// <summary>
        /// Raises the GroundedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGroundedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GroundedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GroundedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGroundedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GroundedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveShortTermSAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("shortTermS")));
        }
        
        /// <summary>
        /// Raises the ShortTermSChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShortTermSChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShortTermSChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ShortTermSChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShortTermSChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShortTermSChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("g")));
        }
        
        /// <summary>
        /// Raises the GChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("b")));
        }
        
        /// <summary>
        /// Raises the BChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveXAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("x")));
        }
        
        /// <summary>
        /// Raises the XChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("r")));
        }
        
        /// <summary>
        /// Raises the RChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveR0Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("r0")));
        }
        
        /// <summary>
        /// Raises the R0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnR0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.R0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the R0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnR0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.R0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveB0Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("b0")));
        }
        
        /// <summary>
        /// Raises the B0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnB0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.B0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the B0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnB0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.B0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveWindingTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("windingType")));
        }
        
        /// <summary>
        /// Raises the WindingTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWindingTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WindingTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WindingTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWindingTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WindingTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveX0Attribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("x0")));
        }
        
        /// <summary>
        /// Raises the X0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnX0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.X0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the X0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnX0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.X0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRatedSAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("ratedS")));
        }
        
        /// <summary>
        /// Raises the RatedSChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedSChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedSChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedSChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedSChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedSChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRatedUAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("ratedU")));
        }
        
        /// <summary>
        /// Raises the RatedUChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedUChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedUChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedUChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedUChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedUChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveInsulationUAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("insulationU")));
        }
        
        /// <summary>
        /// Raises the InsulationUChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInsulationUChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InsulationUChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InsulationUChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInsulationUChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InsulationUChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEmergencySAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("emergencyS")));
        }
        
        /// <summary>
        /// Raises the EmergencySChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEmergencySChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EmergencySChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EmergencySChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEmergencySChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EmergencySChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveConnectionTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("connectionType")));
        }
        
        /// <summary>
        /// Raises the ConnectionTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConnectionTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConnectionTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConnectionTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConnectionTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConnectionTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveXgroundAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("xground")));
        }
        
        /// <summary>
        /// Raises the XgroundChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXgroundChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XgroundChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XgroundChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXgroundChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XgroundChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTo_WindingTestReference()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("To_WindingTest")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the To_WindingTest property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void To_WindingTestCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("To_WindingTest", e, _to_WindingTestReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the To_WindingTest property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void To_WindingTestCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("To_WindingTest", e, _to_WindingTestReference);
        }
        
        private static ITypedElement RetrievePhaseTapChangerReference()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("PhaseTapChanger")));
        }
        
        /// <summary>
        /// Raises the PhaseTapChangerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseTapChangerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseTapChangerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhaseTapChangerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseTapChangerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseTapChangerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PhaseTapChanger property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhaseTapChanger(object sender, System.EventArgs eventArgs)
        {
            this.PhaseTapChanger = null;
        }
        
        private static ITypedElement RetrievePowerTransformerReference()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("PowerTransformer")));
        }
        
        /// <summary>
        /// Raises the PowerTransformerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerTransformerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerTransformerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerTransformerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerTransformerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerTransformerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PowerTransformer property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPowerTransformer(object sender, System.EventArgs eventArgs)
        {
            this.PowerTransformer = null;
        }
        
        private static ITypedElement RetrieveFrom_WindingTestReference()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("From_WindingTest")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the From_WindingTest property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void From_WindingTestCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("From_WindingTest", e, _from_WindingTestReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the From_WindingTest property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void From_WindingTestCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("From_WindingTest", e, _from_WindingTestReference);
        }
        
        private static ITypedElement RetrieveRatioTapChangerReference()
        {
            return ((ITypedElement)(((ModelElement)(TransformerWinding.ClassInstance)).Resolve("RatioTapChanger")));
        }
        
        /// <summary>
        /// Raises the RatioTapChangerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatioTapChangerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatioTapChangerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatioTapChangerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatioTapChangerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatioTapChangerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RatioTapChanger property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRatioTapChanger(object sender, System.EventArgs eventArgs)
        {
            this.RatioTapChanger = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "G0"))
            {
                return this.G0;
            }
            if ((attribute == "RGROUND"))
            {
                return this.Rground;
            }
            if ((attribute == "GROUNDED"))
            {
                return this.Grounded;
            }
            if ((attribute == "SHORTTERMS"))
            {
                return this.ShortTermS;
            }
            if ((attribute == "G"))
            {
                return this.G;
            }
            if ((attribute == "B"))
            {
                return this.B;
            }
            if ((attribute == "X"))
            {
                return this.X;
            }
            if ((attribute == "R"))
            {
                return this.R;
            }
            if ((attribute == "R0"))
            {
                return this.R0;
            }
            if ((attribute == "B0"))
            {
                return this.B0;
            }
            if ((attribute == "WINDINGTYPE"))
            {
                return this.WindingType;
            }
            if ((attribute == "X0"))
            {
                return this.X0;
            }
            if ((attribute == "RATEDS"))
            {
                return this.RatedS;
            }
            if ((attribute == "RATEDU"))
            {
                return this.RatedU;
            }
            if ((attribute == "INSULATIONU"))
            {
                return this.InsulationU;
            }
            if ((attribute == "EMERGENCYS"))
            {
                return this.EmergencyS;
            }
            if ((attribute == "CONNECTIONTYPE"))
            {
                return this.ConnectionType;
            }
            if ((attribute == "XGROUND"))
            {
                return this.Xground;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "TO_WINDINGTEST"))
            {
                return this._to_WindingTest;
            }
            if ((feature == "FROM_WINDINGTEST"))
            {
                return this._from_WindingTest;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PHASETAPCHANGER"))
            {
                this.PhaseTapChanger = ((IPhaseTapChanger)(value));
                return;
            }
            if ((feature == "POWERTRANSFORMER"))
            {
                this.PowerTransformer = ((IPowerTransformer)(value));
                return;
            }
            if ((feature == "RATIOTAPCHANGER"))
            {
                this.RatioTapChanger = ((IRatioTapChanger)(value));
                return;
            }
            if ((feature == "G0"))
            {
                this.G0 = ((float)(value));
                return;
            }
            if ((feature == "RGROUND"))
            {
                this.Rground = ((float)(value));
                return;
            }
            if ((feature == "GROUNDED"))
            {
                this.Grounded = ((bool)(value));
                return;
            }
            if ((feature == "SHORTTERMS"))
            {
                this.ShortTermS = ((float)(value));
                return;
            }
            if ((feature == "G"))
            {
                this.G = ((float)(value));
                return;
            }
            if ((feature == "B"))
            {
                this.B = ((float)(value));
                return;
            }
            if ((feature == "X"))
            {
                this.X = ((float)(value));
                return;
            }
            if ((feature == "R"))
            {
                this.R = ((float)(value));
                return;
            }
            if ((feature == "R0"))
            {
                this.R0 = ((float)(value));
                return;
            }
            if ((feature == "B0"))
            {
                this.B0 = ((float)(value));
                return;
            }
            if ((feature == "WINDINGTYPE"))
            {
                this.WindingType = ((WindingType)(value));
                return;
            }
            if ((feature == "X0"))
            {
                this.X0 = ((float)(value));
                return;
            }
            if ((feature == "RATEDS"))
            {
                this.RatedS = ((float)(value));
                return;
            }
            if ((feature == "RATEDU"))
            {
                this.RatedU = ((float)(value));
                return;
            }
            if ((feature == "INSULATIONU"))
            {
                this.InsulationU = ((float)(value));
                return;
            }
            if ((feature == "EMERGENCYS"))
            {
                this.EmergencyS = ((float)(value));
                return;
            }
            if ((feature == "CONNECTIONTYPE"))
            {
                this.ConnectionType = ((WindingConnection)(value));
                return;
            }
            if ((feature == "XGROUND"))
            {
                this.Xground = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "PhaseTapChanger"))
            {
                return new PhaseTapChangerProxy(this);
            }
            if ((attribute == "PowerTransformer"))
            {
                return new PowerTransformerProxy(this);
            }
            if ((attribute == "RatioTapChanger"))
            {
                return new RatioTapChangerProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PhaseTapChanger"))
            {
                return new PhaseTapChangerProxy(this);
            }
            if ((reference == "PowerTransformer"))
            {
                return new PowerTransformerProxy(this);
            }
            if ((reference == "RatioTapChanger"))
            {
                return new RatioTapChangerProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Wires/TransformerWinding")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TransformerWinding class
        /// </summary>
        public class TransformerWindingReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TransformerWinding _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TransformerWindingReferencedElementsCollection(TransformerWinding parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.To_WindingTest.Count);
                    if ((this._parent.PhaseTapChanger != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PowerTransformer != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.From_WindingTest.Count);
                    if ((this._parent.RatioTapChanger != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.To_WindingTest.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PhaseTapChangerChanged += this.PropagateValueChanges;
                this._parent.PowerTransformerChanged += this.PropagateValueChanges;
                this._parent.From_WindingTest.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RatioTapChangerChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.To_WindingTest.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PhaseTapChangerChanged -= this.PropagateValueChanges;
                this._parent.PowerTransformerChanged -= this.PropagateValueChanges;
                this._parent.From_WindingTest.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RatioTapChangerChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IWindingTest to_WindingTestCasted = item.As<IWindingTest>();
                if ((to_WindingTestCasted != null))
                {
                    this._parent.To_WindingTest.Add(to_WindingTestCasted);
                }
                if ((this._parent.PhaseTapChanger == null))
                {
                    IPhaseTapChanger phaseTapChangerCasted = item.As<IPhaseTapChanger>();
                    if ((phaseTapChangerCasted != null))
                    {
                        this._parent.PhaseTapChanger = phaseTapChangerCasted;
                        return;
                    }
                }
                if ((this._parent.PowerTransformer == null))
                {
                    IPowerTransformer powerTransformerCasted = item.As<IPowerTransformer>();
                    if ((powerTransformerCasted != null))
                    {
                        this._parent.PowerTransformer = powerTransformerCasted;
                        return;
                    }
                }
                IWindingTest from_WindingTestCasted = item.As<IWindingTest>();
                if ((from_WindingTestCasted != null))
                {
                    this._parent.From_WindingTest.Add(from_WindingTestCasted);
                }
                if ((this._parent.RatioTapChanger == null))
                {
                    IRatioTapChanger ratioTapChangerCasted = item.As<IRatioTapChanger>();
                    if ((ratioTapChangerCasted != null))
                    {
                        this._parent.RatioTapChanger = ratioTapChangerCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.To_WindingTest.Clear();
                this._parent.PhaseTapChanger = null;
                this._parent.PowerTransformer = null;
                this._parent.From_WindingTest.Clear();
                this._parent.RatioTapChanger = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.To_WindingTest.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.PhaseTapChanger))
                {
                    return true;
                }
                if ((item == this._parent.PowerTransformer))
                {
                    return true;
                }
                if (this._parent.From_WindingTest.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.RatioTapChanger))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> to_WindingTestEnumerator = this._parent.To_WindingTest.GetEnumerator();
                try
                {
                    for (
                    ; to_WindingTestEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = to_WindingTestEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    to_WindingTestEnumerator.Dispose();
                }
                if ((this._parent.PhaseTapChanger != null))
                {
                    array[arrayIndex] = this._parent.PhaseTapChanger;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PowerTransformer != null))
                {
                    array[arrayIndex] = this._parent.PowerTransformer;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> from_WindingTestEnumerator = this._parent.From_WindingTest.GetEnumerator();
                try
                {
                    for (
                    ; from_WindingTestEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = from_WindingTestEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    from_WindingTestEnumerator.Dispose();
                }
                if ((this._parent.RatioTapChanger != null))
                {
                    array[arrayIndex] = this._parent.RatioTapChanger;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IWindingTest windingTestItem = item.As<IWindingTest>();
                if (((windingTestItem != null) 
                            && this._parent.To_WindingTest.Remove(windingTestItem)))
                {
                    return true;
                }
                if ((this._parent.PhaseTapChanger == item))
                {
                    this._parent.PhaseTapChanger = null;
                    return true;
                }
                if ((this._parent.PowerTransformer == item))
                {
                    this._parent.PowerTransformer = null;
                    return true;
                }
                if (((windingTestItem != null) 
                            && this._parent.From_WindingTest.Remove(windingTestItem)))
                {
                    return true;
                }
                if ((this._parent.RatioTapChanger == item))
                {
                    this._parent.RatioTapChanger = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.To_WindingTest).Concat(this._parent.PhaseTapChanger).Concat(this._parent.PowerTransformer).Concat(this._parent.From_WindingTest).Concat(this._parent.RatioTapChanger).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the g0 property
        /// </summary>
        private sealed class G0Proxy : ModelPropertyChange<ITransformerWinding, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public G0Proxy(ITransformerWinding modelElement) : 
                    base(modelElement, "g0")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.G0;
                }
                set
                {
                    this.ModelElement.G0 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rground property
        /// </summary>
        private sealed class RgroundProxy : ModelPropertyChange<ITransformerWinding, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RgroundProxy(ITransformerWinding modelElement) : 
                    base(modelElement, "rground")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Rground;
                }
                set
                {
                    this.ModelElement.Rground = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the grounded property
        /// </summary>
        private sealed class GroundedProxy : ModelPropertyChange<ITransformerWinding, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GroundedProxy(ITransformerWinding modelElement) : 
                    base(modelElement, "grounded")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Grounded;
                }
                set
                {
                    this.ModelElement.Grounded = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the shortTermS property
        /// </summary>
        private sealed class ShortTermSProxy : ModelPropertyChange<ITransformerWinding, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ShortTermSProxy(ITransformerWinding modelElement) : 
                    base(modelElement, "shortTermS")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ShortTermS;
                }
                set
                {
                    this.ModelElement.ShortTermS = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the g property
        /// </summary>
        private sealed class GProxy : ModelPropertyChange<ITransformerWinding, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GProxy(ITransformerWinding modelElement) : 
                    base(modelElement, "g")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.G;
                }
                set
                {
                    this.ModelElement.G = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the b property
        /// </summary>
        private sealed class BProxy : ModelPropertyChange<ITransformerWinding, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BProxy(ITransformerWinding modelElement) : 
                    base(modelElement, "b")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.B;
                }
                set
                {
                    this.ModelElement.B = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the x property
        /// </summary>
        private sealed class XProxy : ModelPropertyChange<ITransformerWinding, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XProxy(ITransformerWinding modelElement) : 
                    base(modelElement, "x")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.X;
                }
                set
                {
                    this.ModelElement.X = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the r property
        /// </summary>
        private sealed class RProxy : ModelPropertyChange<ITransformerWinding, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RProxy(ITransformerWinding modelElement) : 
                    base(modelElement, "r")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.R;
                }
                set
                {
                    this.ModelElement.R = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the r0 property
        /// </summary>
        private sealed class R0Proxy : ModelPropertyChange<ITransformerWinding, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public R0Proxy(ITransformerWinding modelElement) : 
                    base(modelElement, "r0")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.R0;
                }
                set
                {
                    this.ModelElement.R0 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the b0 property
        /// </summary>
        private sealed class B0Proxy : ModelPropertyChange<ITransformerWinding, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public B0Proxy(ITransformerWinding modelElement) : 
                    base(modelElement, "b0")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.B0;
                }
                set
                {
                    this.ModelElement.B0 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the windingType property
        /// </summary>
        private sealed class WindingTypeProxy : ModelPropertyChange<ITransformerWinding, Nullable<WindingType>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WindingTypeProxy(ITransformerWinding modelElement) : 
                    base(modelElement, "windingType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<WindingType> Value
            {
                get
                {
                    return this.ModelElement.WindingType;
                }
                set
                {
                    this.ModelElement.WindingType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the x0 property
        /// </summary>
        private sealed class X0Proxy : ModelPropertyChange<ITransformerWinding, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public X0Proxy(ITransformerWinding modelElement) : 
                    base(modelElement, "x0")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.X0;
                }
                set
                {
                    this.ModelElement.X0 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ratedS property
        /// </summary>
        private sealed class RatedSProxy : ModelPropertyChange<ITransformerWinding, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatedSProxy(ITransformerWinding modelElement) : 
                    base(modelElement, "ratedS")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RatedS;
                }
                set
                {
                    this.ModelElement.RatedS = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ratedU property
        /// </summary>
        private sealed class RatedUProxy : ModelPropertyChange<ITransformerWinding, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatedUProxy(ITransformerWinding modelElement) : 
                    base(modelElement, "ratedU")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RatedU;
                }
                set
                {
                    this.ModelElement.RatedU = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the insulationU property
        /// </summary>
        private sealed class InsulationUProxy : ModelPropertyChange<ITransformerWinding, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InsulationUProxy(ITransformerWinding modelElement) : 
                    base(modelElement, "insulationU")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.InsulationU;
                }
                set
                {
                    this.ModelElement.InsulationU = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the emergencyS property
        /// </summary>
        private sealed class EmergencySProxy : ModelPropertyChange<ITransformerWinding, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EmergencySProxy(ITransformerWinding modelElement) : 
                    base(modelElement, "emergencyS")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.EmergencyS;
                }
                set
                {
                    this.ModelElement.EmergencyS = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the connectionType property
        /// </summary>
        private sealed class ConnectionTypeProxy : ModelPropertyChange<ITransformerWinding, Nullable<WindingConnection>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConnectionTypeProxy(ITransformerWinding modelElement) : 
                    base(modelElement, "connectionType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<WindingConnection> Value
            {
                get
                {
                    return this.ModelElement.ConnectionType;
                }
                set
                {
                    this.ModelElement.ConnectionType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xground property
        /// </summary>
        private sealed class XgroundProxy : ModelPropertyChange<ITransformerWinding, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XgroundProxy(ITransformerWinding modelElement) : 
                    base(modelElement, "xground")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Xground;
                }
                set
                {
                    this.ModelElement.Xground = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PhaseTapChanger property
        /// </summary>
        private sealed class PhaseTapChangerProxy : ModelPropertyChange<ITransformerWinding, IPhaseTapChanger>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhaseTapChangerProxy(ITransformerWinding modelElement) : 
                    base(modelElement, "PhaseTapChanger")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPhaseTapChanger Value
            {
                get
                {
                    return this.ModelElement.PhaseTapChanger;
                }
                set
                {
                    this.ModelElement.PhaseTapChanger = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PowerTransformer property
        /// </summary>
        private sealed class PowerTransformerProxy : ModelPropertyChange<ITransformerWinding, IPowerTransformer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PowerTransformerProxy(ITransformerWinding modelElement) : 
                    base(modelElement, "PowerTransformer")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPowerTransformer Value
            {
                get
                {
                    return this.ModelElement.PowerTransformer;
                }
                set
                {
                    this.ModelElement.PowerTransformer = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RatioTapChanger property
        /// </summary>
        private sealed class RatioTapChangerProxy : ModelPropertyChange<ITransformerWinding, IRatioTapChanger>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatioTapChangerProxy(ITransformerWinding modelElement) : 
                    base(modelElement, "RatioTapChanger")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRatioTapChanger Value
            {
                get
                {
                    return this.ModelElement.RatioTapChanger;
                }
                set
                {
                    this.ModelElement.RatioTapChanger = value;
                }
            }
        }
    }
}

