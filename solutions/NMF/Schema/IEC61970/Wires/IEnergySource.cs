//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.LoadControl;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Wires
{
    
    
    /// <summary>
    /// The public interface for EnergySource
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(EnergySource))]
    [XmlDefaultImplementationTypeAttribute(typeof(EnergySource))]
    public interface IEnergySource : IModelElement, IConductingEquipment
    {
        
        /// <summary>
        /// The activePower property
        /// </summary>
        float ActivePower
        {
            get;
            set;
        }
        
        /// <summary>
        /// The r property
        /// </summary>
        float R
        {
            get;
            set;
        }
        
        /// <summary>
        /// The x property
        /// </summary>
        float X
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rn property
        /// </summary>
        float Rn
        {
            get;
            set;
        }
        
        /// <summary>
        /// The voltageMagnitude property
        /// </summary>
        float VoltageMagnitude
        {
            get;
            set;
        }
        
        /// <summary>
        /// The r0 property
        /// </summary>
        float R0
        {
            get;
            set;
        }
        
        /// <summary>
        /// The voltageAngle property
        /// </summary>
        float VoltageAngle
        {
            get;
            set;
        }
        
        /// <summary>
        /// The xn property
        /// </summary>
        float Xn
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nominalVoltage property
        /// </summary>
        float NominalVoltage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The x0 property
        /// </summary>
        float X0
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the ActivePower property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ActivePowerChanging;
        
        /// <summary>
        /// Gets fired when the ActivePower property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ActivePowerChanged;
        
        /// <summary>
        /// Gets fired before the R property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RChanging;
        
        /// <summary>
        /// Gets fired when the R property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RChanged;
        
        /// <summary>
        /// Gets fired before the X property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XChanging;
        
        /// <summary>
        /// Gets fired when the X property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XChanged;
        
        /// <summary>
        /// Gets fired before the Rn property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RnChanging;
        
        /// <summary>
        /// Gets fired when the Rn property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RnChanged;
        
        /// <summary>
        /// Gets fired before the VoltageMagnitude property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VoltageMagnitudeChanging;
        
        /// <summary>
        /// Gets fired when the VoltageMagnitude property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VoltageMagnitudeChanged;
        
        /// <summary>
        /// Gets fired before the R0 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> R0Changing;
        
        /// <summary>
        /// Gets fired when the R0 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> R0Changed;
        
        /// <summary>
        /// Gets fired before the VoltageAngle property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VoltageAngleChanging;
        
        /// <summary>
        /// Gets fired when the VoltageAngle property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VoltageAngleChanged;
        
        /// <summary>
        /// Gets fired before the Xn property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XnChanging;
        
        /// <summary>
        /// Gets fired when the Xn property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XnChanged;
        
        /// <summary>
        /// Gets fired before the NominalVoltage property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NominalVoltageChanging;
        
        /// <summary>
        /// Gets fired when the NominalVoltage property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NominalVoltageChanged;
        
        /// <summary>
        /// Gets fired before the X0 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> X0Changing;
        
        /// <summary>
        /// Gets fired when the X0 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> X0Changed;
    }
}

