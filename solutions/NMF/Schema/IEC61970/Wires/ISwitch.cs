using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.LoadControl;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Wires
{
    
    
    /// <summary>
    /// The public interface for Switch
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Switch))]
    [XmlDefaultImplementationTypeAttribute(typeof(Switch))]
    public interface ISwitch : IModelElement, IConductingEquipment
    {
        
        /// <summary>
        /// The retained property
        /// </summary>
        bool Retained
        {
            get;
            set;
        }
        
        /// <summary>
        /// The switchOnDate property
        /// </summary>
        DateTime SwitchOnDate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The normalOpen property
        /// </summary>
        bool NormalOpen
        {
            get;
            set;
        }
        
        /// <summary>
        /// The switchOnCount property
        /// </summary>
        int SwitchOnCount
        {
            get;
            set;
        }
        
        /// <summary>
        /// The LoadMgmtFunctions property
        /// </summary>
        IOrderedSetExpression<ILoadMgmtFunction> LoadMgmtFunctions
        {
            get;
        }
        
        /// <summary>
        /// The ConnectDisconnectFunctions property
        /// </summary>
        IOrderedSetExpression<IConnectDisconnectFunction> ConnectDisconnectFunctions
        {
            get;
        }
        
        /// <summary>
        /// The SwitchingOperations property
        /// </summary>
        IOrderedSetExpression<ISwitchingOperation> SwitchingOperations
        {
            get;
        }
        
        /// <summary>
        /// The SwitchSchedules property
        /// </summary>
        IOrderedSetExpression<ISwitchSchedule> SwitchSchedules
        {
            get;
        }
        
        /// <summary>
        /// The CompositeSwitch property
        /// </summary>
        ICompositeSwitch CompositeSwitch
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Retained property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RetainedChanging;
        
        /// <summary>
        /// Gets fired when the Retained property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RetainedChanged;
        
        /// <summary>
        /// Gets fired before the SwitchOnDate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SwitchOnDateChanging;
        
        /// <summary>
        /// Gets fired when the SwitchOnDate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SwitchOnDateChanged;
        
        /// <summary>
        /// Gets fired before the NormalOpen property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NormalOpenChanging;
        
        /// <summary>
        /// Gets fired when the NormalOpen property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NormalOpenChanged;
        
        /// <summary>
        /// Gets fired before the SwitchOnCount property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SwitchOnCountChanging;
        
        /// <summary>
        /// Gets fired when the SwitchOnCount property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SwitchOnCountChanged;
        
        /// <summary>
        /// Gets fired before the CompositeSwitch property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CompositeSwitchChanging;
        
        /// <summary>
        /// Gets fired when the CompositeSwitch property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CompositeSwitchChanged;
    }
}

