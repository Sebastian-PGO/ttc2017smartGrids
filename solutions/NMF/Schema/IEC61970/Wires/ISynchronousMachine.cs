using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.LoadControl;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Wires
{
    
    
    /// <summary>
    /// The public interface for SynchronousMachine
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(SynchronousMachine))]
    [XmlDefaultImplementationTypeAttribute(typeof(SynchronousMachine))]
    public interface ISynchronousMachine : IModelElement, IRegulatingCondEq
    {
        
        /// <summary>
        /// The xDirectSync property
        /// </summary>
        float XDirectSync
        {
            get;
            set;
        }
        
        /// <summary>
        /// The xQuadTrans property
        /// </summary>
        float XQuadTrans
        {
            get;
            set;
        }
        
        /// <summary>
        /// The coolantCondition property
        /// </summary>
        float CoolantCondition
        {
            get;
            set;
        }
        
        /// <summary>
        /// The xQuadSubtrans property
        /// </summary>
        float XQuadSubtrans
        {
            get;
            set;
        }
        
        /// <summary>
        /// The coolantType property
        /// </summary>
        Nullable<CoolantType> CoolantType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The condenserP property
        /// </summary>
        float CondenserP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The aVRToManualLag property
        /// </summary>
        float AVRToManualLag
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minQ property
        /// </summary>
        float MinQ
        {
            get;
            set;
        }
        
        /// <summary>
        /// The aVRToManualLead property
        /// </summary>
        float AVRToManualLead
        {
            get;
            set;
        }
        
        /// <summary>
        /// The maxU property
        /// </summary>
        float MaxU
        {
            get;
            set;
        }
        
        /// <summary>
        /// The damping property
        /// </summary>
        float Damping
        {
            get;
            set;
        }
        
        /// <summary>
        /// The maxQ property
        /// </summary>
        float MaxQ
        {
            get;
            set;
        }
        
        /// <summary>
        /// The r0 property
        /// </summary>
        float R0
        {
            get;
            set;
        }
        
        /// <summary>
        /// The type property
        /// </summary>
        Nullable<SynchronousMachineType> Type
        {
            get;
            set;
        }
        
        /// <summary>
        /// The r2 property
        /// </summary>
        float R2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The referencePriority property
        /// </summary>
        int ReferencePriority
        {
            get;
            set;
        }
        
        /// <summary>
        /// The x0 property
        /// </summary>
        float X0
        {
            get;
            set;
        }
        
        /// <summary>
        /// The x2 property
        /// </summary>
        float X2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The r property
        /// </summary>
        float R
        {
            get;
            set;
        }
        
        /// <summary>
        /// The xDirectSubtrans property
        /// </summary>
        float XDirectSubtrans
        {
            get;
            set;
        }
        
        /// <summary>
        /// The x property
        /// </summary>
        float X
        {
            get;
            set;
        }
        
        /// <summary>
        /// The qPercent property
        /// </summary>
        float QPercent
        {
            get;
            set;
        }
        
        /// <summary>
        /// The xQuadSync property
        /// </summary>
        float XQuadSync
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ratedS property
        /// </summary>
        float RatedS
        {
            get;
            set;
        }
        
        /// <summary>
        /// The manualToAVR property
        /// </summary>
        float ManualToAVR
        {
            get;
            set;
        }
        
        /// <summary>
        /// The inertia property
        /// </summary>
        float Inertia
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minU property
        /// </summary>
        float MinU
        {
            get;
            set;
        }
        
        /// <summary>
        /// The xDirectTrans property
        /// </summary>
        float XDirectTrans
        {
            get;
            set;
        }
        
        /// <summary>
        /// The baseQ property
        /// </summary>
        float BaseQ
        {
            get;
            set;
        }
        
        /// <summary>
        /// The operatingMode property
        /// </summary>
        Nullable<SynchronousMachineOperatingMode> OperatingMode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReactiveCapabilityCurves property
        /// </summary>
        IOrderedSetExpression<IReactiveCapabilityCurve> ReactiveCapabilityCurves
        {
            get;
        }
        
        /// <summary>
        /// The GeneratingUnit property
        /// </summary>
        IGeneratingUnit GeneratingUnit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The InitialReactiveCapabilityCurve property
        /// </summary>
        IReactiveCapabilityCurve InitialReactiveCapabilityCurve
        {
            get;
            set;
        }
        
        /// <summary>
        /// The HydroPump property
        /// </summary>
        IHydroPump HydroPump
        {
            get;
            set;
        }
        
        /// <summary>
        /// The PrimeMovers property
        /// </summary>
        IOrderedSetExpression<IPrimeMover> PrimeMovers
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the XDirectSync property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XDirectSyncChanging;
        
        /// <summary>
        /// Gets fired when the XDirectSync property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XDirectSyncChanged;
        
        /// <summary>
        /// Gets fired before the XQuadTrans property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XQuadTransChanging;
        
        /// <summary>
        /// Gets fired when the XQuadTrans property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XQuadTransChanged;
        
        /// <summary>
        /// Gets fired before the CoolantCondition property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CoolantConditionChanging;
        
        /// <summary>
        /// Gets fired when the CoolantCondition property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CoolantConditionChanged;
        
        /// <summary>
        /// Gets fired before the XQuadSubtrans property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XQuadSubtransChanging;
        
        /// <summary>
        /// Gets fired when the XQuadSubtrans property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XQuadSubtransChanged;
        
        /// <summary>
        /// Gets fired before the CoolantType property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CoolantTypeChanging;
        
        /// <summary>
        /// Gets fired when the CoolantType property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CoolantTypeChanged;
        
        /// <summary>
        /// Gets fired before the CondenserP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CondenserPChanging;
        
        /// <summary>
        /// Gets fired when the CondenserP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CondenserPChanged;
        
        /// <summary>
        /// Gets fired before the AVRToManualLag property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AVRToManualLagChanging;
        
        /// <summary>
        /// Gets fired when the AVRToManualLag property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AVRToManualLagChanged;
        
        /// <summary>
        /// Gets fired before the MinQ property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinQChanging;
        
        /// <summary>
        /// Gets fired when the MinQ property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinQChanged;
        
        /// <summary>
        /// Gets fired before the AVRToManualLead property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AVRToManualLeadChanging;
        
        /// <summary>
        /// Gets fired when the AVRToManualLead property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AVRToManualLeadChanged;
        
        /// <summary>
        /// Gets fired before the MaxU property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxUChanging;
        
        /// <summary>
        /// Gets fired when the MaxU property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxUChanged;
        
        /// <summary>
        /// Gets fired before the Damping property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DampingChanging;
        
        /// <summary>
        /// Gets fired when the Damping property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DampingChanged;
        
        /// <summary>
        /// Gets fired before the MaxQ property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxQChanging;
        
        /// <summary>
        /// Gets fired when the MaxQ property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxQChanged;
        
        /// <summary>
        /// Gets fired before the R0 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> R0Changing;
        
        /// <summary>
        /// Gets fired when the R0 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> R0Changed;
        
        /// <summary>
        /// Gets fired before the Type property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TypeChanging;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TypeChanged;
        
        /// <summary>
        /// Gets fired before the R2 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> R2Changing;
        
        /// <summary>
        /// Gets fired when the R2 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> R2Changed;
        
        /// <summary>
        /// Gets fired before the ReferencePriority property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReferencePriorityChanging;
        
        /// <summary>
        /// Gets fired when the ReferencePriority property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReferencePriorityChanged;
        
        /// <summary>
        /// Gets fired before the X0 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> X0Changing;
        
        /// <summary>
        /// Gets fired when the X0 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> X0Changed;
        
        /// <summary>
        /// Gets fired before the X2 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> X2Changing;
        
        /// <summary>
        /// Gets fired when the X2 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> X2Changed;
        
        /// <summary>
        /// Gets fired before the R property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RChanging;
        
        /// <summary>
        /// Gets fired when the R property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RChanged;
        
        /// <summary>
        /// Gets fired before the XDirectSubtrans property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XDirectSubtransChanging;
        
        /// <summary>
        /// Gets fired when the XDirectSubtrans property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XDirectSubtransChanged;
        
        /// <summary>
        /// Gets fired before the X property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XChanging;
        
        /// <summary>
        /// Gets fired when the X property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XChanged;
        
        /// <summary>
        /// Gets fired before the QPercent property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> QPercentChanging;
        
        /// <summary>
        /// Gets fired when the QPercent property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> QPercentChanged;
        
        /// <summary>
        /// Gets fired before the XQuadSync property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XQuadSyncChanging;
        
        /// <summary>
        /// Gets fired when the XQuadSync property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XQuadSyncChanged;
        
        /// <summary>
        /// Gets fired before the RatedS property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedSChanging;
        
        /// <summary>
        /// Gets fired when the RatedS property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedSChanged;
        
        /// <summary>
        /// Gets fired before the ManualToAVR property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ManualToAVRChanging;
        
        /// <summary>
        /// Gets fired when the ManualToAVR property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ManualToAVRChanged;
        
        /// <summary>
        /// Gets fired before the Inertia property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InertiaChanging;
        
        /// <summary>
        /// Gets fired when the Inertia property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InertiaChanged;
        
        /// <summary>
        /// Gets fired before the MinU property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinUChanging;
        
        /// <summary>
        /// Gets fired when the MinU property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinUChanged;
        
        /// <summary>
        /// Gets fired before the XDirectTrans property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XDirectTransChanging;
        
        /// <summary>
        /// Gets fired when the XDirectTrans property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XDirectTransChanged;
        
        /// <summary>
        /// Gets fired before the BaseQ property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BaseQChanging;
        
        /// <summary>
        /// Gets fired when the BaseQ property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BaseQChanged;
        
        /// <summary>
        /// Gets fired before the OperatingMode property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OperatingModeChanging;
        
        /// <summary>
        /// Gets fired when the OperatingMode property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OperatingModeChanged;
        
        /// <summary>
        /// Gets fired before the GeneratingUnit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GeneratingUnitChanging;
        
        /// <summary>
        /// Gets fired when the GeneratingUnit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GeneratingUnitChanged;
        
        /// <summary>
        /// Gets fired before the InitialReactiveCapabilityCurve property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InitialReactiveCapabilityCurveChanging;
        
        /// <summary>
        /// Gets fired when the InitialReactiveCapabilityCurve property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InitialReactiveCapabilityCurveChanged;
        
        /// <summary>
        /// Gets fired before the HydroPump property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HydroPumpChanging;
        
        /// <summary>
        /// Gets fired when the HydroPump property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HydroPumpChanged;
    }
}

