using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.LoadControl;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLoadControl;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.LoadModel;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Outage;
using TTC2017.SmartGrids.CIM.IEC61970.Protection;
using TTC2017.SmartGrids.CIM.IEC61970.StateVariables;

namespace TTC2017.SmartGrids.CIM.IEC61970.Wires
{
    
    
    /// <summary>
    /// The public interface for TapChanger
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(TapChanger))]
    [XmlDefaultImplementationTypeAttribute(typeof(TapChanger))]
    public interface ITapChanger : IModelElement, IPowerSystemResource
    {
        
        /// <summary>
        /// The initialDelay property
        /// </summary>
        float InitialDelay
        {
            get;
            set;
        }
        
        /// <summary>
        /// The subsequentDelay property
        /// </summary>
        float SubsequentDelay
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ltcFlag property
        /// </summary>
        bool LtcFlag
        {
            get;
            set;
        }
        
        /// <summary>
        /// The regulationStatus property
        /// </summary>
        bool RegulationStatus
        {
            get;
            set;
        }
        
        /// <summary>
        /// The neutralStep property
        /// </summary>
        int NeutralStep
        {
            get;
            set;
        }
        
        /// <summary>
        /// The neutralU property
        /// </summary>
        float NeutralU
        {
            get;
            set;
        }
        
        /// <summary>
        /// The lowStep property
        /// </summary>
        int LowStep
        {
            get;
            set;
        }
        
        /// <summary>
        /// The highStep property
        /// </summary>
        int HighStep
        {
            get;
            set;
        }
        
        /// <summary>
        /// The stepVoltageIncrement property
        /// </summary>
        float StepVoltageIncrement
        {
            get;
            set;
        }
        
        /// <summary>
        /// The normalStep property
        /// </summary>
        int NormalStep
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TapSchedules property
        /// </summary>
        IOrderedSetExpression<ITapSchedule> TapSchedules
        {
            get;
        }
        
        /// <summary>
        /// The RegulatingControl property
        /// </summary>
        IRegulatingControl RegulatingControl
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ImpedanceVariationCurve property
        /// </summary>
        IImpedanceVariationCurve ImpedanceVariationCurve
        {
            get;
            set;
        }
        
        /// <summary>
        /// The SvTapStep property
        /// </summary>
        ISvTapStep SvTapStep
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the InitialDelay property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InitialDelayChanging;
        
        /// <summary>
        /// Gets fired when the InitialDelay property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InitialDelayChanged;
        
        /// <summary>
        /// Gets fired before the SubsequentDelay property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SubsequentDelayChanging;
        
        /// <summary>
        /// Gets fired when the SubsequentDelay property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SubsequentDelayChanged;
        
        /// <summary>
        /// Gets fired before the LtcFlag property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LtcFlagChanging;
        
        /// <summary>
        /// Gets fired when the LtcFlag property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LtcFlagChanged;
        
        /// <summary>
        /// Gets fired before the RegulationStatus property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RegulationStatusChanging;
        
        /// <summary>
        /// Gets fired when the RegulationStatus property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RegulationStatusChanged;
        
        /// <summary>
        /// Gets fired before the NeutralStep property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NeutralStepChanging;
        
        /// <summary>
        /// Gets fired when the NeutralStep property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NeutralStepChanged;
        
        /// <summary>
        /// Gets fired before the NeutralU property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NeutralUChanging;
        
        /// <summary>
        /// Gets fired when the NeutralU property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NeutralUChanged;
        
        /// <summary>
        /// Gets fired before the LowStep property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowStepChanging;
        
        /// <summary>
        /// Gets fired when the LowStep property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowStepChanged;
        
        /// <summary>
        /// Gets fired before the HighStep property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HighStepChanging;
        
        /// <summary>
        /// Gets fired when the HighStep property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HighStepChanged;
        
        /// <summary>
        /// Gets fired before the StepVoltageIncrement property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StepVoltageIncrementChanging;
        
        /// <summary>
        /// Gets fired when the StepVoltageIncrement property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StepVoltageIncrementChanged;
        
        /// <summary>
        /// Gets fired before the NormalStep property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NormalStepChanging;
        
        /// <summary>
        /// Gets fired when the NormalStep property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NormalStepChanged;
        
        /// <summary>
        /// Gets fired before the RegulatingControl property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RegulatingControlChanging;
        
        /// <summary>
        /// Gets fired when the RegulatingControl property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RegulatingControlChanged;
        
        /// <summary>
        /// Gets fired before the ImpedanceVariationCurve property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImpedanceVariationCurveChanging;
        
        /// <summary>
        /// Gets fired when the ImpedanceVariationCurve property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImpedanceVariationCurveChanged;
        
        /// <summary>
        /// Gets fired before the SvTapStep property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SvTapStepChanging;
        
        /// <summary>
        /// Gets fired when the SvTapStep property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SvTapStepChanged;
    }
}

