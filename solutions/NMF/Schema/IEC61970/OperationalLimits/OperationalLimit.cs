using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61970.Core;

namespace TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits
{
    
    
    /// <summary>
    /// The default implementation of the OperationalLimit class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#OperationalLimits")]
    [XmlNamespacePrefixAttribute("cimOperationalLimits")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/OperationalLimits/Operational" +
        "Limit")]
    [DebuggerDisplayAttribute("OperationalLimit {UUID}")]
    public partial class OperationalLimit : IdentifiedObject, IOperationalLimit, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Type property
        /// </summary>
        private string _type;
        
        private static Lazy<ITypedElement> _typeAttribute = new Lazy<ITypedElement>(RetrieveTypeAttribute);
        
        private static Lazy<ITypedElement> _operationalLimitSetReference = new Lazy<ITypedElement>(RetrieveOperationalLimitSetReference);
        
        /// <summary>
        /// The backing field for the OperationalLimitSet property
        /// </summary>
        private IOperationalLimitSet _operationalLimitSet;
        
        private static Lazy<ITypedElement> _operationalLimitTypeReference = new Lazy<ITypedElement>(RetrieveOperationalLimitTypeReference);
        
        /// <summary>
        /// The backing field for the OperationalLimitType property
        /// </summary>
        private IOperationalLimitType _operationalLimitType;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The type property
        /// </summary>
        [XmlElementNameAttribute("type")]
        [XmlAttributeAttribute(true)]
        public virtual string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    string old = this._type;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeChanging(e);
                    this.OnPropertyChanging("Type", e, _typeAttribute);
                    this._type = value;
                    this.OnTypeChanged(e);
                    this.OnPropertyChanged("Type", e, _typeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The OperationalLimitSet property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("OperationalLimitValue")]
        public virtual IOperationalLimitSet OperationalLimitSet
        {
            get
            {
                return this._operationalLimitSet;
            }
            set
            {
                if ((this._operationalLimitSet != value))
                {
                    IOperationalLimitSet old = this._operationalLimitSet;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOperationalLimitSetChanging(e);
                    this.OnPropertyChanging("OperationalLimitSet", e, _operationalLimitSetReference);
                    this._operationalLimitSet = value;
                    if ((old != null))
                    {
                        old.OperationalLimitValue.Remove(this);
                        old.Deleted -= this.OnResetOperationalLimitSet;
                    }
                    if ((value != null))
                    {
                        value.OperationalLimitValue.Add(this);
                        value.Deleted += this.OnResetOperationalLimitSet;
                    }
                    this.OnOperationalLimitSetChanged(e);
                    this.OnPropertyChanged("OperationalLimitSet", e, _operationalLimitSetReference);
                }
            }
        }
        
        /// <summary>
        /// The OperationalLimitType property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("OperationalLimit")]
        public virtual IOperationalLimitType OperationalLimitType
        {
            get
            {
                return this._operationalLimitType;
            }
            set
            {
                if ((this._operationalLimitType != value))
                {
                    IOperationalLimitType old = this._operationalLimitType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOperationalLimitTypeChanging(e);
                    this.OnPropertyChanging("OperationalLimitType", e, _operationalLimitTypeReference);
                    this._operationalLimitType = value;
                    if ((old != null))
                    {
                        old.OperationalLimit.Remove(this);
                        old.Deleted -= this.OnResetOperationalLimitType;
                    }
                    if ((value != null))
                    {
                        value.OperationalLimit.Add(this);
                        value.Deleted += this.OnResetOperationalLimitType;
                    }
                    this.OnOperationalLimitTypeChanged(e);
                    this.OnPropertyChanged("OperationalLimitType", e, _operationalLimitTypeReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new OperationalLimitReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/OperationalLimits/Operational" +
                            "Limit")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Type property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanging;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanged;
        
        /// <summary>
        /// Gets fired before the OperationalLimitSet property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperationalLimitSetChanging;
        
        /// <summary>
        /// Gets fired when the OperationalLimitSet property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperationalLimitSetChanged;
        
        /// <summary>
        /// Gets fired before the OperationalLimitType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperationalLimitTypeChanging;
        
        /// <summary>
        /// Gets fired when the OperationalLimitType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OperationalLimitTypeChanged;
        
        private static ITypedElement RetrieveTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(OperationalLimit.ClassInstance)).Resolve("type")));
        }
        
        /// <summary>
        /// Raises the TypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOperationalLimitSetReference()
        {
            return ((ITypedElement)(((ModelElement)(OperationalLimit.ClassInstance)).Resolve("OperationalLimitSet")));
        }
        
        /// <summary>
        /// Raises the OperationalLimitSetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperationalLimitSetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperationalLimitSetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OperationalLimitSetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperationalLimitSetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperationalLimitSetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OperationalLimitSet property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOperationalLimitSet(object sender, System.EventArgs eventArgs)
        {
            this.OperationalLimitSet = null;
        }
        
        private static ITypedElement RetrieveOperationalLimitTypeReference()
        {
            return ((ITypedElement)(((ModelElement)(OperationalLimit.ClassInstance)).Resolve("OperationalLimitType")));
        }
        
        /// <summary>
        /// Raises the OperationalLimitTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperationalLimitTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperationalLimitTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OperationalLimitTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOperationalLimitTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OperationalLimitTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OperationalLimitType property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOperationalLimitType(object sender, System.EventArgs eventArgs)
        {
            this.OperationalLimitType = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TYPE"))
            {
                return this.Type;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OPERATIONALLIMITSET"))
            {
                this.OperationalLimitSet = ((IOperationalLimitSet)(value));
                return;
            }
            if ((feature == "OPERATIONALLIMITTYPE"))
            {
                this.OperationalLimitType = ((IOperationalLimitType)(value));
                return;
            }
            if ((feature == "TYPE"))
            {
                this.Type = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "OperationalLimitSet"))
            {
                return new OperationalLimitSetProxy(this);
            }
            if ((attribute == "OperationalLimitType"))
            {
                return new OperationalLimitTypeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OperationalLimitSet"))
            {
                return new OperationalLimitSetProxy(this);
            }
            if ((reference == "OperationalLimitType"))
            {
                return new OperationalLimitTypeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/OperationalLimits/Operational" +
                        "Limit")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the OperationalLimit class
        /// </summary>
        public class OperationalLimitReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private OperationalLimit _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OperationalLimitReferencedElementsCollection(OperationalLimit parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.OperationalLimitSet != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OperationalLimitType != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OperationalLimitSetChanged += this.PropagateValueChanges;
                this._parent.OperationalLimitTypeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OperationalLimitSetChanged -= this.PropagateValueChanges;
                this._parent.OperationalLimitTypeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.OperationalLimitSet == null))
                {
                    IOperationalLimitSet operationalLimitSetCasted = item.As<IOperationalLimitSet>();
                    if ((operationalLimitSetCasted != null))
                    {
                        this._parent.OperationalLimitSet = operationalLimitSetCasted;
                        return;
                    }
                }
                if ((this._parent.OperationalLimitType == null))
                {
                    IOperationalLimitType operationalLimitTypeCasted = item.As<IOperationalLimitType>();
                    if ((operationalLimitTypeCasted != null))
                    {
                        this._parent.OperationalLimitType = operationalLimitTypeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OperationalLimitSet = null;
                this._parent.OperationalLimitType = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.OperationalLimitSet))
                {
                    return true;
                }
                if ((item == this._parent.OperationalLimitType))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.OperationalLimitSet != null))
                {
                    array[arrayIndex] = this._parent.OperationalLimitSet;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OperationalLimitType != null))
                {
                    array[arrayIndex] = this._parent.OperationalLimitType;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.OperationalLimitSet == item))
                {
                    this._parent.OperationalLimitSet = null;
                    return true;
                }
                if ((this._parent.OperationalLimitType == item))
                {
                    this._parent.OperationalLimitType = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OperationalLimitSet).Concat(this._parent.OperationalLimitType).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<IOperationalLimit, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(IOperationalLimit modelElement) : 
                    base(modelElement, "type")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OperationalLimitSet property
        /// </summary>
        private sealed class OperationalLimitSetProxy : ModelPropertyChange<IOperationalLimit, IOperationalLimitSet>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OperationalLimitSetProxy(IOperationalLimit modelElement) : 
                    base(modelElement, "OperationalLimitSet")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOperationalLimitSet Value
            {
                get
                {
                    return this.ModelElement.OperationalLimitSet;
                }
                set
                {
                    this.ModelElement.OperationalLimitSet = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OperationalLimitType property
        /// </summary>
        private sealed class OperationalLimitTypeProxy : ModelPropertyChange<IOperationalLimit, IOperationalLimitType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OperationalLimitTypeProxy(IOperationalLimit modelElement) : 
                    base(modelElement, "OperationalLimitType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOperationalLimitType Value
            {
                get
                {
                    return this.ModelElement.OperationalLimitType;
                }
                set
                {
                    this.ModelElement.OperationalLimitType = value;
                }
            }
        }
    }
}

