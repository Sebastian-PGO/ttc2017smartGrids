using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61970.Core;

namespace TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits
{
    
    
    /// <summary>
    /// The default implementation of the BranchGroupTerminal class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#OperationalLimits")]
    [XmlNamespacePrefixAttribute("cimOperationalLimits")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/OperationalLimits/BranchGroup" +
        "Terminal")]
    [DebuggerDisplayAttribute("BranchGroupTerminal {UUID}")]
    public partial class BranchGroupTerminal : Element, IBranchGroupTerminal, IModelElement
    {
        
        /// <summary>
        /// The backing field for the PositiveFlowIn property
        /// </summary>
        private bool _positiveFlowIn;
        
        private static Lazy<ITypedElement> _positiveFlowInAttribute = new Lazy<ITypedElement>(RetrievePositiveFlowInAttribute);
        
        private static Lazy<ITypedElement> _terminalReference = new Lazy<ITypedElement>(RetrieveTerminalReference);
        
        /// <summary>
        /// The backing field for the Terminal property
        /// </summary>
        private ITerminal _terminal;
        
        private static Lazy<ITypedElement> _branchGroupReference = new Lazy<ITypedElement>(RetrieveBranchGroupReference);
        
        /// <summary>
        /// The backing field for the BranchGroup property
        /// </summary>
        private IBranchGroup _branchGroup;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The positiveFlowIn property
        /// </summary>
        [XmlElementNameAttribute("positiveFlowIn")]
        [XmlAttributeAttribute(true)]
        public virtual bool PositiveFlowIn
        {
            get
            {
                return this._positiveFlowIn;
            }
            set
            {
                if ((this._positiveFlowIn != value))
                {
                    bool old = this._positiveFlowIn;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPositiveFlowInChanging(e);
                    this.OnPropertyChanging("PositiveFlowIn", e, _positiveFlowInAttribute);
                    this._positiveFlowIn = value;
                    this.OnPositiveFlowInChanged(e);
                    this.OnPropertyChanged("PositiveFlowIn", e, _positiveFlowInAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Terminal property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("BranchGroupTerminal")]
        public virtual ITerminal Terminal
        {
            get
            {
                return this._terminal;
            }
            set
            {
                if ((this._terminal != value))
                {
                    ITerminal old = this._terminal;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTerminalChanging(e);
                    this.OnPropertyChanging("Terminal", e, _terminalReference);
                    this._terminal = value;
                    if ((old != null))
                    {
                        old.BranchGroupTerminal.Remove(this);
                        old.Deleted -= this.OnResetTerminal;
                    }
                    if ((value != null))
                    {
                        value.BranchGroupTerminal.Add(this);
                        value.Deleted += this.OnResetTerminal;
                    }
                    this.OnTerminalChanged(e);
                    this.OnPropertyChanged("Terminal", e, _terminalReference);
                }
            }
        }
        
        /// <summary>
        /// The BranchGroup property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("BranchGroupTerminal")]
        public virtual IBranchGroup BranchGroup
        {
            get
            {
                return this._branchGroup;
            }
            set
            {
                if ((this._branchGroup != value))
                {
                    IBranchGroup old = this._branchGroup;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBranchGroupChanging(e);
                    this.OnPropertyChanging("BranchGroup", e, _branchGroupReference);
                    this._branchGroup = value;
                    if ((old != null))
                    {
                        old.BranchGroupTerminal.Remove(this);
                        old.Deleted -= this.OnResetBranchGroup;
                    }
                    if ((value != null))
                    {
                        value.BranchGroupTerminal.Add(this);
                        value.Deleted += this.OnResetBranchGroup;
                    }
                    this.OnBranchGroupChanged(e);
                    this.OnPropertyChanged("BranchGroup", e, _branchGroupReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new BranchGroupTerminalReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/OperationalLimits/BranchGroup" +
                            "Terminal")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PositiveFlowIn property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PositiveFlowInChanging;
        
        /// <summary>
        /// Gets fired when the PositiveFlowIn property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PositiveFlowInChanged;
        
        /// <summary>
        /// Gets fired before the Terminal property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TerminalChanging;
        
        /// <summary>
        /// Gets fired when the Terminal property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TerminalChanged;
        
        /// <summary>
        /// Gets fired before the BranchGroup property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BranchGroupChanging;
        
        /// <summary>
        /// Gets fired when the BranchGroup property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BranchGroupChanged;
        
        private static ITypedElement RetrievePositiveFlowInAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BranchGroupTerminal.ClassInstance)).Resolve("positiveFlowIn")));
        }
        
        /// <summary>
        /// Raises the PositiveFlowInChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPositiveFlowInChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PositiveFlowInChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PositiveFlowInChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPositiveFlowInChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PositiveFlowInChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTerminalReference()
        {
            return ((ITypedElement)(((ModelElement)(BranchGroupTerminal.ClassInstance)).Resolve("Terminal")));
        }
        
        /// <summary>
        /// Raises the TerminalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TerminalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TerminalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTerminalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TerminalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Terminal property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTerminal(object sender, System.EventArgs eventArgs)
        {
            this.Terminal = null;
        }
        
        private static ITypedElement RetrieveBranchGroupReference()
        {
            return ((ITypedElement)(((ModelElement)(BranchGroupTerminal.ClassInstance)).Resolve("BranchGroup")));
        }
        
        /// <summary>
        /// Raises the BranchGroupChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBranchGroupChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BranchGroupChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BranchGroupChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBranchGroupChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BranchGroupChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BranchGroup property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBranchGroup(object sender, System.EventArgs eventArgs)
        {
            this.BranchGroup = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "POSITIVEFLOWIN"))
            {
                return this.PositiveFlowIn;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TERMINAL"))
            {
                this.Terminal = ((ITerminal)(value));
                return;
            }
            if ((feature == "BRANCHGROUP"))
            {
                this.BranchGroup = ((IBranchGroup)(value));
                return;
            }
            if ((feature == "POSITIVEFLOWIN"))
            {
                this.PositiveFlowIn = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Terminal"))
            {
                return new TerminalProxy(this);
            }
            if ((attribute == "BranchGroup"))
            {
                return new BranchGroupProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Terminal"))
            {
                return new TerminalProxy(this);
            }
            if ((reference == "BranchGroup"))
            {
                return new BranchGroupProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/OperationalLimits/BranchGroup" +
                        "Terminal")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the BranchGroupTerminal class
        /// </summary>
        public class BranchGroupTerminalReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private BranchGroupTerminal _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public BranchGroupTerminalReferencedElementsCollection(BranchGroupTerminal parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Terminal != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BranchGroup != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TerminalChanged += this.PropagateValueChanges;
                this._parent.BranchGroupChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TerminalChanged -= this.PropagateValueChanges;
                this._parent.BranchGroupChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Terminal == null))
                {
                    ITerminal terminalCasted = item.As<ITerminal>();
                    if ((terminalCasted != null))
                    {
                        this._parent.Terminal = terminalCasted;
                        return;
                    }
                }
                if ((this._parent.BranchGroup == null))
                {
                    IBranchGroup branchGroupCasted = item.As<IBranchGroup>();
                    if ((branchGroupCasted != null))
                    {
                        this._parent.BranchGroup = branchGroupCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Terminal = null;
                this._parent.BranchGroup = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Terminal))
                {
                    return true;
                }
                if ((item == this._parent.BranchGroup))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Terminal != null))
                {
                    array[arrayIndex] = this._parent.Terminal;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BranchGroup != null))
                {
                    array[arrayIndex] = this._parent.BranchGroup;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Terminal == item))
                {
                    this._parent.Terminal = null;
                    return true;
                }
                if ((this._parent.BranchGroup == item))
                {
                    this._parent.BranchGroup = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Terminal).Concat(this._parent.BranchGroup).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the positiveFlowIn property
        /// </summary>
        private sealed class PositiveFlowInProxy : ModelPropertyChange<IBranchGroupTerminal, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PositiveFlowInProxy(IBranchGroupTerminal modelElement) : 
                    base(modelElement, "positiveFlowIn")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.PositiveFlowIn;
                }
                set
                {
                    this.ModelElement.PositiveFlowIn = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Terminal property
        /// </summary>
        private sealed class TerminalProxy : ModelPropertyChange<IBranchGroupTerminal, ITerminal>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TerminalProxy(IBranchGroupTerminal modelElement) : 
                    base(modelElement, "Terminal")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITerminal Value
            {
                get
                {
                    return this.ModelElement.Terminal;
                }
                set
                {
                    this.ModelElement.Terminal = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BranchGroup property
        /// </summary>
        private sealed class BranchGroupProxy : ModelPropertyChange<IBranchGroupTerminal, IBranchGroup>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BranchGroupProxy(IBranchGroupTerminal modelElement) : 
                    base(modelElement, "BranchGroup")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBranchGroup Value
            {
                get
                {
                    return this.ModelElement.BranchGroup;
                }
                set
                {
                    this.ModelElement.BranchGroup = value;
                }
            }
        }
    }
}

