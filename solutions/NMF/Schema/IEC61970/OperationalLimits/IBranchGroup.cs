using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61970.Core;

namespace TTC2017.SmartGrids.CIM.IEC61970.OperationalLimits
{
    
    
    /// <summary>
    /// The public interface for BranchGroup
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(BranchGroup))]
    [XmlDefaultImplementationTypeAttribute(typeof(BranchGroup))]
    public interface IBranchGroup : IModelElement, IIdentifiedObject
    {
        
        /// <summary>
        /// The monitorReactivePower property
        /// </summary>
        bool MonitorReactivePower
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minimumReactivePower property
        /// </summary>
        float MinimumReactivePower
        {
            get;
            set;
        }
        
        /// <summary>
        /// The monitorActivePower property
        /// </summary>
        bool MonitorActivePower
        {
            get;
            set;
        }
        
        /// <summary>
        /// The maximumReactivePower property
        /// </summary>
        float MaximumReactivePower
        {
            get;
            set;
        }
        
        /// <summary>
        /// The maximumActivePower property
        /// </summary>
        float MaximumActivePower
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minimumActivePower property
        /// </summary>
        float MinimumActivePower
        {
            get;
            set;
        }
        
        /// <summary>
        /// The BranchGroupTerminal property
        /// </summary>
        IOrderedSetExpression<IBranchGroupTerminal> BranchGroupTerminal
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the MonitorReactivePower property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MonitorReactivePowerChanging;
        
        /// <summary>
        /// Gets fired when the MonitorReactivePower property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MonitorReactivePowerChanged;
        
        /// <summary>
        /// Gets fired before the MinimumReactivePower property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinimumReactivePowerChanging;
        
        /// <summary>
        /// Gets fired when the MinimumReactivePower property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinimumReactivePowerChanged;
        
        /// <summary>
        /// Gets fired before the MonitorActivePower property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MonitorActivePowerChanging;
        
        /// <summary>
        /// Gets fired when the MonitorActivePower property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MonitorActivePowerChanged;
        
        /// <summary>
        /// Gets fired before the MaximumReactivePower property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaximumReactivePowerChanging;
        
        /// <summary>
        /// Gets fired when the MaximumReactivePower property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaximumReactivePowerChanged;
        
        /// <summary>
        /// Gets fired before the MaximumActivePower property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaximumActivePowerChanging;
        
        /// <summary>
        /// Gets fired when the MaximumActivePower property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaximumActivePowerChanged;
        
        /// <summary>
        /// Gets fired before the MinimumActivePower property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinimumActivePowerChanging;
        
        /// <summary>
        /// Gets fired when the MinimumActivePower property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinimumActivePowerChanged;
    }
}

