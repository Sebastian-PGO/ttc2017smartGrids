//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.Production
{
    
    
    /// <summary>
    /// The public interface for GeneratingUnit
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(GeneratingUnit))]
    [XmlDefaultImplementationTypeAttribute(typeof(GeneratingUnit))]
    public interface IGeneratingUnit : IModelElement, IEquipment
    {
        
        /// <summary>
        /// The highControlLimit property
        /// </summary>
        float HighControlLimit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The raiseRampRate property
        /// </summary>
        float RaiseRampRate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The genOperatingMode property
        /// </summary>
        Nullable<GeneratorOperatingMode> GenOperatingMode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The autoCntrlMarginP property
        /// </summary>
        float AutoCntrlMarginP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The controlPulseLow property
        /// </summary>
        float ControlPulseLow
        {
            get;
            set;
        }
        
        /// <summary>
        /// The governorMPL property
        /// </summary>
        float GovernorMPL
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ratedGrossMaxP property
        /// </summary>
        float RatedGrossMaxP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The allocSpinResP property
        /// </summary>
        float AllocSpinResP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The stepChange property
        /// </summary>
        float StepChange
        {
            get;
            set;
        }
        
        /// <summary>
        /// The startupCost property
        /// </summary>
        float StartupCost
        {
            get;
            set;
        }
        
        /// <summary>
        /// The spinReserveRamp property
        /// </summary>
        float SpinReserveRamp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nominalP property
        /// </summary>
        float NominalP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The governorSCD property
        /// </summary>
        float GovernorSCD
        {
            get;
            set;
        }
        
        /// <summary>
        /// The penaltyFactor property
        /// </summary>
        float PenaltyFactor
        {
            get;
            set;
        }
        
        /// <summary>
        /// The controlPulseHigh property
        /// </summary>
        float ControlPulseHigh
        {
            get;
            set;
        }
        
        /// <summary>
        /// The energyMinP property
        /// </summary>
        float EnergyMinP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The startupTime property
        /// </summary>
        float StartupTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The tieLinePF property
        /// </summary>
        float TieLinePF
        {
            get;
            set;
        }
        
        /// <summary>
        /// The lowerRampRate property
        /// </summary>
        float LowerRampRate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The initialP property
        /// </summary>
        float InitialP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The controlResponseRate property
        /// </summary>
        float ControlResponseRate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minEconomicP property
        /// </summary>
        float MinEconomicP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The modelDetail property
        /// </summary>
        object ModelDetail
        {
            get;
            set;
        }
        
        /// <summary>
        /// The fuelPriority property
        /// </summary>
        int FuelPriority
        {
            get;
            set;
        }
        
        /// <summary>
        /// The maxEconomicP property
        /// </summary>
        float MaxEconomicP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The genControlSource property
        /// </summary>
        Nullable<GeneratorControlSource> GenControlSource
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ratedGrossMinP property
        /// </summary>
        float RatedGrossMinP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The variableCost property
        /// </summary>
        float VariableCost
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minOperatingP property
        /// </summary>
        float MinOperatingP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The baseP property
        /// </summary>
        float BaseP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The shortPF property
        /// </summary>
        float ShortPF
        {
            get;
            set;
        }
        
        /// <summary>
        /// The lowControlLimit property
        /// </summary>
        float LowControlLimit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The longPF property
        /// </summary>
        float LongPF
        {
            get;
            set;
        }
        
        /// <summary>
        /// The maxOperatingP property
        /// </summary>
        float MaxOperatingP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The fastStartFlag property
        /// </summary>
        bool FastStartFlag
        {
            get;
            set;
        }
        
        /// <summary>
        /// The genControlMode property
        /// </summary>
        Nullable<GeneratorControlMode> GenControlMode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ratedNetMaxP property
        /// </summary>
        float RatedNetMaxP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The efficiency property
        /// </summary>
        float Efficiency
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minimumOffTime property
        /// </summary>
        float MinimumOffTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The dispReserveFlag property
        /// </summary>
        bool DispReserveFlag
        {
            get;
            set;
        }
        
        /// <summary>
        /// The maximumAllowableSpinningReserve property
        /// </summary>
        float MaximumAllowableSpinningReserve
        {
            get;
            set;
        }
        
        /// <summary>
        /// The controlDeadband property
        /// </summary>
        float ControlDeadband
        {
            get;
            set;
        }
        
        /// <summary>
        /// The normalPF property
        /// </summary>
        float NormalPF
        {
            get;
            set;
        }
        
        /// <summary>
        /// The OperatedBy_GenerationProvider property
        /// </summary>
        IGenerationProvider OperatedBy_GenerationProvider
        {
            get;
            set;
        }
        
        /// <summary>
        /// The GenUnitOpSchedule property
        /// </summary>
        IGenUnitOpSchedule GenUnitOpSchedule
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ControlAreaGeneratingUnit property
        /// </summary>
        IOrderedSetExpression<IControlAreaGeneratingUnit> ControlAreaGeneratingUnit
        {
            get;
        }
        
        /// <summary>
        /// The GrossToNetActivePowerCurves property
        /// </summary>
        IOrderedSetExpression<IGrossToNetActivePowerCurve> GrossToNetActivePowerCurves
        {
            get;
        }
        
        /// <summary>
        /// The GenUnitOpCostCurves property
        /// </summary>
        IOrderedSetExpression<IGenUnitOpCostCurve> GenUnitOpCostCurves
        {
            get;
        }
        
        /// <summary>
        /// The SynchronousMachines property
        /// </summary>
        IOrderedSetExpression<ISynchronousMachine> SynchronousMachines
        {
            get;
        }
        
        /// <summary>
        /// The RegisteredGenerator property
        /// </summary>
        IRegisteredGenerator RegisteredGenerator
        {
            get;
            set;
        }
        
        /// <summary>
        /// The SubControlArea property
        /// </summary>
        ISubControlArea SubControlArea
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the HighControlLimit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HighControlLimitChanging;
        
        /// <summary>
        /// Gets fired when the HighControlLimit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HighControlLimitChanged;
        
        /// <summary>
        /// Gets fired before the RaiseRampRate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RaiseRampRateChanging;
        
        /// <summary>
        /// Gets fired when the RaiseRampRate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RaiseRampRateChanged;
        
        /// <summary>
        /// Gets fired before the GenOperatingMode property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GenOperatingModeChanging;
        
        /// <summary>
        /// Gets fired when the GenOperatingMode property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GenOperatingModeChanged;
        
        /// <summary>
        /// Gets fired before the AutoCntrlMarginP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AutoCntrlMarginPChanging;
        
        /// <summary>
        /// Gets fired when the AutoCntrlMarginP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AutoCntrlMarginPChanged;
        
        /// <summary>
        /// Gets fired before the ControlPulseLow property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ControlPulseLowChanging;
        
        /// <summary>
        /// Gets fired when the ControlPulseLow property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ControlPulseLowChanged;
        
        /// <summary>
        /// Gets fired before the GovernorMPL property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GovernorMPLChanging;
        
        /// <summary>
        /// Gets fired when the GovernorMPL property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GovernorMPLChanged;
        
        /// <summary>
        /// Gets fired before the RatedGrossMaxP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedGrossMaxPChanging;
        
        /// <summary>
        /// Gets fired when the RatedGrossMaxP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedGrossMaxPChanged;
        
        /// <summary>
        /// Gets fired before the AllocSpinResP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AllocSpinResPChanging;
        
        /// <summary>
        /// Gets fired when the AllocSpinResP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AllocSpinResPChanged;
        
        /// <summary>
        /// Gets fired before the StepChange property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StepChangeChanging;
        
        /// <summary>
        /// Gets fired when the StepChange property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StepChangeChanged;
        
        /// <summary>
        /// Gets fired before the StartupCost property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartupCostChanging;
        
        /// <summary>
        /// Gets fired when the StartupCost property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartupCostChanged;
        
        /// <summary>
        /// Gets fired before the SpinReserveRamp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpinReserveRampChanging;
        
        /// <summary>
        /// Gets fired when the SpinReserveRamp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpinReserveRampChanged;
        
        /// <summary>
        /// Gets fired before the NominalP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NominalPChanging;
        
        /// <summary>
        /// Gets fired when the NominalP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NominalPChanged;
        
        /// <summary>
        /// Gets fired before the GovernorSCD property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GovernorSCDChanging;
        
        /// <summary>
        /// Gets fired when the GovernorSCD property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GovernorSCDChanged;
        
        /// <summary>
        /// Gets fired before the PenaltyFactor property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PenaltyFactorChanging;
        
        /// <summary>
        /// Gets fired when the PenaltyFactor property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PenaltyFactorChanged;
        
        /// <summary>
        /// Gets fired before the ControlPulseHigh property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ControlPulseHighChanging;
        
        /// <summary>
        /// Gets fired when the ControlPulseHigh property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ControlPulseHighChanged;
        
        /// <summary>
        /// Gets fired before the EnergyMinP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EnergyMinPChanging;
        
        /// <summary>
        /// Gets fired when the EnergyMinP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EnergyMinPChanged;
        
        /// <summary>
        /// Gets fired before the StartupTime property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartupTimeChanging;
        
        /// <summary>
        /// Gets fired when the StartupTime property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartupTimeChanged;
        
        /// <summary>
        /// Gets fired before the TieLinePF property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TieLinePFChanging;
        
        /// <summary>
        /// Gets fired when the TieLinePF property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TieLinePFChanged;
        
        /// <summary>
        /// Gets fired before the LowerRampRate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowerRampRateChanging;
        
        /// <summary>
        /// Gets fired when the LowerRampRate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowerRampRateChanged;
        
        /// <summary>
        /// Gets fired before the InitialP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InitialPChanging;
        
        /// <summary>
        /// Gets fired when the InitialP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InitialPChanged;
        
        /// <summary>
        /// Gets fired before the ControlResponseRate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ControlResponseRateChanging;
        
        /// <summary>
        /// Gets fired when the ControlResponseRate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ControlResponseRateChanged;
        
        /// <summary>
        /// Gets fired before the MinEconomicP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinEconomicPChanging;
        
        /// <summary>
        /// Gets fired when the MinEconomicP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinEconomicPChanged;
        
        /// <summary>
        /// Gets fired before the ModelDetail property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ModelDetailChanging;
        
        /// <summary>
        /// Gets fired when the ModelDetail property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ModelDetailChanged;
        
        /// <summary>
        /// Gets fired before the FuelPriority property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FuelPriorityChanging;
        
        /// <summary>
        /// Gets fired when the FuelPriority property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FuelPriorityChanged;
        
        /// <summary>
        /// Gets fired before the MaxEconomicP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxEconomicPChanging;
        
        /// <summary>
        /// Gets fired when the MaxEconomicP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxEconomicPChanged;
        
        /// <summary>
        /// Gets fired before the GenControlSource property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GenControlSourceChanging;
        
        /// <summary>
        /// Gets fired when the GenControlSource property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GenControlSourceChanged;
        
        /// <summary>
        /// Gets fired before the RatedGrossMinP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedGrossMinPChanging;
        
        /// <summary>
        /// Gets fired when the RatedGrossMinP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedGrossMinPChanged;
        
        /// <summary>
        /// Gets fired before the VariableCost property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VariableCostChanging;
        
        /// <summary>
        /// Gets fired when the VariableCost property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VariableCostChanged;
        
        /// <summary>
        /// Gets fired before the MinOperatingP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinOperatingPChanging;
        
        /// <summary>
        /// Gets fired when the MinOperatingP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinOperatingPChanged;
        
        /// <summary>
        /// Gets fired before the BaseP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BasePChanging;
        
        /// <summary>
        /// Gets fired when the BaseP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BasePChanged;
        
        /// <summary>
        /// Gets fired before the ShortPF property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ShortPFChanging;
        
        /// <summary>
        /// Gets fired when the ShortPF property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ShortPFChanged;
        
        /// <summary>
        /// Gets fired before the LowControlLimit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowControlLimitChanging;
        
        /// <summary>
        /// Gets fired when the LowControlLimit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowControlLimitChanged;
        
        /// <summary>
        /// Gets fired before the LongPF property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LongPFChanging;
        
        /// <summary>
        /// Gets fired when the LongPF property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LongPFChanged;
        
        /// <summary>
        /// Gets fired before the MaxOperatingP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxOperatingPChanging;
        
        /// <summary>
        /// Gets fired when the MaxOperatingP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxOperatingPChanged;
        
        /// <summary>
        /// Gets fired before the FastStartFlag property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FastStartFlagChanging;
        
        /// <summary>
        /// Gets fired when the FastStartFlag property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FastStartFlagChanged;
        
        /// <summary>
        /// Gets fired before the GenControlMode property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GenControlModeChanging;
        
        /// <summary>
        /// Gets fired when the GenControlMode property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GenControlModeChanged;
        
        /// <summary>
        /// Gets fired before the RatedNetMaxP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedNetMaxPChanging;
        
        /// <summary>
        /// Gets fired when the RatedNetMaxP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedNetMaxPChanged;
        
        /// <summary>
        /// Gets fired before the Efficiency property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EfficiencyChanging;
        
        /// <summary>
        /// Gets fired when the Efficiency property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EfficiencyChanged;
        
        /// <summary>
        /// Gets fired before the MinimumOffTime property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinimumOffTimeChanging;
        
        /// <summary>
        /// Gets fired when the MinimumOffTime property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinimumOffTimeChanged;
        
        /// <summary>
        /// Gets fired before the DispReserveFlag property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DispReserveFlagChanging;
        
        /// <summary>
        /// Gets fired when the DispReserveFlag property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DispReserveFlagChanged;
        
        /// <summary>
        /// Gets fired before the MaximumAllowableSpinningReserve property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaximumAllowableSpinningReserveChanging;
        
        /// <summary>
        /// Gets fired when the MaximumAllowableSpinningReserve property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaximumAllowableSpinningReserveChanged;
        
        /// <summary>
        /// Gets fired before the ControlDeadband property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ControlDeadbandChanging;
        
        /// <summary>
        /// Gets fired when the ControlDeadband property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ControlDeadbandChanged;
        
        /// <summary>
        /// Gets fired before the NormalPF property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NormalPFChanging;
        
        /// <summary>
        /// Gets fired when the NormalPF property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NormalPFChanged;
        
        /// <summary>
        /// Gets fired before the OperatedBy_GenerationProvider property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OperatedBy_GenerationProviderChanging;
        
        /// <summary>
        /// Gets fired when the OperatedBy_GenerationProvider property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OperatedBy_GenerationProviderChanged;
        
        /// <summary>
        /// Gets fired before the GenUnitOpSchedule property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GenUnitOpScheduleChanging;
        
        /// <summary>
        /// Gets fired when the GenUnitOpSchedule property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GenUnitOpScheduleChanged;
        
        /// <summary>
        /// Gets fired before the RegisteredGenerator property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RegisteredGeneratorChanging;
        
        /// <summary>
        /// Gets fired when the RegisteredGenerator property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RegisteredGeneratorChanged;
        
        /// <summary>
        /// Gets fired before the SubControlArea property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SubControlAreaChanging;
        
        /// <summary>
        /// Gets fired when the SubControlArea property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SubControlAreaChanged;
    }
}

