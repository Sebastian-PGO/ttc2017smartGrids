using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.Production
{
    
    
    /// <summary>
    /// The public interface for Reservoir
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Reservoir))]
    [XmlDefaultImplementationTypeAttribute(typeof(Reservoir))]
    public interface IReservoir : IModelElement, IPowerSystemResource
    {
        
        /// <summary>
        /// The activeStorageCapacity property
        /// </summary>
        float ActiveStorageCapacity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The spillTravelDelay property
        /// </summary>
        float SpillTravelDelay
        {
            get;
            set;
        }
        
        /// <summary>
        /// The riverOutletWorks property
        /// </summary>
        string RiverOutletWorks
        {
            get;
            set;
        }
        
        /// <summary>
        /// The normalMinOperateLevel property
        /// </summary>
        float NormalMinOperateLevel
        {
            get;
            set;
        }
        
        /// <summary>
        /// The spillwayCrestLevel property
        /// </summary>
        float SpillwayCrestLevel
        {
            get;
            set;
        }
        
        /// <summary>
        /// The fullSupplyLevel property
        /// </summary>
        float FullSupplyLevel
        {
            get;
            set;
        }
        
        /// <summary>
        /// The spillwayCapacity property
        /// </summary>
        float SpillwayCapacity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The spillWayGateType property
        /// </summary>
        Nullable<SpillwayGateType> SpillWayGateType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The spillwayCrestLength property
        /// </summary>
        float SpillwayCrestLength
        {
            get;
            set;
        }
        
        /// <summary>
        /// The energyStorageRating property
        /// </summary>
        float EnergyStorageRating
        {
            get;
            set;
        }
        
        /// <summary>
        /// The grossCapacity property
        /// </summary>
        float GrossCapacity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The UpstreamFromHydroPowerPlants property
        /// </summary>
        IOrderedSetExpression<IHydroPowerPlant> UpstreamFromHydroPowerPlants
        {
            get;
        }
        
        /// <summary>
        /// The SpillsIntoReservoirs property
        /// </summary>
        IOrderedSetExpression<IReservoir> SpillsIntoReservoirs
        {
            get;
        }
        
        /// <summary>
        /// The SpillsFromReservoir property
        /// </summary>
        IReservoir SpillsFromReservoir
        {
            get;
            set;
        }
        
        /// <summary>
        /// The LevelVsVolumeCurves property
        /// </summary>
        IOrderedSetExpression<ILevelVsVolumeCurve> LevelVsVolumeCurves
        {
            get;
        }
        
        /// <summary>
        /// The InflowForecasts property
        /// </summary>
        IOrderedSetExpression<IInflowForecast> InflowForecasts
        {
            get;
        }
        
        /// <summary>
        /// The TargetLevelSchedule property
        /// </summary>
        ITargetLevelSchedule TargetLevelSchedule
        {
            get;
            set;
        }
        
        /// <summary>
        /// The HydroPowerPlants property
        /// </summary>
        IOrderedSetExpression<IHydroPowerPlant> HydroPowerPlants
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the ActiveStorageCapacity property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ActiveStorageCapacityChanging;
        
        /// <summary>
        /// Gets fired when the ActiveStorageCapacity property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ActiveStorageCapacityChanged;
        
        /// <summary>
        /// Gets fired before the SpillTravelDelay property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpillTravelDelayChanging;
        
        /// <summary>
        /// Gets fired when the SpillTravelDelay property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpillTravelDelayChanged;
        
        /// <summary>
        /// Gets fired before the RiverOutletWorks property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RiverOutletWorksChanging;
        
        /// <summary>
        /// Gets fired when the RiverOutletWorks property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RiverOutletWorksChanged;
        
        /// <summary>
        /// Gets fired before the NormalMinOperateLevel property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NormalMinOperateLevelChanging;
        
        /// <summary>
        /// Gets fired when the NormalMinOperateLevel property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NormalMinOperateLevelChanged;
        
        /// <summary>
        /// Gets fired before the SpillwayCrestLevel property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpillwayCrestLevelChanging;
        
        /// <summary>
        /// Gets fired when the SpillwayCrestLevel property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpillwayCrestLevelChanged;
        
        /// <summary>
        /// Gets fired before the FullSupplyLevel property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FullSupplyLevelChanging;
        
        /// <summary>
        /// Gets fired when the FullSupplyLevel property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FullSupplyLevelChanged;
        
        /// <summary>
        /// Gets fired before the SpillwayCapacity property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpillwayCapacityChanging;
        
        /// <summary>
        /// Gets fired when the SpillwayCapacity property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpillwayCapacityChanged;
        
        /// <summary>
        /// Gets fired before the SpillWayGateType property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpillWayGateTypeChanging;
        
        /// <summary>
        /// Gets fired when the SpillWayGateType property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpillWayGateTypeChanged;
        
        /// <summary>
        /// Gets fired before the SpillwayCrestLength property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpillwayCrestLengthChanging;
        
        /// <summary>
        /// Gets fired when the SpillwayCrestLength property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpillwayCrestLengthChanged;
        
        /// <summary>
        /// Gets fired before the EnergyStorageRating property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EnergyStorageRatingChanging;
        
        /// <summary>
        /// Gets fired when the EnergyStorageRating property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EnergyStorageRatingChanged;
        
        /// <summary>
        /// Gets fired before the GrossCapacity property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GrossCapacityChanging;
        
        /// <summary>
        /// Gets fired when the GrossCapacity property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GrossCapacityChanged;
        
        /// <summary>
        /// Gets fired before the SpillsFromReservoir property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpillsFromReservoirChanging;
        
        /// <summary>
        /// Gets fired when the SpillsFromReservoir property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpillsFromReservoirChanged;
        
        /// <summary>
        /// Gets fired before the TargetLevelSchedule property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TargetLevelScheduleChanging;
        
        /// <summary>
        /// Gets fired when the TargetLevelSchedule property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TargetLevelScheduleChanged;
    }
}

