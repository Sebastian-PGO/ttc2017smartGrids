using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.Production
{
    
    
    public class GeneratorOperatingModeConverter : System.ComponentModel.TypeConverter
    {
        
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
        {
            return (sourceType == typeof(string));
        }
        
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType)
        {
            return (destinationType == typeof(string));
        }
        
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
        {
            if ((value == null))
            {
                return default(GeneratorOperatingMode);
            }
            string valueString = value.ToString();
            if ((valueString == "fixed"))
            {
                return GeneratorOperatingMode.Fixed;
            }
            if ((valueString == "off"))
            {
                return GeneratorOperatingMode.Off;
            }
            if ((valueString == "LFC"))
            {
                return GeneratorOperatingMode.LFC;
            }
            if ((valueString == "REG"))
            {
                return GeneratorOperatingMode.REG;
            }
            if ((valueString == "manual"))
            {
                return GeneratorOperatingMode.Manual;
            }
            if ((valueString == "AGC"))
            {
                return GeneratorOperatingMode.AGC;
            }
            if ((valueString == "EDC"))
            {
                return GeneratorOperatingMode.EDC;
            }
            if ((valueString == "MRN"))
            {
                return GeneratorOperatingMode.MRN;
            }
            return default(GeneratorOperatingMode);
        }
        
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType)
        {
            if ((value == null))
            {
                return null;
            }
            GeneratorOperatingMode valueCasted = ((GeneratorOperatingMode)(value));
            if ((valueCasted == GeneratorOperatingMode.Fixed))
            {
                return "fixed";
            }
            if ((valueCasted == GeneratorOperatingMode.Off))
            {
                return "off";
            }
            if ((valueCasted == GeneratorOperatingMode.LFC))
            {
                return "LFC";
            }
            if ((valueCasted == GeneratorOperatingMode.REG))
            {
                return "REG";
            }
            if ((valueCasted == GeneratorOperatingMode.Manual))
            {
                return "manual";
            }
            if ((valueCasted == GeneratorOperatingMode.AGC))
            {
                return "AGC";
            }
            if ((valueCasted == GeneratorOperatingMode.EDC))
            {
                return "EDC";
            }
            if ((valueCasted == GeneratorOperatingMode.MRN))
            {
                return "MRN";
            }
            throw new ArgumentOutOfRangeException("value");
        }
    }
}

