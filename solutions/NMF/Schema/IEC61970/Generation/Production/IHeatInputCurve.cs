using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.Production
{
    
    
    /// <summary>
    /// The public interface for HeatInputCurve
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(HeatInputCurve))]
    [XmlDefaultImplementationTypeAttribute(typeof(HeatInputCurve))]
    public interface IHeatInputCurve : IModelElement, ICurve
    {
        
        /// <summary>
        /// The heatInputOffset property
        /// </summary>
        float HeatInputOffset
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isNetGrossP property
        /// </summary>
        bool IsNetGrossP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The heatInputEff property
        /// </summary>
        float HeatInputEff
        {
            get;
            set;
        }
        
        /// <summary>
        /// The auxPowerMult property
        /// </summary>
        float AuxPowerMult
        {
            get;
            set;
        }
        
        /// <summary>
        /// The auxPowerOffset property
        /// </summary>
        float AuxPowerOffset
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ThermalGeneratingUnit property
        /// </summary>
        IThermalGeneratingUnit ThermalGeneratingUnit
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the HeatInputOffset property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HeatInputOffsetChanging;
        
        /// <summary>
        /// Gets fired when the HeatInputOffset property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HeatInputOffsetChanged;
        
        /// <summary>
        /// Gets fired before the IsNetGrossP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsNetGrossPChanging;
        
        /// <summary>
        /// Gets fired when the IsNetGrossP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsNetGrossPChanged;
        
        /// <summary>
        /// Gets fired before the HeatInputEff property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HeatInputEffChanging;
        
        /// <summary>
        /// Gets fired when the HeatInputEff property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HeatInputEffChanged;
        
        /// <summary>
        /// Gets fired before the AuxPowerMult property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AuxPowerMultChanging;
        
        /// <summary>
        /// Gets fired when the AuxPowerMult property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AuxPowerMultChanged;
        
        /// <summary>
        /// Gets fired before the AuxPowerOffset property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AuxPowerOffsetChanging;
        
        /// <summary>
        /// Gets fired when the AuxPowerOffset property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AuxPowerOffsetChanged;
        
        /// <summary>
        /// Gets fired before the ThermalGeneratingUnit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThermalGeneratingUnitChanging;
        
        /// <summary>
        /// Gets fired when the ThermalGeneratingUnit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThermalGeneratingUnitChanged;
    }
}

