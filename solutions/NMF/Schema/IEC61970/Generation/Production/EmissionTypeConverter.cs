using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.Production
{
    
    
    public class EmissionTypeConverter : System.ComponentModel.TypeConverter
    {
        
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
        {
            return (sourceType == typeof(string));
        }
        
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType)
        {
            return (destinationType == typeof(string));
        }
        
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
        {
            if ((value == null))
            {
                return default(EmissionType);
            }
            string valueString = value.ToString();
            if ((valueString == "chlorine"))
            {
                return EmissionType.Chlorine;
            }
            if ((valueString == "nitrogenOxide"))
            {
                return EmissionType.NitrogenOxide;
            }
            if ((valueString == "carbonDioxide"))
            {
                return EmissionType.CarbonDioxide;
            }
            if ((valueString == "hydrogenSulfide"))
            {
                return EmissionType.HydrogenSulfide;
            }
            if ((valueString == "sulfurDioxide"))
            {
                return EmissionType.SulfurDioxide;
            }
            if ((valueString == "carbonDisulfide"))
            {
                return EmissionType.CarbonDisulfide;
            }
            return default(EmissionType);
        }
        
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType)
        {
            if ((value == null))
            {
                return null;
            }
            EmissionType valueCasted = ((EmissionType)(value));
            if ((valueCasted == EmissionType.Chlorine))
            {
                return "chlorine";
            }
            if ((valueCasted == EmissionType.NitrogenOxide))
            {
                return "nitrogenOxide";
            }
            if ((valueCasted == EmissionType.CarbonDioxide))
            {
                return "carbonDioxide";
            }
            if ((valueCasted == EmissionType.HydrogenSulfide))
            {
                return "hydrogenSulfide";
            }
            if ((valueCasted == EmissionType.SulfurDioxide))
            {
                return "sulfurDioxide";
            }
            if ((valueCasted == EmissionType.CarbonDisulfide))
            {
                return "carbonDisulfide";
            }
            throw new ArgumentOutOfRangeException("value");
        }
    }
}

