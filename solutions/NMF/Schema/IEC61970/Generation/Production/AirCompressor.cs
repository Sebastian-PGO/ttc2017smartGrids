using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.Production
{
    
    
    /// <summary>
    /// The default implementation of the AirCompressor class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Production")]
    [XmlNamespacePrefixAttribute("cimProduction")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/AirComp" +
        "ressor")]
    [DebuggerDisplayAttribute("AirCompressor {UUID}")]
    public partial class AirCompressor : PowerSystemResource, IAirCompressor, IModelElement
    {
        
        /// <summary>
        /// The backing field for the AirCompressorRating property
        /// </summary>
        private float _airCompressorRating;
        
        private static Lazy<ITypedElement> _airCompressorRatingAttribute = new Lazy<ITypedElement>(RetrieveAirCompressorRatingAttribute);
        
        private static Lazy<ITypedElement> _combustionTurbineReference = new Lazy<ITypedElement>(RetrieveCombustionTurbineReference);
        
        /// <summary>
        /// The backing field for the CombustionTurbine property
        /// </summary>
        private ICombustionTurbine _combustionTurbine;
        
        private static Lazy<ITypedElement> _cAESPlantReference = new Lazy<ITypedElement>(RetrieveCAESPlantReference);
        
        /// <summary>
        /// The backing field for the CAESPlant property
        /// </summary>
        private ICAESPlant _cAESPlant;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The airCompressorRating property
        /// </summary>
        [XmlElementNameAttribute("airCompressorRating")]
        [XmlAttributeAttribute(true)]
        public virtual float AirCompressorRating
        {
            get
            {
                return this._airCompressorRating;
            }
            set
            {
                if ((this._airCompressorRating != value))
                {
                    float old = this._airCompressorRating;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAirCompressorRatingChanging(e);
                    this.OnPropertyChanging("AirCompressorRating", e, _airCompressorRatingAttribute);
                    this._airCompressorRating = value;
                    this.OnAirCompressorRatingChanged(e);
                    this.OnPropertyChanged("AirCompressorRating", e, _airCompressorRatingAttribute);
                }
            }
        }
        
        /// <summary>
        /// The CombustionTurbine property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AirCompressor")]
        public virtual ICombustionTurbine CombustionTurbine
        {
            get
            {
                return this._combustionTurbine;
            }
            set
            {
                if ((this._combustionTurbine != value))
                {
                    ICombustionTurbine old = this._combustionTurbine;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCombustionTurbineChanging(e);
                    this.OnPropertyChanging("CombustionTurbine", e, _combustionTurbineReference);
                    this._combustionTurbine = value;
                    if ((old != null))
                    {
                        old.AirCompressor = null;
                        old.Deleted -= this.OnResetCombustionTurbine;
                    }
                    if ((value != null))
                    {
                        value.AirCompressor = this;
                        value.Deleted += this.OnResetCombustionTurbine;
                    }
                    this.OnCombustionTurbineChanged(e);
                    this.OnPropertyChanged("CombustionTurbine", e, _combustionTurbineReference);
                }
            }
        }
        
        /// <summary>
        /// The CAESPlant property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AirCompressor")]
        public virtual ICAESPlant CAESPlant
        {
            get
            {
                return this._cAESPlant;
            }
            set
            {
                if ((this._cAESPlant != value))
                {
                    ICAESPlant old = this._cAESPlant;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCAESPlantChanging(e);
                    this.OnPropertyChanging("CAESPlant", e, _cAESPlantReference);
                    this._cAESPlant = value;
                    if ((old != null))
                    {
                        old.AirCompressor = null;
                        old.Deleted -= this.OnResetCAESPlant;
                    }
                    if ((value != null))
                    {
                        value.AirCompressor = this;
                        value.Deleted += this.OnResetCAESPlant;
                    }
                    this.OnCAESPlantChanged(e);
                    this.OnPropertyChanged("CAESPlant", e, _cAESPlantReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AirCompressorReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/AirComp" +
                            "ressor")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the AirCompressorRating property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AirCompressorRatingChanging;
        
        /// <summary>
        /// Gets fired when the AirCompressorRating property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AirCompressorRatingChanged;
        
        /// <summary>
        /// Gets fired before the CombustionTurbine property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CombustionTurbineChanging;
        
        /// <summary>
        /// Gets fired when the CombustionTurbine property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CombustionTurbineChanged;
        
        /// <summary>
        /// Gets fired before the CAESPlant property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CAESPlantChanging;
        
        /// <summary>
        /// Gets fired when the CAESPlant property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CAESPlantChanged;
        
        private static ITypedElement RetrieveAirCompressorRatingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AirCompressor.ClassInstance)).Resolve("airCompressorRating")));
        }
        
        /// <summary>
        /// Raises the AirCompressorRatingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAirCompressorRatingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AirCompressorRatingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AirCompressorRatingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAirCompressorRatingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AirCompressorRatingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCombustionTurbineReference()
        {
            return ((ITypedElement)(((ModelElement)(AirCompressor.ClassInstance)).Resolve("CombustionTurbine")));
        }
        
        /// <summary>
        /// Raises the CombustionTurbineChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCombustionTurbineChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CombustionTurbineChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CombustionTurbineChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCombustionTurbineChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CombustionTurbineChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CombustionTurbine property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCombustionTurbine(object sender, System.EventArgs eventArgs)
        {
            this.CombustionTurbine = null;
        }
        
        private static ITypedElement RetrieveCAESPlantReference()
        {
            return ((ITypedElement)(((ModelElement)(AirCompressor.ClassInstance)).Resolve("CAESPlant")));
        }
        
        /// <summary>
        /// Raises the CAESPlantChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCAESPlantChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CAESPlantChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CAESPlantChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCAESPlantChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CAESPlantChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CAESPlant property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCAESPlant(object sender, System.EventArgs eventArgs)
        {
            this.CAESPlant = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "AIRCOMPRESSORRATING"))
            {
                return this.AirCompressorRating;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "COMBUSTIONTURBINE"))
            {
                this.CombustionTurbine = ((ICombustionTurbine)(value));
                return;
            }
            if ((feature == "CAESPLANT"))
            {
                this.CAESPlant = ((ICAESPlant)(value));
                return;
            }
            if ((feature == "AIRCOMPRESSORRATING"))
            {
                this.AirCompressorRating = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CombustionTurbine"))
            {
                return new CombustionTurbineProxy(this);
            }
            if ((attribute == "CAESPlant"))
            {
                return new CAESPlantProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CombustionTurbine"))
            {
                return new CombustionTurbineProxy(this);
            }
            if ((reference == "CAESPlant"))
            {
                return new CAESPlantProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/AirComp" +
                        "ressor")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AirCompressor class
        /// </summary>
        public class AirCompressorReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AirCompressor _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AirCompressorReferencedElementsCollection(AirCompressor parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.CombustionTurbine != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CAESPlant != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CombustionTurbineChanged += this.PropagateValueChanges;
                this._parent.CAESPlantChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CombustionTurbineChanged -= this.PropagateValueChanges;
                this._parent.CAESPlantChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.CombustionTurbine == null))
                {
                    ICombustionTurbine combustionTurbineCasted = item.As<ICombustionTurbine>();
                    if ((combustionTurbineCasted != null))
                    {
                        this._parent.CombustionTurbine = combustionTurbineCasted;
                        return;
                    }
                }
                if ((this._parent.CAESPlant == null))
                {
                    ICAESPlant cAESPlantCasted = item.As<ICAESPlant>();
                    if ((cAESPlantCasted != null))
                    {
                        this._parent.CAESPlant = cAESPlantCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CombustionTurbine = null;
                this._parent.CAESPlant = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.CombustionTurbine))
                {
                    return true;
                }
                if ((item == this._parent.CAESPlant))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.CombustionTurbine != null))
                {
                    array[arrayIndex] = this._parent.CombustionTurbine;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CAESPlant != null))
                {
                    array[arrayIndex] = this._parent.CAESPlant;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.CombustionTurbine == item))
                {
                    this._parent.CombustionTurbine = null;
                    return true;
                }
                if ((this._parent.CAESPlant == item))
                {
                    this._parent.CAESPlant = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CombustionTurbine).Concat(this._parent.CAESPlant).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the airCompressorRating property
        /// </summary>
        private sealed class AirCompressorRatingProxy : ModelPropertyChange<IAirCompressor, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AirCompressorRatingProxy(IAirCompressor modelElement) : 
                    base(modelElement, "airCompressorRating")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.AirCompressorRating;
                }
                set
                {
                    this.ModelElement.AirCompressorRating = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CombustionTurbine property
        /// </summary>
        private sealed class CombustionTurbineProxy : ModelPropertyChange<IAirCompressor, ICombustionTurbine>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CombustionTurbineProxy(IAirCompressor modelElement) : 
                    base(modelElement, "CombustionTurbine")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICombustionTurbine Value
            {
                get
                {
                    return this.ModelElement.CombustionTurbine;
                }
                set
                {
                    this.ModelElement.CombustionTurbine = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CAESPlant property
        /// </summary>
        private sealed class CAESPlantProxy : ModelPropertyChange<IAirCompressor, ICAESPlant>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CAESPlantProxy(IAirCompressor modelElement) : 
                    base(modelElement, "CAESPlant")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICAESPlant Value
            {
                get
                {
                    return this.ModelElement.CAESPlant;
                }
                set
                {
                    this.ModelElement.CAESPlant = value;
                }
            }
        }
    }
}

