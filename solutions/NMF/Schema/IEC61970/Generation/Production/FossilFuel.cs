using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.Production
{
    
    
    /// <summary>
    /// The default implementation of the FossilFuel class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Production")]
    [XmlNamespacePrefixAttribute("cimProduction")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/FossilF" +
        "uel")]
    [DebuggerDisplayAttribute("FossilFuel {UUID}")]
    public partial class FossilFuel : IdentifiedObject, IFossilFuel, IModelElement
    {
        
        /// <summary>
        /// The backing field for the FuelEffFactor property
        /// </summary>
        private float _fuelEffFactor;
        
        private static Lazy<ITypedElement> _fuelEffFactorAttribute = new Lazy<ITypedElement>(RetrieveFuelEffFactorAttribute);
        
        /// <summary>
        /// The backing field for the FossilFuelType property
        /// </summary>
        private Nullable<FuelType> _fossilFuelType;
        
        private static Lazy<ITypedElement> _fossilFuelTypeAttribute = new Lazy<ITypedElement>(RetrieveFossilFuelTypeAttribute);
        
        /// <summary>
        /// The backing field for the FuelMixture property
        /// </summary>
        private float _fuelMixture;
        
        private static Lazy<ITypedElement> _fuelMixtureAttribute = new Lazy<ITypedElement>(RetrieveFuelMixtureAttribute);
        
        /// <summary>
        /// The backing field for the FuelCost property
        /// </summary>
        private float _fuelCost;
        
        private static Lazy<ITypedElement> _fuelCostAttribute = new Lazy<ITypedElement>(RetrieveFuelCostAttribute);
        
        /// <summary>
        /// The backing field for the LowBreakpointP property
        /// </summary>
        private float _lowBreakpointP;
        
        private static Lazy<ITypedElement> _lowBreakpointPAttribute = new Lazy<ITypedElement>(RetrieveLowBreakpointPAttribute);
        
        /// <summary>
        /// The backing field for the FuelHandlingCost property
        /// </summary>
        private float _fuelHandlingCost;
        
        private static Lazy<ITypedElement> _fuelHandlingCostAttribute = new Lazy<ITypedElement>(RetrieveFuelHandlingCostAttribute);
        
        /// <summary>
        /// The backing field for the FuelSulfur property
        /// </summary>
        private float _fuelSulfur;
        
        private static Lazy<ITypedElement> _fuelSulfurAttribute = new Lazy<ITypedElement>(RetrieveFuelSulfurAttribute);
        
        /// <summary>
        /// The backing field for the FuelHeatContent property
        /// </summary>
        private float _fuelHeatContent;
        
        private static Lazy<ITypedElement> _fuelHeatContentAttribute = new Lazy<ITypedElement>(RetrieveFuelHeatContentAttribute);
        
        /// <summary>
        /// The backing field for the HighBreakpointP property
        /// </summary>
        private float _highBreakpointP;
        
        private static Lazy<ITypedElement> _highBreakpointPAttribute = new Lazy<ITypedElement>(RetrieveHighBreakpointPAttribute);
        
        /// <summary>
        /// The backing field for the FuelDispatchCost property
        /// </summary>
        private float _fuelDispatchCost;
        
        private static Lazy<ITypedElement> _fuelDispatchCostAttribute = new Lazy<ITypedElement>(RetrieveFuelDispatchCostAttribute);
        
        private static Lazy<ITypedElement> _fuelAllocationSchedulesReference = new Lazy<ITypedElement>(RetrieveFuelAllocationSchedulesReference);
        
        /// <summary>
        /// The backing field for the FuelAllocationSchedules property
        /// </summary>
        private FossilFuelFuelAllocationSchedulesCollection _fuelAllocationSchedules;
        
        private static Lazy<ITypedElement> _thermalGeneratingUnitReference = new Lazy<ITypedElement>(RetrieveThermalGeneratingUnitReference);
        
        /// <summary>
        /// The backing field for the ThermalGeneratingUnit property
        /// </summary>
        private IThermalGeneratingUnit _thermalGeneratingUnit;
        
        private static IClass _classInstance;
        
        public FossilFuel()
        {
            this._fuelAllocationSchedules = new FossilFuelFuelAllocationSchedulesCollection(this);
            this._fuelAllocationSchedules.CollectionChanging += this.FuelAllocationSchedulesCollectionChanging;
            this._fuelAllocationSchedules.CollectionChanged += this.FuelAllocationSchedulesCollectionChanged;
        }
        
        /// <summary>
        /// The fuelEffFactor property
        /// </summary>
        [XmlElementNameAttribute("fuelEffFactor")]
        [XmlAttributeAttribute(true)]
        public virtual float FuelEffFactor
        {
            get
            {
                return this._fuelEffFactor;
            }
            set
            {
                if ((this._fuelEffFactor != value))
                {
                    float old = this._fuelEffFactor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFuelEffFactorChanging(e);
                    this.OnPropertyChanging("FuelEffFactor", e, _fuelEffFactorAttribute);
                    this._fuelEffFactor = value;
                    this.OnFuelEffFactorChanged(e);
                    this.OnPropertyChanged("FuelEffFactor", e, _fuelEffFactorAttribute);
                }
            }
        }
        
        /// <summary>
        /// The fossilFuelType property
        /// </summary>
        [XmlElementNameAttribute("fossilFuelType")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<FuelType> FossilFuelType
        {
            get
            {
                return this._fossilFuelType;
            }
            set
            {
                if ((this._fossilFuelType != value))
                {
                    Nullable<FuelType> old = this._fossilFuelType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFossilFuelTypeChanging(e);
                    this.OnPropertyChanging("FossilFuelType", e, _fossilFuelTypeAttribute);
                    this._fossilFuelType = value;
                    this.OnFossilFuelTypeChanged(e);
                    this.OnPropertyChanged("FossilFuelType", e, _fossilFuelTypeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The fuelMixture property
        /// </summary>
        [XmlElementNameAttribute("fuelMixture")]
        [XmlAttributeAttribute(true)]
        public virtual float FuelMixture
        {
            get
            {
                return this._fuelMixture;
            }
            set
            {
                if ((this._fuelMixture != value))
                {
                    float old = this._fuelMixture;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFuelMixtureChanging(e);
                    this.OnPropertyChanging("FuelMixture", e, _fuelMixtureAttribute);
                    this._fuelMixture = value;
                    this.OnFuelMixtureChanged(e);
                    this.OnPropertyChanged("FuelMixture", e, _fuelMixtureAttribute);
                }
            }
        }
        
        /// <summary>
        /// The fuelCost property
        /// </summary>
        [XmlElementNameAttribute("fuelCost")]
        [XmlAttributeAttribute(true)]
        public virtual float FuelCost
        {
            get
            {
                return this._fuelCost;
            }
            set
            {
                if ((this._fuelCost != value))
                {
                    float old = this._fuelCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFuelCostChanging(e);
                    this.OnPropertyChanging("FuelCost", e, _fuelCostAttribute);
                    this._fuelCost = value;
                    this.OnFuelCostChanged(e);
                    this.OnPropertyChanged("FuelCost", e, _fuelCostAttribute);
                }
            }
        }
        
        /// <summary>
        /// The lowBreakpointP property
        /// </summary>
        [XmlElementNameAttribute("lowBreakpointP")]
        [XmlAttributeAttribute(true)]
        public virtual float LowBreakpointP
        {
            get
            {
                return this._lowBreakpointP;
            }
            set
            {
                if ((this._lowBreakpointP != value))
                {
                    float old = this._lowBreakpointP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLowBreakpointPChanging(e);
                    this.OnPropertyChanging("LowBreakpointP", e, _lowBreakpointPAttribute);
                    this._lowBreakpointP = value;
                    this.OnLowBreakpointPChanged(e);
                    this.OnPropertyChanged("LowBreakpointP", e, _lowBreakpointPAttribute);
                }
            }
        }
        
        /// <summary>
        /// The fuelHandlingCost property
        /// </summary>
        [XmlElementNameAttribute("fuelHandlingCost")]
        [XmlAttributeAttribute(true)]
        public virtual float FuelHandlingCost
        {
            get
            {
                return this._fuelHandlingCost;
            }
            set
            {
                if ((this._fuelHandlingCost != value))
                {
                    float old = this._fuelHandlingCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFuelHandlingCostChanging(e);
                    this.OnPropertyChanging("FuelHandlingCost", e, _fuelHandlingCostAttribute);
                    this._fuelHandlingCost = value;
                    this.OnFuelHandlingCostChanged(e);
                    this.OnPropertyChanged("FuelHandlingCost", e, _fuelHandlingCostAttribute);
                }
            }
        }
        
        /// <summary>
        /// The fuelSulfur property
        /// </summary>
        [XmlElementNameAttribute("fuelSulfur")]
        [XmlAttributeAttribute(true)]
        public virtual float FuelSulfur
        {
            get
            {
                return this._fuelSulfur;
            }
            set
            {
                if ((this._fuelSulfur != value))
                {
                    float old = this._fuelSulfur;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFuelSulfurChanging(e);
                    this.OnPropertyChanging("FuelSulfur", e, _fuelSulfurAttribute);
                    this._fuelSulfur = value;
                    this.OnFuelSulfurChanged(e);
                    this.OnPropertyChanged("FuelSulfur", e, _fuelSulfurAttribute);
                }
            }
        }
        
        /// <summary>
        /// The fuelHeatContent property
        /// </summary>
        [XmlElementNameAttribute("fuelHeatContent")]
        [XmlAttributeAttribute(true)]
        public virtual float FuelHeatContent
        {
            get
            {
                return this._fuelHeatContent;
            }
            set
            {
                if ((this._fuelHeatContent != value))
                {
                    float old = this._fuelHeatContent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFuelHeatContentChanging(e);
                    this.OnPropertyChanging("FuelHeatContent", e, _fuelHeatContentAttribute);
                    this._fuelHeatContent = value;
                    this.OnFuelHeatContentChanged(e);
                    this.OnPropertyChanged("FuelHeatContent", e, _fuelHeatContentAttribute);
                }
            }
        }
        
        /// <summary>
        /// The highBreakpointP property
        /// </summary>
        [XmlElementNameAttribute("highBreakpointP")]
        [XmlAttributeAttribute(true)]
        public virtual float HighBreakpointP
        {
            get
            {
                return this._highBreakpointP;
            }
            set
            {
                if ((this._highBreakpointP != value))
                {
                    float old = this._highBreakpointP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHighBreakpointPChanging(e);
                    this.OnPropertyChanging("HighBreakpointP", e, _highBreakpointPAttribute);
                    this._highBreakpointP = value;
                    this.OnHighBreakpointPChanged(e);
                    this.OnPropertyChanged("HighBreakpointP", e, _highBreakpointPAttribute);
                }
            }
        }
        
        /// <summary>
        /// The fuelDispatchCost property
        /// </summary>
        [XmlElementNameAttribute("fuelDispatchCost")]
        [XmlAttributeAttribute(true)]
        public virtual float FuelDispatchCost
        {
            get
            {
                return this._fuelDispatchCost;
            }
            set
            {
                if ((this._fuelDispatchCost != value))
                {
                    float old = this._fuelDispatchCost;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFuelDispatchCostChanging(e);
                    this.OnPropertyChanging("FuelDispatchCost", e, _fuelDispatchCostAttribute);
                    this._fuelDispatchCost = value;
                    this.OnFuelDispatchCostChanged(e);
                    this.OnPropertyChanged("FuelDispatchCost", e, _fuelDispatchCostAttribute);
                }
            }
        }
        
        /// <summary>
        /// The FuelAllocationSchedules property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("FossilFuel")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IFuelAllocationSchedule> FuelAllocationSchedules
        {
            get
            {
                return this._fuelAllocationSchedules;
            }
        }
        
        /// <summary>
        /// The ThermalGeneratingUnit property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("FossilFuels")]
        public virtual IThermalGeneratingUnit ThermalGeneratingUnit
        {
            get
            {
                return this._thermalGeneratingUnit;
            }
            set
            {
                if ((this._thermalGeneratingUnit != value))
                {
                    IThermalGeneratingUnit old = this._thermalGeneratingUnit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThermalGeneratingUnitChanging(e);
                    this.OnPropertyChanging("ThermalGeneratingUnit", e, _thermalGeneratingUnitReference);
                    this._thermalGeneratingUnit = value;
                    if ((old != null))
                    {
                        old.FossilFuels.Remove(this);
                        old.Deleted -= this.OnResetThermalGeneratingUnit;
                    }
                    if ((value != null))
                    {
                        value.FossilFuels.Add(this);
                        value.Deleted += this.OnResetThermalGeneratingUnit;
                    }
                    this.OnThermalGeneratingUnitChanged(e);
                    this.OnPropertyChanged("ThermalGeneratingUnit", e, _thermalGeneratingUnitReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new FossilFuelReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/FossilF" +
                            "uel")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the FuelEffFactor property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FuelEffFactorChanging;
        
        /// <summary>
        /// Gets fired when the FuelEffFactor property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FuelEffFactorChanged;
        
        /// <summary>
        /// Gets fired before the FossilFuelType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FossilFuelTypeChanging;
        
        /// <summary>
        /// Gets fired when the FossilFuelType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FossilFuelTypeChanged;
        
        /// <summary>
        /// Gets fired before the FuelMixture property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FuelMixtureChanging;
        
        /// <summary>
        /// Gets fired when the FuelMixture property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FuelMixtureChanged;
        
        /// <summary>
        /// Gets fired before the FuelCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FuelCostChanging;
        
        /// <summary>
        /// Gets fired when the FuelCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FuelCostChanged;
        
        /// <summary>
        /// Gets fired before the LowBreakpointP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowBreakpointPChanging;
        
        /// <summary>
        /// Gets fired when the LowBreakpointP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowBreakpointPChanged;
        
        /// <summary>
        /// Gets fired before the FuelHandlingCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FuelHandlingCostChanging;
        
        /// <summary>
        /// Gets fired when the FuelHandlingCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FuelHandlingCostChanged;
        
        /// <summary>
        /// Gets fired before the FuelSulfur property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FuelSulfurChanging;
        
        /// <summary>
        /// Gets fired when the FuelSulfur property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FuelSulfurChanged;
        
        /// <summary>
        /// Gets fired before the FuelHeatContent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FuelHeatContentChanging;
        
        /// <summary>
        /// Gets fired when the FuelHeatContent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FuelHeatContentChanged;
        
        /// <summary>
        /// Gets fired before the HighBreakpointP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HighBreakpointPChanging;
        
        /// <summary>
        /// Gets fired when the HighBreakpointP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HighBreakpointPChanged;
        
        /// <summary>
        /// Gets fired before the FuelDispatchCost property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FuelDispatchCostChanging;
        
        /// <summary>
        /// Gets fired when the FuelDispatchCost property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FuelDispatchCostChanged;
        
        /// <summary>
        /// Gets fired before the ThermalGeneratingUnit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThermalGeneratingUnitChanging;
        
        /// <summary>
        /// Gets fired when the ThermalGeneratingUnit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThermalGeneratingUnitChanged;
        
        private static ITypedElement RetrieveFuelEffFactorAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FossilFuel.ClassInstance)).Resolve("fuelEffFactor")));
        }
        
        /// <summary>
        /// Raises the FuelEffFactorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFuelEffFactorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FuelEffFactorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FuelEffFactorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFuelEffFactorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FuelEffFactorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFossilFuelTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FossilFuel.ClassInstance)).Resolve("fossilFuelType")));
        }
        
        /// <summary>
        /// Raises the FossilFuelTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFossilFuelTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FossilFuelTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FossilFuelTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFossilFuelTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FossilFuelTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFuelMixtureAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FossilFuel.ClassInstance)).Resolve("fuelMixture")));
        }
        
        /// <summary>
        /// Raises the FuelMixtureChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFuelMixtureChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FuelMixtureChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FuelMixtureChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFuelMixtureChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FuelMixtureChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFuelCostAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FossilFuel.ClassInstance)).Resolve("fuelCost")));
        }
        
        /// <summary>
        /// Raises the FuelCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFuelCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FuelCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FuelCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFuelCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FuelCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLowBreakpointPAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FossilFuel.ClassInstance)).Resolve("lowBreakpointP")));
        }
        
        /// <summary>
        /// Raises the LowBreakpointPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowBreakpointPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowBreakpointPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowBreakpointPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowBreakpointPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowBreakpointPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFuelHandlingCostAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FossilFuel.ClassInstance)).Resolve("fuelHandlingCost")));
        }
        
        /// <summary>
        /// Raises the FuelHandlingCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFuelHandlingCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FuelHandlingCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FuelHandlingCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFuelHandlingCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FuelHandlingCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFuelSulfurAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FossilFuel.ClassInstance)).Resolve("fuelSulfur")));
        }
        
        /// <summary>
        /// Raises the FuelSulfurChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFuelSulfurChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FuelSulfurChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FuelSulfurChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFuelSulfurChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FuelSulfurChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFuelHeatContentAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FossilFuel.ClassInstance)).Resolve("fuelHeatContent")));
        }
        
        /// <summary>
        /// Raises the FuelHeatContentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFuelHeatContentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FuelHeatContentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FuelHeatContentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFuelHeatContentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FuelHeatContentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveHighBreakpointPAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FossilFuel.ClassInstance)).Resolve("highBreakpointP")));
        }
        
        /// <summary>
        /// Raises the HighBreakpointPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHighBreakpointPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HighBreakpointPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HighBreakpointPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHighBreakpointPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HighBreakpointPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFuelDispatchCostAttribute()
        {
            return ((ITypedElement)(((ModelElement)(FossilFuel.ClassInstance)).Resolve("fuelDispatchCost")));
        }
        
        /// <summary>
        /// Raises the FuelDispatchCostChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFuelDispatchCostChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FuelDispatchCostChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FuelDispatchCostChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFuelDispatchCostChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FuelDispatchCostChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFuelAllocationSchedulesReference()
        {
            return ((ITypedElement)(((ModelElement)(FossilFuel.ClassInstance)).Resolve("FuelAllocationSchedules")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the FuelAllocationSchedules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FuelAllocationSchedulesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("FuelAllocationSchedules", e, _fuelAllocationSchedulesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the FuelAllocationSchedules property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FuelAllocationSchedulesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("FuelAllocationSchedules", e, _fuelAllocationSchedulesReference);
        }
        
        private static ITypedElement RetrieveThermalGeneratingUnitReference()
        {
            return ((ITypedElement)(((ModelElement)(FossilFuel.ClassInstance)).Resolve("ThermalGeneratingUnit")));
        }
        
        /// <summary>
        /// Raises the ThermalGeneratingUnitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThermalGeneratingUnitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThermalGeneratingUnitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThermalGeneratingUnitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThermalGeneratingUnitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThermalGeneratingUnitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ThermalGeneratingUnit property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetThermalGeneratingUnit(object sender, System.EventArgs eventArgs)
        {
            this.ThermalGeneratingUnit = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "FUELEFFFACTOR"))
            {
                return this.FuelEffFactor;
            }
            if ((attribute == "FOSSILFUELTYPE"))
            {
                return this.FossilFuelType;
            }
            if ((attribute == "FUELMIXTURE"))
            {
                return this.FuelMixture;
            }
            if ((attribute == "FUELCOST"))
            {
                return this.FuelCost;
            }
            if ((attribute == "LOWBREAKPOINTP"))
            {
                return this.LowBreakpointP;
            }
            if ((attribute == "FUELHANDLINGCOST"))
            {
                return this.FuelHandlingCost;
            }
            if ((attribute == "FUELSULFUR"))
            {
                return this.FuelSulfur;
            }
            if ((attribute == "FUELHEATCONTENT"))
            {
                return this.FuelHeatContent;
            }
            if ((attribute == "HIGHBREAKPOINTP"))
            {
                return this.HighBreakpointP;
            }
            if ((attribute == "FUELDISPATCHCOST"))
            {
                return this.FuelDispatchCost;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "FUELALLOCATIONSCHEDULES"))
            {
                return this._fuelAllocationSchedules;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "THERMALGENERATINGUNIT"))
            {
                this.ThermalGeneratingUnit = ((IThermalGeneratingUnit)(value));
                return;
            }
            if ((feature == "FUELEFFFACTOR"))
            {
                this.FuelEffFactor = ((float)(value));
                return;
            }
            if ((feature == "FOSSILFUELTYPE"))
            {
                this.FossilFuelType = ((FuelType)(value));
                return;
            }
            if ((feature == "FUELMIXTURE"))
            {
                this.FuelMixture = ((float)(value));
                return;
            }
            if ((feature == "FUELCOST"))
            {
                this.FuelCost = ((float)(value));
                return;
            }
            if ((feature == "LOWBREAKPOINTP"))
            {
                this.LowBreakpointP = ((float)(value));
                return;
            }
            if ((feature == "FUELHANDLINGCOST"))
            {
                this.FuelHandlingCost = ((float)(value));
                return;
            }
            if ((feature == "FUELSULFUR"))
            {
                this.FuelSulfur = ((float)(value));
                return;
            }
            if ((feature == "FUELHEATCONTENT"))
            {
                this.FuelHeatContent = ((float)(value));
                return;
            }
            if ((feature == "HIGHBREAKPOINTP"))
            {
                this.HighBreakpointP = ((float)(value));
                return;
            }
            if ((feature == "FUELDISPATCHCOST"))
            {
                this.FuelDispatchCost = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ThermalGeneratingUnit"))
            {
                return new ThermalGeneratingUnitProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ThermalGeneratingUnit"))
            {
                return new ThermalGeneratingUnitProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/Production/FossilF" +
                        "uel")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the FossilFuel class
        /// </summary>
        public class FossilFuelReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private FossilFuel _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public FossilFuelReferencedElementsCollection(FossilFuel parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.FuelAllocationSchedules.Count);
                    if ((this._parent.ThermalGeneratingUnit != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.FuelAllocationSchedules.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ThermalGeneratingUnitChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.FuelAllocationSchedules.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ThermalGeneratingUnitChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IFuelAllocationSchedule fuelAllocationSchedulesCasted = item.As<IFuelAllocationSchedule>();
                if ((fuelAllocationSchedulesCasted != null))
                {
                    this._parent.FuelAllocationSchedules.Add(fuelAllocationSchedulesCasted);
                }
                if ((this._parent.ThermalGeneratingUnit == null))
                {
                    IThermalGeneratingUnit thermalGeneratingUnitCasted = item.As<IThermalGeneratingUnit>();
                    if ((thermalGeneratingUnitCasted != null))
                    {
                        this._parent.ThermalGeneratingUnit = thermalGeneratingUnitCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.FuelAllocationSchedules.Clear();
                this._parent.ThermalGeneratingUnit = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.FuelAllocationSchedules.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ThermalGeneratingUnit))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> fuelAllocationSchedulesEnumerator = this._parent.FuelAllocationSchedules.GetEnumerator();
                try
                {
                    for (
                    ; fuelAllocationSchedulesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = fuelAllocationSchedulesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    fuelAllocationSchedulesEnumerator.Dispose();
                }
                if ((this._parent.ThermalGeneratingUnit != null))
                {
                    array[arrayIndex] = this._parent.ThermalGeneratingUnit;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IFuelAllocationSchedule fuelAllocationScheduleItem = item.As<IFuelAllocationSchedule>();
                if (((fuelAllocationScheduleItem != null) 
                            && this._parent.FuelAllocationSchedules.Remove(fuelAllocationScheduleItem)))
                {
                    return true;
                }
                if ((this._parent.ThermalGeneratingUnit == item))
                {
                    this._parent.ThermalGeneratingUnit = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.FuelAllocationSchedules).Concat(this._parent.ThermalGeneratingUnit).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fuelEffFactor property
        /// </summary>
        private sealed class FuelEffFactorProxy : ModelPropertyChange<IFossilFuel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FuelEffFactorProxy(IFossilFuel modelElement) : 
                    base(modelElement, "fuelEffFactor")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.FuelEffFactor;
                }
                set
                {
                    this.ModelElement.FuelEffFactor = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fossilFuelType property
        /// </summary>
        private sealed class FossilFuelTypeProxy : ModelPropertyChange<IFossilFuel, Nullable<FuelType>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FossilFuelTypeProxy(IFossilFuel modelElement) : 
                    base(modelElement, "fossilFuelType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<FuelType> Value
            {
                get
                {
                    return this.ModelElement.FossilFuelType;
                }
                set
                {
                    this.ModelElement.FossilFuelType = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fuelMixture property
        /// </summary>
        private sealed class FuelMixtureProxy : ModelPropertyChange<IFossilFuel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FuelMixtureProxy(IFossilFuel modelElement) : 
                    base(modelElement, "fuelMixture")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.FuelMixture;
                }
                set
                {
                    this.ModelElement.FuelMixture = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fuelCost property
        /// </summary>
        private sealed class FuelCostProxy : ModelPropertyChange<IFossilFuel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FuelCostProxy(IFossilFuel modelElement) : 
                    base(modelElement, "fuelCost")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.FuelCost;
                }
                set
                {
                    this.ModelElement.FuelCost = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lowBreakpointP property
        /// </summary>
        private sealed class LowBreakpointPProxy : ModelPropertyChange<IFossilFuel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowBreakpointPProxy(IFossilFuel modelElement) : 
                    base(modelElement, "lowBreakpointP")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.LowBreakpointP;
                }
                set
                {
                    this.ModelElement.LowBreakpointP = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fuelHandlingCost property
        /// </summary>
        private sealed class FuelHandlingCostProxy : ModelPropertyChange<IFossilFuel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FuelHandlingCostProxy(IFossilFuel modelElement) : 
                    base(modelElement, "fuelHandlingCost")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.FuelHandlingCost;
                }
                set
                {
                    this.ModelElement.FuelHandlingCost = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fuelSulfur property
        /// </summary>
        private sealed class FuelSulfurProxy : ModelPropertyChange<IFossilFuel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FuelSulfurProxy(IFossilFuel modelElement) : 
                    base(modelElement, "fuelSulfur")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.FuelSulfur;
                }
                set
                {
                    this.ModelElement.FuelSulfur = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fuelHeatContent property
        /// </summary>
        private sealed class FuelHeatContentProxy : ModelPropertyChange<IFossilFuel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FuelHeatContentProxy(IFossilFuel modelElement) : 
                    base(modelElement, "fuelHeatContent")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.FuelHeatContent;
                }
                set
                {
                    this.ModelElement.FuelHeatContent = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the highBreakpointP property
        /// </summary>
        private sealed class HighBreakpointPProxy : ModelPropertyChange<IFossilFuel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HighBreakpointPProxy(IFossilFuel modelElement) : 
                    base(modelElement, "highBreakpointP")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.HighBreakpointP;
                }
                set
                {
                    this.ModelElement.HighBreakpointP = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fuelDispatchCost property
        /// </summary>
        private sealed class FuelDispatchCostProxy : ModelPropertyChange<IFossilFuel, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FuelDispatchCostProxy(IFossilFuel modelElement) : 
                    base(modelElement, "fuelDispatchCost")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.FuelDispatchCost;
                }
                set
                {
                    this.ModelElement.FuelDispatchCost = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ThermalGeneratingUnit property
        /// </summary>
        private sealed class ThermalGeneratingUnitProxy : ModelPropertyChange<IFossilFuel, IThermalGeneratingUnit>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThermalGeneratingUnitProxy(IFossilFuel modelElement) : 
                    base(modelElement, "ThermalGeneratingUnit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IThermalGeneratingUnit Value
            {
                get
                {
                    return this.ModelElement.ThermalGeneratingUnit;
                }
                set
                {
                    this.ModelElement.ThermalGeneratingUnit = value;
                }
            }
        }
    }
}

