//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.Production
{
    
    
    /// <summary>
    /// The public interface for HydroGeneratingUnit
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(HydroGeneratingUnit))]
    [XmlDefaultImplementationTypeAttribute(typeof(HydroGeneratingUnit))]
    public interface IHydroGeneratingUnit : IModelElement, IGeneratingUnit
    {
        
        /// <summary>
        /// The energyConversionCapability property
        /// </summary>
        Nullable<HydroEnergyConversionKind> EnergyConversionCapability
        {
            get;
            set;
        }
        
        /// <summary>
        /// The hydroUnitWaterCost property
        /// </summary>
        float HydroUnitWaterCost
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TailbayLossCurve property
        /// </summary>
        IOrderedSetExpression<ITailbayLossCurve> TailbayLossCurve
        {
            get;
        }
        
        /// <summary>
        /// The HydroPowerPlant property
        /// </summary>
        IHydroPowerPlant HydroPowerPlant
        {
            get;
            set;
        }
        
        /// <summary>
        /// The HydroGeneratingEfficiencyCurves property
        /// </summary>
        IOrderedSetExpression<IHydroGeneratingEfficiencyCurve> HydroGeneratingEfficiencyCurves
        {
            get;
        }
        
        /// <summary>
        /// The PenstockLossCurve property
        /// </summary>
        IPenstockLossCurve PenstockLossCurve
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the EnergyConversionCapability property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EnergyConversionCapabilityChanging;
        
        /// <summary>
        /// Gets fired when the EnergyConversionCapability property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EnergyConversionCapabilityChanged;
        
        /// <summary>
        /// Gets fired before the HydroUnitWaterCost property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HydroUnitWaterCostChanging;
        
        /// <summary>
        /// Gets fired when the HydroUnitWaterCost property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HydroUnitWaterCostChanged;
        
        /// <summary>
        /// Gets fired before the HydroPowerPlant property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HydroPowerPlantChanging;
        
        /// <summary>
        /// Gets fired when the HydroPowerPlant property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HydroPowerPlantChanged;
        
        /// <summary>
        /// Gets fired before the PenstockLossCurve property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PenstockLossCurveChanging;
        
        /// <summary>
        /// Gets fired when the PenstockLossCurve property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PenstockLossCurveChanged;
    }
}

