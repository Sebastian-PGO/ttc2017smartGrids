using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.ControlArea;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.EnergyScheduling;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.Financial;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.Production
{
    
    
    /// <summary>
    /// The public interface for StartupModel
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(StartupModel))]
    [XmlDefaultImplementationTypeAttribute(typeof(StartupModel))]
    public interface IStartupModel : IModelElement, IIdentifiedObject
    {
        
        /// <summary>
        /// The fixedMaintCost property
        /// </summary>
        float FixedMaintCost
        {
            get;
            set;
        }
        
        /// <summary>
        /// The riskFactorCost property
        /// </summary>
        float RiskFactorCost
        {
            get;
            set;
        }
        
        /// <summary>
        /// The stbyAuxP property
        /// </summary>
        float StbyAuxP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The startupDate property
        /// </summary>
        DateTime StartupDate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minimumDownTime property
        /// </summary>
        float MinimumDownTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minimumRunTime property
        /// </summary>
        float MinimumRunTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The startupPriority property
        /// </summary>
        int StartupPriority
        {
            get;
            set;
        }
        
        /// <summary>
        /// The startupCost property
        /// </summary>
        float StartupCost
        {
            get;
            set;
        }
        
        /// <summary>
        /// The hotStandbyHeat property
        /// </summary>
        float HotStandbyHeat
        {
            get;
            set;
        }
        
        /// <summary>
        /// The incrementalMaintCost property
        /// </summary>
        float IncrementalMaintCost
        {
            get;
            set;
        }
        
        /// <summary>
        /// The StartIgnFuelCurve property
        /// </summary>
        IStartIgnFuelCurve StartIgnFuelCurve
        {
            get;
            set;
        }
        
        /// <summary>
        /// The StartRampCurve property
        /// </summary>
        IStartRampCurve StartRampCurve
        {
            get;
            set;
        }
        
        /// <summary>
        /// The StartMainFuelCurve property
        /// </summary>
        IStartMainFuelCurve StartMainFuelCurve
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ThermalGeneratingUnit property
        /// </summary>
        IThermalGeneratingUnit ThermalGeneratingUnit
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the FixedMaintCost property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FixedMaintCostChanging;
        
        /// <summary>
        /// Gets fired when the FixedMaintCost property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FixedMaintCostChanged;
        
        /// <summary>
        /// Gets fired before the RiskFactorCost property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RiskFactorCostChanging;
        
        /// <summary>
        /// Gets fired when the RiskFactorCost property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RiskFactorCostChanged;
        
        /// <summary>
        /// Gets fired before the StbyAuxP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StbyAuxPChanging;
        
        /// <summary>
        /// Gets fired when the StbyAuxP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StbyAuxPChanged;
        
        /// <summary>
        /// Gets fired before the StartupDate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartupDateChanging;
        
        /// <summary>
        /// Gets fired when the StartupDate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartupDateChanged;
        
        /// <summary>
        /// Gets fired before the MinimumDownTime property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinimumDownTimeChanging;
        
        /// <summary>
        /// Gets fired when the MinimumDownTime property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinimumDownTimeChanged;
        
        /// <summary>
        /// Gets fired before the MinimumRunTime property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinimumRunTimeChanging;
        
        /// <summary>
        /// Gets fired when the MinimumRunTime property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinimumRunTimeChanged;
        
        /// <summary>
        /// Gets fired before the StartupPriority property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartupPriorityChanging;
        
        /// <summary>
        /// Gets fired when the StartupPriority property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartupPriorityChanged;
        
        /// <summary>
        /// Gets fired before the StartupCost property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartupCostChanging;
        
        /// <summary>
        /// Gets fired when the StartupCost property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartupCostChanged;
        
        /// <summary>
        /// Gets fired before the HotStandbyHeat property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HotStandbyHeatChanging;
        
        /// <summary>
        /// Gets fired when the HotStandbyHeat property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HotStandbyHeatChanged;
        
        /// <summary>
        /// Gets fired before the IncrementalMaintCost property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IncrementalMaintCostChanging;
        
        /// <summary>
        /// Gets fired when the IncrementalMaintCost property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IncrementalMaintCostChanged;
        
        /// <summary>
        /// Gets fired before the StartIgnFuelCurve property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartIgnFuelCurveChanging;
        
        /// <summary>
        /// Gets fired when the StartIgnFuelCurve property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartIgnFuelCurveChanged;
        
        /// <summary>
        /// Gets fired before the StartRampCurve property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartRampCurveChanging;
        
        /// <summary>
        /// Gets fired when the StartRampCurve property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartRampCurveChanged;
        
        /// <summary>
        /// Gets fired before the StartMainFuelCurve property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartMainFuelCurveChanging;
        
        /// <summary>
        /// Gets fired when the StartMainFuelCurve property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StartMainFuelCurveChanged;
        
        /// <summary>
        /// Gets fired before the ThermalGeneratingUnit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThermalGeneratingUnitChanging;
        
        /// <summary>
        /// Gets fired when the ThermalGeneratingUnit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThermalGeneratingUnitChanged;
    }
}

