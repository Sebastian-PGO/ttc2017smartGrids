//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics
{
    
    
    /// <summary>
    /// The default implementation of the BWRSteamSupply class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#GenerationDynamics")]
    [XmlNamespacePrefixAttribute("cimGenerationDynamics")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/GenerationDynamics" +
        "/BWRSteamSupply")]
    [DebuggerDisplayAttribute("BWRSteamSupply {UUID}")]
    public partial class BWRSteamSupply : SteamSupply, IBWRSteamSupply, IModelElement
    {
        
        /// <summary>
        /// The backing field for the LowPowerLimit property
        /// </summary>
        private float _lowPowerLimit;
        
        private static Lazy<ITypedElement> _lowPowerLimitAttribute = new Lazy<ITypedElement>(RetrieveLowPowerLimitAttribute);
        
        /// <summary>
        /// The backing field for the InCoreThermalTC property
        /// </summary>
        private float _inCoreThermalTC;
        
        private static Lazy<ITypedElement> _inCoreThermalTCAttribute = new Lazy<ITypedElement>(RetrieveInCoreThermalTCAttribute);
        
        /// <summary>
        /// The backing field for the IntegralGain property
        /// </summary>
        private float _integralGain;
        
        private static Lazy<ITypedElement> _integralGainAttribute = new Lazy<ITypedElement>(RetrieveIntegralGainAttribute);
        
        /// <summary>
        /// The backing field for the PressureSetpointGA property
        /// </summary>
        private float _pressureSetpointGA;
        
        private static Lazy<ITypedElement> _pressureSetpointGAAttribute = new Lazy<ITypedElement>(RetrievePressureSetpointGAAttribute);
        
        /// <summary>
        /// The backing field for the RfAux1 property
        /// </summary>
        private float _rfAux1;
        
        private static Lazy<ITypedElement> _rfAux1Attribute = new Lazy<ITypedElement>(RetrieveRfAux1Attribute);
        
        /// <summary>
        /// The backing field for the RfAux2 property
        /// </summary>
        private float _rfAux2;
        
        private static Lazy<ITypedElement> _rfAux2Attribute = new Lazy<ITypedElement>(RetrieveRfAux2Attribute);
        
        /// <summary>
        /// The backing field for the LowerLimit property
        /// </summary>
        private float _lowerLimit;
        
        private static Lazy<ITypedElement> _lowerLimitAttribute = new Lazy<ITypedElement>(RetrieveLowerLimitAttribute);
        
        /// <summary>
        /// The backing field for the RodPatternConstant property
        /// </summary>
        private float _rodPatternConstant;
        
        private static Lazy<ITypedElement> _rodPatternConstantAttribute = new Lazy<ITypedElement>(RetrieveRodPatternConstantAttribute);
        
        /// <summary>
        /// The backing field for the RfAux8 property
        /// </summary>
        private float _rfAux8;
        
        private static Lazy<ITypedElement> _rfAux8Attribute = new Lazy<ITypedElement>(RetrieveRfAux8Attribute);
        
        /// <summary>
        /// The backing field for the RfAux7 property
        /// </summary>
        private float _rfAux7;
        
        private static Lazy<ITypedElement> _rfAux7Attribute = new Lazy<ITypedElement>(RetrieveRfAux7Attribute);
        
        /// <summary>
        /// The backing field for the RodPattern property
        /// </summary>
        private float _rodPattern;
        
        private static Lazy<ITypedElement> _rodPatternAttribute = new Lazy<ITypedElement>(RetrieveRodPatternAttribute);
        
        /// <summary>
        /// The backing field for the RfAux4 property
        /// </summary>
        private float _rfAux4;
        
        private static Lazy<ITypedElement> _rfAux4Attribute = new Lazy<ITypedElement>(RetrieveRfAux4Attribute);
        
        /// <summary>
        /// The backing field for the RfAux3 property
        /// </summary>
        private float _rfAux3;
        
        private static Lazy<ITypedElement> _rfAux3Attribute = new Lazy<ITypedElement>(RetrieveRfAux3Attribute);
        
        /// <summary>
        /// The backing field for the RfAux6 property
        /// </summary>
        private float _rfAux6;
        
        private static Lazy<ITypedElement> _rfAux6Attribute = new Lazy<ITypedElement>(RetrieveRfAux6Attribute);
        
        /// <summary>
        /// The backing field for the RfAux5 property
        /// </summary>
        private float _rfAux5;
        
        private static Lazy<ITypedElement> _rfAux5Attribute = new Lazy<ITypedElement>(RetrieveRfAux5Attribute);
        
        /// <summary>
        /// The backing field for the ProportionalGain property
        /// </summary>
        private float _proportionalGain;
        
        private static Lazy<ITypedElement> _proportionalGainAttribute = new Lazy<ITypedElement>(RetrieveProportionalGainAttribute);
        
        /// <summary>
        /// The backing field for the UpperLimit property
        /// </summary>
        private float _upperLimit;
        
        private static Lazy<ITypedElement> _upperLimitAttribute = new Lazy<ITypedElement>(RetrieveUpperLimitAttribute);
        
        /// <summary>
        /// The backing field for the HighPowerLimit property
        /// </summary>
        private float _highPowerLimit;
        
        private static Lazy<ITypedElement> _highPowerLimitAttribute = new Lazy<ITypedElement>(RetrieveHighPowerLimitAttribute);
        
        /// <summary>
        /// The backing field for the PressureSetpointTC2 property
        /// </summary>
        private float _pressureSetpointTC2;
        
        private static Lazy<ITypedElement> _pressureSetpointTC2Attribute = new Lazy<ITypedElement>(RetrievePressureSetpointTC2Attribute);
        
        /// <summary>
        /// The backing field for the PressureSetpointTC1 property
        /// </summary>
        private float _pressureSetpointTC1;
        
        private static Lazy<ITypedElement> _pressureSetpointTC1Attribute = new Lazy<ITypedElement>(RetrievePressureSetpointTC1Attribute);
        
        /// <summary>
        /// The backing field for the PressureLimit property
        /// </summary>
        private float _pressureLimit;
        
        private static Lazy<ITypedElement> _pressureLimitAttribute = new Lazy<ITypedElement>(RetrievePressureLimitAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The lowPowerLimit property
        /// </summary>
        [XmlElementNameAttribute("lowPowerLimit")]
        [XmlAttributeAttribute(true)]
        public virtual float LowPowerLimit
        {
            get
            {
                return this._lowPowerLimit;
            }
            set
            {
                if ((this._lowPowerLimit != value))
                {
                    float old = this._lowPowerLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLowPowerLimitChanging(e);
                    this.OnPropertyChanging("LowPowerLimit", e, _lowPowerLimitAttribute);
                    this._lowPowerLimit = value;
                    this.OnLowPowerLimitChanged(e);
                    this.OnPropertyChanged("LowPowerLimit", e, _lowPowerLimitAttribute);
                }
            }
        }
        
        /// <summary>
        /// The inCoreThermalTC property
        /// </summary>
        [XmlElementNameAttribute("inCoreThermalTC")]
        [XmlAttributeAttribute(true)]
        public virtual float InCoreThermalTC
        {
            get
            {
                return this._inCoreThermalTC;
            }
            set
            {
                if ((this._inCoreThermalTC != value))
                {
                    float old = this._inCoreThermalTC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInCoreThermalTCChanging(e);
                    this.OnPropertyChanging("InCoreThermalTC", e, _inCoreThermalTCAttribute);
                    this._inCoreThermalTC = value;
                    this.OnInCoreThermalTCChanged(e);
                    this.OnPropertyChanged("InCoreThermalTC", e, _inCoreThermalTCAttribute);
                }
            }
        }
        
        /// <summary>
        /// The integralGain property
        /// </summary>
        [XmlElementNameAttribute("integralGain")]
        [XmlAttributeAttribute(true)]
        public virtual float IntegralGain
        {
            get
            {
                return this._integralGain;
            }
            set
            {
                if ((this._integralGain != value))
                {
                    float old = this._integralGain;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIntegralGainChanging(e);
                    this.OnPropertyChanging("IntegralGain", e, _integralGainAttribute);
                    this._integralGain = value;
                    this.OnIntegralGainChanged(e);
                    this.OnPropertyChanged("IntegralGain", e, _integralGainAttribute);
                }
            }
        }
        
        /// <summary>
        /// The pressureSetpointGA property
        /// </summary>
        [XmlElementNameAttribute("pressureSetpointGA")]
        [XmlAttributeAttribute(true)]
        public virtual float PressureSetpointGA
        {
            get
            {
                return this._pressureSetpointGA;
            }
            set
            {
                if ((this._pressureSetpointGA != value))
                {
                    float old = this._pressureSetpointGA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPressureSetpointGAChanging(e);
                    this.OnPropertyChanging("PressureSetpointGA", e, _pressureSetpointGAAttribute);
                    this._pressureSetpointGA = value;
                    this.OnPressureSetpointGAChanged(e);
                    this.OnPropertyChanged("PressureSetpointGA", e, _pressureSetpointGAAttribute);
                }
            }
        }
        
        /// <summary>
        /// The rfAux1 property
        /// </summary>
        [XmlElementNameAttribute("rfAux1")]
        [XmlAttributeAttribute(true)]
        public virtual float RfAux1
        {
            get
            {
                return this._rfAux1;
            }
            set
            {
                if ((this._rfAux1 != value))
                {
                    float old = this._rfAux1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRfAux1Changing(e);
                    this.OnPropertyChanging("RfAux1", e, _rfAux1Attribute);
                    this._rfAux1 = value;
                    this.OnRfAux1Changed(e);
                    this.OnPropertyChanged("RfAux1", e, _rfAux1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The rfAux2 property
        /// </summary>
        [XmlElementNameAttribute("rfAux2")]
        [XmlAttributeAttribute(true)]
        public virtual float RfAux2
        {
            get
            {
                return this._rfAux2;
            }
            set
            {
                if ((this._rfAux2 != value))
                {
                    float old = this._rfAux2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRfAux2Changing(e);
                    this.OnPropertyChanging("RfAux2", e, _rfAux2Attribute);
                    this._rfAux2 = value;
                    this.OnRfAux2Changed(e);
                    this.OnPropertyChanged("RfAux2", e, _rfAux2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The lowerLimit property
        /// </summary>
        [XmlElementNameAttribute("lowerLimit")]
        [XmlAttributeAttribute(true)]
        public virtual float LowerLimit
        {
            get
            {
                return this._lowerLimit;
            }
            set
            {
                if ((this._lowerLimit != value))
                {
                    float old = this._lowerLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLowerLimitChanging(e);
                    this.OnPropertyChanging("LowerLimit", e, _lowerLimitAttribute);
                    this._lowerLimit = value;
                    this.OnLowerLimitChanged(e);
                    this.OnPropertyChanged("LowerLimit", e, _lowerLimitAttribute);
                }
            }
        }
        
        /// <summary>
        /// The rodPatternConstant property
        /// </summary>
        [XmlElementNameAttribute("rodPatternConstant")]
        [XmlAttributeAttribute(true)]
        public virtual float RodPatternConstant
        {
            get
            {
                return this._rodPatternConstant;
            }
            set
            {
                if ((this._rodPatternConstant != value))
                {
                    float old = this._rodPatternConstant;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRodPatternConstantChanging(e);
                    this.OnPropertyChanging("RodPatternConstant", e, _rodPatternConstantAttribute);
                    this._rodPatternConstant = value;
                    this.OnRodPatternConstantChanged(e);
                    this.OnPropertyChanged("RodPatternConstant", e, _rodPatternConstantAttribute);
                }
            }
        }
        
        /// <summary>
        /// The rfAux8 property
        /// </summary>
        [XmlElementNameAttribute("rfAux8")]
        [XmlAttributeAttribute(true)]
        public virtual float RfAux8
        {
            get
            {
                return this._rfAux8;
            }
            set
            {
                if ((this._rfAux8 != value))
                {
                    float old = this._rfAux8;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRfAux8Changing(e);
                    this.OnPropertyChanging("RfAux8", e, _rfAux8Attribute);
                    this._rfAux8 = value;
                    this.OnRfAux8Changed(e);
                    this.OnPropertyChanged("RfAux8", e, _rfAux8Attribute);
                }
            }
        }
        
        /// <summary>
        /// The rfAux7 property
        /// </summary>
        [XmlElementNameAttribute("rfAux7")]
        [XmlAttributeAttribute(true)]
        public virtual float RfAux7
        {
            get
            {
                return this._rfAux7;
            }
            set
            {
                if ((this._rfAux7 != value))
                {
                    float old = this._rfAux7;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRfAux7Changing(e);
                    this.OnPropertyChanging("RfAux7", e, _rfAux7Attribute);
                    this._rfAux7 = value;
                    this.OnRfAux7Changed(e);
                    this.OnPropertyChanged("RfAux7", e, _rfAux7Attribute);
                }
            }
        }
        
        /// <summary>
        /// The rodPattern property
        /// </summary>
        [XmlElementNameAttribute("rodPattern")]
        [XmlAttributeAttribute(true)]
        public virtual float RodPattern
        {
            get
            {
                return this._rodPattern;
            }
            set
            {
                if ((this._rodPattern != value))
                {
                    float old = this._rodPattern;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRodPatternChanging(e);
                    this.OnPropertyChanging("RodPattern", e, _rodPatternAttribute);
                    this._rodPattern = value;
                    this.OnRodPatternChanged(e);
                    this.OnPropertyChanged("RodPattern", e, _rodPatternAttribute);
                }
            }
        }
        
        /// <summary>
        /// The rfAux4 property
        /// </summary>
        [XmlElementNameAttribute("rfAux4")]
        [XmlAttributeAttribute(true)]
        public virtual float RfAux4
        {
            get
            {
                return this._rfAux4;
            }
            set
            {
                if ((this._rfAux4 != value))
                {
                    float old = this._rfAux4;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRfAux4Changing(e);
                    this.OnPropertyChanging("RfAux4", e, _rfAux4Attribute);
                    this._rfAux4 = value;
                    this.OnRfAux4Changed(e);
                    this.OnPropertyChanged("RfAux4", e, _rfAux4Attribute);
                }
            }
        }
        
        /// <summary>
        /// The rfAux3 property
        /// </summary>
        [XmlElementNameAttribute("rfAux3")]
        [XmlAttributeAttribute(true)]
        public virtual float RfAux3
        {
            get
            {
                return this._rfAux3;
            }
            set
            {
                if ((this._rfAux3 != value))
                {
                    float old = this._rfAux3;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRfAux3Changing(e);
                    this.OnPropertyChanging("RfAux3", e, _rfAux3Attribute);
                    this._rfAux3 = value;
                    this.OnRfAux3Changed(e);
                    this.OnPropertyChanged("RfAux3", e, _rfAux3Attribute);
                }
            }
        }
        
        /// <summary>
        /// The rfAux6 property
        /// </summary>
        [XmlElementNameAttribute("rfAux6")]
        [XmlAttributeAttribute(true)]
        public virtual float RfAux6
        {
            get
            {
                return this._rfAux6;
            }
            set
            {
                if ((this._rfAux6 != value))
                {
                    float old = this._rfAux6;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRfAux6Changing(e);
                    this.OnPropertyChanging("RfAux6", e, _rfAux6Attribute);
                    this._rfAux6 = value;
                    this.OnRfAux6Changed(e);
                    this.OnPropertyChanged("RfAux6", e, _rfAux6Attribute);
                }
            }
        }
        
        /// <summary>
        /// The rfAux5 property
        /// </summary>
        [XmlElementNameAttribute("rfAux5")]
        [XmlAttributeAttribute(true)]
        public virtual float RfAux5
        {
            get
            {
                return this._rfAux5;
            }
            set
            {
                if ((this._rfAux5 != value))
                {
                    float old = this._rfAux5;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRfAux5Changing(e);
                    this.OnPropertyChanging("RfAux5", e, _rfAux5Attribute);
                    this._rfAux5 = value;
                    this.OnRfAux5Changed(e);
                    this.OnPropertyChanged("RfAux5", e, _rfAux5Attribute);
                }
            }
        }
        
        /// <summary>
        /// The proportionalGain property
        /// </summary>
        [XmlElementNameAttribute("proportionalGain")]
        [XmlAttributeAttribute(true)]
        public virtual float ProportionalGain
        {
            get
            {
                return this._proportionalGain;
            }
            set
            {
                if ((this._proportionalGain != value))
                {
                    float old = this._proportionalGain;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnProportionalGainChanging(e);
                    this.OnPropertyChanging("ProportionalGain", e, _proportionalGainAttribute);
                    this._proportionalGain = value;
                    this.OnProportionalGainChanged(e);
                    this.OnPropertyChanged("ProportionalGain", e, _proportionalGainAttribute);
                }
            }
        }
        
        /// <summary>
        /// The upperLimit property
        /// </summary>
        [XmlElementNameAttribute("upperLimit")]
        [XmlAttributeAttribute(true)]
        public virtual float UpperLimit
        {
            get
            {
                return this._upperLimit;
            }
            set
            {
                if ((this._upperLimit != value))
                {
                    float old = this._upperLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUpperLimitChanging(e);
                    this.OnPropertyChanging("UpperLimit", e, _upperLimitAttribute);
                    this._upperLimit = value;
                    this.OnUpperLimitChanged(e);
                    this.OnPropertyChanged("UpperLimit", e, _upperLimitAttribute);
                }
            }
        }
        
        /// <summary>
        /// The highPowerLimit property
        /// </summary>
        [XmlElementNameAttribute("highPowerLimit")]
        [XmlAttributeAttribute(true)]
        public virtual float HighPowerLimit
        {
            get
            {
                return this._highPowerLimit;
            }
            set
            {
                if ((this._highPowerLimit != value))
                {
                    float old = this._highPowerLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHighPowerLimitChanging(e);
                    this.OnPropertyChanging("HighPowerLimit", e, _highPowerLimitAttribute);
                    this._highPowerLimit = value;
                    this.OnHighPowerLimitChanged(e);
                    this.OnPropertyChanged("HighPowerLimit", e, _highPowerLimitAttribute);
                }
            }
        }
        
        /// <summary>
        /// The pressureSetpointTC2 property
        /// </summary>
        [XmlElementNameAttribute("pressureSetpointTC2")]
        [XmlAttributeAttribute(true)]
        public virtual float PressureSetpointTC2
        {
            get
            {
                return this._pressureSetpointTC2;
            }
            set
            {
                if ((this._pressureSetpointTC2 != value))
                {
                    float old = this._pressureSetpointTC2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPressureSetpointTC2Changing(e);
                    this.OnPropertyChanging("PressureSetpointTC2", e, _pressureSetpointTC2Attribute);
                    this._pressureSetpointTC2 = value;
                    this.OnPressureSetpointTC2Changed(e);
                    this.OnPropertyChanged("PressureSetpointTC2", e, _pressureSetpointTC2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The pressureSetpointTC1 property
        /// </summary>
        [XmlElementNameAttribute("pressureSetpointTC1")]
        [XmlAttributeAttribute(true)]
        public virtual float PressureSetpointTC1
        {
            get
            {
                return this._pressureSetpointTC1;
            }
            set
            {
                if ((this._pressureSetpointTC1 != value))
                {
                    float old = this._pressureSetpointTC1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPressureSetpointTC1Changing(e);
                    this.OnPropertyChanging("PressureSetpointTC1", e, _pressureSetpointTC1Attribute);
                    this._pressureSetpointTC1 = value;
                    this.OnPressureSetpointTC1Changed(e);
                    this.OnPropertyChanged("PressureSetpointTC1", e, _pressureSetpointTC1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The pressureLimit property
        /// </summary>
        [XmlElementNameAttribute("pressureLimit")]
        [XmlAttributeAttribute(true)]
        public virtual float PressureLimit
        {
            get
            {
                return this._pressureLimit;
            }
            set
            {
                if ((this._pressureLimit != value))
                {
                    float old = this._pressureLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPressureLimitChanging(e);
                    this.OnPropertyChanging("PressureLimit", e, _pressureLimitAttribute);
                    this._pressureLimit = value;
                    this.OnPressureLimitChanged(e);
                    this.OnPropertyChanged("PressureLimit", e, _pressureLimitAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/GenerationDynamics" +
                            "/BWRSteamSupply")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the LowPowerLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowPowerLimitChanging;
        
        /// <summary>
        /// Gets fired when the LowPowerLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowPowerLimitChanged;
        
        /// <summary>
        /// Gets fired before the InCoreThermalTC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InCoreThermalTCChanging;
        
        /// <summary>
        /// Gets fired when the InCoreThermalTC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InCoreThermalTCChanged;
        
        /// <summary>
        /// Gets fired before the IntegralGain property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IntegralGainChanging;
        
        /// <summary>
        /// Gets fired when the IntegralGain property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IntegralGainChanged;
        
        /// <summary>
        /// Gets fired before the PressureSetpointGA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PressureSetpointGAChanging;
        
        /// <summary>
        /// Gets fired when the PressureSetpointGA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PressureSetpointGAChanged;
        
        /// <summary>
        /// Gets fired before the RfAux1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RfAux1Changing;
        
        /// <summary>
        /// Gets fired when the RfAux1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RfAux1Changed;
        
        /// <summary>
        /// Gets fired before the RfAux2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RfAux2Changing;
        
        /// <summary>
        /// Gets fired when the RfAux2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RfAux2Changed;
        
        /// <summary>
        /// Gets fired before the LowerLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowerLimitChanging;
        
        /// <summary>
        /// Gets fired when the LowerLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LowerLimitChanged;
        
        /// <summary>
        /// Gets fired before the RodPatternConstant property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RodPatternConstantChanging;
        
        /// <summary>
        /// Gets fired when the RodPatternConstant property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RodPatternConstantChanged;
        
        /// <summary>
        /// Gets fired before the RfAux8 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RfAux8Changing;
        
        /// <summary>
        /// Gets fired when the RfAux8 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RfAux8Changed;
        
        /// <summary>
        /// Gets fired before the RfAux7 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RfAux7Changing;
        
        /// <summary>
        /// Gets fired when the RfAux7 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RfAux7Changed;
        
        /// <summary>
        /// Gets fired before the RodPattern property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RodPatternChanging;
        
        /// <summary>
        /// Gets fired when the RodPattern property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RodPatternChanged;
        
        /// <summary>
        /// Gets fired before the RfAux4 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RfAux4Changing;
        
        /// <summary>
        /// Gets fired when the RfAux4 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RfAux4Changed;
        
        /// <summary>
        /// Gets fired before the RfAux3 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RfAux3Changing;
        
        /// <summary>
        /// Gets fired when the RfAux3 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RfAux3Changed;
        
        /// <summary>
        /// Gets fired before the RfAux6 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RfAux6Changing;
        
        /// <summary>
        /// Gets fired when the RfAux6 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RfAux6Changed;
        
        /// <summary>
        /// Gets fired before the RfAux5 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RfAux5Changing;
        
        /// <summary>
        /// Gets fired when the RfAux5 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RfAux5Changed;
        
        /// <summary>
        /// Gets fired before the ProportionalGain property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProportionalGainChanging;
        
        /// <summary>
        /// Gets fired when the ProportionalGain property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProportionalGainChanged;
        
        /// <summary>
        /// Gets fired before the UpperLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UpperLimitChanging;
        
        /// <summary>
        /// Gets fired when the UpperLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UpperLimitChanged;
        
        /// <summary>
        /// Gets fired before the HighPowerLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HighPowerLimitChanging;
        
        /// <summary>
        /// Gets fired when the HighPowerLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HighPowerLimitChanged;
        
        /// <summary>
        /// Gets fired before the PressureSetpointTC2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PressureSetpointTC2Changing;
        
        /// <summary>
        /// Gets fired when the PressureSetpointTC2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PressureSetpointTC2Changed;
        
        /// <summary>
        /// Gets fired before the PressureSetpointTC1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PressureSetpointTC1Changing;
        
        /// <summary>
        /// Gets fired when the PressureSetpointTC1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PressureSetpointTC1Changed;
        
        /// <summary>
        /// Gets fired before the PressureLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PressureLimitChanging;
        
        /// <summary>
        /// Gets fired when the PressureLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PressureLimitChanged;
        
        private static ITypedElement RetrieveLowPowerLimitAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BWRSteamSupply.ClassInstance)).Resolve("lowPowerLimit")));
        }
        
        /// <summary>
        /// Raises the LowPowerLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowPowerLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowPowerLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowPowerLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowPowerLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowPowerLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveInCoreThermalTCAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BWRSteamSupply.ClassInstance)).Resolve("inCoreThermalTC")));
        }
        
        /// <summary>
        /// Raises the InCoreThermalTCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInCoreThermalTCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InCoreThermalTCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InCoreThermalTCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInCoreThermalTCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InCoreThermalTCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIntegralGainAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BWRSteamSupply.ClassInstance)).Resolve("integralGain")));
        }
        
        /// <summary>
        /// Raises the IntegralGainChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIntegralGainChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IntegralGainChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IntegralGainChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIntegralGainChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IntegralGainChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePressureSetpointGAAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BWRSteamSupply.ClassInstance)).Resolve("pressureSetpointGA")));
        }
        
        /// <summary>
        /// Raises the PressureSetpointGAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPressureSetpointGAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PressureSetpointGAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PressureSetpointGAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPressureSetpointGAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PressureSetpointGAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRfAux1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(BWRSteamSupply.ClassInstance)).Resolve("rfAux1")));
        }
        
        /// <summary>
        /// Raises the RfAux1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRfAux1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RfAux1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RfAux1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRfAux1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RfAux1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRfAux2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(BWRSteamSupply.ClassInstance)).Resolve("rfAux2")));
        }
        
        /// <summary>
        /// Raises the RfAux2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRfAux2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RfAux2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RfAux2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRfAux2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RfAux2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLowerLimitAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BWRSteamSupply.ClassInstance)).Resolve("lowerLimit")));
        }
        
        /// <summary>
        /// Raises the LowerLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowerLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LowerLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLowerLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LowerLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRodPatternConstantAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BWRSteamSupply.ClassInstance)).Resolve("rodPatternConstant")));
        }
        
        /// <summary>
        /// Raises the RodPatternConstantChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRodPatternConstantChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RodPatternConstantChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RodPatternConstantChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRodPatternConstantChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RodPatternConstantChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRfAux8Attribute()
        {
            return ((ITypedElement)(((ModelElement)(BWRSteamSupply.ClassInstance)).Resolve("rfAux8")));
        }
        
        /// <summary>
        /// Raises the RfAux8Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRfAux8Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RfAux8Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RfAux8Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRfAux8Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RfAux8Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRfAux7Attribute()
        {
            return ((ITypedElement)(((ModelElement)(BWRSteamSupply.ClassInstance)).Resolve("rfAux7")));
        }
        
        /// <summary>
        /// Raises the RfAux7Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRfAux7Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RfAux7Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RfAux7Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRfAux7Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RfAux7Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRodPatternAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BWRSteamSupply.ClassInstance)).Resolve("rodPattern")));
        }
        
        /// <summary>
        /// Raises the RodPatternChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRodPatternChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RodPatternChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RodPatternChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRodPatternChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RodPatternChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRfAux4Attribute()
        {
            return ((ITypedElement)(((ModelElement)(BWRSteamSupply.ClassInstance)).Resolve("rfAux4")));
        }
        
        /// <summary>
        /// Raises the RfAux4Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRfAux4Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RfAux4Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RfAux4Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRfAux4Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RfAux4Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRfAux3Attribute()
        {
            return ((ITypedElement)(((ModelElement)(BWRSteamSupply.ClassInstance)).Resolve("rfAux3")));
        }
        
        /// <summary>
        /// Raises the RfAux3Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRfAux3Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RfAux3Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RfAux3Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRfAux3Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RfAux3Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRfAux6Attribute()
        {
            return ((ITypedElement)(((ModelElement)(BWRSteamSupply.ClassInstance)).Resolve("rfAux6")));
        }
        
        /// <summary>
        /// Raises the RfAux6Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRfAux6Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RfAux6Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RfAux6Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRfAux6Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RfAux6Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRfAux5Attribute()
        {
            return ((ITypedElement)(((ModelElement)(BWRSteamSupply.ClassInstance)).Resolve("rfAux5")));
        }
        
        /// <summary>
        /// Raises the RfAux5Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRfAux5Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RfAux5Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RfAux5Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRfAux5Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RfAux5Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveProportionalGainAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BWRSteamSupply.ClassInstance)).Resolve("proportionalGain")));
        }
        
        /// <summary>
        /// Raises the ProportionalGainChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProportionalGainChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProportionalGainChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ProportionalGainChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProportionalGainChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProportionalGainChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUpperLimitAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BWRSteamSupply.ClassInstance)).Resolve("upperLimit")));
        }
        
        /// <summary>
        /// Raises the UpperLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpperLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UpperLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UpperLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUpperLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UpperLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveHighPowerLimitAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BWRSteamSupply.ClassInstance)).Resolve("highPowerLimit")));
        }
        
        /// <summary>
        /// Raises the HighPowerLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHighPowerLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HighPowerLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HighPowerLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHighPowerLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HighPowerLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePressureSetpointTC2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(BWRSteamSupply.ClassInstance)).Resolve("pressureSetpointTC2")));
        }
        
        /// <summary>
        /// Raises the PressureSetpointTC2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPressureSetpointTC2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PressureSetpointTC2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PressureSetpointTC2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPressureSetpointTC2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PressureSetpointTC2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePressureSetpointTC1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(BWRSteamSupply.ClassInstance)).Resolve("pressureSetpointTC1")));
        }
        
        /// <summary>
        /// Raises the PressureSetpointTC1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPressureSetpointTC1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PressureSetpointTC1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PressureSetpointTC1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPressureSetpointTC1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PressureSetpointTC1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePressureLimitAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BWRSteamSupply.ClassInstance)).Resolve("pressureLimit")));
        }
        
        /// <summary>
        /// Raises the PressureLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPressureLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PressureLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PressureLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPressureLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PressureLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "LOWPOWERLIMIT"))
            {
                return this.LowPowerLimit;
            }
            if ((attribute == "INCORETHERMALTC"))
            {
                return this.InCoreThermalTC;
            }
            if ((attribute == "INTEGRALGAIN"))
            {
                return this.IntegralGain;
            }
            if ((attribute == "PRESSURESETPOINTGA"))
            {
                return this.PressureSetpointGA;
            }
            if ((attribute == "RFAUX1"))
            {
                return this.RfAux1;
            }
            if ((attribute == "RFAUX2"))
            {
                return this.RfAux2;
            }
            if ((attribute == "LOWERLIMIT"))
            {
                return this.LowerLimit;
            }
            if ((attribute == "RODPATTERNCONSTANT"))
            {
                return this.RodPatternConstant;
            }
            if ((attribute == "RFAUX8"))
            {
                return this.RfAux8;
            }
            if ((attribute == "RFAUX7"))
            {
                return this.RfAux7;
            }
            if ((attribute == "RODPATTERN"))
            {
                return this.RodPattern;
            }
            if ((attribute == "RFAUX4"))
            {
                return this.RfAux4;
            }
            if ((attribute == "RFAUX3"))
            {
                return this.RfAux3;
            }
            if ((attribute == "RFAUX6"))
            {
                return this.RfAux6;
            }
            if ((attribute == "RFAUX5"))
            {
                return this.RfAux5;
            }
            if ((attribute == "PROPORTIONALGAIN"))
            {
                return this.ProportionalGain;
            }
            if ((attribute == "UPPERLIMIT"))
            {
                return this.UpperLimit;
            }
            if ((attribute == "HIGHPOWERLIMIT"))
            {
                return this.HighPowerLimit;
            }
            if ((attribute == "PRESSURESETPOINTTC2"))
            {
                return this.PressureSetpointTC2;
            }
            if ((attribute == "PRESSURESETPOINTTC1"))
            {
                return this.PressureSetpointTC1;
            }
            if ((attribute == "PRESSURELIMIT"))
            {
                return this.PressureLimit;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "LOWPOWERLIMIT"))
            {
                this.LowPowerLimit = ((float)(value));
                return;
            }
            if ((feature == "INCORETHERMALTC"))
            {
                this.InCoreThermalTC = ((float)(value));
                return;
            }
            if ((feature == "INTEGRALGAIN"))
            {
                this.IntegralGain = ((float)(value));
                return;
            }
            if ((feature == "PRESSURESETPOINTGA"))
            {
                this.PressureSetpointGA = ((float)(value));
                return;
            }
            if ((feature == "RFAUX1"))
            {
                this.RfAux1 = ((float)(value));
                return;
            }
            if ((feature == "RFAUX2"))
            {
                this.RfAux2 = ((float)(value));
                return;
            }
            if ((feature == "LOWERLIMIT"))
            {
                this.LowerLimit = ((float)(value));
                return;
            }
            if ((feature == "RODPATTERNCONSTANT"))
            {
                this.RodPatternConstant = ((float)(value));
                return;
            }
            if ((feature == "RFAUX8"))
            {
                this.RfAux8 = ((float)(value));
                return;
            }
            if ((feature == "RFAUX7"))
            {
                this.RfAux7 = ((float)(value));
                return;
            }
            if ((feature == "RODPATTERN"))
            {
                this.RodPattern = ((float)(value));
                return;
            }
            if ((feature == "RFAUX4"))
            {
                this.RfAux4 = ((float)(value));
                return;
            }
            if ((feature == "RFAUX3"))
            {
                this.RfAux3 = ((float)(value));
                return;
            }
            if ((feature == "RFAUX6"))
            {
                this.RfAux6 = ((float)(value));
                return;
            }
            if ((feature == "RFAUX5"))
            {
                this.RfAux5 = ((float)(value));
                return;
            }
            if ((feature == "PROPORTIONALGAIN"))
            {
                this.ProportionalGain = ((float)(value));
                return;
            }
            if ((feature == "UPPERLIMIT"))
            {
                this.UpperLimit = ((float)(value));
                return;
            }
            if ((feature == "HIGHPOWERLIMIT"))
            {
                this.HighPowerLimit = ((float)(value));
                return;
            }
            if ((feature == "PRESSURESETPOINTTC2"))
            {
                this.PressureSetpointTC2 = ((float)(value));
                return;
            }
            if ((feature == "PRESSURESETPOINTTC1"))
            {
                this.PressureSetpointTC1 = ((float)(value));
                return;
            }
            if ((feature == "PRESSURELIMIT"))
            {
                this.PressureLimit = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/GenerationDynamics" +
                        "/BWRSteamSupply")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lowPowerLimit property
        /// </summary>
        private sealed class LowPowerLimitProxy : ModelPropertyChange<IBWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowPowerLimitProxy(IBWRSteamSupply modelElement) : 
                    base(modelElement, "lowPowerLimit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.LowPowerLimit;
                }
                set
                {
                    this.ModelElement.LowPowerLimit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the inCoreThermalTC property
        /// </summary>
        private sealed class InCoreThermalTCProxy : ModelPropertyChange<IBWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InCoreThermalTCProxy(IBWRSteamSupply modelElement) : 
                    base(modelElement, "inCoreThermalTC")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.InCoreThermalTC;
                }
                set
                {
                    this.ModelElement.InCoreThermalTC = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the integralGain property
        /// </summary>
        private sealed class IntegralGainProxy : ModelPropertyChange<IBWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IntegralGainProxy(IBWRSteamSupply modelElement) : 
                    base(modelElement, "integralGain")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.IntegralGain;
                }
                set
                {
                    this.ModelElement.IntegralGain = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pressureSetpointGA property
        /// </summary>
        private sealed class PressureSetpointGAProxy : ModelPropertyChange<IBWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PressureSetpointGAProxy(IBWRSteamSupply modelElement) : 
                    base(modelElement, "pressureSetpointGA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PressureSetpointGA;
                }
                set
                {
                    this.ModelElement.PressureSetpointGA = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rfAux1 property
        /// </summary>
        private sealed class RfAux1Proxy : ModelPropertyChange<IBWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RfAux1Proxy(IBWRSteamSupply modelElement) : 
                    base(modelElement, "rfAux1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RfAux1;
                }
                set
                {
                    this.ModelElement.RfAux1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rfAux2 property
        /// </summary>
        private sealed class RfAux2Proxy : ModelPropertyChange<IBWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RfAux2Proxy(IBWRSteamSupply modelElement) : 
                    base(modelElement, "rfAux2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RfAux2;
                }
                set
                {
                    this.ModelElement.RfAux2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lowerLimit property
        /// </summary>
        private sealed class LowerLimitProxy : ModelPropertyChange<IBWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LowerLimitProxy(IBWRSteamSupply modelElement) : 
                    base(modelElement, "lowerLimit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.LowerLimit;
                }
                set
                {
                    this.ModelElement.LowerLimit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rodPatternConstant property
        /// </summary>
        private sealed class RodPatternConstantProxy : ModelPropertyChange<IBWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RodPatternConstantProxy(IBWRSteamSupply modelElement) : 
                    base(modelElement, "rodPatternConstant")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RodPatternConstant;
                }
                set
                {
                    this.ModelElement.RodPatternConstant = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rfAux8 property
        /// </summary>
        private sealed class RfAux8Proxy : ModelPropertyChange<IBWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RfAux8Proxy(IBWRSteamSupply modelElement) : 
                    base(modelElement, "rfAux8")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RfAux8;
                }
                set
                {
                    this.ModelElement.RfAux8 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rfAux7 property
        /// </summary>
        private sealed class RfAux7Proxy : ModelPropertyChange<IBWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RfAux7Proxy(IBWRSteamSupply modelElement) : 
                    base(modelElement, "rfAux7")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RfAux7;
                }
                set
                {
                    this.ModelElement.RfAux7 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rodPattern property
        /// </summary>
        private sealed class RodPatternProxy : ModelPropertyChange<IBWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RodPatternProxy(IBWRSteamSupply modelElement) : 
                    base(modelElement, "rodPattern")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RodPattern;
                }
                set
                {
                    this.ModelElement.RodPattern = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rfAux4 property
        /// </summary>
        private sealed class RfAux4Proxy : ModelPropertyChange<IBWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RfAux4Proxy(IBWRSteamSupply modelElement) : 
                    base(modelElement, "rfAux4")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RfAux4;
                }
                set
                {
                    this.ModelElement.RfAux4 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rfAux3 property
        /// </summary>
        private sealed class RfAux3Proxy : ModelPropertyChange<IBWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RfAux3Proxy(IBWRSteamSupply modelElement) : 
                    base(modelElement, "rfAux3")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RfAux3;
                }
                set
                {
                    this.ModelElement.RfAux3 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rfAux6 property
        /// </summary>
        private sealed class RfAux6Proxy : ModelPropertyChange<IBWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RfAux6Proxy(IBWRSteamSupply modelElement) : 
                    base(modelElement, "rfAux6")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RfAux6;
                }
                set
                {
                    this.ModelElement.RfAux6 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rfAux5 property
        /// </summary>
        private sealed class RfAux5Proxy : ModelPropertyChange<IBWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RfAux5Proxy(IBWRSteamSupply modelElement) : 
                    base(modelElement, "rfAux5")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RfAux5;
                }
                set
                {
                    this.ModelElement.RfAux5 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the proportionalGain property
        /// </summary>
        private sealed class ProportionalGainProxy : ModelPropertyChange<IBWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProportionalGainProxy(IBWRSteamSupply modelElement) : 
                    base(modelElement, "proportionalGain")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ProportionalGain;
                }
                set
                {
                    this.ModelElement.ProportionalGain = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the upperLimit property
        /// </summary>
        private sealed class UpperLimitProxy : ModelPropertyChange<IBWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UpperLimitProxy(IBWRSteamSupply modelElement) : 
                    base(modelElement, "upperLimit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.UpperLimit;
                }
                set
                {
                    this.ModelElement.UpperLimit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the highPowerLimit property
        /// </summary>
        private sealed class HighPowerLimitProxy : ModelPropertyChange<IBWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HighPowerLimitProxy(IBWRSteamSupply modelElement) : 
                    base(modelElement, "highPowerLimit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.HighPowerLimit;
                }
                set
                {
                    this.ModelElement.HighPowerLimit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pressureSetpointTC2 property
        /// </summary>
        private sealed class PressureSetpointTC2Proxy : ModelPropertyChange<IBWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PressureSetpointTC2Proxy(IBWRSteamSupply modelElement) : 
                    base(modelElement, "pressureSetpointTC2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PressureSetpointTC2;
                }
                set
                {
                    this.ModelElement.PressureSetpointTC2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pressureSetpointTC1 property
        /// </summary>
        private sealed class PressureSetpointTC1Proxy : ModelPropertyChange<IBWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PressureSetpointTC1Proxy(IBWRSteamSupply modelElement) : 
                    base(modelElement, "pressureSetpointTC1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PressureSetpointTC1;
                }
                set
                {
                    this.ModelElement.PressureSetpointTC1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pressureLimit property
        /// </summary>
        private sealed class PressureLimitProxy : ModelPropertyChange<IBWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PressureLimitProxy(IBWRSteamSupply modelElement) : 
                    base(modelElement, "pressureLimit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PressureLimit;
                }
                set
                {
                    this.ModelElement.PressureLimit = value;
                }
            }
        }
    }
}

