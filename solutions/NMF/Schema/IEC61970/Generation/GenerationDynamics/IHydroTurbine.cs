using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics
{
    
    
    /// <summary>
    /// The public interface for HydroTurbine
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(HydroTurbine))]
    [XmlDefaultImplementationTypeAttribute(typeof(HydroTurbine))]
    public interface IHydroTurbine : IModelElement, IPrimeMover
    {
        
        /// <summary>
        /// The maxHeadMaxP property
        /// </summary>
        float MaxHeadMaxP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The transientDroopTime property
        /// </summary>
        float TransientDroopTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The gateUpperLimit property
        /// </summary>
        float GateUpperLimit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minHeadMaxP property
        /// </summary>
        float MinHeadMaxP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The turbineRating property
        /// </summary>
        float TurbineRating
        {
            get;
            set;
        }
        
        /// <summary>
        /// The turbineType property
        /// </summary>
        Nullable<TurbineType> TurbineType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The speedRating property
        /// </summary>
        float SpeedRating
        {
            get;
            set;
        }
        
        /// <summary>
        /// The gateRateLimit property
        /// </summary>
        float GateRateLimit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The waterStartingTime property
        /// </summary>
        float WaterStartingTime
        {
            get;
            set;
        }
        
        /// <summary>
        /// The transientRegulation property
        /// </summary>
        float TransientRegulation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The speedRegulation property
        /// </summary>
        float SpeedRegulation
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the MaxHeadMaxP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxHeadMaxPChanging;
        
        /// <summary>
        /// Gets fired when the MaxHeadMaxP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxHeadMaxPChanged;
        
        /// <summary>
        /// Gets fired before the TransientDroopTime property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TransientDroopTimeChanging;
        
        /// <summary>
        /// Gets fired when the TransientDroopTime property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TransientDroopTimeChanged;
        
        /// <summary>
        /// Gets fired before the GateUpperLimit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GateUpperLimitChanging;
        
        /// <summary>
        /// Gets fired when the GateUpperLimit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GateUpperLimitChanged;
        
        /// <summary>
        /// Gets fired before the MinHeadMaxP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinHeadMaxPChanging;
        
        /// <summary>
        /// Gets fired when the MinHeadMaxP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinHeadMaxPChanged;
        
        /// <summary>
        /// Gets fired before the TurbineRating property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TurbineRatingChanging;
        
        /// <summary>
        /// Gets fired when the TurbineRating property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TurbineRatingChanged;
        
        /// <summary>
        /// Gets fired before the TurbineType property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TurbineTypeChanging;
        
        /// <summary>
        /// Gets fired when the TurbineType property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TurbineTypeChanged;
        
        /// <summary>
        /// Gets fired before the SpeedRating property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpeedRatingChanging;
        
        /// <summary>
        /// Gets fired when the SpeedRating property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpeedRatingChanged;
        
        /// <summary>
        /// Gets fired before the GateRateLimit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GateRateLimitChanging;
        
        /// <summary>
        /// Gets fired when the GateRateLimit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GateRateLimitChanged;
        
        /// <summary>
        /// Gets fired before the WaterStartingTime property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WaterStartingTimeChanging;
        
        /// <summary>
        /// Gets fired when the WaterStartingTime property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WaterStartingTimeChanged;
        
        /// <summary>
        /// Gets fired before the TransientRegulation property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TransientRegulationChanging;
        
        /// <summary>
        /// Gets fired when the TransientRegulation property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TransientRegulationChanged;
        
        /// <summary>
        /// Gets fired before the SpeedRegulation property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpeedRegulationChanging;
        
        /// <summary>
        /// Gets fired when the SpeedRegulation property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpeedRegulationChanged;
    }
}

