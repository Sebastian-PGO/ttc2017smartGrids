//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics
{
    
    
    /// <summary>
    /// The public interface for CombustionTurbine
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(CombustionTurbine))]
    [XmlDefaultImplementationTypeAttribute(typeof(CombustionTurbine))]
    public interface ICombustionTurbine : IModelElement, IPrimeMover
    {
        
        /// <summary>
        /// The auxPowerVersusFrequency property
        /// </summary>
        float AuxPowerVersusFrequency
        {
            get;
            set;
        }
        
        /// <summary>
        /// The powerVariationByTemp property
        /// </summary>
        float PowerVariationByTemp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ambientTemp property
        /// </summary>
        float AmbientTemp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The referenceTemp property
        /// </summary>
        float ReferenceTemp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The heatRecoveryFlag property
        /// </summary>
        bool HeatRecoveryFlag
        {
            get;
            set;
        }
        
        /// <summary>
        /// The capabilityVersusFrequency property
        /// </summary>
        float CapabilityVersusFrequency
        {
            get;
            set;
        }
        
        /// <summary>
        /// The auxPowerVersusVoltage property
        /// </summary>
        float AuxPowerVersusVoltage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The timeConstant property
        /// </summary>
        float TimeConstant
        {
            get;
            set;
        }
        
        /// <summary>
        /// The HeatRecoveryBoiler property
        /// </summary>
        IHeatRecoveryBoiler HeatRecoveryBoiler
        {
            get;
            set;
        }
        
        /// <summary>
        /// The CTTempActivePowerCurve property
        /// </summary>
        ICTTempActivePowerCurve CTTempActivePowerCurve
        {
            get;
            set;
        }
        
        /// <summary>
        /// The AirCompressor property
        /// </summary>
        IAirCompressor AirCompressor
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the AuxPowerVersusFrequency property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AuxPowerVersusFrequencyChanging;
        
        /// <summary>
        /// Gets fired when the AuxPowerVersusFrequency property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AuxPowerVersusFrequencyChanged;
        
        /// <summary>
        /// Gets fired before the PowerVariationByTemp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PowerVariationByTempChanging;
        
        /// <summary>
        /// Gets fired when the PowerVariationByTemp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PowerVariationByTempChanged;
        
        /// <summary>
        /// Gets fired before the AmbientTemp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AmbientTempChanging;
        
        /// <summary>
        /// Gets fired when the AmbientTemp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AmbientTempChanged;
        
        /// <summary>
        /// Gets fired before the ReferenceTemp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReferenceTempChanging;
        
        /// <summary>
        /// Gets fired when the ReferenceTemp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReferenceTempChanged;
        
        /// <summary>
        /// Gets fired before the HeatRecoveryFlag property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HeatRecoveryFlagChanging;
        
        /// <summary>
        /// Gets fired when the HeatRecoveryFlag property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HeatRecoveryFlagChanged;
        
        /// <summary>
        /// Gets fired before the CapabilityVersusFrequency property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CapabilityVersusFrequencyChanging;
        
        /// <summary>
        /// Gets fired when the CapabilityVersusFrequency property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CapabilityVersusFrequencyChanged;
        
        /// <summary>
        /// Gets fired before the AuxPowerVersusVoltage property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AuxPowerVersusVoltageChanging;
        
        /// <summary>
        /// Gets fired when the AuxPowerVersusVoltage property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AuxPowerVersusVoltageChanged;
        
        /// <summary>
        /// Gets fired before the TimeConstant property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TimeConstantChanging;
        
        /// <summary>
        /// Gets fired when the TimeConstant property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TimeConstantChanged;
        
        /// <summary>
        /// Gets fired before the HeatRecoveryBoiler property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HeatRecoveryBoilerChanging;
        
        /// <summary>
        /// Gets fired when the HeatRecoveryBoiler property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HeatRecoveryBoilerChanged;
        
        /// <summary>
        /// Gets fired before the CTTempActivePowerCurve property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CTTempActivePowerCurveChanging;
        
        /// <summary>
        /// Gets fired when the CTTempActivePowerCurve property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CTTempActivePowerCurveChanged;
        
        /// <summary>
        /// Gets fired before the AirCompressor property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AirCompressorChanging;
        
        /// <summary>
        /// Gets fired when the AirCompressor property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AirCompressorChanged;
    }
}

