//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics
{
    
    
    /// <summary>
    /// The default implementation of the SteamTurbine class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#GenerationDynamics")]
    [XmlNamespacePrefixAttribute("cimGenerationDynamics")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/GenerationDynamics" +
        "/SteamTurbine")]
    [DebuggerDisplayAttribute("SteamTurbine {UUID}")]
    public partial class SteamTurbine : PrimeMover, ISteamTurbine, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Shaft2PowerLP1 property
        /// </summary>
        private float _shaft2PowerLP1;
        
        private static Lazy<ITypedElement> _shaft2PowerLP1Attribute = new Lazy<ITypedElement>(RetrieveShaft2PowerLP1Attribute);
        
        /// <summary>
        /// The backing field for the Shaft2PowerLP2 property
        /// </summary>
        private float _shaft2PowerLP2;
        
        private static Lazy<ITypedElement> _shaft2PowerLP2Attribute = new Lazy<ITypedElement>(RetrieveShaft2PowerLP2Attribute);
        
        /// <summary>
        /// The backing field for the Shaft2PowerHP property
        /// </summary>
        private float _shaft2PowerHP;
        
        private static Lazy<ITypedElement> _shaft2PowerHPAttribute = new Lazy<ITypedElement>(RetrieveShaft2PowerHPAttribute);
        
        /// <summary>
        /// The backing field for the Shaft1PowerIP property
        /// </summary>
        private float _shaft1PowerIP;
        
        private static Lazy<ITypedElement> _shaft1PowerIPAttribute = new Lazy<ITypedElement>(RetrieveShaft1PowerIPAttribute);
        
        /// <summary>
        /// The backing field for the Reheater1TC property
        /// </summary>
        private float _reheater1TC;
        
        private static Lazy<ITypedElement> _reheater1TCAttribute = new Lazy<ITypedElement>(RetrieveReheater1TCAttribute);
        
        /// <summary>
        /// The backing field for the Shaft1PowerLP2 property
        /// </summary>
        private float _shaft1PowerLP2;
        
        private static Lazy<ITypedElement> _shaft1PowerLP2Attribute = new Lazy<ITypedElement>(RetrieveShaft1PowerLP2Attribute);
        
        /// <summary>
        /// The backing field for the Shaft1PowerLP1 property
        /// </summary>
        private float _shaft1PowerLP1;
        
        private static Lazy<ITypedElement> _shaft1PowerLP1Attribute = new Lazy<ITypedElement>(RetrieveShaft1PowerLP1Attribute);
        
        /// <summary>
        /// The backing field for the CrossoverTC property
        /// </summary>
        private float _crossoverTC;
        
        private static Lazy<ITypedElement> _crossoverTCAttribute = new Lazy<ITypedElement>(RetrieveCrossoverTCAttribute);
        
        /// <summary>
        /// The backing field for the SteamChestTC property
        /// </summary>
        private float _steamChestTC;
        
        private static Lazy<ITypedElement> _steamChestTCAttribute = new Lazy<ITypedElement>(RetrieveSteamChestTCAttribute);
        
        /// <summary>
        /// The backing field for the Shaft1PowerHP property
        /// </summary>
        private float _shaft1PowerHP;
        
        private static Lazy<ITypedElement> _shaft1PowerHPAttribute = new Lazy<ITypedElement>(RetrieveShaft1PowerHPAttribute);
        
        /// <summary>
        /// The backing field for the Shaft2PowerIP property
        /// </summary>
        private float _shaft2PowerIP;
        
        private static Lazy<ITypedElement> _shaft2PowerIPAttribute = new Lazy<ITypedElement>(RetrieveShaft2PowerIPAttribute);
        
        /// <summary>
        /// The backing field for the Reheater2TC property
        /// </summary>
        private float _reheater2TC;
        
        private static Lazy<ITypedElement> _reheater2TCAttribute = new Lazy<ITypedElement>(RetrieveReheater2TCAttribute);
        
        private static Lazy<ITypedElement> _steamSupplysReference = new Lazy<ITypedElement>(RetrieveSteamSupplysReference);
        
        /// <summary>
        /// The backing field for the SteamSupplys property
        /// </summary>
        private SteamTurbineSteamSupplysCollection _steamSupplys;
        
        private static IClass _classInstance;
        
        public SteamTurbine()
        {
            this._steamSupplys = new SteamTurbineSteamSupplysCollection(this);
            this._steamSupplys.CollectionChanging += this.SteamSupplysCollectionChanging;
            this._steamSupplys.CollectionChanged += this.SteamSupplysCollectionChanged;
        }
        
        /// <summary>
        /// The shaft2PowerLP1 property
        /// </summary>
        [XmlElementNameAttribute("shaft2PowerLP1")]
        [XmlAttributeAttribute(true)]
        public virtual float Shaft2PowerLP1
        {
            get
            {
                return this._shaft2PowerLP1;
            }
            set
            {
                if ((this._shaft2PowerLP1 != value))
                {
                    float old = this._shaft2PowerLP1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnShaft2PowerLP1Changing(e);
                    this.OnPropertyChanging("Shaft2PowerLP1", e, _shaft2PowerLP1Attribute);
                    this._shaft2PowerLP1 = value;
                    this.OnShaft2PowerLP1Changed(e);
                    this.OnPropertyChanged("Shaft2PowerLP1", e, _shaft2PowerLP1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The shaft2PowerLP2 property
        /// </summary>
        [XmlElementNameAttribute("shaft2PowerLP2")]
        [XmlAttributeAttribute(true)]
        public virtual float Shaft2PowerLP2
        {
            get
            {
                return this._shaft2PowerLP2;
            }
            set
            {
                if ((this._shaft2PowerLP2 != value))
                {
                    float old = this._shaft2PowerLP2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnShaft2PowerLP2Changing(e);
                    this.OnPropertyChanging("Shaft2PowerLP2", e, _shaft2PowerLP2Attribute);
                    this._shaft2PowerLP2 = value;
                    this.OnShaft2PowerLP2Changed(e);
                    this.OnPropertyChanged("Shaft2PowerLP2", e, _shaft2PowerLP2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The shaft2PowerHP property
        /// </summary>
        [XmlElementNameAttribute("shaft2PowerHP")]
        [XmlAttributeAttribute(true)]
        public virtual float Shaft2PowerHP
        {
            get
            {
                return this._shaft2PowerHP;
            }
            set
            {
                if ((this._shaft2PowerHP != value))
                {
                    float old = this._shaft2PowerHP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnShaft2PowerHPChanging(e);
                    this.OnPropertyChanging("Shaft2PowerHP", e, _shaft2PowerHPAttribute);
                    this._shaft2PowerHP = value;
                    this.OnShaft2PowerHPChanged(e);
                    this.OnPropertyChanged("Shaft2PowerHP", e, _shaft2PowerHPAttribute);
                }
            }
        }
        
        /// <summary>
        /// The shaft1PowerIP property
        /// </summary>
        [XmlElementNameAttribute("shaft1PowerIP")]
        [XmlAttributeAttribute(true)]
        public virtual float Shaft1PowerIP
        {
            get
            {
                return this._shaft1PowerIP;
            }
            set
            {
                if ((this._shaft1PowerIP != value))
                {
                    float old = this._shaft1PowerIP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnShaft1PowerIPChanging(e);
                    this.OnPropertyChanging("Shaft1PowerIP", e, _shaft1PowerIPAttribute);
                    this._shaft1PowerIP = value;
                    this.OnShaft1PowerIPChanged(e);
                    this.OnPropertyChanged("Shaft1PowerIP", e, _shaft1PowerIPAttribute);
                }
            }
        }
        
        /// <summary>
        /// The reheater1TC property
        /// </summary>
        [XmlElementNameAttribute("reheater1TC")]
        [XmlAttributeAttribute(true)]
        public virtual float Reheater1TC
        {
            get
            {
                return this._reheater1TC;
            }
            set
            {
                if ((this._reheater1TC != value))
                {
                    float old = this._reheater1TC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReheater1TCChanging(e);
                    this.OnPropertyChanging("Reheater1TC", e, _reheater1TCAttribute);
                    this._reheater1TC = value;
                    this.OnReheater1TCChanged(e);
                    this.OnPropertyChanged("Reheater1TC", e, _reheater1TCAttribute);
                }
            }
        }
        
        /// <summary>
        /// The shaft1PowerLP2 property
        /// </summary>
        [XmlElementNameAttribute("shaft1PowerLP2")]
        [XmlAttributeAttribute(true)]
        public virtual float Shaft1PowerLP2
        {
            get
            {
                return this._shaft1PowerLP2;
            }
            set
            {
                if ((this._shaft1PowerLP2 != value))
                {
                    float old = this._shaft1PowerLP2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnShaft1PowerLP2Changing(e);
                    this.OnPropertyChanging("Shaft1PowerLP2", e, _shaft1PowerLP2Attribute);
                    this._shaft1PowerLP2 = value;
                    this.OnShaft1PowerLP2Changed(e);
                    this.OnPropertyChanged("Shaft1PowerLP2", e, _shaft1PowerLP2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The shaft1PowerLP1 property
        /// </summary>
        [XmlElementNameAttribute("shaft1PowerLP1")]
        [XmlAttributeAttribute(true)]
        public virtual float Shaft1PowerLP1
        {
            get
            {
                return this._shaft1PowerLP1;
            }
            set
            {
                if ((this._shaft1PowerLP1 != value))
                {
                    float old = this._shaft1PowerLP1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnShaft1PowerLP1Changing(e);
                    this.OnPropertyChanging("Shaft1PowerLP1", e, _shaft1PowerLP1Attribute);
                    this._shaft1PowerLP1 = value;
                    this.OnShaft1PowerLP1Changed(e);
                    this.OnPropertyChanged("Shaft1PowerLP1", e, _shaft1PowerLP1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The crossoverTC property
        /// </summary>
        [XmlElementNameAttribute("crossoverTC")]
        [XmlAttributeAttribute(true)]
        public virtual float CrossoverTC
        {
            get
            {
                return this._crossoverTC;
            }
            set
            {
                if ((this._crossoverTC != value))
                {
                    float old = this._crossoverTC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCrossoverTCChanging(e);
                    this.OnPropertyChanging("CrossoverTC", e, _crossoverTCAttribute);
                    this._crossoverTC = value;
                    this.OnCrossoverTCChanged(e);
                    this.OnPropertyChanged("CrossoverTC", e, _crossoverTCAttribute);
                }
            }
        }
        
        /// <summary>
        /// The steamChestTC property
        /// </summary>
        [XmlElementNameAttribute("steamChestTC")]
        [XmlAttributeAttribute(true)]
        public virtual float SteamChestTC
        {
            get
            {
                return this._steamChestTC;
            }
            set
            {
                if ((this._steamChestTC != value))
                {
                    float old = this._steamChestTC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSteamChestTCChanging(e);
                    this.OnPropertyChanging("SteamChestTC", e, _steamChestTCAttribute);
                    this._steamChestTC = value;
                    this.OnSteamChestTCChanged(e);
                    this.OnPropertyChanged("SteamChestTC", e, _steamChestTCAttribute);
                }
            }
        }
        
        /// <summary>
        /// The shaft1PowerHP property
        /// </summary>
        [XmlElementNameAttribute("shaft1PowerHP")]
        [XmlAttributeAttribute(true)]
        public virtual float Shaft1PowerHP
        {
            get
            {
                return this._shaft1PowerHP;
            }
            set
            {
                if ((this._shaft1PowerHP != value))
                {
                    float old = this._shaft1PowerHP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnShaft1PowerHPChanging(e);
                    this.OnPropertyChanging("Shaft1PowerHP", e, _shaft1PowerHPAttribute);
                    this._shaft1PowerHP = value;
                    this.OnShaft1PowerHPChanged(e);
                    this.OnPropertyChanged("Shaft1PowerHP", e, _shaft1PowerHPAttribute);
                }
            }
        }
        
        /// <summary>
        /// The shaft2PowerIP property
        /// </summary>
        [XmlElementNameAttribute("shaft2PowerIP")]
        [XmlAttributeAttribute(true)]
        public virtual float Shaft2PowerIP
        {
            get
            {
                return this._shaft2PowerIP;
            }
            set
            {
                if ((this._shaft2PowerIP != value))
                {
                    float old = this._shaft2PowerIP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnShaft2PowerIPChanging(e);
                    this.OnPropertyChanging("Shaft2PowerIP", e, _shaft2PowerIPAttribute);
                    this._shaft2PowerIP = value;
                    this.OnShaft2PowerIPChanged(e);
                    this.OnPropertyChanged("Shaft2PowerIP", e, _shaft2PowerIPAttribute);
                }
            }
        }
        
        /// <summary>
        /// The reheater2TC property
        /// </summary>
        [XmlElementNameAttribute("reheater2TC")]
        [XmlAttributeAttribute(true)]
        public virtual float Reheater2TC
        {
            get
            {
                return this._reheater2TC;
            }
            set
            {
                if ((this._reheater2TC != value))
                {
                    float old = this._reheater2TC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReheater2TCChanging(e);
                    this.OnPropertyChanging("Reheater2TC", e, _reheater2TCAttribute);
                    this._reheater2TC = value;
                    this.OnReheater2TCChanged(e);
                    this.OnPropertyChanged("Reheater2TC", e, _reheater2TCAttribute);
                }
            }
        }
        
        /// <summary>
        /// The SteamSupplys property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SteamTurbines")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISteamSupply> SteamSupplys
        {
            get
            {
                return this._steamSupplys;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SteamTurbineReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/GenerationDynamics" +
                            "/SteamTurbine")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Shaft2PowerLP1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Shaft2PowerLP1Changing;
        
        /// <summary>
        /// Gets fired when the Shaft2PowerLP1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Shaft2PowerLP1Changed;
        
        /// <summary>
        /// Gets fired before the Shaft2PowerLP2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Shaft2PowerLP2Changing;
        
        /// <summary>
        /// Gets fired when the Shaft2PowerLP2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Shaft2PowerLP2Changed;
        
        /// <summary>
        /// Gets fired before the Shaft2PowerHP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Shaft2PowerHPChanging;
        
        /// <summary>
        /// Gets fired when the Shaft2PowerHP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Shaft2PowerHPChanged;
        
        /// <summary>
        /// Gets fired before the Shaft1PowerIP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Shaft1PowerIPChanging;
        
        /// <summary>
        /// Gets fired when the Shaft1PowerIP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Shaft1PowerIPChanged;
        
        /// <summary>
        /// Gets fired before the Reheater1TC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reheater1TCChanging;
        
        /// <summary>
        /// Gets fired when the Reheater1TC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reheater1TCChanged;
        
        /// <summary>
        /// Gets fired before the Shaft1PowerLP2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Shaft1PowerLP2Changing;
        
        /// <summary>
        /// Gets fired when the Shaft1PowerLP2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Shaft1PowerLP2Changed;
        
        /// <summary>
        /// Gets fired before the Shaft1PowerLP1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Shaft1PowerLP1Changing;
        
        /// <summary>
        /// Gets fired when the Shaft1PowerLP1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Shaft1PowerLP1Changed;
        
        /// <summary>
        /// Gets fired before the CrossoverTC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CrossoverTCChanging;
        
        /// <summary>
        /// Gets fired when the CrossoverTC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CrossoverTCChanged;
        
        /// <summary>
        /// Gets fired before the SteamChestTC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SteamChestTCChanging;
        
        /// <summary>
        /// Gets fired when the SteamChestTC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SteamChestTCChanged;
        
        /// <summary>
        /// Gets fired before the Shaft1PowerHP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Shaft1PowerHPChanging;
        
        /// <summary>
        /// Gets fired when the Shaft1PowerHP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Shaft1PowerHPChanged;
        
        /// <summary>
        /// Gets fired before the Shaft2PowerIP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Shaft2PowerIPChanging;
        
        /// <summary>
        /// Gets fired when the Shaft2PowerIP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Shaft2PowerIPChanged;
        
        /// <summary>
        /// Gets fired before the Reheater2TC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reheater2TCChanging;
        
        /// <summary>
        /// Gets fired when the Reheater2TC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Reheater2TCChanged;
        
        private static ITypedElement RetrieveShaft2PowerLP1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(SteamTurbine.ClassInstance)).Resolve("shaft2PowerLP1")));
        }
        
        /// <summary>
        /// Raises the Shaft2PowerLP1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShaft2PowerLP1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Shaft2PowerLP1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Shaft2PowerLP1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShaft2PowerLP1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Shaft2PowerLP1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveShaft2PowerLP2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(SteamTurbine.ClassInstance)).Resolve("shaft2PowerLP2")));
        }
        
        /// <summary>
        /// Raises the Shaft2PowerLP2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShaft2PowerLP2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Shaft2PowerLP2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Shaft2PowerLP2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShaft2PowerLP2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Shaft2PowerLP2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveShaft2PowerHPAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SteamTurbine.ClassInstance)).Resolve("shaft2PowerHP")));
        }
        
        /// <summary>
        /// Raises the Shaft2PowerHPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShaft2PowerHPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Shaft2PowerHPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Shaft2PowerHPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShaft2PowerHPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Shaft2PowerHPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveShaft1PowerIPAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SteamTurbine.ClassInstance)).Resolve("shaft1PowerIP")));
        }
        
        /// <summary>
        /// Raises the Shaft1PowerIPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShaft1PowerIPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Shaft1PowerIPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Shaft1PowerIPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShaft1PowerIPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Shaft1PowerIPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReheater1TCAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SteamTurbine.ClassInstance)).Resolve("reheater1TC")));
        }
        
        /// <summary>
        /// Raises the Reheater1TCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReheater1TCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reheater1TCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reheater1TCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReheater1TCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reheater1TCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveShaft1PowerLP2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(SteamTurbine.ClassInstance)).Resolve("shaft1PowerLP2")));
        }
        
        /// <summary>
        /// Raises the Shaft1PowerLP2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShaft1PowerLP2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Shaft1PowerLP2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Shaft1PowerLP2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShaft1PowerLP2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Shaft1PowerLP2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveShaft1PowerLP1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(SteamTurbine.ClassInstance)).Resolve("shaft1PowerLP1")));
        }
        
        /// <summary>
        /// Raises the Shaft1PowerLP1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShaft1PowerLP1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Shaft1PowerLP1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Shaft1PowerLP1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShaft1PowerLP1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Shaft1PowerLP1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCrossoverTCAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SteamTurbine.ClassInstance)).Resolve("crossoverTC")));
        }
        
        /// <summary>
        /// Raises the CrossoverTCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCrossoverTCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CrossoverTCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CrossoverTCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCrossoverTCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CrossoverTCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSteamChestTCAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SteamTurbine.ClassInstance)).Resolve("steamChestTC")));
        }
        
        /// <summary>
        /// Raises the SteamChestTCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSteamChestTCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SteamChestTCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SteamChestTCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSteamChestTCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SteamChestTCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveShaft1PowerHPAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SteamTurbine.ClassInstance)).Resolve("shaft1PowerHP")));
        }
        
        /// <summary>
        /// Raises the Shaft1PowerHPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShaft1PowerHPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Shaft1PowerHPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Shaft1PowerHPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShaft1PowerHPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Shaft1PowerHPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveShaft2PowerIPAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SteamTurbine.ClassInstance)).Resolve("shaft2PowerIP")));
        }
        
        /// <summary>
        /// Raises the Shaft2PowerIPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShaft2PowerIPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Shaft2PowerIPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Shaft2PowerIPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShaft2PowerIPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Shaft2PowerIPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReheater2TCAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SteamTurbine.ClassInstance)).Resolve("reheater2TC")));
        }
        
        /// <summary>
        /// Raises the Reheater2TCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReheater2TCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reheater2TCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Reheater2TCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReheater2TCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Reheater2TCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSteamSupplysReference()
        {
            return ((ITypedElement)(((ModelElement)(SteamTurbine.ClassInstance)).Resolve("SteamSupplys")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SteamSupplys property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SteamSupplysCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("SteamSupplys", e, _steamSupplysReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SteamSupplys property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SteamSupplysCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SteamSupplys", e, _steamSupplysReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SHAFT2POWERLP1"))
            {
                return this.Shaft2PowerLP1;
            }
            if ((attribute == "SHAFT2POWERLP2"))
            {
                return this.Shaft2PowerLP2;
            }
            if ((attribute == "SHAFT2POWERHP"))
            {
                return this.Shaft2PowerHP;
            }
            if ((attribute == "SHAFT1POWERIP"))
            {
                return this.Shaft1PowerIP;
            }
            if ((attribute == "REHEATER1TC"))
            {
                return this.Reheater1TC;
            }
            if ((attribute == "SHAFT1POWERLP2"))
            {
                return this.Shaft1PowerLP2;
            }
            if ((attribute == "SHAFT1POWERLP1"))
            {
                return this.Shaft1PowerLP1;
            }
            if ((attribute == "CROSSOVERTC"))
            {
                return this.CrossoverTC;
            }
            if ((attribute == "STEAMCHESTTC"))
            {
                return this.SteamChestTC;
            }
            if ((attribute == "SHAFT1POWERHP"))
            {
                return this.Shaft1PowerHP;
            }
            if ((attribute == "SHAFT2POWERIP"))
            {
                return this.Shaft2PowerIP;
            }
            if ((attribute == "REHEATER2TC"))
            {
                return this.Reheater2TC;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "STEAMSUPPLYS"))
            {
                return this._steamSupplys;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SHAFT2POWERLP1"))
            {
                this.Shaft2PowerLP1 = ((float)(value));
                return;
            }
            if ((feature == "SHAFT2POWERLP2"))
            {
                this.Shaft2PowerLP2 = ((float)(value));
                return;
            }
            if ((feature == "SHAFT2POWERHP"))
            {
                this.Shaft2PowerHP = ((float)(value));
                return;
            }
            if ((feature == "SHAFT1POWERIP"))
            {
                this.Shaft1PowerIP = ((float)(value));
                return;
            }
            if ((feature == "REHEATER1TC"))
            {
                this.Reheater1TC = ((float)(value));
                return;
            }
            if ((feature == "SHAFT1POWERLP2"))
            {
                this.Shaft1PowerLP2 = ((float)(value));
                return;
            }
            if ((feature == "SHAFT1POWERLP1"))
            {
                this.Shaft1PowerLP1 = ((float)(value));
                return;
            }
            if ((feature == "CROSSOVERTC"))
            {
                this.CrossoverTC = ((float)(value));
                return;
            }
            if ((feature == "STEAMCHESTTC"))
            {
                this.SteamChestTC = ((float)(value));
                return;
            }
            if ((feature == "SHAFT1POWERHP"))
            {
                this.Shaft1PowerHP = ((float)(value));
                return;
            }
            if ((feature == "SHAFT2POWERIP"))
            {
                this.Shaft2PowerIP = ((float)(value));
                return;
            }
            if ((feature == "REHEATER2TC"))
            {
                this.Reheater2TC = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/GenerationDynamics" +
                        "/SteamTurbine")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SteamTurbine class
        /// </summary>
        public class SteamTurbineReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SteamTurbine _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SteamTurbineReferencedElementsCollection(SteamTurbine parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.SteamSupplys.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SteamSupplys.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SteamSupplys.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ISteamSupply steamSupplysCasted = item.As<ISteamSupply>();
                if ((steamSupplysCasted != null))
                {
                    this._parent.SteamSupplys.Add(steamSupplysCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SteamSupplys.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.SteamSupplys.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> steamSupplysEnumerator = this._parent.SteamSupplys.GetEnumerator();
                try
                {
                    for (
                    ; steamSupplysEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = steamSupplysEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    steamSupplysEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ISteamSupply steamSupplyItem = item.As<ISteamSupply>();
                if (((steamSupplyItem != null) 
                            && this._parent.SteamSupplys.Remove(steamSupplyItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SteamSupplys).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the shaft2PowerLP1 property
        /// </summary>
        private sealed class Shaft2PowerLP1Proxy : ModelPropertyChange<ISteamTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Shaft2PowerLP1Proxy(ISteamTurbine modelElement) : 
                    base(modelElement, "shaft2PowerLP1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Shaft2PowerLP1;
                }
                set
                {
                    this.ModelElement.Shaft2PowerLP1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the shaft2PowerLP2 property
        /// </summary>
        private sealed class Shaft2PowerLP2Proxy : ModelPropertyChange<ISteamTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Shaft2PowerLP2Proxy(ISteamTurbine modelElement) : 
                    base(modelElement, "shaft2PowerLP2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Shaft2PowerLP2;
                }
                set
                {
                    this.ModelElement.Shaft2PowerLP2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the shaft2PowerHP property
        /// </summary>
        private sealed class Shaft2PowerHPProxy : ModelPropertyChange<ISteamTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Shaft2PowerHPProxy(ISteamTurbine modelElement) : 
                    base(modelElement, "shaft2PowerHP")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Shaft2PowerHP;
                }
                set
                {
                    this.ModelElement.Shaft2PowerHP = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the shaft1PowerIP property
        /// </summary>
        private sealed class Shaft1PowerIPProxy : ModelPropertyChange<ISteamTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Shaft1PowerIPProxy(ISteamTurbine modelElement) : 
                    base(modelElement, "shaft1PowerIP")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Shaft1PowerIP;
                }
                set
                {
                    this.ModelElement.Shaft1PowerIP = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the reheater1TC property
        /// </summary>
        private sealed class Reheater1TCProxy : ModelPropertyChange<ISteamTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reheater1TCProxy(ISteamTurbine modelElement) : 
                    base(modelElement, "reheater1TC")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Reheater1TC;
                }
                set
                {
                    this.ModelElement.Reheater1TC = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the shaft1PowerLP2 property
        /// </summary>
        private sealed class Shaft1PowerLP2Proxy : ModelPropertyChange<ISteamTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Shaft1PowerLP2Proxy(ISteamTurbine modelElement) : 
                    base(modelElement, "shaft1PowerLP2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Shaft1PowerLP2;
                }
                set
                {
                    this.ModelElement.Shaft1PowerLP2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the shaft1PowerLP1 property
        /// </summary>
        private sealed class Shaft1PowerLP1Proxy : ModelPropertyChange<ISteamTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Shaft1PowerLP1Proxy(ISteamTurbine modelElement) : 
                    base(modelElement, "shaft1PowerLP1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Shaft1PowerLP1;
                }
                set
                {
                    this.ModelElement.Shaft1PowerLP1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the crossoverTC property
        /// </summary>
        private sealed class CrossoverTCProxy : ModelPropertyChange<ISteamTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CrossoverTCProxy(ISteamTurbine modelElement) : 
                    base(modelElement, "crossoverTC")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CrossoverTC;
                }
                set
                {
                    this.ModelElement.CrossoverTC = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the steamChestTC property
        /// </summary>
        private sealed class SteamChestTCProxy : ModelPropertyChange<ISteamTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SteamChestTCProxy(ISteamTurbine modelElement) : 
                    base(modelElement, "steamChestTC")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SteamChestTC;
                }
                set
                {
                    this.ModelElement.SteamChestTC = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the shaft1PowerHP property
        /// </summary>
        private sealed class Shaft1PowerHPProxy : ModelPropertyChange<ISteamTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Shaft1PowerHPProxy(ISteamTurbine modelElement) : 
                    base(modelElement, "shaft1PowerHP")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Shaft1PowerHP;
                }
                set
                {
                    this.ModelElement.Shaft1PowerHP = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the shaft2PowerIP property
        /// </summary>
        private sealed class Shaft2PowerIPProxy : ModelPropertyChange<ISteamTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Shaft2PowerIPProxy(ISteamTurbine modelElement) : 
                    base(modelElement, "shaft2PowerIP")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Shaft2PowerIP;
                }
                set
                {
                    this.ModelElement.Shaft2PowerIP = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the reheater2TC property
        /// </summary>
        private sealed class Reheater2TCProxy : ModelPropertyChange<ISteamTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Reheater2TCProxy(ISteamTurbine modelElement) : 
                    base(modelElement, "reheater2TC")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Reheater2TC;
                }
                set
                {
                    this.ModelElement.Reheater2TC = value;
                }
            }
        }
    }
}

