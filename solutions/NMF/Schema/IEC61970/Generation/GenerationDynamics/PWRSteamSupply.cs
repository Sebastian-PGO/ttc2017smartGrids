using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics
{
    
    
    /// <summary>
    /// The default implementation of the PWRSteamSupply class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#GenerationDynamics")]
    [XmlNamespacePrefixAttribute("cimGenerationDynamics")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/GenerationDynamics" +
        "/PWRSteamSupply")]
    [DebuggerDisplayAttribute("PWRSteamSupply {UUID}")]
    public partial class PWRSteamSupply : SteamSupply, IPWRSteamSupply, IModelElement
    {
        
        /// <summary>
        /// The backing field for the HotLegToColdLegGain property
        /// </summary>
        private float _hotLegToColdLegGain;
        
        private static Lazy<ITypedElement> _hotLegToColdLegGainAttribute = new Lazy<ITypedElement>(RetrieveHotLegToColdLegGainAttribute);
        
        /// <summary>
        /// The backing field for the PressureCG property
        /// </summary>
        private float _pressureCG;
        
        private static Lazy<ITypedElement> _pressureCGAttribute = new Lazy<ITypedElement>(RetrievePressureCGAttribute);
        
        /// <summary>
        /// The backing field for the HotLegLagTC property
        /// </summary>
        private float _hotLegLagTC;
        
        private static Lazy<ITypedElement> _hotLegLagTCAttribute = new Lazy<ITypedElement>(RetrieveHotLegLagTCAttribute);
        
        /// <summary>
        /// The backing field for the SteamPressureDropLagTC property
        /// </summary>
        private float _steamPressureDropLagTC;
        
        private static Lazy<ITypedElement> _steamPressureDropLagTCAttribute = new Lazy<ITypedElement>(RetrieveSteamPressureDropLagTCAttribute);
        
        /// <summary>
        /// The backing field for the ThrottlePressureSP property
        /// </summary>
        private float _throttlePressureSP;
        
        private static Lazy<ITypedElement> _throttlePressureSPAttribute = new Lazy<ITypedElement>(RetrieveThrottlePressureSPAttribute);
        
        /// <summary>
        /// The backing field for the ColdLegFBLeadTC2 property
        /// </summary>
        private float _coldLegFBLeadTC2;
        
        private static Lazy<ITypedElement> _coldLegFBLeadTC2Attribute = new Lazy<ITypedElement>(RetrieveColdLegFBLeadTC2Attribute);
        
        /// <summary>
        /// The backing field for the ColdLegFBLeadTC1 property
        /// </summary>
        private float _coldLegFBLeadTC1;
        
        private static Lazy<ITypedElement> _coldLegFBLeadTC1Attribute = new Lazy<ITypedElement>(RetrieveColdLegFBLeadTC1Attribute);
        
        /// <summary>
        /// The backing field for the ColdLegLagTC property
        /// </summary>
        private float _coldLegLagTC;
        
        private static Lazy<ITypedElement> _coldLegLagTCAttribute = new Lazy<ITypedElement>(RetrieveColdLegLagTCAttribute);
        
        /// <summary>
        /// The backing field for the SteamFlowFG property
        /// </summary>
        private float _steamFlowFG;
        
        private static Lazy<ITypedElement> _steamFlowFGAttribute = new Lazy<ITypedElement>(RetrieveSteamFlowFGAttribute);
        
        /// <summary>
        /// The backing field for the CoreHTLagTC2 property
        /// </summary>
        private float _coreHTLagTC2;
        
        private static Lazy<ITypedElement> _coreHTLagTC2Attribute = new Lazy<ITypedElement>(RetrieveCoreHTLagTC2Attribute);
        
        /// <summary>
        /// The backing field for the CoreHTLagTC1 property
        /// </summary>
        private float _coreHTLagTC1;
        
        private static Lazy<ITypedElement> _coreHTLagTC1Attribute = new Lazy<ITypedElement>(RetrieveCoreHTLagTC1Attribute);
        
        /// <summary>
        /// The backing field for the CoreNeutronicsEffTC property
        /// </summary>
        private float _coreNeutronicsEffTC;
        
        private static Lazy<ITypedElement> _coreNeutronicsEffTCAttribute = new Lazy<ITypedElement>(RetrieveCoreNeutronicsEffTCAttribute);
        
        /// <summary>
        /// The backing field for the SteamPressureFG property
        /// </summary>
        private float _steamPressureFG;
        
        private static Lazy<ITypedElement> _steamPressureFGAttribute = new Lazy<ITypedElement>(RetrieveSteamPressureFGAttribute);
        
        /// <summary>
        /// The backing field for the FeedbackFactor property
        /// </summary>
        private float _feedbackFactor;
        
        private static Lazy<ITypedElement> _feedbackFactorAttribute = new Lazy<ITypedElement>(RetrieveFeedbackFactorAttribute);
        
        /// <summary>
        /// The backing field for the HotLegSteamGain property
        /// </summary>
        private float _hotLegSteamGain;
        
        private static Lazy<ITypedElement> _hotLegSteamGainAttribute = new Lazy<ITypedElement>(RetrieveHotLegSteamGainAttribute);
        
        /// <summary>
        /// The backing field for the CoreNeutronicsHT property
        /// </summary>
        private float _coreNeutronicsHT;
        
        private static Lazy<ITypedElement> _coreNeutronicsHTAttribute = new Lazy<ITypedElement>(RetrieveCoreNeutronicsHTAttribute);
        
        /// <summary>
        /// The backing field for the ColdLegFG1 property
        /// </summary>
        private float _coldLegFG1;
        
        private static Lazy<ITypedElement> _coldLegFG1Attribute = new Lazy<ITypedElement>(RetrieveColdLegFG1Attribute);
        
        /// <summary>
        /// The backing field for the ColdLegFG2 property
        /// </summary>
        private float _coldLegFG2;
        
        private static Lazy<ITypedElement> _coldLegFG2Attribute = new Lazy<ITypedElement>(RetrieveColdLegFG2Attribute);
        
        /// <summary>
        /// The backing field for the ThrottlePressureFactor property
        /// </summary>
        private float _throttlePressureFactor;
        
        private static Lazy<ITypedElement> _throttlePressureFactorAttribute = new Lazy<ITypedElement>(RetrieveThrottlePressureFactorAttribute);
        
        /// <summary>
        /// The backing field for the ColdLegFBLagTC property
        /// </summary>
        private float _coldLegFBLagTC;
        
        private static Lazy<ITypedElement> _coldLegFBLagTCAttribute = new Lazy<ITypedElement>(RetrieveColdLegFBLagTCAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The hotLegToColdLegGain property
        /// </summary>
        [XmlElementNameAttribute("hotLegToColdLegGain")]
        [XmlAttributeAttribute(true)]
        public virtual float HotLegToColdLegGain
        {
            get
            {
                return this._hotLegToColdLegGain;
            }
            set
            {
                if ((this._hotLegToColdLegGain != value))
                {
                    float old = this._hotLegToColdLegGain;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHotLegToColdLegGainChanging(e);
                    this.OnPropertyChanging("HotLegToColdLegGain", e, _hotLegToColdLegGainAttribute);
                    this._hotLegToColdLegGain = value;
                    this.OnHotLegToColdLegGainChanged(e);
                    this.OnPropertyChanged("HotLegToColdLegGain", e, _hotLegToColdLegGainAttribute);
                }
            }
        }
        
        /// <summary>
        /// The pressureCG property
        /// </summary>
        [XmlElementNameAttribute("pressureCG")]
        [XmlAttributeAttribute(true)]
        public virtual float PressureCG
        {
            get
            {
                return this._pressureCG;
            }
            set
            {
                if ((this._pressureCG != value))
                {
                    float old = this._pressureCG;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPressureCGChanging(e);
                    this.OnPropertyChanging("PressureCG", e, _pressureCGAttribute);
                    this._pressureCG = value;
                    this.OnPressureCGChanged(e);
                    this.OnPropertyChanged("PressureCG", e, _pressureCGAttribute);
                }
            }
        }
        
        /// <summary>
        /// The hotLegLagTC property
        /// </summary>
        [XmlElementNameAttribute("hotLegLagTC")]
        [XmlAttributeAttribute(true)]
        public virtual float HotLegLagTC
        {
            get
            {
                return this._hotLegLagTC;
            }
            set
            {
                if ((this._hotLegLagTC != value))
                {
                    float old = this._hotLegLagTC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHotLegLagTCChanging(e);
                    this.OnPropertyChanging("HotLegLagTC", e, _hotLegLagTCAttribute);
                    this._hotLegLagTC = value;
                    this.OnHotLegLagTCChanged(e);
                    this.OnPropertyChanged("HotLegLagTC", e, _hotLegLagTCAttribute);
                }
            }
        }
        
        /// <summary>
        /// The steamPressureDropLagTC property
        /// </summary>
        [XmlElementNameAttribute("steamPressureDropLagTC")]
        [XmlAttributeAttribute(true)]
        public virtual float SteamPressureDropLagTC
        {
            get
            {
                return this._steamPressureDropLagTC;
            }
            set
            {
                if ((this._steamPressureDropLagTC != value))
                {
                    float old = this._steamPressureDropLagTC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSteamPressureDropLagTCChanging(e);
                    this.OnPropertyChanging("SteamPressureDropLagTC", e, _steamPressureDropLagTCAttribute);
                    this._steamPressureDropLagTC = value;
                    this.OnSteamPressureDropLagTCChanged(e);
                    this.OnPropertyChanged("SteamPressureDropLagTC", e, _steamPressureDropLagTCAttribute);
                }
            }
        }
        
        /// <summary>
        /// The throttlePressureSP property
        /// </summary>
        [XmlElementNameAttribute("throttlePressureSP")]
        [XmlAttributeAttribute(true)]
        public virtual float ThrottlePressureSP
        {
            get
            {
                return this._throttlePressureSP;
            }
            set
            {
                if ((this._throttlePressureSP != value))
                {
                    float old = this._throttlePressureSP;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThrottlePressureSPChanging(e);
                    this.OnPropertyChanging("ThrottlePressureSP", e, _throttlePressureSPAttribute);
                    this._throttlePressureSP = value;
                    this.OnThrottlePressureSPChanged(e);
                    this.OnPropertyChanged("ThrottlePressureSP", e, _throttlePressureSPAttribute);
                }
            }
        }
        
        /// <summary>
        /// The coldLegFBLeadTC2 property
        /// </summary>
        [XmlElementNameAttribute("coldLegFBLeadTC2")]
        [XmlAttributeAttribute(true)]
        public virtual float ColdLegFBLeadTC2
        {
            get
            {
                return this._coldLegFBLeadTC2;
            }
            set
            {
                if ((this._coldLegFBLeadTC2 != value))
                {
                    float old = this._coldLegFBLeadTC2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnColdLegFBLeadTC2Changing(e);
                    this.OnPropertyChanging("ColdLegFBLeadTC2", e, _coldLegFBLeadTC2Attribute);
                    this._coldLegFBLeadTC2 = value;
                    this.OnColdLegFBLeadTC2Changed(e);
                    this.OnPropertyChanged("ColdLegFBLeadTC2", e, _coldLegFBLeadTC2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The coldLegFBLeadTC1 property
        /// </summary>
        [XmlElementNameAttribute("coldLegFBLeadTC1")]
        [XmlAttributeAttribute(true)]
        public virtual float ColdLegFBLeadTC1
        {
            get
            {
                return this._coldLegFBLeadTC1;
            }
            set
            {
                if ((this._coldLegFBLeadTC1 != value))
                {
                    float old = this._coldLegFBLeadTC1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnColdLegFBLeadTC1Changing(e);
                    this.OnPropertyChanging("ColdLegFBLeadTC1", e, _coldLegFBLeadTC1Attribute);
                    this._coldLegFBLeadTC1 = value;
                    this.OnColdLegFBLeadTC1Changed(e);
                    this.OnPropertyChanged("ColdLegFBLeadTC1", e, _coldLegFBLeadTC1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The coldLegLagTC property
        /// </summary>
        [XmlElementNameAttribute("coldLegLagTC")]
        [XmlAttributeAttribute(true)]
        public virtual float ColdLegLagTC
        {
            get
            {
                return this._coldLegLagTC;
            }
            set
            {
                if ((this._coldLegLagTC != value))
                {
                    float old = this._coldLegLagTC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnColdLegLagTCChanging(e);
                    this.OnPropertyChanging("ColdLegLagTC", e, _coldLegLagTCAttribute);
                    this._coldLegLagTC = value;
                    this.OnColdLegLagTCChanged(e);
                    this.OnPropertyChanged("ColdLegLagTC", e, _coldLegLagTCAttribute);
                }
            }
        }
        
        /// <summary>
        /// The steamFlowFG property
        /// </summary>
        [XmlElementNameAttribute("steamFlowFG")]
        [XmlAttributeAttribute(true)]
        public virtual float SteamFlowFG
        {
            get
            {
                return this._steamFlowFG;
            }
            set
            {
                if ((this._steamFlowFG != value))
                {
                    float old = this._steamFlowFG;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSteamFlowFGChanging(e);
                    this.OnPropertyChanging("SteamFlowFG", e, _steamFlowFGAttribute);
                    this._steamFlowFG = value;
                    this.OnSteamFlowFGChanged(e);
                    this.OnPropertyChanged("SteamFlowFG", e, _steamFlowFGAttribute);
                }
            }
        }
        
        /// <summary>
        /// The coreHTLagTC2 property
        /// </summary>
        [XmlElementNameAttribute("coreHTLagTC2")]
        [XmlAttributeAttribute(true)]
        public virtual float CoreHTLagTC2
        {
            get
            {
                return this._coreHTLagTC2;
            }
            set
            {
                if ((this._coreHTLagTC2 != value))
                {
                    float old = this._coreHTLagTC2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCoreHTLagTC2Changing(e);
                    this.OnPropertyChanging("CoreHTLagTC2", e, _coreHTLagTC2Attribute);
                    this._coreHTLagTC2 = value;
                    this.OnCoreHTLagTC2Changed(e);
                    this.OnPropertyChanged("CoreHTLagTC2", e, _coreHTLagTC2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The coreHTLagTC1 property
        /// </summary>
        [XmlElementNameAttribute("coreHTLagTC1")]
        [XmlAttributeAttribute(true)]
        public virtual float CoreHTLagTC1
        {
            get
            {
                return this._coreHTLagTC1;
            }
            set
            {
                if ((this._coreHTLagTC1 != value))
                {
                    float old = this._coreHTLagTC1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCoreHTLagTC1Changing(e);
                    this.OnPropertyChanging("CoreHTLagTC1", e, _coreHTLagTC1Attribute);
                    this._coreHTLagTC1 = value;
                    this.OnCoreHTLagTC1Changed(e);
                    this.OnPropertyChanged("CoreHTLagTC1", e, _coreHTLagTC1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The coreNeutronicsEffTC property
        /// </summary>
        [XmlElementNameAttribute("coreNeutronicsEffTC")]
        [XmlAttributeAttribute(true)]
        public virtual float CoreNeutronicsEffTC
        {
            get
            {
                return this._coreNeutronicsEffTC;
            }
            set
            {
                if ((this._coreNeutronicsEffTC != value))
                {
                    float old = this._coreNeutronicsEffTC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCoreNeutronicsEffTCChanging(e);
                    this.OnPropertyChanging("CoreNeutronicsEffTC", e, _coreNeutronicsEffTCAttribute);
                    this._coreNeutronicsEffTC = value;
                    this.OnCoreNeutronicsEffTCChanged(e);
                    this.OnPropertyChanged("CoreNeutronicsEffTC", e, _coreNeutronicsEffTCAttribute);
                }
            }
        }
        
        /// <summary>
        /// The steamPressureFG property
        /// </summary>
        [XmlElementNameAttribute("steamPressureFG")]
        [XmlAttributeAttribute(true)]
        public virtual float SteamPressureFG
        {
            get
            {
                return this._steamPressureFG;
            }
            set
            {
                if ((this._steamPressureFG != value))
                {
                    float old = this._steamPressureFG;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSteamPressureFGChanging(e);
                    this.OnPropertyChanging("SteamPressureFG", e, _steamPressureFGAttribute);
                    this._steamPressureFG = value;
                    this.OnSteamPressureFGChanged(e);
                    this.OnPropertyChanged("SteamPressureFG", e, _steamPressureFGAttribute);
                }
            }
        }
        
        /// <summary>
        /// The feedbackFactor property
        /// </summary>
        [XmlElementNameAttribute("feedbackFactor")]
        [XmlAttributeAttribute(true)]
        public virtual float FeedbackFactor
        {
            get
            {
                return this._feedbackFactor;
            }
            set
            {
                if ((this._feedbackFactor != value))
                {
                    float old = this._feedbackFactor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFeedbackFactorChanging(e);
                    this.OnPropertyChanging("FeedbackFactor", e, _feedbackFactorAttribute);
                    this._feedbackFactor = value;
                    this.OnFeedbackFactorChanged(e);
                    this.OnPropertyChanged("FeedbackFactor", e, _feedbackFactorAttribute);
                }
            }
        }
        
        /// <summary>
        /// The hotLegSteamGain property
        /// </summary>
        [XmlElementNameAttribute("hotLegSteamGain")]
        [XmlAttributeAttribute(true)]
        public virtual float HotLegSteamGain
        {
            get
            {
                return this._hotLegSteamGain;
            }
            set
            {
                if ((this._hotLegSteamGain != value))
                {
                    float old = this._hotLegSteamGain;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHotLegSteamGainChanging(e);
                    this.OnPropertyChanging("HotLegSteamGain", e, _hotLegSteamGainAttribute);
                    this._hotLegSteamGain = value;
                    this.OnHotLegSteamGainChanged(e);
                    this.OnPropertyChanged("HotLegSteamGain", e, _hotLegSteamGainAttribute);
                }
            }
        }
        
        /// <summary>
        /// The coreNeutronicsHT property
        /// </summary>
        [XmlElementNameAttribute("coreNeutronicsHT")]
        [XmlAttributeAttribute(true)]
        public virtual float CoreNeutronicsHT
        {
            get
            {
                return this._coreNeutronicsHT;
            }
            set
            {
                if ((this._coreNeutronicsHT != value))
                {
                    float old = this._coreNeutronicsHT;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCoreNeutronicsHTChanging(e);
                    this.OnPropertyChanging("CoreNeutronicsHT", e, _coreNeutronicsHTAttribute);
                    this._coreNeutronicsHT = value;
                    this.OnCoreNeutronicsHTChanged(e);
                    this.OnPropertyChanged("CoreNeutronicsHT", e, _coreNeutronicsHTAttribute);
                }
            }
        }
        
        /// <summary>
        /// The coldLegFG1 property
        /// </summary>
        [XmlElementNameAttribute("coldLegFG1")]
        [XmlAttributeAttribute(true)]
        public virtual float ColdLegFG1
        {
            get
            {
                return this._coldLegFG1;
            }
            set
            {
                if ((this._coldLegFG1 != value))
                {
                    float old = this._coldLegFG1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnColdLegFG1Changing(e);
                    this.OnPropertyChanging("ColdLegFG1", e, _coldLegFG1Attribute);
                    this._coldLegFG1 = value;
                    this.OnColdLegFG1Changed(e);
                    this.OnPropertyChanged("ColdLegFG1", e, _coldLegFG1Attribute);
                }
            }
        }
        
        /// <summary>
        /// The coldLegFG2 property
        /// </summary>
        [XmlElementNameAttribute("coldLegFG2")]
        [XmlAttributeAttribute(true)]
        public virtual float ColdLegFG2
        {
            get
            {
                return this._coldLegFG2;
            }
            set
            {
                if ((this._coldLegFG2 != value))
                {
                    float old = this._coldLegFG2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnColdLegFG2Changing(e);
                    this.OnPropertyChanging("ColdLegFG2", e, _coldLegFG2Attribute);
                    this._coldLegFG2 = value;
                    this.OnColdLegFG2Changed(e);
                    this.OnPropertyChanged("ColdLegFG2", e, _coldLegFG2Attribute);
                }
            }
        }
        
        /// <summary>
        /// The throttlePressureFactor property
        /// </summary>
        [XmlElementNameAttribute("throttlePressureFactor")]
        [XmlAttributeAttribute(true)]
        public virtual float ThrottlePressureFactor
        {
            get
            {
                return this._throttlePressureFactor;
            }
            set
            {
                if ((this._throttlePressureFactor != value))
                {
                    float old = this._throttlePressureFactor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnThrottlePressureFactorChanging(e);
                    this.OnPropertyChanging("ThrottlePressureFactor", e, _throttlePressureFactorAttribute);
                    this._throttlePressureFactor = value;
                    this.OnThrottlePressureFactorChanged(e);
                    this.OnPropertyChanged("ThrottlePressureFactor", e, _throttlePressureFactorAttribute);
                }
            }
        }
        
        /// <summary>
        /// The coldLegFBLagTC property
        /// </summary>
        [XmlElementNameAttribute("coldLegFBLagTC")]
        [XmlAttributeAttribute(true)]
        public virtual float ColdLegFBLagTC
        {
            get
            {
                return this._coldLegFBLagTC;
            }
            set
            {
                if ((this._coldLegFBLagTC != value))
                {
                    float old = this._coldLegFBLagTC;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnColdLegFBLagTCChanging(e);
                    this.OnPropertyChanging("ColdLegFBLagTC", e, _coldLegFBLagTCAttribute);
                    this._coldLegFBLagTC = value;
                    this.OnColdLegFBLagTCChanged(e);
                    this.OnPropertyChanged("ColdLegFBLagTC", e, _coldLegFBLagTCAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/GenerationDynamics" +
                            "/PWRSteamSupply")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the HotLegToColdLegGain property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HotLegToColdLegGainChanging;
        
        /// <summary>
        /// Gets fired when the HotLegToColdLegGain property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HotLegToColdLegGainChanged;
        
        /// <summary>
        /// Gets fired before the PressureCG property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PressureCGChanging;
        
        /// <summary>
        /// Gets fired when the PressureCG property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PressureCGChanged;
        
        /// <summary>
        /// Gets fired before the HotLegLagTC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HotLegLagTCChanging;
        
        /// <summary>
        /// Gets fired when the HotLegLagTC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HotLegLagTCChanged;
        
        /// <summary>
        /// Gets fired before the SteamPressureDropLagTC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SteamPressureDropLagTCChanging;
        
        /// <summary>
        /// Gets fired when the SteamPressureDropLagTC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SteamPressureDropLagTCChanged;
        
        /// <summary>
        /// Gets fired before the ThrottlePressureSP property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThrottlePressureSPChanging;
        
        /// <summary>
        /// Gets fired when the ThrottlePressureSP property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThrottlePressureSPChanged;
        
        /// <summary>
        /// Gets fired before the ColdLegFBLeadTC2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ColdLegFBLeadTC2Changing;
        
        /// <summary>
        /// Gets fired when the ColdLegFBLeadTC2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ColdLegFBLeadTC2Changed;
        
        /// <summary>
        /// Gets fired before the ColdLegFBLeadTC1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ColdLegFBLeadTC1Changing;
        
        /// <summary>
        /// Gets fired when the ColdLegFBLeadTC1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ColdLegFBLeadTC1Changed;
        
        /// <summary>
        /// Gets fired before the ColdLegLagTC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ColdLegLagTCChanging;
        
        /// <summary>
        /// Gets fired when the ColdLegLagTC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ColdLegLagTCChanged;
        
        /// <summary>
        /// Gets fired before the SteamFlowFG property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SteamFlowFGChanging;
        
        /// <summary>
        /// Gets fired when the SteamFlowFG property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SteamFlowFGChanged;
        
        /// <summary>
        /// Gets fired before the CoreHTLagTC2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoreHTLagTC2Changing;
        
        /// <summary>
        /// Gets fired when the CoreHTLagTC2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoreHTLagTC2Changed;
        
        /// <summary>
        /// Gets fired before the CoreHTLagTC1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoreHTLagTC1Changing;
        
        /// <summary>
        /// Gets fired when the CoreHTLagTC1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoreHTLagTC1Changed;
        
        /// <summary>
        /// Gets fired before the CoreNeutronicsEffTC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoreNeutronicsEffTCChanging;
        
        /// <summary>
        /// Gets fired when the CoreNeutronicsEffTC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoreNeutronicsEffTCChanged;
        
        /// <summary>
        /// Gets fired before the SteamPressureFG property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SteamPressureFGChanging;
        
        /// <summary>
        /// Gets fired when the SteamPressureFG property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SteamPressureFGChanged;
        
        /// <summary>
        /// Gets fired before the FeedbackFactor property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FeedbackFactorChanging;
        
        /// <summary>
        /// Gets fired when the FeedbackFactor property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FeedbackFactorChanged;
        
        /// <summary>
        /// Gets fired before the HotLegSteamGain property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HotLegSteamGainChanging;
        
        /// <summary>
        /// Gets fired when the HotLegSteamGain property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HotLegSteamGainChanged;
        
        /// <summary>
        /// Gets fired before the CoreNeutronicsHT property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoreNeutronicsHTChanging;
        
        /// <summary>
        /// Gets fired when the CoreNeutronicsHT property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoreNeutronicsHTChanged;
        
        /// <summary>
        /// Gets fired before the ColdLegFG1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ColdLegFG1Changing;
        
        /// <summary>
        /// Gets fired when the ColdLegFG1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ColdLegFG1Changed;
        
        /// <summary>
        /// Gets fired before the ColdLegFG2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ColdLegFG2Changing;
        
        /// <summary>
        /// Gets fired when the ColdLegFG2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ColdLegFG2Changed;
        
        /// <summary>
        /// Gets fired before the ThrottlePressureFactor property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThrottlePressureFactorChanging;
        
        /// <summary>
        /// Gets fired when the ThrottlePressureFactor property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ThrottlePressureFactorChanged;
        
        /// <summary>
        /// Gets fired before the ColdLegFBLagTC property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ColdLegFBLagTCChanging;
        
        /// <summary>
        /// Gets fired when the ColdLegFBLagTC property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ColdLegFBLagTCChanged;
        
        private static ITypedElement RetrieveHotLegToColdLegGainAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PWRSteamSupply.ClassInstance)).Resolve("hotLegToColdLegGain")));
        }
        
        /// <summary>
        /// Raises the HotLegToColdLegGainChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHotLegToColdLegGainChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HotLegToColdLegGainChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HotLegToColdLegGainChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHotLegToColdLegGainChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HotLegToColdLegGainChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePressureCGAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PWRSteamSupply.ClassInstance)).Resolve("pressureCG")));
        }
        
        /// <summary>
        /// Raises the PressureCGChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPressureCGChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PressureCGChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PressureCGChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPressureCGChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PressureCGChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveHotLegLagTCAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PWRSteamSupply.ClassInstance)).Resolve("hotLegLagTC")));
        }
        
        /// <summary>
        /// Raises the HotLegLagTCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHotLegLagTCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HotLegLagTCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HotLegLagTCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHotLegLagTCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HotLegLagTCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSteamPressureDropLagTCAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PWRSteamSupply.ClassInstance)).Resolve("steamPressureDropLagTC")));
        }
        
        /// <summary>
        /// Raises the SteamPressureDropLagTCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSteamPressureDropLagTCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SteamPressureDropLagTCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SteamPressureDropLagTCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSteamPressureDropLagTCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SteamPressureDropLagTCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveThrottlePressureSPAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PWRSteamSupply.ClassInstance)).Resolve("throttlePressureSP")));
        }
        
        /// <summary>
        /// Raises the ThrottlePressureSPChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThrottlePressureSPChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThrottlePressureSPChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThrottlePressureSPChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThrottlePressureSPChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThrottlePressureSPChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveColdLegFBLeadTC2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(PWRSteamSupply.ClassInstance)).Resolve("coldLegFBLeadTC2")));
        }
        
        /// <summary>
        /// Raises the ColdLegFBLeadTC2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnColdLegFBLeadTC2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ColdLegFBLeadTC2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ColdLegFBLeadTC2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnColdLegFBLeadTC2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ColdLegFBLeadTC2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveColdLegFBLeadTC1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(PWRSteamSupply.ClassInstance)).Resolve("coldLegFBLeadTC1")));
        }
        
        /// <summary>
        /// Raises the ColdLegFBLeadTC1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnColdLegFBLeadTC1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ColdLegFBLeadTC1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ColdLegFBLeadTC1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnColdLegFBLeadTC1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ColdLegFBLeadTC1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveColdLegLagTCAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PWRSteamSupply.ClassInstance)).Resolve("coldLegLagTC")));
        }
        
        /// <summary>
        /// Raises the ColdLegLagTCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnColdLegLagTCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ColdLegLagTCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ColdLegLagTCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnColdLegLagTCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ColdLegLagTCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSteamFlowFGAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PWRSteamSupply.ClassInstance)).Resolve("steamFlowFG")));
        }
        
        /// <summary>
        /// Raises the SteamFlowFGChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSteamFlowFGChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SteamFlowFGChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SteamFlowFGChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSteamFlowFGChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SteamFlowFGChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCoreHTLagTC2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(PWRSteamSupply.ClassInstance)).Resolve("coreHTLagTC2")));
        }
        
        /// <summary>
        /// Raises the CoreHTLagTC2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoreHTLagTC2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoreHTLagTC2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CoreHTLagTC2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoreHTLagTC2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoreHTLagTC2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCoreHTLagTC1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(PWRSteamSupply.ClassInstance)).Resolve("coreHTLagTC1")));
        }
        
        /// <summary>
        /// Raises the CoreHTLagTC1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoreHTLagTC1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoreHTLagTC1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CoreHTLagTC1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoreHTLagTC1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoreHTLagTC1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCoreNeutronicsEffTCAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PWRSteamSupply.ClassInstance)).Resolve("coreNeutronicsEffTC")));
        }
        
        /// <summary>
        /// Raises the CoreNeutronicsEffTCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoreNeutronicsEffTCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoreNeutronicsEffTCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CoreNeutronicsEffTCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoreNeutronicsEffTCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoreNeutronicsEffTCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSteamPressureFGAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PWRSteamSupply.ClassInstance)).Resolve("steamPressureFG")));
        }
        
        /// <summary>
        /// Raises the SteamPressureFGChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSteamPressureFGChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SteamPressureFGChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SteamPressureFGChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSteamPressureFGChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SteamPressureFGChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFeedbackFactorAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PWRSteamSupply.ClassInstance)).Resolve("feedbackFactor")));
        }
        
        /// <summary>
        /// Raises the FeedbackFactorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFeedbackFactorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FeedbackFactorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FeedbackFactorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFeedbackFactorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FeedbackFactorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveHotLegSteamGainAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PWRSteamSupply.ClassInstance)).Resolve("hotLegSteamGain")));
        }
        
        /// <summary>
        /// Raises the HotLegSteamGainChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHotLegSteamGainChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HotLegSteamGainChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HotLegSteamGainChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHotLegSteamGainChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HotLegSteamGainChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCoreNeutronicsHTAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PWRSteamSupply.ClassInstance)).Resolve("coreNeutronicsHT")));
        }
        
        /// <summary>
        /// Raises the CoreNeutronicsHTChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoreNeutronicsHTChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoreNeutronicsHTChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CoreNeutronicsHTChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoreNeutronicsHTChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoreNeutronicsHTChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveColdLegFG1Attribute()
        {
            return ((ITypedElement)(((ModelElement)(PWRSteamSupply.ClassInstance)).Resolve("coldLegFG1")));
        }
        
        /// <summary>
        /// Raises the ColdLegFG1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnColdLegFG1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ColdLegFG1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ColdLegFG1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnColdLegFG1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ColdLegFG1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveColdLegFG2Attribute()
        {
            return ((ITypedElement)(((ModelElement)(PWRSteamSupply.ClassInstance)).Resolve("coldLegFG2")));
        }
        
        /// <summary>
        /// Raises the ColdLegFG2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnColdLegFG2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ColdLegFG2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ColdLegFG2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnColdLegFG2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ColdLegFG2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveThrottlePressureFactorAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PWRSteamSupply.ClassInstance)).Resolve("throttlePressureFactor")));
        }
        
        /// <summary>
        /// Raises the ThrottlePressureFactorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThrottlePressureFactorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThrottlePressureFactorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ThrottlePressureFactorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnThrottlePressureFactorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ThrottlePressureFactorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveColdLegFBLagTCAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PWRSteamSupply.ClassInstance)).Resolve("coldLegFBLagTC")));
        }
        
        /// <summary>
        /// Raises the ColdLegFBLagTCChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnColdLegFBLagTCChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ColdLegFBLagTCChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ColdLegFBLagTCChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnColdLegFBLagTCChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ColdLegFBLagTCChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "HOTLEGTOCOLDLEGGAIN"))
            {
                return this.HotLegToColdLegGain;
            }
            if ((attribute == "PRESSURECG"))
            {
                return this.PressureCG;
            }
            if ((attribute == "HOTLEGLAGTC"))
            {
                return this.HotLegLagTC;
            }
            if ((attribute == "STEAMPRESSUREDROPLAGTC"))
            {
                return this.SteamPressureDropLagTC;
            }
            if ((attribute == "THROTTLEPRESSURESP"))
            {
                return this.ThrottlePressureSP;
            }
            if ((attribute == "COLDLEGFBLEADTC2"))
            {
                return this.ColdLegFBLeadTC2;
            }
            if ((attribute == "COLDLEGFBLEADTC1"))
            {
                return this.ColdLegFBLeadTC1;
            }
            if ((attribute == "COLDLEGLAGTC"))
            {
                return this.ColdLegLagTC;
            }
            if ((attribute == "STEAMFLOWFG"))
            {
                return this.SteamFlowFG;
            }
            if ((attribute == "COREHTLAGTC2"))
            {
                return this.CoreHTLagTC2;
            }
            if ((attribute == "COREHTLAGTC1"))
            {
                return this.CoreHTLagTC1;
            }
            if ((attribute == "CORENEUTRONICSEFFTC"))
            {
                return this.CoreNeutronicsEffTC;
            }
            if ((attribute == "STEAMPRESSUREFG"))
            {
                return this.SteamPressureFG;
            }
            if ((attribute == "FEEDBACKFACTOR"))
            {
                return this.FeedbackFactor;
            }
            if ((attribute == "HOTLEGSTEAMGAIN"))
            {
                return this.HotLegSteamGain;
            }
            if ((attribute == "CORENEUTRONICSHT"))
            {
                return this.CoreNeutronicsHT;
            }
            if ((attribute == "COLDLEGFG1"))
            {
                return this.ColdLegFG1;
            }
            if ((attribute == "COLDLEGFG2"))
            {
                return this.ColdLegFG2;
            }
            if ((attribute == "THROTTLEPRESSUREFACTOR"))
            {
                return this.ThrottlePressureFactor;
            }
            if ((attribute == "COLDLEGFBLAGTC"))
            {
                return this.ColdLegFBLagTC;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "HOTLEGTOCOLDLEGGAIN"))
            {
                this.HotLegToColdLegGain = ((float)(value));
                return;
            }
            if ((feature == "PRESSURECG"))
            {
                this.PressureCG = ((float)(value));
                return;
            }
            if ((feature == "HOTLEGLAGTC"))
            {
                this.HotLegLagTC = ((float)(value));
                return;
            }
            if ((feature == "STEAMPRESSUREDROPLAGTC"))
            {
                this.SteamPressureDropLagTC = ((float)(value));
                return;
            }
            if ((feature == "THROTTLEPRESSURESP"))
            {
                this.ThrottlePressureSP = ((float)(value));
                return;
            }
            if ((feature == "COLDLEGFBLEADTC2"))
            {
                this.ColdLegFBLeadTC2 = ((float)(value));
                return;
            }
            if ((feature == "COLDLEGFBLEADTC1"))
            {
                this.ColdLegFBLeadTC1 = ((float)(value));
                return;
            }
            if ((feature == "COLDLEGLAGTC"))
            {
                this.ColdLegLagTC = ((float)(value));
                return;
            }
            if ((feature == "STEAMFLOWFG"))
            {
                this.SteamFlowFG = ((float)(value));
                return;
            }
            if ((feature == "COREHTLAGTC2"))
            {
                this.CoreHTLagTC2 = ((float)(value));
                return;
            }
            if ((feature == "COREHTLAGTC1"))
            {
                this.CoreHTLagTC1 = ((float)(value));
                return;
            }
            if ((feature == "CORENEUTRONICSEFFTC"))
            {
                this.CoreNeutronicsEffTC = ((float)(value));
                return;
            }
            if ((feature == "STEAMPRESSUREFG"))
            {
                this.SteamPressureFG = ((float)(value));
                return;
            }
            if ((feature == "FEEDBACKFACTOR"))
            {
                this.FeedbackFactor = ((float)(value));
                return;
            }
            if ((feature == "HOTLEGSTEAMGAIN"))
            {
                this.HotLegSteamGain = ((float)(value));
                return;
            }
            if ((feature == "CORENEUTRONICSHT"))
            {
                this.CoreNeutronicsHT = ((float)(value));
                return;
            }
            if ((feature == "COLDLEGFG1"))
            {
                this.ColdLegFG1 = ((float)(value));
                return;
            }
            if ((feature == "COLDLEGFG2"))
            {
                this.ColdLegFG2 = ((float)(value));
                return;
            }
            if ((feature == "THROTTLEPRESSUREFACTOR"))
            {
                this.ThrottlePressureFactor = ((float)(value));
                return;
            }
            if ((feature == "COLDLEGFBLAGTC"))
            {
                this.ColdLegFBLagTC = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/GenerationDynamics" +
                        "/PWRSteamSupply")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the hotLegToColdLegGain property
        /// </summary>
        private sealed class HotLegToColdLegGainProxy : ModelPropertyChange<IPWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HotLegToColdLegGainProxy(IPWRSteamSupply modelElement) : 
                    base(modelElement, "hotLegToColdLegGain")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.HotLegToColdLegGain;
                }
                set
                {
                    this.ModelElement.HotLegToColdLegGain = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the pressureCG property
        /// </summary>
        private sealed class PressureCGProxy : ModelPropertyChange<IPWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PressureCGProxy(IPWRSteamSupply modelElement) : 
                    base(modelElement, "pressureCG")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PressureCG;
                }
                set
                {
                    this.ModelElement.PressureCG = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the hotLegLagTC property
        /// </summary>
        private sealed class HotLegLagTCProxy : ModelPropertyChange<IPWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HotLegLagTCProxy(IPWRSteamSupply modelElement) : 
                    base(modelElement, "hotLegLagTC")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.HotLegLagTC;
                }
                set
                {
                    this.ModelElement.HotLegLagTC = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the steamPressureDropLagTC property
        /// </summary>
        private sealed class SteamPressureDropLagTCProxy : ModelPropertyChange<IPWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SteamPressureDropLagTCProxy(IPWRSteamSupply modelElement) : 
                    base(modelElement, "steamPressureDropLagTC")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SteamPressureDropLagTC;
                }
                set
                {
                    this.ModelElement.SteamPressureDropLagTC = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the throttlePressureSP property
        /// </summary>
        private sealed class ThrottlePressureSPProxy : ModelPropertyChange<IPWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThrottlePressureSPProxy(IPWRSteamSupply modelElement) : 
                    base(modelElement, "throttlePressureSP")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ThrottlePressureSP;
                }
                set
                {
                    this.ModelElement.ThrottlePressureSP = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the coldLegFBLeadTC2 property
        /// </summary>
        private sealed class ColdLegFBLeadTC2Proxy : ModelPropertyChange<IPWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ColdLegFBLeadTC2Proxy(IPWRSteamSupply modelElement) : 
                    base(modelElement, "coldLegFBLeadTC2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ColdLegFBLeadTC2;
                }
                set
                {
                    this.ModelElement.ColdLegFBLeadTC2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the coldLegFBLeadTC1 property
        /// </summary>
        private sealed class ColdLegFBLeadTC1Proxy : ModelPropertyChange<IPWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ColdLegFBLeadTC1Proxy(IPWRSteamSupply modelElement) : 
                    base(modelElement, "coldLegFBLeadTC1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ColdLegFBLeadTC1;
                }
                set
                {
                    this.ModelElement.ColdLegFBLeadTC1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the coldLegLagTC property
        /// </summary>
        private sealed class ColdLegLagTCProxy : ModelPropertyChange<IPWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ColdLegLagTCProxy(IPWRSteamSupply modelElement) : 
                    base(modelElement, "coldLegLagTC")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ColdLegLagTC;
                }
                set
                {
                    this.ModelElement.ColdLegLagTC = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the steamFlowFG property
        /// </summary>
        private sealed class SteamFlowFGProxy : ModelPropertyChange<IPWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SteamFlowFGProxy(IPWRSteamSupply modelElement) : 
                    base(modelElement, "steamFlowFG")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SteamFlowFG;
                }
                set
                {
                    this.ModelElement.SteamFlowFG = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the coreHTLagTC2 property
        /// </summary>
        private sealed class CoreHTLagTC2Proxy : ModelPropertyChange<IPWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CoreHTLagTC2Proxy(IPWRSteamSupply modelElement) : 
                    base(modelElement, "coreHTLagTC2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CoreHTLagTC2;
                }
                set
                {
                    this.ModelElement.CoreHTLagTC2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the coreHTLagTC1 property
        /// </summary>
        private sealed class CoreHTLagTC1Proxy : ModelPropertyChange<IPWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CoreHTLagTC1Proxy(IPWRSteamSupply modelElement) : 
                    base(modelElement, "coreHTLagTC1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CoreHTLagTC1;
                }
                set
                {
                    this.ModelElement.CoreHTLagTC1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the coreNeutronicsEffTC property
        /// </summary>
        private sealed class CoreNeutronicsEffTCProxy : ModelPropertyChange<IPWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CoreNeutronicsEffTCProxy(IPWRSteamSupply modelElement) : 
                    base(modelElement, "coreNeutronicsEffTC")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CoreNeutronicsEffTC;
                }
                set
                {
                    this.ModelElement.CoreNeutronicsEffTC = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the steamPressureFG property
        /// </summary>
        private sealed class SteamPressureFGProxy : ModelPropertyChange<IPWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SteamPressureFGProxy(IPWRSteamSupply modelElement) : 
                    base(modelElement, "steamPressureFG")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SteamPressureFG;
                }
                set
                {
                    this.ModelElement.SteamPressureFG = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the feedbackFactor property
        /// </summary>
        private sealed class FeedbackFactorProxy : ModelPropertyChange<IPWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FeedbackFactorProxy(IPWRSteamSupply modelElement) : 
                    base(modelElement, "feedbackFactor")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.FeedbackFactor;
                }
                set
                {
                    this.ModelElement.FeedbackFactor = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the hotLegSteamGain property
        /// </summary>
        private sealed class HotLegSteamGainProxy : ModelPropertyChange<IPWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HotLegSteamGainProxy(IPWRSteamSupply modelElement) : 
                    base(modelElement, "hotLegSteamGain")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.HotLegSteamGain;
                }
                set
                {
                    this.ModelElement.HotLegSteamGain = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the coreNeutronicsHT property
        /// </summary>
        private sealed class CoreNeutronicsHTProxy : ModelPropertyChange<IPWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CoreNeutronicsHTProxy(IPWRSteamSupply modelElement) : 
                    base(modelElement, "coreNeutronicsHT")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CoreNeutronicsHT;
                }
                set
                {
                    this.ModelElement.CoreNeutronicsHT = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the coldLegFG1 property
        /// </summary>
        private sealed class ColdLegFG1Proxy : ModelPropertyChange<IPWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ColdLegFG1Proxy(IPWRSteamSupply modelElement) : 
                    base(modelElement, "coldLegFG1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ColdLegFG1;
                }
                set
                {
                    this.ModelElement.ColdLegFG1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the coldLegFG2 property
        /// </summary>
        private sealed class ColdLegFG2Proxy : ModelPropertyChange<IPWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ColdLegFG2Proxy(IPWRSteamSupply modelElement) : 
                    base(modelElement, "coldLegFG2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ColdLegFG2;
                }
                set
                {
                    this.ModelElement.ColdLegFG2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the throttlePressureFactor property
        /// </summary>
        private sealed class ThrottlePressureFactorProxy : ModelPropertyChange<IPWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ThrottlePressureFactorProxy(IPWRSteamSupply modelElement) : 
                    base(modelElement, "throttlePressureFactor")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ThrottlePressureFactor;
                }
                set
                {
                    this.ModelElement.ThrottlePressureFactor = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the coldLegFBLagTC property
        /// </summary>
        private sealed class ColdLegFBLagTCProxy : ModelPropertyChange<IPWRSteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ColdLegFBLagTCProxy(IPWRSteamSupply modelElement) : 
                    base(modelElement, "coldLegFBLagTC")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ColdLegFBLagTC;
                }
                set
                {
                    this.ModelElement.ColdLegFBLagTC = value;
                }
            }
        }
    }
}

