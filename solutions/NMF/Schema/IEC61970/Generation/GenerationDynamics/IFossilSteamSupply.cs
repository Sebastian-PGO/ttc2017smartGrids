using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics
{
    
    
    /// <summary>
    /// The public interface for FossilSteamSupply
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(FossilSteamSupply))]
    [XmlDefaultImplementationTypeAttribute(typeof(FossilSteamSupply))]
    public interface IFossilSteamSupply : IModelElement, ISteamSupply
    {
        
        /// <summary>
        /// The pressureCtrlPG property
        /// </summary>
        float PressureCtrlPG
        {
            get;
            set;
        }
        
        /// <summary>
        /// The superHeater1Capacity property
        /// </summary>
        float SuperHeater1Capacity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The feedWaterPG property
        /// </summary>
        float FeedWaterPG
        {
            get;
            set;
        }
        
        /// <summary>
        /// The controlTC property
        /// </summary>
        float ControlTC
        {
            get;
            set;
        }
        
        /// <summary>
        /// The mechPowerSensorLag property
        /// </summary>
        float MechPowerSensorLag
        {
            get;
            set;
        }
        
        /// <summary>
        /// The throttlePressureSP property
        /// </summary>
        float ThrottlePressureSP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The maxErrorRateP property
        /// </summary>
        float MaxErrorRateP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The controlIC property
        /// </summary>
        float ControlIC
        {
            get;
            set;
        }
        
        /// <summary>
        /// The minErrorRateP property
        /// </summary>
        float MinErrorRateP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The fuelDemandLimit property
        /// </summary>
        float FuelDemandLimit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The superHeaterPipePD property
        /// </summary>
        float SuperHeaterPipePD
        {
            get;
            set;
        }
        
        /// <summary>
        /// The pressureCtrlDG property
        /// </summary>
        float PressureCtrlDG
        {
            get;
            set;
        }
        
        /// <summary>
        /// The auxPowerVersusVoltage property
        /// </summary>
        float AuxPowerVersusVoltage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The controlPC property
        /// </summary>
        float ControlPC
        {
            get;
            set;
        }
        
        /// <summary>
        /// The feedWaterTC property
        /// </summary>
        float FeedWaterTC
        {
            get;
            set;
        }
        
        /// <summary>
        /// The controlErrorBiasP property
        /// </summary>
        float ControlErrorBiasP
        {
            get;
            set;
        }
        
        /// <summary>
        /// The feedWaterIG property
        /// </summary>
        float FeedWaterIG
        {
            get;
            set;
        }
        
        /// <summary>
        /// The pressureCtrlIG property
        /// </summary>
        float PressureCtrlIG
        {
            get;
            set;
        }
        
        /// <summary>
        /// The fuelSupplyTC property
        /// </summary>
        float FuelSupplyTC
        {
            get;
            set;
        }
        
        /// <summary>
        /// The auxPowerVersusFrequency property
        /// </summary>
        float AuxPowerVersusFrequency
        {
            get;
            set;
        }
        
        /// <summary>
        /// The pressureFeedback property
        /// </summary>
        int PressureFeedback
        {
            get;
            set;
        }
        
        /// <summary>
        /// The fuelSupplyDelay property
        /// </summary>
        float FuelSupplyDelay
        {
            get;
            set;
        }
        
        /// <summary>
        /// The boilerControlMode property
        /// </summary>
        Nullable<BoilerControlMode> BoilerControlMode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The superHeater2Capacity property
        /// </summary>
        float SuperHeater2Capacity
        {
            get;
            set;
        }
        
        /// <summary>
        /// The controlPEB property
        /// </summary>
        float ControlPEB
        {
            get;
            set;
        }
        
        /// <summary>
        /// The controlPED property
        /// </summary>
        float ControlPED
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the PressureCtrlPG property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PressureCtrlPGChanging;
        
        /// <summary>
        /// Gets fired when the PressureCtrlPG property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PressureCtrlPGChanged;
        
        /// <summary>
        /// Gets fired before the SuperHeater1Capacity property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SuperHeater1CapacityChanging;
        
        /// <summary>
        /// Gets fired when the SuperHeater1Capacity property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SuperHeater1CapacityChanged;
        
        /// <summary>
        /// Gets fired before the FeedWaterPG property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FeedWaterPGChanging;
        
        /// <summary>
        /// Gets fired when the FeedWaterPG property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FeedWaterPGChanged;
        
        /// <summary>
        /// Gets fired before the ControlTC property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ControlTCChanging;
        
        /// <summary>
        /// Gets fired when the ControlTC property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ControlTCChanged;
        
        /// <summary>
        /// Gets fired before the MechPowerSensorLag property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MechPowerSensorLagChanging;
        
        /// <summary>
        /// Gets fired when the MechPowerSensorLag property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MechPowerSensorLagChanged;
        
        /// <summary>
        /// Gets fired before the ThrottlePressureSP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThrottlePressureSPChanging;
        
        /// <summary>
        /// Gets fired when the ThrottlePressureSP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ThrottlePressureSPChanged;
        
        /// <summary>
        /// Gets fired before the MaxErrorRateP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxErrorRatePChanging;
        
        /// <summary>
        /// Gets fired when the MaxErrorRateP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaxErrorRatePChanged;
        
        /// <summary>
        /// Gets fired before the ControlIC property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ControlICChanging;
        
        /// <summary>
        /// Gets fired when the ControlIC property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ControlICChanged;
        
        /// <summary>
        /// Gets fired before the MinErrorRateP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinErrorRatePChanging;
        
        /// <summary>
        /// Gets fired when the MinErrorRateP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinErrorRatePChanged;
        
        /// <summary>
        /// Gets fired before the FuelDemandLimit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FuelDemandLimitChanging;
        
        /// <summary>
        /// Gets fired when the FuelDemandLimit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FuelDemandLimitChanged;
        
        /// <summary>
        /// Gets fired before the SuperHeaterPipePD property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SuperHeaterPipePDChanging;
        
        /// <summary>
        /// Gets fired when the SuperHeaterPipePD property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SuperHeaterPipePDChanged;
        
        /// <summary>
        /// Gets fired before the PressureCtrlDG property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PressureCtrlDGChanging;
        
        /// <summary>
        /// Gets fired when the PressureCtrlDG property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PressureCtrlDGChanged;
        
        /// <summary>
        /// Gets fired before the AuxPowerVersusVoltage property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AuxPowerVersusVoltageChanging;
        
        /// <summary>
        /// Gets fired when the AuxPowerVersusVoltage property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AuxPowerVersusVoltageChanged;
        
        /// <summary>
        /// Gets fired before the ControlPC property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ControlPCChanging;
        
        /// <summary>
        /// Gets fired when the ControlPC property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ControlPCChanged;
        
        /// <summary>
        /// Gets fired before the FeedWaterTC property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FeedWaterTCChanging;
        
        /// <summary>
        /// Gets fired when the FeedWaterTC property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FeedWaterTCChanged;
        
        /// <summary>
        /// Gets fired before the ControlErrorBiasP property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ControlErrorBiasPChanging;
        
        /// <summary>
        /// Gets fired when the ControlErrorBiasP property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ControlErrorBiasPChanged;
        
        /// <summary>
        /// Gets fired before the FeedWaterIG property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FeedWaterIGChanging;
        
        /// <summary>
        /// Gets fired when the FeedWaterIG property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FeedWaterIGChanged;
        
        /// <summary>
        /// Gets fired before the PressureCtrlIG property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PressureCtrlIGChanging;
        
        /// <summary>
        /// Gets fired when the PressureCtrlIG property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PressureCtrlIGChanged;
        
        /// <summary>
        /// Gets fired before the FuelSupplyTC property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FuelSupplyTCChanging;
        
        /// <summary>
        /// Gets fired when the FuelSupplyTC property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FuelSupplyTCChanged;
        
        /// <summary>
        /// Gets fired before the AuxPowerVersusFrequency property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AuxPowerVersusFrequencyChanging;
        
        /// <summary>
        /// Gets fired when the AuxPowerVersusFrequency property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AuxPowerVersusFrequencyChanged;
        
        /// <summary>
        /// Gets fired before the PressureFeedback property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PressureFeedbackChanging;
        
        /// <summary>
        /// Gets fired when the PressureFeedback property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PressureFeedbackChanged;
        
        /// <summary>
        /// Gets fired before the FuelSupplyDelay property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FuelSupplyDelayChanging;
        
        /// <summary>
        /// Gets fired when the FuelSupplyDelay property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FuelSupplyDelayChanged;
        
        /// <summary>
        /// Gets fired before the BoilerControlMode property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BoilerControlModeChanging;
        
        /// <summary>
        /// Gets fired when the BoilerControlMode property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BoilerControlModeChanged;
        
        /// <summary>
        /// Gets fired before the SuperHeater2Capacity property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SuperHeater2CapacityChanging;
        
        /// <summary>
        /// Gets fired when the SuperHeater2Capacity property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SuperHeater2CapacityChanged;
        
        /// <summary>
        /// Gets fired before the ControlPEB property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ControlPEBChanging;
        
        /// <summary>
        /// Gets fired when the ControlPEB property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ControlPEBChanged;
        
        /// <summary>
        /// Gets fired before the ControlPED property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ControlPEDChanging;
        
        /// <summary>
        /// Gets fired when the ControlPED property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ControlPEDChanged;
    }
}

