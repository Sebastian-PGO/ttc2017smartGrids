using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics
{
    
    
    /// <summary>
    /// The default implementation of the CombustionTurbine class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#GenerationDynamics")]
    [XmlNamespacePrefixAttribute("cimGenerationDynamics")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/GenerationDynamics" +
        "/CombustionTurbine")]
    [DebuggerDisplayAttribute("CombustionTurbine {UUID}")]
    public partial class CombustionTurbine : PrimeMover, ICombustionTurbine, IModelElement
    {
        
        /// <summary>
        /// The backing field for the AuxPowerVersusFrequency property
        /// </summary>
        private float _auxPowerVersusFrequency;
        
        private static Lazy<ITypedElement> _auxPowerVersusFrequencyAttribute = new Lazy<ITypedElement>(RetrieveAuxPowerVersusFrequencyAttribute);
        
        /// <summary>
        /// The backing field for the PowerVariationByTemp property
        /// </summary>
        private float _powerVariationByTemp;
        
        private static Lazy<ITypedElement> _powerVariationByTempAttribute = new Lazy<ITypedElement>(RetrievePowerVariationByTempAttribute);
        
        /// <summary>
        /// The backing field for the AmbientTemp property
        /// </summary>
        private float _ambientTemp;
        
        private static Lazy<ITypedElement> _ambientTempAttribute = new Lazy<ITypedElement>(RetrieveAmbientTempAttribute);
        
        /// <summary>
        /// The backing field for the ReferenceTemp property
        /// </summary>
        private float _referenceTemp;
        
        private static Lazy<ITypedElement> _referenceTempAttribute = new Lazy<ITypedElement>(RetrieveReferenceTempAttribute);
        
        /// <summary>
        /// The backing field for the HeatRecoveryFlag property
        /// </summary>
        private bool _heatRecoveryFlag;
        
        private static Lazy<ITypedElement> _heatRecoveryFlagAttribute = new Lazy<ITypedElement>(RetrieveHeatRecoveryFlagAttribute);
        
        /// <summary>
        /// The backing field for the CapabilityVersusFrequency property
        /// </summary>
        private float _capabilityVersusFrequency;
        
        private static Lazy<ITypedElement> _capabilityVersusFrequencyAttribute = new Lazy<ITypedElement>(RetrieveCapabilityVersusFrequencyAttribute);
        
        /// <summary>
        /// The backing field for the AuxPowerVersusVoltage property
        /// </summary>
        private float _auxPowerVersusVoltage;
        
        private static Lazy<ITypedElement> _auxPowerVersusVoltageAttribute = new Lazy<ITypedElement>(RetrieveAuxPowerVersusVoltageAttribute);
        
        /// <summary>
        /// The backing field for the TimeConstant property
        /// </summary>
        private float _timeConstant;
        
        private static Lazy<ITypedElement> _timeConstantAttribute = new Lazy<ITypedElement>(RetrieveTimeConstantAttribute);
        
        private static Lazy<ITypedElement> _heatRecoveryBoilerReference = new Lazy<ITypedElement>(RetrieveHeatRecoveryBoilerReference);
        
        /// <summary>
        /// The backing field for the HeatRecoveryBoiler property
        /// </summary>
        private IHeatRecoveryBoiler _heatRecoveryBoiler;
        
        private static Lazy<ITypedElement> _cTTempActivePowerCurveReference = new Lazy<ITypedElement>(RetrieveCTTempActivePowerCurveReference);
        
        /// <summary>
        /// The backing field for the CTTempActivePowerCurve property
        /// </summary>
        private ICTTempActivePowerCurve _cTTempActivePowerCurve;
        
        private static Lazy<ITypedElement> _airCompressorReference = new Lazy<ITypedElement>(RetrieveAirCompressorReference);
        
        /// <summary>
        /// The backing field for the AirCompressor property
        /// </summary>
        private IAirCompressor _airCompressor;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The auxPowerVersusFrequency property
        /// </summary>
        [XmlElementNameAttribute("auxPowerVersusFrequency")]
        [XmlAttributeAttribute(true)]
        public virtual float AuxPowerVersusFrequency
        {
            get
            {
                return this._auxPowerVersusFrequency;
            }
            set
            {
                if ((this._auxPowerVersusFrequency != value))
                {
                    float old = this._auxPowerVersusFrequency;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAuxPowerVersusFrequencyChanging(e);
                    this.OnPropertyChanging("AuxPowerVersusFrequency", e, _auxPowerVersusFrequencyAttribute);
                    this._auxPowerVersusFrequency = value;
                    this.OnAuxPowerVersusFrequencyChanged(e);
                    this.OnPropertyChanged("AuxPowerVersusFrequency", e, _auxPowerVersusFrequencyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The powerVariationByTemp property
        /// </summary>
        [XmlElementNameAttribute("powerVariationByTemp")]
        [XmlAttributeAttribute(true)]
        public virtual float PowerVariationByTemp
        {
            get
            {
                return this._powerVariationByTemp;
            }
            set
            {
                if ((this._powerVariationByTemp != value))
                {
                    float old = this._powerVariationByTemp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPowerVariationByTempChanging(e);
                    this.OnPropertyChanging("PowerVariationByTemp", e, _powerVariationByTempAttribute);
                    this._powerVariationByTemp = value;
                    this.OnPowerVariationByTempChanged(e);
                    this.OnPropertyChanged("PowerVariationByTemp", e, _powerVariationByTempAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ambientTemp property
        /// </summary>
        [XmlElementNameAttribute("ambientTemp")]
        [XmlAttributeAttribute(true)]
        public virtual float AmbientTemp
        {
            get
            {
                return this._ambientTemp;
            }
            set
            {
                if ((this._ambientTemp != value))
                {
                    float old = this._ambientTemp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmbientTempChanging(e);
                    this.OnPropertyChanging("AmbientTemp", e, _ambientTempAttribute);
                    this._ambientTemp = value;
                    this.OnAmbientTempChanged(e);
                    this.OnPropertyChanged("AmbientTemp", e, _ambientTempAttribute);
                }
            }
        }
        
        /// <summary>
        /// The referenceTemp property
        /// </summary>
        [XmlElementNameAttribute("referenceTemp")]
        [XmlAttributeAttribute(true)]
        public virtual float ReferenceTemp
        {
            get
            {
                return this._referenceTemp;
            }
            set
            {
                if ((this._referenceTemp != value))
                {
                    float old = this._referenceTemp;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReferenceTempChanging(e);
                    this.OnPropertyChanging("ReferenceTemp", e, _referenceTempAttribute);
                    this._referenceTemp = value;
                    this.OnReferenceTempChanged(e);
                    this.OnPropertyChanged("ReferenceTemp", e, _referenceTempAttribute);
                }
            }
        }
        
        /// <summary>
        /// The heatRecoveryFlag property
        /// </summary>
        [XmlElementNameAttribute("heatRecoveryFlag")]
        [XmlAttributeAttribute(true)]
        public virtual bool HeatRecoveryFlag
        {
            get
            {
                return this._heatRecoveryFlag;
            }
            set
            {
                if ((this._heatRecoveryFlag != value))
                {
                    bool old = this._heatRecoveryFlag;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHeatRecoveryFlagChanging(e);
                    this.OnPropertyChanging("HeatRecoveryFlag", e, _heatRecoveryFlagAttribute);
                    this._heatRecoveryFlag = value;
                    this.OnHeatRecoveryFlagChanged(e);
                    this.OnPropertyChanged("HeatRecoveryFlag", e, _heatRecoveryFlagAttribute);
                }
            }
        }
        
        /// <summary>
        /// The capabilityVersusFrequency property
        /// </summary>
        [XmlElementNameAttribute("capabilityVersusFrequency")]
        [XmlAttributeAttribute(true)]
        public virtual float CapabilityVersusFrequency
        {
            get
            {
                return this._capabilityVersusFrequency;
            }
            set
            {
                if ((this._capabilityVersusFrequency != value))
                {
                    float old = this._capabilityVersusFrequency;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCapabilityVersusFrequencyChanging(e);
                    this.OnPropertyChanging("CapabilityVersusFrequency", e, _capabilityVersusFrequencyAttribute);
                    this._capabilityVersusFrequency = value;
                    this.OnCapabilityVersusFrequencyChanged(e);
                    this.OnPropertyChanged("CapabilityVersusFrequency", e, _capabilityVersusFrequencyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The auxPowerVersusVoltage property
        /// </summary>
        [XmlElementNameAttribute("auxPowerVersusVoltage")]
        [XmlAttributeAttribute(true)]
        public virtual float AuxPowerVersusVoltage
        {
            get
            {
                return this._auxPowerVersusVoltage;
            }
            set
            {
                if ((this._auxPowerVersusVoltage != value))
                {
                    float old = this._auxPowerVersusVoltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAuxPowerVersusVoltageChanging(e);
                    this.OnPropertyChanging("AuxPowerVersusVoltage", e, _auxPowerVersusVoltageAttribute);
                    this._auxPowerVersusVoltage = value;
                    this.OnAuxPowerVersusVoltageChanged(e);
                    this.OnPropertyChanged("AuxPowerVersusVoltage", e, _auxPowerVersusVoltageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The timeConstant property
        /// </summary>
        [XmlElementNameAttribute("timeConstant")]
        [XmlAttributeAttribute(true)]
        public virtual float TimeConstant
        {
            get
            {
                return this._timeConstant;
            }
            set
            {
                if ((this._timeConstant != value))
                {
                    float old = this._timeConstant;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeConstantChanging(e);
                    this.OnPropertyChanging("TimeConstant", e, _timeConstantAttribute);
                    this._timeConstant = value;
                    this.OnTimeConstantChanged(e);
                    this.OnPropertyChanged("TimeConstant", e, _timeConstantAttribute);
                }
            }
        }
        
        /// <summary>
        /// The HeatRecoveryBoiler property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CombustionTurbines")]
        public virtual IHeatRecoveryBoiler HeatRecoveryBoiler
        {
            get
            {
                return this._heatRecoveryBoiler;
            }
            set
            {
                if ((this._heatRecoveryBoiler != value))
                {
                    IHeatRecoveryBoiler old = this._heatRecoveryBoiler;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHeatRecoveryBoilerChanging(e);
                    this.OnPropertyChanging("HeatRecoveryBoiler", e, _heatRecoveryBoilerReference);
                    this._heatRecoveryBoiler = value;
                    if ((old != null))
                    {
                        old.CombustionTurbines.Remove(this);
                        old.Deleted -= this.OnResetHeatRecoveryBoiler;
                    }
                    if ((value != null))
                    {
                        value.CombustionTurbines.Add(this);
                        value.Deleted += this.OnResetHeatRecoveryBoiler;
                    }
                    this.OnHeatRecoveryBoilerChanged(e);
                    this.OnPropertyChanged("HeatRecoveryBoiler", e, _heatRecoveryBoilerReference);
                }
            }
        }
        
        /// <summary>
        /// The CTTempActivePowerCurve property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CombustionTurbine")]
        public virtual ICTTempActivePowerCurve CTTempActivePowerCurve
        {
            get
            {
                return this._cTTempActivePowerCurve;
            }
            set
            {
                if ((this._cTTempActivePowerCurve != value))
                {
                    ICTTempActivePowerCurve old = this._cTTempActivePowerCurve;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCTTempActivePowerCurveChanging(e);
                    this.OnPropertyChanging("CTTempActivePowerCurve", e, _cTTempActivePowerCurveReference);
                    this._cTTempActivePowerCurve = value;
                    if ((old != null))
                    {
                        old.CombustionTurbine = null;
                        old.Deleted -= this.OnResetCTTempActivePowerCurve;
                    }
                    if ((value != null))
                    {
                        value.CombustionTurbine = this;
                        value.Deleted += this.OnResetCTTempActivePowerCurve;
                    }
                    this.OnCTTempActivePowerCurveChanged(e);
                    this.OnPropertyChanged("CTTempActivePowerCurve", e, _cTTempActivePowerCurveReference);
                }
            }
        }
        
        /// <summary>
        /// The AirCompressor property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CombustionTurbine")]
        public virtual IAirCompressor AirCompressor
        {
            get
            {
                return this._airCompressor;
            }
            set
            {
                if ((this._airCompressor != value))
                {
                    IAirCompressor old = this._airCompressor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAirCompressorChanging(e);
                    this.OnPropertyChanging("AirCompressor", e, _airCompressorReference);
                    this._airCompressor = value;
                    if ((old != null))
                    {
                        old.CombustionTurbine = null;
                        old.Deleted -= this.OnResetAirCompressor;
                    }
                    if ((value != null))
                    {
                        value.CombustionTurbine = this;
                        value.Deleted += this.OnResetAirCompressor;
                    }
                    this.OnAirCompressorChanged(e);
                    this.OnPropertyChanged("AirCompressor", e, _airCompressorReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CombustionTurbineReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/GenerationDynamics" +
                            "/CombustionTurbine")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the AuxPowerVersusFrequency property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AuxPowerVersusFrequencyChanging;
        
        /// <summary>
        /// Gets fired when the AuxPowerVersusFrequency property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AuxPowerVersusFrequencyChanged;
        
        /// <summary>
        /// Gets fired before the PowerVariationByTemp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerVariationByTempChanging;
        
        /// <summary>
        /// Gets fired when the PowerVariationByTemp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerVariationByTempChanged;
        
        /// <summary>
        /// Gets fired before the AmbientTemp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmbientTempChanging;
        
        /// <summary>
        /// Gets fired when the AmbientTemp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmbientTempChanged;
        
        /// <summary>
        /// Gets fired before the ReferenceTemp property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReferenceTempChanging;
        
        /// <summary>
        /// Gets fired when the ReferenceTemp property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReferenceTempChanged;
        
        /// <summary>
        /// Gets fired before the HeatRecoveryFlag property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HeatRecoveryFlagChanging;
        
        /// <summary>
        /// Gets fired when the HeatRecoveryFlag property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HeatRecoveryFlagChanged;
        
        /// <summary>
        /// Gets fired before the CapabilityVersusFrequency property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CapabilityVersusFrequencyChanging;
        
        /// <summary>
        /// Gets fired when the CapabilityVersusFrequency property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CapabilityVersusFrequencyChanged;
        
        /// <summary>
        /// Gets fired before the AuxPowerVersusVoltage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AuxPowerVersusVoltageChanging;
        
        /// <summary>
        /// Gets fired when the AuxPowerVersusVoltage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AuxPowerVersusVoltageChanged;
        
        /// <summary>
        /// Gets fired before the TimeConstant property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeConstantChanging;
        
        /// <summary>
        /// Gets fired when the TimeConstant property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeConstantChanged;
        
        /// <summary>
        /// Gets fired before the HeatRecoveryBoiler property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HeatRecoveryBoilerChanging;
        
        /// <summary>
        /// Gets fired when the HeatRecoveryBoiler property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HeatRecoveryBoilerChanged;
        
        /// <summary>
        /// Gets fired before the CTTempActivePowerCurve property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CTTempActivePowerCurveChanging;
        
        /// <summary>
        /// Gets fired when the CTTempActivePowerCurve property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CTTempActivePowerCurveChanged;
        
        /// <summary>
        /// Gets fired before the AirCompressor property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AirCompressorChanging;
        
        /// <summary>
        /// Gets fired when the AirCompressor property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AirCompressorChanged;
        
        private static ITypedElement RetrieveAuxPowerVersusFrequencyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CombustionTurbine.ClassInstance)).Resolve("auxPowerVersusFrequency")));
        }
        
        /// <summary>
        /// Raises the AuxPowerVersusFrequencyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuxPowerVersusFrequencyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AuxPowerVersusFrequencyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AuxPowerVersusFrequencyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuxPowerVersusFrequencyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AuxPowerVersusFrequencyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePowerVariationByTempAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CombustionTurbine.ClassInstance)).Resolve("powerVariationByTemp")));
        }
        
        /// <summary>
        /// Raises the PowerVariationByTempChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerVariationByTempChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerVariationByTempChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerVariationByTempChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerVariationByTempChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerVariationByTempChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAmbientTempAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CombustionTurbine.ClassInstance)).Resolve("ambientTemp")));
        }
        
        /// <summary>
        /// Raises the AmbientTempChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmbientTempChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmbientTempChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AmbientTempChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmbientTempChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmbientTempChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReferenceTempAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CombustionTurbine.ClassInstance)).Resolve("referenceTemp")));
        }
        
        /// <summary>
        /// Raises the ReferenceTempChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReferenceTempChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReferenceTempChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReferenceTempChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReferenceTempChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReferenceTempChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveHeatRecoveryFlagAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CombustionTurbine.ClassInstance)).Resolve("heatRecoveryFlag")));
        }
        
        /// <summary>
        /// Raises the HeatRecoveryFlagChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHeatRecoveryFlagChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HeatRecoveryFlagChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HeatRecoveryFlagChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHeatRecoveryFlagChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HeatRecoveryFlagChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCapabilityVersusFrequencyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CombustionTurbine.ClassInstance)).Resolve("capabilityVersusFrequency")));
        }
        
        /// <summary>
        /// Raises the CapabilityVersusFrequencyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCapabilityVersusFrequencyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CapabilityVersusFrequencyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CapabilityVersusFrequencyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCapabilityVersusFrequencyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CapabilityVersusFrequencyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAuxPowerVersusVoltageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CombustionTurbine.ClassInstance)).Resolve("auxPowerVersusVoltage")));
        }
        
        /// <summary>
        /// Raises the AuxPowerVersusVoltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuxPowerVersusVoltageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AuxPowerVersusVoltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AuxPowerVersusVoltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuxPowerVersusVoltageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AuxPowerVersusVoltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTimeConstantAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CombustionTurbine.ClassInstance)).Resolve("timeConstant")));
        }
        
        /// <summary>
        /// Raises the TimeConstantChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeConstantChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeConstantChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeConstantChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeConstantChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeConstantChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveHeatRecoveryBoilerReference()
        {
            return ((ITypedElement)(((ModelElement)(CombustionTurbine.ClassInstance)).Resolve("HeatRecoveryBoiler")));
        }
        
        /// <summary>
        /// Raises the HeatRecoveryBoilerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHeatRecoveryBoilerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HeatRecoveryBoilerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HeatRecoveryBoilerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHeatRecoveryBoilerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HeatRecoveryBoilerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the HeatRecoveryBoiler property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHeatRecoveryBoiler(object sender, System.EventArgs eventArgs)
        {
            this.HeatRecoveryBoiler = null;
        }
        
        private static ITypedElement RetrieveCTTempActivePowerCurveReference()
        {
            return ((ITypedElement)(((ModelElement)(CombustionTurbine.ClassInstance)).Resolve("CTTempActivePowerCurve")));
        }
        
        /// <summary>
        /// Raises the CTTempActivePowerCurveChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCTTempActivePowerCurveChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CTTempActivePowerCurveChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CTTempActivePowerCurveChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCTTempActivePowerCurveChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CTTempActivePowerCurveChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CTTempActivePowerCurve property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCTTempActivePowerCurve(object sender, System.EventArgs eventArgs)
        {
            this.CTTempActivePowerCurve = null;
        }
        
        private static ITypedElement RetrieveAirCompressorReference()
        {
            return ((ITypedElement)(((ModelElement)(CombustionTurbine.ClassInstance)).Resolve("AirCompressor")));
        }
        
        /// <summary>
        /// Raises the AirCompressorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAirCompressorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AirCompressorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AirCompressorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAirCompressorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AirCompressorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AirCompressor property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAirCompressor(object sender, System.EventArgs eventArgs)
        {
            this.AirCompressor = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "AUXPOWERVERSUSFREQUENCY"))
            {
                return this.AuxPowerVersusFrequency;
            }
            if ((attribute == "POWERVARIATIONBYTEMP"))
            {
                return this.PowerVariationByTemp;
            }
            if ((attribute == "AMBIENTTEMP"))
            {
                return this.AmbientTemp;
            }
            if ((attribute == "REFERENCETEMP"))
            {
                return this.ReferenceTemp;
            }
            if ((attribute == "HEATRECOVERYFLAG"))
            {
                return this.HeatRecoveryFlag;
            }
            if ((attribute == "CAPABILITYVERSUSFREQUENCY"))
            {
                return this.CapabilityVersusFrequency;
            }
            if ((attribute == "AUXPOWERVERSUSVOLTAGE"))
            {
                return this.AuxPowerVersusVoltage;
            }
            if ((attribute == "TIMECONSTANT"))
            {
                return this.TimeConstant;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "HEATRECOVERYBOILER"))
            {
                this.HeatRecoveryBoiler = ((IHeatRecoveryBoiler)(value));
                return;
            }
            if ((feature == "CTTEMPACTIVEPOWERCURVE"))
            {
                this.CTTempActivePowerCurve = ((ICTTempActivePowerCurve)(value));
                return;
            }
            if ((feature == "AIRCOMPRESSOR"))
            {
                this.AirCompressor = ((IAirCompressor)(value));
                return;
            }
            if ((feature == "AUXPOWERVERSUSFREQUENCY"))
            {
                this.AuxPowerVersusFrequency = ((float)(value));
                return;
            }
            if ((feature == "POWERVARIATIONBYTEMP"))
            {
                this.PowerVariationByTemp = ((float)(value));
                return;
            }
            if ((feature == "AMBIENTTEMP"))
            {
                this.AmbientTemp = ((float)(value));
                return;
            }
            if ((feature == "REFERENCETEMP"))
            {
                this.ReferenceTemp = ((float)(value));
                return;
            }
            if ((feature == "HEATRECOVERYFLAG"))
            {
                this.HeatRecoveryFlag = ((bool)(value));
                return;
            }
            if ((feature == "CAPABILITYVERSUSFREQUENCY"))
            {
                this.CapabilityVersusFrequency = ((float)(value));
                return;
            }
            if ((feature == "AUXPOWERVERSUSVOLTAGE"))
            {
                this.AuxPowerVersusVoltage = ((float)(value));
                return;
            }
            if ((feature == "TIMECONSTANT"))
            {
                this.TimeConstant = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "HeatRecoveryBoiler"))
            {
                return new HeatRecoveryBoilerProxy(this);
            }
            if ((attribute == "CTTempActivePowerCurve"))
            {
                return new CTTempActivePowerCurveProxy(this);
            }
            if ((attribute == "AirCompressor"))
            {
                return new AirCompressorProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "HeatRecoveryBoiler"))
            {
                return new HeatRecoveryBoilerProxy(this);
            }
            if ((reference == "CTTempActivePowerCurve"))
            {
                return new CTTempActivePowerCurveProxy(this);
            }
            if ((reference == "AirCompressor"))
            {
                return new AirCompressorProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/GenerationDynamics" +
                        "/CombustionTurbine")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CombustionTurbine class
        /// </summary>
        public class CombustionTurbineReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CombustionTurbine _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CombustionTurbineReferencedElementsCollection(CombustionTurbine parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.HeatRecoveryBoiler != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CTTempActivePowerCurve != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AirCompressor != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.HeatRecoveryBoilerChanged += this.PropagateValueChanges;
                this._parent.CTTempActivePowerCurveChanged += this.PropagateValueChanges;
                this._parent.AirCompressorChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.HeatRecoveryBoilerChanged -= this.PropagateValueChanges;
                this._parent.CTTempActivePowerCurveChanged -= this.PropagateValueChanges;
                this._parent.AirCompressorChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.HeatRecoveryBoiler == null))
                {
                    IHeatRecoveryBoiler heatRecoveryBoilerCasted = item.As<IHeatRecoveryBoiler>();
                    if ((heatRecoveryBoilerCasted != null))
                    {
                        this._parent.HeatRecoveryBoiler = heatRecoveryBoilerCasted;
                        return;
                    }
                }
                if ((this._parent.CTTempActivePowerCurve == null))
                {
                    ICTTempActivePowerCurve cTTempActivePowerCurveCasted = item.As<ICTTempActivePowerCurve>();
                    if ((cTTempActivePowerCurveCasted != null))
                    {
                        this._parent.CTTempActivePowerCurve = cTTempActivePowerCurveCasted;
                        return;
                    }
                }
                if ((this._parent.AirCompressor == null))
                {
                    IAirCompressor airCompressorCasted = item.As<IAirCompressor>();
                    if ((airCompressorCasted != null))
                    {
                        this._parent.AirCompressor = airCompressorCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.HeatRecoveryBoiler = null;
                this._parent.CTTempActivePowerCurve = null;
                this._parent.AirCompressor = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.HeatRecoveryBoiler))
                {
                    return true;
                }
                if ((item == this._parent.CTTempActivePowerCurve))
                {
                    return true;
                }
                if ((item == this._parent.AirCompressor))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.HeatRecoveryBoiler != null))
                {
                    array[arrayIndex] = this._parent.HeatRecoveryBoiler;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CTTempActivePowerCurve != null))
                {
                    array[arrayIndex] = this._parent.CTTempActivePowerCurve;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AirCompressor != null))
                {
                    array[arrayIndex] = this._parent.AirCompressor;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.HeatRecoveryBoiler == item))
                {
                    this._parent.HeatRecoveryBoiler = null;
                    return true;
                }
                if ((this._parent.CTTempActivePowerCurve == item))
                {
                    this._parent.CTTempActivePowerCurve = null;
                    return true;
                }
                if ((this._parent.AirCompressor == item))
                {
                    this._parent.AirCompressor = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.HeatRecoveryBoiler).Concat(this._parent.CTTempActivePowerCurve).Concat(this._parent.AirCompressor).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the auxPowerVersusFrequency property
        /// </summary>
        private sealed class AuxPowerVersusFrequencyProxy : ModelPropertyChange<ICombustionTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AuxPowerVersusFrequencyProxy(ICombustionTurbine modelElement) : 
                    base(modelElement, "auxPowerVersusFrequency")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.AuxPowerVersusFrequency;
                }
                set
                {
                    this.ModelElement.AuxPowerVersusFrequency = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the powerVariationByTemp property
        /// </summary>
        private sealed class PowerVariationByTempProxy : ModelPropertyChange<ICombustionTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PowerVariationByTempProxy(ICombustionTurbine modelElement) : 
                    base(modelElement, "powerVariationByTemp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PowerVariationByTemp;
                }
                set
                {
                    this.ModelElement.PowerVariationByTemp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ambientTemp property
        /// </summary>
        private sealed class AmbientTempProxy : ModelPropertyChange<ICombustionTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AmbientTempProxy(ICombustionTurbine modelElement) : 
                    base(modelElement, "ambientTemp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.AmbientTemp;
                }
                set
                {
                    this.ModelElement.AmbientTemp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the referenceTemp property
        /// </summary>
        private sealed class ReferenceTempProxy : ModelPropertyChange<ICombustionTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReferenceTempProxy(ICombustionTurbine modelElement) : 
                    base(modelElement, "referenceTemp")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ReferenceTemp;
                }
                set
                {
                    this.ModelElement.ReferenceTemp = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the heatRecoveryFlag property
        /// </summary>
        private sealed class HeatRecoveryFlagProxy : ModelPropertyChange<ICombustionTurbine, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HeatRecoveryFlagProxy(ICombustionTurbine modelElement) : 
                    base(modelElement, "heatRecoveryFlag")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.HeatRecoveryFlag;
                }
                set
                {
                    this.ModelElement.HeatRecoveryFlag = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the capabilityVersusFrequency property
        /// </summary>
        private sealed class CapabilityVersusFrequencyProxy : ModelPropertyChange<ICombustionTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CapabilityVersusFrequencyProxy(ICombustionTurbine modelElement) : 
                    base(modelElement, "capabilityVersusFrequency")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CapabilityVersusFrequency;
                }
                set
                {
                    this.ModelElement.CapabilityVersusFrequency = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the auxPowerVersusVoltage property
        /// </summary>
        private sealed class AuxPowerVersusVoltageProxy : ModelPropertyChange<ICombustionTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AuxPowerVersusVoltageProxy(ICombustionTurbine modelElement) : 
                    base(modelElement, "auxPowerVersusVoltage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.AuxPowerVersusVoltage;
                }
                set
                {
                    this.ModelElement.AuxPowerVersusVoltage = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the timeConstant property
        /// </summary>
        private sealed class TimeConstantProxy : ModelPropertyChange<ICombustionTurbine, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeConstantProxy(ICombustionTurbine modelElement) : 
                    base(modelElement, "timeConstant")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TimeConstant;
                }
                set
                {
                    this.ModelElement.TimeConstant = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the HeatRecoveryBoiler property
        /// </summary>
        private sealed class HeatRecoveryBoilerProxy : ModelPropertyChange<ICombustionTurbine, IHeatRecoveryBoiler>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HeatRecoveryBoilerProxy(ICombustionTurbine modelElement) : 
                    base(modelElement, "HeatRecoveryBoiler")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IHeatRecoveryBoiler Value
            {
                get
                {
                    return this.ModelElement.HeatRecoveryBoiler;
                }
                set
                {
                    this.ModelElement.HeatRecoveryBoiler = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CTTempActivePowerCurve property
        /// </summary>
        private sealed class CTTempActivePowerCurveProxy : ModelPropertyChange<ICombustionTurbine, ICTTempActivePowerCurve>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CTTempActivePowerCurveProxy(ICombustionTurbine modelElement) : 
                    base(modelElement, "CTTempActivePowerCurve")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICTTempActivePowerCurve Value
            {
                get
                {
                    return this.ModelElement.CTTempActivePowerCurve;
                }
                set
                {
                    this.ModelElement.CTTempActivePowerCurve = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AirCompressor property
        /// </summary>
        private sealed class AirCompressorProxy : ModelPropertyChange<ICombustionTurbine, IAirCompressor>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AirCompressorProxy(ICombustionTurbine modelElement) : 
                    base(modelElement, "AirCompressor")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAirCompressor Value
            {
                get
                {
                    return this.ModelElement.AirCompressor;
                }
                set
                {
                    this.ModelElement.AirCompressor = value;
                }
            }
        }
    }
}

