//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics
{
    
    
    /// <summary>
    /// The default implementation of the SteamSupply class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#GenerationDynamics")]
    [XmlNamespacePrefixAttribute("cimGenerationDynamics")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/GenerationDynamics" +
        "/SteamSupply")]
    [DebuggerDisplayAttribute("SteamSupply {UUID}")]
    public partial class SteamSupply : PowerSystemResource, ISteamSupply, IModelElement
    {
        
        /// <summary>
        /// The backing field for the SteamSupplyRating property
        /// </summary>
        private float _steamSupplyRating;
        
        private static Lazy<ITypedElement> _steamSupplyRatingAttribute = new Lazy<ITypedElement>(RetrieveSteamSupplyRatingAttribute);
        
        private static Lazy<ITypedElement> _steamTurbinesReference = new Lazy<ITypedElement>(RetrieveSteamTurbinesReference);
        
        /// <summary>
        /// The backing field for the SteamTurbines property
        /// </summary>
        private SteamSupplySteamTurbinesCollection _steamTurbines;
        
        private static IClass _classInstance;
        
        public SteamSupply()
        {
            this._steamTurbines = new SteamSupplySteamTurbinesCollection(this);
            this._steamTurbines.CollectionChanging += this.SteamTurbinesCollectionChanging;
            this._steamTurbines.CollectionChanged += this.SteamTurbinesCollectionChanged;
        }
        
        /// <summary>
        /// The steamSupplyRating property
        /// </summary>
        [XmlElementNameAttribute("steamSupplyRating")]
        [XmlAttributeAttribute(true)]
        public virtual float SteamSupplyRating
        {
            get
            {
                return this._steamSupplyRating;
            }
            set
            {
                if ((this._steamSupplyRating != value))
                {
                    float old = this._steamSupplyRating;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSteamSupplyRatingChanging(e);
                    this.OnPropertyChanging("SteamSupplyRating", e, _steamSupplyRatingAttribute);
                    this._steamSupplyRating = value;
                    this.OnSteamSupplyRatingChanged(e);
                    this.OnPropertyChanged("SteamSupplyRating", e, _steamSupplyRatingAttribute);
                }
            }
        }
        
        /// <summary>
        /// The SteamTurbines property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SteamSupplys")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ISteamTurbine> SteamTurbines
        {
            get
            {
                return this._steamTurbines;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SteamSupplyReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/GenerationDynamics" +
                            "/SteamSupply")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the SteamSupplyRating property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SteamSupplyRatingChanging;
        
        /// <summary>
        /// Gets fired when the SteamSupplyRating property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SteamSupplyRatingChanged;
        
        private static ITypedElement RetrieveSteamSupplyRatingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(SteamSupply.ClassInstance)).Resolve("steamSupplyRating")));
        }
        
        /// <summary>
        /// Raises the SteamSupplyRatingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSteamSupplyRatingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SteamSupplyRatingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SteamSupplyRatingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSteamSupplyRatingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SteamSupplyRatingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSteamTurbinesReference()
        {
            return ((ITypedElement)(((ModelElement)(SteamSupply.ClassInstance)).Resolve("SteamTurbines")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the SteamTurbines property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SteamTurbinesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("SteamTurbines", e, _steamTurbinesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the SteamTurbines property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void SteamTurbinesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("SteamTurbines", e, _steamTurbinesReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "STEAMSUPPLYRATING"))
            {
                return this.SteamSupplyRating;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "STEAMTURBINES"))
            {
                return this._steamTurbines;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STEAMSUPPLYRATING"))
            {
                this.SteamSupplyRating = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61970/Generation/GenerationDynamics" +
                        "/SteamSupply")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SteamSupply class
        /// </summary>
        public class SteamSupplyReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SteamSupply _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SteamSupplyReferencedElementsCollection(SteamSupply parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.SteamTurbines.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SteamTurbines.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SteamTurbines.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ISteamTurbine steamTurbinesCasted = item.As<ISteamTurbine>();
                if ((steamTurbinesCasted != null))
                {
                    this._parent.SteamTurbines.Add(steamTurbinesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SteamTurbines.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.SteamTurbines.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> steamTurbinesEnumerator = this._parent.SteamTurbines.GetEnumerator();
                try
                {
                    for (
                    ; steamTurbinesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = steamTurbinesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    steamTurbinesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ISteamTurbine steamTurbineItem = item.As<ISteamTurbine>();
                if (((steamTurbineItem != null) 
                            && this._parent.SteamTurbines.Remove(steamTurbineItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SteamTurbines).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the steamSupplyRating property
        /// </summary>
        private sealed class SteamSupplyRatingProxy : ModelPropertyChange<ISteamSupply, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SteamSupplyRatingProxy(ISteamSupply modelElement) : 
                    base(modelElement, "steamSupplyRating")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SteamSupplyRating;
                }
                set
                {
                    this.ModelElement.SteamSupplyRating = value;
                }
            }
        }
    }
}

