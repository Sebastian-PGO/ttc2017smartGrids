using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Generation.Production;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61970.Generation.GenerationDynamics
{
    
    
    /// <summary>
    /// The public interface for BWRSteamSupply
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(BWRSteamSupply))]
    [XmlDefaultImplementationTypeAttribute(typeof(BWRSteamSupply))]
    public interface IBWRSteamSupply : IModelElement, ISteamSupply
    {
        
        /// <summary>
        /// The lowPowerLimit property
        /// </summary>
        float LowPowerLimit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The inCoreThermalTC property
        /// </summary>
        float InCoreThermalTC
        {
            get;
            set;
        }
        
        /// <summary>
        /// The integralGain property
        /// </summary>
        float IntegralGain
        {
            get;
            set;
        }
        
        /// <summary>
        /// The pressureSetpointGA property
        /// </summary>
        float PressureSetpointGA
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rfAux1 property
        /// </summary>
        float RfAux1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rfAux2 property
        /// </summary>
        float RfAux2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The lowerLimit property
        /// </summary>
        float LowerLimit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rodPatternConstant property
        /// </summary>
        float RodPatternConstant
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rfAux8 property
        /// </summary>
        float RfAux8
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rfAux7 property
        /// </summary>
        float RfAux7
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rodPattern property
        /// </summary>
        float RodPattern
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rfAux4 property
        /// </summary>
        float RfAux4
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rfAux3 property
        /// </summary>
        float RfAux3
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rfAux6 property
        /// </summary>
        float RfAux6
        {
            get;
            set;
        }
        
        /// <summary>
        /// The rfAux5 property
        /// </summary>
        float RfAux5
        {
            get;
            set;
        }
        
        /// <summary>
        /// The proportionalGain property
        /// </summary>
        float ProportionalGain
        {
            get;
            set;
        }
        
        /// <summary>
        /// The upperLimit property
        /// </summary>
        float UpperLimit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The highPowerLimit property
        /// </summary>
        float HighPowerLimit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The pressureSetpointTC2 property
        /// </summary>
        float PressureSetpointTC2
        {
            get;
            set;
        }
        
        /// <summary>
        /// The pressureSetpointTC1 property
        /// </summary>
        float PressureSetpointTC1
        {
            get;
            set;
        }
        
        /// <summary>
        /// The pressureLimit property
        /// </summary>
        float PressureLimit
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the LowPowerLimit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowPowerLimitChanging;
        
        /// <summary>
        /// Gets fired when the LowPowerLimit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowPowerLimitChanged;
        
        /// <summary>
        /// Gets fired before the InCoreThermalTC property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InCoreThermalTCChanging;
        
        /// <summary>
        /// Gets fired when the InCoreThermalTC property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InCoreThermalTCChanged;
        
        /// <summary>
        /// Gets fired before the IntegralGain property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IntegralGainChanging;
        
        /// <summary>
        /// Gets fired when the IntegralGain property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IntegralGainChanged;
        
        /// <summary>
        /// Gets fired before the PressureSetpointGA property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PressureSetpointGAChanging;
        
        /// <summary>
        /// Gets fired when the PressureSetpointGA property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PressureSetpointGAChanged;
        
        /// <summary>
        /// Gets fired before the RfAux1 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RfAux1Changing;
        
        /// <summary>
        /// Gets fired when the RfAux1 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RfAux1Changed;
        
        /// <summary>
        /// Gets fired before the RfAux2 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RfAux2Changing;
        
        /// <summary>
        /// Gets fired when the RfAux2 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RfAux2Changed;
        
        /// <summary>
        /// Gets fired before the LowerLimit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowerLimitChanging;
        
        /// <summary>
        /// Gets fired when the LowerLimit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LowerLimitChanged;
        
        /// <summary>
        /// Gets fired before the RodPatternConstant property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RodPatternConstantChanging;
        
        /// <summary>
        /// Gets fired when the RodPatternConstant property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RodPatternConstantChanged;
        
        /// <summary>
        /// Gets fired before the RfAux8 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RfAux8Changing;
        
        /// <summary>
        /// Gets fired when the RfAux8 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RfAux8Changed;
        
        /// <summary>
        /// Gets fired before the RfAux7 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RfAux7Changing;
        
        /// <summary>
        /// Gets fired when the RfAux7 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RfAux7Changed;
        
        /// <summary>
        /// Gets fired before the RodPattern property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RodPatternChanging;
        
        /// <summary>
        /// Gets fired when the RodPattern property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RodPatternChanged;
        
        /// <summary>
        /// Gets fired before the RfAux4 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RfAux4Changing;
        
        /// <summary>
        /// Gets fired when the RfAux4 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RfAux4Changed;
        
        /// <summary>
        /// Gets fired before the RfAux3 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RfAux3Changing;
        
        /// <summary>
        /// Gets fired when the RfAux3 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RfAux3Changed;
        
        /// <summary>
        /// Gets fired before the RfAux6 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RfAux6Changing;
        
        /// <summary>
        /// Gets fired when the RfAux6 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RfAux6Changed;
        
        /// <summary>
        /// Gets fired before the RfAux5 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RfAux5Changing;
        
        /// <summary>
        /// Gets fired when the RfAux5 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RfAux5Changed;
        
        /// <summary>
        /// Gets fired before the ProportionalGain property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ProportionalGainChanging;
        
        /// <summary>
        /// Gets fired when the ProportionalGain property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ProportionalGainChanged;
        
        /// <summary>
        /// Gets fired before the UpperLimit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UpperLimitChanging;
        
        /// <summary>
        /// Gets fired when the UpperLimit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UpperLimitChanged;
        
        /// <summary>
        /// Gets fired before the HighPowerLimit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HighPowerLimitChanging;
        
        /// <summary>
        /// Gets fired when the HighPowerLimit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HighPowerLimitChanged;
        
        /// <summary>
        /// Gets fired before the PressureSetpointTC2 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PressureSetpointTC2Changing;
        
        /// <summary>
        /// Gets fired when the PressureSetpointTC2 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PressureSetpointTC2Changed;
        
        /// <summary>
        /// Gets fired before the PressureSetpointTC1 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PressureSetpointTC1Changing;
        
        /// <summary>
        /// Gets fired when the PressureSetpointTC1 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PressureSetpointTC1Changed;
        
        /// <summary>
        /// Gets fired before the PressureLimit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PressureLimitChanging;
        
        /// <summary>
        /// Gets fired when the PressureLimit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PressureLimitChanged;
    }
}

