//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering
{
    
    
    /// <summary>
    /// The default implementation of the AuxiliaryAccount class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#PaymentMetering")]
    [XmlNamespacePrefixAttribute("cimPaymentMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/AuxiliaryAcco" +
        "unt")]
    [DebuggerDisplayAttribute("AuxiliaryAccount {UUID}")]
    public partial class AuxiliaryAccount : Document, IAuxiliaryAccount, IModelElement
    {
        
        /// <summary>
        /// The backing field for the PrincipleAmount property
        /// </summary>
        private float _principleAmount;
        
        private static Lazy<ITypedElement> _principleAmountAttribute = new Lazy<ITypedElement>(RetrievePrincipleAmountAttribute);
        
        /// <summary>
        /// The backing field for the Balance property
        /// </summary>
        private float _balance;
        
        private static Lazy<ITypedElement> _balanceAttribute = new Lazy<ITypedElement>(RetrieveBalanceAttribute);
        
        private static Lazy<ITypedElement> _paymentTransactionsReference = new Lazy<ITypedElement>(RetrievePaymentTransactionsReference);
        
        /// <summary>
        /// The backing field for the PaymentTransactions property
        /// </summary>
        private AuxiliaryAccountPaymentTransactionsCollection _paymentTransactions;
        
        private static Lazy<ITypedElement> _dueReference = new Lazy<ITypedElement>(RetrieveDueReference);
        
        /// <summary>
        /// The backing field for the Due property
        /// </summary>
        private IDue _due;
        
        private static Lazy<ITypedElement> _lastCreditReference = new Lazy<ITypedElement>(RetrieveLastCreditReference);
        
        /// <summary>
        /// The backing field for the LastCredit property
        /// </summary>
        private IAccountMovement _lastCredit;
        
        private static Lazy<ITypedElement> _auxiliaryAgreementReference = new Lazy<ITypedElement>(RetrieveAuxiliaryAgreementReference);
        
        /// <summary>
        /// The backing field for the AuxiliaryAgreement property
        /// </summary>
        private IAuxiliaryAgreement _auxiliaryAgreement;
        
        private static Lazy<ITypedElement> _chargesReference = new Lazy<ITypedElement>(RetrieveChargesReference);
        
        /// <summary>
        /// The backing field for the Charges property
        /// </summary>
        private AuxiliaryAccountChargesCollection _charges;
        
        private static Lazy<ITypedElement> _lastDebitReference = new Lazy<ITypedElement>(RetrieveLastDebitReference);
        
        /// <summary>
        /// The backing field for the LastDebit property
        /// </summary>
        private IAccountMovement _lastDebit;
        
        private static IClass _classInstance;
        
        public AuxiliaryAccount()
        {
            this._paymentTransactions = new AuxiliaryAccountPaymentTransactionsCollection(this);
            this._paymentTransactions.CollectionChanging += this.PaymentTransactionsCollectionChanging;
            this._paymentTransactions.CollectionChanged += this.PaymentTransactionsCollectionChanged;
            this._charges = new AuxiliaryAccountChargesCollection(this);
            this._charges.CollectionChanging += this.ChargesCollectionChanging;
            this._charges.CollectionChanged += this.ChargesCollectionChanged;
        }
        
        /// <summary>
        /// The principleAmount property
        /// </summary>
        [XmlElementNameAttribute("principleAmount")]
        [XmlAttributeAttribute(true)]
        public virtual float PrincipleAmount
        {
            get
            {
                return this._principleAmount;
            }
            set
            {
                if ((this._principleAmount != value))
                {
                    float old = this._principleAmount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPrincipleAmountChanging(e);
                    this.OnPropertyChanging("PrincipleAmount", e, _principleAmountAttribute);
                    this._principleAmount = value;
                    this.OnPrincipleAmountChanged(e);
                    this.OnPropertyChanged("PrincipleAmount", e, _principleAmountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The balance property
        /// </summary>
        [XmlElementNameAttribute("balance")]
        [XmlAttributeAttribute(true)]
        public virtual float Balance
        {
            get
            {
                return this._balance;
            }
            set
            {
                if ((this._balance != value))
                {
                    float old = this._balance;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBalanceChanging(e);
                    this.OnPropertyChanging("Balance", e, _balanceAttribute);
                    this._balance = value;
                    this.OnBalanceChanged(e);
                    this.OnPropertyChanged("Balance", e, _balanceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The PaymentTransactions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AuxiliaryAccount")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransaction> PaymentTransactions
        {
            get
            {
                return this._paymentTransactions;
            }
        }
        
        /// <summary>
        /// The due property
        /// </summary>
        [XmlElementNameAttribute("due")]
        [XmlAttributeAttribute(true)]
        public virtual IDue Due
        {
            get
            {
                return this._due;
            }
            set
            {
                if ((this._due != value))
                {
                    IDue old = this._due;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDueChanging(e);
                    this.OnPropertyChanging("Due", e, _dueReference);
                    this._due = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDue;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDue;
                    }
                    this.OnDueChanged(e);
                    this.OnPropertyChanged("Due", e, _dueReference);
                }
            }
        }
        
        /// <summary>
        /// The lastCredit property
        /// </summary>
        [XmlElementNameAttribute("lastCredit")]
        [XmlAttributeAttribute(true)]
        public virtual IAccountMovement LastCredit
        {
            get
            {
                return this._lastCredit;
            }
            set
            {
                if ((this._lastCredit != value))
                {
                    IAccountMovement old = this._lastCredit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLastCreditChanging(e);
                    this.OnPropertyChanging("LastCredit", e, _lastCreditReference);
                    this._lastCredit = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLastCredit;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLastCredit;
                    }
                    this.OnLastCreditChanged(e);
                    this.OnPropertyChanged("LastCredit", e, _lastCreditReference);
                }
            }
        }
        
        /// <summary>
        /// The AuxiliaryAgreement property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AuxiliaryAccounts")]
        public virtual IAuxiliaryAgreement AuxiliaryAgreement
        {
            get
            {
                return this._auxiliaryAgreement;
            }
            set
            {
                if ((this._auxiliaryAgreement != value))
                {
                    IAuxiliaryAgreement old = this._auxiliaryAgreement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAuxiliaryAgreementChanging(e);
                    this.OnPropertyChanging("AuxiliaryAgreement", e, _auxiliaryAgreementReference);
                    this._auxiliaryAgreement = value;
                    if ((old != null))
                    {
                        old.AuxiliaryAccounts.Remove(this);
                        old.Deleted -= this.OnResetAuxiliaryAgreement;
                    }
                    if ((value != null))
                    {
                        value.AuxiliaryAccounts.Add(this);
                        value.Deleted += this.OnResetAuxiliaryAgreement;
                    }
                    this.OnAuxiliaryAgreementChanged(e);
                    this.OnPropertyChanged("AuxiliaryAgreement", e, _auxiliaryAgreementReference);
                }
            }
        }
        
        /// <summary>
        /// The Charges property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AuxiliaryAccounts")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICharge> Charges
        {
            get
            {
                return this._charges;
            }
        }
        
        /// <summary>
        /// The lastDebit property
        /// </summary>
        [XmlElementNameAttribute("lastDebit")]
        [XmlAttributeAttribute(true)]
        public virtual IAccountMovement LastDebit
        {
            get
            {
                return this._lastDebit;
            }
            set
            {
                if ((this._lastDebit != value))
                {
                    IAccountMovement old = this._lastDebit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLastDebitChanging(e);
                    this.OnPropertyChanging("LastDebit", e, _lastDebitReference);
                    this._lastDebit = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLastDebit;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLastDebit;
                    }
                    this.OnLastDebitChanged(e);
                    this.OnPropertyChanged("LastDebit", e, _lastDebitReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AuxiliaryAccountReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/AuxiliaryAcco" +
                            "unt")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PrincipleAmount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PrincipleAmountChanging;
        
        /// <summary>
        /// Gets fired when the PrincipleAmount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PrincipleAmountChanged;
        
        /// <summary>
        /// Gets fired before the Balance property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BalanceChanging;
        
        /// <summary>
        /// Gets fired when the Balance property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BalanceChanged;
        
        /// <summary>
        /// Gets fired before the Due property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DueChanging;
        
        /// <summary>
        /// Gets fired when the Due property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DueChanged;
        
        /// <summary>
        /// Gets fired before the LastCredit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LastCreditChanging;
        
        /// <summary>
        /// Gets fired when the LastCredit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LastCreditChanged;
        
        /// <summary>
        /// Gets fired before the AuxiliaryAgreement property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AuxiliaryAgreementChanging;
        
        /// <summary>
        /// Gets fired when the AuxiliaryAgreement property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AuxiliaryAgreementChanged;
        
        /// <summary>
        /// Gets fired before the LastDebit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LastDebitChanging;
        
        /// <summary>
        /// Gets fired when the LastDebit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LastDebitChanged;
        
        private static ITypedElement RetrievePrincipleAmountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AuxiliaryAccount.ClassInstance)).Resolve("principleAmount")));
        }
        
        /// <summary>
        /// Raises the PrincipleAmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPrincipleAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PrincipleAmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PrincipleAmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPrincipleAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PrincipleAmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBalanceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AuxiliaryAccount.ClassInstance)).Resolve("balance")));
        }
        
        /// <summary>
        /// Raises the BalanceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBalanceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BalanceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BalanceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBalanceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BalanceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePaymentTransactionsReference()
        {
            return ((ITypedElement)(((ModelElement)(AuxiliaryAccount.ClassInstance)).Resolve("PaymentTransactions")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PaymentTransactions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PaymentTransactionsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("PaymentTransactions", e, _paymentTransactionsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PaymentTransactions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PaymentTransactionsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PaymentTransactions", e, _paymentTransactionsReference);
        }
        
        private static ITypedElement RetrieveDueReference()
        {
            return ((ITypedElement)(((ModelElement)(AuxiliaryAccount.ClassInstance)).Resolve("due")));
        }
        
        /// <summary>
        /// Raises the DueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Due property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDue(object sender, System.EventArgs eventArgs)
        {
            this.Due = null;
        }
        
        private static ITypedElement RetrieveLastCreditReference()
        {
            return ((ITypedElement)(((ModelElement)(AuxiliaryAccount.ClassInstance)).Resolve("lastCredit")));
        }
        
        /// <summary>
        /// Raises the LastCreditChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLastCreditChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LastCreditChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LastCreditChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLastCreditChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LastCreditChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LastCredit property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLastCredit(object sender, System.EventArgs eventArgs)
        {
            this.LastCredit = null;
        }
        
        private static ITypedElement RetrieveAuxiliaryAgreementReference()
        {
            return ((ITypedElement)(((ModelElement)(AuxiliaryAccount.ClassInstance)).Resolve("AuxiliaryAgreement")));
        }
        
        /// <summary>
        /// Raises the AuxiliaryAgreementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuxiliaryAgreementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AuxiliaryAgreementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AuxiliaryAgreementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAuxiliaryAgreementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AuxiliaryAgreementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AuxiliaryAgreement property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAuxiliaryAgreement(object sender, System.EventArgs eventArgs)
        {
            this.AuxiliaryAgreement = null;
        }
        
        private static ITypedElement RetrieveChargesReference()
        {
            return ((ITypedElement)(((ModelElement)(AuxiliaryAccount.ClassInstance)).Resolve("Charges")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Charges property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChargesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Charges", e, _chargesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Charges property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChargesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Charges", e, _chargesReference);
        }
        
        private static ITypedElement RetrieveLastDebitReference()
        {
            return ((ITypedElement)(((ModelElement)(AuxiliaryAccount.ClassInstance)).Resolve("lastDebit")));
        }
        
        /// <summary>
        /// Raises the LastDebitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLastDebitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LastDebitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LastDebitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLastDebitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LastDebitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the LastDebit property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLastDebit(object sender, System.EventArgs eventArgs)
        {
            this.LastDebit = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PRINCIPLEAMOUNT"))
            {
                return this.PrincipleAmount;
            }
            if ((attribute == "BALANCE"))
            {
                return this.Balance;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PAYMENTTRANSACTIONS"))
            {
                return this._paymentTransactions;
            }
            if ((feature == "CHARGES"))
            {
                return this._charges;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DUE"))
            {
                this.Due = ((IDue)(value));
                return;
            }
            if ((feature == "LASTCREDIT"))
            {
                this.LastCredit = ((IAccountMovement)(value));
                return;
            }
            if ((feature == "AUXILIARYAGREEMENT"))
            {
                this.AuxiliaryAgreement = ((IAuxiliaryAgreement)(value));
                return;
            }
            if ((feature == "LASTDEBIT"))
            {
                this.LastDebit = ((IAccountMovement)(value));
                return;
            }
            if ((feature == "PRINCIPLEAMOUNT"))
            {
                this.PrincipleAmount = ((float)(value));
                return;
            }
            if ((feature == "BALANCE"))
            {
                this.Balance = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Due"))
            {
                return new DueProxy(this);
            }
            if ((attribute == "LastCredit"))
            {
                return new LastCreditProxy(this);
            }
            if ((attribute == "AuxiliaryAgreement"))
            {
                return new AuxiliaryAgreementProxy(this);
            }
            if ((attribute == "LastDebit"))
            {
                return new LastDebitProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Due"))
            {
                return new DueProxy(this);
            }
            if ((reference == "LastCredit"))
            {
                return new LastCreditProxy(this);
            }
            if ((reference == "AuxiliaryAgreement"))
            {
                return new AuxiliaryAgreementProxy(this);
            }
            if ((reference == "LastDebit"))
            {
                return new LastDebitProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/AuxiliaryAcco" +
                        "unt")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AuxiliaryAccount class
        /// </summary>
        public class AuxiliaryAccountReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AuxiliaryAccount _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AuxiliaryAccountReferencedElementsCollection(AuxiliaryAccount parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.PaymentTransactions.Count);
                    if ((this._parent.Due != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.LastCredit != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AuxiliaryAgreement != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Charges.Count);
                    if ((this._parent.LastDebit != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PaymentTransactions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DueChanged += this.PropagateValueChanges;
                this._parent.LastCreditChanged += this.PropagateValueChanges;
                this._parent.AuxiliaryAgreementChanged += this.PropagateValueChanges;
                this._parent.Charges.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.LastDebitChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PaymentTransactions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DueChanged -= this.PropagateValueChanges;
                this._parent.LastCreditChanged -= this.PropagateValueChanges;
                this._parent.AuxiliaryAgreementChanged -= this.PropagateValueChanges;
                this._parent.Charges.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.LastDebitChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITransaction paymentTransactionsCasted = item.As<ITransaction>();
                if ((paymentTransactionsCasted != null))
                {
                    this._parent.PaymentTransactions.Add(paymentTransactionsCasted);
                }
                if ((this._parent.Due == null))
                {
                    IDue dueCasted = item.As<IDue>();
                    if ((dueCasted != null))
                    {
                        this._parent.Due = dueCasted;
                        return;
                    }
                }
                if ((this._parent.LastCredit == null))
                {
                    IAccountMovement lastCreditCasted = item.As<IAccountMovement>();
                    if ((lastCreditCasted != null))
                    {
                        this._parent.LastCredit = lastCreditCasted;
                        return;
                    }
                }
                if ((this._parent.AuxiliaryAgreement == null))
                {
                    IAuxiliaryAgreement auxiliaryAgreementCasted = item.As<IAuxiliaryAgreement>();
                    if ((auxiliaryAgreementCasted != null))
                    {
                        this._parent.AuxiliaryAgreement = auxiliaryAgreementCasted;
                        return;
                    }
                }
                ICharge chargesCasted = item.As<ICharge>();
                if ((chargesCasted != null))
                {
                    this._parent.Charges.Add(chargesCasted);
                }
                if ((this._parent.LastDebit == null))
                {
                    IAccountMovement lastDebitCasted = item.As<IAccountMovement>();
                    if ((lastDebitCasted != null))
                    {
                        this._parent.LastDebit = lastDebitCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PaymentTransactions.Clear();
                this._parent.Due = null;
                this._parent.LastCredit = null;
                this._parent.AuxiliaryAgreement = null;
                this._parent.Charges.Clear();
                this._parent.LastDebit = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.PaymentTransactions.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Due))
                {
                    return true;
                }
                if ((item == this._parent.LastCredit))
                {
                    return true;
                }
                if ((item == this._parent.AuxiliaryAgreement))
                {
                    return true;
                }
                if (this._parent.Charges.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.LastDebit))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> paymentTransactionsEnumerator = this._parent.PaymentTransactions.GetEnumerator();
                try
                {
                    for (
                    ; paymentTransactionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = paymentTransactionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    paymentTransactionsEnumerator.Dispose();
                }
                if ((this._parent.Due != null))
                {
                    array[arrayIndex] = this._parent.Due;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.LastCredit != null))
                {
                    array[arrayIndex] = this._parent.LastCredit;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AuxiliaryAgreement != null))
                {
                    array[arrayIndex] = this._parent.AuxiliaryAgreement;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> chargesEnumerator = this._parent.Charges.GetEnumerator();
                try
                {
                    for (
                    ; chargesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = chargesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    chargesEnumerator.Dispose();
                }
                if ((this._parent.LastDebit != null))
                {
                    array[arrayIndex] = this._parent.LastDebit;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITransaction transactionItem = item.As<ITransaction>();
                if (((transactionItem != null) 
                            && this._parent.PaymentTransactions.Remove(transactionItem)))
                {
                    return true;
                }
                if ((this._parent.Due == item))
                {
                    this._parent.Due = null;
                    return true;
                }
                if ((this._parent.LastCredit == item))
                {
                    this._parent.LastCredit = null;
                    return true;
                }
                if ((this._parent.AuxiliaryAgreement == item))
                {
                    this._parent.AuxiliaryAgreement = null;
                    return true;
                }
                ICharge chargeItem = item.As<ICharge>();
                if (((chargeItem != null) 
                            && this._parent.Charges.Remove(chargeItem)))
                {
                    return true;
                }
                if ((this._parent.LastDebit == item))
                {
                    this._parent.LastDebit = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PaymentTransactions).Concat(this._parent.Due).Concat(this._parent.LastCredit).Concat(this._parent.AuxiliaryAgreement).Concat(this._parent.Charges).Concat(this._parent.LastDebit).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the principleAmount property
        /// </summary>
        private sealed class PrincipleAmountProxy : ModelPropertyChange<IAuxiliaryAccount, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PrincipleAmountProxy(IAuxiliaryAccount modelElement) : 
                    base(modelElement, "principleAmount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PrincipleAmount;
                }
                set
                {
                    this.ModelElement.PrincipleAmount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the balance property
        /// </summary>
        private sealed class BalanceProxy : ModelPropertyChange<IAuxiliaryAccount, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BalanceProxy(IAuxiliaryAccount modelElement) : 
                    base(modelElement, "balance")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Balance;
                }
                set
                {
                    this.ModelElement.Balance = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the due property
        /// </summary>
        private sealed class DueProxy : ModelPropertyChange<IAuxiliaryAccount, IDue>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DueProxy(IAuxiliaryAccount modelElement) : 
                    base(modelElement, "due")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDue Value
            {
                get
                {
                    return this.ModelElement.Due;
                }
                set
                {
                    this.ModelElement.Due = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lastCredit property
        /// </summary>
        private sealed class LastCreditProxy : ModelPropertyChange<IAuxiliaryAccount, IAccountMovement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LastCreditProxy(IAuxiliaryAccount modelElement) : 
                    base(modelElement, "lastCredit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAccountMovement Value
            {
                get
                {
                    return this.ModelElement.LastCredit;
                }
                set
                {
                    this.ModelElement.LastCredit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AuxiliaryAgreement property
        /// </summary>
        private sealed class AuxiliaryAgreementProxy : ModelPropertyChange<IAuxiliaryAccount, IAuxiliaryAgreement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AuxiliaryAgreementProxy(IAuxiliaryAccount modelElement) : 
                    base(modelElement, "AuxiliaryAgreement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAuxiliaryAgreement Value
            {
                get
                {
                    return this.ModelElement.AuxiliaryAgreement;
                }
                set
                {
                    this.ModelElement.AuxiliaryAgreement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lastDebit property
        /// </summary>
        private sealed class LastDebitProxy : ModelPropertyChange<IAuxiliaryAccount, IAccountMovement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LastDebitProxy(IAuxiliaryAccount modelElement) : 
                    base(modelElement, "lastDebit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAccountMovement Value
            {
                get
                {
                    return this.ModelElement.LastDebit;
                }
                set
                {
                    this.ModelElement.LastDebit = value;
                }
            }
        }
    }
}

