using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering
{
    
    
    /// <summary>
    /// The public interface for Due
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Due))]
    [XmlDefaultImplementationTypeAttribute(typeof(Due))]
    public interface IDue : IModelElement, IElement
    {
        
        /// <summary>
        /// The interest property
        /// </summary>
        float Interest
        {
            get;
            set;
        }
        
        /// <summary>
        /// The principle property
        /// </summary>
        float Principle
        {
            get;
            set;
        }
        
        /// <summary>
        /// The current property
        /// </summary>
        float Current
        {
            get;
            set;
        }
        
        /// <summary>
        /// The arrears property
        /// </summary>
        float Arrears
        {
            get;
            set;
        }
        
        /// <summary>
        /// The charges property
        /// </summary>
        float Charges
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Interest property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InterestChanging;
        
        /// <summary>
        /// Gets fired when the Interest property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InterestChanged;
        
        /// <summary>
        /// Gets fired before the Principle property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PrincipleChanging;
        
        /// <summary>
        /// Gets fired when the Principle property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PrincipleChanged;
        
        /// <summary>
        /// Gets fired before the Current property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CurrentChanging;
        
        /// <summary>
        /// Gets fired when the Current property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CurrentChanged;
        
        /// <summary>
        /// Gets fired before the Arrears property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ArrearsChanging;
        
        /// <summary>
        /// Gets fired when the Arrears property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ArrearsChanged;
        
        /// <summary>
        /// Gets fired before the Charges property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ChargesChanging;
        
        /// <summary>
        /// Gets fired when the Charges property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ChargesChanged;
    }
}

