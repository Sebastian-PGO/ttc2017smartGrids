using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering
{
    
    
    /// <summary>
    /// The default implementation of the BankAccountDetail class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#PaymentMetering")]
    [XmlNamespacePrefixAttribute("cimPaymentMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/BankAccountDe" +
        "tail")]
    [DebuggerDisplayAttribute("BankAccountDetail {UUID}")]
    public partial class BankAccountDetail : Element, IBankAccountDetail, IModelElement
    {
        
        /// <summary>
        /// The backing field for the BankName property
        /// </summary>
        private string _bankName;
        
        private static Lazy<ITypedElement> _bankNameAttribute = new Lazy<ITypedElement>(RetrieveBankNameAttribute);
        
        /// <summary>
        /// The backing field for the AccountNumber property
        /// </summary>
        private string _accountNumber;
        
        private static Lazy<ITypedElement> _accountNumberAttribute = new Lazy<ITypedElement>(RetrieveAccountNumberAttribute);
        
        /// <summary>
        /// The backing field for the HolderID property
        /// </summary>
        private string _holderID;
        
        private static Lazy<ITypedElement> _holderIDAttribute = new Lazy<ITypedElement>(RetrieveHolderIDAttribute);
        
        /// <summary>
        /// The backing field for the BranchCode property
        /// </summary>
        private string _branchCode;
        
        private static Lazy<ITypedElement> _branchCodeAttribute = new Lazy<ITypedElement>(RetrieveBranchCodeAttribute);
        
        /// <summary>
        /// The backing field for the HolderName property
        /// </summary>
        private string _holderName;
        
        private static Lazy<ITypedElement> _holderNameAttribute = new Lazy<ITypedElement>(RetrieveHolderNameAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The bankName property
        /// </summary>
        [XmlElementNameAttribute("bankName")]
        [XmlAttributeAttribute(true)]
        public virtual string BankName
        {
            get
            {
                return this._bankName;
            }
            set
            {
                if ((this._bankName != value))
                {
                    string old = this._bankName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBankNameChanging(e);
                    this.OnPropertyChanging("BankName", e, _bankNameAttribute);
                    this._bankName = value;
                    this.OnBankNameChanged(e);
                    this.OnPropertyChanged("BankName", e, _bankNameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The accountNumber property
        /// </summary>
        [XmlElementNameAttribute("accountNumber")]
        [XmlAttributeAttribute(true)]
        public virtual string AccountNumber
        {
            get
            {
                return this._accountNumber;
            }
            set
            {
                if ((this._accountNumber != value))
                {
                    string old = this._accountNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAccountNumberChanging(e);
                    this.OnPropertyChanging("AccountNumber", e, _accountNumberAttribute);
                    this._accountNumber = value;
                    this.OnAccountNumberChanged(e);
                    this.OnPropertyChanged("AccountNumber", e, _accountNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The holderID property
        /// </summary>
        [XmlElementNameAttribute("holderID")]
        [XmlAttributeAttribute(true)]
        public virtual string HolderID
        {
            get
            {
                return this._holderID;
            }
            set
            {
                if ((this._holderID != value))
                {
                    string old = this._holderID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHolderIDChanging(e);
                    this.OnPropertyChanging("HolderID", e, _holderIDAttribute);
                    this._holderID = value;
                    this.OnHolderIDChanged(e);
                    this.OnPropertyChanged("HolderID", e, _holderIDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The branchCode property
        /// </summary>
        [XmlElementNameAttribute("branchCode")]
        [XmlAttributeAttribute(true)]
        public virtual string BranchCode
        {
            get
            {
                return this._branchCode;
            }
            set
            {
                if ((this._branchCode != value))
                {
                    string old = this._branchCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBranchCodeChanging(e);
                    this.OnPropertyChanging("BranchCode", e, _branchCodeAttribute);
                    this._branchCode = value;
                    this.OnBranchCodeChanged(e);
                    this.OnPropertyChanged("BranchCode", e, _branchCodeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The holderName property
        /// </summary>
        [XmlElementNameAttribute("holderName")]
        [XmlAttributeAttribute(true)]
        public virtual string HolderName
        {
            get
            {
                return this._holderName;
            }
            set
            {
                if ((this._holderName != value))
                {
                    string old = this._holderName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHolderNameChanging(e);
                    this.OnPropertyChanging("HolderName", e, _holderNameAttribute);
                    this._holderName = value;
                    this.OnHolderNameChanged(e);
                    this.OnPropertyChanged("HolderName", e, _holderNameAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/BankAccountDe" +
                            "tail")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the BankName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BankNameChanging;
        
        /// <summary>
        /// Gets fired when the BankName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BankNameChanged;
        
        /// <summary>
        /// Gets fired before the AccountNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccountNumberChanging;
        
        /// <summary>
        /// Gets fired when the AccountNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccountNumberChanged;
        
        /// <summary>
        /// Gets fired before the HolderID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HolderIDChanging;
        
        /// <summary>
        /// Gets fired when the HolderID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HolderIDChanged;
        
        /// <summary>
        /// Gets fired before the BranchCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BranchCodeChanging;
        
        /// <summary>
        /// Gets fired when the BranchCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BranchCodeChanged;
        
        /// <summary>
        /// Gets fired before the HolderName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HolderNameChanging;
        
        /// <summary>
        /// Gets fired when the HolderName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HolderNameChanged;
        
        private static ITypedElement RetrieveBankNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BankAccountDetail.ClassInstance)).Resolve("bankName")));
        }
        
        /// <summary>
        /// Raises the BankNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBankNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BankNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BankNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBankNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BankNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAccountNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BankAccountDetail.ClassInstance)).Resolve("accountNumber")));
        }
        
        /// <summary>
        /// Raises the AccountNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccountNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccountNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AccountNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccountNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccountNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveHolderIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BankAccountDetail.ClassInstance)).Resolve("holderID")));
        }
        
        /// <summary>
        /// Raises the HolderIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHolderIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HolderIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HolderIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHolderIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HolderIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBranchCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BankAccountDetail.ClassInstance)).Resolve("branchCode")));
        }
        
        /// <summary>
        /// Raises the BranchCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBranchCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BranchCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BranchCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBranchCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BranchCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveHolderNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(BankAccountDetail.ClassInstance)).Resolve("holderName")));
        }
        
        /// <summary>
        /// Raises the HolderNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHolderNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HolderNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HolderNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHolderNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HolderNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "BANKNAME"))
            {
                return this.BankName;
            }
            if ((attribute == "ACCOUNTNUMBER"))
            {
                return this.AccountNumber;
            }
            if ((attribute == "HOLDERID"))
            {
                return this.HolderID;
            }
            if ((attribute == "BRANCHCODE"))
            {
                return this.BranchCode;
            }
            if ((attribute == "HOLDERNAME"))
            {
                return this.HolderName;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "BANKNAME"))
            {
                this.BankName = ((string)(value));
                return;
            }
            if ((feature == "ACCOUNTNUMBER"))
            {
                this.AccountNumber = ((string)(value));
                return;
            }
            if ((feature == "HOLDERID"))
            {
                this.HolderID = ((string)(value));
                return;
            }
            if ((feature == "BRANCHCODE"))
            {
                this.BranchCode = ((string)(value));
                return;
            }
            if ((feature == "HOLDERNAME"))
            {
                this.HolderName = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/BankAccountDe" +
                        "tail")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the bankName property
        /// </summary>
        private sealed class BankNameProxy : ModelPropertyChange<IBankAccountDetail, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BankNameProxy(IBankAccountDetail modelElement) : 
                    base(modelElement, "bankName")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.BankName;
                }
                set
                {
                    this.ModelElement.BankName = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the accountNumber property
        /// </summary>
        private sealed class AccountNumberProxy : ModelPropertyChange<IBankAccountDetail, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AccountNumberProxy(IBankAccountDetail modelElement) : 
                    base(modelElement, "accountNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AccountNumber;
                }
                set
                {
                    this.ModelElement.AccountNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the holderID property
        /// </summary>
        private sealed class HolderIDProxy : ModelPropertyChange<IBankAccountDetail, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HolderIDProxy(IBankAccountDetail modelElement) : 
                    base(modelElement, "holderID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.HolderID;
                }
                set
                {
                    this.ModelElement.HolderID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the branchCode property
        /// </summary>
        private sealed class BranchCodeProxy : ModelPropertyChange<IBankAccountDetail, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BranchCodeProxy(IBankAccountDetail modelElement) : 
                    base(modelElement, "branchCode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.BranchCode;
                }
                set
                {
                    this.ModelElement.BranchCode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the holderName property
        /// </summary>
        private sealed class HolderNameProxy : ModelPropertyChange<IBankAccountDetail, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HolderNameProxy(IBankAccountDetail modelElement) : 
                    base(modelElement, "holderName")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.HolderName;
                }
                set
                {
                    this.ModelElement.HolderName = value;
                }
            }
        }
    }
}

