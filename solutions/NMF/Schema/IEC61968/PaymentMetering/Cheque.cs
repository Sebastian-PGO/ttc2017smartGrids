using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering
{
    
    
    /// <summary>
    /// The default implementation of the Cheque class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#PaymentMetering")]
    [XmlNamespacePrefixAttribute("cimPaymentMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/Cheque")]
    [DebuggerDisplayAttribute("Cheque {UUID}")]
    public partial class Cheque : Element, ICheque, IModelElement
    {
        
        /// <summary>
        /// The backing field for the MicrNumber property
        /// </summary>
        private string _micrNumber;
        
        private static Lazy<ITypedElement> _micrNumberAttribute = new Lazy<ITypedElement>(RetrieveMicrNumberAttribute);
        
        /// <summary>
        /// The backing field for the Date property
        /// </summary>
        private string _date;
        
        private static Lazy<ITypedElement> _dateAttribute = new Lazy<ITypedElement>(RetrieveDateAttribute);
        
        /// <summary>
        /// The backing field for the ChequeNumber property
        /// </summary>
        private string _chequeNumber;
        
        private static Lazy<ITypedElement> _chequeNumberAttribute = new Lazy<ITypedElement>(RetrieveChequeNumberAttribute);
        
        /// <summary>
        /// The backing field for the Kind property
        /// </summary>
        private Nullable<ChequeKind> _kind;
        
        private static Lazy<ITypedElement> _kindAttribute = new Lazy<ITypedElement>(RetrieveKindAttribute);
        
        private static Lazy<ITypedElement> _bankAccountDetailReference = new Lazy<ITypedElement>(RetrieveBankAccountDetailReference);
        
        /// <summary>
        /// The backing field for the BankAccountDetail property
        /// </summary>
        private IBankAccountDetail _bankAccountDetail;
        
        private static Lazy<ITypedElement> _tenderReference = new Lazy<ITypedElement>(RetrieveTenderReference);
        
        /// <summary>
        /// The backing field for the Tender property
        /// </summary>
        private ITender _tender;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The micrNumber property
        /// </summary>
        [XmlElementNameAttribute("micrNumber")]
        [XmlAttributeAttribute(true)]
        public virtual string MicrNumber
        {
            get
            {
                return this._micrNumber;
            }
            set
            {
                if ((this._micrNumber != value))
                {
                    string old = this._micrNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMicrNumberChanging(e);
                    this.OnPropertyChanging("MicrNumber", e, _micrNumberAttribute);
                    this._micrNumber = value;
                    this.OnMicrNumberChanged(e);
                    this.OnPropertyChanged("MicrNumber", e, _micrNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The date property
        /// </summary>
        [XmlElementNameAttribute("date")]
        [XmlAttributeAttribute(true)]
        public virtual string Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    string old = this._date;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateChanging(e);
                    this.OnPropertyChanging("Date", e, _dateAttribute);
                    this._date = value;
                    this.OnDateChanged(e);
                    this.OnPropertyChanged("Date", e, _dateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The chequeNumber property
        /// </summary>
        [XmlElementNameAttribute("chequeNumber")]
        [XmlAttributeAttribute(true)]
        public virtual string ChequeNumber
        {
            get
            {
                return this._chequeNumber;
            }
            set
            {
                if ((this._chequeNumber != value))
                {
                    string old = this._chequeNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnChequeNumberChanging(e);
                    this.OnPropertyChanging("ChequeNumber", e, _chequeNumberAttribute);
                    this._chequeNumber = value;
                    this.OnChequeNumberChanged(e);
                    this.OnPropertyChanged("ChequeNumber", e, _chequeNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The kind property
        /// </summary>
        [XmlElementNameAttribute("kind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<ChequeKind> Kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                if ((this._kind != value))
                {
                    Nullable<ChequeKind> old = this._kind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKindChanging(e);
                    this.OnPropertyChanging("Kind", e, _kindAttribute);
                    this._kind = value;
                    this.OnKindChanged(e);
                    this.OnPropertyChanged("Kind", e, _kindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The bankAccountDetail property
        /// </summary>
        [XmlElementNameAttribute("bankAccountDetail")]
        [XmlAttributeAttribute(true)]
        public virtual IBankAccountDetail BankAccountDetail
        {
            get
            {
                return this._bankAccountDetail;
            }
            set
            {
                if ((this._bankAccountDetail != value))
                {
                    IBankAccountDetail old = this._bankAccountDetail;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBankAccountDetailChanging(e);
                    this.OnPropertyChanging("BankAccountDetail", e, _bankAccountDetailReference);
                    this._bankAccountDetail = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBankAccountDetail;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBankAccountDetail;
                    }
                    this.OnBankAccountDetailChanged(e);
                    this.OnPropertyChanged("BankAccountDetail", e, _bankAccountDetailReference);
                }
            }
        }
        
        /// <summary>
        /// The Tender property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Cheque")]
        public virtual ITender Tender
        {
            get
            {
                return this._tender;
            }
            set
            {
                if ((this._tender != value))
                {
                    ITender old = this._tender;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTenderChanging(e);
                    this.OnPropertyChanging("Tender", e, _tenderReference);
                    this._tender = value;
                    if ((old != null))
                    {
                        old.Cheque = null;
                        old.Deleted -= this.OnResetTender;
                    }
                    if ((value != null))
                    {
                        value.Cheque = this;
                        value.Deleted += this.OnResetTender;
                    }
                    this.OnTenderChanged(e);
                    this.OnPropertyChanged("Tender", e, _tenderReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ChequeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/Cheque")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the MicrNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MicrNumberChanging;
        
        /// <summary>
        /// Gets fired when the MicrNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MicrNumberChanged;
        
        /// <summary>
        /// Gets fired before the Date property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateChanging;
        
        /// <summary>
        /// Gets fired when the Date property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateChanged;
        
        /// <summary>
        /// Gets fired before the ChequeNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChequeNumberChanging;
        
        /// <summary>
        /// Gets fired when the ChequeNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChequeNumberChanged;
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        /// <summary>
        /// Gets fired before the BankAccountDetail property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BankAccountDetailChanging;
        
        /// <summary>
        /// Gets fired when the BankAccountDetail property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BankAccountDetailChanged;
        
        /// <summary>
        /// Gets fired before the Tender property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TenderChanging;
        
        /// <summary>
        /// Gets fired when the Tender property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TenderChanged;
        
        private static ITypedElement RetrieveMicrNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Cheque.ClassInstance)).Resolve("micrNumber")));
        }
        
        /// <summary>
        /// Raises the MicrNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMicrNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MicrNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MicrNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMicrNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MicrNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Cheque.ClassInstance)).Resolve("date")));
        }
        
        /// <summary>
        /// Raises the DateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveChequeNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Cheque.ClassInstance)).Resolve("chequeNumber")));
        }
        
        /// <summary>
        /// Raises the ChequeNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChequeNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChequeNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ChequeNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChequeNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChequeNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Cheque.ClassInstance)).Resolve("kind")));
        }
        
        /// <summary>
        /// Raises the KindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBankAccountDetailReference()
        {
            return ((ITypedElement)(((ModelElement)(Cheque.ClassInstance)).Resolve("bankAccountDetail")));
        }
        
        /// <summary>
        /// Raises the BankAccountDetailChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBankAccountDetailChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BankAccountDetailChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BankAccountDetailChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBankAccountDetailChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BankAccountDetailChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BankAccountDetail property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBankAccountDetail(object sender, System.EventArgs eventArgs)
        {
            this.BankAccountDetail = null;
        }
        
        private static ITypedElement RetrieveTenderReference()
        {
            return ((ITypedElement)(((ModelElement)(Cheque.ClassInstance)).Resolve("Tender")));
        }
        
        /// <summary>
        /// Raises the TenderChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTenderChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TenderChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TenderChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTenderChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TenderChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Tender property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTender(object sender, System.EventArgs eventArgs)
        {
            this.Tender = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "MICRNUMBER"))
            {
                return this.MicrNumber;
            }
            if ((attribute == "DATE"))
            {
                return this.Date;
            }
            if ((attribute == "CHEQUENUMBER"))
            {
                return this.ChequeNumber;
            }
            if ((attribute == "KIND"))
            {
                return this.Kind;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "BANKACCOUNTDETAIL"))
            {
                this.BankAccountDetail = ((IBankAccountDetail)(value));
                return;
            }
            if ((feature == "TENDER"))
            {
                this.Tender = ((ITender)(value));
                return;
            }
            if ((feature == "MICRNUMBER"))
            {
                this.MicrNumber = ((string)(value));
                return;
            }
            if ((feature == "DATE"))
            {
                this.Date = ((string)(value));
                return;
            }
            if ((feature == "CHEQUENUMBER"))
            {
                this.ChequeNumber = ((string)(value));
                return;
            }
            if ((feature == "KIND"))
            {
                this.Kind = ((ChequeKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "BankAccountDetail"))
            {
                return new BankAccountDetailProxy(this);
            }
            if ((attribute == "Tender"))
            {
                return new TenderProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "BankAccountDetail"))
            {
                return new BankAccountDetailProxy(this);
            }
            if ((reference == "Tender"))
            {
                return new TenderProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/Cheque")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Cheque class
        /// </summary>
        public class ChequeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Cheque _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ChequeReferencedElementsCollection(Cheque parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.BankAccountDetail != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Tender != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.BankAccountDetailChanged += this.PropagateValueChanges;
                this._parent.TenderChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.BankAccountDetailChanged -= this.PropagateValueChanges;
                this._parent.TenderChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.BankAccountDetail == null))
                {
                    IBankAccountDetail bankAccountDetailCasted = item.As<IBankAccountDetail>();
                    if ((bankAccountDetailCasted != null))
                    {
                        this._parent.BankAccountDetail = bankAccountDetailCasted;
                        return;
                    }
                }
                if ((this._parent.Tender == null))
                {
                    ITender tenderCasted = item.As<ITender>();
                    if ((tenderCasted != null))
                    {
                        this._parent.Tender = tenderCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.BankAccountDetail = null;
                this._parent.Tender = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.BankAccountDetail))
                {
                    return true;
                }
                if ((item == this._parent.Tender))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.BankAccountDetail != null))
                {
                    array[arrayIndex] = this._parent.BankAccountDetail;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Tender != null))
                {
                    array[arrayIndex] = this._parent.Tender;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.BankAccountDetail == item))
                {
                    this._parent.BankAccountDetail = null;
                    return true;
                }
                if ((this._parent.Tender == item))
                {
                    this._parent.Tender = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.BankAccountDetail).Concat(this._parent.Tender).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the micrNumber property
        /// </summary>
        private sealed class MicrNumberProxy : ModelPropertyChange<ICheque, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MicrNumberProxy(ICheque modelElement) : 
                    base(modelElement, "micrNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.MicrNumber;
                }
                set
                {
                    this.ModelElement.MicrNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the date property
        /// </summary>
        private sealed class DateProxy : ModelPropertyChange<ICheque, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateProxy(ICheque modelElement) : 
                    base(modelElement, "date")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Date;
                }
                set
                {
                    this.ModelElement.Date = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the chequeNumber property
        /// </summary>
        private sealed class ChequeNumberProxy : ModelPropertyChange<ICheque, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ChequeNumberProxy(ICheque modelElement) : 
                    base(modelElement, "chequeNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ChequeNumber;
                }
                set
                {
                    this.ModelElement.ChequeNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kind property
        /// </summary>
        private sealed class KindProxy : ModelPropertyChange<ICheque, Nullable<ChequeKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KindProxy(ICheque modelElement) : 
                    base(modelElement, "kind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<ChequeKind> Value
            {
                get
                {
                    return this.ModelElement.Kind;
                }
                set
                {
                    this.ModelElement.Kind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the bankAccountDetail property
        /// </summary>
        private sealed class BankAccountDetailProxy : ModelPropertyChange<ICheque, IBankAccountDetail>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BankAccountDetailProxy(ICheque modelElement) : 
                    base(modelElement, "bankAccountDetail")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBankAccountDetail Value
            {
                get
                {
                    return this.ModelElement.BankAccountDetail;
                }
                set
                {
                    this.ModelElement.BankAccountDetail = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Tender property
        /// </summary>
        private sealed class TenderProxy : ModelPropertyChange<ICheque, ITender>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TenderProxy(ICheque modelElement) : 
                    base(modelElement, "Tender")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITender Value
            {
                get
                {
                    return this.ModelElement.Tender;
                }
                set
                {
                    this.ModelElement.Tender = value;
                }
            }
        }
    }
}

