using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering
{
    
    
    /// <summary>
    /// The public interface for Receipt
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Receipt))]
    [XmlDefaultImplementationTypeAttribute(typeof(Receipt))]
    public interface IReceipt : IModelElement, IIdentifiedObject
    {
        
        /// <summary>
        /// The isBankable property
        /// </summary>
        bool IsBankable
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Transactions property
        /// </summary>
        IOrderedSetExpression<ITransaction> Transactions
        {
            get;
        }
        
        /// <summary>
        /// The CashierShift property
        /// </summary>
        ICashierShift CashierShift
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Tenders property
        /// </summary>
        IOrderedSetExpression<ITender> Tenders
        {
            get;
        }
        
        /// <summary>
        /// The VendorShift property
        /// </summary>
        IVendorShift VendorShift
        {
            get;
            set;
        }
        
        /// <summary>
        /// The line property
        /// </summary>
        ILineDetail Line
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the IsBankable property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsBankableChanging;
        
        /// <summary>
        /// Gets fired when the IsBankable property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsBankableChanged;
        
        /// <summary>
        /// Gets fired before the CashierShift property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CashierShiftChanging;
        
        /// <summary>
        /// Gets fired when the CashierShift property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CashierShiftChanged;
        
        /// <summary>
        /// Gets fired before the VendorShift property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VendorShiftChanging;
        
        /// <summary>
        /// Gets fired when the VendorShift property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VendorShiftChanged;
        
        /// <summary>
        /// Gets fired before the Line property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LineChanging;
        
        /// <summary>
        /// Gets fired when the Line property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LineChanged;
    }
}

