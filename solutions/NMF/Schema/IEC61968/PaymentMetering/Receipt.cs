using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering
{
    
    
    /// <summary>
    /// The default implementation of the Receipt class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#PaymentMetering")]
    [XmlNamespacePrefixAttribute("cimPaymentMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/Receipt")]
    [DebuggerDisplayAttribute("Receipt {UUID}")]
    public partial class Receipt : IdentifiedObject, IReceipt, IModelElement
    {
        
        /// <summary>
        /// The backing field for the IsBankable property
        /// </summary>
        private bool _isBankable;
        
        private static Lazy<ITypedElement> _isBankableAttribute = new Lazy<ITypedElement>(RetrieveIsBankableAttribute);
        
        private static Lazy<ITypedElement> _transactionsReference = new Lazy<ITypedElement>(RetrieveTransactionsReference);
        
        /// <summary>
        /// The backing field for the Transactions property
        /// </summary>
        private ReceiptTransactionsCollection _transactions;
        
        private static Lazy<ITypedElement> _cashierShiftReference = new Lazy<ITypedElement>(RetrieveCashierShiftReference);
        
        /// <summary>
        /// The backing field for the CashierShift property
        /// </summary>
        private ICashierShift _cashierShift;
        
        private static Lazy<ITypedElement> _tendersReference = new Lazy<ITypedElement>(RetrieveTendersReference);
        
        /// <summary>
        /// The backing field for the Tenders property
        /// </summary>
        private ReceiptTendersCollection _tenders;
        
        private static Lazy<ITypedElement> _vendorShiftReference = new Lazy<ITypedElement>(RetrieveVendorShiftReference);
        
        /// <summary>
        /// The backing field for the VendorShift property
        /// </summary>
        private IVendorShift _vendorShift;
        
        private static Lazy<ITypedElement> _lineReference = new Lazy<ITypedElement>(RetrieveLineReference);
        
        /// <summary>
        /// The backing field for the Line property
        /// </summary>
        private ILineDetail _line;
        
        private static IClass _classInstance;
        
        public Receipt()
        {
            this._transactions = new ReceiptTransactionsCollection(this);
            this._transactions.CollectionChanging += this.TransactionsCollectionChanging;
            this._transactions.CollectionChanged += this.TransactionsCollectionChanged;
            this._tenders = new ReceiptTendersCollection(this);
            this._tenders.CollectionChanging += this.TendersCollectionChanging;
            this._tenders.CollectionChanged += this.TendersCollectionChanged;
        }
        
        /// <summary>
        /// The isBankable property
        /// </summary>
        [XmlElementNameAttribute("isBankable")]
        [XmlAttributeAttribute(true)]
        public virtual bool IsBankable
        {
            get
            {
                return this._isBankable;
            }
            set
            {
                if ((this._isBankable != value))
                {
                    bool old = this._isBankable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsBankableChanging(e);
                    this.OnPropertyChanging("IsBankable", e, _isBankableAttribute);
                    this._isBankable = value;
                    this.OnIsBankableChanged(e);
                    this.OnPropertyChanged("IsBankable", e, _isBankableAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Transactions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Receipt")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransaction> Transactions
        {
            get
            {
                return this._transactions;
            }
        }
        
        /// <summary>
        /// The CashierShift property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Receipts")]
        public virtual ICashierShift CashierShift
        {
            get
            {
                return this._cashierShift;
            }
            set
            {
                if ((this._cashierShift != value))
                {
                    ICashierShift old = this._cashierShift;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCashierShiftChanging(e);
                    this.OnPropertyChanging("CashierShift", e, _cashierShiftReference);
                    this._cashierShift = value;
                    if ((old != null))
                    {
                        old.Receipts.Remove(this);
                        old.Deleted -= this.OnResetCashierShift;
                    }
                    if ((value != null))
                    {
                        value.Receipts.Add(this);
                        value.Deleted += this.OnResetCashierShift;
                    }
                    this.OnCashierShiftChanged(e);
                    this.OnPropertyChanged("CashierShift", e, _cashierShiftReference);
                }
            }
        }
        
        /// <summary>
        /// The Tenders property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Receipt")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITender> Tenders
        {
            get
            {
                return this._tenders;
            }
        }
        
        /// <summary>
        /// The VendorShift property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Receipts")]
        public virtual IVendorShift VendorShift
        {
            get
            {
                return this._vendorShift;
            }
            set
            {
                if ((this._vendorShift != value))
                {
                    IVendorShift old = this._vendorShift;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVendorShiftChanging(e);
                    this.OnPropertyChanging("VendorShift", e, _vendorShiftReference);
                    this._vendorShift = value;
                    if ((old != null))
                    {
                        old.Receipts.Remove(this);
                        old.Deleted -= this.OnResetVendorShift;
                    }
                    if ((value != null))
                    {
                        value.Receipts.Add(this);
                        value.Deleted += this.OnResetVendorShift;
                    }
                    this.OnVendorShiftChanged(e);
                    this.OnPropertyChanged("VendorShift", e, _vendorShiftReference);
                }
            }
        }
        
        /// <summary>
        /// The line property
        /// </summary>
        [XmlElementNameAttribute("line")]
        [XmlAttributeAttribute(true)]
        public virtual ILineDetail Line
        {
            get
            {
                return this._line;
            }
            set
            {
                if ((this._line != value))
                {
                    ILineDetail old = this._line;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLineChanging(e);
                    this.OnPropertyChanging("Line", e, _lineReference);
                    this._line = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLine;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLine;
                    }
                    this.OnLineChanged(e);
                    this.OnPropertyChanged("Line", e, _lineReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ReceiptReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/Receipt")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the IsBankable property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsBankableChanging;
        
        /// <summary>
        /// Gets fired when the IsBankable property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsBankableChanged;
        
        /// <summary>
        /// Gets fired before the CashierShift property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CashierShiftChanging;
        
        /// <summary>
        /// Gets fired when the CashierShift property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CashierShiftChanged;
        
        /// <summary>
        /// Gets fired before the VendorShift property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VendorShiftChanging;
        
        /// <summary>
        /// Gets fired when the VendorShift property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VendorShiftChanged;
        
        /// <summary>
        /// Gets fired before the Line property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LineChanging;
        
        /// <summary>
        /// Gets fired when the Line property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LineChanged;
        
        private static ITypedElement RetrieveIsBankableAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Receipt.ClassInstance)).Resolve("isBankable")));
        }
        
        /// <summary>
        /// Raises the IsBankableChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsBankableChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsBankableChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsBankableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsBankableChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsBankableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransactionsReference()
        {
            return ((ITypedElement)(((ModelElement)(Receipt.ClassInstance)).Resolve("Transactions")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Transactions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransactionsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Transactions", e, _transactionsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Transactions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TransactionsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Transactions", e, _transactionsReference);
        }
        
        private static ITypedElement RetrieveCashierShiftReference()
        {
            return ((ITypedElement)(((ModelElement)(Receipt.ClassInstance)).Resolve("CashierShift")));
        }
        
        /// <summary>
        /// Raises the CashierShiftChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCashierShiftChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CashierShiftChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CashierShiftChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCashierShiftChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CashierShiftChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CashierShift property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCashierShift(object sender, System.EventArgs eventArgs)
        {
            this.CashierShift = null;
        }
        
        private static ITypedElement RetrieveTendersReference()
        {
            return ((ITypedElement)(((ModelElement)(Receipt.ClassInstance)).Resolve("Tenders")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Tenders property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TendersCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Tenders", e, _tendersReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Tenders property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TendersCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Tenders", e, _tendersReference);
        }
        
        private static ITypedElement RetrieveVendorShiftReference()
        {
            return ((ITypedElement)(((ModelElement)(Receipt.ClassInstance)).Resolve("VendorShift")));
        }
        
        /// <summary>
        /// Raises the VendorShiftChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVendorShiftChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VendorShiftChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VendorShiftChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVendorShiftChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VendorShiftChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the VendorShift property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetVendorShift(object sender, System.EventArgs eventArgs)
        {
            this.VendorShift = null;
        }
        
        private static ITypedElement RetrieveLineReference()
        {
            return ((ITypedElement)(((ModelElement)(Receipt.ClassInstance)).Resolve("line")));
        }
        
        /// <summary>
        /// Raises the LineChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLineChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LineChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LineChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLineChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LineChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Line property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLine(object sender, System.EventArgs eventArgs)
        {
            this.Line = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISBANKABLE"))
            {
                return this.IsBankable;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "TRANSACTIONS"))
            {
                return this._transactions;
            }
            if ((feature == "TENDERS"))
            {
                return this._tenders;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CASHIERSHIFT"))
            {
                this.CashierShift = ((ICashierShift)(value));
                return;
            }
            if ((feature == "VENDORSHIFT"))
            {
                this.VendorShift = ((IVendorShift)(value));
                return;
            }
            if ((feature == "LINE"))
            {
                this.Line = ((ILineDetail)(value));
                return;
            }
            if ((feature == "ISBANKABLE"))
            {
                this.IsBankable = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CashierShift"))
            {
                return new CashierShiftProxy(this);
            }
            if ((attribute == "VendorShift"))
            {
                return new VendorShiftProxy(this);
            }
            if ((attribute == "Line"))
            {
                return new LineProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CashierShift"))
            {
                return new CashierShiftProxy(this);
            }
            if ((reference == "VendorShift"))
            {
                return new VendorShiftProxy(this);
            }
            if ((reference == "Line"))
            {
                return new LineProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/Receipt")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Receipt class
        /// </summary>
        public class ReceiptReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Receipt _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ReceiptReferencedElementsCollection(Receipt parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Transactions.Count);
                    if ((this._parent.CashierShift != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Tenders.Count);
                    if ((this._parent.VendorShift != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Line != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Transactions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CashierShiftChanged += this.PropagateValueChanges;
                this._parent.Tenders.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.VendorShiftChanged += this.PropagateValueChanges;
                this._parent.LineChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Transactions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CashierShiftChanged -= this.PropagateValueChanges;
                this._parent.Tenders.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.VendorShiftChanged -= this.PropagateValueChanges;
                this._parent.LineChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITransaction transactionsCasted = item.As<ITransaction>();
                if ((transactionsCasted != null))
                {
                    this._parent.Transactions.Add(transactionsCasted);
                }
                if ((this._parent.CashierShift == null))
                {
                    ICashierShift cashierShiftCasted = item.As<ICashierShift>();
                    if ((cashierShiftCasted != null))
                    {
                        this._parent.CashierShift = cashierShiftCasted;
                        return;
                    }
                }
                ITender tendersCasted = item.As<ITender>();
                if ((tendersCasted != null))
                {
                    this._parent.Tenders.Add(tendersCasted);
                }
                if ((this._parent.VendorShift == null))
                {
                    IVendorShift vendorShiftCasted = item.As<IVendorShift>();
                    if ((vendorShiftCasted != null))
                    {
                        this._parent.VendorShift = vendorShiftCasted;
                        return;
                    }
                }
                if ((this._parent.Line == null))
                {
                    ILineDetail lineCasted = item.As<ILineDetail>();
                    if ((lineCasted != null))
                    {
                        this._parent.Line = lineCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Transactions.Clear();
                this._parent.CashierShift = null;
                this._parent.Tenders.Clear();
                this._parent.VendorShift = null;
                this._parent.Line = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Transactions.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.CashierShift))
                {
                    return true;
                }
                if (this._parent.Tenders.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.VendorShift))
                {
                    return true;
                }
                if ((item == this._parent.Line))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> transactionsEnumerator = this._parent.Transactions.GetEnumerator();
                try
                {
                    for (
                    ; transactionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = transactionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    transactionsEnumerator.Dispose();
                }
                if ((this._parent.CashierShift != null))
                {
                    array[arrayIndex] = this._parent.CashierShift;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> tendersEnumerator = this._parent.Tenders.GetEnumerator();
                try
                {
                    for (
                    ; tendersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = tendersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    tendersEnumerator.Dispose();
                }
                if ((this._parent.VendorShift != null))
                {
                    array[arrayIndex] = this._parent.VendorShift;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Line != null))
                {
                    array[arrayIndex] = this._parent.Line;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITransaction transactionItem = item.As<ITransaction>();
                if (((transactionItem != null) 
                            && this._parent.Transactions.Remove(transactionItem)))
                {
                    return true;
                }
                if ((this._parent.CashierShift == item))
                {
                    this._parent.CashierShift = null;
                    return true;
                }
                ITender tenderItem = item.As<ITender>();
                if (((tenderItem != null) 
                            && this._parent.Tenders.Remove(tenderItem)))
                {
                    return true;
                }
                if ((this._parent.VendorShift == item))
                {
                    this._parent.VendorShift = null;
                    return true;
                }
                if ((this._parent.Line == item))
                {
                    this._parent.Line = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Transactions).Concat(this._parent.CashierShift).Concat(this._parent.Tenders).Concat(this._parent.VendorShift).Concat(this._parent.Line).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isBankable property
        /// </summary>
        private sealed class IsBankableProxy : ModelPropertyChange<IReceipt, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsBankableProxy(IReceipt modelElement) : 
                    base(modelElement, "isBankable")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsBankable;
                }
                set
                {
                    this.ModelElement.IsBankable = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CashierShift property
        /// </summary>
        private sealed class CashierShiftProxy : ModelPropertyChange<IReceipt, ICashierShift>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CashierShiftProxy(IReceipt modelElement) : 
                    base(modelElement, "CashierShift")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICashierShift Value
            {
                get
                {
                    return this.ModelElement.CashierShift;
                }
                set
                {
                    this.ModelElement.CashierShift = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the VendorShift property
        /// </summary>
        private sealed class VendorShiftProxy : ModelPropertyChange<IReceipt, IVendorShift>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VendorShiftProxy(IReceipt modelElement) : 
                    base(modelElement, "VendorShift")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IVendorShift Value
            {
                get
                {
                    return this.ModelElement.VendorShift;
                }
                set
                {
                    this.ModelElement.VendorShift = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the line property
        /// </summary>
        private sealed class LineProxy : ModelPropertyChange<IReceipt, ILineDetail>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LineProxy(IReceipt modelElement) : 
                    base(modelElement, "line")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ILineDetail Value
            {
                get
                {
                    return this.ModelElement.Line;
                }
                set
                {
                    this.ModelElement.Line = value;
                }
            }
        }
    }
}

