//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering
{
    
    
    /// <summary>
    /// The default implementation of the Tender class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#PaymentMetering")]
    [XmlNamespacePrefixAttribute("cimPaymentMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/Tender")]
    [DebuggerDisplayAttribute("Tender {UUID}")]
    public partial class Tender : IdentifiedObject, ITender, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Amount property
        /// </summary>
        private float _amount;
        
        private static Lazy<ITypedElement> _amountAttribute = new Lazy<ITypedElement>(RetrieveAmountAttribute);
        
        /// <summary>
        /// The backing field for the Change property
        /// </summary>
        private float _change;
        
        private static Lazy<ITypedElement> _changeAttribute = new Lazy<ITypedElement>(RetrieveChangeAttribute);
        
        /// <summary>
        /// The backing field for the Kind property
        /// </summary>
        private Nullable<TenderKind> _kind;
        
        private static Lazy<ITypedElement> _kindAttribute = new Lazy<ITypedElement>(RetrieveKindAttribute);
        
        private static Lazy<ITypedElement> _receiptReference = new Lazy<ITypedElement>(RetrieveReceiptReference);
        
        /// <summary>
        /// The backing field for the Receipt property
        /// </summary>
        private IReceipt _receipt;
        
        private static Lazy<ITypedElement> _chequeReference = new Lazy<ITypedElement>(RetrieveChequeReference);
        
        /// <summary>
        /// The backing field for the Cheque property
        /// </summary>
        private ICheque _cheque;
        
        private static Lazy<ITypedElement> _cardReference = new Lazy<ITypedElement>(RetrieveCardReference);
        
        /// <summary>
        /// The backing field for the Card property
        /// </summary>
        private ICard _card;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The amount property
        /// </summary>
        [XmlElementNameAttribute("amount")]
        [XmlAttributeAttribute(true)]
        public virtual float Amount
        {
            get
            {
                return this._amount;
            }
            set
            {
                if ((this._amount != value))
                {
                    float old = this._amount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmountChanging(e);
                    this.OnPropertyChanging("Amount", e, _amountAttribute);
                    this._amount = value;
                    this.OnAmountChanged(e);
                    this.OnPropertyChanged("Amount", e, _amountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The change property
        /// </summary>
        [XmlElementNameAttribute("change")]
        [XmlAttributeAttribute(true)]
        public virtual float Change
        {
            get
            {
                return this._change;
            }
            set
            {
                if ((this._change != value))
                {
                    float old = this._change;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnChangeChanging(e);
                    this.OnPropertyChanging("Change", e, _changeAttribute);
                    this._change = value;
                    this.OnChangeChanged(e);
                    this.OnPropertyChanged("Change", e, _changeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The kind property
        /// </summary>
        [XmlElementNameAttribute("kind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<TenderKind> Kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                if ((this._kind != value))
                {
                    Nullable<TenderKind> old = this._kind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKindChanging(e);
                    this.OnPropertyChanging("Kind", e, _kindAttribute);
                    this._kind = value;
                    this.OnKindChanged(e);
                    this.OnPropertyChanged("Kind", e, _kindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Receipt property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Tenders")]
        public virtual IReceipt Receipt
        {
            get
            {
                return this._receipt;
            }
            set
            {
                if ((this._receipt != value))
                {
                    IReceipt old = this._receipt;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReceiptChanging(e);
                    this.OnPropertyChanging("Receipt", e, _receiptReference);
                    this._receipt = value;
                    if ((old != null))
                    {
                        old.Tenders.Remove(this);
                        old.Deleted -= this.OnResetReceipt;
                    }
                    if ((value != null))
                    {
                        value.Tenders.Add(this);
                        value.Deleted += this.OnResetReceipt;
                    }
                    this.OnReceiptChanged(e);
                    this.OnPropertyChanged("Receipt", e, _receiptReference);
                }
            }
        }
        
        /// <summary>
        /// The Cheque property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Tender")]
        public virtual ICheque Cheque
        {
            get
            {
                return this._cheque;
            }
            set
            {
                if ((this._cheque != value))
                {
                    ICheque old = this._cheque;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnChequeChanging(e);
                    this.OnPropertyChanging("Cheque", e, _chequeReference);
                    this._cheque = value;
                    if ((old != null))
                    {
                        old.Tender = null;
                        old.Deleted -= this.OnResetCheque;
                    }
                    if ((value != null))
                    {
                        value.Tender = this;
                        value.Deleted += this.OnResetCheque;
                    }
                    this.OnChequeChanged(e);
                    this.OnPropertyChanged("Cheque", e, _chequeReference);
                }
            }
        }
        
        /// <summary>
        /// The Card property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Tender")]
        public virtual ICard Card
        {
            get
            {
                return this._card;
            }
            set
            {
                if ((this._card != value))
                {
                    ICard old = this._card;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCardChanging(e);
                    this.OnPropertyChanging("Card", e, _cardReference);
                    this._card = value;
                    if ((old != null))
                    {
                        old.Tender = null;
                        old.Deleted -= this.OnResetCard;
                    }
                    if ((value != null))
                    {
                        value.Tender = this;
                        value.Deleted += this.OnResetCard;
                    }
                    this.OnCardChanged(e);
                    this.OnPropertyChanged("Card", e, _cardReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TenderReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/Tender")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Amount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmountChanging;
        
        /// <summary>
        /// Gets fired when the Amount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmountChanged;
        
        /// <summary>
        /// Gets fired before the Change property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChangeChanging;
        
        /// <summary>
        /// Gets fired when the Change property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChangeChanged;
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        /// <summary>
        /// Gets fired before the Receipt property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReceiptChanging;
        
        /// <summary>
        /// Gets fired when the Receipt property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReceiptChanged;
        
        /// <summary>
        /// Gets fired before the Cheque property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChequeChanging;
        
        /// <summary>
        /// Gets fired when the Cheque property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ChequeChanged;
        
        /// <summary>
        /// Gets fired before the Card property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CardChanging;
        
        /// <summary>
        /// Gets fired when the Card property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CardChanged;
        
        private static ITypedElement RetrieveAmountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Tender.ClassInstance)).Resolve("amount")));
        }
        
        /// <summary>
        /// Raises the AmountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AmountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveChangeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Tender.ClassInstance)).Resolve("change")));
        }
        
        /// <summary>
        /// Raises the ChangeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChangeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChangeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ChangeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChangeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChangeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Tender.ClassInstance)).Resolve("kind")));
        }
        
        /// <summary>
        /// Raises the KindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReceiptReference()
        {
            return ((ITypedElement)(((ModelElement)(Tender.ClassInstance)).Resolve("Receipt")));
        }
        
        /// <summary>
        /// Raises the ReceiptChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceiptChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReceiptChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReceiptChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReceiptChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReceiptChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Receipt property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReceipt(object sender, System.EventArgs eventArgs)
        {
            this.Receipt = null;
        }
        
        private static ITypedElement RetrieveChequeReference()
        {
            return ((ITypedElement)(((ModelElement)(Tender.ClassInstance)).Resolve("Cheque")));
        }
        
        /// <summary>
        /// Raises the ChequeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChequeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChequeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ChequeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnChequeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ChequeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Cheque property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCheque(object sender, System.EventArgs eventArgs)
        {
            this.Cheque = null;
        }
        
        private static ITypedElement RetrieveCardReference()
        {
            return ((ITypedElement)(((ModelElement)(Tender.ClassInstance)).Resolve("Card")));
        }
        
        /// <summary>
        /// Raises the CardChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCardChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CardChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CardChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCardChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CardChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Card property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCard(object sender, System.EventArgs eventArgs)
        {
            this.Card = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "AMOUNT"))
            {
                return this.Amount;
            }
            if ((attribute == "CHANGE"))
            {
                return this.Change;
            }
            if ((attribute == "KIND"))
            {
                return this.Kind;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RECEIPT"))
            {
                this.Receipt = ((IReceipt)(value));
                return;
            }
            if ((feature == "CHEQUE"))
            {
                this.Cheque = ((ICheque)(value));
                return;
            }
            if ((feature == "CARD"))
            {
                this.Card = ((ICard)(value));
                return;
            }
            if ((feature == "AMOUNT"))
            {
                this.Amount = ((float)(value));
                return;
            }
            if ((feature == "CHANGE"))
            {
                this.Change = ((float)(value));
                return;
            }
            if ((feature == "KIND"))
            {
                this.Kind = ((TenderKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Receipt"))
            {
                return new ReceiptProxy(this);
            }
            if ((attribute == "Cheque"))
            {
                return new ChequeProxy(this);
            }
            if ((attribute == "Card"))
            {
                return new CardProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Receipt"))
            {
                return new ReceiptProxy(this);
            }
            if ((reference == "Cheque"))
            {
                return new ChequeProxy(this);
            }
            if ((reference == "Card"))
            {
                return new CardProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/Tender")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Tender class
        /// </summary>
        public class TenderReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Tender _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TenderReferencedElementsCollection(Tender parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Receipt != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Cheque != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Card != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ReceiptChanged += this.PropagateValueChanges;
                this._parent.ChequeChanged += this.PropagateValueChanges;
                this._parent.CardChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ReceiptChanged -= this.PropagateValueChanges;
                this._parent.ChequeChanged -= this.PropagateValueChanges;
                this._parent.CardChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Receipt == null))
                {
                    IReceipt receiptCasted = item.As<IReceipt>();
                    if ((receiptCasted != null))
                    {
                        this._parent.Receipt = receiptCasted;
                        return;
                    }
                }
                if ((this._parent.Cheque == null))
                {
                    ICheque chequeCasted = item.As<ICheque>();
                    if ((chequeCasted != null))
                    {
                        this._parent.Cheque = chequeCasted;
                        return;
                    }
                }
                if ((this._parent.Card == null))
                {
                    ICard cardCasted = item.As<ICard>();
                    if ((cardCasted != null))
                    {
                        this._parent.Card = cardCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Receipt = null;
                this._parent.Cheque = null;
                this._parent.Card = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Receipt))
                {
                    return true;
                }
                if ((item == this._parent.Cheque))
                {
                    return true;
                }
                if ((item == this._parent.Card))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Receipt != null))
                {
                    array[arrayIndex] = this._parent.Receipt;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Cheque != null))
                {
                    array[arrayIndex] = this._parent.Cheque;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Card != null))
                {
                    array[arrayIndex] = this._parent.Card;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Receipt == item))
                {
                    this._parent.Receipt = null;
                    return true;
                }
                if ((this._parent.Cheque == item))
                {
                    this._parent.Cheque = null;
                    return true;
                }
                if ((this._parent.Card == item))
                {
                    this._parent.Card = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Receipt).Concat(this._parent.Cheque).Concat(this._parent.Card).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the amount property
        /// </summary>
        private sealed class AmountProxy : ModelPropertyChange<ITender, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AmountProxy(ITender modelElement) : 
                    base(modelElement, "amount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Amount;
                }
                set
                {
                    this.ModelElement.Amount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the change property
        /// </summary>
        private sealed class ChangeProxy : ModelPropertyChange<ITender, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ChangeProxy(ITender modelElement) : 
                    base(modelElement, "change")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Change;
                }
                set
                {
                    this.ModelElement.Change = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kind property
        /// </summary>
        private sealed class KindProxy : ModelPropertyChange<ITender, Nullable<TenderKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KindProxy(ITender modelElement) : 
                    base(modelElement, "kind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<TenderKind> Value
            {
                get
                {
                    return this.ModelElement.Kind;
                }
                set
                {
                    this.ModelElement.Kind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Receipt property
        /// </summary>
        private sealed class ReceiptProxy : ModelPropertyChange<ITender, IReceipt>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReceiptProxy(ITender modelElement) : 
                    base(modelElement, "Receipt")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReceipt Value
            {
                get
                {
                    return this.ModelElement.Receipt;
                }
                set
                {
                    this.ModelElement.Receipt = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Cheque property
        /// </summary>
        private sealed class ChequeProxy : ModelPropertyChange<ITender, ICheque>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ChequeProxy(ITender modelElement) : 
                    base(modelElement, "Cheque")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICheque Value
            {
                get
                {
                    return this.ModelElement.Cheque;
                }
                set
                {
                    this.ModelElement.Cheque = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Card property
        /// </summary>
        private sealed class CardProxy : ModelPropertyChange<ITender, ICard>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CardProxy(ITender modelElement) : 
                    base(modelElement, "Card")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICard Value
            {
                get
                {
                    return this.ModelElement.Card;
                }
                set
                {
                    this.ModelElement.Card = value;
                }
            }
        }
    }
}

