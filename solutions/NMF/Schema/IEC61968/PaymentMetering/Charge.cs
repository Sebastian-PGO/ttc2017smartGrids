using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering
{
    
    
    /// <summary>
    /// The default implementation of the Charge class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#PaymentMetering")]
    [XmlNamespacePrefixAttribute("cimPaymentMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/Charge")]
    [DebuggerDisplayAttribute("Charge {UUID}")]
    public partial class Charge : IdentifiedObject, ICharge, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Kind property
        /// </summary>
        private Nullable<ChargeKind> _kind;
        
        private static Lazy<ITypedElement> _kindAttribute = new Lazy<ITypedElement>(RetrieveKindAttribute);
        
        /// <summary>
        /// The backing field for the VariablePortion property
        /// </summary>
        private float _variablePortion;
        
        private static Lazy<ITypedElement> _variablePortionAttribute = new Lazy<ITypedElement>(RetrieveVariablePortionAttribute);
        
        private static Lazy<ITypedElement> _auxiliaryAccountsReference = new Lazy<ITypedElement>(RetrieveAuxiliaryAccountsReference);
        
        /// <summary>
        /// The backing field for the AuxiliaryAccounts property
        /// </summary>
        private ChargeAuxiliaryAccountsCollection _auxiliaryAccounts;
        
        private static Lazy<ITypedElement> _parentChargeReference = new Lazy<ITypedElement>(RetrieveParentChargeReference);
        
        /// <summary>
        /// The backing field for the ParentCharge property
        /// </summary>
        private ICharge _parentCharge;
        
        private static Lazy<ITypedElement> _consumptionTariffIntervalsReference = new Lazy<ITypedElement>(RetrieveConsumptionTariffIntervalsReference);
        
        /// <summary>
        /// The backing field for the ConsumptionTariffIntervals property
        /// </summary>
        private ChargeConsumptionTariffIntervalsCollection _consumptionTariffIntervals;
        
        private static Lazy<ITypedElement> _childChargesReference = new Lazy<ITypedElement>(RetrieveChildChargesReference);
        
        /// <summary>
        /// The backing field for the ChildCharges property
        /// </summary>
        private ChargeChildChargesCollection _childCharges;
        
        private static Lazy<ITypedElement> _timeTariffIntervalsReference = new Lazy<ITypedElement>(RetrieveTimeTariffIntervalsReference);
        
        /// <summary>
        /// The backing field for the TimeTariffIntervals property
        /// </summary>
        private ChargeTimeTariffIntervalsCollection _timeTariffIntervals;
        
        private static Lazy<ITypedElement> _fixedPortionReference = new Lazy<ITypedElement>(RetrieveFixedPortionReference);
        
        /// <summary>
        /// The backing field for the FixedPortion property
        /// </summary>
        private IAccountingUnit _fixedPortion;
        
        private static IClass _classInstance;
        
        public Charge()
        {
            this._auxiliaryAccounts = new ChargeAuxiliaryAccountsCollection(this);
            this._auxiliaryAccounts.CollectionChanging += this.AuxiliaryAccountsCollectionChanging;
            this._auxiliaryAccounts.CollectionChanged += this.AuxiliaryAccountsCollectionChanged;
            this._consumptionTariffIntervals = new ChargeConsumptionTariffIntervalsCollection(this);
            this._consumptionTariffIntervals.CollectionChanging += this.ConsumptionTariffIntervalsCollectionChanging;
            this._consumptionTariffIntervals.CollectionChanged += this.ConsumptionTariffIntervalsCollectionChanged;
            this._childCharges = new ChargeChildChargesCollection(this);
            this._childCharges.CollectionChanging += this.ChildChargesCollectionChanging;
            this._childCharges.CollectionChanged += this.ChildChargesCollectionChanged;
            this._timeTariffIntervals = new ChargeTimeTariffIntervalsCollection(this);
            this._timeTariffIntervals.CollectionChanging += this.TimeTariffIntervalsCollectionChanging;
            this._timeTariffIntervals.CollectionChanged += this.TimeTariffIntervalsCollectionChanged;
        }
        
        /// <summary>
        /// The kind property
        /// </summary>
        [XmlElementNameAttribute("kind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<ChargeKind> Kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                if ((this._kind != value))
                {
                    Nullable<ChargeKind> old = this._kind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKindChanging(e);
                    this.OnPropertyChanging("Kind", e, _kindAttribute);
                    this._kind = value;
                    this.OnKindChanged(e);
                    this.OnPropertyChanged("Kind", e, _kindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The variablePortion property
        /// </summary>
        [XmlElementNameAttribute("variablePortion")]
        [XmlAttributeAttribute(true)]
        public virtual float VariablePortion
        {
            get
            {
                return this._variablePortion;
            }
            set
            {
                if ((this._variablePortion != value))
                {
                    float old = this._variablePortion;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVariablePortionChanging(e);
                    this.OnPropertyChanging("VariablePortion", e, _variablePortionAttribute);
                    this._variablePortion = value;
                    this.OnVariablePortionChanged(e);
                    this.OnPropertyChanged("VariablePortion", e, _variablePortionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The AuxiliaryAccounts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Charges")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAuxiliaryAccount> AuxiliaryAccounts
        {
            get
            {
                return this._auxiliaryAccounts;
            }
        }
        
        /// <summary>
        /// The ParentCharge property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ChildCharges")]
        public virtual ICharge ParentCharge
        {
            get
            {
                return this._parentCharge;
            }
            set
            {
                if ((this._parentCharge != value))
                {
                    ICharge old = this._parentCharge;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnParentChargeChanging(e);
                    this.OnPropertyChanging("ParentCharge", e, _parentChargeReference);
                    this._parentCharge = value;
                    if ((old != null))
                    {
                        old.ChildCharges.Remove(this);
                        old.Deleted -= this.OnResetParentCharge;
                    }
                    if ((value != null))
                    {
                        value.ChildCharges.Add(this);
                        value.Deleted += this.OnResetParentCharge;
                    }
                    this.OnParentChargeChanged(e);
                    this.OnPropertyChanged("ParentCharge", e, _parentChargeReference);
                }
            }
        }
        
        /// <summary>
        /// The ConsumptionTariffIntervals property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Charges")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IConsumptionTariffInterval> ConsumptionTariffIntervals
        {
            get
            {
                return this._consumptionTariffIntervals;
            }
        }
        
        /// <summary>
        /// The ChildCharges property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ParentCharge")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICharge> ChildCharges
        {
            get
            {
                return this._childCharges;
            }
        }
        
        /// <summary>
        /// The TimeTariffIntervals property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Charges")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITimeTariffInterval> TimeTariffIntervals
        {
            get
            {
                return this._timeTariffIntervals;
            }
        }
        
        /// <summary>
        /// The fixedPortion property
        /// </summary>
        [XmlElementNameAttribute("fixedPortion")]
        [XmlAttributeAttribute(true)]
        public virtual IAccountingUnit FixedPortion
        {
            get
            {
                return this._fixedPortion;
            }
            set
            {
                if ((this._fixedPortion != value))
                {
                    IAccountingUnit old = this._fixedPortion;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFixedPortionChanging(e);
                    this.OnPropertyChanging("FixedPortion", e, _fixedPortionReference);
                    this._fixedPortion = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetFixedPortion;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetFixedPortion;
                    }
                    this.OnFixedPortionChanged(e);
                    this.OnPropertyChanged("FixedPortion", e, _fixedPortionReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ChargeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/Charge")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        /// <summary>
        /// Gets fired before the VariablePortion property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VariablePortionChanging;
        
        /// <summary>
        /// Gets fired when the VariablePortion property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VariablePortionChanged;
        
        /// <summary>
        /// Gets fired before the ParentCharge property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ParentChargeChanging;
        
        /// <summary>
        /// Gets fired when the ParentCharge property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ParentChargeChanged;
        
        /// <summary>
        /// Gets fired before the FixedPortion property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FixedPortionChanging;
        
        /// <summary>
        /// Gets fired when the FixedPortion property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FixedPortionChanged;
        
        private static ITypedElement RetrieveKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Charge.ClassInstance)).Resolve("kind")));
        }
        
        /// <summary>
        /// Raises the KindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVariablePortionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Charge.ClassInstance)).Resolve("variablePortion")));
        }
        
        /// <summary>
        /// Raises the VariablePortionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVariablePortionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VariablePortionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VariablePortionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVariablePortionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VariablePortionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAuxiliaryAccountsReference()
        {
            return ((ITypedElement)(((ModelElement)(Charge.ClassInstance)).Resolve("AuxiliaryAccounts")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AuxiliaryAccounts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AuxiliaryAccountsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("AuxiliaryAccounts", e, _auxiliaryAccountsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AuxiliaryAccounts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AuxiliaryAccountsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AuxiliaryAccounts", e, _auxiliaryAccountsReference);
        }
        
        private static ITypedElement RetrieveParentChargeReference()
        {
            return ((ITypedElement)(((ModelElement)(Charge.ClassInstance)).Resolve("ParentCharge")));
        }
        
        /// <summary>
        /// Raises the ParentChargeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParentChargeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ParentChargeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ParentChargeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnParentChargeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ParentChargeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ParentCharge property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetParentCharge(object sender, System.EventArgs eventArgs)
        {
            this.ParentCharge = null;
        }
        
        private static ITypedElement RetrieveConsumptionTariffIntervalsReference()
        {
            return ((ITypedElement)(((ModelElement)(Charge.ClassInstance)).Resolve("ConsumptionTariffIntervals")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ConsumptionTariffIntervals property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConsumptionTariffIntervalsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ConsumptionTariffIntervals", e, _consumptionTariffIntervalsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ConsumptionTariffIntervals property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConsumptionTariffIntervalsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ConsumptionTariffIntervals", e, _consumptionTariffIntervalsReference);
        }
        
        private static ITypedElement RetrieveChildChargesReference()
        {
            return ((ITypedElement)(((ModelElement)(Charge.ClassInstance)).Resolve("ChildCharges")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ChildCharges property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChildChargesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ChildCharges", e, _childChargesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ChildCharges property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChildChargesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ChildCharges", e, _childChargesReference);
        }
        
        private static ITypedElement RetrieveTimeTariffIntervalsReference()
        {
            return ((ITypedElement)(((ModelElement)(Charge.ClassInstance)).Resolve("TimeTariffIntervals")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TimeTariffIntervals property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TimeTariffIntervalsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("TimeTariffIntervals", e, _timeTariffIntervalsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TimeTariffIntervals property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TimeTariffIntervalsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TimeTariffIntervals", e, _timeTariffIntervalsReference);
        }
        
        private static ITypedElement RetrieveFixedPortionReference()
        {
            return ((ITypedElement)(((ModelElement)(Charge.ClassInstance)).Resolve("fixedPortion")));
        }
        
        /// <summary>
        /// Raises the FixedPortionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFixedPortionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FixedPortionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FixedPortionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFixedPortionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FixedPortionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FixedPortion property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFixedPortion(object sender, System.EventArgs eventArgs)
        {
            this.FixedPortion = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "KIND"))
            {
                return this.Kind;
            }
            if ((attribute == "VARIABLEPORTION"))
            {
                return this.VariablePortion;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "AUXILIARYACCOUNTS"))
            {
                return this._auxiliaryAccounts;
            }
            if ((feature == "CONSUMPTIONTARIFFINTERVALS"))
            {
                return this._consumptionTariffIntervals;
            }
            if ((feature == "CHILDCHARGES"))
            {
                return this._childCharges;
            }
            if ((feature == "TIMETARIFFINTERVALS"))
            {
                return this._timeTariffIntervals;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PARENTCHARGE"))
            {
                this.ParentCharge = ((ICharge)(value));
                return;
            }
            if ((feature == "FIXEDPORTION"))
            {
                this.FixedPortion = ((IAccountingUnit)(value));
                return;
            }
            if ((feature == "KIND"))
            {
                this.Kind = ((ChargeKind)(value));
                return;
            }
            if ((feature == "VARIABLEPORTION"))
            {
                this.VariablePortion = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ParentCharge"))
            {
                return new ParentChargeProxy(this);
            }
            if ((attribute == "FixedPortion"))
            {
                return new FixedPortionProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ParentCharge"))
            {
                return new ParentChargeProxy(this);
            }
            if ((reference == "FixedPortion"))
            {
                return new FixedPortionProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/Charge")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Charge class
        /// </summary>
        public class ChargeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Charge _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ChargeReferencedElementsCollection(Charge parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.AuxiliaryAccounts.Count);
                    if ((this._parent.ParentCharge != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ConsumptionTariffIntervals.Count);
                    count = (count + this._parent.ChildCharges.Count);
                    count = (count + this._parent.TimeTariffIntervals.Count);
                    if ((this._parent.FixedPortion != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AuxiliaryAccounts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ParentChargeChanged += this.PropagateValueChanges;
                this._parent.ConsumptionTariffIntervals.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ChildCharges.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TimeTariffIntervals.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.FixedPortionChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AuxiliaryAccounts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ParentChargeChanged -= this.PropagateValueChanges;
                this._parent.ConsumptionTariffIntervals.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ChildCharges.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TimeTariffIntervals.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.FixedPortionChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IAuxiliaryAccount auxiliaryAccountsCasted = item.As<IAuxiliaryAccount>();
                if ((auxiliaryAccountsCasted != null))
                {
                    this._parent.AuxiliaryAccounts.Add(auxiliaryAccountsCasted);
                }
                if ((this._parent.ParentCharge == null))
                {
                    ICharge parentChargeCasted = item.As<ICharge>();
                    if ((parentChargeCasted != null))
                    {
                        this._parent.ParentCharge = parentChargeCasted;
                        return;
                    }
                }
                IConsumptionTariffInterval consumptionTariffIntervalsCasted = item.As<IConsumptionTariffInterval>();
                if ((consumptionTariffIntervalsCasted != null))
                {
                    this._parent.ConsumptionTariffIntervals.Add(consumptionTariffIntervalsCasted);
                }
                ICharge childChargesCasted = item.As<ICharge>();
                if ((childChargesCasted != null))
                {
                    this._parent.ChildCharges.Add(childChargesCasted);
                }
                ITimeTariffInterval timeTariffIntervalsCasted = item.As<ITimeTariffInterval>();
                if ((timeTariffIntervalsCasted != null))
                {
                    this._parent.TimeTariffIntervals.Add(timeTariffIntervalsCasted);
                }
                if ((this._parent.FixedPortion == null))
                {
                    IAccountingUnit fixedPortionCasted = item.As<IAccountingUnit>();
                    if ((fixedPortionCasted != null))
                    {
                        this._parent.FixedPortion = fixedPortionCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AuxiliaryAccounts.Clear();
                this._parent.ParentCharge = null;
                this._parent.ConsumptionTariffIntervals.Clear();
                this._parent.ChildCharges.Clear();
                this._parent.TimeTariffIntervals.Clear();
                this._parent.FixedPortion = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.AuxiliaryAccounts.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ParentCharge))
                {
                    return true;
                }
                if (this._parent.ConsumptionTariffIntervals.Contains(item))
                {
                    return true;
                }
                if (this._parent.ChildCharges.Contains(item))
                {
                    return true;
                }
                if (this._parent.TimeTariffIntervals.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.FixedPortion))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> auxiliaryAccountsEnumerator = this._parent.AuxiliaryAccounts.GetEnumerator();
                try
                {
                    for (
                    ; auxiliaryAccountsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = auxiliaryAccountsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    auxiliaryAccountsEnumerator.Dispose();
                }
                if ((this._parent.ParentCharge != null))
                {
                    array[arrayIndex] = this._parent.ParentCharge;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> consumptionTariffIntervalsEnumerator = this._parent.ConsumptionTariffIntervals.GetEnumerator();
                try
                {
                    for (
                    ; consumptionTariffIntervalsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = consumptionTariffIntervalsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    consumptionTariffIntervalsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> childChargesEnumerator = this._parent.ChildCharges.GetEnumerator();
                try
                {
                    for (
                    ; childChargesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = childChargesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    childChargesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> timeTariffIntervalsEnumerator = this._parent.TimeTariffIntervals.GetEnumerator();
                try
                {
                    for (
                    ; timeTariffIntervalsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = timeTariffIntervalsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    timeTariffIntervalsEnumerator.Dispose();
                }
                if ((this._parent.FixedPortion != null))
                {
                    array[arrayIndex] = this._parent.FixedPortion;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IAuxiliaryAccount auxiliaryAccountItem = item.As<IAuxiliaryAccount>();
                if (((auxiliaryAccountItem != null) 
                            && this._parent.AuxiliaryAccounts.Remove(auxiliaryAccountItem)))
                {
                    return true;
                }
                if ((this._parent.ParentCharge == item))
                {
                    this._parent.ParentCharge = null;
                    return true;
                }
                IConsumptionTariffInterval consumptionTariffIntervalItem = item.As<IConsumptionTariffInterval>();
                if (((consumptionTariffIntervalItem != null) 
                            && this._parent.ConsumptionTariffIntervals.Remove(consumptionTariffIntervalItem)))
                {
                    return true;
                }
                ICharge chargeItem = item.As<ICharge>();
                if (((chargeItem != null) 
                            && this._parent.ChildCharges.Remove(chargeItem)))
                {
                    return true;
                }
                ITimeTariffInterval timeTariffIntervalItem = item.As<ITimeTariffInterval>();
                if (((timeTariffIntervalItem != null) 
                            && this._parent.TimeTariffIntervals.Remove(timeTariffIntervalItem)))
                {
                    return true;
                }
                if ((this._parent.FixedPortion == item))
                {
                    this._parent.FixedPortion = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AuxiliaryAccounts).Concat(this._parent.ParentCharge).Concat(this._parent.ConsumptionTariffIntervals).Concat(this._parent.ChildCharges).Concat(this._parent.TimeTariffIntervals).Concat(this._parent.FixedPortion).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kind property
        /// </summary>
        private sealed class KindProxy : ModelPropertyChange<ICharge, Nullable<ChargeKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KindProxy(ICharge modelElement) : 
                    base(modelElement, "kind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<ChargeKind> Value
            {
                get
                {
                    return this.ModelElement.Kind;
                }
                set
                {
                    this.ModelElement.Kind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the variablePortion property
        /// </summary>
        private sealed class VariablePortionProxy : ModelPropertyChange<ICharge, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VariablePortionProxy(ICharge modelElement) : 
                    base(modelElement, "variablePortion")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.VariablePortion;
                }
                set
                {
                    this.ModelElement.VariablePortion = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ParentCharge property
        /// </summary>
        private sealed class ParentChargeProxy : ModelPropertyChange<ICharge, ICharge>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ParentChargeProxy(ICharge modelElement) : 
                    base(modelElement, "ParentCharge")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICharge Value
            {
                get
                {
                    return this.ModelElement.ParentCharge;
                }
                set
                {
                    this.ModelElement.ParentCharge = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fixedPortion property
        /// </summary>
        private sealed class FixedPortionProxy : ModelPropertyChange<ICharge, IAccountingUnit>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FixedPortionProxy(ICharge modelElement) : 
                    base(modelElement, "fixedPortion")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAccountingUnit Value
            {
                get
                {
                    return this.ModelElement.FixedPortion;
                }
                set
                {
                    this.ModelElement.FixedPortion = value;
                }
            }
        }
    }
}

