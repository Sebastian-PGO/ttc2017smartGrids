using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering
{
    
    
    /// <summary>
    /// The default implementation of the Vendor class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#PaymentMetering")]
    [XmlNamespacePrefixAttribute("cimPaymentMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/Vendor")]
    [DebuggerDisplayAttribute("Vendor {UUID}")]
    public partial class Vendor : IdentifiedObject, IVendor, IModelElement
    {
        
        private static Lazy<ITypedElement> _pointOfSalesReference = new Lazy<ITypedElement>(RetrievePointOfSalesReference);
        
        /// <summary>
        /// The backing field for the PointOfSales property
        /// </summary>
        private VendorPointOfSalesCollection _pointOfSales;
        
        private static Lazy<ITypedElement> _cashiersReference = new Lazy<ITypedElement>(RetrieveCashiersReference);
        
        /// <summary>
        /// The backing field for the Cashiers property
        /// </summary>
        private VendorCashiersCollection _cashiers;
        
        private static Lazy<ITypedElement> _merchantAccountReference = new Lazy<ITypedElement>(RetrieveMerchantAccountReference);
        
        /// <summary>
        /// The backing field for the MerchantAccount property
        /// </summary>
        private IMerchantAccount _merchantAccount;
        
        private static Lazy<ITypedElement> _bankStatementsReference = new Lazy<ITypedElement>(RetrieveBankStatementsReference);
        
        /// <summary>
        /// The backing field for the BankStatements property
        /// </summary>
        private VendorBankStatementsCollection _bankStatements;
        
        private static Lazy<ITypedElement> _vendorShiftsReference = new Lazy<ITypedElement>(RetrieveVendorShiftsReference);
        
        /// <summary>
        /// The backing field for the VendorShifts property
        /// </summary>
        private VendorVendorShiftsCollection _vendorShifts;
        
        private static IClass _classInstance;
        
        public Vendor()
        {
            this._pointOfSales = new VendorPointOfSalesCollection(this);
            this._pointOfSales.CollectionChanging += this.PointOfSalesCollectionChanging;
            this._pointOfSales.CollectionChanged += this.PointOfSalesCollectionChanged;
            this._cashiers = new VendorCashiersCollection(this);
            this._cashiers.CollectionChanging += this.CashiersCollectionChanging;
            this._cashiers.CollectionChanged += this.CashiersCollectionChanged;
            this._bankStatements = new VendorBankStatementsCollection(this);
            this._bankStatements.CollectionChanging += this.BankStatementsCollectionChanging;
            this._bankStatements.CollectionChanged += this.BankStatementsCollectionChanged;
            this._vendorShifts = new VendorVendorShiftsCollection(this);
            this._vendorShifts.CollectionChanging += this.VendorShiftsCollectionChanging;
            this._vendorShifts.CollectionChanged += this.VendorShiftsCollectionChanged;
        }
        
        /// <summary>
        /// The PointOfSales property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Vendor")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IPointOfSale> PointOfSales
        {
            get
            {
                return this._pointOfSales;
            }
        }
        
        /// <summary>
        /// The Cashiers property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Vendor")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICashier> Cashiers
        {
            get
            {
                return this._cashiers;
            }
        }
        
        /// <summary>
        /// The MerchantAccount property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Vendors")]
        public virtual IMerchantAccount MerchantAccount
        {
            get
            {
                return this._merchantAccount;
            }
            set
            {
                if ((this._merchantAccount != value))
                {
                    IMerchantAccount old = this._merchantAccount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMerchantAccountChanging(e);
                    this.OnPropertyChanging("MerchantAccount", e, _merchantAccountReference);
                    this._merchantAccount = value;
                    if ((old != null))
                    {
                        old.Vendors.Remove(this);
                        old.Deleted -= this.OnResetMerchantAccount;
                    }
                    if ((value != null))
                    {
                        value.Vendors.Add(this);
                        value.Deleted += this.OnResetMerchantAccount;
                    }
                    this.OnMerchantAccountChanged(e);
                    this.OnPropertyChanged("MerchantAccount", e, _merchantAccountReference);
                }
            }
        }
        
        /// <summary>
        /// The BankStatements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Vendor")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IBankStatement> BankStatements
        {
            get
            {
                return this._bankStatements;
            }
        }
        
        /// <summary>
        /// The VendorShifts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Vendor")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IVendorShift> VendorShifts
        {
            get
            {
                return this._vendorShifts;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new VendorReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/Vendor")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the MerchantAccount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MerchantAccountChanging;
        
        /// <summary>
        /// Gets fired when the MerchantAccount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MerchantAccountChanged;
        
        private static ITypedElement RetrievePointOfSalesReference()
        {
            return ((ITypedElement)(((ModelElement)(Vendor.ClassInstance)).Resolve("PointOfSales")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PointOfSales property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PointOfSalesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("PointOfSales", e, _pointOfSalesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PointOfSales property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PointOfSalesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PointOfSales", e, _pointOfSalesReference);
        }
        
        private static ITypedElement RetrieveCashiersReference()
        {
            return ((ITypedElement)(((ModelElement)(Vendor.ClassInstance)).Resolve("Cashiers")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Cashiers property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CashiersCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Cashiers", e, _cashiersReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Cashiers property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CashiersCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Cashiers", e, _cashiersReference);
        }
        
        private static ITypedElement RetrieveMerchantAccountReference()
        {
            return ((ITypedElement)(((ModelElement)(Vendor.ClassInstance)).Resolve("MerchantAccount")));
        }
        
        /// <summary>
        /// Raises the MerchantAccountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMerchantAccountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MerchantAccountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MerchantAccountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMerchantAccountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MerchantAccountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MerchantAccount property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMerchantAccount(object sender, System.EventArgs eventArgs)
        {
            this.MerchantAccount = null;
        }
        
        private static ITypedElement RetrieveBankStatementsReference()
        {
            return ((ITypedElement)(((ModelElement)(Vendor.ClassInstance)).Resolve("BankStatements")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the BankStatements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BankStatementsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("BankStatements", e, _bankStatementsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the BankStatements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BankStatementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("BankStatements", e, _bankStatementsReference);
        }
        
        private static ITypedElement RetrieveVendorShiftsReference()
        {
            return ((ITypedElement)(((ModelElement)(Vendor.ClassInstance)).Resolve("VendorShifts")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the VendorShifts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VendorShiftsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("VendorShifts", e, _vendorShiftsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the VendorShifts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VendorShiftsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("VendorShifts", e, _vendorShiftsReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "POINTOFSALES"))
            {
                return this._pointOfSales;
            }
            if ((feature == "CASHIERS"))
            {
                return this._cashiers;
            }
            if ((feature == "BANKSTATEMENTS"))
            {
                return this._bankStatements;
            }
            if ((feature == "VENDORSHIFTS"))
            {
                return this._vendorShifts;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "MERCHANTACCOUNT"))
            {
                this.MerchantAccount = ((IMerchantAccount)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "MerchantAccount"))
            {
                return new MerchantAccountProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "MerchantAccount"))
            {
                return new MerchantAccountProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/Vendor")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Vendor class
        /// </summary>
        public class VendorReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Vendor _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public VendorReferencedElementsCollection(Vendor parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.PointOfSales.Count);
                    count = (count + this._parent.Cashiers.Count);
                    if ((this._parent.MerchantAccount != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.BankStatements.Count);
                    count = (count + this._parent.VendorShifts.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PointOfSales.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Cashiers.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MerchantAccountChanged += this.PropagateValueChanges;
                this._parent.BankStatements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.VendorShifts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PointOfSales.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Cashiers.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MerchantAccountChanged -= this.PropagateValueChanges;
                this._parent.BankStatements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.VendorShifts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IPointOfSale pointOfSalesCasted = item.As<IPointOfSale>();
                if ((pointOfSalesCasted != null))
                {
                    this._parent.PointOfSales.Add(pointOfSalesCasted);
                }
                ICashier cashiersCasted = item.As<ICashier>();
                if ((cashiersCasted != null))
                {
                    this._parent.Cashiers.Add(cashiersCasted);
                }
                if ((this._parent.MerchantAccount == null))
                {
                    IMerchantAccount merchantAccountCasted = item.As<IMerchantAccount>();
                    if ((merchantAccountCasted != null))
                    {
                        this._parent.MerchantAccount = merchantAccountCasted;
                        return;
                    }
                }
                IBankStatement bankStatementsCasted = item.As<IBankStatement>();
                if ((bankStatementsCasted != null))
                {
                    this._parent.BankStatements.Add(bankStatementsCasted);
                }
                IVendorShift vendorShiftsCasted = item.As<IVendorShift>();
                if ((vendorShiftsCasted != null))
                {
                    this._parent.VendorShifts.Add(vendorShiftsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PointOfSales.Clear();
                this._parent.Cashiers.Clear();
                this._parent.MerchantAccount = null;
                this._parent.BankStatements.Clear();
                this._parent.VendorShifts.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.PointOfSales.Contains(item))
                {
                    return true;
                }
                if (this._parent.Cashiers.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.MerchantAccount))
                {
                    return true;
                }
                if (this._parent.BankStatements.Contains(item))
                {
                    return true;
                }
                if (this._parent.VendorShifts.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> pointOfSalesEnumerator = this._parent.PointOfSales.GetEnumerator();
                try
                {
                    for (
                    ; pointOfSalesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = pointOfSalesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    pointOfSalesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> cashiersEnumerator = this._parent.Cashiers.GetEnumerator();
                try
                {
                    for (
                    ; cashiersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = cashiersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    cashiersEnumerator.Dispose();
                }
                if ((this._parent.MerchantAccount != null))
                {
                    array[arrayIndex] = this._parent.MerchantAccount;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> bankStatementsEnumerator = this._parent.BankStatements.GetEnumerator();
                try
                {
                    for (
                    ; bankStatementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = bankStatementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    bankStatementsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> vendorShiftsEnumerator = this._parent.VendorShifts.GetEnumerator();
                try
                {
                    for (
                    ; vendorShiftsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = vendorShiftsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    vendorShiftsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IPointOfSale pointOfSaleItem = item.As<IPointOfSale>();
                if (((pointOfSaleItem != null) 
                            && this._parent.PointOfSales.Remove(pointOfSaleItem)))
                {
                    return true;
                }
                ICashier cashierItem = item.As<ICashier>();
                if (((cashierItem != null) 
                            && this._parent.Cashiers.Remove(cashierItem)))
                {
                    return true;
                }
                if ((this._parent.MerchantAccount == item))
                {
                    this._parent.MerchantAccount = null;
                    return true;
                }
                IBankStatement bankStatementItem = item.As<IBankStatement>();
                if (((bankStatementItem != null) 
                            && this._parent.BankStatements.Remove(bankStatementItem)))
                {
                    return true;
                }
                IVendorShift vendorShiftItem = item.As<IVendorShift>();
                if (((vendorShiftItem != null) 
                            && this._parent.VendorShifts.Remove(vendorShiftItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PointOfSales).Concat(this._parent.Cashiers).Concat(this._parent.MerchantAccount).Concat(this._parent.BankStatements).Concat(this._parent.VendorShifts).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MerchantAccount property
        /// </summary>
        private sealed class MerchantAccountProxy : ModelPropertyChange<IVendor, IMerchantAccount>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MerchantAccountProxy(IVendor modelElement) : 
                    base(modelElement, "MerchantAccount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMerchantAccount Value
            {
                get
                {
                    return this.ModelElement.MerchantAccount;
                }
                set
                {
                    this.ModelElement.MerchantAccount = value;
                }
            }
        }
    }
}

