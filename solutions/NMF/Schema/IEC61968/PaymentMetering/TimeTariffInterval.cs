using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering
{
    
    
    /// <summary>
    /// The default implementation of the TimeTariffInterval class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#PaymentMetering")]
    [XmlNamespacePrefixAttribute("cimPaymentMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/TimeTariffInt" +
        "erval")]
    [DebuggerDisplayAttribute("TimeTariffInterval {UUID}")]
    public partial class TimeTariffInterval : Element, ITimeTariffInterval, IModelElement
    {
        
        /// <summary>
        /// The backing field for the StartDateTime property
        /// </summary>
        private DateTime _startDateTime;
        
        private static Lazy<ITypedElement> _startDateTimeAttribute = new Lazy<ITypedElement>(RetrieveStartDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the SequenceNumber property
        /// </summary>
        private int _sequenceNumber;
        
        private static Lazy<ITypedElement> _sequenceNumberAttribute = new Lazy<ITypedElement>(RetrieveSequenceNumberAttribute);
        
        private static Lazy<ITypedElement> _tariffProfilesReference = new Lazy<ITypedElement>(RetrieveTariffProfilesReference);
        
        /// <summary>
        /// The backing field for the TariffProfiles property
        /// </summary>
        private TimeTariffIntervalTariffProfilesCollection _tariffProfiles;
        
        private static Lazy<ITypedElement> _chargesReference = new Lazy<ITypedElement>(RetrieveChargesReference);
        
        /// <summary>
        /// The backing field for the Charges property
        /// </summary>
        private TimeTariffIntervalChargesCollection _charges;
        
        private static IClass _classInstance;
        
        public TimeTariffInterval()
        {
            this._tariffProfiles = new TimeTariffIntervalTariffProfilesCollection(this);
            this._tariffProfiles.CollectionChanging += this.TariffProfilesCollectionChanging;
            this._tariffProfiles.CollectionChanged += this.TariffProfilesCollectionChanged;
            this._charges = new TimeTariffIntervalChargesCollection(this);
            this._charges.CollectionChanging += this.ChargesCollectionChanging;
            this._charges.CollectionChanged += this.ChargesCollectionChanged;
        }
        
        /// <summary>
        /// The startDateTime property
        /// </summary>
        [XmlElementNameAttribute("startDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime StartDateTime
        {
            get
            {
                return this._startDateTime;
            }
            set
            {
                if ((this._startDateTime != value))
                {
                    DateTime old = this._startDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStartDateTimeChanging(e);
                    this.OnPropertyChanging("StartDateTime", e, _startDateTimeAttribute);
                    this._startDateTime = value;
                    this.OnStartDateTimeChanged(e);
                    this.OnPropertyChanged("StartDateTime", e, _startDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The sequenceNumber property
        /// </summary>
        [XmlElementNameAttribute("sequenceNumber")]
        [XmlAttributeAttribute(true)]
        public virtual int SequenceNumber
        {
            get
            {
                return this._sequenceNumber;
            }
            set
            {
                if ((this._sequenceNumber != value))
                {
                    int old = this._sequenceNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSequenceNumberChanging(e);
                    this.OnPropertyChanging("SequenceNumber", e, _sequenceNumberAttribute);
                    this._sequenceNumber = value;
                    this.OnSequenceNumberChanged(e);
                    this.OnPropertyChanged("SequenceNumber", e, _sequenceNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The TariffProfiles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TimeTariffIntervals")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITariffProfile> TariffProfiles
        {
            get
            {
                return this._tariffProfiles;
            }
        }
        
        /// <summary>
        /// The Charges property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TimeTariffIntervals")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICharge> Charges
        {
            get
            {
                return this._charges;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TimeTariffIntervalReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/TimeTariffInt" +
                            "erval")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the StartDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the StartDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StartDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the SequenceNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SequenceNumberChanging;
        
        /// <summary>
        /// Gets fired when the SequenceNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SequenceNumberChanged;
        
        private static ITypedElement RetrieveStartDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TimeTariffInterval.ClassInstance)).Resolve("startDateTime")));
        }
        
        /// <summary>
        /// Raises the StartDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StartDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStartDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StartDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSequenceNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TimeTariffInterval.ClassInstance)).Resolve("sequenceNumber")));
        }
        
        /// <summary>
        /// Raises the SequenceNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSequenceNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SequenceNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SequenceNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSequenceNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SequenceNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTariffProfilesReference()
        {
            return ((ITypedElement)(((ModelElement)(TimeTariffInterval.ClassInstance)).Resolve("TariffProfiles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TariffProfiles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TariffProfilesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("TariffProfiles", e, _tariffProfilesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TariffProfiles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TariffProfilesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TariffProfiles", e, _tariffProfilesReference);
        }
        
        private static ITypedElement RetrieveChargesReference()
        {
            return ((ITypedElement)(((ModelElement)(TimeTariffInterval.ClassInstance)).Resolve("Charges")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Charges property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChargesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Charges", e, _chargesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Charges property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChargesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Charges", e, _chargesReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "STARTDATETIME"))
            {
                return this.StartDateTime;
            }
            if ((attribute == "SEQUENCENUMBER"))
            {
                return this.SequenceNumber;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "TARIFFPROFILES"))
            {
                return this._tariffProfiles;
            }
            if ((feature == "CHARGES"))
            {
                return this._charges;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STARTDATETIME"))
            {
                this.StartDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "SEQUENCENUMBER"))
            {
                this.SequenceNumber = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/TimeTariffInt" +
                        "erval")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TimeTariffInterval class
        /// </summary>
        public class TimeTariffIntervalReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TimeTariffInterval _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TimeTariffIntervalReferencedElementsCollection(TimeTariffInterval parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.TariffProfiles.Count);
                    count = (count + this._parent.Charges.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.TariffProfiles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Charges.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.TariffProfiles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Charges.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                ITariffProfile tariffProfilesCasted = item.As<ITariffProfile>();
                if ((tariffProfilesCasted != null))
                {
                    this._parent.TariffProfiles.Add(tariffProfilesCasted);
                }
                ICharge chargesCasted = item.As<ICharge>();
                if ((chargesCasted != null))
                {
                    this._parent.Charges.Add(chargesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.TariffProfiles.Clear();
                this._parent.Charges.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.TariffProfiles.Contains(item))
                {
                    return true;
                }
                if (this._parent.Charges.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> tariffProfilesEnumerator = this._parent.TariffProfiles.GetEnumerator();
                try
                {
                    for (
                    ; tariffProfilesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = tariffProfilesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    tariffProfilesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> chargesEnumerator = this._parent.Charges.GetEnumerator();
                try
                {
                    for (
                    ; chargesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = chargesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    chargesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                ITariffProfile tariffProfileItem = item.As<ITariffProfile>();
                if (((tariffProfileItem != null) 
                            && this._parent.TariffProfiles.Remove(tariffProfileItem)))
                {
                    return true;
                }
                ICharge chargeItem = item.As<ICharge>();
                if (((chargeItem != null) 
                            && this._parent.Charges.Remove(chargeItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.TariffProfiles).Concat(this._parent.Charges).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the startDateTime property
        /// </summary>
        private sealed class StartDateTimeProxy : ModelPropertyChange<ITimeTariffInterval, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StartDateTimeProxy(ITimeTariffInterval modelElement) : 
                    base(modelElement, "startDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.StartDateTime;
                }
                set
                {
                    this.ModelElement.StartDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sequenceNumber property
        /// </summary>
        private sealed class SequenceNumberProxy : ModelPropertyChange<ITimeTariffInterval, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SequenceNumberProxy(ITimeTariffInterval modelElement) : 
                    base(modelElement, "sequenceNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.SequenceNumber;
                }
                set
                {
                    this.ModelElement.SequenceNumber = value;
                }
            }
        }
    }
}

