using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering
{
    
    
    public class TransactionKindConverter : System.ComponentModel.TypeConverter
    {
        
        public override bool CanConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Type sourceType)
        {
            return (sourceType == typeof(string));
        }
        
        public override bool CanConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Type destinationType)
        {
            return (destinationType == typeof(string));
        }
        
        public override object ConvertFrom(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value)
        {
            if ((value == null))
            {
                return default(TransactionKind);
            }
            string valueString = value.ToString();
            if ((valueString == "tokenExchange"))
            {
                return TransactionKind.TokenExchange;
            }
            if ((valueString == "other"))
            {
                return TransactionKind.Other;
            }
            if ((valueString == "taxChargePayment"))
            {
                return TransactionKind.TaxChargePayment;
            }
            if ((valueString == "tokenCancellation"))
            {
                return TransactionKind.TokenCancellation;
            }
            if ((valueString == "tokenSalePayment"))
            {
                return TransactionKind.TokenSalePayment;
            }
            if ((valueString == "serviceChargePayment"))
            {
                return TransactionKind.ServiceChargePayment;
            }
            if ((valueString == "accountPayment"))
            {
                return TransactionKind.AccountPayment;
            }
            if ((valueString == "tokenGrant"))
            {
                return TransactionKind.TokenGrant;
            }
            if ((valueString == "diversePayment"))
            {
                return TransactionKind.DiversePayment;
            }
            if ((valueString == "tokenFreeIssue"))
            {
                return TransactionKind.TokenFreeIssue;
            }
            if ((valueString == "meterConfigurationToken"))
            {
                return TransactionKind.MeterConfigurationToken;
            }
            if ((valueString == "auxiliaryChargePayment"))
            {
                return TransactionKind.AuxiliaryChargePayment;
            }
            if ((valueString == "transactionReversal"))
            {
                return TransactionKind.TransactionReversal;
            }
            return default(TransactionKind);
        }
        
        public override object ConvertTo(System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, System.Type destinationType)
        {
            if ((value == null))
            {
                return null;
            }
            TransactionKind valueCasted = ((TransactionKind)(value));
            if ((valueCasted == TransactionKind.TokenExchange))
            {
                return "tokenExchange";
            }
            if ((valueCasted == TransactionKind.Other))
            {
                return "other";
            }
            if ((valueCasted == TransactionKind.TaxChargePayment))
            {
                return "taxChargePayment";
            }
            if ((valueCasted == TransactionKind.TokenCancellation))
            {
                return "tokenCancellation";
            }
            if ((valueCasted == TransactionKind.TokenSalePayment))
            {
                return "tokenSalePayment";
            }
            if ((valueCasted == TransactionKind.ServiceChargePayment))
            {
                return "serviceChargePayment";
            }
            if ((valueCasted == TransactionKind.AccountPayment))
            {
                return "accountPayment";
            }
            if ((valueCasted == TransactionKind.TokenGrant))
            {
                return "tokenGrant";
            }
            if ((valueCasted == TransactionKind.DiversePayment))
            {
                return "diversePayment";
            }
            if ((valueCasted == TransactionKind.TokenFreeIssue))
            {
                return "tokenFreeIssue";
            }
            if ((valueCasted == TransactionKind.MeterConfigurationToken))
            {
                return "meterConfigurationToken";
            }
            if ((valueCasted == TransactionKind.AuxiliaryChargePayment))
            {
                return "auxiliaryChargePayment";
            }
            if ((valueCasted == TransactionKind.TransactionReversal))
            {
                return "transactionReversal";
            }
            throw new ArgumentOutOfRangeException("value");
        }
    }
}

