using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering
{
    
    
    /// <summary>
    /// The default implementation of the ServiceSupplier class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#PaymentMetering")]
    [XmlNamespacePrefixAttribute("cimPaymentMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/ServiceSuppli" +
        "er")]
    [DebuggerDisplayAttribute("ServiceSupplier {UUID}")]
    public partial class ServiceSupplier : Organisation, IServiceSupplier, IModelElement
    {
        
        /// <summary>
        /// The backing field for the IssuerIdentificationNumber property
        /// </summary>
        private string _issuerIdentificationNumber;
        
        private static Lazy<ITypedElement> _issuerIdentificationNumberAttribute = new Lazy<ITypedElement>(RetrieveIssuerIdentificationNumberAttribute);
        
        /// <summary>
        /// The backing field for the Kind property
        /// </summary>
        private Nullable<SupplierKind> _kind;
        
        private static Lazy<ITypedElement> _kindAttribute = new Lazy<ITypedElement>(RetrieveKindAttribute);
        
        private static Lazy<ITypedElement> _serviceDeliveryPointsReference = new Lazy<ITypedElement>(RetrieveServiceDeliveryPointsReference);
        
        /// <summary>
        /// The backing field for the ServiceDeliveryPoints property
        /// </summary>
        private ServiceSupplierServiceDeliveryPointsCollection _serviceDeliveryPoints;
        
        private static Lazy<ITypedElement> _bankAccountsReference = new Lazy<ITypedElement>(RetrieveBankAccountsReference);
        
        /// <summary>
        /// The backing field for the BankAccounts property
        /// </summary>
        private ServiceSupplierBankAccountsCollection _bankAccounts;
        
        private static Lazy<ITypedElement> _customerAgreementsReference = new Lazy<ITypedElement>(RetrieveCustomerAgreementsReference);
        
        /// <summary>
        /// The backing field for the CustomerAgreements property
        /// </summary>
        private ServiceSupplierCustomerAgreementsCollection _customerAgreements;
        
        private static IClass _classInstance;
        
        public ServiceSupplier()
        {
            this._serviceDeliveryPoints = new ServiceSupplierServiceDeliveryPointsCollection(this);
            this._serviceDeliveryPoints.CollectionChanging += this.ServiceDeliveryPointsCollectionChanging;
            this._serviceDeliveryPoints.CollectionChanged += this.ServiceDeliveryPointsCollectionChanged;
            this._bankAccounts = new ServiceSupplierBankAccountsCollection(this);
            this._bankAccounts.CollectionChanging += this.BankAccountsCollectionChanging;
            this._bankAccounts.CollectionChanged += this.BankAccountsCollectionChanged;
            this._customerAgreements = new ServiceSupplierCustomerAgreementsCollection(this);
            this._customerAgreements.CollectionChanging += this.CustomerAgreementsCollectionChanging;
            this._customerAgreements.CollectionChanged += this.CustomerAgreementsCollectionChanged;
        }
        
        /// <summary>
        /// The issuerIdentificationNumber property
        /// </summary>
        [XmlElementNameAttribute("issuerIdentificationNumber")]
        [XmlAttributeAttribute(true)]
        public virtual string IssuerIdentificationNumber
        {
            get
            {
                return this._issuerIdentificationNumber;
            }
            set
            {
                if ((this._issuerIdentificationNumber != value))
                {
                    string old = this._issuerIdentificationNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIssuerIdentificationNumberChanging(e);
                    this.OnPropertyChanging("IssuerIdentificationNumber", e, _issuerIdentificationNumberAttribute);
                    this._issuerIdentificationNumber = value;
                    this.OnIssuerIdentificationNumberChanged(e);
                    this.OnPropertyChanged("IssuerIdentificationNumber", e, _issuerIdentificationNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The kind property
        /// </summary>
        [XmlElementNameAttribute("kind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<SupplierKind> Kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                if ((this._kind != value))
                {
                    Nullable<SupplierKind> old = this._kind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKindChanging(e);
                    this.OnPropertyChanging("Kind", e, _kindAttribute);
                    this._kind = value;
                    this.OnKindChanged(e);
                    this.OnPropertyChanged("Kind", e, _kindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ServiceDeliveryPoints property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ServiceSupplier")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IServiceDeliveryPoint> ServiceDeliveryPoints
        {
            get
            {
                return this._serviceDeliveryPoints;
            }
        }
        
        /// <summary>
        /// The BankAccounts property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ServiceSupplier")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IBankAccount> BankAccounts
        {
            get
            {
                return this._bankAccounts;
            }
        }
        
        /// <summary>
        /// The CustomerAgreements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ServiceSupplier")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICustomerAgreement> CustomerAgreements
        {
            get
            {
                return this._customerAgreements;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ServiceSupplierReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/ServiceSuppli" +
                            "er")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the IssuerIdentificationNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IssuerIdentificationNumberChanging;
        
        /// <summary>
        /// Gets fired when the IssuerIdentificationNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IssuerIdentificationNumberChanged;
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        private static ITypedElement RetrieveIssuerIdentificationNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ServiceSupplier.ClassInstance)).Resolve("issuerIdentificationNumber")));
        }
        
        /// <summary>
        /// Raises the IssuerIdentificationNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIssuerIdentificationNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IssuerIdentificationNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IssuerIdentificationNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIssuerIdentificationNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IssuerIdentificationNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ServiceSupplier.ClassInstance)).Resolve("kind")));
        }
        
        /// <summary>
        /// Raises the KindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveServiceDeliveryPointsReference()
        {
            return ((ITypedElement)(((ModelElement)(ServiceSupplier.ClassInstance)).Resolve("ServiceDeliveryPoints")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ServiceDeliveryPoints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ServiceDeliveryPointsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ServiceDeliveryPoints", e, _serviceDeliveryPointsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ServiceDeliveryPoints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ServiceDeliveryPointsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ServiceDeliveryPoints", e, _serviceDeliveryPointsReference);
        }
        
        private static ITypedElement RetrieveBankAccountsReference()
        {
            return ((ITypedElement)(((ModelElement)(ServiceSupplier.ClassInstance)).Resolve("BankAccounts")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the BankAccounts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BankAccountsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("BankAccounts", e, _bankAccountsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the BankAccounts property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BankAccountsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("BankAccounts", e, _bankAccountsReference);
        }
        
        private static ITypedElement RetrieveCustomerAgreementsReference()
        {
            return ((ITypedElement)(((ModelElement)(ServiceSupplier.ClassInstance)).Resolve("CustomerAgreements")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CustomerAgreements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CustomerAgreementsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("CustomerAgreements", e, _customerAgreementsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CustomerAgreements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CustomerAgreementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CustomerAgreements", e, _customerAgreementsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ISSUERIDENTIFICATIONNUMBER"))
            {
                return this.IssuerIdentificationNumber;
            }
            if ((attribute == "KIND"))
            {
                return this.Kind;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SERVICEDELIVERYPOINTS"))
            {
                return this._serviceDeliveryPoints;
            }
            if ((feature == "BANKACCOUNTS"))
            {
                return this._bankAccounts;
            }
            if ((feature == "CUSTOMERAGREEMENTS"))
            {
                return this._customerAgreements;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ISSUERIDENTIFICATIONNUMBER"))
            {
                this.IssuerIdentificationNumber = ((string)(value));
                return;
            }
            if ((feature == "KIND"))
            {
                this.Kind = ((SupplierKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/PaymentMetering/ServiceSuppli" +
                        "er")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ServiceSupplier class
        /// </summary>
        public class ServiceSupplierReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ServiceSupplier _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ServiceSupplierReferencedElementsCollection(ServiceSupplier parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ServiceDeliveryPoints.Count);
                    count = (count + this._parent.BankAccounts.Count);
                    count = (count + this._parent.CustomerAgreements.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ServiceDeliveryPoints.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BankAccounts.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CustomerAgreements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ServiceDeliveryPoints.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BankAccounts.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CustomerAgreements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IServiceDeliveryPoint serviceDeliveryPointsCasted = item.As<IServiceDeliveryPoint>();
                if ((serviceDeliveryPointsCasted != null))
                {
                    this._parent.ServiceDeliveryPoints.Add(serviceDeliveryPointsCasted);
                }
                IBankAccount bankAccountsCasted = item.As<IBankAccount>();
                if ((bankAccountsCasted != null))
                {
                    this._parent.BankAccounts.Add(bankAccountsCasted);
                }
                ICustomerAgreement customerAgreementsCasted = item.As<ICustomerAgreement>();
                if ((customerAgreementsCasted != null))
                {
                    this._parent.CustomerAgreements.Add(customerAgreementsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ServiceDeliveryPoints.Clear();
                this._parent.BankAccounts.Clear();
                this._parent.CustomerAgreements.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ServiceDeliveryPoints.Contains(item))
                {
                    return true;
                }
                if (this._parent.BankAccounts.Contains(item))
                {
                    return true;
                }
                if (this._parent.CustomerAgreements.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> serviceDeliveryPointsEnumerator = this._parent.ServiceDeliveryPoints.GetEnumerator();
                try
                {
                    for (
                    ; serviceDeliveryPointsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = serviceDeliveryPointsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    serviceDeliveryPointsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> bankAccountsEnumerator = this._parent.BankAccounts.GetEnumerator();
                try
                {
                    for (
                    ; bankAccountsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = bankAccountsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    bankAccountsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> customerAgreementsEnumerator = this._parent.CustomerAgreements.GetEnumerator();
                try
                {
                    for (
                    ; customerAgreementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = customerAgreementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    customerAgreementsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IServiceDeliveryPoint serviceDeliveryPointItem = item.As<IServiceDeliveryPoint>();
                if (((serviceDeliveryPointItem != null) 
                            && this._parent.ServiceDeliveryPoints.Remove(serviceDeliveryPointItem)))
                {
                    return true;
                }
                IBankAccount bankAccountItem = item.As<IBankAccount>();
                if (((bankAccountItem != null) 
                            && this._parent.BankAccounts.Remove(bankAccountItem)))
                {
                    return true;
                }
                ICustomerAgreement customerAgreementItem = item.As<ICustomerAgreement>();
                if (((customerAgreementItem != null) 
                            && this._parent.CustomerAgreements.Remove(customerAgreementItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ServiceDeliveryPoints).Concat(this._parent.BankAccounts).Concat(this._parent.CustomerAgreements).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the issuerIdentificationNumber property
        /// </summary>
        private sealed class IssuerIdentificationNumberProxy : ModelPropertyChange<IServiceSupplier, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IssuerIdentificationNumberProxy(IServiceSupplier modelElement) : 
                    base(modelElement, "issuerIdentificationNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.IssuerIdentificationNumber;
                }
                set
                {
                    this.ModelElement.IssuerIdentificationNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kind property
        /// </summary>
        private sealed class KindProxy : ModelPropertyChange<IServiceSupplier, Nullable<SupplierKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KindProxy(IServiceSupplier modelElement) : 
                    base(modelElement, "kind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<SupplierKind> Value
            {
                get
                {
                    return this.ModelElement.Kind;
                }
                set
                {
                    this.ModelElement.Kind = value;
                }
            }
        }
    }
}

