using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.AssetModels
{
    
    
    /// <summary>
    /// The default implementation of the ConductorInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#AssetModels")]
    [XmlNamespacePrefixAttribute("cimAssetModels")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/ConductorInfo")]
    [DebuggerDisplayAttribute("ConductorInfo {UUID}")]
    public partial class ConductorInfo : IdentifiedObject, IConductorInfo, IModelElement
    {
        
        /// <summary>
        /// The backing field for the PhaseCount property
        /// </summary>
        private int _phaseCount;
        
        private static Lazy<ITypedElement> _phaseCountAttribute = new Lazy<ITypedElement>(RetrievePhaseCountAttribute);
        
        /// <summary>
        /// The backing field for the Insulated property
        /// </summary>
        private bool _insulated;
        
        private static Lazy<ITypedElement> _insulatedAttribute = new Lazy<ITypedElement>(RetrieveInsulatedAttribute);
        
        /// <summary>
        /// The backing field for the InsulationThickness property
        /// </summary>
        private float _insulationThickness;
        
        private static Lazy<ITypedElement> _insulationThicknessAttribute = new Lazy<ITypedElement>(RetrieveInsulationThicknessAttribute);
        
        /// <summary>
        /// The backing field for the Usage property
        /// </summary>
        private Nullable<ConductorUsageKind> _usage;
        
        private static Lazy<ITypedElement> _usageAttribute = new Lazy<ITypedElement>(RetrieveUsageAttribute);
        
        /// <summary>
        /// The backing field for the InsulationMaterial property
        /// </summary>
        private Nullable<ConductorInsulationKind> _insulationMaterial;
        
        private static Lazy<ITypedElement> _insulationMaterialAttribute = new Lazy<ITypedElement>(RetrieveInsulationMaterialAttribute);
        
        private static Lazy<ITypedElement> _conductorSegmentsReference = new Lazy<ITypedElement>(RetrieveConductorSegmentsReference);
        
        /// <summary>
        /// The backing field for the ConductorSegments property
        /// </summary>
        private ConductorInfoConductorSegmentsCollection _conductorSegments;
        
        private static Lazy<ITypedElement> _wireArrangementsReference = new Lazy<ITypedElement>(RetrieveWireArrangementsReference);
        
        /// <summary>
        /// The backing field for the WireArrangements property
        /// </summary>
        private ConductorInfoWireArrangementsCollection _wireArrangements;
        
        private static IClass _classInstance;
        
        public ConductorInfo()
        {
            this._conductorSegments = new ConductorInfoConductorSegmentsCollection(this);
            this._conductorSegments.CollectionChanging += this.ConductorSegmentsCollectionChanging;
            this._conductorSegments.CollectionChanged += this.ConductorSegmentsCollectionChanged;
            this._wireArrangements = new ConductorInfoWireArrangementsCollection(this);
            this._wireArrangements.CollectionChanging += this.WireArrangementsCollectionChanging;
            this._wireArrangements.CollectionChanged += this.WireArrangementsCollectionChanged;
        }
        
        /// <summary>
        /// The phaseCount property
        /// </summary>
        [XmlElementNameAttribute("phaseCount")]
        [XmlAttributeAttribute(true)]
        public virtual int PhaseCount
        {
            get
            {
                return this._phaseCount;
            }
            set
            {
                if ((this._phaseCount != value))
                {
                    int old = this._phaseCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhaseCountChanging(e);
                    this.OnPropertyChanging("PhaseCount", e, _phaseCountAttribute);
                    this._phaseCount = value;
                    this.OnPhaseCountChanged(e);
                    this.OnPropertyChanged("PhaseCount", e, _phaseCountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The insulated property
        /// </summary>
        [XmlElementNameAttribute("insulated")]
        [XmlAttributeAttribute(true)]
        public virtual bool Insulated
        {
            get
            {
                return this._insulated;
            }
            set
            {
                if ((this._insulated != value))
                {
                    bool old = this._insulated;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInsulatedChanging(e);
                    this.OnPropertyChanging("Insulated", e, _insulatedAttribute);
                    this._insulated = value;
                    this.OnInsulatedChanged(e);
                    this.OnPropertyChanged("Insulated", e, _insulatedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The insulationThickness property
        /// </summary>
        [XmlElementNameAttribute("insulationThickness")]
        [XmlAttributeAttribute(true)]
        public virtual float InsulationThickness
        {
            get
            {
                return this._insulationThickness;
            }
            set
            {
                if ((this._insulationThickness != value))
                {
                    float old = this._insulationThickness;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInsulationThicknessChanging(e);
                    this.OnPropertyChanging("InsulationThickness", e, _insulationThicknessAttribute);
                    this._insulationThickness = value;
                    this.OnInsulationThicknessChanged(e);
                    this.OnPropertyChanged("InsulationThickness", e, _insulationThicknessAttribute);
                }
            }
        }
        
        /// <summary>
        /// The usage property
        /// </summary>
        [XmlElementNameAttribute("usage")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<ConductorUsageKind> Usage
        {
            get
            {
                return this._usage;
            }
            set
            {
                if ((this._usage != value))
                {
                    Nullable<ConductorUsageKind> old = this._usage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUsageChanging(e);
                    this.OnPropertyChanging("Usage", e, _usageAttribute);
                    this._usage = value;
                    this.OnUsageChanged(e);
                    this.OnPropertyChanged("Usage", e, _usageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The insulationMaterial property
        /// </summary>
        [XmlElementNameAttribute("insulationMaterial")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<ConductorInsulationKind> InsulationMaterial
        {
            get
            {
                return this._insulationMaterial;
            }
            set
            {
                if ((this._insulationMaterial != value))
                {
                    Nullable<ConductorInsulationKind> old = this._insulationMaterial;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInsulationMaterialChanging(e);
                    this.OnPropertyChanging("InsulationMaterial", e, _insulationMaterialAttribute);
                    this._insulationMaterial = value;
                    this.OnInsulationMaterialChanged(e);
                    this.OnPropertyChanged("InsulationMaterial", e, _insulationMaterialAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ConductorSegments property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ConductorInfo")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDistributionLineSegment> ConductorSegments
        {
            get
            {
                return this._conductorSegments;
            }
        }
        
        /// <summary>
        /// The WireArrangements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ConductorInfo")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWireArrangement> WireArrangements
        {
            get
            {
                return this._wireArrangements;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ConductorInfoReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/ConductorInfo")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PhaseCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseCountChanging;
        
        /// <summary>
        /// Gets fired when the PhaseCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseCountChanged;
        
        /// <summary>
        /// Gets fired before the Insulated property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InsulatedChanging;
        
        /// <summary>
        /// Gets fired when the Insulated property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InsulatedChanged;
        
        /// <summary>
        /// Gets fired before the InsulationThickness property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InsulationThicknessChanging;
        
        /// <summary>
        /// Gets fired when the InsulationThickness property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InsulationThicknessChanged;
        
        /// <summary>
        /// Gets fired before the Usage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UsageChanging;
        
        /// <summary>
        /// Gets fired when the Usage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UsageChanged;
        
        /// <summary>
        /// Gets fired before the InsulationMaterial property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InsulationMaterialChanging;
        
        /// <summary>
        /// Gets fired when the InsulationMaterial property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InsulationMaterialChanged;
        
        private static ITypedElement RetrievePhaseCountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ConductorInfo.ClassInstance)).Resolve("phaseCount")));
        }
        
        /// <summary>
        /// Raises the PhaseCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhaseCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveInsulatedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ConductorInfo.ClassInstance)).Resolve("insulated")));
        }
        
        /// <summary>
        /// Raises the InsulatedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInsulatedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InsulatedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InsulatedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInsulatedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InsulatedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveInsulationThicknessAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ConductorInfo.ClassInstance)).Resolve("insulationThickness")));
        }
        
        /// <summary>
        /// Raises the InsulationThicknessChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInsulationThicknessChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InsulationThicknessChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InsulationThicknessChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInsulationThicknessChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InsulationThicknessChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUsageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ConductorInfo.ClassInstance)).Resolve("usage")));
        }
        
        /// <summary>
        /// Raises the UsageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUsageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UsageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UsageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUsageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UsageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveInsulationMaterialAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ConductorInfo.ClassInstance)).Resolve("insulationMaterial")));
        }
        
        /// <summary>
        /// Raises the InsulationMaterialChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInsulationMaterialChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InsulationMaterialChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InsulationMaterialChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInsulationMaterialChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InsulationMaterialChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveConductorSegmentsReference()
        {
            return ((ITypedElement)(((ModelElement)(ConductorInfo.ClassInstance)).Resolve("ConductorSegments")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ConductorSegments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConductorSegmentsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ConductorSegments", e, _conductorSegmentsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ConductorSegments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConductorSegmentsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ConductorSegments", e, _conductorSegmentsReference);
        }
        
        private static ITypedElement RetrieveWireArrangementsReference()
        {
            return ((ITypedElement)(((ModelElement)(ConductorInfo.ClassInstance)).Resolve("WireArrangements")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WireArrangements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WireArrangementsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("WireArrangements", e, _wireArrangementsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WireArrangements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WireArrangementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WireArrangements", e, _wireArrangementsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PHASECOUNT"))
            {
                return this.PhaseCount;
            }
            if ((attribute == "INSULATED"))
            {
                return this.Insulated;
            }
            if ((attribute == "INSULATIONTHICKNESS"))
            {
                return this.InsulationThickness;
            }
            if ((attribute == "USAGE"))
            {
                return this.Usage;
            }
            if ((attribute == "INSULATIONMATERIAL"))
            {
                return this.InsulationMaterial;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CONDUCTORSEGMENTS"))
            {
                return this._conductorSegments;
            }
            if ((feature == "WIREARRANGEMENTS"))
            {
                return this._wireArrangements;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PHASECOUNT"))
            {
                this.PhaseCount = ((int)(value));
                return;
            }
            if ((feature == "INSULATED"))
            {
                this.Insulated = ((bool)(value));
                return;
            }
            if ((feature == "INSULATIONTHICKNESS"))
            {
                this.InsulationThickness = ((float)(value));
                return;
            }
            if ((feature == "USAGE"))
            {
                this.Usage = ((ConductorUsageKind)(value));
                return;
            }
            if ((feature == "INSULATIONMATERIAL"))
            {
                this.InsulationMaterial = ((ConductorInsulationKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/ConductorInfo")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ConductorInfo class
        /// </summary>
        public class ConductorInfoReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ConductorInfo _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ConductorInfoReferencedElementsCollection(ConductorInfo parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ConductorSegments.Count);
                    count = (count + this._parent.WireArrangements.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ConductorSegments.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WireArrangements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ConductorSegments.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WireArrangements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IDistributionLineSegment conductorSegmentsCasted = item.As<IDistributionLineSegment>();
                if ((conductorSegmentsCasted != null))
                {
                    this._parent.ConductorSegments.Add(conductorSegmentsCasted);
                }
                IWireArrangement wireArrangementsCasted = item.As<IWireArrangement>();
                if ((wireArrangementsCasted != null))
                {
                    this._parent.WireArrangements.Add(wireArrangementsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ConductorSegments.Clear();
                this._parent.WireArrangements.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ConductorSegments.Contains(item))
                {
                    return true;
                }
                if (this._parent.WireArrangements.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> conductorSegmentsEnumerator = this._parent.ConductorSegments.GetEnumerator();
                try
                {
                    for (
                    ; conductorSegmentsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = conductorSegmentsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    conductorSegmentsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> wireArrangementsEnumerator = this._parent.WireArrangements.GetEnumerator();
                try
                {
                    for (
                    ; wireArrangementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = wireArrangementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    wireArrangementsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IDistributionLineSegment distributionLineSegmentItem = item.As<IDistributionLineSegment>();
                if (((distributionLineSegmentItem != null) 
                            && this._parent.ConductorSegments.Remove(distributionLineSegmentItem)))
                {
                    return true;
                }
                IWireArrangement wireArrangementItem = item.As<IWireArrangement>();
                if (((wireArrangementItem != null) 
                            && this._parent.WireArrangements.Remove(wireArrangementItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ConductorSegments).Concat(this._parent.WireArrangements).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phaseCount property
        /// </summary>
        private sealed class PhaseCountProxy : ModelPropertyChange<IConductorInfo, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhaseCountProxy(IConductorInfo modelElement) : 
                    base(modelElement, "phaseCount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.PhaseCount;
                }
                set
                {
                    this.ModelElement.PhaseCount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the insulated property
        /// </summary>
        private sealed class InsulatedProxy : ModelPropertyChange<IConductorInfo, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InsulatedProxy(IConductorInfo modelElement) : 
                    base(modelElement, "insulated")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Insulated;
                }
                set
                {
                    this.ModelElement.Insulated = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the insulationThickness property
        /// </summary>
        private sealed class InsulationThicknessProxy : ModelPropertyChange<IConductorInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InsulationThicknessProxy(IConductorInfo modelElement) : 
                    base(modelElement, "insulationThickness")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.InsulationThickness;
                }
                set
                {
                    this.ModelElement.InsulationThickness = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the usage property
        /// </summary>
        private sealed class UsageProxy : ModelPropertyChange<IConductorInfo, Nullable<ConductorUsageKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UsageProxy(IConductorInfo modelElement) : 
                    base(modelElement, "usage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<ConductorUsageKind> Value
            {
                get
                {
                    return this.ModelElement.Usage;
                }
                set
                {
                    this.ModelElement.Usage = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the insulationMaterial property
        /// </summary>
        private sealed class InsulationMaterialProxy : ModelPropertyChange<IConductorInfo, Nullable<ConductorInsulationKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InsulationMaterialProxy(IConductorInfo modelElement) : 
                    base(modelElement, "insulationMaterial")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<ConductorInsulationKind> Value
            {
                get
                {
                    return this.ModelElement.InsulationMaterial;
                }
                set
                {
                    this.ModelElement.InsulationMaterial = value;
                }
            }
        }
    }
}

