//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.AssetModels
{
    
    
    /// <summary>
    /// The public interface for ToWindingSpec
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ToWindingSpec))]
    [XmlDefaultImplementationTypeAttribute(typeof(ToWindingSpec))]
    public interface IToWindingSpec : IModelElement, IIdentifiedObject
    {
        
        /// <summary>
        /// The voltage property
        /// </summary>
        float Voltage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The toTapStep property
        /// </summary>
        int ToTapStep
        {
            get;
            set;
        }
        
        /// <summary>
        /// The phaseShift property
        /// </summary>
        float PhaseShift
        {
            get;
            set;
        }
        
        /// <summary>
        /// The OpenCircuitTests property
        /// </summary>
        IOrderedSetExpression<IOpenCircuitTest> OpenCircuitTests
        {
            get;
        }
        
        /// <summary>
        /// The ToWinding property
        /// </summary>
        IWindingInfo ToWinding
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ShortCircuitTests property
        /// </summary>
        IOrderedSetExpression<IShortCircuitTest> ShortCircuitTests
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the Voltage property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VoltageChanging;
        
        /// <summary>
        /// Gets fired when the Voltage property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VoltageChanged;
        
        /// <summary>
        /// Gets fired before the ToTapStep property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ToTapStepChanging;
        
        /// <summary>
        /// Gets fired when the ToTapStep property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ToTapStepChanged;
        
        /// <summary>
        /// Gets fired before the PhaseShift property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhaseShiftChanging;
        
        /// <summary>
        /// Gets fired when the PhaseShift property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhaseShiftChanged;
        
        /// <summary>
        /// Gets fired before the ToWinding property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ToWindingChanging;
        
        /// <summary>
        /// Gets fired when the ToWinding property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ToWindingChanged;
    }
}

