//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.AssetModels
{
    
    
    /// <summary>
    /// The public interface for ShortCircuitTest
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ShortCircuitTest))]
    [XmlDefaultImplementationTypeAttribute(typeof(ShortCircuitTest))]
    public interface IShortCircuitTest : IModelElement, IDistributionWindingTest
    {
        
        /// <summary>
        /// The loadLoss property
        /// </summary>
        float LoadLoss
        {
            get;
            set;
        }
        
        /// <summary>
        /// The loadLossZero property
        /// </summary>
        float LoadLossZero
        {
            get;
            set;
        }
        
        /// <summary>
        /// The leakageImpedance property
        /// </summary>
        float LeakageImpedance
        {
            get;
            set;
        }
        
        /// <summary>
        /// The leakageImpedanceZero property
        /// </summary>
        float LeakageImpedanceZero
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ShortedWindingSpecs property
        /// </summary>
        IOrderedSetExpression<IToWindingSpec> ShortedWindingSpecs
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the LoadLoss property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LoadLossChanging;
        
        /// <summary>
        /// Gets fired when the LoadLoss property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LoadLossChanged;
        
        /// <summary>
        /// Gets fired before the LoadLossZero property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LoadLossZeroChanging;
        
        /// <summary>
        /// Gets fired when the LoadLossZero property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LoadLossZeroChanged;
        
        /// <summary>
        /// Gets fired before the LeakageImpedance property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LeakageImpedanceChanging;
        
        /// <summary>
        /// Gets fired when the LeakageImpedance property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LeakageImpedanceChanged;
        
        /// <summary>
        /// Gets fired before the LeakageImpedanceZero property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LeakageImpedanceZeroChanging;
        
        /// <summary>
        /// Gets fired when the LeakageImpedanceZero property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LeakageImpedanceZeroChanged;
    }
}

