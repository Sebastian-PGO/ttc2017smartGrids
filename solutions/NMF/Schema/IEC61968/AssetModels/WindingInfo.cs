using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.AssetModels
{
    
    
    /// <summary>
    /// The default implementation of the WindingInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#AssetModels")]
    [XmlNamespacePrefixAttribute("cimAssetModels")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/WindingInfo")]
    [DebuggerDisplayAttribute("WindingInfo {UUID}")]
    public partial class WindingInfo : IdentifiedObject, IWindingInfo, IModelElement
    {
        
        /// <summary>
        /// The backing field for the EmergencyS property
        /// </summary>
        private float _emergencyS;
        
        private static Lazy<ITypedElement> _emergencySAttribute = new Lazy<ITypedElement>(RetrieveEmergencySAttribute);
        
        /// <summary>
        /// The backing field for the PhaseAngle property
        /// </summary>
        private int _phaseAngle;
        
        private static Lazy<ITypedElement> _phaseAngleAttribute = new Lazy<ITypedElement>(RetrievePhaseAngleAttribute);
        
        /// <summary>
        /// The backing field for the RatedS property
        /// </summary>
        private float _ratedS;
        
        private static Lazy<ITypedElement> _ratedSAttribute = new Lazy<ITypedElement>(RetrieveRatedSAttribute);
        
        /// <summary>
        /// The backing field for the RatedU property
        /// </summary>
        private float _ratedU;
        
        private static Lazy<ITypedElement> _ratedUAttribute = new Lazy<ITypedElement>(RetrieveRatedUAttribute);
        
        /// <summary>
        /// The backing field for the R property
        /// </summary>
        private float _r;
        
        private static Lazy<ITypedElement> _rAttribute = new Lazy<ITypedElement>(RetrieveRAttribute);
        
        /// <summary>
        /// The backing field for the SequenceNumber property
        /// </summary>
        private int _sequenceNumber;
        
        private static Lazy<ITypedElement> _sequenceNumberAttribute = new Lazy<ITypedElement>(RetrieveSequenceNumberAttribute);
        
        /// <summary>
        /// The backing field for the ShortTermS property
        /// </summary>
        private float _shortTermS;
        
        private static Lazy<ITypedElement> _shortTermSAttribute = new Lazy<ITypedElement>(RetrieveShortTermSAttribute);
        
        /// <summary>
        /// The backing field for the ConnectionKind property
        /// </summary>
        private Nullable<WindingConnection> _connectionKind;
        
        private static Lazy<ITypedElement> _connectionKindAttribute = new Lazy<ITypedElement>(RetrieveConnectionKindAttribute);
        
        /// <summary>
        /// The backing field for the InsulationU property
        /// </summary>
        private float _insulationU;
        
        private static Lazy<ITypedElement> _insulationUAttribute = new Lazy<ITypedElement>(RetrieveInsulationUAttribute);
        
        private static Lazy<ITypedElement> _windingTestsReference = new Lazy<ITypedElement>(RetrieveWindingTestsReference);
        
        /// <summary>
        /// The backing field for the WindingTests property
        /// </summary>
        private WindingInfoWindingTestsCollection _windingTests;
        
        private static Lazy<ITypedElement> _windingsReference = new Lazy<ITypedElement>(RetrieveWindingsReference);
        
        /// <summary>
        /// The backing field for the Windings property
        /// </summary>
        private WindingInfoWindingsCollection _windings;
        
        private static Lazy<ITypedElement> _toWindingSpecsReference = new Lazy<ITypedElement>(RetrieveToWindingSpecsReference);
        
        /// <summary>
        /// The backing field for the ToWindingSpecs property
        /// </summary>
        private WindingInfoToWindingSpecsCollection _toWindingSpecs;
        
        private static Lazy<ITypedElement> _transformerInfoReference = new Lazy<ITypedElement>(RetrieveTransformerInfoReference);
        
        /// <summary>
        /// The backing field for the TransformerInfo property
        /// </summary>
        private ITransformerInfo _transformerInfo;
        
        private static IClass _classInstance;
        
        public WindingInfo()
        {
            this._windingTests = new WindingInfoWindingTestsCollection(this);
            this._windingTests.CollectionChanging += this.WindingTestsCollectionChanging;
            this._windingTests.CollectionChanged += this.WindingTestsCollectionChanged;
            this._windings = new WindingInfoWindingsCollection(this);
            this._windings.CollectionChanging += this.WindingsCollectionChanging;
            this._windings.CollectionChanged += this.WindingsCollectionChanged;
            this._toWindingSpecs = new WindingInfoToWindingSpecsCollection(this);
            this._toWindingSpecs.CollectionChanging += this.ToWindingSpecsCollectionChanging;
            this._toWindingSpecs.CollectionChanged += this.ToWindingSpecsCollectionChanged;
        }
        
        /// <summary>
        /// The emergencyS property
        /// </summary>
        [XmlElementNameAttribute("emergencyS")]
        [XmlAttributeAttribute(true)]
        public virtual float EmergencyS
        {
            get
            {
                return this._emergencyS;
            }
            set
            {
                if ((this._emergencyS != value))
                {
                    float old = this._emergencyS;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEmergencySChanging(e);
                    this.OnPropertyChanging("EmergencyS", e, _emergencySAttribute);
                    this._emergencyS = value;
                    this.OnEmergencySChanged(e);
                    this.OnPropertyChanged("EmergencyS", e, _emergencySAttribute);
                }
            }
        }
        
        /// <summary>
        /// The phaseAngle property
        /// </summary>
        [XmlElementNameAttribute("phaseAngle")]
        [XmlAttributeAttribute(true)]
        public virtual int PhaseAngle
        {
            get
            {
                return this._phaseAngle;
            }
            set
            {
                if ((this._phaseAngle != value))
                {
                    int old = this._phaseAngle;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhaseAngleChanging(e);
                    this.OnPropertyChanging("PhaseAngle", e, _phaseAngleAttribute);
                    this._phaseAngle = value;
                    this.OnPhaseAngleChanged(e);
                    this.OnPropertyChanged("PhaseAngle", e, _phaseAngleAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ratedS property
        /// </summary>
        [XmlElementNameAttribute("ratedS")]
        [XmlAttributeAttribute(true)]
        public virtual float RatedS
        {
            get
            {
                return this._ratedS;
            }
            set
            {
                if ((this._ratedS != value))
                {
                    float old = this._ratedS;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatedSChanging(e);
                    this.OnPropertyChanging("RatedS", e, _ratedSAttribute);
                    this._ratedS = value;
                    this.OnRatedSChanged(e);
                    this.OnPropertyChanged("RatedS", e, _ratedSAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ratedU property
        /// </summary>
        [XmlElementNameAttribute("ratedU")]
        [XmlAttributeAttribute(true)]
        public virtual float RatedU
        {
            get
            {
                return this._ratedU;
            }
            set
            {
                if ((this._ratedU != value))
                {
                    float old = this._ratedU;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatedUChanging(e);
                    this.OnPropertyChanging("RatedU", e, _ratedUAttribute);
                    this._ratedU = value;
                    this.OnRatedUChanged(e);
                    this.OnPropertyChanged("RatedU", e, _ratedUAttribute);
                }
            }
        }
        
        /// <summary>
        /// The r property
        /// </summary>
        [XmlElementNameAttribute("r")]
        [XmlAttributeAttribute(true)]
        public virtual float R
        {
            get
            {
                return this._r;
            }
            set
            {
                if ((this._r != value))
                {
                    float old = this._r;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRChanging(e);
                    this.OnPropertyChanging("R", e, _rAttribute);
                    this._r = value;
                    this.OnRChanged(e);
                    this.OnPropertyChanged("R", e, _rAttribute);
                }
            }
        }
        
        /// <summary>
        /// The sequenceNumber property
        /// </summary>
        [XmlElementNameAttribute("sequenceNumber")]
        [XmlAttributeAttribute(true)]
        public virtual int SequenceNumber
        {
            get
            {
                return this._sequenceNumber;
            }
            set
            {
                if ((this._sequenceNumber != value))
                {
                    int old = this._sequenceNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSequenceNumberChanging(e);
                    this.OnPropertyChanging("SequenceNumber", e, _sequenceNumberAttribute);
                    this._sequenceNumber = value;
                    this.OnSequenceNumberChanged(e);
                    this.OnPropertyChanged("SequenceNumber", e, _sequenceNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The shortTermS property
        /// </summary>
        [XmlElementNameAttribute("shortTermS")]
        [XmlAttributeAttribute(true)]
        public virtual float ShortTermS
        {
            get
            {
                return this._shortTermS;
            }
            set
            {
                if ((this._shortTermS != value))
                {
                    float old = this._shortTermS;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnShortTermSChanging(e);
                    this.OnPropertyChanging("ShortTermS", e, _shortTermSAttribute);
                    this._shortTermS = value;
                    this.OnShortTermSChanged(e);
                    this.OnPropertyChanged("ShortTermS", e, _shortTermSAttribute);
                }
            }
        }
        
        /// <summary>
        /// The connectionKind property
        /// </summary>
        [XmlElementNameAttribute("connectionKind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<WindingConnection> ConnectionKind
        {
            get
            {
                return this._connectionKind;
            }
            set
            {
                if ((this._connectionKind != value))
                {
                    Nullable<WindingConnection> old = this._connectionKind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConnectionKindChanging(e);
                    this.OnPropertyChanging("ConnectionKind", e, _connectionKindAttribute);
                    this._connectionKind = value;
                    this.OnConnectionKindChanged(e);
                    this.OnPropertyChanged("ConnectionKind", e, _connectionKindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The insulationU property
        /// </summary>
        [XmlElementNameAttribute("insulationU")]
        [XmlAttributeAttribute(true)]
        public virtual float InsulationU
        {
            get
            {
                return this._insulationU;
            }
            set
            {
                if ((this._insulationU != value))
                {
                    float old = this._insulationU;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInsulationUChanging(e);
                    this.OnPropertyChanging("InsulationU", e, _insulationUAttribute);
                    this._insulationU = value;
                    this.OnInsulationUChanged(e);
                    this.OnPropertyChanged("InsulationU", e, _insulationUAttribute);
                }
            }
        }
        
        /// <summary>
        /// The WindingTests property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("FromWinding")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDistributionWindingTest> WindingTests
        {
            get
            {
                return this._windingTests;
            }
        }
        
        /// <summary>
        /// The Windings property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WindingInfo")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDistributionTransformerWinding> Windings
        {
            get
            {
                return this._windings;
            }
        }
        
        /// <summary>
        /// The ToWindingSpecs property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ToWinding")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IToWindingSpec> ToWindingSpecs
        {
            get
            {
                return this._toWindingSpecs;
            }
        }
        
        /// <summary>
        /// The TransformerInfo property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WindingInfos")]
        public virtual ITransformerInfo TransformerInfo
        {
            get
            {
                return this._transformerInfo;
            }
            set
            {
                if ((this._transformerInfo != value))
                {
                    ITransformerInfo old = this._transformerInfo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerInfoChanging(e);
                    this.OnPropertyChanging("TransformerInfo", e, _transformerInfoReference);
                    this._transformerInfo = value;
                    if ((old != null))
                    {
                        old.WindingInfos.Remove(this);
                        old.Deleted -= this.OnResetTransformerInfo;
                    }
                    if ((value != null))
                    {
                        value.WindingInfos.Add(this);
                        value.Deleted += this.OnResetTransformerInfo;
                    }
                    this.OnTransformerInfoChanged(e);
                    this.OnPropertyChanged("TransformerInfo", e, _transformerInfoReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new WindingInfoReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/WindingInfo")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the EmergencyS property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EmergencySChanging;
        
        /// <summary>
        /// Gets fired when the EmergencyS property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EmergencySChanged;
        
        /// <summary>
        /// Gets fired before the PhaseAngle property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseAngleChanging;
        
        /// <summary>
        /// Gets fired when the PhaseAngle property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseAngleChanged;
        
        /// <summary>
        /// Gets fired before the RatedS property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedSChanging;
        
        /// <summary>
        /// Gets fired when the RatedS property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedSChanged;
        
        /// <summary>
        /// Gets fired before the RatedU property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedUChanging;
        
        /// <summary>
        /// Gets fired when the RatedU property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedUChanged;
        
        /// <summary>
        /// Gets fired before the R property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RChanging;
        
        /// <summary>
        /// Gets fired when the R property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RChanged;
        
        /// <summary>
        /// Gets fired before the SequenceNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SequenceNumberChanging;
        
        /// <summary>
        /// Gets fired when the SequenceNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SequenceNumberChanged;
        
        /// <summary>
        /// Gets fired before the ShortTermS property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShortTermSChanging;
        
        /// <summary>
        /// Gets fired when the ShortTermS property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ShortTermSChanged;
        
        /// <summary>
        /// Gets fired before the ConnectionKind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConnectionKindChanging;
        
        /// <summary>
        /// Gets fired when the ConnectionKind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConnectionKindChanged;
        
        /// <summary>
        /// Gets fired before the InsulationU property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InsulationUChanging;
        
        /// <summary>
        /// Gets fired when the InsulationU property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InsulationUChanged;
        
        /// <summary>
        /// Gets fired before the TransformerInfo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerInfoChanging;
        
        /// <summary>
        /// Gets fired when the TransformerInfo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerInfoChanged;
        
        private static ITypedElement RetrieveEmergencySAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WindingInfo.ClassInstance)).Resolve("emergencyS")));
        }
        
        /// <summary>
        /// Raises the EmergencySChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEmergencySChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EmergencySChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EmergencySChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEmergencySChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EmergencySChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePhaseAngleAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WindingInfo.ClassInstance)).Resolve("phaseAngle")));
        }
        
        /// <summary>
        /// Raises the PhaseAngleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseAngleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseAngleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhaseAngleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseAngleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseAngleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRatedSAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WindingInfo.ClassInstance)).Resolve("ratedS")));
        }
        
        /// <summary>
        /// Raises the RatedSChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedSChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedSChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedSChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedSChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedSChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRatedUAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WindingInfo.ClassInstance)).Resolve("ratedU")));
        }
        
        /// <summary>
        /// Raises the RatedUChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedUChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedUChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedUChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedUChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedUChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WindingInfo.ClassInstance)).Resolve("r")));
        }
        
        /// <summary>
        /// Raises the RChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSequenceNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WindingInfo.ClassInstance)).Resolve("sequenceNumber")));
        }
        
        /// <summary>
        /// Raises the SequenceNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSequenceNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SequenceNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SequenceNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSequenceNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SequenceNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveShortTermSAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WindingInfo.ClassInstance)).Resolve("shortTermS")));
        }
        
        /// <summary>
        /// Raises the ShortTermSChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShortTermSChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShortTermSChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ShortTermSChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnShortTermSChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ShortTermSChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveConnectionKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WindingInfo.ClassInstance)).Resolve("connectionKind")));
        }
        
        /// <summary>
        /// Raises the ConnectionKindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConnectionKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConnectionKindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConnectionKindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConnectionKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConnectionKindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveInsulationUAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WindingInfo.ClassInstance)).Resolve("insulationU")));
        }
        
        /// <summary>
        /// Raises the InsulationUChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInsulationUChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InsulationUChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InsulationUChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInsulationUChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InsulationUChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveWindingTestsReference()
        {
            return ((ITypedElement)(((ModelElement)(WindingInfo.ClassInstance)).Resolve("WindingTests")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WindingTests property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WindingTestsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("WindingTests", e, _windingTestsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WindingTests property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WindingTestsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WindingTests", e, _windingTestsReference);
        }
        
        private static ITypedElement RetrieveWindingsReference()
        {
            return ((ITypedElement)(((ModelElement)(WindingInfo.ClassInstance)).Resolve("Windings")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Windings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WindingsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Windings", e, _windingsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Windings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WindingsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Windings", e, _windingsReference);
        }
        
        private static ITypedElement RetrieveToWindingSpecsReference()
        {
            return ((ITypedElement)(((ModelElement)(WindingInfo.ClassInstance)).Resolve("ToWindingSpecs")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ToWindingSpecs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ToWindingSpecsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ToWindingSpecs", e, _toWindingSpecsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ToWindingSpecs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ToWindingSpecsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ToWindingSpecs", e, _toWindingSpecsReference);
        }
        
        private static ITypedElement RetrieveTransformerInfoReference()
        {
            return ((ITypedElement)(((ModelElement)(WindingInfo.ClassInstance)).Resolve("TransformerInfo")));
        }
        
        /// <summary>
        /// Raises the TransformerInfoChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerInfoChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerInfoChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformerInfoChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerInfoChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerInfoChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TransformerInfo property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTransformerInfo(object sender, System.EventArgs eventArgs)
        {
            this.TransformerInfo = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "EMERGENCYS"))
            {
                return this.EmergencyS;
            }
            if ((attribute == "PHASEANGLE"))
            {
                return this.PhaseAngle;
            }
            if ((attribute == "RATEDS"))
            {
                return this.RatedS;
            }
            if ((attribute == "RATEDU"))
            {
                return this.RatedU;
            }
            if ((attribute == "R"))
            {
                return this.R;
            }
            if ((attribute == "SEQUENCENUMBER"))
            {
                return this.SequenceNumber;
            }
            if ((attribute == "SHORTTERMS"))
            {
                return this.ShortTermS;
            }
            if ((attribute == "CONNECTIONKIND"))
            {
                return this.ConnectionKind;
            }
            if ((attribute == "INSULATIONU"))
            {
                return this.InsulationU;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "WINDINGTESTS"))
            {
                return this._windingTests;
            }
            if ((feature == "WINDINGS"))
            {
                return this._windings;
            }
            if ((feature == "TOWINDINGSPECS"))
            {
                return this._toWindingSpecs;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TRANSFORMERINFO"))
            {
                this.TransformerInfo = ((ITransformerInfo)(value));
                return;
            }
            if ((feature == "EMERGENCYS"))
            {
                this.EmergencyS = ((float)(value));
                return;
            }
            if ((feature == "PHASEANGLE"))
            {
                this.PhaseAngle = ((int)(value));
                return;
            }
            if ((feature == "RATEDS"))
            {
                this.RatedS = ((float)(value));
                return;
            }
            if ((feature == "RATEDU"))
            {
                this.RatedU = ((float)(value));
                return;
            }
            if ((feature == "R"))
            {
                this.R = ((float)(value));
                return;
            }
            if ((feature == "SEQUENCENUMBER"))
            {
                this.SequenceNumber = ((int)(value));
                return;
            }
            if ((feature == "SHORTTERMS"))
            {
                this.ShortTermS = ((float)(value));
                return;
            }
            if ((feature == "CONNECTIONKIND"))
            {
                this.ConnectionKind = ((WindingConnection)(value));
                return;
            }
            if ((feature == "INSULATIONU"))
            {
                this.InsulationU = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "TransformerInfo"))
            {
                return new TransformerInfoProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "TransformerInfo"))
            {
                return new TransformerInfoProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/WindingInfo")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the WindingInfo class
        /// </summary>
        public class WindingInfoReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private WindingInfo _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public WindingInfoReferencedElementsCollection(WindingInfo parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.WindingTests.Count);
                    count = (count + this._parent.Windings.Count);
                    count = (count + this._parent.ToWindingSpecs.Count);
                    if ((this._parent.TransformerInfo != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.WindingTests.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Windings.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ToWindingSpecs.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TransformerInfoChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.WindingTests.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Windings.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ToWindingSpecs.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TransformerInfoChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IDistributionWindingTest windingTestsCasted = item.As<IDistributionWindingTest>();
                if ((windingTestsCasted != null))
                {
                    this._parent.WindingTests.Add(windingTestsCasted);
                }
                IDistributionTransformerWinding windingsCasted = item.As<IDistributionTransformerWinding>();
                if ((windingsCasted != null))
                {
                    this._parent.Windings.Add(windingsCasted);
                }
                IToWindingSpec toWindingSpecsCasted = item.As<IToWindingSpec>();
                if ((toWindingSpecsCasted != null))
                {
                    this._parent.ToWindingSpecs.Add(toWindingSpecsCasted);
                }
                if ((this._parent.TransformerInfo == null))
                {
                    ITransformerInfo transformerInfoCasted = item.As<ITransformerInfo>();
                    if ((transformerInfoCasted != null))
                    {
                        this._parent.TransformerInfo = transformerInfoCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.WindingTests.Clear();
                this._parent.Windings.Clear();
                this._parent.ToWindingSpecs.Clear();
                this._parent.TransformerInfo = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.WindingTests.Contains(item))
                {
                    return true;
                }
                if (this._parent.Windings.Contains(item))
                {
                    return true;
                }
                if (this._parent.ToWindingSpecs.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.TransformerInfo))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> windingTestsEnumerator = this._parent.WindingTests.GetEnumerator();
                try
                {
                    for (
                    ; windingTestsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = windingTestsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    windingTestsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> windingsEnumerator = this._parent.Windings.GetEnumerator();
                try
                {
                    for (
                    ; windingsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = windingsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    windingsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> toWindingSpecsEnumerator = this._parent.ToWindingSpecs.GetEnumerator();
                try
                {
                    for (
                    ; toWindingSpecsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = toWindingSpecsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    toWindingSpecsEnumerator.Dispose();
                }
                if ((this._parent.TransformerInfo != null))
                {
                    array[arrayIndex] = this._parent.TransformerInfo;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IDistributionWindingTest distributionWindingTestItem = item.As<IDistributionWindingTest>();
                if (((distributionWindingTestItem != null) 
                            && this._parent.WindingTests.Remove(distributionWindingTestItem)))
                {
                    return true;
                }
                IDistributionTransformerWinding distributionTransformerWindingItem = item.As<IDistributionTransformerWinding>();
                if (((distributionTransformerWindingItem != null) 
                            && this._parent.Windings.Remove(distributionTransformerWindingItem)))
                {
                    return true;
                }
                IToWindingSpec toWindingSpecItem = item.As<IToWindingSpec>();
                if (((toWindingSpecItem != null) 
                            && this._parent.ToWindingSpecs.Remove(toWindingSpecItem)))
                {
                    return true;
                }
                if ((this._parent.TransformerInfo == item))
                {
                    this._parent.TransformerInfo = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.WindingTests).Concat(this._parent.Windings).Concat(this._parent.ToWindingSpecs).Concat(this._parent.TransformerInfo).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the emergencyS property
        /// </summary>
        private sealed class EmergencySProxy : ModelPropertyChange<IWindingInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EmergencySProxy(IWindingInfo modelElement) : 
                    base(modelElement, "emergencyS")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.EmergencyS;
                }
                set
                {
                    this.ModelElement.EmergencyS = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phaseAngle property
        /// </summary>
        private sealed class PhaseAngleProxy : ModelPropertyChange<IWindingInfo, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhaseAngleProxy(IWindingInfo modelElement) : 
                    base(modelElement, "phaseAngle")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.PhaseAngle;
                }
                set
                {
                    this.ModelElement.PhaseAngle = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ratedS property
        /// </summary>
        private sealed class RatedSProxy : ModelPropertyChange<IWindingInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatedSProxy(IWindingInfo modelElement) : 
                    base(modelElement, "ratedS")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RatedS;
                }
                set
                {
                    this.ModelElement.RatedS = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ratedU property
        /// </summary>
        private sealed class RatedUProxy : ModelPropertyChange<IWindingInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatedUProxy(IWindingInfo modelElement) : 
                    base(modelElement, "ratedU")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RatedU;
                }
                set
                {
                    this.ModelElement.RatedU = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the r property
        /// </summary>
        private sealed class RProxy : ModelPropertyChange<IWindingInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RProxy(IWindingInfo modelElement) : 
                    base(modelElement, "r")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.R;
                }
                set
                {
                    this.ModelElement.R = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sequenceNumber property
        /// </summary>
        private sealed class SequenceNumberProxy : ModelPropertyChange<IWindingInfo, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SequenceNumberProxy(IWindingInfo modelElement) : 
                    base(modelElement, "sequenceNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.SequenceNumber;
                }
                set
                {
                    this.ModelElement.SequenceNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the shortTermS property
        /// </summary>
        private sealed class ShortTermSProxy : ModelPropertyChange<IWindingInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ShortTermSProxy(IWindingInfo modelElement) : 
                    base(modelElement, "shortTermS")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ShortTermS;
                }
                set
                {
                    this.ModelElement.ShortTermS = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the connectionKind property
        /// </summary>
        private sealed class ConnectionKindProxy : ModelPropertyChange<IWindingInfo, Nullable<WindingConnection>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConnectionKindProxy(IWindingInfo modelElement) : 
                    base(modelElement, "connectionKind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<WindingConnection> Value
            {
                get
                {
                    return this.ModelElement.ConnectionKind;
                }
                set
                {
                    this.ModelElement.ConnectionKind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the insulationU property
        /// </summary>
        private sealed class InsulationUProxy : ModelPropertyChange<IWindingInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InsulationUProxy(IWindingInfo modelElement) : 
                    base(modelElement, "insulationU")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.InsulationU;
                }
                set
                {
                    this.ModelElement.InsulationU = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TransformerInfo property
        /// </summary>
        private sealed class TransformerInfoProxy : ModelPropertyChange<IWindingInfo, ITransformerInfo>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformerInfoProxy(IWindingInfo modelElement) : 
                    base(modelElement, "TransformerInfo")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITransformerInfo Value
            {
                get
                {
                    return this.ModelElement.TransformerInfo;
                }
                set
                {
                    this.ModelElement.TransformerInfo = value;
                }
            }
        }
    }
}

