using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.AssetModels
{
    
    
    /// <summary>
    /// The default implementation of the OpenCircuitTest class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#AssetModels")]
    [XmlNamespacePrefixAttribute("cimAssetModels")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/OpenCircuitTest")]
    [DebuggerDisplayAttribute("OpenCircuitTest {UUID}")]
    public partial class OpenCircuitTest : DistributionWindingTest, IOpenCircuitTest, IModelElement
    {
        
        /// <summary>
        /// The backing field for the NoLoadLoss property
        /// </summary>
        private float _noLoadLoss;
        
        private static Lazy<ITypedElement> _noLoadLossAttribute = new Lazy<ITypedElement>(RetrieveNoLoadLossAttribute);
        
        /// <summary>
        /// The backing field for the ExcitingCurrent property
        /// </summary>
        private float _excitingCurrent;
        
        private static Lazy<ITypedElement> _excitingCurrentAttribute = new Lazy<ITypedElement>(RetrieveExcitingCurrentAttribute);
        
        /// <summary>
        /// The backing field for the ExcitingCurrentZero property
        /// </summary>
        private float _excitingCurrentZero;
        
        private static Lazy<ITypedElement> _excitingCurrentZeroAttribute = new Lazy<ITypedElement>(RetrieveExcitingCurrentZeroAttribute);
        
        /// <summary>
        /// The backing field for the NoLoadLossZero property
        /// </summary>
        private float _noLoadLossZero;
        
        private static Lazy<ITypedElement> _noLoadLossZeroAttribute = new Lazy<ITypedElement>(RetrieveNoLoadLossZeroAttribute);
        
        private static Lazy<ITypedElement> _measuredWindingSpecsReference = new Lazy<ITypedElement>(RetrieveMeasuredWindingSpecsReference);
        
        /// <summary>
        /// The backing field for the MeasuredWindingSpecs property
        /// </summary>
        private OpenCircuitTestMeasuredWindingSpecsCollection _measuredWindingSpecs;
        
        private static IClass _classInstance;
        
        public OpenCircuitTest()
        {
            this._measuredWindingSpecs = new OpenCircuitTestMeasuredWindingSpecsCollection(this);
            this._measuredWindingSpecs.CollectionChanging += this.MeasuredWindingSpecsCollectionChanging;
            this._measuredWindingSpecs.CollectionChanged += this.MeasuredWindingSpecsCollectionChanged;
        }
        
        /// <summary>
        /// The noLoadLoss property
        /// </summary>
        [XmlElementNameAttribute("noLoadLoss")]
        [XmlAttributeAttribute(true)]
        public virtual float NoLoadLoss
        {
            get
            {
                return this._noLoadLoss;
            }
            set
            {
                if ((this._noLoadLoss != value))
                {
                    float old = this._noLoadLoss;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNoLoadLossChanging(e);
                    this.OnPropertyChanging("NoLoadLoss", e, _noLoadLossAttribute);
                    this._noLoadLoss = value;
                    this.OnNoLoadLossChanged(e);
                    this.OnPropertyChanged("NoLoadLoss", e, _noLoadLossAttribute);
                }
            }
        }
        
        /// <summary>
        /// The excitingCurrent property
        /// </summary>
        [XmlElementNameAttribute("excitingCurrent")]
        [XmlAttributeAttribute(true)]
        public virtual float ExcitingCurrent
        {
            get
            {
                return this._excitingCurrent;
            }
            set
            {
                if ((this._excitingCurrent != value))
                {
                    float old = this._excitingCurrent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnExcitingCurrentChanging(e);
                    this.OnPropertyChanging("ExcitingCurrent", e, _excitingCurrentAttribute);
                    this._excitingCurrent = value;
                    this.OnExcitingCurrentChanged(e);
                    this.OnPropertyChanged("ExcitingCurrent", e, _excitingCurrentAttribute);
                }
            }
        }
        
        /// <summary>
        /// The excitingCurrentZero property
        /// </summary>
        [XmlElementNameAttribute("excitingCurrentZero")]
        [XmlAttributeAttribute(true)]
        public virtual float ExcitingCurrentZero
        {
            get
            {
                return this._excitingCurrentZero;
            }
            set
            {
                if ((this._excitingCurrentZero != value))
                {
                    float old = this._excitingCurrentZero;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnExcitingCurrentZeroChanging(e);
                    this.OnPropertyChanging("ExcitingCurrentZero", e, _excitingCurrentZeroAttribute);
                    this._excitingCurrentZero = value;
                    this.OnExcitingCurrentZeroChanged(e);
                    this.OnPropertyChanged("ExcitingCurrentZero", e, _excitingCurrentZeroAttribute);
                }
            }
        }
        
        /// <summary>
        /// The noLoadLossZero property
        /// </summary>
        [XmlElementNameAttribute("noLoadLossZero")]
        [XmlAttributeAttribute(true)]
        public virtual float NoLoadLossZero
        {
            get
            {
                return this._noLoadLossZero;
            }
            set
            {
                if ((this._noLoadLossZero != value))
                {
                    float old = this._noLoadLossZero;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNoLoadLossZeroChanging(e);
                    this.OnPropertyChanging("NoLoadLossZero", e, _noLoadLossZeroAttribute);
                    this._noLoadLossZero = value;
                    this.OnNoLoadLossZeroChanged(e);
                    this.OnPropertyChanged("NoLoadLossZero", e, _noLoadLossZeroAttribute);
                }
            }
        }
        
        /// <summary>
        /// The MeasuredWindingSpecs property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("OpenCircuitTests")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IToWindingSpec> MeasuredWindingSpecs
        {
            get
            {
                return this._measuredWindingSpecs;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new OpenCircuitTestReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/OpenCircuitTest")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the NoLoadLoss property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NoLoadLossChanging;
        
        /// <summary>
        /// Gets fired when the NoLoadLoss property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NoLoadLossChanged;
        
        /// <summary>
        /// Gets fired before the ExcitingCurrent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExcitingCurrentChanging;
        
        /// <summary>
        /// Gets fired when the ExcitingCurrent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExcitingCurrentChanged;
        
        /// <summary>
        /// Gets fired before the ExcitingCurrentZero property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExcitingCurrentZeroChanging;
        
        /// <summary>
        /// Gets fired when the ExcitingCurrentZero property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExcitingCurrentZeroChanged;
        
        /// <summary>
        /// Gets fired before the NoLoadLossZero property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NoLoadLossZeroChanging;
        
        /// <summary>
        /// Gets fired when the NoLoadLossZero property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NoLoadLossZeroChanged;
        
        private static ITypedElement RetrieveNoLoadLossAttribute()
        {
            return ((ITypedElement)(((ModelElement)(OpenCircuitTest.ClassInstance)).Resolve("noLoadLoss")));
        }
        
        /// <summary>
        /// Raises the NoLoadLossChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNoLoadLossChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NoLoadLossChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NoLoadLossChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNoLoadLossChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NoLoadLossChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveExcitingCurrentAttribute()
        {
            return ((ITypedElement)(((ModelElement)(OpenCircuitTest.ClassInstance)).Resolve("excitingCurrent")));
        }
        
        /// <summary>
        /// Raises the ExcitingCurrentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExcitingCurrentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExcitingCurrentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ExcitingCurrentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExcitingCurrentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExcitingCurrentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveExcitingCurrentZeroAttribute()
        {
            return ((ITypedElement)(((ModelElement)(OpenCircuitTest.ClassInstance)).Resolve("excitingCurrentZero")));
        }
        
        /// <summary>
        /// Raises the ExcitingCurrentZeroChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExcitingCurrentZeroChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExcitingCurrentZeroChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ExcitingCurrentZeroChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExcitingCurrentZeroChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExcitingCurrentZeroChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNoLoadLossZeroAttribute()
        {
            return ((ITypedElement)(((ModelElement)(OpenCircuitTest.ClassInstance)).Resolve("noLoadLossZero")));
        }
        
        /// <summary>
        /// Raises the NoLoadLossZeroChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNoLoadLossZeroChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NoLoadLossZeroChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NoLoadLossZeroChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNoLoadLossZeroChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NoLoadLossZeroChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMeasuredWindingSpecsReference()
        {
            return ((ITypedElement)(((ModelElement)(OpenCircuitTest.ClassInstance)).Resolve("MeasuredWindingSpecs")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MeasuredWindingSpecs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeasuredWindingSpecsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("MeasuredWindingSpecs", e, _measuredWindingSpecsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MeasuredWindingSpecs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeasuredWindingSpecsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MeasuredWindingSpecs", e, _measuredWindingSpecsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NOLOADLOSS"))
            {
                return this.NoLoadLoss;
            }
            if ((attribute == "EXCITINGCURRENT"))
            {
                return this.ExcitingCurrent;
            }
            if ((attribute == "EXCITINGCURRENTZERO"))
            {
                return this.ExcitingCurrentZero;
            }
            if ((attribute == "NOLOADLOSSZERO"))
            {
                return this.NoLoadLossZero;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "MEASUREDWINDINGSPECS"))
            {
                return this._measuredWindingSpecs;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NOLOADLOSS"))
            {
                this.NoLoadLoss = ((float)(value));
                return;
            }
            if ((feature == "EXCITINGCURRENT"))
            {
                this.ExcitingCurrent = ((float)(value));
                return;
            }
            if ((feature == "EXCITINGCURRENTZERO"))
            {
                this.ExcitingCurrentZero = ((float)(value));
                return;
            }
            if ((feature == "NOLOADLOSSZERO"))
            {
                this.NoLoadLossZero = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/OpenCircuitTest")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the OpenCircuitTest class
        /// </summary>
        public class OpenCircuitTestReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private OpenCircuitTest _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OpenCircuitTestReferencedElementsCollection(OpenCircuitTest parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.MeasuredWindingSpecs.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.MeasuredWindingSpecs.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.MeasuredWindingSpecs.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IToWindingSpec measuredWindingSpecsCasted = item.As<IToWindingSpec>();
                if ((measuredWindingSpecsCasted != null))
                {
                    this._parent.MeasuredWindingSpecs.Add(measuredWindingSpecsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.MeasuredWindingSpecs.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.MeasuredWindingSpecs.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> measuredWindingSpecsEnumerator = this._parent.MeasuredWindingSpecs.GetEnumerator();
                try
                {
                    for (
                    ; measuredWindingSpecsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = measuredWindingSpecsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    measuredWindingSpecsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IToWindingSpec toWindingSpecItem = item.As<IToWindingSpec>();
                if (((toWindingSpecItem != null) 
                            && this._parent.MeasuredWindingSpecs.Remove(toWindingSpecItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.MeasuredWindingSpecs).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the noLoadLoss property
        /// </summary>
        private sealed class NoLoadLossProxy : ModelPropertyChange<IOpenCircuitTest, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NoLoadLossProxy(IOpenCircuitTest modelElement) : 
                    base(modelElement, "noLoadLoss")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NoLoadLoss;
                }
                set
                {
                    this.ModelElement.NoLoadLoss = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the excitingCurrent property
        /// </summary>
        private sealed class ExcitingCurrentProxy : ModelPropertyChange<IOpenCircuitTest, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ExcitingCurrentProxy(IOpenCircuitTest modelElement) : 
                    base(modelElement, "excitingCurrent")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ExcitingCurrent;
                }
                set
                {
                    this.ModelElement.ExcitingCurrent = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the excitingCurrentZero property
        /// </summary>
        private sealed class ExcitingCurrentZeroProxy : ModelPropertyChange<IOpenCircuitTest, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ExcitingCurrentZeroProxy(IOpenCircuitTest modelElement) : 
                    base(modelElement, "excitingCurrentZero")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ExcitingCurrentZero;
                }
                set
                {
                    this.ModelElement.ExcitingCurrentZero = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the noLoadLossZero property
        /// </summary>
        private sealed class NoLoadLossZeroProxy : ModelPropertyChange<IOpenCircuitTest, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NoLoadLossZeroProxy(IOpenCircuitTest modelElement) : 
                    base(modelElement, "noLoadLossZero")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.NoLoadLossZero;
                }
                set
                {
                    this.ModelElement.NoLoadLossZero = value;
                }
            }
        }
    }
}

