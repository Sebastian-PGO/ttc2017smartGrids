using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.AssetModels
{
    
    
    /// <summary>
    /// The default implementation of the WireType class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#AssetModels")]
    [XmlNamespacePrefixAttribute("cimAssetModels")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/WireType")]
    [DebuggerDisplayAttribute("WireType {UUID}")]
    public partial class WireType : IdentifiedObject, IWireType, IModelElement
    {
        
        /// <summary>
        /// The backing field for the RAC75 property
        /// </summary>
        private float _rAC75;
        
        private static Lazy<ITypedElement> _rAC75Attribute = new Lazy<ITypedElement>(RetrieveRAC75Attribute);
        
        /// <summary>
        /// The backing field for the RAC50 property
        /// </summary>
        private float _rAC50;
        
        private static Lazy<ITypedElement> _rAC50Attribute = new Lazy<ITypedElement>(RetrieveRAC50Attribute);
        
        /// <summary>
        /// The backing field for the Radius property
        /// </summary>
        private float _radius;
        
        private static Lazy<ITypedElement> _radiusAttribute = new Lazy<ITypedElement>(RetrieveRadiusAttribute);
        
        /// <summary>
        /// The backing field for the StrandCount property
        /// </summary>
        private int _strandCount;
        
        private static Lazy<ITypedElement> _strandCountAttribute = new Lazy<ITypedElement>(RetrieveStrandCountAttribute);
        
        /// <summary>
        /// The backing field for the CoreRadius property
        /// </summary>
        private float _coreRadius;
        
        private static Lazy<ITypedElement> _coreRadiusAttribute = new Lazy<ITypedElement>(RetrieveCoreRadiusAttribute);
        
        /// <summary>
        /// The backing field for the RAC25 property
        /// </summary>
        private float _rAC25;
        
        private static Lazy<ITypedElement> _rAC25Attribute = new Lazy<ITypedElement>(RetrieveRAC25Attribute);
        
        /// <summary>
        /// The backing field for the RDC20 property
        /// </summary>
        private float _rDC20;
        
        private static Lazy<ITypedElement> _rDC20Attribute = new Lazy<ITypedElement>(RetrieveRDC20Attribute);
        
        /// <summary>
        /// The backing field for the SizeDescription property
        /// </summary>
        private string _sizeDescription;
        
        private static Lazy<ITypedElement> _sizeDescriptionAttribute = new Lazy<ITypedElement>(RetrieveSizeDescriptionAttribute);
        
        /// <summary>
        /// The backing field for the CoreStrandCount property
        /// </summary>
        private int _coreStrandCount;
        
        private static Lazy<ITypedElement> _coreStrandCountAttribute = new Lazy<ITypedElement>(RetrieveCoreStrandCountAttribute);
        
        /// <summary>
        /// The backing field for the RatedCurrent property
        /// </summary>
        private float _ratedCurrent;
        
        private static Lazy<ITypedElement> _ratedCurrentAttribute = new Lazy<ITypedElement>(RetrieveRatedCurrentAttribute);
        
        /// <summary>
        /// The backing field for the Gmr property
        /// </summary>
        private float _gmr;
        
        private static Lazy<ITypedElement> _gmrAttribute = new Lazy<ITypedElement>(RetrieveGmrAttribute);
        
        /// <summary>
        /// The backing field for the Material property
        /// </summary>
        private Nullable<ConductorMaterialKind> _material;
        
        private static Lazy<ITypedElement> _materialAttribute = new Lazy<ITypedElement>(RetrieveMaterialAttribute);
        
        private static Lazy<ITypedElement> _concentricNeutralCableInfosReference = new Lazy<ITypedElement>(RetrieveConcentricNeutralCableInfosReference);
        
        /// <summary>
        /// The backing field for the ConcentricNeutralCableInfos property
        /// </summary>
        private WireTypeConcentricNeutralCableInfosCollection _concentricNeutralCableInfos;
        
        private static Lazy<ITypedElement> _wireArrangementsReference = new Lazy<ITypedElement>(RetrieveWireArrangementsReference);
        
        /// <summary>
        /// The backing field for the WireArrangements property
        /// </summary>
        private WireTypeWireArrangementsCollection _wireArrangements;
        
        private static IClass _classInstance;
        
        public WireType()
        {
            this._concentricNeutralCableInfos = new WireTypeConcentricNeutralCableInfosCollection(this);
            this._concentricNeutralCableInfos.CollectionChanging += this.ConcentricNeutralCableInfosCollectionChanging;
            this._concentricNeutralCableInfos.CollectionChanged += this.ConcentricNeutralCableInfosCollectionChanged;
            this._wireArrangements = new WireTypeWireArrangementsCollection(this);
            this._wireArrangements.CollectionChanging += this.WireArrangementsCollectionChanging;
            this._wireArrangements.CollectionChanged += this.WireArrangementsCollectionChanged;
        }
        
        /// <summary>
        /// The rAC75 property
        /// </summary>
        [XmlElementNameAttribute("rAC75")]
        [XmlAttributeAttribute(true)]
        public virtual float RAC75
        {
            get
            {
                return this._rAC75;
            }
            set
            {
                if ((this._rAC75 != value))
                {
                    float old = this._rAC75;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRAC75Changing(e);
                    this.OnPropertyChanging("RAC75", e, _rAC75Attribute);
                    this._rAC75 = value;
                    this.OnRAC75Changed(e);
                    this.OnPropertyChanged("RAC75", e, _rAC75Attribute);
                }
            }
        }
        
        /// <summary>
        /// The rAC50 property
        /// </summary>
        [XmlElementNameAttribute("rAC50")]
        [XmlAttributeAttribute(true)]
        public virtual float RAC50
        {
            get
            {
                return this._rAC50;
            }
            set
            {
                if ((this._rAC50 != value))
                {
                    float old = this._rAC50;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRAC50Changing(e);
                    this.OnPropertyChanging("RAC50", e, _rAC50Attribute);
                    this._rAC50 = value;
                    this.OnRAC50Changed(e);
                    this.OnPropertyChanged("RAC50", e, _rAC50Attribute);
                }
            }
        }
        
        /// <summary>
        /// The radius property
        /// </summary>
        [XmlElementNameAttribute("radius")]
        [XmlAttributeAttribute(true)]
        public virtual float Radius
        {
            get
            {
                return this._radius;
            }
            set
            {
                if ((this._radius != value))
                {
                    float old = this._radius;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRadiusChanging(e);
                    this.OnPropertyChanging("Radius", e, _radiusAttribute);
                    this._radius = value;
                    this.OnRadiusChanged(e);
                    this.OnPropertyChanged("Radius", e, _radiusAttribute);
                }
            }
        }
        
        /// <summary>
        /// The strandCount property
        /// </summary>
        [XmlElementNameAttribute("strandCount")]
        [XmlAttributeAttribute(true)]
        public virtual int StrandCount
        {
            get
            {
                return this._strandCount;
            }
            set
            {
                if ((this._strandCount != value))
                {
                    int old = this._strandCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStrandCountChanging(e);
                    this.OnPropertyChanging("StrandCount", e, _strandCountAttribute);
                    this._strandCount = value;
                    this.OnStrandCountChanged(e);
                    this.OnPropertyChanged("StrandCount", e, _strandCountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The coreRadius property
        /// </summary>
        [XmlElementNameAttribute("coreRadius")]
        [XmlAttributeAttribute(true)]
        public virtual float CoreRadius
        {
            get
            {
                return this._coreRadius;
            }
            set
            {
                if ((this._coreRadius != value))
                {
                    float old = this._coreRadius;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCoreRadiusChanging(e);
                    this.OnPropertyChanging("CoreRadius", e, _coreRadiusAttribute);
                    this._coreRadius = value;
                    this.OnCoreRadiusChanged(e);
                    this.OnPropertyChanged("CoreRadius", e, _coreRadiusAttribute);
                }
            }
        }
        
        /// <summary>
        /// The rAC25 property
        /// </summary>
        [XmlElementNameAttribute("rAC25")]
        [XmlAttributeAttribute(true)]
        public virtual float RAC25
        {
            get
            {
                return this._rAC25;
            }
            set
            {
                if ((this._rAC25 != value))
                {
                    float old = this._rAC25;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRAC25Changing(e);
                    this.OnPropertyChanging("RAC25", e, _rAC25Attribute);
                    this._rAC25 = value;
                    this.OnRAC25Changed(e);
                    this.OnPropertyChanged("RAC25", e, _rAC25Attribute);
                }
            }
        }
        
        /// <summary>
        /// The rDC20 property
        /// </summary>
        [XmlElementNameAttribute("rDC20")]
        [XmlAttributeAttribute(true)]
        public virtual float RDC20
        {
            get
            {
                return this._rDC20;
            }
            set
            {
                if ((this._rDC20 != value))
                {
                    float old = this._rDC20;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRDC20Changing(e);
                    this.OnPropertyChanging("RDC20", e, _rDC20Attribute);
                    this._rDC20 = value;
                    this.OnRDC20Changed(e);
                    this.OnPropertyChanged("RDC20", e, _rDC20Attribute);
                }
            }
        }
        
        /// <summary>
        /// The sizeDescription property
        /// </summary>
        [XmlElementNameAttribute("sizeDescription")]
        [XmlAttributeAttribute(true)]
        public virtual string SizeDescription
        {
            get
            {
                return this._sizeDescription;
            }
            set
            {
                if ((this._sizeDescription != value))
                {
                    string old = this._sizeDescription;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSizeDescriptionChanging(e);
                    this.OnPropertyChanging("SizeDescription", e, _sizeDescriptionAttribute);
                    this._sizeDescription = value;
                    this.OnSizeDescriptionChanged(e);
                    this.OnPropertyChanged("SizeDescription", e, _sizeDescriptionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The coreStrandCount property
        /// </summary>
        [XmlElementNameAttribute("coreStrandCount")]
        [XmlAttributeAttribute(true)]
        public virtual int CoreStrandCount
        {
            get
            {
                return this._coreStrandCount;
            }
            set
            {
                if ((this._coreStrandCount != value))
                {
                    int old = this._coreStrandCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCoreStrandCountChanging(e);
                    this.OnPropertyChanging("CoreStrandCount", e, _coreStrandCountAttribute);
                    this._coreStrandCount = value;
                    this.OnCoreStrandCountChanged(e);
                    this.OnPropertyChanged("CoreStrandCount", e, _coreStrandCountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ratedCurrent property
        /// </summary>
        [XmlElementNameAttribute("ratedCurrent")]
        [XmlAttributeAttribute(true)]
        public virtual float RatedCurrent
        {
            get
            {
                return this._ratedCurrent;
            }
            set
            {
                if ((this._ratedCurrent != value))
                {
                    float old = this._ratedCurrent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatedCurrentChanging(e);
                    this.OnPropertyChanging("RatedCurrent", e, _ratedCurrentAttribute);
                    this._ratedCurrent = value;
                    this.OnRatedCurrentChanged(e);
                    this.OnPropertyChanged("RatedCurrent", e, _ratedCurrentAttribute);
                }
            }
        }
        
        /// <summary>
        /// The gmr property
        /// </summary>
        [XmlElementNameAttribute("gmr")]
        [XmlAttributeAttribute(true)]
        public virtual float Gmr
        {
            get
            {
                return this._gmr;
            }
            set
            {
                if ((this._gmr != value))
                {
                    float old = this._gmr;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGmrChanging(e);
                    this.OnPropertyChanging("Gmr", e, _gmrAttribute);
                    this._gmr = value;
                    this.OnGmrChanged(e);
                    this.OnPropertyChanged("Gmr", e, _gmrAttribute);
                }
            }
        }
        
        /// <summary>
        /// The material property
        /// </summary>
        [XmlElementNameAttribute("material")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<ConductorMaterialKind> Material
        {
            get
            {
                return this._material;
            }
            set
            {
                if ((this._material != value))
                {
                    Nullable<ConductorMaterialKind> old = this._material;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMaterialChanging(e);
                    this.OnPropertyChanging("Material", e, _materialAttribute);
                    this._material = value;
                    this.OnMaterialChanged(e);
                    this.OnPropertyChanged("Material", e, _materialAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ConcentricNeutralCableInfos property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WireType")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IConcentricNeutralCableInfo> ConcentricNeutralCableInfos
        {
            get
            {
                return this._concentricNeutralCableInfos;
            }
        }
        
        /// <summary>
        /// The WireArrangements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("WireType")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWireArrangement> WireArrangements
        {
            get
            {
                return this._wireArrangements;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new WireTypeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/WireType")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the RAC75 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RAC75Changing;
        
        /// <summary>
        /// Gets fired when the RAC75 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RAC75Changed;
        
        /// <summary>
        /// Gets fired before the RAC50 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RAC50Changing;
        
        /// <summary>
        /// Gets fired when the RAC50 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RAC50Changed;
        
        /// <summary>
        /// Gets fired before the Radius property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RadiusChanging;
        
        /// <summary>
        /// Gets fired when the Radius property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RadiusChanged;
        
        /// <summary>
        /// Gets fired before the StrandCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrandCountChanging;
        
        /// <summary>
        /// Gets fired when the StrandCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StrandCountChanged;
        
        /// <summary>
        /// Gets fired before the CoreRadius property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoreRadiusChanging;
        
        /// <summary>
        /// Gets fired when the CoreRadius property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoreRadiusChanged;
        
        /// <summary>
        /// Gets fired before the RAC25 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RAC25Changing;
        
        /// <summary>
        /// Gets fired when the RAC25 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RAC25Changed;
        
        /// <summary>
        /// Gets fired before the RDC20 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RDC20Changing;
        
        /// <summary>
        /// Gets fired when the RDC20 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RDC20Changed;
        
        /// <summary>
        /// Gets fired before the SizeDescription property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SizeDescriptionChanging;
        
        /// <summary>
        /// Gets fired when the SizeDescription property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SizeDescriptionChanged;
        
        /// <summary>
        /// Gets fired before the CoreStrandCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoreStrandCountChanging;
        
        /// <summary>
        /// Gets fired when the CoreStrandCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoreStrandCountChanged;
        
        /// <summary>
        /// Gets fired before the RatedCurrent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedCurrentChanging;
        
        /// <summary>
        /// Gets fired when the RatedCurrent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedCurrentChanged;
        
        /// <summary>
        /// Gets fired before the Gmr property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmrChanging;
        
        /// <summary>
        /// Gets fired when the Gmr property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GmrChanged;
        
        /// <summary>
        /// Gets fired before the Material property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaterialChanging;
        
        /// <summary>
        /// Gets fired when the Material property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MaterialChanged;
        
        private static ITypedElement RetrieveRAC75Attribute()
        {
            return ((ITypedElement)(((ModelElement)(WireType.ClassInstance)).Resolve("rAC75")));
        }
        
        /// <summary>
        /// Raises the RAC75Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRAC75Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RAC75Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RAC75Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRAC75Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RAC75Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRAC50Attribute()
        {
            return ((ITypedElement)(((ModelElement)(WireType.ClassInstance)).Resolve("rAC50")));
        }
        
        /// <summary>
        /// Raises the RAC50Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRAC50Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RAC50Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RAC50Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRAC50Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RAC50Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRadiusAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WireType.ClassInstance)).Resolve("radius")));
        }
        
        /// <summary>
        /// Raises the RadiusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRadiusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RadiusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RadiusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRadiusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RadiusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStrandCountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WireType.ClassInstance)).Resolve("strandCount")));
        }
        
        /// <summary>
        /// Raises the StrandCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrandCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrandCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StrandCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStrandCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StrandCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCoreRadiusAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WireType.ClassInstance)).Resolve("coreRadius")));
        }
        
        /// <summary>
        /// Raises the CoreRadiusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoreRadiusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoreRadiusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CoreRadiusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoreRadiusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoreRadiusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRAC25Attribute()
        {
            return ((ITypedElement)(((ModelElement)(WireType.ClassInstance)).Resolve("rAC25")));
        }
        
        /// <summary>
        /// Raises the RAC25Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRAC25Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RAC25Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RAC25Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRAC25Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RAC25Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRDC20Attribute()
        {
            return ((ITypedElement)(((ModelElement)(WireType.ClassInstance)).Resolve("rDC20")));
        }
        
        /// <summary>
        /// Raises the RDC20Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRDC20Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RDC20Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RDC20Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRDC20Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RDC20Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSizeDescriptionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WireType.ClassInstance)).Resolve("sizeDescription")));
        }
        
        /// <summary>
        /// Raises the SizeDescriptionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSizeDescriptionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SizeDescriptionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SizeDescriptionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSizeDescriptionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SizeDescriptionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCoreStrandCountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WireType.ClassInstance)).Resolve("coreStrandCount")));
        }
        
        /// <summary>
        /// Raises the CoreStrandCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoreStrandCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoreStrandCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CoreStrandCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoreStrandCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoreStrandCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRatedCurrentAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WireType.ClassInstance)).Resolve("ratedCurrent")));
        }
        
        /// <summary>
        /// Raises the RatedCurrentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedCurrentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedCurrentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedCurrentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedCurrentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedCurrentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGmrAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WireType.ClassInstance)).Resolve("gmr")));
        }
        
        /// <summary>
        /// Raises the GmrChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmrChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmrChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GmrChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGmrChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GmrChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMaterialAttribute()
        {
            return ((ITypedElement)(((ModelElement)(WireType.ClassInstance)).Resolve("material")));
        }
        
        /// <summary>
        /// Raises the MaterialChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaterialChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaterialChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MaterialChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMaterialChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MaterialChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveConcentricNeutralCableInfosReference()
        {
            return ((ITypedElement)(((ModelElement)(WireType.ClassInstance)).Resolve("ConcentricNeutralCableInfos")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ConcentricNeutralCableInfos property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConcentricNeutralCableInfosCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ConcentricNeutralCableInfos", e, _concentricNeutralCableInfosReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ConcentricNeutralCableInfos property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConcentricNeutralCableInfosCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ConcentricNeutralCableInfos", e, _concentricNeutralCableInfosReference);
        }
        
        private static ITypedElement RetrieveWireArrangementsReference()
        {
            return ((ITypedElement)(((ModelElement)(WireType.ClassInstance)).Resolve("WireArrangements")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WireArrangements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WireArrangementsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("WireArrangements", e, _wireArrangementsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WireArrangements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WireArrangementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WireArrangements", e, _wireArrangementsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "RAC75"))
            {
                return this.RAC75;
            }
            if ((attribute == "RAC50"))
            {
                return this.RAC50;
            }
            if ((attribute == "RADIUS"))
            {
                return this.Radius;
            }
            if ((attribute == "STRANDCOUNT"))
            {
                return this.StrandCount;
            }
            if ((attribute == "CORERADIUS"))
            {
                return this.CoreRadius;
            }
            if ((attribute == "RAC25"))
            {
                return this.RAC25;
            }
            if ((attribute == "RDC20"))
            {
                return this.RDC20;
            }
            if ((attribute == "SIZEDESCRIPTION"))
            {
                return this.SizeDescription;
            }
            if ((attribute == "CORESTRANDCOUNT"))
            {
                return this.CoreStrandCount;
            }
            if ((attribute == "RATEDCURRENT"))
            {
                return this.RatedCurrent;
            }
            if ((attribute == "GMR"))
            {
                return this.Gmr;
            }
            if ((attribute == "MATERIAL"))
            {
                return this.Material;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CONCENTRICNEUTRALCABLEINFOS"))
            {
                return this._concentricNeutralCableInfos;
            }
            if ((feature == "WIREARRANGEMENTS"))
            {
                return this._wireArrangements;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "RAC75"))
            {
                this.RAC75 = ((float)(value));
                return;
            }
            if ((feature == "RAC50"))
            {
                this.RAC50 = ((float)(value));
                return;
            }
            if ((feature == "RADIUS"))
            {
                this.Radius = ((float)(value));
                return;
            }
            if ((feature == "STRANDCOUNT"))
            {
                this.StrandCount = ((int)(value));
                return;
            }
            if ((feature == "CORERADIUS"))
            {
                this.CoreRadius = ((float)(value));
                return;
            }
            if ((feature == "RAC25"))
            {
                this.RAC25 = ((float)(value));
                return;
            }
            if ((feature == "RDC20"))
            {
                this.RDC20 = ((float)(value));
                return;
            }
            if ((feature == "SIZEDESCRIPTION"))
            {
                this.SizeDescription = ((string)(value));
                return;
            }
            if ((feature == "CORESTRANDCOUNT"))
            {
                this.CoreStrandCount = ((int)(value));
                return;
            }
            if ((feature == "RATEDCURRENT"))
            {
                this.RatedCurrent = ((float)(value));
                return;
            }
            if ((feature == "GMR"))
            {
                this.Gmr = ((float)(value));
                return;
            }
            if ((feature == "MATERIAL"))
            {
                this.Material = ((ConductorMaterialKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/WireType")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the WireType class
        /// </summary>
        public class WireTypeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private WireType _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public WireTypeReferencedElementsCollection(WireType parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ConcentricNeutralCableInfos.Count);
                    count = (count + this._parent.WireArrangements.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ConcentricNeutralCableInfos.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WireArrangements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ConcentricNeutralCableInfos.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WireArrangements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IConcentricNeutralCableInfo concentricNeutralCableInfosCasted = item.As<IConcentricNeutralCableInfo>();
                if ((concentricNeutralCableInfosCasted != null))
                {
                    this._parent.ConcentricNeutralCableInfos.Add(concentricNeutralCableInfosCasted);
                }
                IWireArrangement wireArrangementsCasted = item.As<IWireArrangement>();
                if ((wireArrangementsCasted != null))
                {
                    this._parent.WireArrangements.Add(wireArrangementsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ConcentricNeutralCableInfos.Clear();
                this._parent.WireArrangements.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ConcentricNeutralCableInfos.Contains(item))
                {
                    return true;
                }
                if (this._parent.WireArrangements.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> concentricNeutralCableInfosEnumerator = this._parent.ConcentricNeutralCableInfos.GetEnumerator();
                try
                {
                    for (
                    ; concentricNeutralCableInfosEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = concentricNeutralCableInfosEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    concentricNeutralCableInfosEnumerator.Dispose();
                }
                IEnumerator<IModelElement> wireArrangementsEnumerator = this._parent.WireArrangements.GetEnumerator();
                try
                {
                    for (
                    ; wireArrangementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = wireArrangementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    wireArrangementsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IConcentricNeutralCableInfo concentricNeutralCableInfoItem = item.As<IConcentricNeutralCableInfo>();
                if (((concentricNeutralCableInfoItem != null) 
                            && this._parent.ConcentricNeutralCableInfos.Remove(concentricNeutralCableInfoItem)))
                {
                    return true;
                }
                IWireArrangement wireArrangementItem = item.As<IWireArrangement>();
                if (((wireArrangementItem != null) 
                            && this._parent.WireArrangements.Remove(wireArrangementItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ConcentricNeutralCableInfos).Concat(this._parent.WireArrangements).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rAC75 property
        /// </summary>
        private sealed class RAC75Proxy : ModelPropertyChange<IWireType, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RAC75Proxy(IWireType modelElement) : 
                    base(modelElement, "rAC75")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RAC75;
                }
                set
                {
                    this.ModelElement.RAC75 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rAC50 property
        /// </summary>
        private sealed class RAC50Proxy : ModelPropertyChange<IWireType, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RAC50Proxy(IWireType modelElement) : 
                    base(modelElement, "rAC50")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RAC50;
                }
                set
                {
                    this.ModelElement.RAC50 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the radius property
        /// </summary>
        private sealed class RadiusProxy : ModelPropertyChange<IWireType, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RadiusProxy(IWireType modelElement) : 
                    base(modelElement, "radius")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Radius;
                }
                set
                {
                    this.ModelElement.Radius = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the strandCount property
        /// </summary>
        private sealed class StrandCountProxy : ModelPropertyChange<IWireType, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StrandCountProxy(IWireType modelElement) : 
                    base(modelElement, "strandCount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.StrandCount;
                }
                set
                {
                    this.ModelElement.StrandCount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the coreRadius property
        /// </summary>
        private sealed class CoreRadiusProxy : ModelPropertyChange<IWireType, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CoreRadiusProxy(IWireType modelElement) : 
                    base(modelElement, "coreRadius")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CoreRadius;
                }
                set
                {
                    this.ModelElement.CoreRadius = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rAC25 property
        /// </summary>
        private sealed class RAC25Proxy : ModelPropertyChange<IWireType, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RAC25Proxy(IWireType modelElement) : 
                    base(modelElement, "rAC25")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RAC25;
                }
                set
                {
                    this.ModelElement.RAC25 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the rDC20 property
        /// </summary>
        private sealed class RDC20Proxy : ModelPropertyChange<IWireType, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RDC20Proxy(IWireType modelElement) : 
                    base(modelElement, "rDC20")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RDC20;
                }
                set
                {
                    this.ModelElement.RDC20 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sizeDescription property
        /// </summary>
        private sealed class SizeDescriptionProxy : ModelPropertyChange<IWireType, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SizeDescriptionProxy(IWireType modelElement) : 
                    base(modelElement, "sizeDescription")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.SizeDescription;
                }
                set
                {
                    this.ModelElement.SizeDescription = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the coreStrandCount property
        /// </summary>
        private sealed class CoreStrandCountProxy : ModelPropertyChange<IWireType, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CoreStrandCountProxy(IWireType modelElement) : 
                    base(modelElement, "coreStrandCount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.CoreStrandCount;
                }
                set
                {
                    this.ModelElement.CoreStrandCount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ratedCurrent property
        /// </summary>
        private sealed class RatedCurrentProxy : ModelPropertyChange<IWireType, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatedCurrentProxy(IWireType modelElement) : 
                    base(modelElement, "ratedCurrent")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RatedCurrent;
                }
                set
                {
                    this.ModelElement.RatedCurrent = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the gmr property
        /// </summary>
        private sealed class GmrProxy : ModelPropertyChange<IWireType, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GmrProxy(IWireType modelElement) : 
                    base(modelElement, "gmr")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Gmr;
                }
                set
                {
                    this.ModelElement.Gmr = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the material property
        /// </summary>
        private sealed class MaterialProxy : ModelPropertyChange<IWireType, Nullable<ConductorMaterialKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MaterialProxy(IWireType modelElement) : 
                    base(modelElement, "material")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<ConductorMaterialKind> Value
            {
                get
                {
                    return this.ModelElement.Material;
                }
                set
                {
                    this.ModelElement.Material = value;
                }
            }
        }
    }
}

