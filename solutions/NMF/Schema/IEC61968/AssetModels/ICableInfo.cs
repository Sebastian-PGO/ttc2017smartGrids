using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.AssetModels
{
    
    
    /// <summary>
    /// The public interface for CableInfo
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(CableInfo))]
    [XmlDefaultImplementationTypeAttribute(typeof(CableInfo))]
    public interface ICableInfo : IModelElement, IConductorInfo
    {
        
        /// <summary>
        /// The sheathAsNeutral property
        /// </summary>
        bool SheathAsNeutral
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isStrandFill property
        /// </summary>
        bool IsStrandFill
        {
            get;
            set;
        }
        
        /// <summary>
        /// The outerJacketKind property
        /// </summary>
        Nullable<CableOuterJacketKind> OuterJacketKind
        {
            get;
            set;
        }
        
        /// <summary>
        /// The constructionKind property
        /// </summary>
        Nullable<CableConstructionKind> ConstructionKind
        {
            get;
            set;
        }
        
        /// <summary>
        /// The diameterOverScreen property
        /// </summary>
        float DiameterOverScreen
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nominalTemperature property
        /// </summary>
        float NominalTemperature
        {
            get;
            set;
        }
        
        /// <summary>
        /// The diameterOverJacket property
        /// </summary>
        float DiameterOverJacket
        {
            get;
            set;
        }
        
        /// <summary>
        /// The diameterOverCore property
        /// </summary>
        float DiameterOverCore
        {
            get;
            set;
        }
        
        /// <summary>
        /// The diameterOverInsulation property
        /// </summary>
        float DiameterOverInsulation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The shieldMaterial property
        /// </summary>
        Nullable<CableShieldMaterialKind> ShieldMaterial
        {
            get;
            set;
        }
        
        /// <summary>
        /// The DuctBankInfo property
        /// </summary>
        IDuctInfo DuctBankInfo
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the SheathAsNeutral property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SheathAsNeutralChanging;
        
        /// <summary>
        /// Gets fired when the SheathAsNeutral property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SheathAsNeutralChanged;
        
        /// <summary>
        /// Gets fired before the IsStrandFill property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsStrandFillChanging;
        
        /// <summary>
        /// Gets fired when the IsStrandFill property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsStrandFillChanged;
        
        /// <summary>
        /// Gets fired before the OuterJacketKind property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OuterJacketKindChanging;
        
        /// <summary>
        /// Gets fired when the OuterJacketKind property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OuterJacketKindChanged;
        
        /// <summary>
        /// Gets fired before the ConstructionKind property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ConstructionKindChanging;
        
        /// <summary>
        /// Gets fired when the ConstructionKind property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ConstructionKindChanged;
        
        /// <summary>
        /// Gets fired before the DiameterOverScreen property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DiameterOverScreenChanging;
        
        /// <summary>
        /// Gets fired when the DiameterOverScreen property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DiameterOverScreenChanged;
        
        /// <summary>
        /// Gets fired before the NominalTemperature property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NominalTemperatureChanging;
        
        /// <summary>
        /// Gets fired when the NominalTemperature property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NominalTemperatureChanged;
        
        /// <summary>
        /// Gets fired before the DiameterOverJacket property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DiameterOverJacketChanging;
        
        /// <summary>
        /// Gets fired when the DiameterOverJacket property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DiameterOverJacketChanged;
        
        /// <summary>
        /// Gets fired before the DiameterOverCore property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DiameterOverCoreChanging;
        
        /// <summary>
        /// Gets fired when the DiameterOverCore property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DiameterOverCoreChanged;
        
        /// <summary>
        /// Gets fired before the DiameterOverInsulation property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DiameterOverInsulationChanging;
        
        /// <summary>
        /// Gets fired when the DiameterOverInsulation property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DiameterOverInsulationChanged;
        
        /// <summary>
        /// Gets fired before the ShieldMaterial property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ShieldMaterialChanging;
        
        /// <summary>
        /// Gets fired when the ShieldMaterial property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ShieldMaterialChanged;
        
        /// <summary>
        /// Gets fired before the DuctBankInfo property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DuctBankInfoChanging;
        
        /// <summary>
        /// Gets fired when the DuctBankInfo property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DuctBankInfoChanged;
    }
}

