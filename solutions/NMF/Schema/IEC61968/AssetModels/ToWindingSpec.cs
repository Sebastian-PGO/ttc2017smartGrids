using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfTypeAsset;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.AssetModels
{
    
    
    /// <summary>
    /// The default implementation of the ToWindingSpec class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#AssetModels")]
    [XmlNamespacePrefixAttribute("cimAssetModels")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/ToWindingSpec")]
    [DebuggerDisplayAttribute("ToWindingSpec {UUID}")]
    public partial class ToWindingSpec : IdentifiedObject, IToWindingSpec, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Voltage property
        /// </summary>
        private float _voltage;
        
        private static Lazy<ITypedElement> _voltageAttribute = new Lazy<ITypedElement>(RetrieveVoltageAttribute);
        
        /// <summary>
        /// The backing field for the ToTapStep property
        /// </summary>
        private int _toTapStep;
        
        private static Lazy<ITypedElement> _toTapStepAttribute = new Lazy<ITypedElement>(RetrieveToTapStepAttribute);
        
        /// <summary>
        /// The backing field for the PhaseShift property
        /// </summary>
        private float _phaseShift;
        
        private static Lazy<ITypedElement> _phaseShiftAttribute = new Lazy<ITypedElement>(RetrievePhaseShiftAttribute);
        
        private static Lazy<ITypedElement> _openCircuitTestsReference = new Lazy<ITypedElement>(RetrieveOpenCircuitTestsReference);
        
        /// <summary>
        /// The backing field for the OpenCircuitTests property
        /// </summary>
        private ToWindingSpecOpenCircuitTestsCollection _openCircuitTests;
        
        private static Lazy<ITypedElement> _toWindingReference = new Lazy<ITypedElement>(RetrieveToWindingReference);
        
        /// <summary>
        /// The backing field for the ToWinding property
        /// </summary>
        private IWindingInfo _toWinding;
        
        private static Lazy<ITypedElement> _shortCircuitTestsReference = new Lazy<ITypedElement>(RetrieveShortCircuitTestsReference);
        
        /// <summary>
        /// The backing field for the ShortCircuitTests property
        /// </summary>
        private ToWindingSpecShortCircuitTestsCollection _shortCircuitTests;
        
        private static IClass _classInstance;
        
        public ToWindingSpec()
        {
            this._openCircuitTests = new ToWindingSpecOpenCircuitTestsCollection(this);
            this._openCircuitTests.CollectionChanging += this.OpenCircuitTestsCollectionChanging;
            this._openCircuitTests.CollectionChanged += this.OpenCircuitTestsCollectionChanged;
            this._shortCircuitTests = new ToWindingSpecShortCircuitTestsCollection(this);
            this._shortCircuitTests.CollectionChanging += this.ShortCircuitTestsCollectionChanging;
            this._shortCircuitTests.CollectionChanged += this.ShortCircuitTestsCollectionChanged;
        }
        
        /// <summary>
        /// The voltage property
        /// </summary>
        [XmlElementNameAttribute("voltage")]
        [XmlAttributeAttribute(true)]
        public virtual float Voltage
        {
            get
            {
                return this._voltage;
            }
            set
            {
                if ((this._voltage != value))
                {
                    float old = this._voltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageChanging(e);
                    this.OnPropertyChanging("Voltage", e, _voltageAttribute);
                    this._voltage = value;
                    this.OnVoltageChanged(e);
                    this.OnPropertyChanged("Voltage", e, _voltageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The toTapStep property
        /// </summary>
        [XmlElementNameAttribute("toTapStep")]
        [XmlAttributeAttribute(true)]
        public virtual int ToTapStep
        {
            get
            {
                return this._toTapStep;
            }
            set
            {
                if ((this._toTapStep != value))
                {
                    int old = this._toTapStep;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnToTapStepChanging(e);
                    this.OnPropertyChanging("ToTapStep", e, _toTapStepAttribute);
                    this._toTapStep = value;
                    this.OnToTapStepChanged(e);
                    this.OnPropertyChanged("ToTapStep", e, _toTapStepAttribute);
                }
            }
        }
        
        /// <summary>
        /// The phaseShift property
        /// </summary>
        [XmlElementNameAttribute("phaseShift")]
        [XmlAttributeAttribute(true)]
        public virtual float PhaseShift
        {
            get
            {
                return this._phaseShift;
            }
            set
            {
                if ((this._phaseShift != value))
                {
                    float old = this._phaseShift;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhaseShiftChanging(e);
                    this.OnPropertyChanging("PhaseShift", e, _phaseShiftAttribute);
                    this._phaseShift = value;
                    this.OnPhaseShiftChanged(e);
                    this.OnPropertyChanged("PhaseShift", e, _phaseShiftAttribute);
                }
            }
        }
        
        /// <summary>
        /// The OpenCircuitTests property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MeasuredWindingSpecs")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IOpenCircuitTest> OpenCircuitTests
        {
            get
            {
                return this._openCircuitTests;
            }
        }
        
        /// <summary>
        /// The ToWinding property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ToWindingSpecs")]
        public virtual IWindingInfo ToWinding
        {
            get
            {
                return this._toWinding;
            }
            set
            {
                if ((this._toWinding != value))
                {
                    IWindingInfo old = this._toWinding;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnToWindingChanging(e);
                    this.OnPropertyChanging("ToWinding", e, _toWindingReference);
                    this._toWinding = value;
                    if ((old != null))
                    {
                        old.ToWindingSpecs.Remove(this);
                        old.Deleted -= this.OnResetToWinding;
                    }
                    if ((value != null))
                    {
                        value.ToWindingSpecs.Add(this);
                        value.Deleted += this.OnResetToWinding;
                    }
                    this.OnToWindingChanged(e);
                    this.OnPropertyChanged("ToWinding", e, _toWindingReference);
                }
            }
        }
        
        /// <summary>
        /// The ShortCircuitTests property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ShortedWindingSpecs")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IShortCircuitTest> ShortCircuitTests
        {
            get
            {
                return this._shortCircuitTests;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ToWindingSpecReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/ToWindingSpec")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Voltage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageChanging;
        
        /// <summary>
        /// Gets fired when the Voltage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageChanged;
        
        /// <summary>
        /// Gets fired before the ToTapStep property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ToTapStepChanging;
        
        /// <summary>
        /// Gets fired when the ToTapStep property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ToTapStepChanged;
        
        /// <summary>
        /// Gets fired before the PhaseShift property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseShiftChanging;
        
        /// <summary>
        /// Gets fired when the PhaseShift property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseShiftChanged;
        
        /// <summary>
        /// Gets fired before the ToWinding property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ToWindingChanging;
        
        /// <summary>
        /// Gets fired when the ToWinding property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ToWindingChanged;
        
        private static ITypedElement RetrieveVoltageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ToWindingSpec.ClassInstance)).Resolve("voltage")));
        }
        
        /// <summary>
        /// Raises the VoltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveToTapStepAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ToWindingSpec.ClassInstance)).Resolve("toTapStep")));
        }
        
        /// <summary>
        /// Raises the ToTapStepChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnToTapStepChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ToTapStepChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ToTapStepChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnToTapStepChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ToTapStepChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePhaseShiftAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ToWindingSpec.ClassInstance)).Resolve("phaseShift")));
        }
        
        /// <summary>
        /// Raises the PhaseShiftChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseShiftChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseShiftChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhaseShiftChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseShiftChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseShiftChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOpenCircuitTestsReference()
        {
            return ((ITypedElement)(((ModelElement)(ToWindingSpec.ClassInstance)).Resolve("OpenCircuitTests")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the OpenCircuitTests property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OpenCircuitTestsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("OpenCircuitTests", e, _openCircuitTestsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the OpenCircuitTests property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OpenCircuitTestsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("OpenCircuitTests", e, _openCircuitTestsReference);
        }
        
        private static ITypedElement RetrieveToWindingReference()
        {
            return ((ITypedElement)(((ModelElement)(ToWindingSpec.ClassInstance)).Resolve("ToWinding")));
        }
        
        /// <summary>
        /// Raises the ToWindingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnToWindingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ToWindingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ToWindingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnToWindingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ToWindingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ToWinding property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetToWinding(object sender, System.EventArgs eventArgs)
        {
            this.ToWinding = null;
        }
        
        private static ITypedElement RetrieveShortCircuitTestsReference()
        {
            return ((ITypedElement)(((ModelElement)(ToWindingSpec.ClassInstance)).Resolve("ShortCircuitTests")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ShortCircuitTests property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ShortCircuitTestsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ShortCircuitTests", e, _shortCircuitTestsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ShortCircuitTests property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ShortCircuitTestsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ShortCircuitTests", e, _shortCircuitTestsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "VOLTAGE"))
            {
                return this.Voltage;
            }
            if ((attribute == "TOTAPSTEP"))
            {
                return this.ToTapStep;
            }
            if ((attribute == "PHASESHIFT"))
            {
                return this.PhaseShift;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "OPENCIRCUITTESTS"))
            {
                return this._openCircuitTests;
            }
            if ((feature == "SHORTCIRCUITTESTS"))
            {
                return this._shortCircuitTests;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TOWINDING"))
            {
                this.ToWinding = ((IWindingInfo)(value));
                return;
            }
            if ((feature == "VOLTAGE"))
            {
                this.Voltage = ((float)(value));
                return;
            }
            if ((feature == "TOTAPSTEP"))
            {
                this.ToTapStep = ((int)(value));
                return;
            }
            if ((feature == "PHASESHIFT"))
            {
                this.PhaseShift = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ToWinding"))
            {
                return new ToWindingProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ToWinding"))
            {
                return new ToWindingProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/AssetModels/ToWindingSpec")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ToWindingSpec class
        /// </summary>
        public class ToWindingSpecReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ToWindingSpec _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ToWindingSpecReferencedElementsCollection(ToWindingSpec parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.OpenCircuitTests.Count);
                    if ((this._parent.ToWinding != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ShortCircuitTests.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OpenCircuitTests.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ToWindingChanged += this.PropagateValueChanges;
                this._parent.ShortCircuitTests.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OpenCircuitTests.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ToWindingChanged -= this.PropagateValueChanges;
                this._parent.ShortCircuitTests.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IOpenCircuitTest openCircuitTestsCasted = item.As<IOpenCircuitTest>();
                if ((openCircuitTestsCasted != null))
                {
                    this._parent.OpenCircuitTests.Add(openCircuitTestsCasted);
                }
                if ((this._parent.ToWinding == null))
                {
                    IWindingInfo toWindingCasted = item.As<IWindingInfo>();
                    if ((toWindingCasted != null))
                    {
                        this._parent.ToWinding = toWindingCasted;
                        return;
                    }
                }
                IShortCircuitTest shortCircuitTestsCasted = item.As<IShortCircuitTest>();
                if ((shortCircuitTestsCasted != null))
                {
                    this._parent.ShortCircuitTests.Add(shortCircuitTestsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OpenCircuitTests.Clear();
                this._parent.ToWinding = null;
                this._parent.ShortCircuitTests.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.OpenCircuitTests.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ToWinding))
                {
                    return true;
                }
                if (this._parent.ShortCircuitTests.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> openCircuitTestsEnumerator = this._parent.OpenCircuitTests.GetEnumerator();
                try
                {
                    for (
                    ; openCircuitTestsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = openCircuitTestsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    openCircuitTestsEnumerator.Dispose();
                }
                if ((this._parent.ToWinding != null))
                {
                    array[arrayIndex] = this._parent.ToWinding;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> shortCircuitTestsEnumerator = this._parent.ShortCircuitTests.GetEnumerator();
                try
                {
                    for (
                    ; shortCircuitTestsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = shortCircuitTestsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    shortCircuitTestsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IOpenCircuitTest openCircuitTestItem = item.As<IOpenCircuitTest>();
                if (((openCircuitTestItem != null) 
                            && this._parent.OpenCircuitTests.Remove(openCircuitTestItem)))
                {
                    return true;
                }
                if ((this._parent.ToWinding == item))
                {
                    this._parent.ToWinding = null;
                    return true;
                }
                IShortCircuitTest shortCircuitTestItem = item.As<IShortCircuitTest>();
                if (((shortCircuitTestItem != null) 
                            && this._parent.ShortCircuitTests.Remove(shortCircuitTestItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OpenCircuitTests).Concat(this._parent.ToWinding).Concat(this._parent.ShortCircuitTests).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the voltage property
        /// </summary>
        private sealed class VoltageProxy : ModelPropertyChange<IToWindingSpec, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageProxy(IToWindingSpec modelElement) : 
                    base(modelElement, "voltage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Voltage;
                }
                set
                {
                    this.ModelElement.Voltage = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the toTapStep property
        /// </summary>
        private sealed class ToTapStepProxy : ModelPropertyChange<IToWindingSpec, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ToTapStepProxy(IToWindingSpec modelElement) : 
                    base(modelElement, "toTapStep")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.ToTapStep;
                }
                set
                {
                    this.ModelElement.ToTapStep = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phaseShift property
        /// </summary>
        private sealed class PhaseShiftProxy : ModelPropertyChange<IToWindingSpec, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhaseShiftProxy(IToWindingSpec modelElement) : 
                    base(modelElement, "phaseShift")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PhaseShift;
                }
                set
                {
                    this.ModelElement.PhaseShift = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ToWinding property
        /// </summary>
        private sealed class ToWindingProxy : ModelPropertyChange<IToWindingSpec, IWindingInfo>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ToWindingProxy(IToWindingSpec modelElement) : 
                    base(modelElement, "ToWinding")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWindingInfo Value
            {
                get
                {
                    return this.ModelElement.ToWinding;
                }
                set
                {
                    this.ModelElement.ToWinding = value;
                }
            }
        }
    }
}

