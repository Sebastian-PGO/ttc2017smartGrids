using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.Customers
{
    
    
    /// <summary>
    /// The default implementation of the ServiceLocation class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Customers")]
    [XmlNamespacePrefixAttribute("cimCustomers")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Customers/ServiceLocation")]
    [DebuggerDisplayAttribute("ServiceLocation {UUID}")]
    public partial class ServiceLocation : Location, IServiceLocation, IModelElement
    {
        
        /// <summary>
        /// The backing field for the NeedsInspection property
        /// </summary>
        private bool _needsInspection;
        
        private static Lazy<ITypedElement> _needsInspectionAttribute = new Lazy<ITypedElement>(RetrieveNeedsInspectionAttribute);
        
        /// <summary>
        /// The backing field for the AccessMethod property
        /// </summary>
        private string _accessMethod;
        
        private static Lazy<ITypedElement> _accessMethodAttribute = new Lazy<ITypedElement>(RetrieveAccessMethodAttribute);
        
        /// <summary>
        /// The backing field for the SiteAccessProblem property
        /// </summary>
        private string _siteAccessProblem;
        
        private static Lazy<ITypedElement> _siteAccessProblemAttribute = new Lazy<ITypedElement>(RetrieveSiteAccessProblemAttribute);
        
        private static Lazy<ITypedElement> _serviceDeliveryPointsReference = new Lazy<ITypedElement>(RetrieveServiceDeliveryPointsReference);
        
        /// <summary>
        /// The backing field for the ServiceDeliveryPoints property
        /// </summary>
        private ServiceLocationServiceDeliveryPointsCollection _serviceDeliveryPoints;
        
        private static Lazy<ITypedElement> _erpPersonsReference = new Lazy<ITypedElement>(RetrieveErpPersonsReference);
        
        /// <summary>
        /// The backing field for the ErpPersons property
        /// </summary>
        private ServiceLocationErpPersonsCollection _erpPersons;
        
        private static Lazy<ITypedElement> _customerAgreementsReference = new Lazy<ITypedElement>(RetrieveCustomerAgreementsReference);
        
        /// <summary>
        /// The backing field for the CustomerAgreements property
        /// </summary>
        private ServiceLocationCustomerAgreementsCollection _customerAgreements;
        
        private static Lazy<ITypedElement> _endDeviceAssetsReference = new Lazy<ITypedElement>(RetrieveEndDeviceAssetsReference);
        
        /// <summary>
        /// The backing field for the EndDeviceAssets property
        /// </summary>
        private ServiceLocationEndDeviceAssetsCollection _endDeviceAssets;
        
        private static IClass _classInstance;
        
        public ServiceLocation()
        {
            this._serviceDeliveryPoints = new ServiceLocationServiceDeliveryPointsCollection(this);
            this._serviceDeliveryPoints.CollectionChanging += this.ServiceDeliveryPointsCollectionChanging;
            this._serviceDeliveryPoints.CollectionChanged += this.ServiceDeliveryPointsCollectionChanged;
            this._erpPersons = new ServiceLocationErpPersonsCollection(this);
            this._erpPersons.CollectionChanging += this.ErpPersonsCollectionChanging;
            this._erpPersons.CollectionChanged += this.ErpPersonsCollectionChanged;
            this._customerAgreements = new ServiceLocationCustomerAgreementsCollection(this);
            this._customerAgreements.CollectionChanging += this.CustomerAgreementsCollectionChanging;
            this._customerAgreements.CollectionChanged += this.CustomerAgreementsCollectionChanged;
            this._endDeviceAssets = new ServiceLocationEndDeviceAssetsCollection(this);
            this._endDeviceAssets.CollectionChanging += this.EndDeviceAssetsCollectionChanging;
            this._endDeviceAssets.CollectionChanged += this.EndDeviceAssetsCollectionChanged;
        }
        
        /// <summary>
        /// The needsInspection property
        /// </summary>
        [XmlElementNameAttribute("needsInspection")]
        [XmlAttributeAttribute(true)]
        public virtual bool NeedsInspection
        {
            get
            {
                return this._needsInspection;
            }
            set
            {
                if ((this._needsInspection != value))
                {
                    bool old = this._needsInspection;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNeedsInspectionChanging(e);
                    this.OnPropertyChanging("NeedsInspection", e, _needsInspectionAttribute);
                    this._needsInspection = value;
                    this.OnNeedsInspectionChanged(e);
                    this.OnPropertyChanged("NeedsInspection", e, _needsInspectionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The accessMethod property
        /// </summary>
        [XmlElementNameAttribute("accessMethod")]
        [XmlAttributeAttribute(true)]
        public virtual string AccessMethod
        {
            get
            {
                return this._accessMethod;
            }
            set
            {
                if ((this._accessMethod != value))
                {
                    string old = this._accessMethod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAccessMethodChanging(e);
                    this.OnPropertyChanging("AccessMethod", e, _accessMethodAttribute);
                    this._accessMethod = value;
                    this.OnAccessMethodChanged(e);
                    this.OnPropertyChanged("AccessMethod", e, _accessMethodAttribute);
                }
            }
        }
        
        /// <summary>
        /// The siteAccessProblem property
        /// </summary>
        [XmlElementNameAttribute("siteAccessProblem")]
        [XmlAttributeAttribute(true)]
        public virtual string SiteAccessProblem
        {
            get
            {
                return this._siteAccessProblem;
            }
            set
            {
                if ((this._siteAccessProblem != value))
                {
                    string old = this._siteAccessProblem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSiteAccessProblemChanging(e);
                    this.OnPropertyChanging("SiteAccessProblem", e, _siteAccessProblemAttribute);
                    this._siteAccessProblem = value;
                    this.OnSiteAccessProblemChanged(e);
                    this.OnPropertyChanged("SiteAccessProblem", e, _siteAccessProblemAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ServiceDeliveryPoints property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ServiceLocation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IServiceDeliveryPoint> ServiceDeliveryPoints
        {
            get
            {
                return this._serviceDeliveryPoints;
            }
        }
        
        /// <summary>
        /// The ErpPersons property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ServiceLocation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpPerson> ErpPersons
        {
            get
            {
                return this._erpPersons;
            }
        }
        
        /// <summary>
        /// The CustomerAgreements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ServiceLocations")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICustomerAgreement> CustomerAgreements
        {
            get
            {
                return this._customerAgreements;
            }
        }
        
        /// <summary>
        /// The EndDeviceAssets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ServiceLocation")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEndDeviceAsset> EndDeviceAssets
        {
            get
            {
                return this._endDeviceAssets;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ServiceLocationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Customers/ServiceLocation")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the NeedsInspection property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeedsInspectionChanging;
        
        /// <summary>
        /// Gets fired when the NeedsInspection property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeedsInspectionChanged;
        
        /// <summary>
        /// Gets fired before the AccessMethod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccessMethodChanging;
        
        /// <summary>
        /// Gets fired when the AccessMethod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AccessMethodChanged;
        
        /// <summary>
        /// Gets fired before the SiteAccessProblem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SiteAccessProblemChanging;
        
        /// <summary>
        /// Gets fired when the SiteAccessProblem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SiteAccessProblemChanged;
        
        private static ITypedElement RetrieveNeedsInspectionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ServiceLocation.ClassInstance)).Resolve("needsInspection")));
        }
        
        /// <summary>
        /// Raises the NeedsInspectionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeedsInspectionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeedsInspectionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NeedsInspectionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeedsInspectionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeedsInspectionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAccessMethodAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ServiceLocation.ClassInstance)).Resolve("accessMethod")));
        }
        
        /// <summary>
        /// Raises the AccessMethodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccessMethodChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccessMethodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AccessMethodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAccessMethodChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AccessMethodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSiteAccessProblemAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ServiceLocation.ClassInstance)).Resolve("siteAccessProblem")));
        }
        
        /// <summary>
        /// Raises the SiteAccessProblemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSiteAccessProblemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SiteAccessProblemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SiteAccessProblemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSiteAccessProblemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SiteAccessProblemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveServiceDeliveryPointsReference()
        {
            return ((ITypedElement)(((ModelElement)(ServiceLocation.ClassInstance)).Resolve("ServiceDeliveryPoints")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ServiceDeliveryPoints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ServiceDeliveryPointsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ServiceDeliveryPoints", e, _serviceDeliveryPointsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ServiceDeliveryPoints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ServiceDeliveryPointsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ServiceDeliveryPoints", e, _serviceDeliveryPointsReference);
        }
        
        private static ITypedElement RetrieveErpPersonsReference()
        {
            return ((ITypedElement)(((ModelElement)(ServiceLocation.ClassInstance)).Resolve("ErpPersons")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpPersons property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPersonsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ErpPersons", e, _erpPersonsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpPersons property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPersonsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpPersons", e, _erpPersonsReference);
        }
        
        private static ITypedElement RetrieveCustomerAgreementsReference()
        {
            return ((ITypedElement)(((ModelElement)(ServiceLocation.ClassInstance)).Resolve("CustomerAgreements")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CustomerAgreements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CustomerAgreementsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("CustomerAgreements", e, _customerAgreementsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CustomerAgreements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CustomerAgreementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CustomerAgreements", e, _customerAgreementsReference);
        }
        
        private static ITypedElement RetrieveEndDeviceAssetsReference()
        {
            return ((ITypedElement)(((ModelElement)(ServiceLocation.ClassInstance)).Resolve("EndDeviceAssets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EndDeviceAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EndDeviceAssetsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("EndDeviceAssets", e, _endDeviceAssetsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EndDeviceAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EndDeviceAssetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EndDeviceAssets", e, _endDeviceAssetsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NEEDSINSPECTION"))
            {
                return this.NeedsInspection;
            }
            if ((attribute == "ACCESSMETHOD"))
            {
                return this.AccessMethod;
            }
            if ((attribute == "SITEACCESSPROBLEM"))
            {
                return this.SiteAccessProblem;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SERVICEDELIVERYPOINTS"))
            {
                return this._serviceDeliveryPoints;
            }
            if ((feature == "ERPPERSONS"))
            {
                return this._erpPersons;
            }
            if ((feature == "CUSTOMERAGREEMENTS"))
            {
                return this._customerAgreements;
            }
            if ((feature == "ENDDEVICEASSETS"))
            {
                return this._endDeviceAssets;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NEEDSINSPECTION"))
            {
                this.NeedsInspection = ((bool)(value));
                return;
            }
            if ((feature == "ACCESSMETHOD"))
            {
                this.AccessMethod = ((string)(value));
                return;
            }
            if ((feature == "SITEACCESSPROBLEM"))
            {
                this.SiteAccessProblem = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Customers/ServiceLocation")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ServiceLocation class
        /// </summary>
        public class ServiceLocationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ServiceLocation _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ServiceLocationReferencedElementsCollection(ServiceLocation parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ServiceDeliveryPoints.Count);
                    count = (count + this._parent.ErpPersons.Count);
                    count = (count + this._parent.CustomerAgreements.Count);
                    count = (count + this._parent.EndDeviceAssets.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ServiceDeliveryPoints.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpPersons.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CustomerAgreements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.EndDeviceAssets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ServiceDeliveryPoints.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpPersons.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CustomerAgreements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.EndDeviceAssets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IServiceDeliveryPoint serviceDeliveryPointsCasted = item.As<IServiceDeliveryPoint>();
                if ((serviceDeliveryPointsCasted != null))
                {
                    this._parent.ServiceDeliveryPoints.Add(serviceDeliveryPointsCasted);
                }
                IErpPerson erpPersonsCasted = item.As<IErpPerson>();
                if ((erpPersonsCasted != null))
                {
                    this._parent.ErpPersons.Add(erpPersonsCasted);
                }
                ICustomerAgreement customerAgreementsCasted = item.As<ICustomerAgreement>();
                if ((customerAgreementsCasted != null))
                {
                    this._parent.CustomerAgreements.Add(customerAgreementsCasted);
                }
                IEndDeviceAsset endDeviceAssetsCasted = item.As<IEndDeviceAsset>();
                if ((endDeviceAssetsCasted != null))
                {
                    this._parent.EndDeviceAssets.Add(endDeviceAssetsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ServiceDeliveryPoints.Clear();
                this._parent.ErpPersons.Clear();
                this._parent.CustomerAgreements.Clear();
                this._parent.EndDeviceAssets.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ServiceDeliveryPoints.Contains(item))
                {
                    return true;
                }
                if (this._parent.ErpPersons.Contains(item))
                {
                    return true;
                }
                if (this._parent.CustomerAgreements.Contains(item))
                {
                    return true;
                }
                if (this._parent.EndDeviceAssets.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> serviceDeliveryPointsEnumerator = this._parent.ServiceDeliveryPoints.GetEnumerator();
                try
                {
                    for (
                    ; serviceDeliveryPointsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = serviceDeliveryPointsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    serviceDeliveryPointsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> erpPersonsEnumerator = this._parent.ErpPersons.GetEnumerator();
                try
                {
                    for (
                    ; erpPersonsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpPersonsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpPersonsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> customerAgreementsEnumerator = this._parent.CustomerAgreements.GetEnumerator();
                try
                {
                    for (
                    ; customerAgreementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = customerAgreementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    customerAgreementsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> endDeviceAssetsEnumerator = this._parent.EndDeviceAssets.GetEnumerator();
                try
                {
                    for (
                    ; endDeviceAssetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = endDeviceAssetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    endDeviceAssetsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IServiceDeliveryPoint serviceDeliveryPointItem = item.As<IServiceDeliveryPoint>();
                if (((serviceDeliveryPointItem != null) 
                            && this._parent.ServiceDeliveryPoints.Remove(serviceDeliveryPointItem)))
                {
                    return true;
                }
                IErpPerson erpPersonItem = item.As<IErpPerson>();
                if (((erpPersonItem != null) 
                            && this._parent.ErpPersons.Remove(erpPersonItem)))
                {
                    return true;
                }
                ICustomerAgreement customerAgreementItem = item.As<ICustomerAgreement>();
                if (((customerAgreementItem != null) 
                            && this._parent.CustomerAgreements.Remove(customerAgreementItem)))
                {
                    return true;
                }
                IEndDeviceAsset endDeviceAssetItem = item.As<IEndDeviceAsset>();
                if (((endDeviceAssetItem != null) 
                            && this._parent.EndDeviceAssets.Remove(endDeviceAssetItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ServiceDeliveryPoints).Concat(this._parent.ErpPersons).Concat(this._parent.CustomerAgreements).Concat(this._parent.EndDeviceAssets).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the needsInspection property
        /// </summary>
        private sealed class NeedsInspectionProxy : ModelPropertyChange<IServiceLocation, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NeedsInspectionProxy(IServiceLocation modelElement) : 
                    base(modelElement, "needsInspection")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.NeedsInspection;
                }
                set
                {
                    this.ModelElement.NeedsInspection = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the accessMethod property
        /// </summary>
        private sealed class AccessMethodProxy : ModelPropertyChange<IServiceLocation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AccessMethodProxy(IServiceLocation modelElement) : 
                    base(modelElement, "accessMethod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AccessMethod;
                }
                set
                {
                    this.ModelElement.AccessMethod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the siteAccessProblem property
        /// </summary>
        private sealed class SiteAccessProblemProxy : ModelPropertyChange<IServiceLocation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SiteAccessProblemProxy(IServiceLocation modelElement) : 
                    base(modelElement, "siteAccessProblem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.SiteAccessProblem;
                }
                set
                {
                    this.ModelElement.SiteAccessProblem = value;
                }
            }
        }
    }
}

