using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.Customers
{
    
    
    /// <summary>
    /// The default implementation of the CustomerAccount class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Customers")]
    [XmlNamespacePrefixAttribute("cimCustomers")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Customers/CustomerAccount")]
    [DebuggerDisplayAttribute("CustomerAccount {UUID}")]
    public partial class CustomerAccount : Document, ICustomerAccount, IModelElement
    {
        
        private static Lazy<ITypedElement> _workBillingInfosReference = new Lazy<ITypedElement>(RetrieveWorkBillingInfosReference);
        
        /// <summary>
        /// The backing field for the WorkBillingInfos property
        /// </summary>
        private CustomerAccountWorkBillingInfosCollection _workBillingInfos;
        
        private static Lazy<ITypedElement> _paymentTransactionsReference = new Lazy<ITypedElement>(RetrievePaymentTransactionsReference);
        
        /// <summary>
        /// The backing field for the PaymentTransactions property
        /// </summary>
        private CustomerAccountPaymentTransactionsCollection _paymentTransactions;
        
        private static Lazy<ITypedElement> _customerAgreementsReference = new Lazy<ITypedElement>(RetrieveCustomerAgreementsReference);
        
        /// <summary>
        /// The backing field for the CustomerAgreements property
        /// </summary>
        private CustomerAccountCustomerAgreementsCollection _customerAgreements;
        
        private static Lazy<ITypedElement> _erpInvoiceesReference = new Lazy<ITypedElement>(RetrieveErpInvoiceesReference);
        
        /// <summary>
        /// The backing field for the ErpInvoicees property
        /// </summary>
        private CustomerAccountErpInvoiceesCollection _erpInvoicees;
        
        private static Lazy<ITypedElement> _customerBillingInfosReference = new Lazy<ITypedElement>(RetrieveCustomerBillingInfosReference);
        
        /// <summary>
        /// The backing field for the CustomerBillingInfos property
        /// </summary>
        private CustomerAccountCustomerBillingInfosCollection _customerBillingInfos;
        
        private static IClass _classInstance;
        
        public CustomerAccount()
        {
            this._workBillingInfos = new CustomerAccountWorkBillingInfosCollection(this);
            this._workBillingInfos.CollectionChanging += this.WorkBillingInfosCollectionChanging;
            this._workBillingInfos.CollectionChanged += this.WorkBillingInfosCollectionChanged;
            this._paymentTransactions = new CustomerAccountPaymentTransactionsCollection(this);
            this._paymentTransactions.CollectionChanging += this.PaymentTransactionsCollectionChanging;
            this._paymentTransactions.CollectionChanged += this.PaymentTransactionsCollectionChanged;
            this._customerAgreements = new CustomerAccountCustomerAgreementsCollection(this);
            this._customerAgreements.CollectionChanging += this.CustomerAgreementsCollectionChanging;
            this._customerAgreements.CollectionChanged += this.CustomerAgreementsCollectionChanged;
            this._erpInvoicees = new CustomerAccountErpInvoiceesCollection(this);
            this._erpInvoicees.CollectionChanging += this.ErpInvoiceesCollectionChanging;
            this._erpInvoicees.CollectionChanged += this.ErpInvoiceesCollectionChanged;
            this._customerBillingInfos = new CustomerAccountCustomerBillingInfosCollection(this);
            this._customerBillingInfos.CollectionChanging += this.CustomerBillingInfosCollectionChanging;
            this._customerBillingInfos.CollectionChanged += this.CustomerBillingInfosCollectionChanged;
        }
        
        /// <summary>
        /// The WorkBillingInfos property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CustomerAccount")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWorkBillingInfo> WorkBillingInfos
        {
            get
            {
                return this._workBillingInfos;
            }
        }
        
        /// <summary>
        /// The PaymentTransactions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CustomerAccount")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransaction> PaymentTransactions
        {
            get
            {
                return this._paymentTransactions;
            }
        }
        
        /// <summary>
        /// The CustomerAgreements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CustomerAccount")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICustomerAgreement> CustomerAgreements
        {
            get
            {
                return this._customerAgreements;
            }
        }
        
        /// <summary>
        /// The ErpInvoicees property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CustomerAccount")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpInvoice> ErpInvoicees
        {
            get
            {
                return this._erpInvoicees;
            }
        }
        
        /// <summary>
        /// The CustomerBillingInfos property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CustomerAccount")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICustomerBillingInfo> CustomerBillingInfos
        {
            get
            {
                return this._customerBillingInfos;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CustomerAccountReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Customers/CustomerAccount")));
                }
                return _classInstance;
            }
        }
        
        private static ITypedElement RetrieveWorkBillingInfosReference()
        {
            return ((ITypedElement)(((ModelElement)(CustomerAccount.ClassInstance)).Resolve("WorkBillingInfos")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WorkBillingInfos property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkBillingInfosCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("WorkBillingInfos", e, _workBillingInfosReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WorkBillingInfos property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkBillingInfosCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WorkBillingInfos", e, _workBillingInfosReference);
        }
        
        private static ITypedElement RetrievePaymentTransactionsReference()
        {
            return ((ITypedElement)(((ModelElement)(CustomerAccount.ClassInstance)).Resolve("PaymentTransactions")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PaymentTransactions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PaymentTransactionsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("PaymentTransactions", e, _paymentTransactionsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PaymentTransactions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PaymentTransactionsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PaymentTransactions", e, _paymentTransactionsReference);
        }
        
        private static ITypedElement RetrieveCustomerAgreementsReference()
        {
            return ((ITypedElement)(((ModelElement)(CustomerAccount.ClassInstance)).Resolve("CustomerAgreements")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CustomerAgreements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CustomerAgreementsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("CustomerAgreements", e, _customerAgreementsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CustomerAgreements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CustomerAgreementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CustomerAgreements", e, _customerAgreementsReference);
        }
        
        private static ITypedElement RetrieveErpInvoiceesReference()
        {
            return ((ITypedElement)(((ModelElement)(CustomerAccount.ClassInstance)).Resolve("ErpInvoicees")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpInvoicees property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpInvoiceesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ErpInvoicees", e, _erpInvoiceesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpInvoicees property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpInvoiceesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpInvoicees", e, _erpInvoiceesReference);
        }
        
        private static ITypedElement RetrieveCustomerBillingInfosReference()
        {
            return ((ITypedElement)(((ModelElement)(CustomerAccount.ClassInstance)).Resolve("CustomerBillingInfos")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CustomerBillingInfos property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CustomerBillingInfosCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("CustomerBillingInfos", e, _customerBillingInfosReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CustomerBillingInfos property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CustomerBillingInfosCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CustomerBillingInfos", e, _customerBillingInfosReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "WORKBILLINGINFOS"))
            {
                return this._workBillingInfos;
            }
            if ((feature == "PAYMENTTRANSACTIONS"))
            {
                return this._paymentTransactions;
            }
            if ((feature == "CUSTOMERAGREEMENTS"))
            {
                return this._customerAgreements;
            }
            if ((feature == "ERPINVOICEES"))
            {
                return this._erpInvoicees;
            }
            if ((feature == "CUSTOMERBILLINGINFOS"))
            {
                return this._customerBillingInfos;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Customers/CustomerAccount")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CustomerAccount class
        /// </summary>
        public class CustomerAccountReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CustomerAccount _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CustomerAccountReferencedElementsCollection(CustomerAccount parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.WorkBillingInfos.Count);
                    count = (count + this._parent.PaymentTransactions.Count);
                    count = (count + this._parent.CustomerAgreements.Count);
                    count = (count + this._parent.ErpInvoicees.Count);
                    count = (count + this._parent.CustomerBillingInfos.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.WorkBillingInfos.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PaymentTransactions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CustomerAgreements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpInvoicees.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CustomerBillingInfos.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.WorkBillingInfos.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PaymentTransactions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CustomerAgreements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpInvoicees.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CustomerBillingInfos.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IWorkBillingInfo workBillingInfosCasted = item.As<IWorkBillingInfo>();
                if ((workBillingInfosCasted != null))
                {
                    this._parent.WorkBillingInfos.Add(workBillingInfosCasted);
                }
                ITransaction paymentTransactionsCasted = item.As<ITransaction>();
                if ((paymentTransactionsCasted != null))
                {
                    this._parent.PaymentTransactions.Add(paymentTransactionsCasted);
                }
                ICustomerAgreement customerAgreementsCasted = item.As<ICustomerAgreement>();
                if ((customerAgreementsCasted != null))
                {
                    this._parent.CustomerAgreements.Add(customerAgreementsCasted);
                }
                IErpInvoice erpInvoiceesCasted = item.As<IErpInvoice>();
                if ((erpInvoiceesCasted != null))
                {
                    this._parent.ErpInvoicees.Add(erpInvoiceesCasted);
                }
                ICustomerBillingInfo customerBillingInfosCasted = item.As<ICustomerBillingInfo>();
                if ((customerBillingInfosCasted != null))
                {
                    this._parent.CustomerBillingInfos.Add(customerBillingInfosCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.WorkBillingInfos.Clear();
                this._parent.PaymentTransactions.Clear();
                this._parent.CustomerAgreements.Clear();
                this._parent.ErpInvoicees.Clear();
                this._parent.CustomerBillingInfos.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.WorkBillingInfos.Contains(item))
                {
                    return true;
                }
                if (this._parent.PaymentTransactions.Contains(item))
                {
                    return true;
                }
                if (this._parent.CustomerAgreements.Contains(item))
                {
                    return true;
                }
                if (this._parent.ErpInvoicees.Contains(item))
                {
                    return true;
                }
                if (this._parent.CustomerBillingInfos.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> workBillingInfosEnumerator = this._parent.WorkBillingInfos.GetEnumerator();
                try
                {
                    for (
                    ; workBillingInfosEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = workBillingInfosEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    workBillingInfosEnumerator.Dispose();
                }
                IEnumerator<IModelElement> paymentTransactionsEnumerator = this._parent.PaymentTransactions.GetEnumerator();
                try
                {
                    for (
                    ; paymentTransactionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = paymentTransactionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    paymentTransactionsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> customerAgreementsEnumerator = this._parent.CustomerAgreements.GetEnumerator();
                try
                {
                    for (
                    ; customerAgreementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = customerAgreementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    customerAgreementsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> erpInvoiceesEnumerator = this._parent.ErpInvoicees.GetEnumerator();
                try
                {
                    for (
                    ; erpInvoiceesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpInvoiceesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpInvoiceesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> customerBillingInfosEnumerator = this._parent.CustomerBillingInfos.GetEnumerator();
                try
                {
                    for (
                    ; customerBillingInfosEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = customerBillingInfosEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    customerBillingInfosEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IWorkBillingInfo workBillingInfoItem = item.As<IWorkBillingInfo>();
                if (((workBillingInfoItem != null) 
                            && this._parent.WorkBillingInfos.Remove(workBillingInfoItem)))
                {
                    return true;
                }
                ITransaction transactionItem = item.As<ITransaction>();
                if (((transactionItem != null) 
                            && this._parent.PaymentTransactions.Remove(transactionItem)))
                {
                    return true;
                }
                ICustomerAgreement customerAgreementItem = item.As<ICustomerAgreement>();
                if (((customerAgreementItem != null) 
                            && this._parent.CustomerAgreements.Remove(customerAgreementItem)))
                {
                    return true;
                }
                IErpInvoice erpInvoiceItem = item.As<IErpInvoice>();
                if (((erpInvoiceItem != null) 
                            && this._parent.ErpInvoicees.Remove(erpInvoiceItem)))
                {
                    return true;
                }
                ICustomerBillingInfo customerBillingInfoItem = item.As<ICustomerBillingInfo>();
                if (((customerBillingInfoItem != null) 
                            && this._parent.CustomerBillingInfos.Remove(customerBillingInfoItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.WorkBillingInfos).Concat(this._parent.PaymentTransactions).Concat(this._parent.CustomerAgreements).Concat(this._parent.ErpInvoicees).Concat(this._parent.CustomerBillingInfos).GetEnumerator();
            }
        }
    }
}

