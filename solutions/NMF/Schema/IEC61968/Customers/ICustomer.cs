using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.Customers
{
    
    
    /// <summary>
    /// The public interface for Customer
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Customer))]
    [XmlDefaultImplementationTypeAttribute(typeof(Customer))]
    public interface ICustomer : IModelElement, IOrganisation
    {
        
        /// <summary>
        /// The kind property
        /// </summary>
        Nullable<CustomerKind> Kind
        {
            get;
            set;
        }
        
        /// <summary>
        /// The specialNeed property
        /// </summary>
        string SpecialNeed
        {
            get;
            set;
        }
        
        /// <summary>
        /// The pucNumber property
        /// </summary>
        string PucNumber
        {
            get;
            set;
        }
        
        /// <summary>
        /// The vip property
        /// </summary>
        bool Vip
        {
            get;
            set;
        }
        
        /// <summary>
        /// The PlannedOutage property
        /// </summary>
        IPlannedOutage PlannedOutage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The EndDeviceAssets property
        /// </summary>
        IOrderedSetExpression<IEndDeviceAsset> EndDeviceAssets
        {
            get;
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        IStatus Status
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TroubleTickets property
        /// </summary>
        IOrderedSetExpression<ITroubleTicket> TroubleTickets
        {
            get;
        }
        
        /// <summary>
        /// The ErpPersons property
        /// </summary>
        IOrderedSetExpression<IErpPerson> ErpPersons
        {
            get;
        }
        
        /// <summary>
        /// The OutageNotifications property
        /// </summary>
        IOrderedSetExpression<IOutageNotification> OutageNotifications
        {
            get;
        }
        
        /// <summary>
        /// The Works property
        /// </summary>
        IOrderedSetExpression<IWork> Works
        {
            get;
        }
        
        /// <summary>
        /// The CustomerAgreements property
        /// </summary>
        IOrderedSetExpression<ICustomerAgreement> CustomerAgreements
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        /// <summary>
        /// Gets fired before the SpecialNeed property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpecialNeedChanging;
        
        /// <summary>
        /// Gets fired when the SpecialNeed property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SpecialNeedChanged;
        
        /// <summary>
        /// Gets fired before the PucNumber property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PucNumberChanging;
        
        /// <summary>
        /// Gets fired when the PucNumber property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PucNumberChanged;
        
        /// <summary>
        /// Gets fired before the Vip property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VipChanging;
        
        /// <summary>
        /// Gets fired when the Vip property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> VipChanged;
        
        /// <summary>
        /// Gets fired before the PlannedOutage property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PlannedOutageChanging;
        
        /// <summary>
        /// Gets fired when the PlannedOutage property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PlannedOutageChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StatusChanged;
    }
}

