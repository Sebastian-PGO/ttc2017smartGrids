using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfPaymentMetering;

namespace TTC2017.SmartGrids.CIM.IEC61968.Customers
{
    
    
    /// <summary>
    /// The public interface for PricingStructure
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PricingStructure))]
    [XmlDefaultImplementationTypeAttribute(typeof(PricingStructure))]
    public interface IPricingStructure : IModelElement, IDocument
    {
        
        /// <summary>
        /// The code property
        /// </summary>
        string Code
        {
            get;
            set;
        }
        
        /// <summary>
        /// The taxExemption property
        /// </summary>
        bool TaxExemption
        {
            get;
            set;
        }
        
        /// <summary>
        /// The dailyFloorUsage property
        /// </summary>
        int DailyFloorUsage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The revenueKind property
        /// </summary>
        Nullable<RevenueKind> RevenueKind
        {
            get;
            set;
        }
        
        /// <summary>
        /// The dailyCeilingUsage property
        /// </summary>
        int DailyCeilingUsage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The dailyEstimatedUsage property
        /// </summary>
        int DailyEstimatedUsage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ServiceCategory property
        /// </summary>
        IServiceCategory ServiceCategory
        {
            get;
            set;
        }
        
        /// <summary>
        /// The CustomerAgreements property
        /// </summary>
        IOrderedSetExpression<ICustomerAgreement> CustomerAgreements
        {
            get;
        }
        
        /// <summary>
        /// The PowerQualityPricings property
        /// </summary>
        IOrderedSetExpression<IPowerQualityPricing> PowerQualityPricings
        {
            get;
        }
        
        /// <summary>
        /// The Tariffs property
        /// </summary>
        IOrderedSetExpression<ITariff> Tariffs
        {
            get;
        }
        
        /// <summary>
        /// The ServiceDeliveryPoints property
        /// </summary>
        IOrderedSetExpression<IServiceDeliveryPoint> ServiceDeliveryPoints
        {
            get;
        }
        
        /// <summary>
        /// The SubscribePowerCurve property
        /// </summary>
        ISubscribePowerCurve SubscribePowerCurve
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Transactions property
        /// </summary>
        IOrderedSetExpression<ITransaction> Transactions
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the Code property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CodeChanging;
        
        /// <summary>
        /// Gets fired when the Code property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CodeChanged;
        
        /// <summary>
        /// Gets fired before the TaxExemption property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TaxExemptionChanging;
        
        /// <summary>
        /// Gets fired when the TaxExemption property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TaxExemptionChanged;
        
        /// <summary>
        /// Gets fired before the DailyFloorUsage property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DailyFloorUsageChanging;
        
        /// <summary>
        /// Gets fired when the DailyFloorUsage property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DailyFloorUsageChanged;
        
        /// <summary>
        /// Gets fired before the RevenueKind property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RevenueKindChanging;
        
        /// <summary>
        /// Gets fired when the RevenueKind property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RevenueKindChanged;
        
        /// <summary>
        /// Gets fired before the DailyCeilingUsage property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DailyCeilingUsageChanging;
        
        /// <summary>
        /// Gets fired when the DailyCeilingUsage property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DailyCeilingUsageChanged;
        
        /// <summary>
        /// Gets fired before the DailyEstimatedUsage property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DailyEstimatedUsageChanging;
        
        /// <summary>
        /// Gets fired when the DailyEstimatedUsage property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DailyEstimatedUsageChanged;
        
        /// <summary>
        /// Gets fired before the ServiceCategory property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ServiceCategoryChanging;
        
        /// <summary>
        /// Gets fired when the ServiceCategory property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ServiceCategoryChanged;
        
        /// <summary>
        /// Gets fired before the SubscribePowerCurve property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SubscribePowerCurveChanging;
        
        /// <summary>
        /// Gets fired when the SubscribePowerCurve property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SubscribePowerCurveChanged;
    }
}

