//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61968.Common
{
    
    
    /// <summary>
    /// The default implementation of the TimePoint class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Common")]
    [XmlNamespacePrefixAttribute("cimCommon")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/TimePoint")]
    [DebuggerDisplayAttribute("TimePoint {UUID}")]
    public partial class TimePoint : IdentifiedObject, ITimePoint, IModelElement
    {
        
        /// <summary>
        /// The backing field for the SequenceNumber property
        /// </summary>
        private int _sequenceNumber;
        
        private static Lazy<ITypedElement> _sequenceNumberAttribute = new Lazy<ITypedElement>(RetrieveSequenceNumberAttribute);
        
        /// <summary>
        /// The backing field for the RelativeTimeInterval property
        /// </summary>
        private float _relativeTimeInterval;
        
        private static Lazy<ITypedElement> _relativeTimeIntervalAttribute = new Lazy<ITypedElement>(RetrieveRelativeTimeIntervalAttribute);
        
        /// <summary>
        /// The backing field for the DateTime property
        /// </summary>
        private DateTime _dateTime;
        
        private static Lazy<ITypedElement> _dateTimeAttribute = new Lazy<ITypedElement>(RetrieveDateTimeAttribute);
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static Lazy<ITypedElement> _scheduledEventsReference = new Lazy<ITypedElement>(RetrieveScheduledEventsReference);
        
        /// <summary>
        /// The backing field for the ScheduledEvents property
        /// </summary>
        private TimePointScheduledEventsCollection _scheduledEvents;
        
        private static Lazy<ITypedElement> _windowReference = new Lazy<ITypedElement>(RetrieveWindowReference);
        
        /// <summary>
        /// The backing field for the Window property
        /// </summary>
        private IDateTimeInterval _window;
        
        private static Lazy<ITypedElement> _timeScheduleReference = new Lazy<ITypedElement>(RetrieveTimeScheduleReference);
        
        /// <summary>
        /// The backing field for the TimeSchedule property
        /// </summary>
        private ITimeSchedule _timeSchedule;
        
        private static IClass _classInstance;
        
        public TimePoint()
        {
            this._scheduledEvents = new TimePointScheduledEventsCollection(this);
            this._scheduledEvents.CollectionChanging += this.ScheduledEventsCollectionChanging;
            this._scheduledEvents.CollectionChanged += this.ScheduledEventsCollectionChanged;
        }
        
        /// <summary>
        /// The sequenceNumber property
        /// </summary>
        [XmlElementNameAttribute("sequenceNumber")]
        [XmlAttributeAttribute(true)]
        public virtual int SequenceNumber
        {
            get
            {
                return this._sequenceNumber;
            }
            set
            {
                if ((this._sequenceNumber != value))
                {
                    int old = this._sequenceNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSequenceNumberChanging(e);
                    this.OnPropertyChanging("SequenceNumber", e, _sequenceNumberAttribute);
                    this._sequenceNumber = value;
                    this.OnSequenceNumberChanged(e);
                    this.OnPropertyChanged("SequenceNumber", e, _sequenceNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The relativeTimeInterval property
        /// </summary>
        [XmlElementNameAttribute("relativeTimeInterval")]
        [XmlAttributeAttribute(true)]
        public virtual float RelativeTimeInterval
        {
            get
            {
                return this._relativeTimeInterval;
            }
            set
            {
                if ((this._relativeTimeInterval != value))
                {
                    float old = this._relativeTimeInterval;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRelativeTimeIntervalChanging(e);
                    this.OnPropertyChanging("RelativeTimeInterval", e, _relativeTimeIntervalAttribute);
                    this._relativeTimeInterval = value;
                    this.OnRelativeTimeIntervalChanged(e);
                    this.OnPropertyChanged("RelativeTimeInterval", e, _relativeTimeIntervalAttribute);
                }
            }
        }
        
        /// <summary>
        /// The dateTime property
        /// </summary>
        [XmlElementNameAttribute("dateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime DateTime
        {
            get
            {
                return this._dateTime;
            }
            set
            {
                if ((this._dateTime != value))
                {
                    DateTime old = this._dateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateTimeChanging(e);
                    this.OnPropertyChanging("DateTime", e, _dateTimeAttribute);
                    this._dateTime = value;
                    this.OnDateTimeChanged(e);
                    this.OnPropertyChanged("DateTime", e, _dateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// The ScheduledEvents property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TimePoint")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IScheduledEvent> ScheduledEvents
        {
            get
            {
                return this._scheduledEvents;
            }
        }
        
        /// <summary>
        /// The window property
        /// </summary>
        [XmlElementNameAttribute("window")]
        [XmlAttributeAttribute(true)]
        public virtual IDateTimeInterval Window
        {
            get
            {
                return this._window;
            }
            set
            {
                if ((this._window != value))
                {
                    IDateTimeInterval old = this._window;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWindowChanging(e);
                    this.OnPropertyChanging("Window", e, _windowReference);
                    this._window = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetWindow;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetWindow;
                    }
                    this.OnWindowChanged(e);
                    this.OnPropertyChanged("Window", e, _windowReference);
                }
            }
        }
        
        /// <summary>
        /// The TimeSchedule property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TimePoints")]
        public virtual ITimeSchedule TimeSchedule
        {
            get
            {
                return this._timeSchedule;
            }
            set
            {
                if ((this._timeSchedule != value))
                {
                    ITimeSchedule old = this._timeSchedule;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeScheduleChanging(e);
                    this.OnPropertyChanging("TimeSchedule", e, _timeScheduleReference);
                    this._timeSchedule = value;
                    if ((old != null))
                    {
                        old.TimePoints.Remove(this);
                        old.Deleted -= this.OnResetTimeSchedule;
                    }
                    if ((value != null))
                    {
                        value.TimePoints.Add(this);
                        value.Deleted += this.OnResetTimeSchedule;
                    }
                    this.OnTimeScheduleChanged(e);
                    this.OnPropertyChanged("TimeSchedule", e, _timeScheduleReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TimePointReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/TimePoint")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the SequenceNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SequenceNumberChanging;
        
        /// <summary>
        /// Gets fired when the SequenceNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SequenceNumberChanged;
        
        /// <summary>
        /// Gets fired before the RelativeTimeInterval property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RelativeTimeIntervalChanging;
        
        /// <summary>
        /// Gets fired when the RelativeTimeInterval property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RelativeTimeIntervalChanged;
        
        /// <summary>
        /// Gets fired before the DateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateTimeChanging;
        
        /// <summary>
        /// Gets fired when the DateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateTimeChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the Window property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WindowChanging;
        
        /// <summary>
        /// Gets fired when the Window property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WindowChanged;
        
        /// <summary>
        /// Gets fired before the TimeSchedule property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeScheduleChanging;
        
        /// <summary>
        /// Gets fired when the TimeSchedule property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeScheduleChanged;
        
        private static ITypedElement RetrieveSequenceNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TimePoint.ClassInstance)).Resolve("sequenceNumber")));
        }
        
        /// <summary>
        /// Raises the SequenceNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSequenceNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SequenceNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SequenceNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSequenceNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SequenceNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRelativeTimeIntervalAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TimePoint.ClassInstance)).Resolve("relativeTimeInterval")));
        }
        
        /// <summary>
        /// Raises the RelativeTimeIntervalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRelativeTimeIntervalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RelativeTimeIntervalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RelativeTimeIntervalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRelativeTimeIntervalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RelativeTimeIntervalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TimePoint.ClassInstance)).Resolve("dateTime")));
        }
        
        /// <summary>
        /// Raises the DateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(TimePoint.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        private static ITypedElement RetrieveScheduledEventsReference()
        {
            return ((ITypedElement)(((ModelElement)(TimePoint.ClassInstance)).Resolve("ScheduledEvents")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ScheduledEvents property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ScheduledEventsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ScheduledEvents", e, _scheduledEventsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ScheduledEvents property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ScheduledEventsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ScheduledEvents", e, _scheduledEventsReference);
        }
        
        private static ITypedElement RetrieveWindowReference()
        {
            return ((ITypedElement)(((ModelElement)(TimePoint.ClassInstance)).Resolve("window")));
        }
        
        /// <summary>
        /// Raises the WindowChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWindowChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WindowChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WindowChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWindowChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WindowChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Window property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWindow(object sender, System.EventArgs eventArgs)
        {
            this.Window = null;
        }
        
        private static ITypedElement RetrieveTimeScheduleReference()
        {
            return ((ITypedElement)(((ModelElement)(TimePoint.ClassInstance)).Resolve("TimeSchedule")));
        }
        
        /// <summary>
        /// Raises the TimeScheduleChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeScheduleChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeScheduleChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeScheduleChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeScheduleChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeScheduleChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TimeSchedule property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTimeSchedule(object sender, System.EventArgs eventArgs)
        {
            this.TimeSchedule = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SEQUENCENUMBER"))
            {
                return this.SequenceNumber;
            }
            if ((attribute == "RELATIVETIMEINTERVAL"))
            {
                return this.RelativeTimeInterval;
            }
            if ((attribute == "DATETIME"))
            {
                return this.DateTime;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "SCHEDULEDEVENTS"))
            {
                return this._scheduledEvents;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "WINDOW"))
            {
                this.Window = ((IDateTimeInterval)(value));
                return;
            }
            if ((feature == "TIMESCHEDULE"))
            {
                this.TimeSchedule = ((ITimeSchedule)(value));
                return;
            }
            if ((feature == "SEQUENCENUMBER"))
            {
                this.SequenceNumber = ((int)(value));
                return;
            }
            if ((feature == "RELATIVETIMEINTERVAL"))
            {
                this.RelativeTimeInterval = ((float)(value));
                return;
            }
            if ((feature == "DATETIME"))
            {
                this.DateTime = ((DateTime)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((attribute == "Window"))
            {
                return new WindowProxy(this);
            }
            if ((attribute == "TimeSchedule"))
            {
                return new TimeScheduleProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((reference == "Window"))
            {
                return new WindowProxy(this);
            }
            if ((reference == "TimeSchedule"))
            {
                return new TimeScheduleProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/TimePoint")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TimePoint class
        /// </summary>
        public class TimePointReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TimePoint _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TimePointReferencedElementsCollection(TimePoint parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ScheduledEvents.Count);
                    if ((this._parent.Window != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TimeSchedule != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.ScheduledEvents.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WindowChanged += this.PropagateValueChanges;
                this._parent.TimeScheduleChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.ScheduledEvents.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WindowChanged -= this.PropagateValueChanges;
                this._parent.TimeScheduleChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                IScheduledEvent scheduledEventsCasted = item.As<IScheduledEvent>();
                if ((scheduledEventsCasted != null))
                {
                    this._parent.ScheduledEvents.Add(scheduledEventsCasted);
                }
                if ((this._parent.Window == null))
                {
                    IDateTimeInterval windowCasted = item.As<IDateTimeInterval>();
                    if ((windowCasted != null))
                    {
                        this._parent.Window = windowCasted;
                        return;
                    }
                }
                if ((this._parent.TimeSchedule == null))
                {
                    ITimeSchedule timeScheduleCasted = item.As<ITimeSchedule>();
                    if ((timeScheduleCasted != null))
                    {
                        this._parent.TimeSchedule = timeScheduleCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Status = null;
                this._parent.ScheduledEvents.Clear();
                this._parent.Window = null;
                this._parent.TimeSchedule = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if (this._parent.ScheduledEvents.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Window))
                {
                    return true;
                }
                if ((item == this._parent.TimeSchedule))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> scheduledEventsEnumerator = this._parent.ScheduledEvents.GetEnumerator();
                try
                {
                    for (
                    ; scheduledEventsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = scheduledEventsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    scheduledEventsEnumerator.Dispose();
                }
                if ((this._parent.Window != null))
                {
                    array[arrayIndex] = this._parent.Window;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TimeSchedule != null))
                {
                    array[arrayIndex] = this._parent.TimeSchedule;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                IScheduledEvent scheduledEventItem = item.As<IScheduledEvent>();
                if (((scheduledEventItem != null) 
                            && this._parent.ScheduledEvents.Remove(scheduledEventItem)))
                {
                    return true;
                }
                if ((this._parent.Window == item))
                {
                    this._parent.Window = null;
                    return true;
                }
                if ((this._parent.TimeSchedule == item))
                {
                    this._parent.TimeSchedule = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Status).Concat(this._parent.ScheduledEvents).Concat(this._parent.Window).Concat(this._parent.TimeSchedule).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sequenceNumber property
        /// </summary>
        private sealed class SequenceNumberProxy : ModelPropertyChange<ITimePoint, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SequenceNumberProxy(ITimePoint modelElement) : 
                    base(modelElement, "sequenceNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.SequenceNumber;
                }
                set
                {
                    this.ModelElement.SequenceNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the relativeTimeInterval property
        /// </summary>
        private sealed class RelativeTimeIntervalProxy : ModelPropertyChange<ITimePoint, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RelativeTimeIntervalProxy(ITimePoint modelElement) : 
                    base(modelElement, "relativeTimeInterval")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RelativeTimeInterval;
                }
                set
                {
                    this.ModelElement.RelativeTimeInterval = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dateTime property
        /// </summary>
        private sealed class DateTimeProxy : ModelPropertyChange<ITimePoint, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateTimeProxy(ITimePoint modelElement) : 
                    base(modelElement, "dateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.DateTime;
                }
                set
                {
                    this.ModelElement.DateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<ITimePoint, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(ITimePoint modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the window property
        /// </summary>
        private sealed class WindowProxy : ModelPropertyChange<ITimePoint, IDateTimeInterval>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WindowProxy(ITimePoint modelElement) : 
                    base(modelElement, "window")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDateTimeInterval Value
            {
                get
                {
                    return this.ModelElement.Window;
                }
                set
                {
                    this.ModelElement.Window = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TimeSchedule property
        /// </summary>
        private sealed class TimeScheduleProxy : ModelPropertyChange<ITimePoint, ITimeSchedule>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeScheduleProxy(ITimePoint modelElement) : 
                    base(modelElement, "TimeSchedule")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITimeSchedule Value
            {
                get
                {
                    return this.ModelElement.TimeSchedule;
                }
                set
                {
                    this.ModelElement.TimeSchedule = value;
                }
            }
        }
    }
}

