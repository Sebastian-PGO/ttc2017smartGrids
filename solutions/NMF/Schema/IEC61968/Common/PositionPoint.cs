//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61968.Common
{
    
    
    /// <summary>
    /// The default implementation of the PositionPoint class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Common")]
    [XmlNamespacePrefixAttribute("cimCommon")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/PositionPoint")]
    [DebuggerDisplayAttribute("PositionPoint {UUID}")]
    public partial class PositionPoint : Element, IPositionPoint, IModelElement
    {
        
        /// <summary>
        /// The backing field for the SequenceNumber property
        /// </summary>
        private int _sequenceNumber;
        
        private static Lazy<ITypedElement> _sequenceNumberAttribute = new Lazy<ITypedElement>(RetrieveSequenceNumberAttribute);
        
        /// <summary>
        /// The backing field for the XPosition property
        /// </summary>
        private string _xPosition;
        
        private static Lazy<ITypedElement> _xPositionAttribute = new Lazy<ITypedElement>(RetrieveXPositionAttribute);
        
        /// <summary>
        /// The backing field for the YPosition property
        /// </summary>
        private string _yPosition;
        
        private static Lazy<ITypedElement> _yPositionAttribute = new Lazy<ITypedElement>(RetrieveYPositionAttribute);
        
        /// <summary>
        /// The backing field for the ZPosition property
        /// </summary>
        private string _zPosition;
        
        private static Lazy<ITypedElement> _zPositionAttribute = new Lazy<ITypedElement>(RetrieveZPositionAttribute);
        
        private static Lazy<ITypedElement> _coordinateSystemReference = new Lazy<ITypedElement>(RetrieveCoordinateSystemReference);
        
        /// <summary>
        /// The backing field for the CoordinateSystem property
        /// </summary>
        private ICoordinateSystem _coordinateSystem;
        
        private static Lazy<ITypedElement> _locationReference = new Lazy<ITypedElement>(RetrieveLocationReference);
        
        /// <summary>
        /// The backing field for the Location property
        /// </summary>
        private ILocation _location;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The sequenceNumber property
        /// </summary>
        [XmlElementNameAttribute("sequenceNumber")]
        [XmlAttributeAttribute(true)]
        public virtual int SequenceNumber
        {
            get
            {
                return this._sequenceNumber;
            }
            set
            {
                if ((this._sequenceNumber != value))
                {
                    int old = this._sequenceNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSequenceNumberChanging(e);
                    this.OnPropertyChanging("SequenceNumber", e, _sequenceNumberAttribute);
                    this._sequenceNumber = value;
                    this.OnSequenceNumberChanged(e);
                    this.OnPropertyChanged("SequenceNumber", e, _sequenceNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The xPosition property
        /// </summary>
        [XmlElementNameAttribute("xPosition")]
        [XmlAttributeAttribute(true)]
        public virtual string XPosition
        {
            get
            {
                return this._xPosition;
            }
            set
            {
                if ((this._xPosition != value))
                {
                    string old = this._xPosition;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXPositionChanging(e);
                    this.OnPropertyChanging("XPosition", e, _xPositionAttribute);
                    this._xPosition = value;
                    this.OnXPositionChanged(e);
                    this.OnPropertyChanged("XPosition", e, _xPositionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The yPosition property
        /// </summary>
        [XmlElementNameAttribute("yPosition")]
        [XmlAttributeAttribute(true)]
        public virtual string YPosition
        {
            get
            {
                return this._yPosition;
            }
            set
            {
                if ((this._yPosition != value))
                {
                    string old = this._yPosition;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnYPositionChanging(e);
                    this.OnPropertyChanging("YPosition", e, _yPositionAttribute);
                    this._yPosition = value;
                    this.OnYPositionChanged(e);
                    this.OnPropertyChanged("YPosition", e, _yPositionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The zPosition property
        /// </summary>
        [XmlElementNameAttribute("zPosition")]
        [XmlAttributeAttribute(true)]
        public virtual string ZPosition
        {
            get
            {
                return this._zPosition;
            }
            set
            {
                if ((this._zPosition != value))
                {
                    string old = this._zPosition;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnZPositionChanging(e);
                    this.OnPropertyChanging("ZPosition", e, _zPositionAttribute);
                    this._zPosition = value;
                    this.OnZPositionChanged(e);
                    this.OnPropertyChanged("ZPosition", e, _zPositionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The CoordinateSystem property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PositionPoints")]
        public virtual ICoordinateSystem CoordinateSystem
        {
            get
            {
                return this._coordinateSystem;
            }
            set
            {
                if ((this._coordinateSystem != value))
                {
                    ICoordinateSystem old = this._coordinateSystem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCoordinateSystemChanging(e);
                    this.OnPropertyChanging("CoordinateSystem", e, _coordinateSystemReference);
                    this._coordinateSystem = value;
                    if ((old != null))
                    {
                        old.PositionPoints.Remove(this);
                        old.Deleted -= this.OnResetCoordinateSystem;
                    }
                    if ((value != null))
                    {
                        value.PositionPoints.Add(this);
                        value.Deleted += this.OnResetCoordinateSystem;
                    }
                    this.OnCoordinateSystemChanged(e);
                    this.OnPropertyChanged("CoordinateSystem", e, _coordinateSystemReference);
                }
            }
        }
        
        /// <summary>
        /// The Location property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual ILocation Location
        {
            get
            {
                return this._location;
            }
            set
            {
                if ((this._location != value))
                {
                    ILocation old = this._location;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocationChanging(e);
                    this.OnPropertyChanging("Location", e, _locationReference);
                    this._location = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLocation;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLocation;
                    }
                    this.OnLocationChanged(e);
                    this.OnPropertyChanged("Location", e, _locationReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PositionPointReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/PositionPoint")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the SequenceNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SequenceNumberChanging;
        
        /// <summary>
        /// Gets fired when the SequenceNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SequenceNumberChanged;
        
        /// <summary>
        /// Gets fired before the XPosition property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XPositionChanging;
        
        /// <summary>
        /// Gets fired when the XPosition property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XPositionChanged;
        
        /// <summary>
        /// Gets fired before the YPosition property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> YPositionChanging;
        
        /// <summary>
        /// Gets fired when the YPosition property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> YPositionChanged;
        
        /// <summary>
        /// Gets fired before the ZPosition property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ZPositionChanging;
        
        /// <summary>
        /// Gets fired when the ZPosition property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ZPositionChanged;
        
        /// <summary>
        /// Gets fired before the CoordinateSystem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoordinateSystemChanging;
        
        /// <summary>
        /// Gets fired when the CoordinateSystem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CoordinateSystemChanged;
        
        /// <summary>
        /// Gets fired before the Location property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocationChanging;
        
        /// <summary>
        /// Gets fired when the Location property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocationChanged;
        
        private static ITypedElement RetrieveSequenceNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PositionPoint.ClassInstance)).Resolve("sequenceNumber")));
        }
        
        /// <summary>
        /// Raises the SequenceNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSequenceNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SequenceNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SequenceNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSequenceNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SequenceNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveXPositionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PositionPoint.ClassInstance)).Resolve("xPosition")));
        }
        
        /// <summary>
        /// Raises the XPositionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXPositionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XPositionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XPositionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXPositionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XPositionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveYPositionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PositionPoint.ClassInstance)).Resolve("yPosition")));
        }
        
        /// <summary>
        /// Raises the YPositionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnYPositionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.YPositionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the YPositionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnYPositionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.YPositionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveZPositionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PositionPoint.ClassInstance)).Resolve("zPosition")));
        }
        
        /// <summary>
        /// Raises the ZPositionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZPositionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ZPositionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ZPositionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnZPositionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ZPositionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCoordinateSystemReference()
        {
            return ((ITypedElement)(((ModelElement)(PositionPoint.ClassInstance)).Resolve("CoordinateSystem")));
        }
        
        /// <summary>
        /// Raises the CoordinateSystemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoordinateSystemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoordinateSystemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CoordinateSystemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCoordinateSystemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CoordinateSystemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CoordinateSystem property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCoordinateSystem(object sender, System.EventArgs eventArgs)
        {
            this.CoordinateSystem = null;
        }
        
        private static ITypedElement RetrieveLocationReference()
        {
            return ((ITypedElement)(((ModelElement)(PositionPoint.ClassInstance)).Resolve("Location")));
        }
        
        /// <summary>
        /// Raises the LocationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Location property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLocation(object sender, System.EventArgs eventArgs)
        {
            this.Location = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SEQUENCENUMBER"))
            {
                return this.SequenceNumber;
            }
            if ((attribute == "XPOSITION"))
            {
                return this.XPosition;
            }
            if ((attribute == "YPOSITION"))
            {
                return this.YPosition;
            }
            if ((attribute == "ZPOSITION"))
            {
                return this.ZPosition;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "COORDINATESYSTEM"))
            {
                this.CoordinateSystem = ((ICoordinateSystem)(value));
                return;
            }
            if ((feature == "LOCATION"))
            {
                this.Location = ((ILocation)(value));
                return;
            }
            if ((feature == "SEQUENCENUMBER"))
            {
                this.SequenceNumber = ((int)(value));
                return;
            }
            if ((feature == "XPOSITION"))
            {
                this.XPosition = ((string)(value));
                return;
            }
            if ((feature == "YPOSITION"))
            {
                this.YPosition = ((string)(value));
                return;
            }
            if ((feature == "ZPOSITION"))
            {
                this.ZPosition = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CoordinateSystem"))
            {
                return new CoordinateSystemProxy(this);
            }
            if ((attribute == "Location"))
            {
                return new LocationProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CoordinateSystem"))
            {
                return new CoordinateSystemProxy(this);
            }
            if ((reference == "Location"))
            {
                return new LocationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/PositionPoint")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PositionPoint class
        /// </summary>
        public class PositionPointReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PositionPoint _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PositionPointReferencedElementsCollection(PositionPoint parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.CoordinateSystem != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Location != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.CoordinateSystemChanged += this.PropagateValueChanges;
                this._parent.LocationChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.CoordinateSystemChanged -= this.PropagateValueChanges;
                this._parent.LocationChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.CoordinateSystem == null))
                {
                    ICoordinateSystem coordinateSystemCasted = item.As<ICoordinateSystem>();
                    if ((coordinateSystemCasted != null))
                    {
                        this._parent.CoordinateSystem = coordinateSystemCasted;
                        return;
                    }
                }
                if ((this._parent.Location == null))
                {
                    ILocation locationCasted = item.As<ILocation>();
                    if ((locationCasted != null))
                    {
                        this._parent.Location = locationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.CoordinateSystem = null;
                this._parent.Location = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.CoordinateSystem))
                {
                    return true;
                }
                if ((item == this._parent.Location))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.CoordinateSystem != null))
                {
                    array[arrayIndex] = this._parent.CoordinateSystem;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Location != null))
                {
                    array[arrayIndex] = this._parent.Location;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.CoordinateSystem == item))
                {
                    this._parent.CoordinateSystem = null;
                    return true;
                }
                if ((this._parent.Location == item))
                {
                    this._parent.Location = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.CoordinateSystem).Concat(this._parent.Location).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sequenceNumber property
        /// </summary>
        private sealed class SequenceNumberProxy : ModelPropertyChange<IPositionPoint, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SequenceNumberProxy(IPositionPoint modelElement) : 
                    base(modelElement, "sequenceNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.SequenceNumber;
                }
                set
                {
                    this.ModelElement.SequenceNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the xPosition property
        /// </summary>
        private sealed class XPositionProxy : ModelPropertyChange<IPositionPoint, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XPositionProxy(IPositionPoint modelElement) : 
                    base(modelElement, "xPosition")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.XPosition;
                }
                set
                {
                    this.ModelElement.XPosition = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the yPosition property
        /// </summary>
        private sealed class YPositionProxy : ModelPropertyChange<IPositionPoint, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public YPositionProxy(IPositionPoint modelElement) : 
                    base(modelElement, "yPosition")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.YPosition;
                }
                set
                {
                    this.ModelElement.YPosition = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the zPosition property
        /// </summary>
        private sealed class ZPositionProxy : ModelPropertyChange<IPositionPoint, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ZPositionProxy(IPositionPoint modelElement) : 
                    base(modelElement, "zPosition")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ZPosition;
                }
                set
                {
                    this.ModelElement.ZPosition = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CoordinateSystem property
        /// </summary>
        private sealed class CoordinateSystemProxy : ModelPropertyChange<IPositionPoint, ICoordinateSystem>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CoordinateSystemProxy(IPositionPoint modelElement) : 
                    base(modelElement, "CoordinateSystem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICoordinateSystem Value
            {
                get
                {
                    return this.ModelElement.CoordinateSystem;
                }
                set
                {
                    this.ModelElement.CoordinateSystem = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Location property
        /// </summary>
        private sealed class LocationProxy : ModelPropertyChange<IPositionPoint, ILocation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocationProxy(IPositionPoint modelElement) : 
                    base(modelElement, "Location")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ILocation Value
            {
                get
                {
                    return this.ModelElement.Location;
                }
                set
                {
                    this.ModelElement.Location = value;
                }
            }
        }
    }
}

