using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61968.Common
{
    
    
    /// <summary>
    /// The default implementation of the TelephoneNumber class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Common")]
    [XmlNamespacePrefixAttribute("cimCommon")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/TelephoneNumber")]
    [DebuggerDisplayAttribute("TelephoneNumber {UUID}")]
    public partial class TelephoneNumber : Element, ITelephoneNumber, IModelElement
    {
        
        /// <summary>
        /// The backing field for the CountryCode property
        /// </summary>
        private string _countryCode;
        
        private static Lazy<ITypedElement> _countryCodeAttribute = new Lazy<ITypedElement>(RetrieveCountryCodeAttribute);
        
        /// <summary>
        /// The backing field for the CityCode property
        /// </summary>
        private string _cityCode;
        
        private static Lazy<ITypedElement> _cityCodeAttribute = new Lazy<ITypedElement>(RetrieveCityCodeAttribute);
        
        /// <summary>
        /// The backing field for the LocalNumber property
        /// </summary>
        private string _localNumber;
        
        private static Lazy<ITypedElement> _localNumberAttribute = new Lazy<ITypedElement>(RetrieveLocalNumberAttribute);
        
        /// <summary>
        /// The backing field for the AreaCode property
        /// </summary>
        private string _areaCode;
        
        private static Lazy<ITypedElement> _areaCodeAttribute = new Lazy<ITypedElement>(RetrieveAreaCodeAttribute);
        
        /// <summary>
        /// The backing field for the Extension property
        /// </summary>
        private string _extension;
        
        private static Lazy<ITypedElement> _extensionAttribute = new Lazy<ITypedElement>(RetrieveExtensionAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The countryCode property
        /// </summary>
        [XmlElementNameAttribute("countryCode")]
        [XmlAttributeAttribute(true)]
        public virtual string CountryCode
        {
            get
            {
                return this._countryCode;
            }
            set
            {
                if ((this._countryCode != value))
                {
                    string old = this._countryCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCountryCodeChanging(e);
                    this.OnPropertyChanging("CountryCode", e, _countryCodeAttribute);
                    this._countryCode = value;
                    this.OnCountryCodeChanged(e);
                    this.OnPropertyChanged("CountryCode", e, _countryCodeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The cityCode property
        /// </summary>
        [XmlElementNameAttribute("cityCode")]
        [XmlAttributeAttribute(true)]
        public virtual string CityCode
        {
            get
            {
                return this._cityCode;
            }
            set
            {
                if ((this._cityCode != value))
                {
                    string old = this._cityCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCityCodeChanging(e);
                    this.OnPropertyChanging("CityCode", e, _cityCodeAttribute);
                    this._cityCode = value;
                    this.OnCityCodeChanged(e);
                    this.OnPropertyChanged("CityCode", e, _cityCodeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The localNumber property
        /// </summary>
        [XmlElementNameAttribute("localNumber")]
        [XmlAttributeAttribute(true)]
        public virtual string LocalNumber
        {
            get
            {
                return this._localNumber;
            }
            set
            {
                if ((this._localNumber != value))
                {
                    string old = this._localNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocalNumberChanging(e);
                    this.OnPropertyChanging("LocalNumber", e, _localNumberAttribute);
                    this._localNumber = value;
                    this.OnLocalNumberChanged(e);
                    this.OnPropertyChanged("LocalNumber", e, _localNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The areaCode property
        /// </summary>
        [XmlElementNameAttribute("areaCode")]
        [XmlAttributeAttribute(true)]
        public virtual string AreaCode
        {
            get
            {
                return this._areaCode;
            }
            set
            {
                if ((this._areaCode != value))
                {
                    string old = this._areaCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAreaCodeChanging(e);
                    this.OnPropertyChanging("AreaCode", e, _areaCodeAttribute);
                    this._areaCode = value;
                    this.OnAreaCodeChanged(e);
                    this.OnPropertyChanged("AreaCode", e, _areaCodeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The extension property
        /// </summary>
        [XmlElementNameAttribute("extension")]
        [XmlAttributeAttribute(true)]
        public virtual string Extension
        {
            get
            {
                return this._extension;
            }
            set
            {
                if ((this._extension != value))
                {
                    string old = this._extension;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnExtensionChanging(e);
                    this.OnPropertyChanging("Extension", e, _extensionAttribute);
                    this._extension = value;
                    this.OnExtensionChanged(e);
                    this.OnPropertyChanged("Extension", e, _extensionAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/TelephoneNumber")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the CountryCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CountryCodeChanging;
        
        /// <summary>
        /// Gets fired when the CountryCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CountryCodeChanged;
        
        /// <summary>
        /// Gets fired before the CityCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CityCodeChanging;
        
        /// <summary>
        /// Gets fired when the CityCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CityCodeChanged;
        
        /// <summary>
        /// Gets fired before the LocalNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocalNumberChanging;
        
        /// <summary>
        /// Gets fired when the LocalNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocalNumberChanged;
        
        /// <summary>
        /// Gets fired before the AreaCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AreaCodeChanging;
        
        /// <summary>
        /// Gets fired when the AreaCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AreaCodeChanged;
        
        /// <summary>
        /// Gets fired before the Extension property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExtensionChanging;
        
        /// <summary>
        /// Gets fired when the Extension property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ExtensionChanged;
        
        private static ITypedElement RetrieveCountryCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TelephoneNumber.ClassInstance)).Resolve("countryCode")));
        }
        
        /// <summary>
        /// Raises the CountryCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCountryCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CountryCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CountryCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCountryCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CountryCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCityCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TelephoneNumber.ClassInstance)).Resolve("cityCode")));
        }
        
        /// <summary>
        /// Raises the CityCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCityCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CityCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CityCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCityCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CityCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLocalNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TelephoneNumber.ClassInstance)).Resolve("localNumber")));
        }
        
        /// <summary>
        /// Raises the LocalNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocalNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocalNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocalNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocalNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocalNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAreaCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TelephoneNumber.ClassInstance)).Resolve("areaCode")));
        }
        
        /// <summary>
        /// Raises the AreaCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAreaCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AreaCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AreaCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAreaCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AreaCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveExtensionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TelephoneNumber.ClassInstance)).Resolve("extension")));
        }
        
        /// <summary>
        /// Raises the ExtensionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExtensionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExtensionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ExtensionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnExtensionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ExtensionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "COUNTRYCODE"))
            {
                return this.CountryCode;
            }
            if ((attribute == "CITYCODE"))
            {
                return this.CityCode;
            }
            if ((attribute == "LOCALNUMBER"))
            {
                return this.LocalNumber;
            }
            if ((attribute == "AREACODE"))
            {
                return this.AreaCode;
            }
            if ((attribute == "EXTENSION"))
            {
                return this.Extension;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "COUNTRYCODE"))
            {
                this.CountryCode = ((string)(value));
                return;
            }
            if ((feature == "CITYCODE"))
            {
                this.CityCode = ((string)(value));
                return;
            }
            if ((feature == "LOCALNUMBER"))
            {
                this.LocalNumber = ((string)(value));
                return;
            }
            if ((feature == "AREACODE"))
            {
                this.AreaCode = ((string)(value));
                return;
            }
            if ((feature == "EXTENSION"))
            {
                this.Extension = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/TelephoneNumber")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the countryCode property
        /// </summary>
        private sealed class CountryCodeProxy : ModelPropertyChange<ITelephoneNumber, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CountryCodeProxy(ITelephoneNumber modelElement) : 
                    base(modelElement, "countryCode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.CountryCode;
                }
                set
                {
                    this.ModelElement.CountryCode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the cityCode property
        /// </summary>
        private sealed class CityCodeProxy : ModelPropertyChange<ITelephoneNumber, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CityCodeProxy(ITelephoneNumber modelElement) : 
                    base(modelElement, "cityCode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.CityCode;
                }
                set
                {
                    this.ModelElement.CityCode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the localNumber property
        /// </summary>
        private sealed class LocalNumberProxy : ModelPropertyChange<ITelephoneNumber, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocalNumberProxy(ITelephoneNumber modelElement) : 
                    base(modelElement, "localNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.LocalNumber;
                }
                set
                {
                    this.ModelElement.LocalNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the areaCode property
        /// </summary>
        private sealed class AreaCodeProxy : ModelPropertyChange<ITelephoneNumber, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AreaCodeProxy(ITelephoneNumber modelElement) : 
                    base(modelElement, "areaCode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AreaCode;
                }
                set
                {
                    this.ModelElement.AreaCode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the extension property
        /// </summary>
        private sealed class ExtensionProxy : ModelPropertyChange<ITelephoneNumber, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ExtensionProxy(ITelephoneNumber modelElement) : 
                    base(modelElement, "extension")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Extension;
                }
                set
                {
                    this.ModelElement.Extension = value;
                }
            }
        }
    }
}

