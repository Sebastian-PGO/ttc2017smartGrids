//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61968.Common
{
    
    
    /// <summary>
    /// The default implementation of the Status class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Common")]
    [XmlNamespacePrefixAttribute("cimCommon")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/Status")]
    [DebuggerDisplayAttribute("Status {UUID}")]
    public partial class Status : Element, IStatus, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Reason property
        /// </summary>
        private string _reason;
        
        private static Lazy<ITypedElement> _reasonAttribute = new Lazy<ITypedElement>(RetrieveReasonAttribute);
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        private string _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        /// <summary>
        /// The backing field for the Remark property
        /// </summary>
        private string _remark;
        
        private static Lazy<ITypedElement> _remarkAttribute = new Lazy<ITypedElement>(RetrieveRemarkAttribute);
        
        /// <summary>
        /// The backing field for the DateTime property
        /// </summary>
        private DateTime _dateTime;
        
        private static Lazy<ITypedElement> _dateTimeAttribute = new Lazy<ITypedElement>(RetrieveDateTimeAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The reason property
        /// </summary>
        [XmlElementNameAttribute("reason")]
        [XmlAttributeAttribute(true)]
        public virtual string Reason
        {
            get
            {
                return this._reason;
            }
            set
            {
                if ((this._reason != value))
                {
                    string old = this._reason;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReasonChanging(e);
                    this.OnPropertyChanging("Reason", e, _reasonAttribute);
                    this._reason = value;
                    this.OnReasonChanged(e);
                    this.OnPropertyChanged("Reason", e, _reasonAttribute);
                }
            }
        }
        
        /// <summary>
        /// The value property
        /// </summary>
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public virtual string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    string old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The remark property
        /// </summary>
        [XmlElementNameAttribute("remark")]
        [XmlAttributeAttribute(true)]
        public virtual string Remark
        {
            get
            {
                return this._remark;
            }
            set
            {
                if ((this._remark != value))
                {
                    string old = this._remark;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRemarkChanging(e);
                    this.OnPropertyChanging("Remark", e, _remarkAttribute);
                    this._remark = value;
                    this.OnRemarkChanged(e);
                    this.OnPropertyChanged("Remark", e, _remarkAttribute);
                }
            }
        }
        
        /// <summary>
        /// The dateTime property
        /// </summary>
        [XmlElementNameAttribute("dateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime DateTime
        {
            get
            {
                return this._dateTime;
            }
            set
            {
                if ((this._dateTime != value))
                {
                    DateTime old = this._dateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDateTimeChanging(e);
                    this.OnPropertyChanging("DateTime", e, _dateTimeAttribute);
                    this._dateTime = value;
                    this.OnDateTimeChanged(e);
                    this.OnPropertyChanged("DateTime", e, _dateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/Status")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Reason property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReasonChanging;
        
        /// <summary>
        /// Gets fired when the Reason property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReasonChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanging;
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the Remark property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RemarkChanging;
        
        /// <summary>
        /// Gets fired when the Remark property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RemarkChanged;
        
        /// <summary>
        /// Gets fired before the DateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateTimeChanging;
        
        /// <summary>
        /// Gets fired when the DateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DateTimeChanged;
        
        private static ITypedElement RetrieveReasonAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Status.ClassInstance)).Resolve("reason")));
        }
        
        /// <summary>
        /// Raises the ReasonChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReasonChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReasonChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReasonChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReasonChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReasonChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Status.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRemarkAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Status.ClassInstance)).Resolve("remark")));
        }
        
        /// <summary>
        /// Raises the RemarkChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemarkChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RemarkChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RemarkChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRemarkChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RemarkChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Status.ClassInstance)).Resolve("dateTime")));
        }
        
        /// <summary>
        /// Raises the DateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "REASON"))
            {
                return this.Reason;
            }
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            if ((attribute == "REMARK"))
            {
                return this.Remark;
            }
            if ((attribute == "DATETIME"))
            {
                return this.DateTime;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "REASON"))
            {
                this.Reason = ((string)(value));
                return;
            }
            if ((feature == "VALUE"))
            {
                this.Value = ((string)(value));
                return;
            }
            if ((feature == "REMARK"))
            {
                this.Remark = ((string)(value));
                return;
            }
            if ((feature == "DATETIME"))
            {
                this.DateTime = ((DateTime)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/Status")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the reason property
        /// </summary>
        private sealed class ReasonProxy : ModelPropertyChange<IStatus, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReasonProxy(IStatus modelElement) : 
                    base(modelElement, "reason")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Reason;
                }
                set
                {
                    this.ModelElement.Reason = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IStatus, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IStatus modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the remark property
        /// </summary>
        private sealed class RemarkProxy : ModelPropertyChange<IStatus, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RemarkProxy(IStatus modelElement) : 
                    base(modelElement, "remark")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Remark;
                }
                set
                {
                    this.ModelElement.Remark = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dateTime property
        /// </summary>
        private sealed class DateTimeProxy : ModelPropertyChange<IStatus, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DateTimeProxy(IStatus modelElement) : 
                    base(modelElement, "dateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.DateTime;
                }
                set
                {
                    this.ModelElement.DateTime = value;
                }
            }
        }
    }
}

