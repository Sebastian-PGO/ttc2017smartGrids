//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61968.Common
{
    
    
    /// <summary>
    /// The default implementation of the Location class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Common")]
    [XmlNamespacePrefixAttribute("cimCommon")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/Location")]
    [DebuggerDisplayAttribute("Location {UUID}")]
    public partial class Location : IdentifiedObject, ILocation, IModelElement
    {
        
        /// <summary>
        /// The backing field for the GeoInfoReference property
        /// </summary>
        private string _geoInfoReference;
        
        private static Lazy<ITypedElement> _geoInfoReferenceAttribute = new Lazy<ITypedElement>(RetrieveGeoInfoReferenceAttribute);
        
        /// <summary>
        /// The backing field for the Category property
        /// </summary>
        private string _category;
        
        private static Lazy<ITypedElement> _categoryAttribute = new Lazy<ITypedElement>(RetrieveCategoryAttribute);
        
        /// <summary>
        /// The backing field for the CorporateCode property
        /// </summary>
        private string _corporateCode;
        
        private static Lazy<ITypedElement> _corporateCodeAttribute = new Lazy<ITypedElement>(RetrieveCorporateCodeAttribute);
        
        /// <summary>
        /// The backing field for the Direction property
        /// </summary>
        private string _direction;
        
        private static Lazy<ITypedElement> _directionAttribute = new Lazy<ITypedElement>(RetrieveDirectionAttribute);
        
        private static Lazy<ITypedElement> _secondaryAddressReference = new Lazy<ITypedElement>(RetrieveSecondaryAddressReference);
        
        /// <summary>
        /// The backing field for the SecondaryAddress property
        /// </summary>
        private IStreetAddress _secondaryAddress;
        
        private static Lazy<ITypedElement> _measurementsReference = new Lazy<ITypedElement>(RetrieveMeasurementsReference);
        
        /// <summary>
        /// The backing field for the Measurements property
        /// </summary>
        private LocationMeasurementsCollection _measurements;
        
        private static Lazy<ITypedElement> _directionsReference = new Lazy<ITypedElement>(RetrieveDirectionsReference);
        
        /// <summary>
        /// The backing field for the Directions property
        /// </summary>
        private LocationDirectionsCollection _directions;
        
        private static Lazy<ITypedElement> _powerSystemResourcesReference = new Lazy<ITypedElement>(RetrievePowerSystemResourcesReference);
        
        /// <summary>
        /// The backing field for the PowerSystemResources property
        /// </summary>
        private LocationPowerSystemResourcesCollection _powerSystemResources;
        
        private static Lazy<ITypedElement> _phone2Reference = new Lazy<ITypedElement>(RetrievePhone2Reference);
        
        /// <summary>
        /// The backing field for the Phone2 property
        /// </summary>
        private ITelephoneNumber _phone2;
        
        private static Lazy<ITypedElement> _phone1Reference = new Lazy<ITypedElement>(RetrievePhone1Reference);
        
        /// <summary>
        /// The backing field for the Phone1 property
        /// </summary>
        private ITelephoneNumber _phone1;
        
        private static Lazy<ITypedElement> _landPropertiesReference = new Lazy<ITypedElement>(RetrieveLandPropertiesReference);
        
        /// <summary>
        /// The backing field for the LandProperties property
        /// </summary>
        private LocationLandPropertiesCollection _landProperties;
        
        private static Lazy<ITypedElement> _dimensionsInfoReference = new Lazy<ITypedElement>(RetrieveDimensionsInfoReference);
        
        /// <summary>
        /// The backing field for the DimensionsInfo property
        /// </summary>
        private IDimensionsInfo _dimensionsInfo;
        
        private static Lazy<ITypedElement> _changeItemsReference = new Lazy<ITypedElement>(RetrieveChangeItemsReference);
        
        /// <summary>
        /// The backing field for the ChangeItems property
        /// </summary>
        private LocationChangeItemsCollection _changeItems;
        
        private static Lazy<ITypedElement> _erpOrganisationsReference = new Lazy<ITypedElement>(RetrieveErpOrganisationsReference);
        
        /// <summary>
        /// The backing field for the ErpOrganisations property
        /// </summary>
        private LocationErpOrganisationsCollection _erpOrganisations;
        
        private static Lazy<ITypedElement> _coordinateSystemsReference = new Lazy<ITypedElement>(RetrieveCoordinateSystemsReference);
        
        /// <summary>
        /// The backing field for the CoordinateSystems property
        /// </summary>
        private LocationCoordinateSystemsCollection _coordinateSystems;
        
        private static Lazy<ITypedElement> _assetsReference = new Lazy<ITypedElement>(RetrieveAssetsReference);
        
        /// <summary>
        /// The backing field for the Assets property
        /// </summary>
        private LocationAssetsCollection _assets;
        
        private static Lazy<ITypedElement> _routesReference = new Lazy<ITypedElement>(RetrieveRoutesReference);
        
        /// <summary>
        /// The backing field for the Routes property
        /// </summary>
        private LocationRoutesCollection _routes;
        
        private static Lazy<ITypedElement> _hazardsReference = new Lazy<ITypedElement>(RetrieveHazardsReference);
        
        /// <summary>
        /// The backing field for the Hazards property
        /// </summary>
        private LocationHazardsCollection _hazards;
        
        private static Lazy<ITypedElement> _mainAddressReference = new Lazy<ITypedElement>(RetrieveMainAddressReference);
        
        /// <summary>
        /// The backing field for the MainAddress property
        /// </summary>
        private IStreetAddress _mainAddress;
        
        private static Lazy<ITypedElement> _electronicAddressReference = new Lazy<ITypedElement>(RetrieveElectronicAddressReference);
        
        /// <summary>
        /// The backing field for the ElectronicAddress property
        /// </summary>
        private IElectronicAddress _electronicAddress;
        
        private static Lazy<ITypedElement> _redLinesReference = new Lazy<ITypedElement>(RetrieveRedLinesReference);
        
        /// <summary>
        /// The backing field for the RedLines property
        /// </summary>
        private LocationRedLinesCollection _redLines;
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static Lazy<ITypedElement> _crewsReference = new Lazy<ITypedElement>(RetrieveCrewsReference);
        
        /// <summary>
        /// The backing field for the Crews property
        /// </summary>
        private LocationCrewsCollection _crews;
        
        private static Lazy<ITypedElement> _positionReference = new Lazy<ITypedElement>(RetrievePositionReference);
        
        /// <summary>
        /// The backing field for the Position property
        /// </summary>
        private IPositionPoint _position;
        
        private static IClass _classInstance;
        
        public Location()
        {
            this._measurements = new LocationMeasurementsCollection(this);
            this._measurements.CollectionChanging += this.MeasurementsCollectionChanging;
            this._measurements.CollectionChanged += this.MeasurementsCollectionChanged;
            this._directions = new LocationDirectionsCollection(this);
            this._directions.CollectionChanging += this.DirectionsCollectionChanging;
            this._directions.CollectionChanged += this.DirectionsCollectionChanged;
            this._powerSystemResources = new LocationPowerSystemResourcesCollection(this);
            this._powerSystemResources.CollectionChanging += this.PowerSystemResourcesCollectionChanging;
            this._powerSystemResources.CollectionChanged += this.PowerSystemResourcesCollectionChanged;
            this._landProperties = new LocationLandPropertiesCollection(this);
            this._landProperties.CollectionChanging += this.LandPropertiesCollectionChanging;
            this._landProperties.CollectionChanged += this.LandPropertiesCollectionChanged;
            this._changeItems = new LocationChangeItemsCollection(this);
            this._changeItems.CollectionChanging += this.ChangeItemsCollectionChanging;
            this._changeItems.CollectionChanged += this.ChangeItemsCollectionChanged;
            this._erpOrganisations = new LocationErpOrganisationsCollection(this);
            this._erpOrganisations.CollectionChanging += this.ErpOrganisationsCollectionChanging;
            this._erpOrganisations.CollectionChanged += this.ErpOrganisationsCollectionChanged;
            this._coordinateSystems = new LocationCoordinateSystemsCollection(this);
            this._coordinateSystems.CollectionChanging += this.CoordinateSystemsCollectionChanging;
            this._coordinateSystems.CollectionChanged += this.CoordinateSystemsCollectionChanged;
            this._assets = new LocationAssetsCollection(this);
            this._assets.CollectionChanging += this.AssetsCollectionChanging;
            this._assets.CollectionChanged += this.AssetsCollectionChanged;
            this._routes = new LocationRoutesCollection(this);
            this._routes.CollectionChanging += this.RoutesCollectionChanging;
            this._routes.CollectionChanged += this.RoutesCollectionChanged;
            this._hazards = new LocationHazardsCollection(this);
            this._hazards.CollectionChanging += this.HazardsCollectionChanging;
            this._hazards.CollectionChanged += this.HazardsCollectionChanged;
            this._redLines = new LocationRedLinesCollection(this);
            this._redLines.CollectionChanging += this.RedLinesCollectionChanging;
            this._redLines.CollectionChanged += this.RedLinesCollectionChanged;
            this._crews = new LocationCrewsCollection(this);
            this._crews.CollectionChanging += this.CrewsCollectionChanging;
            this._crews.CollectionChanged += this.CrewsCollectionChanged;
        }
        
        /// <summary>
        /// The geoInfoReference property
        /// </summary>
        [XmlElementNameAttribute("geoInfoReference")]
        [XmlAttributeAttribute(true)]
        public virtual string GeoInfoReference
        {
            get
            {
                return this._geoInfoReference;
            }
            set
            {
                if ((this._geoInfoReference != value))
                {
                    string old = this._geoInfoReference;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGeoInfoReferenceChanging(e);
                    this.OnPropertyChanging("GeoInfoReference", e, _geoInfoReferenceAttribute);
                    this._geoInfoReference = value;
                    this.OnGeoInfoReferenceChanged(e);
                    this.OnPropertyChanged("GeoInfoReference", e, _geoInfoReferenceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The category property
        /// </summary>
        [XmlElementNameAttribute("category")]
        [XmlAttributeAttribute(true)]
        public virtual string Category
        {
            get
            {
                return this._category;
            }
            set
            {
                if ((this._category != value))
                {
                    string old = this._category;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCategoryChanging(e);
                    this.OnPropertyChanging("Category", e, _categoryAttribute);
                    this._category = value;
                    this.OnCategoryChanged(e);
                    this.OnPropertyChanged("Category", e, _categoryAttribute);
                }
            }
        }
        
        /// <summary>
        /// The corporateCode property
        /// </summary>
        [XmlElementNameAttribute("corporateCode")]
        [XmlAttributeAttribute(true)]
        public virtual string CorporateCode
        {
            get
            {
                return this._corporateCode;
            }
            set
            {
                if ((this._corporateCode != value))
                {
                    string old = this._corporateCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCorporateCodeChanging(e);
                    this.OnPropertyChanging("CorporateCode", e, _corporateCodeAttribute);
                    this._corporateCode = value;
                    this.OnCorporateCodeChanged(e);
                    this.OnPropertyChanged("CorporateCode", e, _corporateCodeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The direction property
        /// </summary>
        [XmlElementNameAttribute("direction")]
        [XmlAttributeAttribute(true)]
        public virtual string Direction
        {
            get
            {
                return this._direction;
            }
            set
            {
                if ((this._direction != value))
                {
                    string old = this._direction;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDirectionChanging(e);
                    this.OnPropertyChanging("Direction", e, _directionAttribute);
                    this._direction = value;
                    this.OnDirectionChanged(e);
                    this.OnPropertyChanged("Direction", e, _directionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The secondaryAddress property
        /// </summary>
        [XmlElementNameAttribute("secondaryAddress")]
        [XmlAttributeAttribute(true)]
        public virtual IStreetAddress SecondaryAddress
        {
            get
            {
                return this._secondaryAddress;
            }
            set
            {
                if ((this._secondaryAddress != value))
                {
                    IStreetAddress old = this._secondaryAddress;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSecondaryAddressChanging(e);
                    this.OnPropertyChanging("SecondaryAddress", e, _secondaryAddressReference);
                    this._secondaryAddress = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetSecondaryAddress;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetSecondaryAddress;
                    }
                    this.OnSecondaryAddressChanged(e);
                    this.OnPropertyChanged("SecondaryAddress", e, _secondaryAddressReference);
                }
            }
        }
        
        /// <summary>
        /// The Measurements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Locations")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMeasurement> Measurements
        {
            get
            {
                return this._measurements;
            }
        }
        
        /// <summary>
        /// The Directions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Location")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDirection> Directions
        {
            get
            {
                return this._directions;
            }
        }
        
        /// <summary>
        /// The PowerSystemResources property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Location")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IPowerSystemResource> PowerSystemResources
        {
            get
            {
                return this._powerSystemResources;
            }
        }
        
        /// <summary>
        /// The phone2 property
        /// </summary>
        [XmlElementNameAttribute("phone2")]
        [XmlAttributeAttribute(true)]
        public virtual ITelephoneNumber Phone2
        {
            get
            {
                return this._phone2;
            }
            set
            {
                if ((this._phone2 != value))
                {
                    ITelephoneNumber old = this._phone2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhone2Changing(e);
                    this.OnPropertyChanging("Phone2", e, _phone2Reference);
                    this._phone2 = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPhone2;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPhone2;
                    }
                    this.OnPhone2Changed(e);
                    this.OnPropertyChanged("Phone2", e, _phone2Reference);
                }
            }
        }
        
        /// <summary>
        /// The phone1 property
        /// </summary>
        [XmlElementNameAttribute("phone1")]
        [XmlAttributeAttribute(true)]
        public virtual ITelephoneNumber Phone1
        {
            get
            {
                return this._phone1;
            }
            set
            {
                if ((this._phone1 != value))
                {
                    ITelephoneNumber old = this._phone1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhone1Changing(e);
                    this.OnPropertyChanging("Phone1", e, _phone1Reference);
                    this._phone1 = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPhone1;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPhone1;
                    }
                    this.OnPhone1Changed(e);
                    this.OnPropertyChanged("Phone1", e, _phone1Reference);
                }
            }
        }
        
        /// <summary>
        /// The LandProperties property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Locations")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ILandProperty> LandProperties
        {
            get
            {
                return this._landProperties;
            }
        }
        
        /// <summary>
        /// The DimensionsInfo property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Locations")]
        public virtual IDimensionsInfo DimensionsInfo
        {
            get
            {
                return this._dimensionsInfo;
            }
            set
            {
                if ((this._dimensionsInfo != value))
                {
                    IDimensionsInfo old = this._dimensionsInfo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDimensionsInfoChanging(e);
                    this.OnPropertyChanging("DimensionsInfo", e, _dimensionsInfoReference);
                    this._dimensionsInfo = value;
                    if ((old != null))
                    {
                        old.Locations.Remove(this);
                        old.Deleted -= this.OnResetDimensionsInfo;
                    }
                    if ((value != null))
                    {
                        value.Locations.Add(this);
                        value.Deleted += this.OnResetDimensionsInfo;
                    }
                    this.OnDimensionsInfoChanged(e);
                    this.OnPropertyChanged("DimensionsInfo", e, _dimensionsInfoReference);
                }
            }
        }
        
        /// <summary>
        /// The ChangeItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Location")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IChangeItem> ChangeItems
        {
            get
            {
                return this._changeItems;
            }
        }
        
        /// <summary>
        /// The ErpOrganisations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Locations")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpOrganisation> ErpOrganisations
        {
            get
            {
                return this._erpOrganisations;
            }
        }
        
        /// <summary>
        /// The CoordinateSystems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Location")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICoordinateSystem> CoordinateSystems
        {
            get
            {
                return this._coordinateSystems;
            }
        }
        
        /// <summary>
        /// The Assets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Location")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAsset> Assets
        {
            get
            {
                return this._assets;
            }
        }
        
        /// <summary>
        /// The Routes property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Locations")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IRoute> Routes
        {
            get
            {
                return this._routes;
            }
        }
        
        /// <summary>
        /// The Hazards property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Locations")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IHazard> Hazards
        {
            get
            {
                return this._hazards;
            }
        }
        
        /// <summary>
        /// The mainAddress property
        /// </summary>
        [XmlElementNameAttribute("mainAddress")]
        [XmlAttributeAttribute(true)]
        public virtual IStreetAddress MainAddress
        {
            get
            {
                return this._mainAddress;
            }
            set
            {
                if ((this._mainAddress != value))
                {
                    IStreetAddress old = this._mainAddress;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMainAddressChanging(e);
                    this.OnPropertyChanging("MainAddress", e, _mainAddressReference);
                    this._mainAddress = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetMainAddress;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetMainAddress;
                    }
                    this.OnMainAddressChanged(e);
                    this.OnPropertyChanged("MainAddress", e, _mainAddressReference);
                }
            }
        }
        
        /// <summary>
        /// The electronicAddress property
        /// </summary>
        [XmlElementNameAttribute("electronicAddress")]
        [XmlAttributeAttribute(true)]
        public virtual IElectronicAddress ElectronicAddress
        {
            get
            {
                return this._electronicAddress;
            }
            set
            {
                if ((this._electronicAddress != value))
                {
                    IElectronicAddress old = this._electronicAddress;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnElectronicAddressChanging(e);
                    this.OnPropertyChanging("ElectronicAddress", e, _electronicAddressReference);
                    this._electronicAddress = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetElectronicAddress;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetElectronicAddress;
                    }
                    this.OnElectronicAddressChanged(e);
                    this.OnPropertyChanged("ElectronicAddress", e, _electronicAddressReference);
                }
            }
        }
        
        /// <summary>
        /// The RedLines property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Locations")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IRedLine> RedLines
        {
            get
            {
                return this._redLines;
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// The Crews property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Locations")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICrew> Crews
        {
            get
            {
                return this._crews;
            }
        }
        
        /// <summary>
        /// The Position property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IPositionPoint Position
        {
            get
            {
                return this._position;
            }
            set
            {
                if ((this._position != value))
                {
                    IPositionPoint old = this._position;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPositionChanging(e);
                    this.OnPropertyChanging("Position", e, _positionReference);
                    this._position = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPosition;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPosition;
                    }
                    this.OnPositionChanged(e);
                    this.OnPropertyChanged("Position", e, _positionReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new LocationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/Location")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the GeoInfoReference property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GeoInfoReferenceChanging;
        
        /// <summary>
        /// Gets fired when the GeoInfoReference property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GeoInfoReferenceChanged;
        
        /// <summary>
        /// Gets fired before the Category property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CategoryChanging;
        
        /// <summary>
        /// Gets fired when the Category property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CategoryChanged;
        
        /// <summary>
        /// Gets fired before the CorporateCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CorporateCodeChanging;
        
        /// <summary>
        /// Gets fired when the CorporateCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CorporateCodeChanged;
        
        /// <summary>
        /// Gets fired before the Direction property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirectionChanging;
        
        /// <summary>
        /// Gets fired when the Direction property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DirectionChanged;
        
        /// <summary>
        /// Gets fired before the SecondaryAddress property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SecondaryAddressChanging;
        
        /// <summary>
        /// Gets fired when the SecondaryAddress property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SecondaryAddressChanged;
        
        /// <summary>
        /// Gets fired before the Phone2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Phone2Changing;
        
        /// <summary>
        /// Gets fired when the Phone2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Phone2Changed;
        
        /// <summary>
        /// Gets fired before the Phone1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Phone1Changing;
        
        /// <summary>
        /// Gets fired when the Phone1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Phone1Changed;
        
        /// <summary>
        /// Gets fired before the DimensionsInfo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DimensionsInfoChanging;
        
        /// <summary>
        /// Gets fired when the DimensionsInfo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DimensionsInfoChanged;
        
        /// <summary>
        /// Gets fired before the MainAddress property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MainAddressChanging;
        
        /// <summary>
        /// Gets fired when the MainAddress property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MainAddressChanged;
        
        /// <summary>
        /// Gets fired before the ElectronicAddress property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ElectronicAddressChanging;
        
        /// <summary>
        /// Gets fired when the ElectronicAddress property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ElectronicAddressChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the Position property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PositionChanging;
        
        /// <summary>
        /// Gets fired when the Position property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PositionChanged;
        
        private static ITypedElement RetrieveGeoInfoReferenceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("geoInfoReference")));
        }
        
        /// <summary>
        /// Raises the GeoInfoReferenceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGeoInfoReferenceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GeoInfoReferenceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GeoInfoReferenceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGeoInfoReferenceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GeoInfoReferenceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCategoryAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("category")));
        }
        
        /// <summary>
        /// Raises the CategoryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCategoryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CategoryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CategoryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCategoryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CategoryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCorporateCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("corporateCode")));
        }
        
        /// <summary>
        /// Raises the CorporateCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCorporateCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CorporateCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CorporateCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCorporateCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CorporateCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDirectionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("direction")));
        }
        
        /// <summary>
        /// Raises the DirectionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirectionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirectionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DirectionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDirectionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DirectionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSecondaryAddressReference()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("secondaryAddress")));
        }
        
        /// <summary>
        /// Raises the SecondaryAddressChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSecondaryAddressChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SecondaryAddressChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SecondaryAddressChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSecondaryAddressChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SecondaryAddressChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the SecondaryAddress property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetSecondaryAddress(object sender, System.EventArgs eventArgs)
        {
            this.SecondaryAddress = null;
        }
        
        private static ITypedElement RetrieveMeasurementsReference()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("Measurements")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Measurements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeasurementsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Measurements", e, _measurementsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Measurements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeasurementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Measurements", e, _measurementsReference);
        }
        
        private static ITypedElement RetrieveDirectionsReference()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("Directions")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Directions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DirectionsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Directions", e, _directionsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Directions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DirectionsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Directions", e, _directionsReference);
        }
        
        private static ITypedElement RetrievePowerSystemResourcesReference()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("PowerSystemResources")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PowerSystemResources property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PowerSystemResourcesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("PowerSystemResources", e, _powerSystemResourcesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PowerSystemResources property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PowerSystemResourcesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PowerSystemResources", e, _powerSystemResourcesReference);
        }
        
        private static ITypedElement RetrievePhone2Reference()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("phone2")));
        }
        
        /// <summary>
        /// Raises the Phone2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhone2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Phone2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Phone2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhone2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Phone2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Phone2 property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhone2(object sender, System.EventArgs eventArgs)
        {
            this.Phone2 = null;
        }
        
        private static ITypedElement RetrievePhone1Reference()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("phone1")));
        }
        
        /// <summary>
        /// Raises the Phone1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhone1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Phone1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Phone1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhone1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Phone1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Phone1 property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhone1(object sender, System.EventArgs eventArgs)
        {
            this.Phone1 = null;
        }
        
        private static ITypedElement RetrieveLandPropertiesReference()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("LandProperties")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the LandProperties property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LandPropertiesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("LandProperties", e, _landPropertiesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the LandProperties property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void LandPropertiesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("LandProperties", e, _landPropertiesReference);
        }
        
        private static ITypedElement RetrieveDimensionsInfoReference()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("DimensionsInfo")));
        }
        
        /// <summary>
        /// Raises the DimensionsInfoChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDimensionsInfoChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DimensionsInfoChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DimensionsInfoChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDimensionsInfoChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DimensionsInfoChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the DimensionsInfo property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDimensionsInfo(object sender, System.EventArgs eventArgs)
        {
            this.DimensionsInfo = null;
        }
        
        private static ITypedElement RetrieveChangeItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("ChangeItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ChangeItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChangeItemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ChangeItems", e, _changeItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ChangeItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChangeItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ChangeItems", e, _changeItemsReference);
        }
        
        private static ITypedElement RetrieveErpOrganisationsReference()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("ErpOrganisations")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpOrganisations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpOrganisationsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ErpOrganisations", e, _erpOrganisationsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpOrganisations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpOrganisationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpOrganisations", e, _erpOrganisationsReference);
        }
        
        private static ITypedElement RetrieveCoordinateSystemsReference()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("CoordinateSystems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the CoordinateSystems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CoordinateSystemsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("CoordinateSystems", e, _coordinateSystemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the CoordinateSystems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CoordinateSystemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("CoordinateSystems", e, _coordinateSystemsReference);
        }
        
        private static ITypedElement RetrieveAssetsReference()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("Assets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Assets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Assets", e, _assetsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Assets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Assets", e, _assetsReference);
        }
        
        private static ITypedElement RetrieveRoutesReference()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("Routes")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Routes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RoutesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Routes", e, _routesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Routes property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RoutesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Routes", e, _routesReference);
        }
        
        private static ITypedElement RetrieveHazardsReference()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("Hazards")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Hazards property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HazardsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Hazards", e, _hazardsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Hazards property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HazardsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Hazards", e, _hazardsReference);
        }
        
        private static ITypedElement RetrieveMainAddressReference()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("mainAddress")));
        }
        
        /// <summary>
        /// Raises the MainAddressChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMainAddressChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MainAddressChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MainAddressChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMainAddressChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MainAddressChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MainAddress property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMainAddress(object sender, System.EventArgs eventArgs)
        {
            this.MainAddress = null;
        }
        
        private static ITypedElement RetrieveElectronicAddressReference()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("electronicAddress")));
        }
        
        /// <summary>
        /// Raises the ElectronicAddressChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectronicAddressChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ElectronicAddressChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ElectronicAddressChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectronicAddressChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ElectronicAddressChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ElectronicAddress property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetElectronicAddress(object sender, System.EventArgs eventArgs)
        {
            this.ElectronicAddress = null;
        }
        
        private static ITypedElement RetrieveRedLinesReference()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("RedLines")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RedLines property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RedLinesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("RedLines", e, _redLinesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RedLines property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RedLinesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RedLines", e, _redLinesReference);
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        private static ITypedElement RetrieveCrewsReference()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("Crews")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Crews property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CrewsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("Crews", e, _crewsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Crews property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CrewsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Crews", e, _crewsReference);
        }
        
        private static ITypedElement RetrievePositionReference()
        {
            return ((ITypedElement)(((ModelElement)(Location.ClassInstance)).Resolve("Position")));
        }
        
        /// <summary>
        /// Raises the PositionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPositionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PositionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PositionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPositionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PositionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Position property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPosition(object sender, System.EventArgs eventArgs)
        {
            this.Position = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "GEOINFOREFERENCE"))
            {
                return this.GeoInfoReference;
            }
            if ((attribute == "CATEGORY"))
            {
                return this.Category;
            }
            if ((attribute == "CORPORATECODE"))
            {
                return this.CorporateCode;
            }
            if ((attribute == "DIRECTION"))
            {
                return this.Direction;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "MEASUREMENTS"))
            {
                return this._measurements;
            }
            if ((feature == "DIRECTIONS"))
            {
                return this._directions;
            }
            if ((feature == "POWERSYSTEMRESOURCES"))
            {
                return this._powerSystemResources;
            }
            if ((feature == "LANDPROPERTIES"))
            {
                return this._landProperties;
            }
            if ((feature == "CHANGEITEMS"))
            {
                return this._changeItems;
            }
            if ((feature == "ERPORGANISATIONS"))
            {
                return this._erpOrganisations;
            }
            if ((feature == "COORDINATESYSTEMS"))
            {
                return this._coordinateSystems;
            }
            if ((feature == "ASSETS"))
            {
                return this._assets;
            }
            if ((feature == "ROUTES"))
            {
                return this._routes;
            }
            if ((feature == "HAZARDS"))
            {
                return this._hazards;
            }
            if ((feature == "REDLINES"))
            {
                return this._redLines;
            }
            if ((feature == "CREWS"))
            {
                return this._crews;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SECONDARYADDRESS"))
            {
                this.SecondaryAddress = ((IStreetAddress)(value));
                return;
            }
            if ((feature == "PHONE2"))
            {
                this.Phone2 = ((ITelephoneNumber)(value));
                return;
            }
            if ((feature == "PHONE1"))
            {
                this.Phone1 = ((ITelephoneNumber)(value));
                return;
            }
            if ((feature == "DIMENSIONSINFO"))
            {
                this.DimensionsInfo = ((IDimensionsInfo)(value));
                return;
            }
            if ((feature == "MAINADDRESS"))
            {
                this.MainAddress = ((IStreetAddress)(value));
                return;
            }
            if ((feature == "ELECTRONICADDRESS"))
            {
                this.ElectronicAddress = ((IElectronicAddress)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "POSITION"))
            {
                this.Position = ((IPositionPoint)(value));
                return;
            }
            if ((feature == "GEOINFOREFERENCE"))
            {
                this.GeoInfoReference = ((string)(value));
                return;
            }
            if ((feature == "CATEGORY"))
            {
                this.Category = ((string)(value));
                return;
            }
            if ((feature == "CORPORATECODE"))
            {
                this.CorporateCode = ((string)(value));
                return;
            }
            if ((feature == "DIRECTION"))
            {
                this.Direction = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "SecondaryAddress"))
            {
                return new SecondaryAddressProxy(this);
            }
            if ((attribute == "Phone2"))
            {
                return new Phone2Proxy(this);
            }
            if ((attribute == "Phone1"))
            {
                return new Phone1Proxy(this);
            }
            if ((attribute == "DimensionsInfo"))
            {
                return new DimensionsInfoProxy(this);
            }
            if ((attribute == "MainAddress"))
            {
                return new MainAddressProxy(this);
            }
            if ((attribute == "ElectronicAddress"))
            {
                return new ElectronicAddressProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((attribute == "Position"))
            {
                return new PositionProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "SecondaryAddress"))
            {
                return new SecondaryAddressProxy(this);
            }
            if ((reference == "Phone2"))
            {
                return new Phone2Proxy(this);
            }
            if ((reference == "Phone1"))
            {
                return new Phone1Proxy(this);
            }
            if ((reference == "DimensionsInfo"))
            {
                return new DimensionsInfoProxy(this);
            }
            if ((reference == "MainAddress"))
            {
                return new MainAddressProxy(this);
            }
            if ((reference == "ElectronicAddress"))
            {
                return new ElectronicAddressProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((reference == "Position"))
            {
                return new PositionProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/Location")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Location class
        /// </summary>
        public class LocationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Location _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public LocationReferencedElementsCollection(Location parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.SecondaryAddress != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Measurements.Count);
                    count = (count + this._parent.Directions.Count);
                    count = (count + this._parent.PowerSystemResources.Count);
                    if ((this._parent.Phone2 != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Phone1 != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.LandProperties.Count);
                    if ((this._parent.DimensionsInfo != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ChangeItems.Count);
                    count = (count + this._parent.ErpOrganisations.Count);
                    count = (count + this._parent.CoordinateSystems.Count);
                    count = (count + this._parent.Assets.Count);
                    count = (count + this._parent.Routes.Count);
                    count = (count + this._parent.Hazards.Count);
                    if ((this._parent.MainAddress != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElectronicAddress != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.RedLines.Count);
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Crews.Count);
                    if ((this._parent.Position != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.SecondaryAddressChanged += this.PropagateValueChanges;
                this._parent.Measurements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Directions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PowerSystemResources.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Phone2Changed += this.PropagateValueChanges;
                this._parent.Phone1Changed += this.PropagateValueChanges;
                this._parent.LandProperties.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DimensionsInfoChanged += this.PropagateValueChanges;
                this._parent.ChangeItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpOrganisations.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CoordinateSystems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Assets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Routes.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Hazards.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MainAddressChanged += this.PropagateValueChanges;
                this._parent.ElectronicAddressChanged += this.PropagateValueChanges;
                this._parent.RedLines.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.Crews.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PositionChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.SecondaryAddressChanged -= this.PropagateValueChanges;
                this._parent.Measurements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Directions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PowerSystemResources.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Phone2Changed -= this.PropagateValueChanges;
                this._parent.Phone1Changed -= this.PropagateValueChanges;
                this._parent.LandProperties.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DimensionsInfoChanged -= this.PropagateValueChanges;
                this._parent.ChangeItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpOrganisations.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CoordinateSystems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Assets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Routes.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Hazards.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MainAddressChanged -= this.PropagateValueChanges;
                this._parent.ElectronicAddressChanged -= this.PropagateValueChanges;
                this._parent.RedLines.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.Crews.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PositionChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.SecondaryAddress == null))
                {
                    IStreetAddress secondaryAddressCasted = item.As<IStreetAddress>();
                    if ((secondaryAddressCasted != null))
                    {
                        this._parent.SecondaryAddress = secondaryAddressCasted;
                        return;
                    }
                }
                IMeasurement measurementsCasted = item.As<IMeasurement>();
                if ((measurementsCasted != null))
                {
                    this._parent.Measurements.Add(measurementsCasted);
                }
                IDirection directionsCasted = item.As<IDirection>();
                if ((directionsCasted != null))
                {
                    this._parent.Directions.Add(directionsCasted);
                }
                IPowerSystemResource powerSystemResourcesCasted = item.As<IPowerSystemResource>();
                if ((powerSystemResourcesCasted != null))
                {
                    this._parent.PowerSystemResources.Add(powerSystemResourcesCasted);
                }
                if ((this._parent.Phone2 == null))
                {
                    ITelephoneNumber phone2Casted = item.As<ITelephoneNumber>();
                    if ((phone2Casted != null))
                    {
                        this._parent.Phone2 = phone2Casted;
                        return;
                    }
                }
                if ((this._parent.Phone1 == null))
                {
                    ITelephoneNumber phone1Casted = item.As<ITelephoneNumber>();
                    if ((phone1Casted != null))
                    {
                        this._parent.Phone1 = phone1Casted;
                        return;
                    }
                }
                ILandProperty landPropertiesCasted = item.As<ILandProperty>();
                if ((landPropertiesCasted != null))
                {
                    this._parent.LandProperties.Add(landPropertiesCasted);
                }
                if ((this._parent.DimensionsInfo == null))
                {
                    IDimensionsInfo dimensionsInfoCasted = item.As<IDimensionsInfo>();
                    if ((dimensionsInfoCasted != null))
                    {
                        this._parent.DimensionsInfo = dimensionsInfoCasted;
                        return;
                    }
                }
                IChangeItem changeItemsCasted = item.As<IChangeItem>();
                if ((changeItemsCasted != null))
                {
                    this._parent.ChangeItems.Add(changeItemsCasted);
                }
                IErpOrganisation erpOrganisationsCasted = item.As<IErpOrganisation>();
                if ((erpOrganisationsCasted != null))
                {
                    this._parent.ErpOrganisations.Add(erpOrganisationsCasted);
                }
                ICoordinateSystem coordinateSystemsCasted = item.As<ICoordinateSystem>();
                if ((coordinateSystemsCasted != null))
                {
                    this._parent.CoordinateSystems.Add(coordinateSystemsCasted);
                }
                IAsset assetsCasted = item.As<IAsset>();
                if ((assetsCasted != null))
                {
                    this._parent.Assets.Add(assetsCasted);
                }
                IRoute routesCasted = item.As<IRoute>();
                if ((routesCasted != null))
                {
                    this._parent.Routes.Add(routesCasted);
                }
                IHazard hazardsCasted = item.As<IHazard>();
                if ((hazardsCasted != null))
                {
                    this._parent.Hazards.Add(hazardsCasted);
                }
                if ((this._parent.MainAddress == null))
                {
                    IStreetAddress mainAddressCasted = item.As<IStreetAddress>();
                    if ((mainAddressCasted != null))
                    {
                        this._parent.MainAddress = mainAddressCasted;
                        return;
                    }
                }
                if ((this._parent.ElectronicAddress == null))
                {
                    IElectronicAddress electronicAddressCasted = item.As<IElectronicAddress>();
                    if ((electronicAddressCasted != null))
                    {
                        this._parent.ElectronicAddress = electronicAddressCasted;
                        return;
                    }
                }
                IRedLine redLinesCasted = item.As<IRedLine>();
                if ((redLinesCasted != null))
                {
                    this._parent.RedLines.Add(redLinesCasted);
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                ICrew crewsCasted = item.As<ICrew>();
                if ((crewsCasted != null))
                {
                    this._parent.Crews.Add(crewsCasted);
                }
                if ((this._parent.Position == null))
                {
                    IPositionPoint positionCasted = item.As<IPositionPoint>();
                    if ((positionCasted != null))
                    {
                        this._parent.Position = positionCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.SecondaryAddress = null;
                this._parent.Measurements.Clear();
                this._parent.Directions.Clear();
                this._parent.PowerSystemResources.Clear();
                this._parent.Phone2 = null;
                this._parent.Phone1 = null;
                this._parent.LandProperties.Clear();
                this._parent.DimensionsInfo = null;
                this._parent.ChangeItems.Clear();
                this._parent.ErpOrganisations.Clear();
                this._parent.CoordinateSystems.Clear();
                this._parent.Assets.Clear();
                this._parent.Routes.Clear();
                this._parent.Hazards.Clear();
                this._parent.MainAddress = null;
                this._parent.ElectronicAddress = null;
                this._parent.RedLines.Clear();
                this._parent.Status = null;
                this._parent.Crews.Clear();
                this._parent.Position = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.SecondaryAddress))
                {
                    return true;
                }
                if (this._parent.Measurements.Contains(item))
                {
                    return true;
                }
                if (this._parent.Directions.Contains(item))
                {
                    return true;
                }
                if (this._parent.PowerSystemResources.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Phone2))
                {
                    return true;
                }
                if ((item == this._parent.Phone1))
                {
                    return true;
                }
                if (this._parent.LandProperties.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.DimensionsInfo))
                {
                    return true;
                }
                if (this._parent.ChangeItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.ErpOrganisations.Contains(item))
                {
                    return true;
                }
                if (this._parent.CoordinateSystems.Contains(item))
                {
                    return true;
                }
                if (this._parent.Assets.Contains(item))
                {
                    return true;
                }
                if (this._parent.Routes.Contains(item))
                {
                    return true;
                }
                if (this._parent.Hazards.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.MainAddress))
                {
                    return true;
                }
                if ((item == this._parent.ElectronicAddress))
                {
                    return true;
                }
                if (this._parent.RedLines.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if (this._parent.Crews.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Position))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.SecondaryAddress != null))
                {
                    array[arrayIndex] = this._parent.SecondaryAddress;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> measurementsEnumerator = this._parent.Measurements.GetEnumerator();
                try
                {
                    for (
                    ; measurementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = measurementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    measurementsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> directionsEnumerator = this._parent.Directions.GetEnumerator();
                try
                {
                    for (
                    ; directionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = directionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    directionsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> powerSystemResourcesEnumerator = this._parent.PowerSystemResources.GetEnumerator();
                try
                {
                    for (
                    ; powerSystemResourcesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = powerSystemResourcesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    powerSystemResourcesEnumerator.Dispose();
                }
                if ((this._parent.Phone2 != null))
                {
                    array[arrayIndex] = this._parent.Phone2;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Phone1 != null))
                {
                    array[arrayIndex] = this._parent.Phone1;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> landPropertiesEnumerator = this._parent.LandProperties.GetEnumerator();
                try
                {
                    for (
                    ; landPropertiesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = landPropertiesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    landPropertiesEnumerator.Dispose();
                }
                if ((this._parent.DimensionsInfo != null))
                {
                    array[arrayIndex] = this._parent.DimensionsInfo;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> changeItemsEnumerator = this._parent.ChangeItems.GetEnumerator();
                try
                {
                    for (
                    ; changeItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = changeItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    changeItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> erpOrganisationsEnumerator = this._parent.ErpOrganisations.GetEnumerator();
                try
                {
                    for (
                    ; erpOrganisationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpOrganisationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpOrganisationsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> coordinateSystemsEnumerator = this._parent.CoordinateSystems.GetEnumerator();
                try
                {
                    for (
                    ; coordinateSystemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = coordinateSystemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    coordinateSystemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> assetsEnumerator = this._parent.Assets.GetEnumerator();
                try
                {
                    for (
                    ; assetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = assetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    assetsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> routesEnumerator = this._parent.Routes.GetEnumerator();
                try
                {
                    for (
                    ; routesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = routesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    routesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> hazardsEnumerator = this._parent.Hazards.GetEnumerator();
                try
                {
                    for (
                    ; hazardsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = hazardsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    hazardsEnumerator.Dispose();
                }
                if ((this._parent.MainAddress != null))
                {
                    array[arrayIndex] = this._parent.MainAddress;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElectronicAddress != null))
                {
                    array[arrayIndex] = this._parent.ElectronicAddress;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> redLinesEnumerator = this._parent.RedLines.GetEnumerator();
                try
                {
                    for (
                    ; redLinesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = redLinesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    redLinesEnumerator.Dispose();
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> crewsEnumerator = this._parent.Crews.GetEnumerator();
                try
                {
                    for (
                    ; crewsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = crewsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    crewsEnumerator.Dispose();
                }
                if ((this._parent.Position != null))
                {
                    array[arrayIndex] = this._parent.Position;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.SecondaryAddress == item))
                {
                    this._parent.SecondaryAddress = null;
                    return true;
                }
                IMeasurement measurementItem = item.As<IMeasurement>();
                if (((measurementItem != null) 
                            && this._parent.Measurements.Remove(measurementItem)))
                {
                    return true;
                }
                IDirection directionItem = item.As<IDirection>();
                if (((directionItem != null) 
                            && this._parent.Directions.Remove(directionItem)))
                {
                    return true;
                }
                IPowerSystemResource powerSystemResourceItem = item.As<IPowerSystemResource>();
                if (((powerSystemResourceItem != null) 
                            && this._parent.PowerSystemResources.Remove(powerSystemResourceItem)))
                {
                    return true;
                }
                if ((this._parent.Phone2 == item))
                {
                    this._parent.Phone2 = null;
                    return true;
                }
                if ((this._parent.Phone1 == item))
                {
                    this._parent.Phone1 = null;
                    return true;
                }
                ILandProperty landPropertyItem = item.As<ILandProperty>();
                if (((landPropertyItem != null) 
                            && this._parent.LandProperties.Remove(landPropertyItem)))
                {
                    return true;
                }
                if ((this._parent.DimensionsInfo == item))
                {
                    this._parent.DimensionsInfo = null;
                    return true;
                }
                IChangeItem changeItemItem = item.As<IChangeItem>();
                if (((changeItemItem != null) 
                            && this._parent.ChangeItems.Remove(changeItemItem)))
                {
                    return true;
                }
                IErpOrganisation erpOrganisationItem = item.As<IErpOrganisation>();
                if (((erpOrganisationItem != null) 
                            && this._parent.ErpOrganisations.Remove(erpOrganisationItem)))
                {
                    return true;
                }
                ICoordinateSystem coordinateSystemItem = item.As<ICoordinateSystem>();
                if (((coordinateSystemItem != null) 
                            && this._parent.CoordinateSystems.Remove(coordinateSystemItem)))
                {
                    return true;
                }
                IAsset assetItem = item.As<IAsset>();
                if (((assetItem != null) 
                            && this._parent.Assets.Remove(assetItem)))
                {
                    return true;
                }
                IRoute routeItem = item.As<IRoute>();
                if (((routeItem != null) 
                            && this._parent.Routes.Remove(routeItem)))
                {
                    return true;
                }
                IHazard hazardItem = item.As<IHazard>();
                if (((hazardItem != null) 
                            && this._parent.Hazards.Remove(hazardItem)))
                {
                    return true;
                }
                if ((this._parent.MainAddress == item))
                {
                    this._parent.MainAddress = null;
                    return true;
                }
                if ((this._parent.ElectronicAddress == item))
                {
                    this._parent.ElectronicAddress = null;
                    return true;
                }
                IRedLine redLineItem = item.As<IRedLine>();
                if (((redLineItem != null) 
                            && this._parent.RedLines.Remove(redLineItem)))
                {
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                ICrew crewItem = item.As<ICrew>();
                if (((crewItem != null) 
                            && this._parent.Crews.Remove(crewItem)))
                {
                    return true;
                }
                if ((this._parent.Position == item))
                {
                    this._parent.Position = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.SecondaryAddress).Concat(this._parent.Measurements).Concat(this._parent.Directions).Concat(this._parent.PowerSystemResources).Concat(this._parent.Phone2).Concat(this._parent.Phone1).Concat(this._parent.LandProperties).Concat(this._parent.DimensionsInfo).Concat(this._parent.ChangeItems).Concat(this._parent.ErpOrganisations).Concat(this._parent.CoordinateSystems).Concat(this._parent.Assets).Concat(this._parent.Routes).Concat(this._parent.Hazards).Concat(this._parent.MainAddress).Concat(this._parent.ElectronicAddress).Concat(this._parent.RedLines).Concat(this._parent.Status).Concat(this._parent.Crews).Concat(this._parent.Position).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the geoInfoReference property
        /// </summary>
        private sealed class GeoInfoReferenceProxy : ModelPropertyChange<ILocation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GeoInfoReferenceProxy(ILocation modelElement) : 
                    base(modelElement, "geoInfoReference")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.GeoInfoReference;
                }
                set
                {
                    this.ModelElement.GeoInfoReference = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the category property
        /// </summary>
        private sealed class CategoryProxy : ModelPropertyChange<ILocation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CategoryProxy(ILocation modelElement) : 
                    base(modelElement, "category")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Category;
                }
                set
                {
                    this.ModelElement.Category = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the corporateCode property
        /// </summary>
        private sealed class CorporateCodeProxy : ModelPropertyChange<ILocation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CorporateCodeProxy(ILocation modelElement) : 
                    base(modelElement, "corporateCode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.CorporateCode;
                }
                set
                {
                    this.ModelElement.CorporateCode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the direction property
        /// </summary>
        private sealed class DirectionProxy : ModelPropertyChange<ILocation, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DirectionProxy(ILocation modelElement) : 
                    base(modelElement, "direction")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Direction;
                }
                set
                {
                    this.ModelElement.Direction = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the secondaryAddress property
        /// </summary>
        private sealed class SecondaryAddressProxy : ModelPropertyChange<ILocation, IStreetAddress>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SecondaryAddressProxy(ILocation modelElement) : 
                    base(modelElement, "secondaryAddress")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStreetAddress Value
            {
                get
                {
                    return this.ModelElement.SecondaryAddress;
                }
                set
                {
                    this.ModelElement.SecondaryAddress = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phone2 property
        /// </summary>
        private sealed class Phone2Proxy : ModelPropertyChange<ILocation, ITelephoneNumber>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Phone2Proxy(ILocation modelElement) : 
                    base(modelElement, "phone2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITelephoneNumber Value
            {
                get
                {
                    return this.ModelElement.Phone2;
                }
                set
                {
                    this.ModelElement.Phone2 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phone1 property
        /// </summary>
        private sealed class Phone1Proxy : ModelPropertyChange<ILocation, ITelephoneNumber>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Phone1Proxy(ILocation modelElement) : 
                    base(modelElement, "phone1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITelephoneNumber Value
            {
                get
                {
                    return this.ModelElement.Phone1;
                }
                set
                {
                    this.ModelElement.Phone1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the DimensionsInfo property
        /// </summary>
        private sealed class DimensionsInfoProxy : ModelPropertyChange<ILocation, IDimensionsInfo>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DimensionsInfoProxy(ILocation modelElement) : 
                    base(modelElement, "DimensionsInfo")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDimensionsInfo Value
            {
                get
                {
                    return this.ModelElement.DimensionsInfo;
                }
                set
                {
                    this.ModelElement.DimensionsInfo = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the mainAddress property
        /// </summary>
        private sealed class MainAddressProxy : ModelPropertyChange<ILocation, IStreetAddress>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MainAddressProxy(ILocation modelElement) : 
                    base(modelElement, "mainAddress")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStreetAddress Value
            {
                get
                {
                    return this.ModelElement.MainAddress;
                }
                set
                {
                    this.ModelElement.MainAddress = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the electronicAddress property
        /// </summary>
        private sealed class ElectronicAddressProxy : ModelPropertyChange<ILocation, IElectronicAddress>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ElectronicAddressProxy(ILocation modelElement) : 
                    base(modelElement, "electronicAddress")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectronicAddress Value
            {
                get
                {
                    return this.ModelElement.ElectronicAddress;
                }
                set
                {
                    this.ModelElement.ElectronicAddress = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<ILocation, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(ILocation modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Position property
        /// </summary>
        private sealed class PositionProxy : ModelPropertyChange<ILocation, IPositionPoint>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PositionProxy(ILocation modelElement) : 
                    base(modelElement, "Position")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPositionPoint Value
            {
                get
                {
                    return this.ModelElement.Position;
                }
                set
                {
                    this.ModelElement.Position = value;
                }
            }
        }
    }
}

