//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61968.Common
{
    
    
    /// <summary>
    /// The default implementation of the Organisation class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Common")]
    [XmlNamespacePrefixAttribute("cimCommon")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/Organisation")]
    [DebuggerDisplayAttribute("Organisation {UUID}")]
    public partial class Organisation : IdentifiedObject, IOrganisation, IModelElement
    {
        
        private static Lazy<ITypedElement> _streetAddressReference = new Lazy<ITypedElement>(RetrieveStreetAddressReference);
        
        /// <summary>
        /// The backing field for the StreetAddress property
        /// </summary>
        private IStreetAddress _streetAddress;
        
        private static Lazy<ITypedElement> _electronicAddressReference = new Lazy<ITypedElement>(RetrieveElectronicAddressReference);
        
        /// <summary>
        /// The backing field for the ElectronicAddress property
        /// </summary>
        private IElectronicAddress _electronicAddress;
        
        private static Lazy<ITypedElement> _postalAddressReference = new Lazy<ITypedElement>(RetrievePostalAddressReference);
        
        /// <summary>
        /// The backing field for the PostalAddress property
        /// </summary>
        private IPostalAddress _postalAddress;
        
        private static Lazy<ITypedElement> _phone1Reference = new Lazy<ITypedElement>(RetrievePhone1Reference);
        
        /// <summary>
        /// The backing field for the Phone1 property
        /// </summary>
        private ITelephoneNumber _phone1;
        
        private static Lazy<ITypedElement> _phone2Reference = new Lazy<ITypedElement>(RetrievePhone2Reference);
        
        /// <summary>
        /// The backing field for the Phone2 property
        /// </summary>
        private ITelephoneNumber _phone2;
        
        private static Lazy<ITypedElement> _marketRolesReference = new Lazy<ITypedElement>(RetrieveMarketRolesReference);
        
        /// <summary>
        /// The backing field for the MarketRoles property
        /// </summary>
        private OrganisationMarketRolesCollection _marketRoles;
        
        private static Lazy<ITypedElement> _businessRolesReference = new Lazy<ITypedElement>(RetrieveBusinessRolesReference);
        
        /// <summary>
        /// The backing field for the BusinessRoles property
        /// </summary>
        private OrganisationBusinessRolesCollection _businessRoles;
        
        private static IClass _classInstance;
        
        public Organisation()
        {
            this._marketRoles = new OrganisationMarketRolesCollection(this);
            this._marketRoles.CollectionChanging += this.MarketRolesCollectionChanging;
            this._marketRoles.CollectionChanged += this.MarketRolesCollectionChanged;
            this._businessRoles = new OrganisationBusinessRolesCollection(this);
            this._businessRoles.CollectionChanging += this.BusinessRolesCollectionChanging;
            this._businessRoles.CollectionChanged += this.BusinessRolesCollectionChanged;
        }
        
        /// <summary>
        /// The streetAddress property
        /// </summary>
        [XmlElementNameAttribute("streetAddress")]
        [XmlAttributeAttribute(true)]
        public virtual IStreetAddress StreetAddress
        {
            get
            {
                return this._streetAddress;
            }
            set
            {
                if ((this._streetAddress != value))
                {
                    IStreetAddress old = this._streetAddress;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStreetAddressChanging(e);
                    this.OnPropertyChanging("StreetAddress", e, _streetAddressReference);
                    this._streetAddress = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStreetAddress;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStreetAddress;
                    }
                    this.OnStreetAddressChanged(e);
                    this.OnPropertyChanged("StreetAddress", e, _streetAddressReference);
                }
            }
        }
        
        /// <summary>
        /// The electronicAddress property
        /// </summary>
        [XmlElementNameAttribute("electronicAddress")]
        [XmlAttributeAttribute(true)]
        public virtual IElectronicAddress ElectronicAddress
        {
            get
            {
                return this._electronicAddress;
            }
            set
            {
                if ((this._electronicAddress != value))
                {
                    IElectronicAddress old = this._electronicAddress;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnElectronicAddressChanging(e);
                    this.OnPropertyChanging("ElectronicAddress", e, _electronicAddressReference);
                    this._electronicAddress = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetElectronicAddress;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetElectronicAddress;
                    }
                    this.OnElectronicAddressChanged(e);
                    this.OnPropertyChanged("ElectronicAddress", e, _electronicAddressReference);
                }
            }
        }
        
        /// <summary>
        /// The postalAddress property
        /// </summary>
        [XmlElementNameAttribute("postalAddress")]
        [XmlAttributeAttribute(true)]
        public virtual IPostalAddress PostalAddress
        {
            get
            {
                return this._postalAddress;
            }
            set
            {
                if ((this._postalAddress != value))
                {
                    IPostalAddress old = this._postalAddress;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPostalAddressChanging(e);
                    this.OnPropertyChanging("PostalAddress", e, _postalAddressReference);
                    this._postalAddress = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPostalAddress;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPostalAddress;
                    }
                    this.OnPostalAddressChanged(e);
                    this.OnPropertyChanged("PostalAddress", e, _postalAddressReference);
                }
            }
        }
        
        /// <summary>
        /// The phone1 property
        /// </summary>
        [XmlElementNameAttribute("phone1")]
        [XmlAttributeAttribute(true)]
        public virtual ITelephoneNumber Phone1
        {
            get
            {
                return this._phone1;
            }
            set
            {
                if ((this._phone1 != value))
                {
                    ITelephoneNumber old = this._phone1;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhone1Changing(e);
                    this.OnPropertyChanging("Phone1", e, _phone1Reference);
                    this._phone1 = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPhone1;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPhone1;
                    }
                    this.OnPhone1Changed(e);
                    this.OnPropertyChanged("Phone1", e, _phone1Reference);
                }
            }
        }
        
        /// <summary>
        /// The phone2 property
        /// </summary>
        [XmlElementNameAttribute("phone2")]
        [XmlAttributeAttribute(true)]
        public virtual ITelephoneNumber Phone2
        {
            get
            {
                return this._phone2;
            }
            set
            {
                if ((this._phone2 != value))
                {
                    ITelephoneNumber old = this._phone2;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhone2Changing(e);
                    this.OnPropertyChanging("Phone2", e, _phone2Reference);
                    this._phone2 = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPhone2;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPhone2;
                    }
                    this.OnPhone2Changed(e);
                    this.OnPropertyChanged("Phone2", e, _phone2Reference);
                }
            }
        }
        
        /// <summary>
        /// The MarketRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Organisations")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMarketRole> MarketRoles
        {
            get
            {
                return this._marketRoles;
            }
        }
        
        /// <summary>
        /// The BusinessRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Organisations")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IBusinessRole> BusinessRoles
        {
            get
            {
                return this._businessRoles;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new OrganisationReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/Organisation")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the StreetAddress property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StreetAddressChanging;
        
        /// <summary>
        /// Gets fired when the StreetAddress property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StreetAddressChanged;
        
        /// <summary>
        /// Gets fired before the ElectronicAddress property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ElectronicAddressChanging;
        
        /// <summary>
        /// Gets fired when the ElectronicAddress property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ElectronicAddressChanged;
        
        /// <summary>
        /// Gets fired before the PostalAddress property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PostalAddressChanging;
        
        /// <summary>
        /// Gets fired when the PostalAddress property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PostalAddressChanged;
        
        /// <summary>
        /// Gets fired before the Phone1 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Phone1Changing;
        
        /// <summary>
        /// Gets fired when the Phone1 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Phone1Changed;
        
        /// <summary>
        /// Gets fired before the Phone2 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Phone2Changing;
        
        /// <summary>
        /// Gets fired when the Phone2 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Phone2Changed;
        
        private static ITypedElement RetrieveStreetAddressReference()
        {
            return ((ITypedElement)(((ModelElement)(Organisation.ClassInstance)).Resolve("streetAddress")));
        }
        
        /// <summary>
        /// Raises the StreetAddressChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStreetAddressChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StreetAddressChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StreetAddressChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStreetAddressChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StreetAddressChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the StreetAddress property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStreetAddress(object sender, System.EventArgs eventArgs)
        {
            this.StreetAddress = null;
        }
        
        private static ITypedElement RetrieveElectronicAddressReference()
        {
            return ((ITypedElement)(((ModelElement)(Organisation.ClassInstance)).Resolve("electronicAddress")));
        }
        
        /// <summary>
        /// Raises the ElectronicAddressChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectronicAddressChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ElectronicAddressChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ElectronicAddressChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectronicAddressChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ElectronicAddressChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ElectronicAddress property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetElectronicAddress(object sender, System.EventArgs eventArgs)
        {
            this.ElectronicAddress = null;
        }
        
        private static ITypedElement RetrievePostalAddressReference()
        {
            return ((ITypedElement)(((ModelElement)(Organisation.ClassInstance)).Resolve("postalAddress")));
        }
        
        /// <summary>
        /// Raises the PostalAddressChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPostalAddressChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PostalAddressChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PostalAddressChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPostalAddressChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PostalAddressChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PostalAddress property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPostalAddress(object sender, System.EventArgs eventArgs)
        {
            this.PostalAddress = null;
        }
        
        private static ITypedElement RetrievePhone1Reference()
        {
            return ((ITypedElement)(((ModelElement)(Organisation.ClassInstance)).Resolve("phone1")));
        }
        
        /// <summary>
        /// Raises the Phone1Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhone1Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Phone1Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Phone1Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhone1Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Phone1Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Phone1 property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhone1(object sender, System.EventArgs eventArgs)
        {
            this.Phone1 = null;
        }
        
        private static ITypedElement RetrievePhone2Reference()
        {
            return ((ITypedElement)(((ModelElement)(Organisation.ClassInstance)).Resolve("phone2")));
        }
        
        /// <summary>
        /// Raises the Phone2Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhone2Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Phone2Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Phone2Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhone2Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Phone2Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Phone2 property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhone2(object sender, System.EventArgs eventArgs)
        {
            this.Phone2 = null;
        }
        
        private static ITypedElement RetrieveMarketRolesReference()
        {
            return ((ITypedElement)(((ModelElement)(Organisation.ClassInstance)).Resolve("MarketRoles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MarketRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MarketRolesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("MarketRoles", e, _marketRolesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MarketRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MarketRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MarketRoles", e, _marketRolesReference);
        }
        
        private static ITypedElement RetrieveBusinessRolesReference()
        {
            return ((ITypedElement)(((ModelElement)(Organisation.ClassInstance)).Resolve("BusinessRoles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the BusinessRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BusinessRolesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("BusinessRoles", e, _businessRolesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the BusinessRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BusinessRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("BusinessRoles", e, _businessRolesReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "MARKETROLES"))
            {
                return this._marketRoles;
            }
            if ((feature == "BUSINESSROLES"))
            {
                return this._businessRoles;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "STREETADDRESS"))
            {
                this.StreetAddress = ((IStreetAddress)(value));
                return;
            }
            if ((feature == "ELECTRONICADDRESS"))
            {
                this.ElectronicAddress = ((IElectronicAddress)(value));
                return;
            }
            if ((feature == "POSTALADDRESS"))
            {
                this.PostalAddress = ((IPostalAddress)(value));
                return;
            }
            if ((feature == "PHONE1"))
            {
                this.Phone1 = ((ITelephoneNumber)(value));
                return;
            }
            if ((feature == "PHONE2"))
            {
                this.Phone2 = ((ITelephoneNumber)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "StreetAddress"))
            {
                return new StreetAddressProxy(this);
            }
            if ((attribute == "ElectronicAddress"))
            {
                return new ElectronicAddressProxy(this);
            }
            if ((attribute == "PostalAddress"))
            {
                return new PostalAddressProxy(this);
            }
            if ((attribute == "Phone1"))
            {
                return new Phone1Proxy(this);
            }
            if ((attribute == "Phone2"))
            {
                return new Phone2Proxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "StreetAddress"))
            {
                return new StreetAddressProxy(this);
            }
            if ((reference == "ElectronicAddress"))
            {
                return new ElectronicAddressProxy(this);
            }
            if ((reference == "PostalAddress"))
            {
                return new PostalAddressProxy(this);
            }
            if ((reference == "Phone1"))
            {
                return new Phone1Proxy(this);
            }
            if ((reference == "Phone2"))
            {
                return new Phone2Proxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/Organisation")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Organisation class
        /// </summary>
        public class OrganisationReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Organisation _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public OrganisationReferencedElementsCollection(Organisation parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.StreetAddress != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElectronicAddress != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.PostalAddress != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Phone1 != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Phone2 != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.MarketRoles.Count);
                    count = (count + this._parent.BusinessRoles.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.StreetAddressChanged += this.PropagateValueChanges;
                this._parent.ElectronicAddressChanged += this.PropagateValueChanges;
                this._parent.PostalAddressChanged += this.PropagateValueChanges;
                this._parent.Phone1Changed += this.PropagateValueChanges;
                this._parent.Phone2Changed += this.PropagateValueChanges;
                this._parent.MarketRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BusinessRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.StreetAddressChanged -= this.PropagateValueChanges;
                this._parent.ElectronicAddressChanged -= this.PropagateValueChanges;
                this._parent.PostalAddressChanged -= this.PropagateValueChanges;
                this._parent.Phone1Changed -= this.PropagateValueChanges;
                this._parent.Phone2Changed -= this.PropagateValueChanges;
                this._parent.MarketRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BusinessRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.StreetAddress == null))
                {
                    IStreetAddress streetAddressCasted = item.As<IStreetAddress>();
                    if ((streetAddressCasted != null))
                    {
                        this._parent.StreetAddress = streetAddressCasted;
                        return;
                    }
                }
                if ((this._parent.ElectronicAddress == null))
                {
                    IElectronicAddress electronicAddressCasted = item.As<IElectronicAddress>();
                    if ((electronicAddressCasted != null))
                    {
                        this._parent.ElectronicAddress = electronicAddressCasted;
                        return;
                    }
                }
                if ((this._parent.PostalAddress == null))
                {
                    IPostalAddress postalAddressCasted = item.As<IPostalAddress>();
                    if ((postalAddressCasted != null))
                    {
                        this._parent.PostalAddress = postalAddressCasted;
                        return;
                    }
                }
                if ((this._parent.Phone1 == null))
                {
                    ITelephoneNumber phone1Casted = item.As<ITelephoneNumber>();
                    if ((phone1Casted != null))
                    {
                        this._parent.Phone1 = phone1Casted;
                        return;
                    }
                }
                if ((this._parent.Phone2 == null))
                {
                    ITelephoneNumber phone2Casted = item.As<ITelephoneNumber>();
                    if ((phone2Casted != null))
                    {
                        this._parent.Phone2 = phone2Casted;
                        return;
                    }
                }
                IMarketRole marketRolesCasted = item.As<IMarketRole>();
                if ((marketRolesCasted != null))
                {
                    this._parent.MarketRoles.Add(marketRolesCasted);
                }
                IBusinessRole businessRolesCasted = item.As<IBusinessRole>();
                if ((businessRolesCasted != null))
                {
                    this._parent.BusinessRoles.Add(businessRolesCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.StreetAddress = null;
                this._parent.ElectronicAddress = null;
                this._parent.PostalAddress = null;
                this._parent.Phone1 = null;
                this._parent.Phone2 = null;
                this._parent.MarketRoles.Clear();
                this._parent.BusinessRoles.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.StreetAddress))
                {
                    return true;
                }
                if ((item == this._parent.ElectronicAddress))
                {
                    return true;
                }
                if ((item == this._parent.PostalAddress))
                {
                    return true;
                }
                if ((item == this._parent.Phone1))
                {
                    return true;
                }
                if ((item == this._parent.Phone2))
                {
                    return true;
                }
                if (this._parent.MarketRoles.Contains(item))
                {
                    return true;
                }
                if (this._parent.BusinessRoles.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.StreetAddress != null))
                {
                    array[arrayIndex] = this._parent.StreetAddress;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElectronicAddress != null))
                {
                    array[arrayIndex] = this._parent.ElectronicAddress;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.PostalAddress != null))
                {
                    array[arrayIndex] = this._parent.PostalAddress;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Phone1 != null))
                {
                    array[arrayIndex] = this._parent.Phone1;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Phone2 != null))
                {
                    array[arrayIndex] = this._parent.Phone2;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> marketRolesEnumerator = this._parent.MarketRoles.GetEnumerator();
                try
                {
                    for (
                    ; marketRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = marketRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    marketRolesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> businessRolesEnumerator = this._parent.BusinessRoles.GetEnumerator();
                try
                {
                    for (
                    ; businessRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = businessRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    businessRolesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.StreetAddress == item))
                {
                    this._parent.StreetAddress = null;
                    return true;
                }
                if ((this._parent.ElectronicAddress == item))
                {
                    this._parent.ElectronicAddress = null;
                    return true;
                }
                if ((this._parent.PostalAddress == item))
                {
                    this._parent.PostalAddress = null;
                    return true;
                }
                if ((this._parent.Phone1 == item))
                {
                    this._parent.Phone1 = null;
                    return true;
                }
                if ((this._parent.Phone2 == item))
                {
                    this._parent.Phone2 = null;
                    return true;
                }
                IMarketRole marketRoleItem = item.As<IMarketRole>();
                if (((marketRoleItem != null) 
                            && this._parent.MarketRoles.Remove(marketRoleItem)))
                {
                    return true;
                }
                IBusinessRole businessRoleItem = item.As<IBusinessRole>();
                if (((businessRoleItem != null) 
                            && this._parent.BusinessRoles.Remove(businessRoleItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.StreetAddress).Concat(this._parent.ElectronicAddress).Concat(this._parent.PostalAddress).Concat(this._parent.Phone1).Concat(this._parent.Phone2).Concat(this._parent.MarketRoles).Concat(this._parent.BusinessRoles).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the streetAddress property
        /// </summary>
        private sealed class StreetAddressProxy : ModelPropertyChange<IOrganisation, IStreetAddress>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StreetAddressProxy(IOrganisation modelElement) : 
                    base(modelElement, "streetAddress")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStreetAddress Value
            {
                get
                {
                    return this.ModelElement.StreetAddress;
                }
                set
                {
                    this.ModelElement.StreetAddress = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the electronicAddress property
        /// </summary>
        private sealed class ElectronicAddressProxy : ModelPropertyChange<IOrganisation, IElectronicAddress>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ElectronicAddressProxy(IOrganisation modelElement) : 
                    base(modelElement, "electronicAddress")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectronicAddress Value
            {
                get
                {
                    return this.ModelElement.ElectronicAddress;
                }
                set
                {
                    this.ModelElement.ElectronicAddress = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the postalAddress property
        /// </summary>
        private sealed class PostalAddressProxy : ModelPropertyChange<IOrganisation, IPostalAddress>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PostalAddressProxy(IOrganisation modelElement) : 
                    base(modelElement, "postalAddress")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPostalAddress Value
            {
                get
                {
                    return this.ModelElement.PostalAddress;
                }
                set
                {
                    this.ModelElement.PostalAddress = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phone1 property
        /// </summary>
        private sealed class Phone1Proxy : ModelPropertyChange<IOrganisation, ITelephoneNumber>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Phone1Proxy(IOrganisation modelElement) : 
                    base(modelElement, "phone1")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITelephoneNumber Value
            {
                get
                {
                    return this.ModelElement.Phone1;
                }
                set
                {
                    this.ModelElement.Phone1 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phone2 property
        /// </summary>
        private sealed class Phone2Proxy : ModelPropertyChange<IOrganisation, ITelephoneNumber>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Phone2Proxy(IOrganisation modelElement) : 
                    base(modelElement, "phone2")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITelephoneNumber Value
            {
                get
                {
                    return this.ModelElement.Phone2;
                }
                set
                {
                    this.ModelElement.Phone2 = value;
                }
            }
        }
    }
}

