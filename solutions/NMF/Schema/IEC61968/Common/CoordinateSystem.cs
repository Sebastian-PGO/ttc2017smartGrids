using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61968.Common
{
    
    
    /// <summary>
    /// The default implementation of the CoordinateSystem class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Common")]
    [XmlNamespacePrefixAttribute("cimCommon")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/CoordinateSystem")]
    [DebuggerDisplayAttribute("CoordinateSystem {UUID}")]
    public partial class CoordinateSystem : Element, ICoordinateSystem, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private string _name;
        
        private static Lazy<ITypedElement> _nameAttribute = new Lazy<ITypedElement>(RetrieveNameAttribute);
        
        private static Lazy<ITypedElement> _gmlDiagramObjectsReference = new Lazy<ITypedElement>(RetrieveGmlDiagramObjectsReference);
        
        /// <summary>
        /// The backing field for the GmlDiagramObjects property
        /// </summary>
        private CoordinateSystemGmlDiagramObjectsCollection _gmlDiagramObjects;
        
        private static Lazy<ITypedElement> _diagramsReference = new Lazy<ITypedElement>(RetrieveDiagramsReference);
        
        /// <summary>
        /// The backing field for the Diagrams property
        /// </summary>
        private CoordinateSystemDiagramsCollection _diagrams;
        
        private static Lazy<ITypedElement> _locationReference = new Lazy<ITypedElement>(RetrieveLocationReference);
        
        /// <summary>
        /// The backing field for the Location property
        /// </summary>
        private ILocation _location;
        
        private static Lazy<ITypedElement> _positionPointsReference = new Lazy<ITypedElement>(RetrievePositionPointsReference);
        
        /// <summary>
        /// The backing field for the PositionPoints property
        /// </summary>
        private CoordinateSystemPositionPointsCollection _positionPoints;
        
        private static IClass _classInstance;
        
        public CoordinateSystem()
        {
            this._gmlDiagramObjects = new CoordinateSystemGmlDiagramObjectsCollection(this);
            this._gmlDiagramObjects.CollectionChanging += this.GmlDiagramObjectsCollectionChanging;
            this._gmlDiagramObjects.CollectionChanged += this.GmlDiagramObjectsCollectionChanged;
            this._diagrams = new CoordinateSystemDiagramsCollection(this);
            this._diagrams.CollectionChanging += this.DiagramsCollectionChanging;
            this._diagrams.CollectionChanged += this.DiagramsCollectionChanged;
            this._positionPoints = new CoordinateSystemPositionPointsCollection(this);
            this._positionPoints.CollectionChanging += this.PositionPointsCollectionChanging;
            this._positionPoints.CollectionChanged += this.PositionPointsCollectionChanged;
        }
        
        /// <summary>
        /// The name property
        /// </summary>
        [XmlElementNameAttribute("name")]
        [XmlAttributeAttribute(true)]
        public virtual string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e, _nameAttribute);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e, _nameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The GmlDiagramObjects property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CoordinateSystems")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IGmlDiagramObject> GmlDiagramObjects
        {
            get
            {
                return this._gmlDiagramObjects;
            }
        }
        
        /// <summary>
        /// The Diagrams property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CoordinateSystem")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDiagram> Diagrams
        {
            get
            {
                return this._diagrams;
            }
        }
        
        /// <summary>
        /// The Location property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CoordinateSystems")]
        public virtual ILocation Location
        {
            get
            {
                return this._location;
            }
            set
            {
                if ((this._location != value))
                {
                    ILocation old = this._location;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocationChanging(e);
                    this.OnPropertyChanging("Location", e, _locationReference);
                    this._location = value;
                    if ((old != null))
                    {
                        old.CoordinateSystems.Remove(this);
                        old.Deleted -= this.OnResetLocation;
                    }
                    if ((value != null))
                    {
                        value.CoordinateSystems.Add(this);
                        value.Deleted += this.OnResetLocation;
                    }
                    this.OnLocationChanged(e);
                    this.OnPropertyChanged("Location", e, _locationReference);
                }
            }
        }
        
        /// <summary>
        /// The PositionPoints property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("CoordinateSystem")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IPositionPoint> PositionPoints
        {
            get
            {
                return this._positionPoints;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new CoordinateSystemReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/CoordinateSystem")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Location property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocationChanging;
        
        /// <summary>
        /// Gets fired when the Location property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocationChanged;
        
        private static ITypedElement RetrieveNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(CoordinateSystem.ClassInstance)).Resolve("name")));
        }
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGmlDiagramObjectsReference()
        {
            return ((ITypedElement)(((ModelElement)(CoordinateSystem.ClassInstance)).Resolve("GmlDiagramObjects")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the GmlDiagramObjects property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlDiagramObjectsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("GmlDiagramObjects", e, _gmlDiagramObjectsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the GmlDiagramObjects property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void GmlDiagramObjectsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("GmlDiagramObjects", e, _gmlDiagramObjectsReference);
        }
        
        private static ITypedElement RetrieveDiagramsReference()
        {
            return ((ITypedElement)(((ModelElement)(CoordinateSystem.ClassInstance)).Resolve("Diagrams")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Diagrams property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DiagramsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Diagrams", e, _diagramsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Diagrams property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DiagramsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Diagrams", e, _diagramsReference);
        }
        
        private static ITypedElement RetrieveLocationReference()
        {
            return ((ITypedElement)(((ModelElement)(CoordinateSystem.ClassInstance)).Resolve("Location")));
        }
        
        /// <summary>
        /// Raises the LocationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Location property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLocation(object sender, System.EventArgs eventArgs)
        {
            this.Location = null;
        }
        
        private static ITypedElement RetrievePositionPointsReference()
        {
            return ((ITypedElement)(((ModelElement)(CoordinateSystem.ClassInstance)).Resolve("PositionPoints")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PositionPoints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PositionPointsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("PositionPoints", e, _positionPointsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PositionPoints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PositionPointsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PositionPoints", e, _positionPointsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "GMLDIAGRAMOBJECTS"))
            {
                return this._gmlDiagramObjects;
            }
            if ((feature == "DIAGRAMS"))
            {
                return this._diagrams;
            }
            if ((feature == "POSITIONPOINTS"))
            {
                return this._positionPoints;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "LOCATION"))
            {
                this.Location = ((ILocation)(value));
                return;
            }
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Location"))
            {
                return new LocationProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Location"))
            {
                return new LocationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/CoordinateSystem")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the CoordinateSystem class
        /// </summary>
        public class CoordinateSystemReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private CoordinateSystem _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public CoordinateSystemReferencedElementsCollection(CoordinateSystem parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.GmlDiagramObjects.Count);
                    count = (count + this._parent.Diagrams.Count);
                    if ((this._parent.Location != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.PositionPoints.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.GmlDiagramObjects.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Diagrams.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.LocationChanged += this.PropagateValueChanges;
                this._parent.PositionPoints.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.GmlDiagramObjects.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Diagrams.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.LocationChanged -= this.PropagateValueChanges;
                this._parent.PositionPoints.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IGmlDiagramObject gmlDiagramObjectsCasted = item.As<IGmlDiagramObject>();
                if ((gmlDiagramObjectsCasted != null))
                {
                    this._parent.GmlDiagramObjects.Add(gmlDiagramObjectsCasted);
                }
                IDiagram diagramsCasted = item.As<IDiagram>();
                if ((diagramsCasted != null))
                {
                    this._parent.Diagrams.Add(diagramsCasted);
                }
                if ((this._parent.Location == null))
                {
                    ILocation locationCasted = item.As<ILocation>();
                    if ((locationCasted != null))
                    {
                        this._parent.Location = locationCasted;
                        return;
                    }
                }
                IPositionPoint positionPointsCasted = item.As<IPositionPoint>();
                if ((positionPointsCasted != null))
                {
                    this._parent.PositionPoints.Add(positionPointsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.GmlDiagramObjects.Clear();
                this._parent.Diagrams.Clear();
                this._parent.Location = null;
                this._parent.PositionPoints.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.GmlDiagramObjects.Contains(item))
                {
                    return true;
                }
                if (this._parent.Diagrams.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Location))
                {
                    return true;
                }
                if (this._parent.PositionPoints.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> gmlDiagramObjectsEnumerator = this._parent.GmlDiagramObjects.GetEnumerator();
                try
                {
                    for (
                    ; gmlDiagramObjectsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = gmlDiagramObjectsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    gmlDiagramObjectsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> diagramsEnumerator = this._parent.Diagrams.GetEnumerator();
                try
                {
                    for (
                    ; diagramsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = diagramsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    diagramsEnumerator.Dispose();
                }
                if ((this._parent.Location != null))
                {
                    array[arrayIndex] = this._parent.Location;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> positionPointsEnumerator = this._parent.PositionPoints.GetEnumerator();
                try
                {
                    for (
                    ; positionPointsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = positionPointsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    positionPointsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IGmlDiagramObject gmlDiagramObjectItem = item.As<IGmlDiagramObject>();
                if (((gmlDiagramObjectItem != null) 
                            && this._parent.GmlDiagramObjects.Remove(gmlDiagramObjectItem)))
                {
                    return true;
                }
                IDiagram diagramItem = item.As<IDiagram>();
                if (((diagramItem != null) 
                            && this._parent.Diagrams.Remove(diagramItem)))
                {
                    return true;
                }
                if ((this._parent.Location == item))
                {
                    this._parent.Location = null;
                    return true;
                }
                IPositionPoint positionPointItem = item.As<IPositionPoint>();
                if (((positionPointItem != null) 
                            && this._parent.PositionPoints.Remove(positionPointItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.GmlDiagramObjects).Concat(this._parent.Diagrams).Concat(this._parent.Location).Concat(this._parent.PositionPoints).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<ICoordinateSystem, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(ICoordinateSystem modelElement) : 
                    base(modelElement, "name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Location property
        /// </summary>
        private sealed class LocationProxy : ModelPropertyChange<ICoordinateSystem, ILocation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocationProxy(ICoordinateSystem modelElement) : 
                    base(modelElement, "Location")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ILocation Value
            {
                get
                {
                    return this.ModelElement.Location;
                }
                set
                {
                    this.ModelElement.Location = value;
                }
            }
        }
    }
}

