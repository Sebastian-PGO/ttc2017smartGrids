using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61968.Common
{
    
    
    /// <summary>
    /// The default implementation of the StreetDetail class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Common")]
    [XmlNamespacePrefixAttribute("cimCommon")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/StreetDetail")]
    [DebuggerDisplayAttribute("StreetDetail {UUID}")]
    public partial class StreetDetail : Element, IStreetDetail, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private string _name;
        
        private static Lazy<ITypedElement> _nameAttribute = new Lazy<ITypedElement>(RetrieveNameAttribute);
        
        /// <summary>
        /// The backing field for the Prefix property
        /// </summary>
        private string _prefix;
        
        private static Lazy<ITypedElement> _prefixAttribute = new Lazy<ITypedElement>(RetrievePrefixAttribute);
        
        /// <summary>
        /// The backing field for the BuildingName property
        /// </summary>
        private string _buildingName;
        
        private static Lazy<ITypedElement> _buildingNameAttribute = new Lazy<ITypedElement>(RetrieveBuildingNameAttribute);
        
        /// <summary>
        /// The backing field for the SuiteNumber property
        /// </summary>
        private string _suiteNumber;
        
        private static Lazy<ITypedElement> _suiteNumberAttribute = new Lazy<ITypedElement>(RetrieveSuiteNumberAttribute);
        
        /// <summary>
        /// The backing field for the WithinTownLimits property
        /// </summary>
        private bool _withinTownLimits;
        
        private static Lazy<ITypedElement> _withinTownLimitsAttribute = new Lazy<ITypedElement>(RetrieveWithinTownLimitsAttribute);
        
        /// <summary>
        /// The backing field for the AddressGeneral property
        /// </summary>
        private string _addressGeneral;
        
        private static Lazy<ITypedElement> _addressGeneralAttribute = new Lazy<ITypedElement>(RetrieveAddressGeneralAttribute);
        
        /// <summary>
        /// The backing field for the Number property
        /// </summary>
        private string _number;
        
        private static Lazy<ITypedElement> _numberAttribute = new Lazy<ITypedElement>(RetrieveNumberAttribute);
        
        /// <summary>
        /// The backing field for the Suffix property
        /// </summary>
        private string _suffix;
        
        private static Lazy<ITypedElement> _suffixAttribute = new Lazy<ITypedElement>(RetrieveSuffixAttribute);
        
        /// <summary>
        /// The backing field for the Type property
        /// </summary>
        private string _type;
        
        private static Lazy<ITypedElement> _typeAttribute = new Lazy<ITypedElement>(RetrieveTypeAttribute);
        
        /// <summary>
        /// The backing field for the Code property
        /// </summary>
        private string _code;
        
        private static Lazy<ITypedElement> _codeAttribute = new Lazy<ITypedElement>(RetrieveCodeAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The name property
        /// </summary>
        [XmlElementNameAttribute("name")]
        [XmlAttributeAttribute(true)]
        public virtual string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e, _nameAttribute);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e, _nameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The prefix property
        /// </summary>
        [XmlElementNameAttribute("prefix")]
        [XmlAttributeAttribute(true)]
        public virtual string Prefix
        {
            get
            {
                return this._prefix;
            }
            set
            {
                if ((this._prefix != value))
                {
                    string old = this._prefix;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPrefixChanging(e);
                    this.OnPropertyChanging("Prefix", e, _prefixAttribute);
                    this._prefix = value;
                    this.OnPrefixChanged(e);
                    this.OnPropertyChanged("Prefix", e, _prefixAttribute);
                }
            }
        }
        
        /// <summary>
        /// The buildingName property
        /// </summary>
        [XmlElementNameAttribute("buildingName")]
        [XmlAttributeAttribute(true)]
        public virtual string BuildingName
        {
            get
            {
                return this._buildingName;
            }
            set
            {
                if ((this._buildingName != value))
                {
                    string old = this._buildingName;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBuildingNameChanging(e);
                    this.OnPropertyChanging("BuildingName", e, _buildingNameAttribute);
                    this._buildingName = value;
                    this.OnBuildingNameChanged(e);
                    this.OnPropertyChanged("BuildingName", e, _buildingNameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The suiteNumber property
        /// </summary>
        [XmlElementNameAttribute("suiteNumber")]
        [XmlAttributeAttribute(true)]
        public virtual string SuiteNumber
        {
            get
            {
                return this._suiteNumber;
            }
            set
            {
                if ((this._suiteNumber != value))
                {
                    string old = this._suiteNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSuiteNumberChanging(e);
                    this.OnPropertyChanging("SuiteNumber", e, _suiteNumberAttribute);
                    this._suiteNumber = value;
                    this.OnSuiteNumberChanged(e);
                    this.OnPropertyChanged("SuiteNumber", e, _suiteNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The withinTownLimits property
        /// </summary>
        [XmlElementNameAttribute("withinTownLimits")]
        [XmlAttributeAttribute(true)]
        public virtual bool WithinTownLimits
        {
            get
            {
                return this._withinTownLimits;
            }
            set
            {
                if ((this._withinTownLimits != value))
                {
                    bool old = this._withinTownLimits;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWithinTownLimitsChanging(e);
                    this.OnPropertyChanging("WithinTownLimits", e, _withinTownLimitsAttribute);
                    this._withinTownLimits = value;
                    this.OnWithinTownLimitsChanged(e);
                    this.OnPropertyChanged("WithinTownLimits", e, _withinTownLimitsAttribute);
                }
            }
        }
        
        /// <summary>
        /// The addressGeneral property
        /// </summary>
        [XmlElementNameAttribute("addressGeneral")]
        [XmlAttributeAttribute(true)]
        public virtual string AddressGeneral
        {
            get
            {
                return this._addressGeneral;
            }
            set
            {
                if ((this._addressGeneral != value))
                {
                    string old = this._addressGeneral;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAddressGeneralChanging(e);
                    this.OnPropertyChanging("AddressGeneral", e, _addressGeneralAttribute);
                    this._addressGeneral = value;
                    this.OnAddressGeneralChanged(e);
                    this.OnPropertyChanged("AddressGeneral", e, _addressGeneralAttribute);
                }
            }
        }
        
        /// <summary>
        /// The number property
        /// </summary>
        [XmlElementNameAttribute("number")]
        [XmlAttributeAttribute(true)]
        public virtual string Number
        {
            get
            {
                return this._number;
            }
            set
            {
                if ((this._number != value))
                {
                    string old = this._number;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNumberChanging(e);
                    this.OnPropertyChanging("Number", e, _numberAttribute);
                    this._number = value;
                    this.OnNumberChanged(e);
                    this.OnPropertyChanged("Number", e, _numberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The suffix property
        /// </summary>
        [XmlElementNameAttribute("suffix")]
        [XmlAttributeAttribute(true)]
        public virtual string Suffix
        {
            get
            {
                return this._suffix;
            }
            set
            {
                if ((this._suffix != value))
                {
                    string old = this._suffix;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSuffixChanging(e);
                    this.OnPropertyChanging("Suffix", e, _suffixAttribute);
                    this._suffix = value;
                    this.OnSuffixChanged(e);
                    this.OnPropertyChanged("Suffix", e, _suffixAttribute);
                }
            }
        }
        
        /// <summary>
        /// The type property
        /// </summary>
        [XmlElementNameAttribute("type")]
        [XmlAttributeAttribute(true)]
        public virtual string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    string old = this._type;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTypeChanging(e);
                    this.OnPropertyChanging("Type", e, _typeAttribute);
                    this._type = value;
                    this.OnTypeChanged(e);
                    this.OnPropertyChanged("Type", e, _typeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The code property
        /// </summary>
        [XmlElementNameAttribute("code")]
        [XmlAttributeAttribute(true)]
        public virtual string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    string old = this._code;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCodeChanging(e);
                    this.OnPropertyChanging("Code", e, _codeAttribute);
                    this._code = value;
                    this.OnCodeChanged(e);
                    this.OnPropertyChanged("Code", e, _codeAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/StreetDetail")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Prefix property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PrefixChanging;
        
        /// <summary>
        /// Gets fired when the Prefix property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PrefixChanged;
        
        /// <summary>
        /// Gets fired before the BuildingName property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BuildingNameChanging;
        
        /// <summary>
        /// Gets fired when the BuildingName property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BuildingNameChanged;
        
        /// <summary>
        /// Gets fired before the SuiteNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SuiteNumberChanging;
        
        /// <summary>
        /// Gets fired when the SuiteNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SuiteNumberChanged;
        
        /// <summary>
        /// Gets fired before the WithinTownLimits property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WithinTownLimitsChanging;
        
        /// <summary>
        /// Gets fired when the WithinTownLimits property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WithinTownLimitsChanged;
        
        /// <summary>
        /// Gets fired before the AddressGeneral property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AddressGeneralChanging;
        
        /// <summary>
        /// Gets fired when the AddressGeneral property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AddressGeneralChanged;
        
        /// <summary>
        /// Gets fired before the Number property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NumberChanging;
        
        /// <summary>
        /// Gets fired when the Number property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NumberChanged;
        
        /// <summary>
        /// Gets fired before the Suffix property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SuffixChanging;
        
        /// <summary>
        /// Gets fired when the Suffix property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SuffixChanged;
        
        /// <summary>
        /// Gets fired before the Type property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanging;
        
        /// <summary>
        /// Gets fired when the Type property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TypeChanged;
        
        /// <summary>
        /// Gets fired before the Code property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CodeChanging;
        
        /// <summary>
        /// Gets fired when the Code property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CodeChanged;
        
        private static ITypedElement RetrieveNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StreetDetail.ClassInstance)).Resolve("name")));
        }
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePrefixAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StreetDetail.ClassInstance)).Resolve("prefix")));
        }
        
        /// <summary>
        /// Raises the PrefixChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPrefixChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PrefixChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PrefixChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPrefixChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PrefixChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBuildingNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StreetDetail.ClassInstance)).Resolve("buildingName")));
        }
        
        /// <summary>
        /// Raises the BuildingNameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBuildingNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BuildingNameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BuildingNameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBuildingNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BuildingNameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSuiteNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StreetDetail.ClassInstance)).Resolve("suiteNumber")));
        }
        
        /// <summary>
        /// Raises the SuiteNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSuiteNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SuiteNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SuiteNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSuiteNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SuiteNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveWithinTownLimitsAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StreetDetail.ClassInstance)).Resolve("withinTownLimits")));
        }
        
        /// <summary>
        /// Raises the WithinTownLimitsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWithinTownLimitsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WithinTownLimitsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WithinTownLimitsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWithinTownLimitsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WithinTownLimitsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAddressGeneralAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StreetDetail.ClassInstance)).Resolve("addressGeneral")));
        }
        
        /// <summary>
        /// Raises the AddressGeneralChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAddressGeneralChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AddressGeneralChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AddressGeneralChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAddressGeneralChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AddressGeneralChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StreetDetail.ClassInstance)).Resolve("number")));
        }
        
        /// <summary>
        /// Raises the NumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSuffixAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StreetDetail.ClassInstance)).Resolve("suffix")));
        }
        
        /// <summary>
        /// Raises the SuffixChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSuffixChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SuffixChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SuffixChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSuffixChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SuffixChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTypeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StreetDetail.ClassInstance)).Resolve("type")));
        }
        
        /// <summary>
        /// Raises the TypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(StreetDetail.ClassInstance)).Resolve("code")));
        }
        
        /// <summary>
        /// Raises the CodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            if ((attribute == "PREFIX"))
            {
                return this.Prefix;
            }
            if ((attribute == "BUILDINGNAME"))
            {
                return this.BuildingName;
            }
            if ((attribute == "SUITENUMBER"))
            {
                return this.SuiteNumber;
            }
            if ((attribute == "WITHINTOWNLIMITS"))
            {
                return this.WithinTownLimits;
            }
            if ((attribute == "ADDRESSGENERAL"))
            {
                return this.AddressGeneral;
            }
            if ((attribute == "NUMBER"))
            {
                return this.Number;
            }
            if ((attribute == "SUFFIX"))
            {
                return this.Suffix;
            }
            if ((attribute == "TYPE"))
            {
                return this.Type;
            }
            if ((attribute == "CODE"))
            {
                return this.Code;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            if ((feature == "PREFIX"))
            {
                this.Prefix = ((string)(value));
                return;
            }
            if ((feature == "BUILDINGNAME"))
            {
                this.BuildingName = ((string)(value));
                return;
            }
            if ((feature == "SUITENUMBER"))
            {
                this.SuiteNumber = ((string)(value));
                return;
            }
            if ((feature == "WITHINTOWNLIMITS"))
            {
                this.WithinTownLimits = ((bool)(value));
                return;
            }
            if ((feature == "ADDRESSGENERAL"))
            {
                this.AddressGeneral = ((string)(value));
                return;
            }
            if ((feature == "NUMBER"))
            {
                this.Number = ((string)(value));
                return;
            }
            if ((feature == "SUFFIX"))
            {
                this.Suffix = ((string)(value));
                return;
            }
            if ((feature == "TYPE"))
            {
                this.Type = ((string)(value));
                return;
            }
            if ((feature == "CODE"))
            {
                this.Code = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/StreetDetail")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<IStreetDetail, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(IStreetDetail modelElement) : 
                    base(modelElement, "name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the prefix property
        /// </summary>
        private sealed class PrefixProxy : ModelPropertyChange<IStreetDetail, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PrefixProxy(IStreetDetail modelElement) : 
                    base(modelElement, "prefix")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Prefix;
                }
                set
                {
                    this.ModelElement.Prefix = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the buildingName property
        /// </summary>
        private sealed class BuildingNameProxy : ModelPropertyChange<IStreetDetail, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BuildingNameProxy(IStreetDetail modelElement) : 
                    base(modelElement, "buildingName")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.BuildingName;
                }
                set
                {
                    this.ModelElement.BuildingName = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the suiteNumber property
        /// </summary>
        private sealed class SuiteNumberProxy : ModelPropertyChange<IStreetDetail, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SuiteNumberProxy(IStreetDetail modelElement) : 
                    base(modelElement, "suiteNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.SuiteNumber;
                }
                set
                {
                    this.ModelElement.SuiteNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the withinTownLimits property
        /// </summary>
        private sealed class WithinTownLimitsProxy : ModelPropertyChange<IStreetDetail, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WithinTownLimitsProxy(IStreetDetail modelElement) : 
                    base(modelElement, "withinTownLimits")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.WithinTownLimits;
                }
                set
                {
                    this.ModelElement.WithinTownLimits = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the addressGeneral property
        /// </summary>
        private sealed class AddressGeneralProxy : ModelPropertyChange<IStreetDetail, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AddressGeneralProxy(IStreetDetail modelElement) : 
                    base(modelElement, "addressGeneral")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AddressGeneral;
                }
                set
                {
                    this.ModelElement.AddressGeneral = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the number property
        /// </summary>
        private sealed class NumberProxy : ModelPropertyChange<IStreetDetail, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NumberProxy(IStreetDetail modelElement) : 
                    base(modelElement, "number")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Number;
                }
                set
                {
                    this.ModelElement.Number = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the suffix property
        /// </summary>
        private sealed class SuffixProxy : ModelPropertyChange<IStreetDetail, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SuffixProxy(IStreetDetail modelElement) : 
                    base(modelElement, "suffix")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Suffix;
                }
                set
                {
                    this.ModelElement.Suffix = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the type property
        /// </summary>
        private sealed class TypeProxy : ModelPropertyChange<IStreetDetail, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TypeProxy(IStreetDetail modelElement) : 
                    base(modelElement, "type")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Type;
                }
                set
                {
                    this.ModelElement.Type = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the code property
        /// </summary>
        private sealed class CodeProxy : ModelPropertyChange<IStreetDetail, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CodeProxy(IStreetDetail modelElement) : 
                    base(modelElement, "code")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Code;
                }
                set
                {
                    this.ModelElement.Code = value;
                }
            }
        }
    }
}

