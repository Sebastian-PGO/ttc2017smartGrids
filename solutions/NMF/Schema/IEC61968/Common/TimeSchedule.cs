//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61968.Common
{
    
    
    /// <summary>
    /// The default implementation of the TimeSchedule class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Common")]
    [XmlNamespacePrefixAttribute("cimCommon")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/TimeSchedule")]
    [DebuggerDisplayAttribute("TimeSchedule {UUID}")]
    public partial class TimeSchedule : Document, ITimeSchedule, IModelElement
    {
        
        /// <summary>
        /// The backing field for the RecurrencePattern property
        /// </summary>
        private string _recurrencePattern;
        
        private static Lazy<ITypedElement> _recurrencePatternAttribute = new Lazy<ITypedElement>(RetrieveRecurrencePatternAttribute);
        
        /// <summary>
        /// The backing field for the Disabled property
        /// </summary>
        private bool _disabled;
        
        private static Lazy<ITypedElement> _disabledAttribute = new Lazy<ITypedElement>(RetrieveDisabledAttribute);
        
        /// <summary>
        /// The backing field for the RecurrencePeriod property
        /// </summary>
        private float _recurrencePeriod;
        
        private static Lazy<ITypedElement> _recurrencePeriodAttribute = new Lazy<ITypedElement>(RetrieveRecurrencePeriodAttribute);
        
        /// <summary>
        /// The backing field for the Offset property
        /// </summary>
        private float _offset;
        
        private static Lazy<ITypedElement> _offsetAttribute = new Lazy<ITypedElement>(RetrieveOffsetAttribute);
        
        private static Lazy<ITypedElement> _scheduleIntervalReference = new Lazy<ITypedElement>(RetrieveScheduleIntervalReference);
        
        /// <summary>
        /// The backing field for the ScheduleInterval property
        /// </summary>
        private IDateTimeInterval _scheduleInterval;
        
        private static Lazy<ITypedElement> _timePointsReference = new Lazy<ITypedElement>(RetrieveTimePointsReference);
        
        /// <summary>
        /// The backing field for the TimePoints property
        /// </summary>
        private TimeScheduleTimePointsCollection _timePoints;
        
        private static IClass _classInstance;
        
        public TimeSchedule()
        {
            this._timePoints = new TimeScheduleTimePointsCollection(this);
            this._timePoints.CollectionChanging += this.TimePointsCollectionChanging;
            this._timePoints.CollectionChanged += this.TimePointsCollectionChanged;
        }
        
        /// <summary>
        /// The recurrencePattern property
        /// </summary>
        [XmlElementNameAttribute("recurrencePattern")]
        [XmlAttributeAttribute(true)]
        public virtual string RecurrencePattern
        {
            get
            {
                return this._recurrencePattern;
            }
            set
            {
                if ((this._recurrencePattern != value))
                {
                    string old = this._recurrencePattern;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRecurrencePatternChanging(e);
                    this.OnPropertyChanging("RecurrencePattern", e, _recurrencePatternAttribute);
                    this._recurrencePattern = value;
                    this.OnRecurrencePatternChanged(e);
                    this.OnPropertyChanged("RecurrencePattern", e, _recurrencePatternAttribute);
                }
            }
        }
        
        /// <summary>
        /// The disabled property
        /// </summary>
        [XmlElementNameAttribute("disabled")]
        [XmlAttributeAttribute(true)]
        public virtual bool Disabled
        {
            get
            {
                return this._disabled;
            }
            set
            {
                if ((this._disabled != value))
                {
                    bool old = this._disabled;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDisabledChanging(e);
                    this.OnPropertyChanging("Disabled", e, _disabledAttribute);
                    this._disabled = value;
                    this.OnDisabledChanged(e);
                    this.OnPropertyChanged("Disabled", e, _disabledAttribute);
                }
            }
        }
        
        /// <summary>
        /// The recurrencePeriod property
        /// </summary>
        [XmlElementNameAttribute("recurrencePeriod")]
        [XmlAttributeAttribute(true)]
        public virtual float RecurrencePeriod
        {
            get
            {
                return this._recurrencePeriod;
            }
            set
            {
                if ((this._recurrencePeriod != value))
                {
                    float old = this._recurrencePeriod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRecurrencePeriodChanging(e);
                    this.OnPropertyChanging("RecurrencePeriod", e, _recurrencePeriodAttribute);
                    this._recurrencePeriod = value;
                    this.OnRecurrencePeriodChanged(e);
                    this.OnPropertyChanged("RecurrencePeriod", e, _recurrencePeriodAttribute);
                }
            }
        }
        
        /// <summary>
        /// The offset property
        /// </summary>
        [XmlElementNameAttribute("offset")]
        [XmlAttributeAttribute(true)]
        public virtual float Offset
        {
            get
            {
                return this._offset;
            }
            set
            {
                if ((this._offset != value))
                {
                    float old = this._offset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOffsetChanging(e);
                    this.OnPropertyChanging("Offset", e, _offsetAttribute);
                    this._offset = value;
                    this.OnOffsetChanged(e);
                    this.OnPropertyChanged("Offset", e, _offsetAttribute);
                }
            }
        }
        
        /// <summary>
        /// The scheduleInterval property
        /// </summary>
        [XmlElementNameAttribute("scheduleInterval")]
        [XmlAttributeAttribute(true)]
        public virtual IDateTimeInterval ScheduleInterval
        {
            get
            {
                return this._scheduleInterval;
            }
            set
            {
                if ((this._scheduleInterval != value))
                {
                    IDateTimeInterval old = this._scheduleInterval;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnScheduleIntervalChanging(e);
                    this.OnPropertyChanging("ScheduleInterval", e, _scheduleIntervalReference);
                    this._scheduleInterval = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetScheduleInterval;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetScheduleInterval;
                    }
                    this.OnScheduleIntervalChanged(e);
                    this.OnPropertyChanged("ScheduleInterval", e, _scheduleIntervalReference);
                }
            }
        }
        
        /// <summary>
        /// The TimePoints property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("TimeSchedule")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITimePoint> TimePoints
        {
            get
            {
                return this._timePoints;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TimeScheduleReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/TimeSchedule")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the RecurrencePattern property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RecurrencePatternChanging;
        
        /// <summary>
        /// Gets fired when the RecurrencePattern property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RecurrencePatternChanged;
        
        /// <summary>
        /// Gets fired before the Disabled property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DisabledChanging;
        
        /// <summary>
        /// Gets fired when the Disabled property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DisabledChanged;
        
        /// <summary>
        /// Gets fired before the RecurrencePeriod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RecurrencePeriodChanging;
        
        /// <summary>
        /// Gets fired when the RecurrencePeriod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RecurrencePeriodChanged;
        
        /// <summary>
        /// Gets fired before the Offset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OffsetChanging;
        
        /// <summary>
        /// Gets fired when the Offset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OffsetChanged;
        
        /// <summary>
        /// Gets fired before the ScheduleInterval property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ScheduleIntervalChanging;
        
        /// <summary>
        /// Gets fired when the ScheduleInterval property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ScheduleIntervalChanged;
        
        private static ITypedElement RetrieveRecurrencePatternAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TimeSchedule.ClassInstance)).Resolve("recurrencePattern")));
        }
        
        /// <summary>
        /// Raises the RecurrencePatternChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRecurrencePatternChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RecurrencePatternChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RecurrencePatternChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRecurrencePatternChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RecurrencePatternChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDisabledAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TimeSchedule.ClassInstance)).Resolve("disabled")));
        }
        
        /// <summary>
        /// Raises the DisabledChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDisabledChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DisabledChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DisabledChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDisabledChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DisabledChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRecurrencePeriodAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TimeSchedule.ClassInstance)).Resolve("recurrencePeriod")));
        }
        
        /// <summary>
        /// Raises the RecurrencePeriodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRecurrencePeriodChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RecurrencePeriodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RecurrencePeriodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRecurrencePeriodChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RecurrencePeriodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOffsetAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TimeSchedule.ClassInstance)).Resolve("offset")));
        }
        
        /// <summary>
        /// Raises the OffsetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOffsetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OffsetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OffsetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOffsetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OffsetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveScheduleIntervalReference()
        {
            return ((ITypedElement)(((ModelElement)(TimeSchedule.ClassInstance)).Resolve("scheduleInterval")));
        }
        
        /// <summary>
        /// Raises the ScheduleIntervalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScheduleIntervalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ScheduleIntervalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ScheduleIntervalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScheduleIntervalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ScheduleIntervalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ScheduleInterval property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetScheduleInterval(object sender, System.EventArgs eventArgs)
        {
            this.ScheduleInterval = null;
        }
        
        private static ITypedElement RetrieveTimePointsReference()
        {
            return ((ITypedElement)(((ModelElement)(TimeSchedule.ClassInstance)).Resolve("TimePoints")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the TimePoints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TimePointsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("TimePoints", e, _timePointsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the TimePoints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void TimePointsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("TimePoints", e, _timePointsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "RECURRENCEPATTERN"))
            {
                return this.RecurrencePattern;
            }
            if ((attribute == "DISABLED"))
            {
                return this.Disabled;
            }
            if ((attribute == "RECURRENCEPERIOD"))
            {
                return this.RecurrencePeriod;
            }
            if ((attribute == "OFFSET"))
            {
                return this.Offset;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "TIMEPOINTS"))
            {
                return this._timePoints;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SCHEDULEINTERVAL"))
            {
                this.ScheduleInterval = ((IDateTimeInterval)(value));
                return;
            }
            if ((feature == "RECURRENCEPATTERN"))
            {
                this.RecurrencePattern = ((string)(value));
                return;
            }
            if ((feature == "DISABLED"))
            {
                this.Disabled = ((bool)(value));
                return;
            }
            if ((feature == "RECURRENCEPERIOD"))
            {
                this.RecurrencePeriod = ((float)(value));
                return;
            }
            if ((feature == "OFFSET"))
            {
                this.Offset = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ScheduleInterval"))
            {
                return new ScheduleIntervalProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ScheduleInterval"))
            {
                return new ScheduleIntervalProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/TimeSchedule")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the TimeSchedule class
        /// </summary>
        public class TimeScheduleReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private TimeSchedule _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TimeScheduleReferencedElementsCollection(TimeSchedule parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.ScheduleInterval != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.TimePoints.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ScheduleIntervalChanged += this.PropagateValueChanges;
                this._parent.TimePoints.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ScheduleIntervalChanged -= this.PropagateValueChanges;
                this._parent.TimePoints.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.ScheduleInterval == null))
                {
                    IDateTimeInterval scheduleIntervalCasted = item.As<IDateTimeInterval>();
                    if ((scheduleIntervalCasted != null))
                    {
                        this._parent.ScheduleInterval = scheduleIntervalCasted;
                        return;
                    }
                }
                ITimePoint timePointsCasted = item.As<ITimePoint>();
                if ((timePointsCasted != null))
                {
                    this._parent.TimePoints.Add(timePointsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ScheduleInterval = null;
                this._parent.TimePoints.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.ScheduleInterval))
                {
                    return true;
                }
                if (this._parent.TimePoints.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.ScheduleInterval != null))
                {
                    array[arrayIndex] = this._parent.ScheduleInterval;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> timePointsEnumerator = this._parent.TimePoints.GetEnumerator();
                try
                {
                    for (
                    ; timePointsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = timePointsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    timePointsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.ScheduleInterval == item))
                {
                    this._parent.ScheduleInterval = null;
                    return true;
                }
                ITimePoint timePointItem = item.As<ITimePoint>();
                if (((timePointItem != null) 
                            && this._parent.TimePoints.Remove(timePointItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ScheduleInterval).Concat(this._parent.TimePoints).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the recurrencePattern property
        /// </summary>
        private sealed class RecurrencePatternProxy : ModelPropertyChange<ITimeSchedule, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RecurrencePatternProxy(ITimeSchedule modelElement) : 
                    base(modelElement, "recurrencePattern")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.RecurrencePattern;
                }
                set
                {
                    this.ModelElement.RecurrencePattern = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the disabled property
        /// </summary>
        private sealed class DisabledProxy : ModelPropertyChange<ITimeSchedule, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DisabledProxy(ITimeSchedule modelElement) : 
                    base(modelElement, "disabled")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Disabled;
                }
                set
                {
                    this.ModelElement.Disabled = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the recurrencePeriod property
        /// </summary>
        private sealed class RecurrencePeriodProxy : ModelPropertyChange<ITimeSchedule, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RecurrencePeriodProxy(ITimeSchedule modelElement) : 
                    base(modelElement, "recurrencePeriod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RecurrencePeriod;
                }
                set
                {
                    this.ModelElement.RecurrencePeriod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the offset property
        /// </summary>
        private sealed class OffsetProxy : ModelPropertyChange<ITimeSchedule, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OffsetProxy(ITimeSchedule modelElement) : 
                    base(modelElement, "offset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Offset;
                }
                set
                {
                    this.ModelElement.Offset = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the scheduleInterval property
        /// </summary>
        private sealed class ScheduleIntervalProxy : ModelPropertyChange<ITimeSchedule, IDateTimeInterval>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ScheduleIntervalProxy(ITimeSchedule modelElement) : 
                    base(modelElement, "scheduleInterval")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDateTimeInterval Value
            {
                get
                {
                    return this.ModelElement.ScheduleInterval;
                }
                set
                {
                    this.ModelElement.ScheduleInterval = value;
                }
            }
        }
    }
}

