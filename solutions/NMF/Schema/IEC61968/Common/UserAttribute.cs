using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61968.Common
{
    
    
    /// <summary>
    /// The default implementation of the UserAttribute class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Common")]
    [XmlNamespacePrefixAttribute("cimCommon")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/UserAttribute")]
    [DebuggerDisplayAttribute("UserAttribute {UUID}")]
    public partial class UserAttribute : Element, IUserAttribute, IModelElement
    {
        
        /// <summary>
        /// The backing field for the SequenceNumber property
        /// </summary>
        private int _sequenceNumber;
        
        private static Lazy<ITypedElement> _sequenceNumberAttribute = new Lazy<ITypedElement>(RetrieveSequenceNumberAttribute);
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private string _name;
        
        private static Lazy<ITypedElement> _nameAttribute = new Lazy<ITypedElement>(RetrieveNameAttribute);
        
        /// <summary>
        /// The backing field for the Value property
        /// </summary>
        private string _value;
        
        private static Lazy<ITypedElement> _valueAttribute = new Lazy<ITypedElement>(RetrieveValueAttribute);
        
        private static Lazy<ITypedElement> _propertySpecificationReference = new Lazy<ITypedElement>(RetrievePropertySpecificationReference);
        
        /// <summary>
        /// The backing field for the PropertySpecification property
        /// </summary>
        private ISpecification _propertySpecification;
        
        private static Lazy<ITypedElement> _passThroughBillsReference = new Lazy<ITypedElement>(RetrievePassThroughBillsReference);
        
        /// <summary>
        /// The backing field for the PassThroughBills property
        /// </summary>
        private UserAttributePassThroughBillsCollection _passThroughBills;
        
        private static Lazy<ITypedElement> _transactionReference = new Lazy<ITypedElement>(RetrieveTransactionReference);
        
        /// <summary>
        /// The backing field for the Transaction property
        /// </summary>
        private ITransaction _transaction;
        
        private static Lazy<ITypedElement> _ratingAssetsReference = new Lazy<ITypedElement>(RetrieveRatingAssetsReference);
        
        /// <summary>
        /// The backing field for the RatingAssets property
        /// </summary>
        private UserAttributeRatingAssetsCollection _ratingAssets;
        
        private static Lazy<ITypedElement> _erpLedgerEntriesReference = new Lazy<ITypedElement>(RetrieveErpLedgerEntriesReference);
        
        /// <summary>
        /// The backing field for the ErpLedgerEntries property
        /// </summary>
        private UserAttributeErpLedgerEntriesCollection _erpLedgerEntries;
        
        private static Lazy<ITypedElement> _propertyAssetsReference = new Lazy<ITypedElement>(RetrievePropertyAssetsReference);
        
        /// <summary>
        /// The backing field for the PropertyAssets property
        /// </summary>
        private UserAttributePropertyAssetsCollection _propertyAssets;
        
        private static Lazy<ITypedElement> _erpStatementLineItemsReference = new Lazy<ITypedElement>(RetrieveErpStatementLineItemsReference);
        
        /// <summary>
        /// The backing field for the ErpStatementLineItems property
        /// </summary>
        private UserAttributeErpStatementLineItemsCollection _erpStatementLineItems;
        
        private static Lazy<ITypedElement> _erpInvoiceLineItemsReference = new Lazy<ITypedElement>(RetrieveErpInvoiceLineItemsReference);
        
        /// <summary>
        /// The backing field for the ErpInvoiceLineItems property
        /// </summary>
        private UserAttributeErpInvoiceLineItemsCollection _erpInvoiceLineItems;
        
        private static Lazy<ITypedElement> _procedureDataSetsReference = new Lazy<ITypedElement>(RetrieveProcedureDataSetsReference);
        
        /// <summary>
        /// The backing field for the ProcedureDataSets property
        /// </summary>
        private UserAttributeProcedureDataSetsCollection _procedureDataSets;
        
        private static Lazy<ITypedElement> _ratingSpecificationReference = new Lazy<ITypedElement>(RetrieveRatingSpecificationReference);
        
        /// <summary>
        /// The backing field for the RatingSpecification property
        /// </summary>
        private ISpecification _ratingSpecification;
        
        private static Lazy<ITypedElement> _procedureReference = new Lazy<ITypedElement>(RetrieveProcedureReference);
        
        /// <summary>
        /// The backing field for the Procedure property
        /// </summary>
        private IProcedure _procedure;
        
        private static Lazy<ITypedElement> _billDeterminantsReference = new Lazy<ITypedElement>(RetrieveBillDeterminantsReference);
        
        /// <summary>
        /// The backing field for the BillDeterminants property
        /// </summary>
        private UserAttributeBillDeterminantsCollection _billDeterminants;
        
        private static IClass _classInstance;
        
        public UserAttribute()
        {
            this._passThroughBills = new UserAttributePassThroughBillsCollection(this);
            this._passThroughBills.CollectionChanging += this.PassThroughBillsCollectionChanging;
            this._passThroughBills.CollectionChanged += this.PassThroughBillsCollectionChanged;
            this._ratingAssets = new UserAttributeRatingAssetsCollection(this);
            this._ratingAssets.CollectionChanging += this.RatingAssetsCollectionChanging;
            this._ratingAssets.CollectionChanged += this.RatingAssetsCollectionChanged;
            this._erpLedgerEntries = new UserAttributeErpLedgerEntriesCollection(this);
            this._erpLedgerEntries.CollectionChanging += this.ErpLedgerEntriesCollectionChanging;
            this._erpLedgerEntries.CollectionChanged += this.ErpLedgerEntriesCollectionChanged;
            this._propertyAssets = new UserAttributePropertyAssetsCollection(this);
            this._propertyAssets.CollectionChanging += this.PropertyAssetsCollectionChanging;
            this._propertyAssets.CollectionChanged += this.PropertyAssetsCollectionChanged;
            this._erpStatementLineItems = new UserAttributeErpStatementLineItemsCollection(this);
            this._erpStatementLineItems.CollectionChanging += this.ErpStatementLineItemsCollectionChanging;
            this._erpStatementLineItems.CollectionChanged += this.ErpStatementLineItemsCollectionChanged;
            this._erpInvoiceLineItems = new UserAttributeErpInvoiceLineItemsCollection(this);
            this._erpInvoiceLineItems.CollectionChanging += this.ErpInvoiceLineItemsCollectionChanging;
            this._erpInvoiceLineItems.CollectionChanged += this.ErpInvoiceLineItemsCollectionChanged;
            this._procedureDataSets = new UserAttributeProcedureDataSetsCollection(this);
            this._procedureDataSets.CollectionChanging += this.ProcedureDataSetsCollectionChanging;
            this._procedureDataSets.CollectionChanged += this.ProcedureDataSetsCollectionChanged;
            this._billDeterminants = new UserAttributeBillDeterminantsCollection(this);
            this._billDeterminants.CollectionChanging += this.BillDeterminantsCollectionChanging;
            this._billDeterminants.CollectionChanged += this.BillDeterminantsCollectionChanged;
        }
        
        /// <summary>
        /// The sequenceNumber property
        /// </summary>
        [XmlElementNameAttribute("sequenceNumber")]
        [XmlAttributeAttribute(true)]
        public virtual int SequenceNumber
        {
            get
            {
                return this._sequenceNumber;
            }
            set
            {
                if ((this._sequenceNumber != value))
                {
                    int old = this._sequenceNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSequenceNumberChanging(e);
                    this.OnPropertyChanging("SequenceNumber", e, _sequenceNumberAttribute);
                    this._sequenceNumber = value;
                    this.OnSequenceNumberChanged(e);
                    this.OnPropertyChanged("SequenceNumber", e, _sequenceNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The name property
        /// </summary>
        [XmlElementNameAttribute("name")]
        [XmlAttributeAttribute(true)]
        public virtual string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e, _nameAttribute);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e, _nameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The value property
        /// </summary>
        [XmlElementNameAttribute("value")]
        [XmlAttributeAttribute(true)]
        public virtual string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    string old = this._value;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValueChanging(e);
                    this.OnPropertyChanging("Value", e, _valueAttribute);
                    this._value = value;
                    this.OnValueChanged(e);
                    this.OnPropertyChanged("Value", e, _valueAttribute);
                }
            }
        }
        
        /// <summary>
        /// The PropertySpecification property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AssetProperites")]
        public virtual ISpecification PropertySpecification
        {
            get
            {
                return this._propertySpecification;
            }
            set
            {
                if ((this._propertySpecification != value))
                {
                    ISpecification old = this._propertySpecification;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPropertySpecificationChanging(e);
                    this.OnPropertyChanging("PropertySpecification", e, _propertySpecificationReference);
                    this._propertySpecification = value;
                    if ((old != null))
                    {
                        old.AssetProperites.Remove(this);
                        old.Deleted -= this.OnResetPropertySpecification;
                    }
                    if ((value != null))
                    {
                        value.AssetProperites.Add(this);
                        value.Deleted += this.OnResetPropertySpecification;
                    }
                    this.OnPropertySpecificationChanged(e);
                    this.OnPropertyChanged("PropertySpecification", e, _propertySpecificationReference);
                }
            }
        }
        
        /// <summary>
        /// The PassThroughBills property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("UserAttributes")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IPassThroughBill> PassThroughBills
        {
            get
            {
                return this._passThroughBills;
            }
        }
        
        /// <summary>
        /// The Transaction property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("UserAttributes")]
        public virtual ITransaction Transaction
        {
            get
            {
                return this._transaction;
            }
            set
            {
                if ((this._transaction != value))
                {
                    ITransaction old = this._transaction;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransactionChanging(e);
                    this.OnPropertyChanging("Transaction", e, _transactionReference);
                    this._transaction = value;
                    if ((old != null))
                    {
                        old.UserAttributes.Remove(this);
                        old.Deleted -= this.OnResetTransaction;
                    }
                    if ((value != null))
                    {
                        value.UserAttributes.Add(this);
                        value.Deleted += this.OnResetTransaction;
                    }
                    this.OnTransactionChanged(e);
                    this.OnPropertyChanged("Transaction", e, _transactionReference);
                }
            }
        }
        
        /// <summary>
        /// The RatingAssets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Ratings")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAsset> RatingAssets
        {
            get
            {
                return this._ratingAssets;
            }
        }
        
        /// <summary>
        /// The ErpLedgerEntries property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("UserAttributes")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpLedgerEntry> ErpLedgerEntries
        {
            get
            {
                return this._erpLedgerEntries;
            }
        }
        
        /// <summary>
        /// The PropertyAssets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Properties")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAsset> PropertyAssets
        {
            get
            {
                return this._propertyAssets;
            }
        }
        
        /// <summary>
        /// The ErpStatementLineItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("UserAttributes")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMarketStatementLineItem> ErpStatementLineItems
        {
            get
            {
                return this._erpStatementLineItems;
            }
        }
        
        /// <summary>
        /// The ErpInvoiceLineItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("UserAttributes")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpInvoiceLineItem> ErpInvoiceLineItems
        {
            get
            {
                return this._erpInvoiceLineItems;
            }
        }
        
        /// <summary>
        /// The ProcedureDataSets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Properties")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IProcedureDataSet> ProcedureDataSets
        {
            get
            {
                return this._procedureDataSets;
            }
        }
        
        /// <summary>
        /// The RatingSpecification property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Ratings")]
        public virtual ISpecification RatingSpecification
        {
            get
            {
                return this._ratingSpecification;
            }
            set
            {
                if ((this._ratingSpecification != value))
                {
                    ISpecification old = this._ratingSpecification;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatingSpecificationChanging(e);
                    this.OnPropertyChanging("RatingSpecification", e, _ratingSpecificationReference);
                    this._ratingSpecification = value;
                    if ((old != null))
                    {
                        old.Ratings.Remove(this);
                        old.Deleted -= this.OnResetRatingSpecification;
                    }
                    if ((value != null))
                    {
                        value.Ratings.Add(this);
                        value.Deleted += this.OnResetRatingSpecification;
                    }
                    this.OnRatingSpecificationChanged(e);
                    this.OnPropertyChanged("RatingSpecification", e, _ratingSpecificationReference);
                }
            }
        }
        
        /// <summary>
        /// The Procedure property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ProcedureValues")]
        public virtual IProcedure Procedure
        {
            get
            {
                return this._procedure;
            }
            set
            {
                if ((this._procedure != value))
                {
                    IProcedure old = this._procedure;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnProcedureChanging(e);
                    this.OnPropertyChanging("Procedure", e, _procedureReference);
                    this._procedure = value;
                    if ((old != null))
                    {
                        old.ProcedureValues.Remove(this);
                        old.Deleted -= this.OnResetProcedure;
                    }
                    if ((value != null))
                    {
                        value.ProcedureValues.Add(this);
                        value.Deleted += this.OnResetProcedure;
                    }
                    this.OnProcedureChanged(e);
                    this.OnPropertyChanged("Procedure", e, _procedureReference);
                }
            }
        }
        
        /// <summary>
        /// The BillDeterminants property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("UserAttributes")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IBillDeterminant> BillDeterminants
        {
            get
            {
                return this._billDeterminants;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new UserAttributeReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/UserAttribute")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the SequenceNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SequenceNumberChanging;
        
        /// <summary>
        /// Gets fired when the SequenceNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SequenceNumberChanged;
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Value property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanging;
        
        /// <summary>
        /// Gets fired when the Value property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValueChanged;
        
        /// <summary>
        /// Gets fired before the PropertySpecification property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PropertySpecificationChanging;
        
        /// <summary>
        /// Gets fired when the PropertySpecification property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PropertySpecificationChanged;
        
        /// <summary>
        /// Gets fired before the Transaction property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransactionChanging;
        
        /// <summary>
        /// Gets fired when the Transaction property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransactionChanged;
        
        /// <summary>
        /// Gets fired before the RatingSpecification property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatingSpecificationChanging;
        
        /// <summary>
        /// Gets fired when the RatingSpecification property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatingSpecificationChanged;
        
        /// <summary>
        /// Gets fired before the Procedure property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProcedureChanging;
        
        /// <summary>
        /// Gets fired when the Procedure property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProcedureChanged;
        
        private static ITypedElement RetrieveSequenceNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(UserAttribute.ClassInstance)).Resolve("sequenceNumber")));
        }
        
        /// <summary>
        /// Raises the SequenceNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSequenceNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SequenceNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SequenceNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSequenceNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SequenceNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(UserAttribute.ClassInstance)).Resolve("name")));
        }
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveValueAttribute()
        {
            return ((ITypedElement)(((ModelElement)(UserAttribute.ClassInstance)).Resolve("value")));
        }
        
        /// <summary>
        /// Raises the ValueChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValueChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValueChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValueChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePropertySpecificationReference()
        {
            return ((ITypedElement)(((ModelElement)(UserAttribute.ClassInstance)).Resolve("PropertySpecification")));
        }
        
        /// <summary>
        /// Raises the PropertySpecificationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPropertySpecificationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PropertySpecificationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PropertySpecificationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPropertySpecificationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PropertySpecificationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the PropertySpecification property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPropertySpecification(object sender, System.EventArgs eventArgs)
        {
            this.PropertySpecification = null;
        }
        
        private static ITypedElement RetrievePassThroughBillsReference()
        {
            return ((ITypedElement)(((ModelElement)(UserAttribute.ClassInstance)).Resolve("PassThroughBills")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PassThroughBills property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PassThroughBillsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("PassThroughBills", e, _passThroughBillsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PassThroughBills property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PassThroughBillsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PassThroughBills", e, _passThroughBillsReference);
        }
        
        private static ITypedElement RetrieveTransactionReference()
        {
            return ((ITypedElement)(((ModelElement)(UserAttribute.ClassInstance)).Resolve("Transaction")));
        }
        
        /// <summary>
        /// Raises the TransactionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransactionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransactionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransactionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransactionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransactionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Transaction property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTransaction(object sender, System.EventArgs eventArgs)
        {
            this.Transaction = null;
        }
        
        private static ITypedElement RetrieveRatingAssetsReference()
        {
            return ((ITypedElement)(((ModelElement)(UserAttribute.ClassInstance)).Resolve("RatingAssets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the RatingAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RatingAssetsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("RatingAssets", e, _ratingAssetsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the RatingAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RatingAssetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("RatingAssets", e, _ratingAssetsReference);
        }
        
        private static ITypedElement RetrieveErpLedgerEntriesReference()
        {
            return ((ITypedElement)(((ModelElement)(UserAttribute.ClassInstance)).Resolve("ErpLedgerEntries")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpLedgerEntries property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpLedgerEntriesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ErpLedgerEntries", e, _erpLedgerEntriesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpLedgerEntries property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpLedgerEntriesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpLedgerEntries", e, _erpLedgerEntriesReference);
        }
        
        private static ITypedElement RetrievePropertyAssetsReference()
        {
            return ((ITypedElement)(((ModelElement)(UserAttribute.ClassInstance)).Resolve("PropertyAssets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PropertyAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PropertyAssetsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("PropertyAssets", e, _propertyAssetsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PropertyAssets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PropertyAssetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PropertyAssets", e, _propertyAssetsReference);
        }
        
        private static ITypedElement RetrieveErpStatementLineItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(UserAttribute.ClassInstance)).Resolve("ErpStatementLineItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpStatementLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpStatementLineItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ErpStatementLineItems", e, _erpStatementLineItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpStatementLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpStatementLineItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpStatementLineItems", e, _erpStatementLineItemsReference);
        }
        
        private static ITypedElement RetrieveErpInvoiceLineItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(UserAttribute.ClassInstance)).Resolve("ErpInvoiceLineItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpInvoiceLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpInvoiceLineItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ErpInvoiceLineItems", e, _erpInvoiceLineItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpInvoiceLineItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpInvoiceLineItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpInvoiceLineItems", e, _erpInvoiceLineItemsReference);
        }
        
        private static ITypedElement RetrieveProcedureDataSetsReference()
        {
            return ((ITypedElement)(((ModelElement)(UserAttribute.ClassInstance)).Resolve("ProcedureDataSets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ProcedureDataSets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProcedureDataSetsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ProcedureDataSets", e, _procedureDataSetsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ProcedureDataSets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ProcedureDataSetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ProcedureDataSets", e, _procedureDataSetsReference);
        }
        
        private static ITypedElement RetrieveRatingSpecificationReference()
        {
            return ((ITypedElement)(((ModelElement)(UserAttribute.ClassInstance)).Resolve("RatingSpecification")));
        }
        
        /// <summary>
        /// Raises the RatingSpecificationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatingSpecificationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatingSpecificationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatingSpecificationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatingSpecificationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatingSpecificationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RatingSpecification property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRatingSpecification(object sender, System.EventArgs eventArgs)
        {
            this.RatingSpecification = null;
        }
        
        private static ITypedElement RetrieveProcedureReference()
        {
            return ((ITypedElement)(((ModelElement)(UserAttribute.ClassInstance)).Resolve("Procedure")));
        }
        
        /// <summary>
        /// Raises the ProcedureChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProcedureChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProcedureChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ProcedureChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProcedureChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProcedureChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Procedure property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetProcedure(object sender, System.EventArgs eventArgs)
        {
            this.Procedure = null;
        }
        
        private static ITypedElement RetrieveBillDeterminantsReference()
        {
            return ((ITypedElement)(((ModelElement)(UserAttribute.ClassInstance)).Resolve("BillDeterminants")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the BillDeterminants property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BillDeterminantsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("BillDeterminants", e, _billDeterminantsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the BillDeterminants property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void BillDeterminantsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("BillDeterminants", e, _billDeterminantsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SEQUENCENUMBER"))
            {
                return this.SequenceNumber;
            }
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            if ((attribute == "VALUE"))
            {
                return this.Value;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "PASSTHROUGHBILLS"))
            {
                return this._passThroughBills;
            }
            if ((feature == "RATINGASSETS"))
            {
                return this._ratingAssets;
            }
            if ((feature == "ERPLEDGERENTRIES"))
            {
                return this._erpLedgerEntries;
            }
            if ((feature == "PROPERTYASSETS"))
            {
                return this._propertyAssets;
            }
            if ((feature == "ERPSTATEMENTLINEITEMS"))
            {
                return this._erpStatementLineItems;
            }
            if ((feature == "ERPINVOICELINEITEMS"))
            {
                return this._erpInvoiceLineItems;
            }
            if ((feature == "PROCEDUREDATASETS"))
            {
                return this._procedureDataSets;
            }
            if ((feature == "BILLDETERMINANTS"))
            {
                return this._billDeterminants;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PROPERTYSPECIFICATION"))
            {
                this.PropertySpecification = ((ISpecification)(value));
                return;
            }
            if ((feature == "TRANSACTION"))
            {
                this.Transaction = ((ITransaction)(value));
                return;
            }
            if ((feature == "RATINGSPECIFICATION"))
            {
                this.RatingSpecification = ((ISpecification)(value));
                return;
            }
            if ((feature == "PROCEDURE"))
            {
                this.Procedure = ((IProcedure)(value));
                return;
            }
            if ((feature == "SEQUENCENUMBER"))
            {
                this.SequenceNumber = ((int)(value));
                return;
            }
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            if ((feature == "VALUE"))
            {
                this.Value = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "PropertySpecification"))
            {
                return new PropertySpecificationProxy(this);
            }
            if ((attribute == "Transaction"))
            {
                return new TransactionProxy(this);
            }
            if ((attribute == "RatingSpecification"))
            {
                return new RatingSpecificationProxy(this);
            }
            if ((attribute == "Procedure"))
            {
                return new ProcedureProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "PropertySpecification"))
            {
                return new PropertySpecificationProxy(this);
            }
            if ((reference == "Transaction"))
            {
                return new TransactionProxy(this);
            }
            if ((reference == "RatingSpecification"))
            {
                return new RatingSpecificationProxy(this);
            }
            if ((reference == "Procedure"))
            {
                return new ProcedureProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/UserAttribute")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the UserAttribute class
        /// </summary>
        public class UserAttributeReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private UserAttribute _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public UserAttributeReferencedElementsCollection(UserAttribute parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.PropertySpecification != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.PassThroughBills.Count);
                    if ((this._parent.Transaction != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.RatingAssets.Count);
                    count = (count + this._parent.ErpLedgerEntries.Count);
                    count = (count + this._parent.PropertyAssets.Count);
                    count = (count + this._parent.ErpStatementLineItems.Count);
                    count = (count + this._parent.ErpInvoiceLineItems.Count);
                    count = (count + this._parent.ProcedureDataSets.Count);
                    if ((this._parent.RatingSpecification != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Procedure != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.BillDeterminants.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.PropertySpecificationChanged += this.PropagateValueChanges;
                this._parent.PassThroughBills.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.TransactionChanged += this.PropagateValueChanges;
                this._parent.RatingAssets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpLedgerEntries.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PropertyAssets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpStatementLineItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpInvoiceLineItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ProcedureDataSets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.RatingSpecificationChanged += this.PropagateValueChanges;
                this._parent.ProcedureChanged += this.PropagateValueChanges;
                this._parent.BillDeterminants.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.PropertySpecificationChanged -= this.PropagateValueChanges;
                this._parent.PassThroughBills.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.TransactionChanged -= this.PropagateValueChanges;
                this._parent.RatingAssets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpLedgerEntries.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PropertyAssets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpStatementLineItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpInvoiceLineItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ProcedureDataSets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.RatingSpecificationChanged -= this.PropagateValueChanges;
                this._parent.ProcedureChanged -= this.PropagateValueChanges;
                this._parent.BillDeterminants.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.PropertySpecification == null))
                {
                    ISpecification propertySpecificationCasted = item.As<ISpecification>();
                    if ((propertySpecificationCasted != null))
                    {
                        this._parent.PropertySpecification = propertySpecificationCasted;
                        return;
                    }
                }
                IPassThroughBill passThroughBillsCasted = item.As<IPassThroughBill>();
                if ((passThroughBillsCasted != null))
                {
                    this._parent.PassThroughBills.Add(passThroughBillsCasted);
                }
                if ((this._parent.Transaction == null))
                {
                    ITransaction transactionCasted = item.As<ITransaction>();
                    if ((transactionCasted != null))
                    {
                        this._parent.Transaction = transactionCasted;
                        return;
                    }
                }
                IAsset ratingAssetsCasted = item.As<IAsset>();
                if ((ratingAssetsCasted != null))
                {
                    this._parent.RatingAssets.Add(ratingAssetsCasted);
                }
                IErpLedgerEntry erpLedgerEntriesCasted = item.As<IErpLedgerEntry>();
                if ((erpLedgerEntriesCasted != null))
                {
                    this._parent.ErpLedgerEntries.Add(erpLedgerEntriesCasted);
                }
                IAsset propertyAssetsCasted = item.As<IAsset>();
                if ((propertyAssetsCasted != null))
                {
                    this._parent.PropertyAssets.Add(propertyAssetsCasted);
                }
                IMarketStatementLineItem erpStatementLineItemsCasted = item.As<IMarketStatementLineItem>();
                if ((erpStatementLineItemsCasted != null))
                {
                    this._parent.ErpStatementLineItems.Add(erpStatementLineItemsCasted);
                }
                IErpInvoiceLineItem erpInvoiceLineItemsCasted = item.As<IErpInvoiceLineItem>();
                if ((erpInvoiceLineItemsCasted != null))
                {
                    this._parent.ErpInvoiceLineItems.Add(erpInvoiceLineItemsCasted);
                }
                IProcedureDataSet procedureDataSetsCasted = item.As<IProcedureDataSet>();
                if ((procedureDataSetsCasted != null))
                {
                    this._parent.ProcedureDataSets.Add(procedureDataSetsCasted);
                }
                if ((this._parent.RatingSpecification == null))
                {
                    ISpecification ratingSpecificationCasted = item.As<ISpecification>();
                    if ((ratingSpecificationCasted != null))
                    {
                        this._parent.RatingSpecification = ratingSpecificationCasted;
                        return;
                    }
                }
                if ((this._parent.Procedure == null))
                {
                    IProcedure procedureCasted = item.As<IProcedure>();
                    if ((procedureCasted != null))
                    {
                        this._parent.Procedure = procedureCasted;
                        return;
                    }
                }
                IBillDeterminant billDeterminantsCasted = item.As<IBillDeterminant>();
                if ((billDeterminantsCasted != null))
                {
                    this._parent.BillDeterminants.Add(billDeterminantsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.PropertySpecification = null;
                this._parent.PassThroughBills.Clear();
                this._parent.Transaction = null;
                this._parent.RatingAssets.Clear();
                this._parent.ErpLedgerEntries.Clear();
                this._parent.PropertyAssets.Clear();
                this._parent.ErpStatementLineItems.Clear();
                this._parent.ErpInvoiceLineItems.Clear();
                this._parent.ProcedureDataSets.Clear();
                this._parent.RatingSpecification = null;
                this._parent.Procedure = null;
                this._parent.BillDeterminants.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.PropertySpecification))
                {
                    return true;
                }
                if (this._parent.PassThroughBills.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Transaction))
                {
                    return true;
                }
                if (this._parent.RatingAssets.Contains(item))
                {
                    return true;
                }
                if (this._parent.ErpLedgerEntries.Contains(item))
                {
                    return true;
                }
                if (this._parent.PropertyAssets.Contains(item))
                {
                    return true;
                }
                if (this._parent.ErpStatementLineItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.ErpInvoiceLineItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.ProcedureDataSets.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.RatingSpecification))
                {
                    return true;
                }
                if ((item == this._parent.Procedure))
                {
                    return true;
                }
                if (this._parent.BillDeterminants.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.PropertySpecification != null))
                {
                    array[arrayIndex] = this._parent.PropertySpecification;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> passThroughBillsEnumerator = this._parent.PassThroughBills.GetEnumerator();
                try
                {
                    for (
                    ; passThroughBillsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = passThroughBillsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    passThroughBillsEnumerator.Dispose();
                }
                if ((this._parent.Transaction != null))
                {
                    array[arrayIndex] = this._parent.Transaction;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> ratingAssetsEnumerator = this._parent.RatingAssets.GetEnumerator();
                try
                {
                    for (
                    ; ratingAssetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ratingAssetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ratingAssetsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> erpLedgerEntriesEnumerator = this._parent.ErpLedgerEntries.GetEnumerator();
                try
                {
                    for (
                    ; erpLedgerEntriesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpLedgerEntriesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpLedgerEntriesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> propertyAssetsEnumerator = this._parent.PropertyAssets.GetEnumerator();
                try
                {
                    for (
                    ; propertyAssetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = propertyAssetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    propertyAssetsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> erpStatementLineItemsEnumerator = this._parent.ErpStatementLineItems.GetEnumerator();
                try
                {
                    for (
                    ; erpStatementLineItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpStatementLineItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpStatementLineItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> erpInvoiceLineItemsEnumerator = this._parent.ErpInvoiceLineItems.GetEnumerator();
                try
                {
                    for (
                    ; erpInvoiceLineItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpInvoiceLineItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpInvoiceLineItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> procedureDataSetsEnumerator = this._parent.ProcedureDataSets.GetEnumerator();
                try
                {
                    for (
                    ; procedureDataSetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = procedureDataSetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    procedureDataSetsEnumerator.Dispose();
                }
                if ((this._parent.RatingSpecification != null))
                {
                    array[arrayIndex] = this._parent.RatingSpecification;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Procedure != null))
                {
                    array[arrayIndex] = this._parent.Procedure;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> billDeterminantsEnumerator = this._parent.BillDeterminants.GetEnumerator();
                try
                {
                    for (
                    ; billDeterminantsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = billDeterminantsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    billDeterminantsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.PropertySpecification == item))
                {
                    this._parent.PropertySpecification = null;
                    return true;
                }
                IPassThroughBill passThroughBillItem = item.As<IPassThroughBill>();
                if (((passThroughBillItem != null) 
                            && this._parent.PassThroughBills.Remove(passThroughBillItem)))
                {
                    return true;
                }
                if ((this._parent.Transaction == item))
                {
                    this._parent.Transaction = null;
                    return true;
                }
                IAsset assetItem = item.As<IAsset>();
                if (((assetItem != null) 
                            && this._parent.RatingAssets.Remove(assetItem)))
                {
                    return true;
                }
                IErpLedgerEntry erpLedgerEntryItem = item.As<IErpLedgerEntry>();
                if (((erpLedgerEntryItem != null) 
                            && this._parent.ErpLedgerEntries.Remove(erpLedgerEntryItem)))
                {
                    return true;
                }
                if (((assetItem != null) 
                            && this._parent.PropertyAssets.Remove(assetItem)))
                {
                    return true;
                }
                IMarketStatementLineItem marketStatementLineItemItem = item.As<IMarketStatementLineItem>();
                if (((marketStatementLineItemItem != null) 
                            && this._parent.ErpStatementLineItems.Remove(marketStatementLineItemItem)))
                {
                    return true;
                }
                IErpInvoiceLineItem erpInvoiceLineItemItem = item.As<IErpInvoiceLineItem>();
                if (((erpInvoiceLineItemItem != null) 
                            && this._parent.ErpInvoiceLineItems.Remove(erpInvoiceLineItemItem)))
                {
                    return true;
                }
                IProcedureDataSet procedureDataSetItem = item.As<IProcedureDataSet>();
                if (((procedureDataSetItem != null) 
                            && this._parent.ProcedureDataSets.Remove(procedureDataSetItem)))
                {
                    return true;
                }
                if ((this._parent.RatingSpecification == item))
                {
                    this._parent.RatingSpecification = null;
                    return true;
                }
                if ((this._parent.Procedure == item))
                {
                    this._parent.Procedure = null;
                    return true;
                }
                IBillDeterminant billDeterminantItem = item.As<IBillDeterminant>();
                if (((billDeterminantItem != null) 
                            && this._parent.BillDeterminants.Remove(billDeterminantItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.PropertySpecification).Concat(this._parent.PassThroughBills).Concat(this._parent.Transaction).Concat(this._parent.RatingAssets).Concat(this._parent.ErpLedgerEntries).Concat(this._parent.PropertyAssets).Concat(this._parent.ErpStatementLineItems).Concat(this._parent.ErpInvoiceLineItems).Concat(this._parent.ProcedureDataSets).Concat(this._parent.RatingSpecification).Concat(this._parent.Procedure).Concat(this._parent.BillDeterminants).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sequenceNumber property
        /// </summary>
        private sealed class SequenceNumberProxy : ModelPropertyChange<IUserAttribute, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SequenceNumberProxy(IUserAttribute modelElement) : 
                    base(modelElement, "sequenceNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.SequenceNumber;
                }
                set
                {
                    this.ModelElement.SequenceNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<IUserAttribute, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(IUserAttribute modelElement) : 
                    base(modelElement, "name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the value property
        /// </summary>
        private sealed class ValueProxy : ModelPropertyChange<IUserAttribute, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValueProxy(IUserAttribute modelElement) : 
                    base(modelElement, "value")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Value;
                }
                set
                {
                    this.ModelElement.Value = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the PropertySpecification property
        /// </summary>
        private sealed class PropertySpecificationProxy : ModelPropertyChange<IUserAttribute, ISpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PropertySpecificationProxy(IUserAttribute modelElement) : 
                    base(modelElement, "PropertySpecification")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISpecification Value
            {
                get
                {
                    return this.ModelElement.PropertySpecification;
                }
                set
                {
                    this.ModelElement.PropertySpecification = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Transaction property
        /// </summary>
        private sealed class TransactionProxy : ModelPropertyChange<IUserAttribute, ITransaction>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransactionProxy(IUserAttribute modelElement) : 
                    base(modelElement, "Transaction")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITransaction Value
            {
                get
                {
                    return this.ModelElement.Transaction;
                }
                set
                {
                    this.ModelElement.Transaction = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RatingSpecification property
        /// </summary>
        private sealed class RatingSpecificationProxy : ModelPropertyChange<IUserAttribute, ISpecification>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatingSpecificationProxy(IUserAttribute modelElement) : 
                    base(modelElement, "RatingSpecification")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ISpecification Value
            {
                get
                {
                    return this.ModelElement.RatingSpecification;
                }
                set
                {
                    this.ModelElement.RatingSpecification = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Procedure property
        /// </summary>
        private sealed class ProcedureProxy : ModelPropertyChange<IUserAttribute, IProcedure>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProcedureProxy(IUserAttribute modelElement) : 
                    base(modelElement, "Procedure")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IProcedure Value
            {
                get
                {
                    return this.ModelElement.Procedure;
                }
                set
                {
                    this.ModelElement.Procedure = value;
                }
            }
        }
    }
}

