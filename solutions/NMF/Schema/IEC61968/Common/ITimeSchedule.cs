using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61968.Common
{
    
    
    /// <summary>
    /// The public interface for TimeSchedule
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(TimeSchedule))]
    [XmlDefaultImplementationTypeAttribute(typeof(TimeSchedule))]
    public interface ITimeSchedule : IModelElement, IDocument
    {
        
        /// <summary>
        /// The recurrencePattern property
        /// </summary>
        string RecurrencePattern
        {
            get;
            set;
        }
        
        /// <summary>
        /// The disabled property
        /// </summary>
        bool Disabled
        {
            get;
            set;
        }
        
        /// <summary>
        /// The recurrencePeriod property
        /// </summary>
        float RecurrencePeriod
        {
            get;
            set;
        }
        
        /// <summary>
        /// The offset property
        /// </summary>
        float Offset
        {
            get;
            set;
        }
        
        /// <summary>
        /// The scheduleInterval property
        /// </summary>
        IDateTimeInterval ScheduleInterval
        {
            get;
            set;
        }
        
        /// <summary>
        /// The TimePoints property
        /// </summary>
        IOrderedSetExpression<ITimePoint> TimePoints
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the RecurrencePattern property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RecurrencePatternChanging;
        
        /// <summary>
        /// Gets fired when the RecurrencePattern property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RecurrencePatternChanged;
        
        /// <summary>
        /// Gets fired before the Disabled property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DisabledChanging;
        
        /// <summary>
        /// Gets fired when the Disabled property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DisabledChanged;
        
        /// <summary>
        /// Gets fired before the RecurrencePeriod property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RecurrencePeriodChanging;
        
        /// <summary>
        /// Gets fired when the RecurrencePeriod property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RecurrencePeriodChanged;
        
        /// <summary>
        /// Gets fired before the Offset property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OffsetChanging;
        
        /// <summary>
        /// Gets fired when the Offset property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OffsetChanged;
        
        /// <summary>
        /// Gets fired before the ScheduleInterval property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ScheduleIntervalChanging;
        
        /// <summary>
        /// Gets fired when the ScheduleInterval property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ScheduleIntervalChanged;
    }
}

