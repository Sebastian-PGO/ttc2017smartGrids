using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfGMLSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.MarketOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61968.Common
{
    
    
    /// <summary>
    /// The default implementation of the ActivityRecord class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Common")]
    [XmlNamespacePrefixAttribute("cimCommon")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/ActivityRecord")]
    [DebuggerDisplayAttribute("ActivityRecord {UUID}")]
    public partial class ActivityRecord : IdentifiedObject, IActivityRecord, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Severity property
        /// </summary>
        private string _severity;
        
        private static Lazy<ITypedElement> _severityAttribute = new Lazy<ITypedElement>(RetrieveSeverityAttribute);
        
        /// <summary>
        /// The backing field for the Category property
        /// </summary>
        private string _category;
        
        private static Lazy<ITypedElement> _categoryAttribute = new Lazy<ITypedElement>(RetrieveCategoryAttribute);
        
        /// <summary>
        /// The backing field for the Reason property
        /// </summary>
        private string _reason;
        
        private static Lazy<ITypedElement> _reasonAttribute = new Lazy<ITypedElement>(RetrieveReasonAttribute);
        
        /// <summary>
        /// The backing field for the CreatedDateTime property
        /// </summary>
        private DateTime _createdDateTime;
        
        private static Lazy<ITypedElement> _createdDateTimeAttribute = new Lazy<ITypedElement>(RetrieveCreatedDateTimeAttribute);
        
        private static Lazy<ITypedElement> _marketFactorsReference = new Lazy<ITypedElement>(RetrieveMarketFactorsReference);
        
        /// <summary>
        /// The backing field for the MarketFactors property
        /// </summary>
        private ObservableAssociationOrderedSet<IMarketFactors> _marketFactors;
        
        private static Lazy<ITypedElement> _assetsReference = new Lazy<ITypedElement>(RetrieveAssetsReference);
        
        /// <summary>
        /// The backing field for the Assets property
        /// </summary>
        private ActivityRecordAssetsCollection _assets;
        
        private static Lazy<ITypedElement> _scheduledEventReference = new Lazy<ITypedElement>(RetrieveScheduledEventReference);
        
        /// <summary>
        /// The backing field for the ScheduledEvent property
        /// </summary>
        private IScheduledEvent _scheduledEvent;
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static Lazy<ITypedElement> _documentsReference = new Lazy<ITypedElement>(RetrieveDocumentsReference);
        
        /// <summary>
        /// The backing field for the Documents property
        /// </summary>
        private ActivityRecordDocumentsCollection _documents;
        
        private static Lazy<ITypedElement> _organisationsReference = new Lazy<ITypedElement>(RetrieveOrganisationsReference);
        
        /// <summary>
        /// The backing field for the Organisations property
        /// </summary>
        private ActivityRecordOrganisationsCollection _organisations;
        
        private static Lazy<ITypedElement> _erpPersonsReference = new Lazy<ITypedElement>(RetrieveErpPersonsReference);
        
        /// <summary>
        /// The backing field for the ErpPersons property
        /// </summary>
        private ActivityRecordErpPersonsCollection _erpPersons;
        
        private static IClass _classInstance;
        
        public ActivityRecord()
        {
            this._marketFactors = new ObservableAssociationOrderedSet<IMarketFactors>();
            this._marketFactors.CollectionChanging += this.MarketFactorsCollectionChanging;
            this._marketFactors.CollectionChanged += this.MarketFactorsCollectionChanged;
            this._assets = new ActivityRecordAssetsCollection(this);
            this._assets.CollectionChanging += this.AssetsCollectionChanging;
            this._assets.CollectionChanged += this.AssetsCollectionChanged;
            this._documents = new ActivityRecordDocumentsCollection(this);
            this._documents.CollectionChanging += this.DocumentsCollectionChanging;
            this._documents.CollectionChanged += this.DocumentsCollectionChanged;
            this._organisations = new ActivityRecordOrganisationsCollection(this);
            this._organisations.CollectionChanging += this.OrganisationsCollectionChanging;
            this._organisations.CollectionChanged += this.OrganisationsCollectionChanged;
            this._erpPersons = new ActivityRecordErpPersonsCollection(this);
            this._erpPersons.CollectionChanging += this.ErpPersonsCollectionChanging;
            this._erpPersons.CollectionChanged += this.ErpPersonsCollectionChanged;
        }
        
        /// <summary>
        /// The severity property
        /// </summary>
        [XmlElementNameAttribute("severity")]
        [XmlAttributeAttribute(true)]
        public virtual string Severity
        {
            get
            {
                return this._severity;
            }
            set
            {
                if ((this._severity != value))
                {
                    string old = this._severity;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSeverityChanging(e);
                    this.OnPropertyChanging("Severity", e, _severityAttribute);
                    this._severity = value;
                    this.OnSeverityChanged(e);
                    this.OnPropertyChanged("Severity", e, _severityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The category property
        /// </summary>
        [XmlElementNameAttribute("category")]
        [XmlAttributeAttribute(true)]
        public virtual string Category
        {
            get
            {
                return this._category;
            }
            set
            {
                if ((this._category != value))
                {
                    string old = this._category;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCategoryChanging(e);
                    this.OnPropertyChanging("Category", e, _categoryAttribute);
                    this._category = value;
                    this.OnCategoryChanged(e);
                    this.OnPropertyChanged("Category", e, _categoryAttribute);
                }
            }
        }
        
        /// <summary>
        /// The reason property
        /// </summary>
        [XmlElementNameAttribute("reason")]
        [XmlAttributeAttribute(true)]
        public virtual string Reason
        {
            get
            {
                return this._reason;
            }
            set
            {
                if ((this._reason != value))
                {
                    string old = this._reason;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReasonChanging(e);
                    this.OnPropertyChanging("Reason", e, _reasonAttribute);
                    this._reason = value;
                    this.OnReasonChanged(e);
                    this.OnPropertyChanged("Reason", e, _reasonAttribute);
                }
            }
        }
        
        /// <summary>
        /// The createdDateTime property
        /// </summary>
        [XmlElementNameAttribute("createdDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime CreatedDateTime
        {
            get
            {
                return this._createdDateTime;
            }
            set
            {
                if ((this._createdDateTime != value))
                {
                    DateTime old = this._createdDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCreatedDateTimeChanging(e);
                    this.OnPropertyChanging("CreatedDateTime", e, _createdDateTimeAttribute);
                    this._createdDateTime = value;
                    this.OnCreatedDateTimeChanged(e);
                    this.OnPropertyChanged("CreatedDateTime", e, _createdDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The MarketFactors property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMarketFactors> MarketFactors
        {
            get
            {
                return this._marketFactors;
            }
        }
        
        /// <summary>
        /// The Assets property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ActivityRecords")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAsset> Assets
        {
            get
            {
                return this._assets;
            }
        }
        
        /// <summary>
        /// The ScheduledEvent property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ActivityRecord")]
        public virtual IScheduledEvent ScheduledEvent
        {
            get
            {
                return this._scheduledEvent;
            }
            set
            {
                if ((this._scheduledEvent != value))
                {
                    IScheduledEvent old = this._scheduledEvent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnScheduledEventChanging(e);
                    this.OnPropertyChanging("ScheduledEvent", e, _scheduledEventReference);
                    this._scheduledEvent = value;
                    if ((old != null))
                    {
                        old.ActivityRecord = null;
                        old.Deleted -= this.OnResetScheduledEvent;
                    }
                    if ((value != null))
                    {
                        value.ActivityRecord = this;
                        value.Deleted += this.OnResetScheduledEvent;
                    }
                    this.OnScheduledEventChanged(e);
                    this.OnPropertyChanged("ScheduledEvent", e, _scheduledEventReference);
                }
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// The Documents property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ActivityRecords")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDocument> Documents
        {
            get
            {
                return this._documents;
            }
        }
        
        /// <summary>
        /// The Organisations property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ActivityRecords")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpOrganisation> Organisations
        {
            get
            {
                return this._organisations;
            }
        }
        
        /// <summary>
        /// The ErpPersons property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ActivityRecords")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpPerson> ErpPersons
        {
            get
            {
                return this._erpPersons;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ActivityRecordReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/ActivityRecord")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Severity property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SeverityChanging;
        
        /// <summary>
        /// Gets fired when the Severity property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SeverityChanged;
        
        /// <summary>
        /// Gets fired before the Category property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CategoryChanging;
        
        /// <summary>
        /// Gets fired when the Category property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CategoryChanged;
        
        /// <summary>
        /// Gets fired before the Reason property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReasonChanging;
        
        /// <summary>
        /// Gets fired when the Reason property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReasonChanged;
        
        /// <summary>
        /// Gets fired before the CreatedDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CreatedDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the CreatedDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CreatedDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the ScheduledEvent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ScheduledEventChanging;
        
        /// <summary>
        /// Gets fired when the ScheduledEvent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ScheduledEventChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        private static ITypedElement RetrieveSeverityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ActivityRecord.ClassInstance)).Resolve("severity")));
        }
        
        /// <summary>
        /// Raises the SeverityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSeverityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SeverityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SeverityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSeverityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SeverityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCategoryAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ActivityRecord.ClassInstance)).Resolve("category")));
        }
        
        /// <summary>
        /// Raises the CategoryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCategoryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CategoryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CategoryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCategoryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CategoryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReasonAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ActivityRecord.ClassInstance)).Resolve("reason")));
        }
        
        /// <summary>
        /// Raises the ReasonChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReasonChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReasonChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReasonChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReasonChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReasonChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCreatedDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ActivityRecord.ClassInstance)).Resolve("createdDateTime")));
        }
        
        /// <summary>
        /// Raises the CreatedDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCreatedDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CreatedDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CreatedDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCreatedDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CreatedDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMarketFactorsReference()
        {
            return ((ITypedElement)(((ModelElement)(ActivityRecord.ClassInstance)).Resolve("MarketFactors")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MarketFactors property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MarketFactorsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("MarketFactors", e, _marketFactorsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MarketFactors property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MarketFactorsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MarketFactors", e, _marketFactorsReference);
        }
        
        private static ITypedElement RetrieveAssetsReference()
        {
            return ((ITypedElement)(((ModelElement)(ActivityRecord.ClassInstance)).Resolve("Assets")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Assets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Assets", e, _assetsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Assets property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Assets", e, _assetsReference);
        }
        
        private static ITypedElement RetrieveScheduledEventReference()
        {
            return ((ITypedElement)(((ModelElement)(ActivityRecord.ClassInstance)).Resolve("ScheduledEvent")));
        }
        
        /// <summary>
        /// Raises the ScheduledEventChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScheduledEventChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ScheduledEventChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ScheduledEventChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnScheduledEventChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ScheduledEventChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ScheduledEvent property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetScheduledEvent(object sender, System.EventArgs eventArgs)
        {
            this.ScheduledEvent = null;
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(ActivityRecord.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        private static ITypedElement RetrieveDocumentsReference()
        {
            return ((ITypedElement)(((ModelElement)(ActivityRecord.ClassInstance)).Resolve("Documents")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Documents property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DocumentsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Documents", e, _documentsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Documents property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DocumentsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Documents", e, _documentsReference);
        }
        
        private static ITypedElement RetrieveOrganisationsReference()
        {
            return ((ITypedElement)(((ModelElement)(ActivityRecord.ClassInstance)).Resolve("Organisations")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Organisations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OrganisationsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Organisations", e, _organisationsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Organisations property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void OrganisationsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Organisations", e, _organisationsReference);
        }
        
        private static ITypedElement RetrieveErpPersonsReference()
        {
            return ((ITypedElement)(((ModelElement)(ActivityRecord.ClassInstance)).Resolve("ErpPersons")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpPersons property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPersonsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ErpPersons", e, _erpPersonsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpPersons property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpPersonsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpPersons", e, _erpPersonsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SEVERITY"))
            {
                return this.Severity;
            }
            if ((attribute == "CATEGORY"))
            {
                return this.Category;
            }
            if ((attribute == "REASON"))
            {
                return this.Reason;
            }
            if ((attribute == "CREATEDDATETIME"))
            {
                return this.CreatedDateTime;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "MARKETFACTORS"))
            {
                return this._marketFactors;
            }
            if ((feature == "ASSETS"))
            {
                return this._assets;
            }
            if ((feature == "DOCUMENTS"))
            {
                return this._documents;
            }
            if ((feature == "ORGANISATIONS"))
            {
                return this._organisations;
            }
            if ((feature == "ERPPERSONS"))
            {
                return this._erpPersons;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SCHEDULEDEVENT"))
            {
                this.ScheduledEvent = ((IScheduledEvent)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "SEVERITY"))
            {
                this.Severity = ((string)(value));
                return;
            }
            if ((feature == "CATEGORY"))
            {
                this.Category = ((string)(value));
                return;
            }
            if ((feature == "REASON"))
            {
                this.Reason = ((string)(value));
                return;
            }
            if ((feature == "CREATEDDATETIME"))
            {
                this.CreatedDateTime = ((DateTime)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ScheduledEvent"))
            {
                return new ScheduledEventProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ScheduledEvent"))
            {
                return new ScheduledEventProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Common/ActivityRecord")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ActivityRecord class
        /// </summary>
        public class ActivityRecordReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ActivityRecord _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ActivityRecordReferencedElementsCollection(ActivityRecord parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.MarketFactors.Count);
                    count = (count + this._parent.Assets.Count);
                    if ((this._parent.ScheduledEvent != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Documents.Count);
                    count = (count + this._parent.Organisations.Count);
                    count = (count + this._parent.ErpPersons.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.MarketFactors.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Assets.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ScheduledEventChanged += this.PropagateValueChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.Documents.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Organisations.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpPersons.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.MarketFactors.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Assets.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ScheduledEventChanged -= this.PropagateValueChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.Documents.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Organisations.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpPersons.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IMarketFactors marketFactorsCasted = item.As<IMarketFactors>();
                if ((marketFactorsCasted != null))
                {
                    this._parent.MarketFactors.Add(marketFactorsCasted);
                }
                IAsset assetsCasted = item.As<IAsset>();
                if ((assetsCasted != null))
                {
                    this._parent.Assets.Add(assetsCasted);
                }
                if ((this._parent.ScheduledEvent == null))
                {
                    IScheduledEvent scheduledEventCasted = item.As<IScheduledEvent>();
                    if ((scheduledEventCasted != null))
                    {
                        this._parent.ScheduledEvent = scheduledEventCasted;
                        return;
                    }
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                IDocument documentsCasted = item.As<IDocument>();
                if ((documentsCasted != null))
                {
                    this._parent.Documents.Add(documentsCasted);
                }
                IErpOrganisation organisationsCasted = item.As<IErpOrganisation>();
                if ((organisationsCasted != null))
                {
                    this._parent.Organisations.Add(organisationsCasted);
                }
                IErpPerson erpPersonsCasted = item.As<IErpPerson>();
                if ((erpPersonsCasted != null))
                {
                    this._parent.ErpPersons.Add(erpPersonsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.MarketFactors.Clear();
                this._parent.Assets.Clear();
                this._parent.ScheduledEvent = null;
                this._parent.Status = null;
                this._parent.Documents.Clear();
                this._parent.Organisations.Clear();
                this._parent.ErpPersons.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.MarketFactors.Contains(item))
                {
                    return true;
                }
                if (this._parent.Assets.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ScheduledEvent))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if (this._parent.Documents.Contains(item))
                {
                    return true;
                }
                if (this._parent.Organisations.Contains(item))
                {
                    return true;
                }
                if (this._parent.ErpPersons.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> marketFactorsEnumerator = this._parent.MarketFactors.GetEnumerator();
                try
                {
                    for (
                    ; marketFactorsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = marketFactorsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    marketFactorsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> assetsEnumerator = this._parent.Assets.GetEnumerator();
                try
                {
                    for (
                    ; assetsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = assetsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    assetsEnumerator.Dispose();
                }
                if ((this._parent.ScheduledEvent != null))
                {
                    array[arrayIndex] = this._parent.ScheduledEvent;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> documentsEnumerator = this._parent.Documents.GetEnumerator();
                try
                {
                    for (
                    ; documentsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = documentsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    documentsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> organisationsEnumerator = this._parent.Organisations.GetEnumerator();
                try
                {
                    for (
                    ; organisationsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = organisationsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    organisationsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> erpPersonsEnumerator = this._parent.ErpPersons.GetEnumerator();
                try
                {
                    for (
                    ; erpPersonsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpPersonsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpPersonsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IMarketFactors marketFactorsItem = item.As<IMarketFactors>();
                if (((marketFactorsItem != null) 
                            && this._parent.MarketFactors.Remove(marketFactorsItem)))
                {
                    return true;
                }
                IAsset assetItem = item.As<IAsset>();
                if (((assetItem != null) 
                            && this._parent.Assets.Remove(assetItem)))
                {
                    return true;
                }
                if ((this._parent.ScheduledEvent == item))
                {
                    this._parent.ScheduledEvent = null;
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                IDocument documentItem = item.As<IDocument>();
                if (((documentItem != null) 
                            && this._parent.Documents.Remove(documentItem)))
                {
                    return true;
                }
                IErpOrganisation erpOrganisationItem = item.As<IErpOrganisation>();
                if (((erpOrganisationItem != null) 
                            && this._parent.Organisations.Remove(erpOrganisationItem)))
                {
                    return true;
                }
                IErpPerson erpPersonItem = item.As<IErpPerson>();
                if (((erpPersonItem != null) 
                            && this._parent.ErpPersons.Remove(erpPersonItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.MarketFactors).Concat(this._parent.Assets).Concat(this._parent.ScheduledEvent).Concat(this._parent.Status).Concat(this._parent.Documents).Concat(this._parent.Organisations).Concat(this._parent.ErpPersons).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the severity property
        /// </summary>
        private sealed class SeverityProxy : ModelPropertyChange<IActivityRecord, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SeverityProxy(IActivityRecord modelElement) : 
                    base(modelElement, "severity")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Severity;
                }
                set
                {
                    this.ModelElement.Severity = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the category property
        /// </summary>
        private sealed class CategoryProxy : ModelPropertyChange<IActivityRecord, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CategoryProxy(IActivityRecord modelElement) : 
                    base(modelElement, "category")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Category;
                }
                set
                {
                    this.ModelElement.Category = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the reason property
        /// </summary>
        private sealed class ReasonProxy : ModelPropertyChange<IActivityRecord, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReasonProxy(IActivityRecord modelElement) : 
                    base(modelElement, "reason")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Reason;
                }
                set
                {
                    this.ModelElement.Reason = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the createdDateTime property
        /// </summary>
        private sealed class CreatedDateTimeProxy : ModelPropertyChange<IActivityRecord, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CreatedDateTimeProxy(IActivityRecord modelElement) : 
                    base(modelElement, "createdDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.CreatedDateTime;
                }
                set
                {
                    this.ModelElement.CreatedDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ScheduledEvent property
        /// </summary>
        private sealed class ScheduledEventProxy : ModelPropertyChange<IActivityRecord, IScheduledEvent>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ScheduledEventProxy(IActivityRecord modelElement) : 
                    base(modelElement, "ScheduledEvent")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IScheduledEvent Value
            {
                get
                {
                    return this.ModelElement.ScheduledEvent;
                }
                set
                {
                    this.ModelElement.ScheduledEvent = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IActivityRecord, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IActivityRecord modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
    }
}

