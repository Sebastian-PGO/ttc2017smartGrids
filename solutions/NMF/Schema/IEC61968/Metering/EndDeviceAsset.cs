using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.Metering
{
    
    
    /// <summary>
    /// The default implementation of the EndDeviceAsset class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Metering")]
    [XmlNamespacePrefixAttribute("cimMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/EndDeviceAsset")]
    [DebuggerDisplayAttribute("EndDeviceAsset {UUID}")]
    public partial class EndDeviceAsset : AssetContainer, IEndDeviceAsset, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Disconnect property
        /// </summary>
        private bool _disconnect;
        
        private static Lazy<ITypedElement> _disconnectAttribute = new Lazy<ITypedElement>(RetrieveDisconnectAttribute);
        
        /// <summary>
        /// The backing field for the RelayCapable property
        /// </summary>
        private bool _relayCapable;
        
        private static Lazy<ITypedElement> _relayCapableAttribute = new Lazy<ITypedElement>(RetrieveRelayCapableAttribute);
        
        /// <summary>
        /// The backing field for the Metrology property
        /// </summary>
        private bool _metrology;
        
        private static Lazy<ITypedElement> _metrologyAttribute = new Lazy<ITypedElement>(RetrieveMetrologyAttribute);
        
        /// <summary>
        /// The backing field for the RatedVoltage property
        /// </summary>
        private float _ratedVoltage;
        
        private static Lazy<ITypedElement> _ratedVoltageAttribute = new Lazy<ITypedElement>(RetrieveRatedVoltageAttribute);
        
        /// <summary>
        /// The backing field for the RatedCurrent property
        /// </summary>
        private float _ratedCurrent;
        
        private static Lazy<ITypedElement> _ratedCurrentAttribute = new Lazy<ITypedElement>(RetrieveRatedCurrentAttribute);
        
        /// <summary>
        /// The backing field for the TimeZoneOffset property
        /// </summary>
        private float _timeZoneOffset;
        
        private static Lazy<ITypedElement> _timeZoneOffsetAttribute = new Lazy<ITypedElement>(RetrieveTimeZoneOffsetAttribute);
        
        /// <summary>
        /// The backing field for the ReadRequest property
        /// </summary>
        private bool _readRequest;
        
        private static Lazy<ITypedElement> _readRequestAttribute = new Lazy<ITypedElement>(RetrieveReadRequestAttribute);
        
        /// <summary>
        /// The backing field for the DstEnabled property
        /// </summary>
        private bool _dstEnabled;
        
        private static Lazy<ITypedElement> _dstEnabledAttribute = new Lazy<ITypedElement>(RetrieveDstEnabledAttribute);
        
        /// <summary>
        /// The backing field for the PhaseCount property
        /// </summary>
        private int _phaseCount;
        
        private static Lazy<ITypedElement> _phaseCountAttribute = new Lazy<ITypedElement>(RetrievePhaseCountAttribute);
        
        /// <summary>
        /// The backing field for the ReverseFlowHandling property
        /// </summary>
        private bool _reverseFlowHandling;
        
        private static Lazy<ITypedElement> _reverseFlowHandlingAttribute = new Lazy<ITypedElement>(RetrieveReverseFlowHandlingAttribute);
        
        /// <summary>
        /// The backing field for the DemandResponse property
        /// </summary>
        private bool _demandResponse;
        
        private static Lazy<ITypedElement> _demandResponseAttribute = new Lazy<ITypedElement>(RetrieveDemandResponseAttribute);
        
        /// <summary>
        /// The backing field for the AmrSystem property
        /// </summary>
        private string _amrSystem;
        
        private static Lazy<ITypedElement> _amrSystemAttribute = new Lazy<ITypedElement>(RetrieveAmrSystemAttribute);
        
        /// <summary>
        /// The backing field for the LoadControl property
        /// </summary>
        private bool _loadControl;
        
        private static Lazy<ITypedElement> _loadControlAttribute = new Lazy<ITypedElement>(RetrieveLoadControlAttribute);
        
        /// <summary>
        /// The backing field for the OutageReport property
        /// </summary>
        private bool _outageReport;
        
        private static Lazy<ITypedElement> _outageReportAttribute = new Lazy<ITypedElement>(RetrieveOutageReportAttribute);
        
        private static Lazy<ITypedElement> _readingsReference = new Lazy<ITypedElement>(RetrieveReadingsReference);
        
        /// <summary>
        /// The backing field for the Readings property
        /// </summary>
        private EndDeviceAssetReadingsCollection _readings;
        
        private static Lazy<ITypedElement> _serviceDeliveryPointReference = new Lazy<ITypedElement>(RetrieveServiceDeliveryPointReference);
        
        /// <summary>
        /// The backing field for the ServiceDeliveryPoint property
        /// </summary>
        private IServiceDeliveryPoint _serviceDeliveryPoint;
        
        private static Lazy<ITypedElement> _serviceLocationReference = new Lazy<ITypedElement>(RetrieveServiceLocationReference);
        
        /// <summary>
        /// The backing field for the ServiceLocation property
        /// </summary>
        private IServiceLocation _serviceLocation;
        
        private static Lazy<ITypedElement> _endDeviceControlsReference = new Lazy<ITypedElement>(RetrieveEndDeviceControlsReference);
        
        /// <summary>
        /// The backing field for the EndDeviceControls property
        /// </summary>
        private EndDeviceAssetEndDeviceControlsCollection _endDeviceControls;
        
        private static Lazy<ITypedElement> _endDeviceModelReference = new Lazy<ITypedElement>(RetrieveEndDeviceModelReference);
        
        /// <summary>
        /// The backing field for the EndDeviceModel property
        /// </summary>
        private IEndDeviceModel _endDeviceModel;
        
        private static Lazy<ITypedElement> _deviceFunctionsReference = new Lazy<ITypedElement>(RetrieveDeviceFunctionsReference);
        
        /// <summary>
        /// The backing field for the DeviceFunctions property
        /// </summary>
        private EndDeviceAssetDeviceFunctionsCollection _deviceFunctions;
        
        private static Lazy<ITypedElement> _customerReference = new Lazy<ITypedElement>(RetrieveCustomerReference);
        
        /// <summary>
        /// The backing field for the Customer property
        /// </summary>
        private ICustomer _customer;
        
        private static Lazy<ITypedElement> _endDeviceGroupsReference = new Lazy<ITypedElement>(RetrieveEndDeviceGroupsReference);
        
        /// <summary>
        /// The backing field for the EndDeviceGroups property
        /// </summary>
        private EndDeviceAssetEndDeviceGroupsCollection _endDeviceGroups;
        
        private static IClass _classInstance;
        
        public EndDeviceAsset()
        {
            this._readings = new EndDeviceAssetReadingsCollection(this);
            this._readings.CollectionChanging += this.ReadingsCollectionChanging;
            this._readings.CollectionChanged += this.ReadingsCollectionChanged;
            this._endDeviceControls = new EndDeviceAssetEndDeviceControlsCollection(this);
            this._endDeviceControls.CollectionChanging += this.EndDeviceControlsCollectionChanging;
            this._endDeviceControls.CollectionChanged += this.EndDeviceControlsCollectionChanged;
            this._deviceFunctions = new EndDeviceAssetDeviceFunctionsCollection(this);
            this._deviceFunctions.CollectionChanging += this.DeviceFunctionsCollectionChanging;
            this._deviceFunctions.CollectionChanged += this.DeviceFunctionsCollectionChanged;
            this._endDeviceGroups = new EndDeviceAssetEndDeviceGroupsCollection(this);
            this._endDeviceGroups.CollectionChanging += this.EndDeviceGroupsCollectionChanging;
            this._endDeviceGroups.CollectionChanged += this.EndDeviceGroupsCollectionChanged;
        }
        
        /// <summary>
        /// The disconnect property
        /// </summary>
        [XmlElementNameAttribute("disconnect")]
        [XmlAttributeAttribute(true)]
        public virtual bool Disconnect
        {
            get
            {
                return this._disconnect;
            }
            set
            {
                if ((this._disconnect != value))
                {
                    bool old = this._disconnect;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDisconnectChanging(e);
                    this.OnPropertyChanging("Disconnect", e, _disconnectAttribute);
                    this._disconnect = value;
                    this.OnDisconnectChanged(e);
                    this.OnPropertyChanged("Disconnect", e, _disconnectAttribute);
                }
            }
        }
        
        /// <summary>
        /// The relayCapable property
        /// </summary>
        [XmlElementNameAttribute("relayCapable")]
        [XmlAttributeAttribute(true)]
        public virtual bool RelayCapable
        {
            get
            {
                return this._relayCapable;
            }
            set
            {
                if ((this._relayCapable != value))
                {
                    bool old = this._relayCapable;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRelayCapableChanging(e);
                    this.OnPropertyChanging("RelayCapable", e, _relayCapableAttribute);
                    this._relayCapable = value;
                    this.OnRelayCapableChanged(e);
                    this.OnPropertyChanged("RelayCapable", e, _relayCapableAttribute);
                }
            }
        }
        
        /// <summary>
        /// The metrology property
        /// </summary>
        [XmlElementNameAttribute("metrology")]
        [XmlAttributeAttribute(true)]
        public virtual bool Metrology
        {
            get
            {
                return this._metrology;
            }
            set
            {
                if ((this._metrology != value))
                {
                    bool old = this._metrology;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMetrologyChanging(e);
                    this.OnPropertyChanging("Metrology", e, _metrologyAttribute);
                    this._metrology = value;
                    this.OnMetrologyChanged(e);
                    this.OnPropertyChanged("Metrology", e, _metrologyAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ratedVoltage property
        /// </summary>
        [XmlElementNameAttribute("ratedVoltage")]
        [XmlAttributeAttribute(true)]
        public virtual float RatedVoltage
        {
            get
            {
                return this._ratedVoltage;
            }
            set
            {
                if ((this._ratedVoltage != value))
                {
                    float old = this._ratedVoltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatedVoltageChanging(e);
                    this.OnPropertyChanging("RatedVoltage", e, _ratedVoltageAttribute);
                    this._ratedVoltage = value;
                    this.OnRatedVoltageChanged(e);
                    this.OnPropertyChanged("RatedVoltage", e, _ratedVoltageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ratedCurrent property
        /// </summary>
        [XmlElementNameAttribute("ratedCurrent")]
        [XmlAttributeAttribute(true)]
        public virtual float RatedCurrent
        {
            get
            {
                return this._ratedCurrent;
            }
            set
            {
                if ((this._ratedCurrent != value))
                {
                    float old = this._ratedCurrent;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRatedCurrentChanging(e);
                    this.OnPropertyChanging("RatedCurrent", e, _ratedCurrentAttribute);
                    this._ratedCurrent = value;
                    this.OnRatedCurrentChanged(e);
                    this.OnPropertyChanged("RatedCurrent", e, _ratedCurrentAttribute);
                }
            }
        }
        
        /// <summary>
        /// The timeZoneOffset property
        /// </summary>
        [XmlElementNameAttribute("timeZoneOffset")]
        [XmlAttributeAttribute(true)]
        public virtual float TimeZoneOffset
        {
            get
            {
                return this._timeZoneOffset;
            }
            set
            {
                if ((this._timeZoneOffset != value))
                {
                    float old = this._timeZoneOffset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeZoneOffsetChanging(e);
                    this.OnPropertyChanging("TimeZoneOffset", e, _timeZoneOffsetAttribute);
                    this._timeZoneOffset = value;
                    this.OnTimeZoneOffsetChanged(e);
                    this.OnPropertyChanged("TimeZoneOffset", e, _timeZoneOffsetAttribute);
                }
            }
        }
        
        /// <summary>
        /// The readRequest property
        /// </summary>
        [XmlElementNameAttribute("readRequest")]
        [XmlAttributeAttribute(true)]
        public virtual bool ReadRequest
        {
            get
            {
                return this._readRequest;
            }
            set
            {
                if ((this._readRequest != value))
                {
                    bool old = this._readRequest;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReadRequestChanging(e);
                    this.OnPropertyChanging("ReadRequest", e, _readRequestAttribute);
                    this._readRequest = value;
                    this.OnReadRequestChanged(e);
                    this.OnPropertyChanged("ReadRequest", e, _readRequestAttribute);
                }
            }
        }
        
        /// <summary>
        /// The dstEnabled property
        /// </summary>
        [XmlElementNameAttribute("dstEnabled")]
        [XmlAttributeAttribute(true)]
        public virtual bool DstEnabled
        {
            get
            {
                return this._dstEnabled;
            }
            set
            {
                if ((this._dstEnabled != value))
                {
                    bool old = this._dstEnabled;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDstEnabledChanging(e);
                    this.OnPropertyChanging("DstEnabled", e, _dstEnabledAttribute);
                    this._dstEnabled = value;
                    this.OnDstEnabledChanged(e);
                    this.OnPropertyChanged("DstEnabled", e, _dstEnabledAttribute);
                }
            }
        }
        
        /// <summary>
        /// The phaseCount property
        /// </summary>
        [XmlElementNameAttribute("phaseCount")]
        [XmlAttributeAttribute(true)]
        public virtual int PhaseCount
        {
            get
            {
                return this._phaseCount;
            }
            set
            {
                if ((this._phaseCount != value))
                {
                    int old = this._phaseCount;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhaseCountChanging(e);
                    this.OnPropertyChanging("PhaseCount", e, _phaseCountAttribute);
                    this._phaseCount = value;
                    this.OnPhaseCountChanged(e);
                    this.OnPropertyChanged("PhaseCount", e, _phaseCountAttribute);
                }
            }
        }
        
        /// <summary>
        /// The reverseFlowHandling property
        /// </summary>
        [XmlElementNameAttribute("reverseFlowHandling")]
        [XmlAttributeAttribute(true)]
        public virtual bool ReverseFlowHandling
        {
            get
            {
                return this._reverseFlowHandling;
            }
            set
            {
                if ((this._reverseFlowHandling != value))
                {
                    bool old = this._reverseFlowHandling;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReverseFlowHandlingChanging(e);
                    this.OnPropertyChanging("ReverseFlowHandling", e, _reverseFlowHandlingAttribute);
                    this._reverseFlowHandling = value;
                    this.OnReverseFlowHandlingChanged(e);
                    this.OnPropertyChanged("ReverseFlowHandling", e, _reverseFlowHandlingAttribute);
                }
            }
        }
        
        /// <summary>
        /// The demandResponse property
        /// </summary>
        [XmlElementNameAttribute("demandResponse")]
        [XmlAttributeAttribute(true)]
        public virtual bool DemandResponse
        {
            get
            {
                return this._demandResponse;
            }
            set
            {
                if ((this._demandResponse != value))
                {
                    bool old = this._demandResponse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDemandResponseChanging(e);
                    this.OnPropertyChanging("DemandResponse", e, _demandResponseAttribute);
                    this._demandResponse = value;
                    this.OnDemandResponseChanged(e);
                    this.OnPropertyChanged("DemandResponse", e, _demandResponseAttribute);
                }
            }
        }
        
        /// <summary>
        /// The amrSystem property
        /// </summary>
        [XmlElementNameAttribute("amrSystem")]
        [XmlAttributeAttribute(true)]
        public virtual string AmrSystem
        {
            get
            {
                return this._amrSystem;
            }
            set
            {
                if ((this._amrSystem != value))
                {
                    string old = this._amrSystem;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAmrSystemChanging(e);
                    this.OnPropertyChanging("AmrSystem", e, _amrSystemAttribute);
                    this._amrSystem = value;
                    this.OnAmrSystemChanged(e);
                    this.OnPropertyChanged("AmrSystem", e, _amrSystemAttribute);
                }
            }
        }
        
        /// <summary>
        /// The loadControl property
        /// </summary>
        [XmlElementNameAttribute("loadControl")]
        [XmlAttributeAttribute(true)]
        public virtual bool LoadControl
        {
            get
            {
                return this._loadControl;
            }
            set
            {
                if ((this._loadControl != value))
                {
                    bool old = this._loadControl;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLoadControlChanging(e);
                    this.OnPropertyChanging("LoadControl", e, _loadControlAttribute);
                    this._loadControl = value;
                    this.OnLoadControlChanged(e);
                    this.OnPropertyChanged("LoadControl", e, _loadControlAttribute);
                }
            }
        }
        
        /// <summary>
        /// The outageReport property
        /// </summary>
        [XmlElementNameAttribute("outageReport")]
        [XmlAttributeAttribute(true)]
        public virtual bool OutageReport
        {
            get
            {
                return this._outageReport;
            }
            set
            {
                if ((this._outageReport != value))
                {
                    bool old = this._outageReport;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOutageReportChanging(e);
                    this.OnPropertyChanging("OutageReport", e, _outageReportAttribute);
                    this._outageReport = value;
                    this.OnOutageReportChanged(e);
                    this.OnPropertyChanged("OutageReport", e, _outageReportAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Readings property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EndDeviceAsset")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IReading> Readings
        {
            get
            {
                return this._readings;
            }
        }
        
        /// <summary>
        /// The ServiceDeliveryPoint property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EndDeviceAssets")]
        public virtual IServiceDeliveryPoint ServiceDeliveryPoint
        {
            get
            {
                return this._serviceDeliveryPoint;
            }
            set
            {
                if ((this._serviceDeliveryPoint != value))
                {
                    IServiceDeliveryPoint old = this._serviceDeliveryPoint;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnServiceDeliveryPointChanging(e);
                    this.OnPropertyChanging("ServiceDeliveryPoint", e, _serviceDeliveryPointReference);
                    this._serviceDeliveryPoint = value;
                    if ((old != null))
                    {
                        old.EndDeviceAssets.Remove(this);
                        old.Deleted -= this.OnResetServiceDeliveryPoint;
                    }
                    if ((value != null))
                    {
                        value.EndDeviceAssets.Add(this);
                        value.Deleted += this.OnResetServiceDeliveryPoint;
                    }
                    this.OnServiceDeliveryPointChanged(e);
                    this.OnPropertyChanged("ServiceDeliveryPoint", e, _serviceDeliveryPointReference);
                }
            }
        }
        
        /// <summary>
        /// The ServiceLocation property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EndDeviceAssets")]
        public virtual IServiceLocation ServiceLocation
        {
            get
            {
                return this._serviceLocation;
            }
            set
            {
                if ((this._serviceLocation != value))
                {
                    IServiceLocation old = this._serviceLocation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnServiceLocationChanging(e);
                    this.OnPropertyChanging("ServiceLocation", e, _serviceLocationReference);
                    this._serviceLocation = value;
                    if ((old != null))
                    {
                        old.EndDeviceAssets.Remove(this);
                        old.Deleted -= this.OnResetServiceLocation;
                    }
                    if ((value != null))
                    {
                        value.EndDeviceAssets.Add(this);
                        value.Deleted += this.OnResetServiceLocation;
                    }
                    this.OnServiceLocationChanged(e);
                    this.OnPropertyChanged("ServiceLocation", e, _serviceLocationReference);
                }
            }
        }
        
        /// <summary>
        /// The EndDeviceControls property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EndDeviceAsset")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEndDeviceControl> EndDeviceControls
        {
            get
            {
                return this._endDeviceControls;
            }
        }
        
        /// <summary>
        /// The EndDeviceModel property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EndDeviceAssets")]
        public virtual IEndDeviceModel EndDeviceModel
        {
            get
            {
                return this._endDeviceModel;
            }
            set
            {
                if ((this._endDeviceModel != value))
                {
                    IEndDeviceModel old = this._endDeviceModel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEndDeviceModelChanging(e);
                    this.OnPropertyChanging("EndDeviceModel", e, _endDeviceModelReference);
                    this._endDeviceModel = value;
                    if ((old != null))
                    {
                        old.EndDeviceAssets.Remove(this);
                        old.Deleted -= this.OnResetEndDeviceModel;
                    }
                    if ((value != null))
                    {
                        value.EndDeviceAssets.Add(this);
                        value.Deleted += this.OnResetEndDeviceModel;
                    }
                    this.OnEndDeviceModelChanged(e);
                    this.OnPropertyChanged("EndDeviceModel", e, _endDeviceModelReference);
                }
            }
        }
        
        /// <summary>
        /// The DeviceFunctions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EndDeviceAsset")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDeviceFunction> DeviceFunctions
        {
            get
            {
                return this._deviceFunctions;
            }
        }
        
        /// <summary>
        /// The Customer property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EndDeviceAssets")]
        public virtual ICustomer Customer
        {
            get
            {
                return this._customer;
            }
            set
            {
                if ((this._customer != value))
                {
                    ICustomer old = this._customer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCustomerChanging(e);
                    this.OnPropertyChanging("Customer", e, _customerReference);
                    this._customer = value;
                    if ((old != null))
                    {
                        old.EndDeviceAssets.Remove(this);
                        old.Deleted -= this.OnResetCustomer;
                    }
                    if ((value != null))
                    {
                        value.EndDeviceAssets.Add(this);
                        value.Deleted += this.OnResetCustomer;
                    }
                    this.OnCustomerChanged(e);
                    this.OnPropertyChanged("Customer", e, _customerReference);
                }
            }
        }
        
        /// <summary>
        /// The EndDeviceGroups property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("EndDeviceAssets")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEndDeviceGroup> EndDeviceGroups
        {
            get
            {
                return this._endDeviceGroups;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new EndDeviceAssetReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/EndDeviceAsset")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Disconnect property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DisconnectChanging;
        
        /// <summary>
        /// Gets fired when the Disconnect property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DisconnectChanged;
        
        /// <summary>
        /// Gets fired before the RelayCapable property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RelayCapableChanging;
        
        /// <summary>
        /// Gets fired when the RelayCapable property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RelayCapableChanged;
        
        /// <summary>
        /// Gets fired before the Metrology property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MetrologyChanging;
        
        /// <summary>
        /// Gets fired when the Metrology property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MetrologyChanged;
        
        /// <summary>
        /// Gets fired before the RatedVoltage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedVoltageChanging;
        
        /// <summary>
        /// Gets fired when the RatedVoltage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedVoltageChanged;
        
        /// <summary>
        /// Gets fired before the RatedCurrent property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedCurrentChanging;
        
        /// <summary>
        /// Gets fired when the RatedCurrent property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RatedCurrentChanged;
        
        /// <summary>
        /// Gets fired before the TimeZoneOffset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeZoneOffsetChanging;
        
        /// <summary>
        /// Gets fired when the TimeZoneOffset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeZoneOffsetChanged;
        
        /// <summary>
        /// Gets fired before the ReadRequest property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReadRequestChanging;
        
        /// <summary>
        /// Gets fired when the ReadRequest property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReadRequestChanged;
        
        /// <summary>
        /// Gets fired before the DstEnabled property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DstEnabledChanging;
        
        /// <summary>
        /// Gets fired when the DstEnabled property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DstEnabledChanged;
        
        /// <summary>
        /// Gets fired before the PhaseCount property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseCountChanging;
        
        /// <summary>
        /// Gets fired when the PhaseCount property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseCountChanged;
        
        /// <summary>
        /// Gets fired before the ReverseFlowHandling property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReverseFlowHandlingChanging;
        
        /// <summary>
        /// Gets fired when the ReverseFlowHandling property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReverseFlowHandlingChanged;
        
        /// <summary>
        /// Gets fired before the DemandResponse property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DemandResponseChanging;
        
        /// <summary>
        /// Gets fired when the DemandResponse property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DemandResponseChanged;
        
        /// <summary>
        /// Gets fired before the AmrSystem property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmrSystemChanging;
        
        /// <summary>
        /// Gets fired when the AmrSystem property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AmrSystemChanged;
        
        /// <summary>
        /// Gets fired before the LoadControl property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoadControlChanging;
        
        /// <summary>
        /// Gets fired when the LoadControl property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LoadControlChanged;
        
        /// <summary>
        /// Gets fired before the OutageReport property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OutageReportChanging;
        
        /// <summary>
        /// Gets fired when the OutageReport property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OutageReportChanged;
        
        /// <summary>
        /// Gets fired before the ServiceDeliveryPoint property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceDeliveryPointChanging;
        
        /// <summary>
        /// Gets fired when the ServiceDeliveryPoint property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceDeliveryPointChanged;
        
        /// <summary>
        /// Gets fired before the ServiceLocation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceLocationChanging;
        
        /// <summary>
        /// Gets fired when the ServiceLocation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceLocationChanged;
        
        /// <summary>
        /// Gets fired before the EndDeviceModel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EndDeviceModelChanging;
        
        /// <summary>
        /// Gets fired when the EndDeviceModel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EndDeviceModelChanged;
        
        /// <summary>
        /// Gets fired before the Customer property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerChanging;
        
        /// <summary>
        /// Gets fired when the Customer property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerChanged;
        
        private static ITypedElement RetrieveDisconnectAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EndDeviceAsset.ClassInstance)).Resolve("disconnect")));
        }
        
        /// <summary>
        /// Raises the DisconnectChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDisconnectChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DisconnectChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DisconnectChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDisconnectChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DisconnectChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRelayCapableAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EndDeviceAsset.ClassInstance)).Resolve("relayCapable")));
        }
        
        /// <summary>
        /// Raises the RelayCapableChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRelayCapableChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RelayCapableChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RelayCapableChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRelayCapableChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RelayCapableChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMetrologyAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EndDeviceAsset.ClassInstance)).Resolve("metrology")));
        }
        
        /// <summary>
        /// Raises the MetrologyChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMetrologyChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MetrologyChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MetrologyChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMetrologyChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MetrologyChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRatedVoltageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EndDeviceAsset.ClassInstance)).Resolve("ratedVoltage")));
        }
        
        /// <summary>
        /// Raises the RatedVoltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedVoltageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedVoltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedVoltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedVoltageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedVoltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRatedCurrentAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EndDeviceAsset.ClassInstance)).Resolve("ratedCurrent")));
        }
        
        /// <summary>
        /// Raises the RatedCurrentChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedCurrentChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedCurrentChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RatedCurrentChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRatedCurrentChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RatedCurrentChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTimeZoneOffsetAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EndDeviceAsset.ClassInstance)).Resolve("timeZoneOffset")));
        }
        
        /// <summary>
        /// Raises the TimeZoneOffsetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeZoneOffsetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeZoneOffsetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeZoneOffsetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeZoneOffsetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeZoneOffsetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReadRequestAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EndDeviceAsset.ClassInstance)).Resolve("readRequest")));
        }
        
        /// <summary>
        /// Raises the ReadRequestChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadRequestChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReadRequestChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReadRequestChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadRequestChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReadRequestChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDstEnabledAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EndDeviceAsset.ClassInstance)).Resolve("dstEnabled")));
        }
        
        /// <summary>
        /// Raises the DstEnabledChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDstEnabledChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DstEnabledChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DstEnabledChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDstEnabledChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DstEnabledChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePhaseCountAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EndDeviceAsset.ClassInstance)).Resolve("phaseCount")));
        }
        
        /// <summary>
        /// Raises the PhaseCountChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseCountChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseCountChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhaseCountChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseCountChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseCountChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReverseFlowHandlingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EndDeviceAsset.ClassInstance)).Resolve("reverseFlowHandling")));
        }
        
        /// <summary>
        /// Raises the ReverseFlowHandlingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReverseFlowHandlingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReverseFlowHandlingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReverseFlowHandlingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReverseFlowHandlingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReverseFlowHandlingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDemandResponseAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EndDeviceAsset.ClassInstance)).Resolve("demandResponse")));
        }
        
        /// <summary>
        /// Raises the DemandResponseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDemandResponseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DemandResponseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DemandResponseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDemandResponseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DemandResponseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAmrSystemAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EndDeviceAsset.ClassInstance)).Resolve("amrSystem")));
        }
        
        /// <summary>
        /// Raises the AmrSystemChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmrSystemChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmrSystemChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AmrSystemChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAmrSystemChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AmrSystemChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLoadControlAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EndDeviceAsset.ClassInstance)).Resolve("loadControl")));
        }
        
        /// <summary>
        /// Raises the LoadControlChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoadControlChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoadControlChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LoadControlChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLoadControlChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LoadControlChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveOutageReportAttribute()
        {
            return ((ITypedElement)(((ModelElement)(EndDeviceAsset.ClassInstance)).Resolve("outageReport")));
        }
        
        /// <summary>
        /// Raises the OutageReportChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutageReportChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OutageReportChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OutageReportChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutageReportChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OutageReportChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReadingsReference()
        {
            return ((ITypedElement)(((ModelElement)(EndDeviceAsset.ClassInstance)).Resolve("Readings")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Readings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReadingsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Readings", e, _readingsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Readings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReadingsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Readings", e, _readingsReference);
        }
        
        private static ITypedElement RetrieveServiceDeliveryPointReference()
        {
            return ((ITypedElement)(((ModelElement)(EndDeviceAsset.ClassInstance)).Resolve("ServiceDeliveryPoint")));
        }
        
        /// <summary>
        /// Raises the ServiceDeliveryPointChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceDeliveryPointChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceDeliveryPointChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServiceDeliveryPointChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceDeliveryPointChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceDeliveryPointChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ServiceDeliveryPoint property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetServiceDeliveryPoint(object sender, System.EventArgs eventArgs)
        {
            this.ServiceDeliveryPoint = null;
        }
        
        private static ITypedElement RetrieveServiceLocationReference()
        {
            return ((ITypedElement)(((ModelElement)(EndDeviceAsset.ClassInstance)).Resolve("ServiceLocation")));
        }
        
        /// <summary>
        /// Raises the ServiceLocationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceLocationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceLocationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServiceLocationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceLocationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceLocationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ServiceLocation property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetServiceLocation(object sender, System.EventArgs eventArgs)
        {
            this.ServiceLocation = null;
        }
        
        private static ITypedElement RetrieveEndDeviceControlsReference()
        {
            return ((ITypedElement)(((ModelElement)(EndDeviceAsset.ClassInstance)).Resolve("EndDeviceControls")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EndDeviceControls property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EndDeviceControlsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("EndDeviceControls", e, _endDeviceControlsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EndDeviceControls property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EndDeviceControlsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EndDeviceControls", e, _endDeviceControlsReference);
        }
        
        private static ITypedElement RetrieveEndDeviceModelReference()
        {
            return ((ITypedElement)(((ModelElement)(EndDeviceAsset.ClassInstance)).Resolve("EndDeviceModel")));
        }
        
        /// <summary>
        /// Raises the EndDeviceModelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEndDeviceModelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EndDeviceModelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EndDeviceModelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEndDeviceModelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EndDeviceModelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the EndDeviceModel property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetEndDeviceModel(object sender, System.EventArgs eventArgs)
        {
            this.EndDeviceModel = null;
        }
        
        private static ITypedElement RetrieveDeviceFunctionsReference()
        {
            return ((ITypedElement)(((ModelElement)(EndDeviceAsset.ClassInstance)).Resolve("DeviceFunctions")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DeviceFunctions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DeviceFunctionsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("DeviceFunctions", e, _deviceFunctionsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DeviceFunctions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DeviceFunctionsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DeviceFunctions", e, _deviceFunctionsReference);
        }
        
        private static ITypedElement RetrieveCustomerReference()
        {
            return ((ITypedElement)(((ModelElement)(EndDeviceAsset.ClassInstance)).Resolve("Customer")));
        }
        
        /// <summary>
        /// Raises the CustomerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CustomerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Customer property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCustomer(object sender, System.EventArgs eventArgs)
        {
            this.Customer = null;
        }
        
        private static ITypedElement RetrieveEndDeviceGroupsReference()
        {
            return ((ITypedElement)(((ModelElement)(EndDeviceAsset.ClassInstance)).Resolve("EndDeviceGroups")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EndDeviceGroups property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EndDeviceGroupsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("EndDeviceGroups", e, _endDeviceGroupsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EndDeviceGroups property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EndDeviceGroupsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EndDeviceGroups", e, _endDeviceGroupsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "DISCONNECT"))
            {
                return this.Disconnect;
            }
            if ((attribute == "RELAYCAPABLE"))
            {
                return this.RelayCapable;
            }
            if ((attribute == "METROLOGY"))
            {
                return this.Metrology;
            }
            if ((attribute == "RATEDVOLTAGE"))
            {
                return this.RatedVoltage;
            }
            if ((attribute == "RATEDCURRENT"))
            {
                return this.RatedCurrent;
            }
            if ((attribute == "TIMEZONEOFFSET"))
            {
                return this.TimeZoneOffset;
            }
            if ((attribute == "READREQUEST"))
            {
                return this.ReadRequest;
            }
            if ((attribute == "DSTENABLED"))
            {
                return this.DstEnabled;
            }
            if ((attribute == "PHASECOUNT"))
            {
                return this.PhaseCount;
            }
            if ((attribute == "REVERSEFLOWHANDLING"))
            {
                return this.ReverseFlowHandling;
            }
            if ((attribute == "DEMANDRESPONSE"))
            {
                return this.DemandResponse;
            }
            if ((attribute == "AMRSYSTEM"))
            {
                return this.AmrSystem;
            }
            if ((attribute == "LOADCONTROL"))
            {
                return this.LoadControl;
            }
            if ((attribute == "OUTAGEREPORT"))
            {
                return this.OutageReport;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "READINGS"))
            {
                return this._readings;
            }
            if ((feature == "ENDDEVICECONTROLS"))
            {
                return this._endDeviceControls;
            }
            if ((feature == "DEVICEFUNCTIONS"))
            {
                return this._deviceFunctions;
            }
            if ((feature == "ENDDEVICEGROUPS"))
            {
                return this._endDeviceGroups;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SERVICEDELIVERYPOINT"))
            {
                this.ServiceDeliveryPoint = ((IServiceDeliveryPoint)(value));
                return;
            }
            if ((feature == "SERVICELOCATION"))
            {
                this.ServiceLocation = ((IServiceLocation)(value));
                return;
            }
            if ((feature == "ENDDEVICEMODEL"))
            {
                this.EndDeviceModel = ((IEndDeviceModel)(value));
                return;
            }
            if ((feature == "CUSTOMER"))
            {
                this.Customer = ((ICustomer)(value));
                return;
            }
            if ((feature == "DISCONNECT"))
            {
                this.Disconnect = ((bool)(value));
                return;
            }
            if ((feature == "RELAYCAPABLE"))
            {
                this.RelayCapable = ((bool)(value));
                return;
            }
            if ((feature == "METROLOGY"))
            {
                this.Metrology = ((bool)(value));
                return;
            }
            if ((feature == "RATEDVOLTAGE"))
            {
                this.RatedVoltage = ((float)(value));
                return;
            }
            if ((feature == "RATEDCURRENT"))
            {
                this.RatedCurrent = ((float)(value));
                return;
            }
            if ((feature == "TIMEZONEOFFSET"))
            {
                this.TimeZoneOffset = ((float)(value));
                return;
            }
            if ((feature == "READREQUEST"))
            {
                this.ReadRequest = ((bool)(value));
                return;
            }
            if ((feature == "DSTENABLED"))
            {
                this.DstEnabled = ((bool)(value));
                return;
            }
            if ((feature == "PHASECOUNT"))
            {
                this.PhaseCount = ((int)(value));
                return;
            }
            if ((feature == "REVERSEFLOWHANDLING"))
            {
                this.ReverseFlowHandling = ((bool)(value));
                return;
            }
            if ((feature == "DEMANDRESPONSE"))
            {
                this.DemandResponse = ((bool)(value));
                return;
            }
            if ((feature == "AMRSYSTEM"))
            {
                this.AmrSystem = ((string)(value));
                return;
            }
            if ((feature == "LOADCONTROL"))
            {
                this.LoadControl = ((bool)(value));
                return;
            }
            if ((feature == "OUTAGEREPORT"))
            {
                this.OutageReport = ((bool)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ServiceDeliveryPoint"))
            {
                return new ServiceDeliveryPointProxy(this);
            }
            if ((attribute == "ServiceLocation"))
            {
                return new ServiceLocationProxy(this);
            }
            if ((attribute == "EndDeviceModel"))
            {
                return new EndDeviceModelProxy(this);
            }
            if ((attribute == "Customer"))
            {
                return new CustomerProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ServiceDeliveryPoint"))
            {
                return new ServiceDeliveryPointProxy(this);
            }
            if ((reference == "ServiceLocation"))
            {
                return new ServiceLocationProxy(this);
            }
            if ((reference == "EndDeviceModel"))
            {
                return new EndDeviceModelProxy(this);
            }
            if ((reference == "Customer"))
            {
                return new CustomerProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/EndDeviceAsset")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the EndDeviceAsset class
        /// </summary>
        public class EndDeviceAssetReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private EndDeviceAsset _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public EndDeviceAssetReferencedElementsCollection(EndDeviceAsset parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.Readings.Count);
                    if ((this._parent.ServiceDeliveryPoint != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ServiceLocation != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.EndDeviceControls.Count);
                    if ((this._parent.EndDeviceModel != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.DeviceFunctions.Count);
                    if ((this._parent.Customer != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.EndDeviceGroups.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.Readings.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ServiceDeliveryPointChanged += this.PropagateValueChanges;
                this._parent.ServiceLocationChanged += this.PropagateValueChanges;
                this._parent.EndDeviceControls.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.EndDeviceModelChanged += this.PropagateValueChanges;
                this._parent.DeviceFunctions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CustomerChanged += this.PropagateValueChanges;
                this._parent.EndDeviceGroups.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.Readings.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ServiceDeliveryPointChanged -= this.PropagateValueChanges;
                this._parent.ServiceLocationChanged -= this.PropagateValueChanges;
                this._parent.EndDeviceControls.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.EndDeviceModelChanged -= this.PropagateValueChanges;
                this._parent.DeviceFunctions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CustomerChanged -= this.PropagateValueChanges;
                this._parent.EndDeviceGroups.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IReading readingsCasted = item.As<IReading>();
                if ((readingsCasted != null))
                {
                    this._parent.Readings.Add(readingsCasted);
                }
                if ((this._parent.ServiceDeliveryPoint == null))
                {
                    IServiceDeliveryPoint serviceDeliveryPointCasted = item.As<IServiceDeliveryPoint>();
                    if ((serviceDeliveryPointCasted != null))
                    {
                        this._parent.ServiceDeliveryPoint = serviceDeliveryPointCasted;
                        return;
                    }
                }
                if ((this._parent.ServiceLocation == null))
                {
                    IServiceLocation serviceLocationCasted = item.As<IServiceLocation>();
                    if ((serviceLocationCasted != null))
                    {
                        this._parent.ServiceLocation = serviceLocationCasted;
                        return;
                    }
                }
                IEndDeviceControl endDeviceControlsCasted = item.As<IEndDeviceControl>();
                if ((endDeviceControlsCasted != null))
                {
                    this._parent.EndDeviceControls.Add(endDeviceControlsCasted);
                }
                if ((this._parent.EndDeviceModel == null))
                {
                    IEndDeviceModel endDeviceModelCasted = item.As<IEndDeviceModel>();
                    if ((endDeviceModelCasted != null))
                    {
                        this._parent.EndDeviceModel = endDeviceModelCasted;
                        return;
                    }
                }
                IDeviceFunction deviceFunctionsCasted = item.As<IDeviceFunction>();
                if ((deviceFunctionsCasted != null))
                {
                    this._parent.DeviceFunctions.Add(deviceFunctionsCasted);
                }
                if ((this._parent.Customer == null))
                {
                    ICustomer customerCasted = item.As<ICustomer>();
                    if ((customerCasted != null))
                    {
                        this._parent.Customer = customerCasted;
                        return;
                    }
                }
                IEndDeviceGroup endDeviceGroupsCasted = item.As<IEndDeviceGroup>();
                if ((endDeviceGroupsCasted != null))
                {
                    this._parent.EndDeviceGroups.Add(endDeviceGroupsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Readings.Clear();
                this._parent.ServiceDeliveryPoint = null;
                this._parent.ServiceLocation = null;
                this._parent.EndDeviceControls.Clear();
                this._parent.EndDeviceModel = null;
                this._parent.DeviceFunctions.Clear();
                this._parent.Customer = null;
                this._parent.EndDeviceGroups.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.Readings.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ServiceDeliveryPoint))
                {
                    return true;
                }
                if ((item == this._parent.ServiceLocation))
                {
                    return true;
                }
                if (this._parent.EndDeviceControls.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.EndDeviceModel))
                {
                    return true;
                }
                if (this._parent.DeviceFunctions.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Customer))
                {
                    return true;
                }
                if (this._parent.EndDeviceGroups.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> readingsEnumerator = this._parent.Readings.GetEnumerator();
                try
                {
                    for (
                    ; readingsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = readingsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    readingsEnumerator.Dispose();
                }
                if ((this._parent.ServiceDeliveryPoint != null))
                {
                    array[arrayIndex] = this._parent.ServiceDeliveryPoint;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ServiceLocation != null))
                {
                    array[arrayIndex] = this._parent.ServiceLocation;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> endDeviceControlsEnumerator = this._parent.EndDeviceControls.GetEnumerator();
                try
                {
                    for (
                    ; endDeviceControlsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = endDeviceControlsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    endDeviceControlsEnumerator.Dispose();
                }
                if ((this._parent.EndDeviceModel != null))
                {
                    array[arrayIndex] = this._parent.EndDeviceModel;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> deviceFunctionsEnumerator = this._parent.DeviceFunctions.GetEnumerator();
                try
                {
                    for (
                    ; deviceFunctionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = deviceFunctionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    deviceFunctionsEnumerator.Dispose();
                }
                if ((this._parent.Customer != null))
                {
                    array[arrayIndex] = this._parent.Customer;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> endDeviceGroupsEnumerator = this._parent.EndDeviceGroups.GetEnumerator();
                try
                {
                    for (
                    ; endDeviceGroupsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = endDeviceGroupsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    endDeviceGroupsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IReading readingItem = item.As<IReading>();
                if (((readingItem != null) 
                            && this._parent.Readings.Remove(readingItem)))
                {
                    return true;
                }
                if ((this._parent.ServiceDeliveryPoint == item))
                {
                    this._parent.ServiceDeliveryPoint = null;
                    return true;
                }
                if ((this._parent.ServiceLocation == item))
                {
                    this._parent.ServiceLocation = null;
                    return true;
                }
                IEndDeviceControl endDeviceControlItem = item.As<IEndDeviceControl>();
                if (((endDeviceControlItem != null) 
                            && this._parent.EndDeviceControls.Remove(endDeviceControlItem)))
                {
                    return true;
                }
                if ((this._parent.EndDeviceModel == item))
                {
                    this._parent.EndDeviceModel = null;
                    return true;
                }
                IDeviceFunction deviceFunctionItem = item.As<IDeviceFunction>();
                if (((deviceFunctionItem != null) 
                            && this._parent.DeviceFunctions.Remove(deviceFunctionItem)))
                {
                    return true;
                }
                if ((this._parent.Customer == item))
                {
                    this._parent.Customer = null;
                    return true;
                }
                IEndDeviceGroup endDeviceGroupItem = item.As<IEndDeviceGroup>();
                if (((endDeviceGroupItem != null) 
                            && this._parent.EndDeviceGroups.Remove(endDeviceGroupItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Readings).Concat(this._parent.ServiceDeliveryPoint).Concat(this._parent.ServiceLocation).Concat(this._parent.EndDeviceControls).Concat(this._parent.EndDeviceModel).Concat(this._parent.DeviceFunctions).Concat(this._parent.Customer).Concat(this._parent.EndDeviceGroups).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the disconnect property
        /// </summary>
        private sealed class DisconnectProxy : ModelPropertyChange<IEndDeviceAsset, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DisconnectProxy(IEndDeviceAsset modelElement) : 
                    base(modelElement, "disconnect")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Disconnect;
                }
                set
                {
                    this.ModelElement.Disconnect = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the relayCapable property
        /// </summary>
        private sealed class RelayCapableProxy : ModelPropertyChange<IEndDeviceAsset, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RelayCapableProxy(IEndDeviceAsset modelElement) : 
                    base(modelElement, "relayCapable")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.RelayCapable;
                }
                set
                {
                    this.ModelElement.RelayCapable = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the metrology property
        /// </summary>
        private sealed class MetrologyProxy : ModelPropertyChange<IEndDeviceAsset, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MetrologyProxy(IEndDeviceAsset modelElement) : 
                    base(modelElement, "metrology")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Metrology;
                }
                set
                {
                    this.ModelElement.Metrology = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ratedVoltage property
        /// </summary>
        private sealed class RatedVoltageProxy : ModelPropertyChange<IEndDeviceAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatedVoltageProxy(IEndDeviceAsset modelElement) : 
                    base(modelElement, "ratedVoltage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RatedVoltage;
                }
                set
                {
                    this.ModelElement.RatedVoltage = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ratedCurrent property
        /// </summary>
        private sealed class RatedCurrentProxy : ModelPropertyChange<IEndDeviceAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RatedCurrentProxy(IEndDeviceAsset modelElement) : 
                    base(modelElement, "ratedCurrent")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.RatedCurrent;
                }
                set
                {
                    this.ModelElement.RatedCurrent = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the timeZoneOffset property
        /// </summary>
        private sealed class TimeZoneOffsetProxy : ModelPropertyChange<IEndDeviceAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeZoneOffsetProxy(IEndDeviceAsset modelElement) : 
                    base(modelElement, "timeZoneOffset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TimeZoneOffset;
                }
                set
                {
                    this.ModelElement.TimeZoneOffset = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the readRequest property
        /// </summary>
        private sealed class ReadRequestProxy : ModelPropertyChange<IEndDeviceAsset, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReadRequestProxy(IEndDeviceAsset modelElement) : 
                    base(modelElement, "readRequest")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.ReadRequest;
                }
                set
                {
                    this.ModelElement.ReadRequest = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the dstEnabled property
        /// </summary>
        private sealed class DstEnabledProxy : ModelPropertyChange<IEndDeviceAsset, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DstEnabledProxy(IEndDeviceAsset modelElement) : 
                    base(modelElement, "dstEnabled")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.DstEnabled;
                }
                set
                {
                    this.ModelElement.DstEnabled = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the phaseCount property
        /// </summary>
        private sealed class PhaseCountProxy : ModelPropertyChange<IEndDeviceAsset, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhaseCountProxy(IEndDeviceAsset modelElement) : 
                    base(modelElement, "phaseCount")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.PhaseCount;
                }
                set
                {
                    this.ModelElement.PhaseCount = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the reverseFlowHandling property
        /// </summary>
        private sealed class ReverseFlowHandlingProxy : ModelPropertyChange<IEndDeviceAsset, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReverseFlowHandlingProxy(IEndDeviceAsset modelElement) : 
                    base(modelElement, "reverseFlowHandling")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.ReverseFlowHandling;
                }
                set
                {
                    this.ModelElement.ReverseFlowHandling = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the demandResponse property
        /// </summary>
        private sealed class DemandResponseProxy : ModelPropertyChange<IEndDeviceAsset, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DemandResponseProxy(IEndDeviceAsset modelElement) : 
                    base(modelElement, "demandResponse")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.DemandResponse;
                }
                set
                {
                    this.ModelElement.DemandResponse = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the amrSystem property
        /// </summary>
        private sealed class AmrSystemProxy : ModelPropertyChange<IEndDeviceAsset, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AmrSystemProxy(IEndDeviceAsset modelElement) : 
                    base(modelElement, "amrSystem")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.AmrSystem;
                }
                set
                {
                    this.ModelElement.AmrSystem = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the loadControl property
        /// </summary>
        private sealed class LoadControlProxy : ModelPropertyChange<IEndDeviceAsset, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LoadControlProxy(IEndDeviceAsset modelElement) : 
                    base(modelElement, "loadControl")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.LoadControl;
                }
                set
                {
                    this.ModelElement.LoadControl = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the outageReport property
        /// </summary>
        private sealed class OutageReportProxy : ModelPropertyChange<IEndDeviceAsset, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OutageReportProxy(IEndDeviceAsset modelElement) : 
                    base(modelElement, "outageReport")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.OutageReport;
                }
                set
                {
                    this.ModelElement.OutageReport = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ServiceDeliveryPoint property
        /// </summary>
        private sealed class ServiceDeliveryPointProxy : ModelPropertyChange<IEndDeviceAsset, IServiceDeliveryPoint>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ServiceDeliveryPointProxy(IEndDeviceAsset modelElement) : 
                    base(modelElement, "ServiceDeliveryPoint")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IServiceDeliveryPoint Value
            {
                get
                {
                    return this.ModelElement.ServiceDeliveryPoint;
                }
                set
                {
                    this.ModelElement.ServiceDeliveryPoint = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ServiceLocation property
        /// </summary>
        private sealed class ServiceLocationProxy : ModelPropertyChange<IEndDeviceAsset, IServiceLocation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ServiceLocationProxy(IEndDeviceAsset modelElement) : 
                    base(modelElement, "ServiceLocation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IServiceLocation Value
            {
                get
                {
                    return this.ModelElement.ServiceLocation;
                }
                set
                {
                    this.ModelElement.ServiceLocation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the EndDeviceModel property
        /// </summary>
        private sealed class EndDeviceModelProxy : ModelPropertyChange<IEndDeviceAsset, IEndDeviceModel>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EndDeviceModelProxy(IEndDeviceAsset modelElement) : 
                    base(modelElement, "EndDeviceModel")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEndDeviceModel Value
            {
                get
                {
                    return this.ModelElement.EndDeviceModel;
                }
                set
                {
                    this.ModelElement.EndDeviceModel = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Customer property
        /// </summary>
        private sealed class CustomerProxy : ModelPropertyChange<IEndDeviceAsset, ICustomer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CustomerProxy(IEndDeviceAsset modelElement) : 
                    base(modelElement, "Customer")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICustomer Value
            {
                get
                {
                    return this.ModelElement.Customer;
                }
                set
                {
                    this.ModelElement.Customer = value;
                }
            }
        }
    }
}

