using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.Metering
{
    
    
    /// <summary>
    /// The default implementation of the MeterAsset class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Metering")]
    [XmlNamespacePrefixAttribute("cimMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/MeterAsset")]
    [DebuggerDisplayAttribute("MeterAsset {UUID}")]
    public partial class MeterAsset : EndDeviceAsset, IMeterAsset, IModelElement
    {
        
        /// <summary>
        /// The backing field for the KR property
        /// </summary>
        private float _kR;
        
        private static Lazy<ITypedElement> _kRAttribute = new Lazy<ITypedElement>(RetrieveKRAttribute);
        
        /// <summary>
        /// The backing field for the KH property
        /// </summary>
        private float _kH;
        
        private static Lazy<ITypedElement> _kHAttribute = new Lazy<ITypedElement>(RetrieveKHAttribute);
        
        /// <summary>
        /// The backing field for the FormNumber property
        /// </summary>
        private string _formNumber;
        
        private static Lazy<ITypedElement> _formNumberAttribute = new Lazy<ITypedElement>(RetrieveFormNumberAttribute);
        
        private static Lazy<ITypedElement> _meterAssetModelReference = new Lazy<ITypedElement>(RetrieveMeterAssetModelReference);
        
        /// <summary>
        /// The backing field for the MeterAssetModel property
        /// </summary>
        private IMeterAssetModel _meterAssetModel;
        
        private static Lazy<ITypedElement> _vendingTransactionsReference = new Lazy<ITypedElement>(RetrieveVendingTransactionsReference);
        
        /// <summary>
        /// The backing field for the VendingTransactions property
        /// </summary>
        private MeterAssetVendingTransactionsCollection _vendingTransactions;
        
        private static Lazy<ITypedElement> _meterServiceWorksReference = new Lazy<ITypedElement>(RetrieveMeterServiceWorksReference);
        
        /// <summary>
        /// The backing field for the MeterServiceWorks property
        /// </summary>
        private MeterAssetMeterServiceWorksCollection _meterServiceWorks;
        
        private static Lazy<ITypedElement> _meterReadingsReference = new Lazy<ITypedElement>(RetrieveMeterReadingsReference);
        
        /// <summary>
        /// The backing field for the MeterReadings property
        /// </summary>
        private MeterAssetMeterReadingsCollection _meterReadings;
        
        private static Lazy<ITypedElement> _meterReplacementWorksReference = new Lazy<ITypedElement>(RetrieveMeterReplacementWorksReference);
        
        /// <summary>
        /// The backing field for the MeterReplacementWorks property
        /// </summary>
        private MeterAssetMeterReplacementWorksCollection _meterReplacementWorks;
        
        private static IClass _classInstance;
        
        public MeterAsset()
        {
            this._vendingTransactions = new MeterAssetVendingTransactionsCollection(this);
            this._vendingTransactions.CollectionChanging += this.VendingTransactionsCollectionChanging;
            this._vendingTransactions.CollectionChanged += this.VendingTransactionsCollectionChanged;
            this._meterServiceWorks = new MeterAssetMeterServiceWorksCollection(this);
            this._meterServiceWorks.CollectionChanging += this.MeterServiceWorksCollectionChanging;
            this._meterServiceWorks.CollectionChanged += this.MeterServiceWorksCollectionChanged;
            this._meterReadings = new MeterAssetMeterReadingsCollection(this);
            this._meterReadings.CollectionChanging += this.MeterReadingsCollectionChanging;
            this._meterReadings.CollectionChanged += this.MeterReadingsCollectionChanged;
            this._meterReplacementWorks = new MeterAssetMeterReplacementWorksCollection(this);
            this._meterReplacementWorks.CollectionChanging += this.MeterReplacementWorksCollectionChanging;
            this._meterReplacementWorks.CollectionChanged += this.MeterReplacementWorksCollectionChanged;
        }
        
        /// <summary>
        /// The kR property
        /// </summary>
        [XmlElementNameAttribute("kR")]
        [XmlAttributeAttribute(true)]
        public virtual float KR
        {
            get
            {
                return this._kR;
            }
            set
            {
                if ((this._kR != value))
                {
                    float old = this._kR;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKRChanging(e);
                    this.OnPropertyChanging("KR", e, _kRAttribute);
                    this._kR = value;
                    this.OnKRChanged(e);
                    this.OnPropertyChanged("KR", e, _kRAttribute);
                }
            }
        }
        
        /// <summary>
        /// The kH property
        /// </summary>
        [XmlElementNameAttribute("kH")]
        [XmlAttributeAttribute(true)]
        public virtual float KH
        {
            get
            {
                return this._kH;
            }
            set
            {
                if ((this._kH != value))
                {
                    float old = this._kH;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKHChanging(e);
                    this.OnPropertyChanging("KH", e, _kHAttribute);
                    this._kH = value;
                    this.OnKHChanged(e);
                    this.OnPropertyChanged("KH", e, _kHAttribute);
                }
            }
        }
        
        /// <summary>
        /// The formNumber property
        /// </summary>
        [XmlElementNameAttribute("formNumber")]
        [XmlAttributeAttribute(true)]
        public virtual string FormNumber
        {
            get
            {
                return this._formNumber;
            }
            set
            {
                if ((this._formNumber != value))
                {
                    string old = this._formNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFormNumberChanging(e);
                    this.OnPropertyChanging("FormNumber", e, _formNumberAttribute);
                    this._formNumber = value;
                    this.OnFormNumberChanged(e);
                    this.OnPropertyChanged("FormNumber", e, _formNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The MeterAssetModel property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MeterAssets")]
        public virtual IMeterAssetModel MeterAssetModel
        {
            get
            {
                return this._meterAssetModel;
            }
            set
            {
                if ((this._meterAssetModel != value))
                {
                    IMeterAssetModel old = this._meterAssetModel;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeterAssetModelChanging(e);
                    this.OnPropertyChanging("MeterAssetModel", e, _meterAssetModelReference);
                    this._meterAssetModel = value;
                    if ((old != null))
                    {
                        old.MeterAssets.Remove(this);
                        old.Deleted -= this.OnResetMeterAssetModel;
                    }
                    if ((value != null))
                    {
                        value.MeterAssets.Add(this);
                        value.Deleted += this.OnResetMeterAssetModel;
                    }
                    this.OnMeterAssetModelChanged(e);
                    this.OnPropertyChanged("MeterAssetModel", e, _meterAssetModelReference);
                }
            }
        }
        
        /// <summary>
        /// The VendingTransactions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MeterAsset")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ITransaction> VendingTransactions
        {
            get
            {
                return this._vendingTransactions;
            }
        }
        
        /// <summary>
        /// The MeterServiceWorks property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MeterAsset")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMeterServiceWork> MeterServiceWorks
        {
            get
            {
                return this._meterServiceWorks;
            }
        }
        
        /// <summary>
        /// The MeterReadings property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MeterAsset")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMeterReading> MeterReadings
        {
            get
            {
                return this._meterReadings;
            }
        }
        
        /// <summary>
        /// The MeterReplacementWorks property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("OldMeterAsset")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMeterServiceWork> MeterReplacementWorks
        {
            get
            {
                return this._meterReplacementWorks;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MeterAssetReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/MeterAsset")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the KR property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KRChanging;
        
        /// <summary>
        /// Gets fired when the KR property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KRChanged;
        
        /// <summary>
        /// Gets fired before the KH property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KHChanging;
        
        /// <summary>
        /// Gets fired when the KH property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KHChanged;
        
        /// <summary>
        /// Gets fired before the FormNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FormNumberChanging;
        
        /// <summary>
        /// Gets fired when the FormNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FormNumberChanged;
        
        /// <summary>
        /// Gets fired before the MeterAssetModel property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeterAssetModelChanging;
        
        /// <summary>
        /// Gets fired when the MeterAssetModel property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeterAssetModelChanged;
        
        private static ITypedElement RetrieveKRAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterAsset.ClassInstance)).Resolve("kR")));
        }
        
        /// <summary>
        /// Raises the KRChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKRChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KRChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KRChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKRChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KRChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveKHAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterAsset.ClassInstance)).Resolve("kH")));
        }
        
        /// <summary>
        /// Raises the KHChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKHChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KHChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KHChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKHChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KHChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFormNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeterAsset.ClassInstance)).Resolve("formNumber")));
        }
        
        /// <summary>
        /// Raises the FormNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFormNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FormNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FormNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFormNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FormNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMeterAssetModelReference()
        {
            return ((ITypedElement)(((ModelElement)(MeterAsset.ClassInstance)).Resolve("MeterAssetModel")));
        }
        
        /// <summary>
        /// Raises the MeterAssetModelChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeterAssetModelChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeterAssetModelChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeterAssetModelChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeterAssetModelChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeterAssetModelChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MeterAssetModel property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeterAssetModel(object sender, System.EventArgs eventArgs)
        {
            this.MeterAssetModel = null;
        }
        
        private static ITypedElement RetrieveVendingTransactionsReference()
        {
            return ((ITypedElement)(((ModelElement)(MeterAsset.ClassInstance)).Resolve("VendingTransactions")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the VendingTransactions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VendingTransactionsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("VendingTransactions", e, _vendingTransactionsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the VendingTransactions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void VendingTransactionsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("VendingTransactions", e, _vendingTransactionsReference);
        }
        
        private static ITypedElement RetrieveMeterServiceWorksReference()
        {
            return ((ITypedElement)(((ModelElement)(MeterAsset.ClassInstance)).Resolve("MeterServiceWorks")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MeterServiceWorks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeterServiceWorksCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("MeterServiceWorks", e, _meterServiceWorksReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MeterServiceWorks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeterServiceWorksCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MeterServiceWorks", e, _meterServiceWorksReference);
        }
        
        private static ITypedElement RetrieveMeterReadingsReference()
        {
            return ((ITypedElement)(((ModelElement)(MeterAsset.ClassInstance)).Resolve("MeterReadings")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MeterReadings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeterReadingsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("MeterReadings", e, _meterReadingsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MeterReadings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeterReadingsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MeterReadings", e, _meterReadingsReference);
        }
        
        private static ITypedElement RetrieveMeterReplacementWorksReference()
        {
            return ((ITypedElement)(((ModelElement)(MeterAsset.ClassInstance)).Resolve("MeterReplacementWorks")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the MeterReplacementWorks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeterReplacementWorksCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("MeterReplacementWorks", e, _meterReplacementWorksReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the MeterReplacementWorks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeterReplacementWorksCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("MeterReplacementWorks", e, _meterReplacementWorksReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "KR"))
            {
                return this.KR;
            }
            if ((attribute == "KH"))
            {
                return this.KH;
            }
            if ((attribute == "FORMNUMBER"))
            {
                return this.FormNumber;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "VENDINGTRANSACTIONS"))
            {
                return this._vendingTransactions;
            }
            if ((feature == "METERSERVICEWORKS"))
            {
                return this._meterServiceWorks;
            }
            if ((feature == "METERREADINGS"))
            {
                return this._meterReadings;
            }
            if ((feature == "METERREPLACEMENTWORKS"))
            {
                return this._meterReplacementWorks;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "METERASSETMODEL"))
            {
                this.MeterAssetModel = ((IMeterAssetModel)(value));
                return;
            }
            if ((feature == "KR"))
            {
                this.KR = ((float)(value));
                return;
            }
            if ((feature == "KH"))
            {
                this.KH = ((float)(value));
                return;
            }
            if ((feature == "FORMNUMBER"))
            {
                this.FormNumber = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "MeterAssetModel"))
            {
                return new MeterAssetModelProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "MeterAssetModel"))
            {
                return new MeterAssetModelProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/MeterAsset")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MeterAsset class
        /// </summary>
        public class MeterAssetReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private MeterAsset _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MeterAssetReferencedElementsCollection(MeterAsset parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.MeterAssetModel != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.VendingTransactions.Count);
                    count = (count + this._parent.MeterServiceWorks.Count);
                    count = (count + this._parent.MeterReadings.Count);
                    count = (count + this._parent.MeterReplacementWorks.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.MeterAssetModelChanged += this.PropagateValueChanges;
                this._parent.VendingTransactions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MeterServiceWorks.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MeterReadings.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.MeterReplacementWorks.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.MeterAssetModelChanged -= this.PropagateValueChanges;
                this._parent.VendingTransactions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MeterServiceWorks.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MeterReadings.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.MeterReplacementWorks.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.MeterAssetModel == null))
                {
                    IMeterAssetModel meterAssetModelCasted = item.As<IMeterAssetModel>();
                    if ((meterAssetModelCasted != null))
                    {
                        this._parent.MeterAssetModel = meterAssetModelCasted;
                        return;
                    }
                }
                ITransaction vendingTransactionsCasted = item.As<ITransaction>();
                if ((vendingTransactionsCasted != null))
                {
                    this._parent.VendingTransactions.Add(vendingTransactionsCasted);
                }
                IMeterServiceWork meterServiceWorksCasted = item.As<IMeterServiceWork>();
                if ((meterServiceWorksCasted != null))
                {
                    this._parent.MeterServiceWorks.Add(meterServiceWorksCasted);
                }
                IMeterReading meterReadingsCasted = item.As<IMeterReading>();
                if ((meterReadingsCasted != null))
                {
                    this._parent.MeterReadings.Add(meterReadingsCasted);
                }
                IMeterServiceWork meterReplacementWorksCasted = item.As<IMeterServiceWork>();
                if ((meterReplacementWorksCasted != null))
                {
                    this._parent.MeterReplacementWorks.Add(meterReplacementWorksCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.MeterAssetModel = null;
                this._parent.VendingTransactions.Clear();
                this._parent.MeterServiceWorks.Clear();
                this._parent.MeterReadings.Clear();
                this._parent.MeterReplacementWorks.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.MeterAssetModel))
                {
                    return true;
                }
                if (this._parent.VendingTransactions.Contains(item))
                {
                    return true;
                }
                if (this._parent.MeterServiceWorks.Contains(item))
                {
                    return true;
                }
                if (this._parent.MeterReadings.Contains(item))
                {
                    return true;
                }
                if (this._parent.MeterReplacementWorks.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.MeterAssetModel != null))
                {
                    array[arrayIndex] = this._parent.MeterAssetModel;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> vendingTransactionsEnumerator = this._parent.VendingTransactions.GetEnumerator();
                try
                {
                    for (
                    ; vendingTransactionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = vendingTransactionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    vendingTransactionsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> meterServiceWorksEnumerator = this._parent.MeterServiceWorks.GetEnumerator();
                try
                {
                    for (
                    ; meterServiceWorksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = meterServiceWorksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    meterServiceWorksEnumerator.Dispose();
                }
                IEnumerator<IModelElement> meterReadingsEnumerator = this._parent.MeterReadings.GetEnumerator();
                try
                {
                    for (
                    ; meterReadingsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = meterReadingsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    meterReadingsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> meterReplacementWorksEnumerator = this._parent.MeterReplacementWorks.GetEnumerator();
                try
                {
                    for (
                    ; meterReplacementWorksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = meterReplacementWorksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    meterReplacementWorksEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.MeterAssetModel == item))
                {
                    this._parent.MeterAssetModel = null;
                    return true;
                }
                ITransaction transactionItem = item.As<ITransaction>();
                if (((transactionItem != null) 
                            && this._parent.VendingTransactions.Remove(transactionItem)))
                {
                    return true;
                }
                IMeterServiceWork meterServiceWorkItem = item.As<IMeterServiceWork>();
                if (((meterServiceWorkItem != null) 
                            && this._parent.MeterServiceWorks.Remove(meterServiceWorkItem)))
                {
                    return true;
                }
                IMeterReading meterReadingItem = item.As<IMeterReading>();
                if (((meterReadingItem != null) 
                            && this._parent.MeterReadings.Remove(meterReadingItem)))
                {
                    return true;
                }
                if (((meterServiceWorkItem != null) 
                            && this._parent.MeterReplacementWorks.Remove(meterServiceWorkItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.MeterAssetModel).Concat(this._parent.VendingTransactions).Concat(this._parent.MeterServiceWorks).Concat(this._parent.MeterReadings).Concat(this._parent.MeterReplacementWorks).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kR property
        /// </summary>
        private sealed class KRProxy : ModelPropertyChange<IMeterAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KRProxy(IMeterAsset modelElement) : 
                    base(modelElement, "kR")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.KR;
                }
                set
                {
                    this.ModelElement.KR = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kH property
        /// </summary>
        private sealed class KHProxy : ModelPropertyChange<IMeterAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KHProxy(IMeterAsset modelElement) : 
                    base(modelElement, "kH")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.KH;
                }
                set
                {
                    this.ModelElement.KH = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the formNumber property
        /// </summary>
        private sealed class FormNumberProxy : ModelPropertyChange<IMeterAsset, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FormNumberProxy(IMeterAsset modelElement) : 
                    base(modelElement, "formNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.FormNumber;
                }
                set
                {
                    this.ModelElement.FormNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeterAssetModel property
        /// </summary>
        private sealed class MeterAssetModelProxy : ModelPropertyChange<IMeterAsset, IMeterAssetModel>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeterAssetModelProxy(IMeterAsset modelElement) : 
                    base(modelElement, "MeterAssetModel")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeterAssetModel Value
            {
                get
                {
                    return this.ModelElement.MeterAssetModel;
                }
                set
                {
                    this.ModelElement.MeterAssetModel = value;
                }
            }
        }
    }
}

