//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.Metering
{
    
    
    /// <summary>
    /// The public interface for ServiceDeliveryPoint
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ServiceDeliveryPoint))]
    [XmlDefaultImplementationTypeAttribute(typeof(ServiceDeliveryPoint))]
    public interface IServiceDeliveryPoint : IModelElement, IIdentifiedObject
    {
        
        /// <summary>
        /// The phaseCode property
        /// </summary>
        Nullable<PhaseCode> PhaseCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ratedPower property
        /// </summary>
        float RatedPower
        {
            get;
            set;
        }
        
        /// <summary>
        /// The grounded property
        /// </summary>
        bool Grounded
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ratedCurrent property
        /// </summary>
        float RatedCurrent
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nominalServiceVoltage property
        /// </summary>
        int NominalServiceVoltage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The estimatedLoad property
        /// </summary>
        float EstimatedLoad
        {
            get;
            set;
        }
        
        /// <summary>
        /// The servicePriority property
        /// </summary>
        string ServicePriority
        {
            get;
            set;
        }
        
        /// <summary>
        /// The serviceDeliveryRemark property
        /// </summary>
        string ServiceDeliveryRemark
        {
            get;
            set;
        }
        
        /// <summary>
        /// The checkBilling property
        /// </summary>
        bool CheckBilling
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ctptReference property
        /// </summary>
        int CtptReference
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ServiceLocation property
        /// </summary>
        IServiceLocation ServiceLocation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The PowerQualityPricings property
        /// </summary>
        IOrderedSetExpression<IPowerQualityPricing> PowerQualityPricings
        {
            get;
        }
        
        /// <summary>
        /// The CustomerAgreement property
        /// </summary>
        ICustomerAgreement CustomerAgreement
        {
            get;
            set;
        }
        
        /// <summary>
        /// The EnergyConsumer property
        /// </summary>
        IEnergyConsumer EnergyConsumer
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ServiceCategory property
        /// </summary>
        IServiceCategory ServiceCategory
        {
            get;
            set;
        }
        
        /// <summary>
        /// The EndDeviceAssets property
        /// </summary>
        IOrderedSetExpression<IEndDeviceAsset> EndDeviceAssets
        {
            get;
        }
        
        /// <summary>
        /// The ServiceSupplier property
        /// </summary>
        IServiceSupplier ServiceSupplier
        {
            get;
            set;
        }
        
        /// <summary>
        /// The PricingStructures property
        /// </summary>
        IOrderedSetExpression<IPricingStructure> PricingStructures
        {
            get;
        }
        
        /// <summary>
        /// The Transformer property
        /// </summary>
        IDistributionTransformer Transformer
        {
            get;
            set;
        }
        
        /// <summary>
        /// The MeterReadings property
        /// </summary>
        IOrderedSetExpression<IMeterReading> MeterReadings
        {
            get;
        }
        
        /// <summary>
        /// The SDPLocations property
        /// </summary>
        IOrderedSetExpression<ISDPLocation> SDPLocations
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the PhaseCode property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhaseCodeChanging;
        
        /// <summary>
        /// Gets fired when the PhaseCode property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhaseCodeChanged;
        
        /// <summary>
        /// Gets fired before the RatedPower property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedPowerChanging;
        
        /// <summary>
        /// Gets fired when the RatedPower property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedPowerChanged;
        
        /// <summary>
        /// Gets fired before the Grounded property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GroundedChanging;
        
        /// <summary>
        /// Gets fired when the Grounded property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GroundedChanged;
        
        /// <summary>
        /// Gets fired before the RatedCurrent property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedCurrentChanging;
        
        /// <summary>
        /// Gets fired when the RatedCurrent property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RatedCurrentChanged;
        
        /// <summary>
        /// Gets fired before the NominalServiceVoltage property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NominalServiceVoltageChanging;
        
        /// <summary>
        /// Gets fired when the NominalServiceVoltage property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NominalServiceVoltageChanged;
        
        /// <summary>
        /// Gets fired before the EstimatedLoad property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EstimatedLoadChanging;
        
        /// <summary>
        /// Gets fired when the EstimatedLoad property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EstimatedLoadChanged;
        
        /// <summary>
        /// Gets fired before the ServicePriority property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ServicePriorityChanging;
        
        /// <summary>
        /// Gets fired when the ServicePriority property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ServicePriorityChanged;
        
        /// <summary>
        /// Gets fired before the ServiceDeliveryRemark property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ServiceDeliveryRemarkChanging;
        
        /// <summary>
        /// Gets fired when the ServiceDeliveryRemark property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ServiceDeliveryRemarkChanged;
        
        /// <summary>
        /// Gets fired before the CheckBilling property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CheckBillingChanging;
        
        /// <summary>
        /// Gets fired when the CheckBilling property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CheckBillingChanged;
        
        /// <summary>
        /// Gets fired before the CtptReference property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CtptReferenceChanging;
        
        /// <summary>
        /// Gets fired when the CtptReference property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CtptReferenceChanged;
        
        /// <summary>
        /// Gets fired before the ServiceLocation property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ServiceLocationChanging;
        
        /// <summary>
        /// Gets fired when the ServiceLocation property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ServiceLocationChanged;
        
        /// <summary>
        /// Gets fired before the CustomerAgreement property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CustomerAgreementChanging;
        
        /// <summary>
        /// Gets fired when the CustomerAgreement property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CustomerAgreementChanged;
        
        /// <summary>
        /// Gets fired before the EnergyConsumer property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EnergyConsumerChanging;
        
        /// <summary>
        /// Gets fired when the EnergyConsumer property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EnergyConsumerChanged;
        
        /// <summary>
        /// Gets fired before the ServiceCategory property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ServiceCategoryChanging;
        
        /// <summary>
        /// Gets fired when the ServiceCategory property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ServiceCategoryChanged;
        
        /// <summary>
        /// Gets fired before the ServiceSupplier property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ServiceSupplierChanging;
        
        /// <summary>
        /// Gets fired when the ServiceSupplier property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ServiceSupplierChanged;
        
        /// <summary>
        /// Gets fired before the Transformer property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TransformerChanging;
        
        /// <summary>
        /// Gets fired when the Transformer property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TransformerChanged;
    }
}

