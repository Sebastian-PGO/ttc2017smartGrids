using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.Metering
{
    
    
    /// <summary>
    /// The default implementation of the ElectricMeteringFunction class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Metering")]
    [XmlNamespacePrefixAttribute("cimMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/ElectricMeteringFunc" +
        "tion")]
    [DebuggerDisplayAttribute("ElectricMeteringFunction {UUID}")]
    public partial class ElectricMeteringFunction : DeviceFunction, IElectricMeteringFunction, IModelElement
    {
        
        /// <summary>
        /// The backing field for the DemandMultiplierApplied property
        /// </summary>
        private bool _demandMultiplierApplied;
        
        private static Lazy<ITypedElement> _demandMultiplierAppliedAttribute = new Lazy<ITypedElement>(RetrieveDemandMultiplierAppliedAttribute);
        
        /// <summary>
        /// The backing field for the TransformerCTRatio property
        /// </summary>
        private float _transformerCTRatio;
        
        private static Lazy<ITypedElement> _transformerCTRatioAttribute = new Lazy<ITypedElement>(RetrieveTransformerCTRatioAttribute);
        
        /// <summary>
        /// The backing field for the BillingMultiplier property
        /// </summary>
        private float _billingMultiplier;
        
        private static Lazy<ITypedElement> _billingMultiplierAttribute = new Lazy<ITypedElement>(RetrieveBillingMultiplierAttribute);
        
        /// <summary>
        /// The backing field for the CurrentRating property
        /// </summary>
        private float _currentRating;
        
        private static Lazy<ITypedElement> _currentRatingAttribute = new Lazy<ITypedElement>(RetrieveCurrentRatingAttribute);
        
        /// <summary>
        /// The backing field for the TransformerRatiosApplied property
        /// </summary>
        private bool _transformerRatiosApplied;
        
        private static Lazy<ITypedElement> _transformerRatiosAppliedAttribute = new Lazy<ITypedElement>(RetrieveTransformerRatiosAppliedAttribute);
        
        /// <summary>
        /// The backing field for the KWMultiplier property
        /// </summary>
        private int _kWMultiplier;
        
        private static Lazy<ITypedElement> _kWMultiplierAttribute = new Lazy<ITypedElement>(RetrieveKWMultiplierAttribute);
        
        /// <summary>
        /// The backing field for the BillingMultiplierApplied property
        /// </summary>
        private bool _billingMultiplierApplied;
        
        private static Lazy<ITypedElement> _billingMultiplierAppliedAttribute = new Lazy<ITypedElement>(RetrieveBillingMultiplierAppliedAttribute);
        
        /// <summary>
        /// The backing field for the DemandMultiplier property
        /// </summary>
        private float _demandMultiplier;
        
        private static Lazy<ITypedElement> _demandMultiplierAttribute = new Lazy<ITypedElement>(RetrieveDemandMultiplierAttribute);
        
        /// <summary>
        /// The backing field for the KWhMultiplier property
        /// </summary>
        private int _kWhMultiplier;
        
        private static Lazy<ITypedElement> _kWhMultiplierAttribute = new Lazy<ITypedElement>(RetrieveKWhMultiplierAttribute);
        
        /// <summary>
        /// The backing field for the TransformerVTRatio property
        /// </summary>
        private float _transformerVTRatio;
        
        private static Lazy<ITypedElement> _transformerVTRatioAttribute = new Lazy<ITypedElement>(RetrieveTransformerVTRatioAttribute);
        
        /// <summary>
        /// The backing field for the VoltageRating property
        /// </summary>
        private float _voltageRating;
        
        private static Lazy<ITypedElement> _voltageRatingAttribute = new Lazy<ITypedElement>(RetrieveVoltageRatingAttribute);
        
        private static Lazy<ITypedElement> _meteringFunctionConfigurationReference = new Lazy<ITypedElement>(RetrieveMeteringFunctionConfigurationReference);
        
        /// <summary>
        /// The backing field for the MeteringFunctionConfiguration property
        /// </summary>
        private IMeteringFunctionConfiguration _meteringFunctionConfiguration;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The demandMultiplierApplied property
        /// </summary>
        [XmlElementNameAttribute("demandMultiplierApplied")]
        [XmlAttributeAttribute(true)]
        public virtual bool DemandMultiplierApplied
        {
            get
            {
                return this._demandMultiplierApplied;
            }
            set
            {
                if ((this._demandMultiplierApplied != value))
                {
                    bool old = this._demandMultiplierApplied;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDemandMultiplierAppliedChanging(e);
                    this.OnPropertyChanging("DemandMultiplierApplied", e, _demandMultiplierAppliedAttribute);
                    this._demandMultiplierApplied = value;
                    this.OnDemandMultiplierAppliedChanged(e);
                    this.OnPropertyChanged("DemandMultiplierApplied", e, _demandMultiplierAppliedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The transformerCTRatio property
        /// </summary>
        [XmlElementNameAttribute("transformerCTRatio")]
        [XmlAttributeAttribute(true)]
        public virtual float TransformerCTRatio
        {
            get
            {
                return this._transformerCTRatio;
            }
            set
            {
                if ((this._transformerCTRatio != value))
                {
                    float old = this._transformerCTRatio;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerCTRatioChanging(e);
                    this.OnPropertyChanging("TransformerCTRatio", e, _transformerCTRatioAttribute);
                    this._transformerCTRatio = value;
                    this.OnTransformerCTRatioChanged(e);
                    this.OnPropertyChanged("TransformerCTRatio", e, _transformerCTRatioAttribute);
                }
            }
        }
        
        /// <summary>
        /// The billingMultiplier property
        /// </summary>
        [XmlElementNameAttribute("billingMultiplier")]
        [XmlAttributeAttribute(true)]
        public virtual float BillingMultiplier
        {
            get
            {
                return this._billingMultiplier;
            }
            set
            {
                if ((this._billingMultiplier != value))
                {
                    float old = this._billingMultiplier;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBillingMultiplierChanging(e);
                    this.OnPropertyChanging("BillingMultiplier", e, _billingMultiplierAttribute);
                    this._billingMultiplier = value;
                    this.OnBillingMultiplierChanged(e);
                    this.OnPropertyChanged("BillingMultiplier", e, _billingMultiplierAttribute);
                }
            }
        }
        
        /// <summary>
        /// The currentRating property
        /// </summary>
        [XmlElementNameAttribute("currentRating")]
        [XmlAttributeAttribute(true)]
        public virtual float CurrentRating
        {
            get
            {
                return this._currentRating;
            }
            set
            {
                if ((this._currentRating != value))
                {
                    float old = this._currentRating;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurrentRatingChanging(e);
                    this.OnPropertyChanging("CurrentRating", e, _currentRatingAttribute);
                    this._currentRating = value;
                    this.OnCurrentRatingChanged(e);
                    this.OnPropertyChanged("CurrentRating", e, _currentRatingAttribute);
                }
            }
        }
        
        /// <summary>
        /// The transformerRatiosApplied property
        /// </summary>
        [XmlElementNameAttribute("transformerRatiosApplied")]
        [XmlAttributeAttribute(true)]
        public virtual bool TransformerRatiosApplied
        {
            get
            {
                return this._transformerRatiosApplied;
            }
            set
            {
                if ((this._transformerRatiosApplied != value))
                {
                    bool old = this._transformerRatiosApplied;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerRatiosAppliedChanging(e);
                    this.OnPropertyChanging("TransformerRatiosApplied", e, _transformerRatiosAppliedAttribute);
                    this._transformerRatiosApplied = value;
                    this.OnTransformerRatiosAppliedChanged(e);
                    this.OnPropertyChanged("TransformerRatiosApplied", e, _transformerRatiosAppliedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The kWMultiplier property
        /// </summary>
        [XmlElementNameAttribute("kWMultiplier")]
        [XmlAttributeAttribute(true)]
        public virtual int KWMultiplier
        {
            get
            {
                return this._kWMultiplier;
            }
            set
            {
                if ((this._kWMultiplier != value))
                {
                    int old = this._kWMultiplier;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKWMultiplierChanging(e);
                    this.OnPropertyChanging("KWMultiplier", e, _kWMultiplierAttribute);
                    this._kWMultiplier = value;
                    this.OnKWMultiplierChanged(e);
                    this.OnPropertyChanged("KWMultiplier", e, _kWMultiplierAttribute);
                }
            }
        }
        
        /// <summary>
        /// The billingMultiplierApplied property
        /// </summary>
        [XmlElementNameAttribute("billingMultiplierApplied")]
        [XmlAttributeAttribute(true)]
        public virtual bool BillingMultiplierApplied
        {
            get
            {
                return this._billingMultiplierApplied;
            }
            set
            {
                if ((this._billingMultiplierApplied != value))
                {
                    bool old = this._billingMultiplierApplied;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBillingMultiplierAppliedChanging(e);
                    this.OnPropertyChanging("BillingMultiplierApplied", e, _billingMultiplierAppliedAttribute);
                    this._billingMultiplierApplied = value;
                    this.OnBillingMultiplierAppliedChanged(e);
                    this.OnPropertyChanged("BillingMultiplierApplied", e, _billingMultiplierAppliedAttribute);
                }
            }
        }
        
        /// <summary>
        /// The demandMultiplier property
        /// </summary>
        [XmlElementNameAttribute("demandMultiplier")]
        [XmlAttributeAttribute(true)]
        public virtual float DemandMultiplier
        {
            get
            {
                return this._demandMultiplier;
            }
            set
            {
                if ((this._demandMultiplier != value))
                {
                    float old = this._demandMultiplier;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDemandMultiplierChanging(e);
                    this.OnPropertyChanging("DemandMultiplier", e, _demandMultiplierAttribute);
                    this._demandMultiplier = value;
                    this.OnDemandMultiplierChanged(e);
                    this.OnPropertyChanged("DemandMultiplier", e, _demandMultiplierAttribute);
                }
            }
        }
        
        /// <summary>
        /// The kWhMultiplier property
        /// </summary>
        [XmlElementNameAttribute("kWhMultiplier")]
        [XmlAttributeAttribute(true)]
        public virtual int KWhMultiplier
        {
            get
            {
                return this._kWhMultiplier;
            }
            set
            {
                if ((this._kWhMultiplier != value))
                {
                    int old = this._kWhMultiplier;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKWhMultiplierChanging(e);
                    this.OnPropertyChanging("KWhMultiplier", e, _kWhMultiplierAttribute);
                    this._kWhMultiplier = value;
                    this.OnKWhMultiplierChanged(e);
                    this.OnPropertyChanged("KWhMultiplier", e, _kWhMultiplierAttribute);
                }
            }
        }
        
        /// <summary>
        /// The transformerVTRatio property
        /// </summary>
        [XmlElementNameAttribute("transformerVTRatio")]
        [XmlAttributeAttribute(true)]
        public virtual float TransformerVTRatio
        {
            get
            {
                return this._transformerVTRatio;
            }
            set
            {
                if ((this._transformerVTRatio != value))
                {
                    float old = this._transformerVTRatio;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerVTRatioChanging(e);
                    this.OnPropertyChanging("TransformerVTRatio", e, _transformerVTRatioAttribute);
                    this._transformerVTRatio = value;
                    this.OnTransformerVTRatioChanged(e);
                    this.OnPropertyChanged("TransformerVTRatio", e, _transformerVTRatioAttribute);
                }
            }
        }
        
        /// <summary>
        /// The voltageRating property
        /// </summary>
        [XmlElementNameAttribute("voltageRating")]
        [XmlAttributeAttribute(true)]
        public virtual float VoltageRating
        {
            get
            {
                return this._voltageRating;
            }
            set
            {
                if ((this._voltageRating != value))
                {
                    float old = this._voltageRating;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnVoltageRatingChanging(e);
                    this.OnPropertyChanging("VoltageRating", e, _voltageRatingAttribute);
                    this._voltageRating = value;
                    this.OnVoltageRatingChanged(e);
                    this.OnPropertyChanged("VoltageRating", e, _voltageRatingAttribute);
                }
            }
        }
        
        /// <summary>
        /// The MeteringFunctionConfiguration property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ElectricMeteringFunctions")]
        public virtual IMeteringFunctionConfiguration MeteringFunctionConfiguration
        {
            get
            {
                return this._meteringFunctionConfiguration;
            }
            set
            {
                if ((this._meteringFunctionConfiguration != value))
                {
                    IMeteringFunctionConfiguration old = this._meteringFunctionConfiguration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeteringFunctionConfigurationChanging(e);
                    this.OnPropertyChanging("MeteringFunctionConfiguration", e, _meteringFunctionConfigurationReference);
                    this._meteringFunctionConfiguration = value;
                    if ((old != null))
                    {
                        old.ElectricMeteringFunctions.Remove(this);
                        old.Deleted -= this.OnResetMeteringFunctionConfiguration;
                    }
                    if ((value != null))
                    {
                        value.ElectricMeteringFunctions.Add(this);
                        value.Deleted += this.OnResetMeteringFunctionConfiguration;
                    }
                    this.OnMeteringFunctionConfigurationChanged(e);
                    this.OnPropertyChanged("MeteringFunctionConfiguration", e, _meteringFunctionConfigurationReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new ElectricMeteringFunctionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/ElectricMeteringFunc" +
                            "tion")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the DemandMultiplierApplied property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DemandMultiplierAppliedChanging;
        
        /// <summary>
        /// Gets fired when the DemandMultiplierApplied property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DemandMultiplierAppliedChanged;
        
        /// <summary>
        /// Gets fired before the TransformerCTRatio property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerCTRatioChanging;
        
        /// <summary>
        /// Gets fired when the TransformerCTRatio property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerCTRatioChanged;
        
        /// <summary>
        /// Gets fired before the BillingMultiplier property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillingMultiplierChanging;
        
        /// <summary>
        /// Gets fired when the BillingMultiplier property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillingMultiplierChanged;
        
        /// <summary>
        /// Gets fired before the CurrentRating property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentRatingChanging;
        
        /// <summary>
        /// Gets fired when the CurrentRating property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentRatingChanged;
        
        /// <summary>
        /// Gets fired before the TransformerRatiosApplied property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerRatiosAppliedChanging;
        
        /// <summary>
        /// Gets fired when the TransformerRatiosApplied property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerRatiosAppliedChanged;
        
        /// <summary>
        /// Gets fired before the KWMultiplier property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KWMultiplierChanging;
        
        /// <summary>
        /// Gets fired when the KWMultiplier property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KWMultiplierChanged;
        
        /// <summary>
        /// Gets fired before the BillingMultiplierApplied property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillingMultiplierAppliedChanging;
        
        /// <summary>
        /// Gets fired when the BillingMultiplierApplied property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillingMultiplierAppliedChanged;
        
        /// <summary>
        /// Gets fired before the DemandMultiplier property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DemandMultiplierChanging;
        
        /// <summary>
        /// Gets fired when the DemandMultiplier property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DemandMultiplierChanged;
        
        /// <summary>
        /// Gets fired before the KWhMultiplier property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KWhMultiplierChanging;
        
        /// <summary>
        /// Gets fired when the KWhMultiplier property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KWhMultiplierChanged;
        
        /// <summary>
        /// Gets fired before the TransformerVTRatio property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerVTRatioChanging;
        
        /// <summary>
        /// Gets fired when the TransformerVTRatio property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerVTRatioChanged;
        
        /// <summary>
        /// Gets fired before the VoltageRating property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageRatingChanging;
        
        /// <summary>
        /// Gets fired when the VoltageRating property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> VoltageRatingChanged;
        
        /// <summary>
        /// Gets fired before the MeteringFunctionConfiguration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeteringFunctionConfigurationChanging;
        
        /// <summary>
        /// Gets fired when the MeteringFunctionConfiguration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeteringFunctionConfigurationChanged;
        
        private static ITypedElement RetrieveDemandMultiplierAppliedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricMeteringFunction.ClassInstance)).Resolve("demandMultiplierApplied")));
        }
        
        /// <summary>
        /// Raises the DemandMultiplierAppliedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDemandMultiplierAppliedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DemandMultiplierAppliedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DemandMultiplierAppliedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDemandMultiplierAppliedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DemandMultiplierAppliedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransformerCTRatioAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricMeteringFunction.ClassInstance)).Resolve("transformerCTRatio")));
        }
        
        /// <summary>
        /// Raises the TransformerCTRatioChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerCTRatioChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerCTRatioChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformerCTRatioChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerCTRatioChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerCTRatioChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBillingMultiplierAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricMeteringFunction.ClassInstance)).Resolve("billingMultiplier")));
        }
        
        /// <summary>
        /// Raises the BillingMultiplierChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingMultiplierChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillingMultiplierChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BillingMultiplierChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingMultiplierChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillingMultiplierChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCurrentRatingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricMeteringFunction.ClassInstance)).Resolve("currentRating")));
        }
        
        /// <summary>
        /// Raises the CurrentRatingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentRatingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentRatingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentRatingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentRatingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentRatingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransformerRatiosAppliedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricMeteringFunction.ClassInstance)).Resolve("transformerRatiosApplied")));
        }
        
        /// <summary>
        /// Raises the TransformerRatiosAppliedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerRatiosAppliedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerRatiosAppliedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformerRatiosAppliedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerRatiosAppliedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerRatiosAppliedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveKWMultiplierAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricMeteringFunction.ClassInstance)).Resolve("kWMultiplier")));
        }
        
        /// <summary>
        /// Raises the KWMultiplierChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKWMultiplierChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KWMultiplierChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KWMultiplierChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKWMultiplierChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KWMultiplierChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBillingMultiplierAppliedAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricMeteringFunction.ClassInstance)).Resolve("billingMultiplierApplied")));
        }
        
        /// <summary>
        /// Raises the BillingMultiplierAppliedChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingMultiplierAppliedChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillingMultiplierAppliedChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BillingMultiplierAppliedChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingMultiplierAppliedChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillingMultiplierAppliedChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDemandMultiplierAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricMeteringFunction.ClassInstance)).Resolve("demandMultiplier")));
        }
        
        /// <summary>
        /// Raises the DemandMultiplierChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDemandMultiplierChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DemandMultiplierChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DemandMultiplierChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDemandMultiplierChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DemandMultiplierChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveKWhMultiplierAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricMeteringFunction.ClassInstance)).Resolve("kWhMultiplier")));
        }
        
        /// <summary>
        /// Raises the KWhMultiplierChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKWhMultiplierChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KWhMultiplierChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KWhMultiplierChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKWhMultiplierChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KWhMultiplierChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTransformerVTRatioAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricMeteringFunction.ClassInstance)).Resolve("transformerVTRatio")));
        }
        
        /// <summary>
        /// Raises the TransformerVTRatioChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerVTRatioChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerVTRatioChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformerVTRatioChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerVTRatioChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerVTRatioChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveVoltageRatingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricMeteringFunction.ClassInstance)).Resolve("voltageRating")));
        }
        
        /// <summary>
        /// Raises the VoltageRatingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageRatingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageRatingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the VoltageRatingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnVoltageRatingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.VoltageRatingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMeteringFunctionConfigurationReference()
        {
            return ((ITypedElement)(((ModelElement)(ElectricMeteringFunction.ClassInstance)).Resolve("MeteringFunctionConfiguration")));
        }
        
        /// <summary>
        /// Raises the MeteringFunctionConfigurationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeteringFunctionConfigurationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeteringFunctionConfigurationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeteringFunctionConfigurationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeteringFunctionConfigurationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeteringFunctionConfigurationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MeteringFunctionConfiguration property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeteringFunctionConfiguration(object sender, System.EventArgs eventArgs)
        {
            this.MeteringFunctionConfiguration = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "DEMANDMULTIPLIERAPPLIED"))
            {
                return this.DemandMultiplierApplied;
            }
            if ((attribute == "TRANSFORMERCTRATIO"))
            {
                return this.TransformerCTRatio;
            }
            if ((attribute == "BILLINGMULTIPLIER"))
            {
                return this.BillingMultiplier;
            }
            if ((attribute == "CURRENTRATING"))
            {
                return this.CurrentRating;
            }
            if ((attribute == "TRANSFORMERRATIOSAPPLIED"))
            {
                return this.TransformerRatiosApplied;
            }
            if ((attribute == "KWMULTIPLIER"))
            {
                return this.KWMultiplier;
            }
            if ((attribute == "BILLINGMULTIPLIERAPPLIED"))
            {
                return this.BillingMultiplierApplied;
            }
            if ((attribute == "DEMANDMULTIPLIER"))
            {
                return this.DemandMultiplier;
            }
            if ((attribute == "KWHMULTIPLIER"))
            {
                return this.KWhMultiplier;
            }
            if ((attribute == "TRANSFORMERVTRATIO"))
            {
                return this.TransformerVTRatio;
            }
            if ((attribute == "VOLTAGERATING"))
            {
                return this.VoltageRating;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "METERINGFUNCTIONCONFIGURATION"))
            {
                this.MeteringFunctionConfiguration = ((IMeteringFunctionConfiguration)(value));
                return;
            }
            if ((feature == "DEMANDMULTIPLIERAPPLIED"))
            {
                this.DemandMultiplierApplied = ((bool)(value));
                return;
            }
            if ((feature == "TRANSFORMERCTRATIO"))
            {
                this.TransformerCTRatio = ((float)(value));
                return;
            }
            if ((feature == "BILLINGMULTIPLIER"))
            {
                this.BillingMultiplier = ((float)(value));
                return;
            }
            if ((feature == "CURRENTRATING"))
            {
                this.CurrentRating = ((float)(value));
                return;
            }
            if ((feature == "TRANSFORMERRATIOSAPPLIED"))
            {
                this.TransformerRatiosApplied = ((bool)(value));
                return;
            }
            if ((feature == "KWMULTIPLIER"))
            {
                this.KWMultiplier = ((int)(value));
                return;
            }
            if ((feature == "BILLINGMULTIPLIERAPPLIED"))
            {
                this.BillingMultiplierApplied = ((bool)(value));
                return;
            }
            if ((feature == "DEMANDMULTIPLIER"))
            {
                this.DemandMultiplier = ((float)(value));
                return;
            }
            if ((feature == "KWHMULTIPLIER"))
            {
                this.KWhMultiplier = ((int)(value));
                return;
            }
            if ((feature == "TRANSFORMERVTRATIO"))
            {
                this.TransformerVTRatio = ((float)(value));
                return;
            }
            if ((feature == "VOLTAGERATING"))
            {
                this.VoltageRating = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "MeteringFunctionConfiguration"))
            {
                return new MeteringFunctionConfigurationProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "MeteringFunctionConfiguration"))
            {
                return new MeteringFunctionConfigurationProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/ElectricMeteringFunc" +
                        "tion")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the ElectricMeteringFunction class
        /// </summary>
        public class ElectricMeteringFunctionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private ElectricMeteringFunction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public ElectricMeteringFunctionReferencedElementsCollection(ElectricMeteringFunction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.MeteringFunctionConfiguration != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.MeteringFunctionConfigurationChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.MeteringFunctionConfigurationChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.MeteringFunctionConfiguration == null))
                {
                    IMeteringFunctionConfiguration meteringFunctionConfigurationCasted = item.As<IMeteringFunctionConfiguration>();
                    if ((meteringFunctionConfigurationCasted != null))
                    {
                        this._parent.MeteringFunctionConfiguration = meteringFunctionConfigurationCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.MeteringFunctionConfiguration = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.MeteringFunctionConfiguration))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.MeteringFunctionConfiguration != null))
                {
                    array[arrayIndex] = this._parent.MeteringFunctionConfiguration;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.MeteringFunctionConfiguration == item))
                {
                    this._parent.MeteringFunctionConfiguration = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.MeteringFunctionConfiguration).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the demandMultiplierApplied property
        /// </summary>
        private sealed class DemandMultiplierAppliedProxy : ModelPropertyChange<IElectricMeteringFunction, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DemandMultiplierAppliedProxy(IElectricMeteringFunction modelElement) : 
                    base(modelElement, "demandMultiplierApplied")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.DemandMultiplierApplied;
                }
                set
                {
                    this.ModelElement.DemandMultiplierApplied = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the transformerCTRatio property
        /// </summary>
        private sealed class TransformerCTRatioProxy : ModelPropertyChange<IElectricMeteringFunction, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformerCTRatioProxy(IElectricMeteringFunction modelElement) : 
                    base(modelElement, "transformerCTRatio")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TransformerCTRatio;
                }
                set
                {
                    this.ModelElement.TransformerCTRatio = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the billingMultiplier property
        /// </summary>
        private sealed class BillingMultiplierProxy : ModelPropertyChange<IElectricMeteringFunction, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BillingMultiplierProxy(IElectricMeteringFunction modelElement) : 
                    base(modelElement, "billingMultiplier")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.BillingMultiplier;
                }
                set
                {
                    this.ModelElement.BillingMultiplier = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the currentRating property
        /// </summary>
        private sealed class CurrentRatingProxy : ModelPropertyChange<IElectricMeteringFunction, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurrentRatingProxy(IElectricMeteringFunction modelElement) : 
                    base(modelElement, "currentRating")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CurrentRating;
                }
                set
                {
                    this.ModelElement.CurrentRating = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the transformerRatiosApplied property
        /// </summary>
        private sealed class TransformerRatiosAppliedProxy : ModelPropertyChange<IElectricMeteringFunction, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformerRatiosAppliedProxy(IElectricMeteringFunction modelElement) : 
                    base(modelElement, "transformerRatiosApplied")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.TransformerRatiosApplied;
                }
                set
                {
                    this.ModelElement.TransformerRatiosApplied = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kWMultiplier property
        /// </summary>
        private sealed class KWMultiplierProxy : ModelPropertyChange<IElectricMeteringFunction, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KWMultiplierProxy(IElectricMeteringFunction modelElement) : 
                    base(modelElement, "kWMultiplier")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.KWMultiplier;
                }
                set
                {
                    this.ModelElement.KWMultiplier = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the billingMultiplierApplied property
        /// </summary>
        private sealed class BillingMultiplierAppliedProxy : ModelPropertyChange<IElectricMeteringFunction, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BillingMultiplierAppliedProxy(IElectricMeteringFunction modelElement) : 
                    base(modelElement, "billingMultiplierApplied")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.BillingMultiplierApplied;
                }
                set
                {
                    this.ModelElement.BillingMultiplierApplied = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the demandMultiplier property
        /// </summary>
        private sealed class DemandMultiplierProxy : ModelPropertyChange<IElectricMeteringFunction, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DemandMultiplierProxy(IElectricMeteringFunction modelElement) : 
                    base(modelElement, "demandMultiplier")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.DemandMultiplier;
                }
                set
                {
                    this.ModelElement.DemandMultiplier = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kWhMultiplier property
        /// </summary>
        private sealed class KWhMultiplierProxy : ModelPropertyChange<IElectricMeteringFunction, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KWhMultiplierProxy(IElectricMeteringFunction modelElement) : 
                    base(modelElement, "kWhMultiplier")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.KWhMultiplier;
                }
                set
                {
                    this.ModelElement.KWhMultiplier = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the transformerVTRatio property
        /// </summary>
        private sealed class TransformerVTRatioProxy : ModelPropertyChange<IElectricMeteringFunction, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformerVTRatioProxy(IElectricMeteringFunction modelElement) : 
                    base(modelElement, "transformerVTRatio")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TransformerVTRatio;
                }
                set
                {
                    this.ModelElement.TransformerVTRatio = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the voltageRating property
        /// </summary>
        private sealed class VoltageRatingProxy : ModelPropertyChange<IElectricMeteringFunction, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public VoltageRatingProxy(IElectricMeteringFunction modelElement) : 
                    base(modelElement, "voltageRating")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.VoltageRating;
                }
                set
                {
                    this.ModelElement.VoltageRating = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeteringFunctionConfiguration property
        /// </summary>
        private sealed class MeteringFunctionConfigurationProxy : ModelPropertyChange<IElectricMeteringFunction, IMeteringFunctionConfiguration>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeteringFunctionConfigurationProxy(IElectricMeteringFunction modelElement) : 
                    base(modelElement, "MeteringFunctionConfiguration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeteringFunctionConfiguration Value
            {
                get
                {
                    return this.ModelElement.MeteringFunctionConfiguration;
                }
                set
                {
                    this.ModelElement.MeteringFunctionConfiguration = value;
                }
            }
        }
    }
}

