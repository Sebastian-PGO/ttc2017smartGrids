using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.Metering
{
    
    
    /// <summary>
    /// The default implementation of the MeterReading class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Metering")]
    [XmlNamespacePrefixAttribute("cimMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/MeterReading")]
    [DebuggerDisplayAttribute("MeterReading {UUID}")]
    public partial class MeterReading : IdentifiedObject, IMeterReading, IModelElement
    {
        
        private static Lazy<ITypedElement> _endDeviceEventsReference = new Lazy<ITypedElement>(RetrieveEndDeviceEventsReference);
        
        /// <summary>
        /// The backing field for the EndDeviceEvents property
        /// </summary>
        private MeterReadingEndDeviceEventsCollection _endDeviceEvents;
        
        private static Lazy<ITypedElement> _serviceDeliveryPointReference = new Lazy<ITypedElement>(RetrieveServiceDeliveryPointReference);
        
        /// <summary>
        /// The backing field for the ServiceDeliveryPoint property
        /// </summary>
        private IServiceDeliveryPoint _serviceDeliveryPoint;
        
        private static Lazy<ITypedElement> _customerAgreementReference = new Lazy<ITypedElement>(RetrieveCustomerAgreementReference);
        
        /// <summary>
        /// The backing field for the CustomerAgreement property
        /// </summary>
        private ICustomerAgreement _customerAgreement;
        
        private static Lazy<ITypedElement> _meterAssetReference = new Lazy<ITypedElement>(RetrieveMeterAssetReference);
        
        /// <summary>
        /// The backing field for the MeterAsset property
        /// </summary>
        private IMeterAsset _meterAsset;
        
        private static Lazy<ITypedElement> _valuesIntervalReference = new Lazy<ITypedElement>(RetrieveValuesIntervalReference);
        
        /// <summary>
        /// The backing field for the ValuesInterval property
        /// </summary>
        private IDateTimeInterval _valuesInterval;
        
        private static Lazy<ITypedElement> _readingsReference = new Lazy<ITypedElement>(RetrieveReadingsReference);
        
        /// <summary>
        /// The backing field for the Readings property
        /// </summary>
        private MeterReadingReadingsCollection _readings;
        
        private static Lazy<ITypedElement> _intervalBlocksReference = new Lazy<ITypedElement>(RetrieveIntervalBlocksReference);
        
        /// <summary>
        /// The backing field for the IntervalBlocks property
        /// </summary>
        private MeterReadingIntervalBlocksCollection _intervalBlocks;
        
        private static IClass _classInstance;
        
        public MeterReading()
        {
            this._endDeviceEvents = new MeterReadingEndDeviceEventsCollection(this);
            this._endDeviceEvents.CollectionChanging += this.EndDeviceEventsCollectionChanging;
            this._endDeviceEvents.CollectionChanged += this.EndDeviceEventsCollectionChanged;
            this._readings = new MeterReadingReadingsCollection(this);
            this._readings.CollectionChanging += this.ReadingsCollectionChanging;
            this._readings.CollectionChanged += this.ReadingsCollectionChanged;
            this._intervalBlocks = new MeterReadingIntervalBlocksCollection(this);
            this._intervalBlocks.CollectionChanging += this.IntervalBlocksCollectionChanging;
            this._intervalBlocks.CollectionChanged += this.IntervalBlocksCollectionChanged;
        }
        
        /// <summary>
        /// The EndDeviceEvents property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MeterReading")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IEndDeviceEvent> EndDeviceEvents
        {
            get
            {
                return this._endDeviceEvents;
            }
        }
        
        /// <summary>
        /// The ServiceDeliveryPoint property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MeterReadings")]
        public virtual IServiceDeliveryPoint ServiceDeliveryPoint
        {
            get
            {
                return this._serviceDeliveryPoint;
            }
            set
            {
                if ((this._serviceDeliveryPoint != value))
                {
                    IServiceDeliveryPoint old = this._serviceDeliveryPoint;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnServiceDeliveryPointChanging(e);
                    this.OnPropertyChanging("ServiceDeliveryPoint", e, _serviceDeliveryPointReference);
                    this._serviceDeliveryPoint = value;
                    if ((old != null))
                    {
                        old.MeterReadings.Remove(this);
                        old.Deleted -= this.OnResetServiceDeliveryPoint;
                    }
                    if ((value != null))
                    {
                        value.MeterReadings.Add(this);
                        value.Deleted += this.OnResetServiceDeliveryPoint;
                    }
                    this.OnServiceDeliveryPointChanged(e);
                    this.OnPropertyChanged("ServiceDeliveryPoint", e, _serviceDeliveryPointReference);
                }
            }
        }
        
        /// <summary>
        /// The CustomerAgreement property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MeterReadings")]
        public virtual ICustomerAgreement CustomerAgreement
        {
            get
            {
                return this._customerAgreement;
            }
            set
            {
                if ((this._customerAgreement != value))
                {
                    ICustomerAgreement old = this._customerAgreement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCustomerAgreementChanging(e);
                    this.OnPropertyChanging("CustomerAgreement", e, _customerAgreementReference);
                    this._customerAgreement = value;
                    if ((old != null))
                    {
                        old.MeterReadings.Remove(this);
                        old.Deleted -= this.OnResetCustomerAgreement;
                    }
                    if ((value != null))
                    {
                        value.MeterReadings.Add(this);
                        value.Deleted += this.OnResetCustomerAgreement;
                    }
                    this.OnCustomerAgreementChanged(e);
                    this.OnPropertyChanged("CustomerAgreement", e, _customerAgreementReference);
                }
            }
        }
        
        /// <summary>
        /// The MeterAsset property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MeterReadings")]
        public virtual IMeterAsset MeterAsset
        {
            get
            {
                return this._meterAsset;
            }
            set
            {
                if ((this._meterAsset != value))
                {
                    IMeterAsset old = this._meterAsset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeterAssetChanging(e);
                    this.OnPropertyChanging("MeterAsset", e, _meterAssetReference);
                    this._meterAsset = value;
                    if ((old != null))
                    {
                        old.MeterReadings.Remove(this);
                        old.Deleted -= this.OnResetMeterAsset;
                    }
                    if ((value != null))
                    {
                        value.MeterReadings.Add(this);
                        value.Deleted += this.OnResetMeterAsset;
                    }
                    this.OnMeterAssetChanged(e);
                    this.OnPropertyChanged("MeterAsset", e, _meterAssetReference);
                }
            }
        }
        
        /// <summary>
        /// The valuesInterval property
        /// </summary>
        [XmlElementNameAttribute("valuesInterval")]
        [XmlAttributeAttribute(true)]
        public virtual IDateTimeInterval ValuesInterval
        {
            get
            {
                return this._valuesInterval;
            }
            set
            {
                if ((this._valuesInterval != value))
                {
                    IDateTimeInterval old = this._valuesInterval;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnValuesIntervalChanging(e);
                    this.OnPropertyChanging("ValuesInterval", e, _valuesIntervalReference);
                    this._valuesInterval = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetValuesInterval;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetValuesInterval;
                    }
                    this.OnValuesIntervalChanged(e);
                    this.OnPropertyChanged("ValuesInterval", e, _valuesIntervalReference);
                }
            }
        }
        
        /// <summary>
        /// The Readings property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MeterReadings")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IReading> Readings
        {
            get
            {
                return this._readings;
            }
        }
        
        /// <summary>
        /// The IntervalBlocks property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MeterReading")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IIntervalBlock> IntervalBlocks
        {
            get
            {
                return this._intervalBlocks;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MeterReadingReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/MeterReading")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ServiceDeliveryPoint property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceDeliveryPointChanging;
        
        /// <summary>
        /// Gets fired when the ServiceDeliveryPoint property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ServiceDeliveryPointChanged;
        
        /// <summary>
        /// Gets fired before the CustomerAgreement property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerAgreementChanging;
        
        /// <summary>
        /// Gets fired when the CustomerAgreement property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerAgreementChanged;
        
        /// <summary>
        /// Gets fired before the MeterAsset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeterAssetChanging;
        
        /// <summary>
        /// Gets fired when the MeterAsset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeterAssetChanged;
        
        /// <summary>
        /// Gets fired before the ValuesInterval property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValuesIntervalChanging;
        
        /// <summary>
        /// Gets fired when the ValuesInterval property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ValuesIntervalChanged;
        
        private static ITypedElement RetrieveEndDeviceEventsReference()
        {
            return ((ITypedElement)(((ModelElement)(MeterReading.ClassInstance)).Resolve("EndDeviceEvents")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the EndDeviceEvents property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EndDeviceEventsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("EndDeviceEvents", e, _endDeviceEventsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the EndDeviceEvents property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void EndDeviceEventsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("EndDeviceEvents", e, _endDeviceEventsReference);
        }
        
        private static ITypedElement RetrieveServiceDeliveryPointReference()
        {
            return ((ITypedElement)(((ModelElement)(MeterReading.ClassInstance)).Resolve("ServiceDeliveryPoint")));
        }
        
        /// <summary>
        /// Raises the ServiceDeliveryPointChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceDeliveryPointChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceDeliveryPointChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ServiceDeliveryPointChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnServiceDeliveryPointChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ServiceDeliveryPointChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ServiceDeliveryPoint property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetServiceDeliveryPoint(object sender, System.EventArgs eventArgs)
        {
            this.ServiceDeliveryPoint = null;
        }
        
        private static ITypedElement RetrieveCustomerAgreementReference()
        {
            return ((ITypedElement)(((ModelElement)(MeterReading.ClassInstance)).Resolve("CustomerAgreement")));
        }
        
        /// <summary>
        /// Raises the CustomerAgreementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerAgreementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerAgreementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CustomerAgreementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerAgreementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerAgreementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CustomerAgreement property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCustomerAgreement(object sender, System.EventArgs eventArgs)
        {
            this.CustomerAgreement = null;
        }
        
        private static ITypedElement RetrieveMeterAssetReference()
        {
            return ((ITypedElement)(((ModelElement)(MeterReading.ClassInstance)).Resolve("MeterAsset")));
        }
        
        /// <summary>
        /// Raises the MeterAssetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeterAssetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeterAssetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeterAssetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeterAssetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeterAssetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MeterAsset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeterAsset(object sender, System.EventArgs eventArgs)
        {
            this.MeterAsset = null;
        }
        
        private static ITypedElement RetrieveValuesIntervalReference()
        {
            return ((ITypedElement)(((ModelElement)(MeterReading.ClassInstance)).Resolve("valuesInterval")));
        }
        
        /// <summary>
        /// Raises the ValuesIntervalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValuesIntervalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValuesIntervalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ValuesIntervalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnValuesIntervalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ValuesIntervalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ValuesInterval property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetValuesInterval(object sender, System.EventArgs eventArgs)
        {
            this.ValuesInterval = null;
        }
        
        private static ITypedElement RetrieveReadingsReference()
        {
            return ((ITypedElement)(((ModelElement)(MeterReading.ClassInstance)).Resolve("Readings")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Readings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReadingsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Readings", e, _readingsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Readings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReadingsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Readings", e, _readingsReference);
        }
        
        private static ITypedElement RetrieveIntervalBlocksReference()
        {
            return ((ITypedElement)(((ModelElement)(MeterReading.ClassInstance)).Resolve("IntervalBlocks")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the IntervalBlocks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IntervalBlocksCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("IntervalBlocks", e, _intervalBlocksReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the IntervalBlocks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IntervalBlocksCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("IntervalBlocks", e, _intervalBlocksReference);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ENDDEVICEEVENTS"))
            {
                return this._endDeviceEvents;
            }
            if ((feature == "READINGS"))
            {
                return this._readings;
            }
            if ((feature == "INTERVALBLOCKS"))
            {
                return this._intervalBlocks;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SERVICEDELIVERYPOINT"))
            {
                this.ServiceDeliveryPoint = ((IServiceDeliveryPoint)(value));
                return;
            }
            if ((feature == "CUSTOMERAGREEMENT"))
            {
                this.CustomerAgreement = ((ICustomerAgreement)(value));
                return;
            }
            if ((feature == "METERASSET"))
            {
                this.MeterAsset = ((IMeterAsset)(value));
                return;
            }
            if ((feature == "VALUESINTERVAL"))
            {
                this.ValuesInterval = ((IDateTimeInterval)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "ServiceDeliveryPoint"))
            {
                return new ServiceDeliveryPointProxy(this);
            }
            if ((attribute == "CustomerAgreement"))
            {
                return new CustomerAgreementProxy(this);
            }
            if ((attribute == "MeterAsset"))
            {
                return new MeterAssetProxy(this);
            }
            if ((attribute == "ValuesInterval"))
            {
                return new ValuesIntervalProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "ServiceDeliveryPoint"))
            {
                return new ServiceDeliveryPointProxy(this);
            }
            if ((reference == "CustomerAgreement"))
            {
                return new CustomerAgreementProxy(this);
            }
            if ((reference == "MeterAsset"))
            {
                return new MeterAssetProxy(this);
            }
            if ((reference == "ValuesInterval"))
            {
                return new ValuesIntervalProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/MeterReading")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MeterReading class
        /// </summary>
        public class MeterReadingReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private MeterReading _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MeterReadingReferencedElementsCollection(MeterReading parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.EndDeviceEvents.Count);
                    if ((this._parent.ServiceDeliveryPoint != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.CustomerAgreement != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeterAsset != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ValuesInterval != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Readings.Count);
                    count = (count + this._parent.IntervalBlocks.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.EndDeviceEvents.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ServiceDeliveryPointChanged += this.PropagateValueChanges;
                this._parent.CustomerAgreementChanged += this.PropagateValueChanges;
                this._parent.MeterAssetChanged += this.PropagateValueChanges;
                this._parent.ValuesIntervalChanged += this.PropagateValueChanges;
                this._parent.Readings.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.IntervalBlocks.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.EndDeviceEvents.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ServiceDeliveryPointChanged -= this.PropagateValueChanges;
                this._parent.CustomerAgreementChanged -= this.PropagateValueChanges;
                this._parent.MeterAssetChanged -= this.PropagateValueChanges;
                this._parent.ValuesIntervalChanged -= this.PropagateValueChanges;
                this._parent.Readings.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.IntervalBlocks.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IEndDeviceEvent endDeviceEventsCasted = item.As<IEndDeviceEvent>();
                if ((endDeviceEventsCasted != null))
                {
                    this._parent.EndDeviceEvents.Add(endDeviceEventsCasted);
                }
                if ((this._parent.ServiceDeliveryPoint == null))
                {
                    IServiceDeliveryPoint serviceDeliveryPointCasted = item.As<IServiceDeliveryPoint>();
                    if ((serviceDeliveryPointCasted != null))
                    {
                        this._parent.ServiceDeliveryPoint = serviceDeliveryPointCasted;
                        return;
                    }
                }
                if ((this._parent.CustomerAgreement == null))
                {
                    ICustomerAgreement customerAgreementCasted = item.As<ICustomerAgreement>();
                    if ((customerAgreementCasted != null))
                    {
                        this._parent.CustomerAgreement = customerAgreementCasted;
                        return;
                    }
                }
                if ((this._parent.MeterAsset == null))
                {
                    IMeterAsset meterAssetCasted = item.As<IMeterAsset>();
                    if ((meterAssetCasted != null))
                    {
                        this._parent.MeterAsset = meterAssetCasted;
                        return;
                    }
                }
                if ((this._parent.ValuesInterval == null))
                {
                    IDateTimeInterval valuesIntervalCasted = item.As<IDateTimeInterval>();
                    if ((valuesIntervalCasted != null))
                    {
                        this._parent.ValuesInterval = valuesIntervalCasted;
                        return;
                    }
                }
                IReading readingsCasted = item.As<IReading>();
                if ((readingsCasted != null))
                {
                    this._parent.Readings.Add(readingsCasted);
                }
                IIntervalBlock intervalBlocksCasted = item.As<IIntervalBlock>();
                if ((intervalBlocksCasted != null))
                {
                    this._parent.IntervalBlocks.Add(intervalBlocksCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.EndDeviceEvents.Clear();
                this._parent.ServiceDeliveryPoint = null;
                this._parent.CustomerAgreement = null;
                this._parent.MeterAsset = null;
                this._parent.ValuesInterval = null;
                this._parent.Readings.Clear();
                this._parent.IntervalBlocks.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.EndDeviceEvents.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ServiceDeliveryPoint))
                {
                    return true;
                }
                if ((item == this._parent.CustomerAgreement))
                {
                    return true;
                }
                if ((item == this._parent.MeterAsset))
                {
                    return true;
                }
                if ((item == this._parent.ValuesInterval))
                {
                    return true;
                }
                if (this._parent.Readings.Contains(item))
                {
                    return true;
                }
                if (this._parent.IntervalBlocks.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> endDeviceEventsEnumerator = this._parent.EndDeviceEvents.GetEnumerator();
                try
                {
                    for (
                    ; endDeviceEventsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = endDeviceEventsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    endDeviceEventsEnumerator.Dispose();
                }
                if ((this._parent.ServiceDeliveryPoint != null))
                {
                    array[arrayIndex] = this._parent.ServiceDeliveryPoint;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.CustomerAgreement != null))
                {
                    array[arrayIndex] = this._parent.CustomerAgreement;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeterAsset != null))
                {
                    array[arrayIndex] = this._parent.MeterAsset;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ValuesInterval != null))
                {
                    array[arrayIndex] = this._parent.ValuesInterval;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> readingsEnumerator = this._parent.Readings.GetEnumerator();
                try
                {
                    for (
                    ; readingsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = readingsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    readingsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> intervalBlocksEnumerator = this._parent.IntervalBlocks.GetEnumerator();
                try
                {
                    for (
                    ; intervalBlocksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = intervalBlocksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    intervalBlocksEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IEndDeviceEvent endDeviceEventItem = item.As<IEndDeviceEvent>();
                if (((endDeviceEventItem != null) 
                            && this._parent.EndDeviceEvents.Remove(endDeviceEventItem)))
                {
                    return true;
                }
                if ((this._parent.ServiceDeliveryPoint == item))
                {
                    this._parent.ServiceDeliveryPoint = null;
                    return true;
                }
                if ((this._parent.CustomerAgreement == item))
                {
                    this._parent.CustomerAgreement = null;
                    return true;
                }
                if ((this._parent.MeterAsset == item))
                {
                    this._parent.MeterAsset = null;
                    return true;
                }
                if ((this._parent.ValuesInterval == item))
                {
                    this._parent.ValuesInterval = null;
                    return true;
                }
                IReading readingItem = item.As<IReading>();
                if (((readingItem != null) 
                            && this._parent.Readings.Remove(readingItem)))
                {
                    return true;
                }
                IIntervalBlock intervalBlockItem = item.As<IIntervalBlock>();
                if (((intervalBlockItem != null) 
                            && this._parent.IntervalBlocks.Remove(intervalBlockItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.EndDeviceEvents).Concat(this._parent.ServiceDeliveryPoint).Concat(this._parent.CustomerAgreement).Concat(this._parent.MeterAsset).Concat(this._parent.ValuesInterval).Concat(this._parent.Readings).Concat(this._parent.IntervalBlocks).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ServiceDeliveryPoint property
        /// </summary>
        private sealed class ServiceDeliveryPointProxy : ModelPropertyChange<IMeterReading, IServiceDeliveryPoint>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ServiceDeliveryPointProxy(IMeterReading modelElement) : 
                    base(modelElement, "ServiceDeliveryPoint")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IServiceDeliveryPoint Value
            {
                get
                {
                    return this.ModelElement.ServiceDeliveryPoint;
                }
                set
                {
                    this.ModelElement.ServiceDeliveryPoint = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the CustomerAgreement property
        /// </summary>
        private sealed class CustomerAgreementProxy : ModelPropertyChange<IMeterReading, ICustomerAgreement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CustomerAgreementProxy(IMeterReading modelElement) : 
                    base(modelElement, "CustomerAgreement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICustomerAgreement Value
            {
                get
                {
                    return this.ModelElement.CustomerAgreement;
                }
                set
                {
                    this.ModelElement.CustomerAgreement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeterAsset property
        /// </summary>
        private sealed class MeterAssetProxy : ModelPropertyChange<IMeterReading, IMeterAsset>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeterAssetProxy(IMeterReading modelElement) : 
                    base(modelElement, "MeterAsset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeterAsset Value
            {
                get
                {
                    return this.ModelElement.MeterAsset;
                }
                set
                {
                    this.ModelElement.MeterAsset = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the valuesInterval property
        /// </summary>
        private sealed class ValuesIntervalProxy : ModelPropertyChange<IMeterReading, IDateTimeInterval>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ValuesIntervalProxy(IMeterReading modelElement) : 
                    base(modelElement, "valuesInterval")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDateTimeInterval Value
            {
                get
                {
                    return this.ModelElement.ValuesInterval;
                }
                set
                {
                    this.ModelElement.ValuesInterval = value;
                }
            }
        }
    }
}

