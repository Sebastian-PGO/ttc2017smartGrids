using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.Metering
{
    
    
    /// <summary>
    /// The default implementation of the DynamicDemand class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Metering")]
    [XmlNamespacePrefixAttribute("cimMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/DynamicDemand")]
    [DebuggerDisplayAttribute("DynamicDemand {UUID}")]
    public partial class DynamicDemand : Element, IDynamicDemand, IModelElement
    {
        
        /// <summary>
        /// The backing field for the SubInterval property
        /// </summary>
        private float _subInterval;
        
        private static Lazy<ITypedElement> _subIntervalAttribute = new Lazy<ITypedElement>(RetrieveSubIntervalAttribute);
        
        /// <summary>
        /// The backing field for the Interval property
        /// </summary>
        private float _interval;
        
        private static Lazy<ITypedElement> _intervalAttribute = new Lazy<ITypedElement>(RetrieveIntervalAttribute);
        
        /// <summary>
        /// The backing field for the Kind property
        /// </summary>
        private Nullable<DemandKind> _kind;
        
        private static Lazy<ITypedElement> _kindAttribute = new Lazy<ITypedElement>(RetrieveKindAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The subInterval property
        /// </summary>
        [XmlElementNameAttribute("subInterval")]
        [XmlAttributeAttribute(true)]
        public virtual float SubInterval
        {
            get
            {
                return this._subInterval;
            }
            set
            {
                if ((this._subInterval != value))
                {
                    float old = this._subInterval;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSubIntervalChanging(e);
                    this.OnPropertyChanging("SubInterval", e, _subIntervalAttribute);
                    this._subInterval = value;
                    this.OnSubIntervalChanged(e);
                    this.OnPropertyChanged("SubInterval", e, _subIntervalAttribute);
                }
            }
        }
        
        /// <summary>
        /// The interval property
        /// </summary>
        [XmlElementNameAttribute("interval")]
        [XmlAttributeAttribute(true)]
        public virtual float Interval
        {
            get
            {
                return this._interval;
            }
            set
            {
                if ((this._interval != value))
                {
                    float old = this._interval;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIntervalChanging(e);
                    this.OnPropertyChanging("Interval", e, _intervalAttribute);
                    this._interval = value;
                    this.OnIntervalChanged(e);
                    this.OnPropertyChanged("Interval", e, _intervalAttribute);
                }
            }
        }
        
        /// <summary>
        /// The kind property
        /// </summary>
        [XmlElementNameAttribute("kind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<DemandKind> Kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                if ((this._kind != value))
                {
                    Nullable<DemandKind> old = this._kind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKindChanging(e);
                    this.OnPropertyChanging("Kind", e, _kindAttribute);
                    this._kind = value;
                    this.OnKindChanged(e);
                    this.OnPropertyChanged("Kind", e, _kindAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/DynamicDemand")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the SubInterval property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubIntervalChanging;
        
        /// <summary>
        /// Gets fired when the SubInterval property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SubIntervalChanged;
        
        /// <summary>
        /// Gets fired before the Interval property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IntervalChanging;
        
        /// <summary>
        /// Gets fired when the Interval property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IntervalChanged;
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        private static ITypedElement RetrieveSubIntervalAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DynamicDemand.ClassInstance)).Resolve("subInterval")));
        }
        
        /// <summary>
        /// Raises the SubIntervalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubIntervalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubIntervalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SubIntervalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSubIntervalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SubIntervalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIntervalAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DynamicDemand.ClassInstance)).Resolve("interval")));
        }
        
        /// <summary>
        /// Raises the IntervalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIntervalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IntervalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IntervalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIntervalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IntervalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DynamicDemand.ClassInstance)).Resolve("kind")));
        }
        
        /// <summary>
        /// Raises the KindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SUBINTERVAL"))
            {
                return this.SubInterval;
            }
            if ((attribute == "INTERVAL"))
            {
                return this.Interval;
            }
            if ((attribute == "KIND"))
            {
                return this.Kind;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "SUBINTERVAL"))
            {
                this.SubInterval = ((float)(value));
                return;
            }
            if ((feature == "INTERVAL"))
            {
                this.Interval = ((float)(value));
                return;
            }
            if ((feature == "KIND"))
            {
                this.Kind = ((DemandKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/DynamicDemand")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the subInterval property
        /// </summary>
        private sealed class SubIntervalProxy : ModelPropertyChange<IDynamicDemand, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SubIntervalProxy(IDynamicDemand modelElement) : 
                    base(modelElement, "subInterval")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.SubInterval;
                }
                set
                {
                    this.ModelElement.SubInterval = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the interval property
        /// </summary>
        private sealed class IntervalProxy : ModelPropertyChange<IDynamicDemand, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IntervalProxy(IDynamicDemand modelElement) : 
                    base(modelElement, "interval")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Interval;
                }
                set
                {
                    this.ModelElement.Interval = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kind property
        /// </summary>
        private sealed class KindProxy : ModelPropertyChange<IDynamicDemand, Nullable<DemandKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KindProxy(IDynamicDemand modelElement) : 
                    base(modelElement, "kind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<DemandKind> Value
            {
                get
                {
                    return this.ModelElement.Kind;
                }
                set
                {
                    this.ModelElement.Kind = value;
                }
            }
        }
    }
}

