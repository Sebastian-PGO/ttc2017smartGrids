//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.Metering
{
    
    
    /// <summary>
    /// The public interface for ReadingType
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ReadingType))]
    [XmlDefaultImplementationTypeAttribute(typeof(ReadingType))]
    public interface IReadingType : IModelElement, IIdentifiedObject
    {
        
        /// <summary>
        /// The intervalLength property
        /// </summary>
        float IntervalLength
        {
            get;
            set;
        }
        
        /// <summary>
        /// The unit property
        /// </summary>
        Nullable<UnitSymbol> Unit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The defaultQuality property
        /// </summary>
        string DefaultQuality
        {
            get;
            set;
        }
        
        /// <summary>
        /// The kind property
        /// </summary>
        Nullable<ReadingKind> Kind
        {
            get;
            set;
        }
        
        /// <summary>
        /// The channelNumber property
        /// </summary>
        int ChannelNumber
        {
            get;
            set;
        }
        
        /// <summary>
        /// The multiplier property
        /// </summary>
        Nullable<UnitMultiplier> Multiplier
        {
            get;
            set;
        }
        
        /// <summary>
        /// The defaultValueDataType property
        /// </summary>
        string DefaultValueDataType
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reverseChronology property
        /// </summary>
        bool ReverseChronology
        {
            get;
            set;
        }
        
        /// <summary>
        /// The dynamicConfiguration property
        /// </summary>
        IDynamicDemand DynamicConfiguration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Register property
        /// </summary>
        IRegister Register
        {
            get;
            set;
        }
        
        /// <summary>
        /// The IntervalBlocks property
        /// </summary>
        IOrderedSetExpression<IIntervalBlock> IntervalBlocks
        {
            get;
        }
        
        /// <summary>
        /// The Readings property
        /// </summary>
        IOrderedSetExpression<IReading> Readings
        {
            get;
        }
        
        /// <summary>
        /// The Pending property
        /// </summary>
        IPending Pending
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the IntervalLength property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IntervalLengthChanging;
        
        /// <summary>
        /// Gets fired when the IntervalLength property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IntervalLengthChanged;
        
        /// <summary>
        /// Gets fired before the Unit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UnitChanging;
        
        /// <summary>
        /// Gets fired when the Unit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UnitChanged;
        
        /// <summary>
        /// Gets fired before the DefaultQuality property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DefaultQualityChanging;
        
        /// <summary>
        /// Gets fired when the DefaultQuality property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DefaultQualityChanged;
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        /// <summary>
        /// Gets fired before the ChannelNumber property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ChannelNumberChanging;
        
        /// <summary>
        /// Gets fired when the ChannelNumber property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ChannelNumberChanged;
        
        /// <summary>
        /// Gets fired before the Multiplier property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MultiplierChanging;
        
        /// <summary>
        /// Gets fired when the Multiplier property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MultiplierChanged;
        
        /// <summary>
        /// Gets fired before the DefaultValueDataType property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DefaultValueDataTypeChanging;
        
        /// <summary>
        /// Gets fired when the DefaultValueDataType property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DefaultValueDataTypeChanged;
        
        /// <summary>
        /// Gets fired before the ReverseChronology property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReverseChronologyChanging;
        
        /// <summary>
        /// Gets fired when the ReverseChronology property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReverseChronologyChanged;
        
        /// <summary>
        /// Gets fired before the DynamicConfiguration property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DynamicConfigurationChanging;
        
        /// <summary>
        /// Gets fired when the DynamicConfiguration property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DynamicConfigurationChanged;
        
        /// <summary>
        /// Gets fired before the Register property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RegisterChanging;
        
        /// <summary>
        /// Gets fired when the Register property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RegisterChanged;
        
        /// <summary>
        /// Gets fired before the Pending property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PendingChanging;
        
        /// <summary>
        /// Gets fired when the Pending property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PendingChanged;
    }
}

