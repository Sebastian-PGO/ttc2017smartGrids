using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.Metering
{
    
    
    /// <summary>
    /// The default implementation of the MeterServiceWork class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Metering")]
    [XmlNamespacePrefixAttribute("cimMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/MeterServiceWork")]
    [DebuggerDisplayAttribute("MeterServiceWork {UUID}")]
    public partial class MeterServiceWork : TTC2017.SmartGrids.CIM.IEC61968.Work.Work, IMeterServiceWork, IModelElement
    {
        
        private static Lazy<ITypedElement> _oldMeterAssetReference = new Lazy<ITypedElement>(RetrieveOldMeterAssetReference);
        
        /// <summary>
        /// The backing field for the OldMeterAsset property
        /// </summary>
        private IMeterAsset _oldMeterAsset;
        
        private static Lazy<ITypedElement> _meterAssetReference = new Lazy<ITypedElement>(RetrieveMeterAssetReference);
        
        /// <summary>
        /// The backing field for the MeterAsset property
        /// </summary>
        private IMeterAsset _meterAsset;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The OldMeterAsset property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MeterReplacementWorks")]
        public virtual IMeterAsset OldMeterAsset
        {
            get
            {
                return this._oldMeterAsset;
            }
            set
            {
                if ((this._oldMeterAsset != value))
                {
                    IMeterAsset old = this._oldMeterAsset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOldMeterAssetChanging(e);
                    this.OnPropertyChanging("OldMeterAsset", e, _oldMeterAssetReference);
                    this._oldMeterAsset = value;
                    if ((old != null))
                    {
                        old.MeterReplacementWorks.Remove(this);
                        old.Deleted -= this.OnResetOldMeterAsset;
                    }
                    if ((value != null))
                    {
                        value.MeterReplacementWorks.Add(this);
                        value.Deleted += this.OnResetOldMeterAsset;
                    }
                    this.OnOldMeterAssetChanged(e);
                    this.OnPropertyChanged("OldMeterAsset", e, _oldMeterAssetReference);
                }
            }
        }
        
        /// <summary>
        /// The MeterAsset property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("MeterServiceWorks")]
        public virtual IMeterAsset MeterAsset
        {
            get
            {
                return this._meterAsset;
            }
            set
            {
                if ((this._meterAsset != value))
                {
                    IMeterAsset old = this._meterAsset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeterAssetChanging(e);
                    this.OnPropertyChanging("MeterAsset", e, _meterAssetReference);
                    this._meterAsset = value;
                    if ((old != null))
                    {
                        old.MeterServiceWorks.Remove(this);
                        old.Deleted -= this.OnResetMeterAsset;
                    }
                    if ((value != null))
                    {
                        value.MeterServiceWorks.Add(this);
                        value.Deleted += this.OnResetMeterAsset;
                    }
                    this.OnMeterAssetChanged(e);
                    this.OnPropertyChanged("MeterAsset", e, _meterAssetReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new MeterServiceWorkReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/MeterServiceWork")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the OldMeterAsset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OldMeterAssetChanging;
        
        /// <summary>
        /// Gets fired when the OldMeterAsset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OldMeterAssetChanged;
        
        /// <summary>
        /// Gets fired before the MeterAsset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeterAssetChanging;
        
        /// <summary>
        /// Gets fired when the MeterAsset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeterAssetChanged;
        
        private static ITypedElement RetrieveOldMeterAssetReference()
        {
            return ((ITypedElement)(((ModelElement)(MeterServiceWork.ClassInstance)).Resolve("OldMeterAsset")));
        }
        
        /// <summary>
        /// Raises the OldMeterAssetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOldMeterAssetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OldMeterAssetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OldMeterAssetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOldMeterAssetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OldMeterAssetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OldMeterAsset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOldMeterAsset(object sender, System.EventArgs eventArgs)
        {
            this.OldMeterAsset = null;
        }
        
        private static ITypedElement RetrieveMeterAssetReference()
        {
            return ((ITypedElement)(((ModelElement)(MeterServiceWork.ClassInstance)).Resolve("MeterAsset")));
        }
        
        /// <summary>
        /// Raises the MeterAssetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeterAssetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeterAssetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeterAssetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeterAssetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeterAssetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MeterAsset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeterAsset(object sender, System.EventArgs eventArgs)
        {
            this.MeterAsset = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "OLDMETERASSET"))
            {
                this.OldMeterAsset = ((IMeterAsset)(value));
                return;
            }
            if ((feature == "METERASSET"))
            {
                this.MeterAsset = ((IMeterAsset)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "OldMeterAsset"))
            {
                return new OldMeterAssetProxy(this);
            }
            if ((attribute == "MeterAsset"))
            {
                return new MeterAssetProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "OldMeterAsset"))
            {
                return new OldMeterAssetProxy(this);
            }
            if ((reference == "MeterAsset"))
            {
                return new MeterAssetProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/MeterServiceWork")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the MeterServiceWork class
        /// </summary>
        public class MeterServiceWorkReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private MeterServiceWork _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public MeterServiceWorkReferencedElementsCollection(MeterServiceWork parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.OldMeterAsset != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeterAsset != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.OldMeterAssetChanged += this.PropagateValueChanges;
                this._parent.MeterAssetChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.OldMeterAssetChanged -= this.PropagateValueChanges;
                this._parent.MeterAssetChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.OldMeterAsset == null))
                {
                    IMeterAsset oldMeterAssetCasted = item.As<IMeterAsset>();
                    if ((oldMeterAssetCasted != null))
                    {
                        this._parent.OldMeterAsset = oldMeterAssetCasted;
                        return;
                    }
                }
                if ((this._parent.MeterAsset == null))
                {
                    IMeterAsset meterAssetCasted = item.As<IMeterAsset>();
                    if ((meterAssetCasted != null))
                    {
                        this._parent.MeterAsset = meterAssetCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.OldMeterAsset = null;
                this._parent.MeterAsset = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.OldMeterAsset))
                {
                    return true;
                }
                if ((item == this._parent.MeterAsset))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.OldMeterAsset != null))
                {
                    array[arrayIndex] = this._parent.OldMeterAsset;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeterAsset != null))
                {
                    array[arrayIndex] = this._parent.MeterAsset;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.OldMeterAsset == item))
                {
                    this._parent.OldMeterAsset = null;
                    return true;
                }
                if ((this._parent.MeterAsset == item))
                {
                    this._parent.MeterAsset = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.OldMeterAsset).Concat(this._parent.MeterAsset).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OldMeterAsset property
        /// </summary>
        private sealed class OldMeterAssetProxy : ModelPropertyChange<IMeterServiceWork, IMeterAsset>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OldMeterAssetProxy(IMeterServiceWork modelElement) : 
                    base(modelElement, "OldMeterAsset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeterAsset Value
            {
                get
                {
                    return this.ModelElement.OldMeterAsset;
                }
                set
                {
                    this.ModelElement.OldMeterAsset = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeterAsset property
        /// </summary>
        private sealed class MeterAssetProxy : ModelPropertyChange<IMeterServiceWork, IMeterAsset>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeterAssetProxy(IMeterServiceWork modelElement) : 
                    base(modelElement, "MeterAsset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeterAsset Value
            {
                get
                {
                    return this.ModelElement.MeterAsset;
                }
                set
                {
                    this.ModelElement.MeterAsset = value;
                }
            }
        }
    }
}

