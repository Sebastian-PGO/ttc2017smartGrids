using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Assets;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61968.PaymentMetering;
using TTC2017.SmartGrids.CIM.IEC61968.WiresExt;
using TTC2017.SmartGrids.CIM.IEC61968.Work;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Domain;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssetModels;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfMetering;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.Metering
{
    
    
    /// <summary>
    /// The default implementation of the IntervalBlock class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Metering")]
    [XmlNamespacePrefixAttribute("cimMetering")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/IntervalBlock")]
    [DebuggerDisplayAttribute("IntervalBlock {UUID}")]
    public partial class IntervalBlock : Element, IIntervalBlock, IModelElement
    {
        
        private static Lazy<ITypedElement> _meterReadingReference = new Lazy<ITypedElement>(RetrieveMeterReadingReference);
        
        /// <summary>
        /// The backing field for the MeterReading property
        /// </summary>
        private IMeterReading _meterReading;
        
        private static Lazy<ITypedElement> _intervalReadingsReference = new Lazy<ITypedElement>(RetrieveIntervalReadingsReference);
        
        /// <summary>
        /// The backing field for the IntervalReadings property
        /// </summary>
        private IntervalBlockIntervalReadingsCollection _intervalReadings;
        
        private static Lazy<ITypedElement> _pendingReference = new Lazy<ITypedElement>(RetrievePendingReference);
        
        /// <summary>
        /// The backing field for the Pending property
        /// </summary>
        private IPending _pending;
        
        private static Lazy<ITypedElement> _readingTypeReference = new Lazy<ITypedElement>(RetrieveReadingTypeReference);
        
        /// <summary>
        /// The backing field for the ReadingType property
        /// </summary>
        private IReadingType _readingType;
        
        private static IClass _classInstance;
        
        public IntervalBlock()
        {
            this._intervalReadings = new IntervalBlockIntervalReadingsCollection(this);
            this._intervalReadings.CollectionChanging += this.IntervalReadingsCollectionChanging;
            this._intervalReadings.CollectionChanged += this.IntervalReadingsCollectionChanged;
        }
        
        /// <summary>
        /// The MeterReading property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("IntervalBlocks")]
        public virtual IMeterReading MeterReading
        {
            get
            {
                return this._meterReading;
            }
            set
            {
                if ((this._meterReading != value))
                {
                    IMeterReading old = this._meterReading;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeterReadingChanging(e);
                    this.OnPropertyChanging("MeterReading", e, _meterReadingReference);
                    this._meterReading = value;
                    if ((old != null))
                    {
                        old.IntervalBlocks.Remove(this);
                        old.Deleted -= this.OnResetMeterReading;
                    }
                    if ((value != null))
                    {
                        value.IntervalBlocks.Add(this);
                        value.Deleted += this.OnResetMeterReading;
                    }
                    this.OnMeterReadingChanged(e);
                    this.OnPropertyChanged("MeterReading", e, _meterReadingReference);
                }
            }
        }
        
        /// <summary>
        /// The IntervalReadings property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("IntervalBlocks")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IIntervalReading> IntervalReadings
        {
            get
            {
                return this._intervalReadings;
            }
        }
        
        /// <summary>
        /// The Pending property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("IntervalBlocks")]
        public virtual IPending Pending
        {
            get
            {
                return this._pending;
            }
            set
            {
                if ((this._pending != value))
                {
                    IPending old = this._pending;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPendingChanging(e);
                    this.OnPropertyChanging("Pending", e, _pendingReference);
                    this._pending = value;
                    if ((old != null))
                    {
                        old.IntervalBlocks.Remove(this);
                        old.Deleted -= this.OnResetPending;
                    }
                    if ((value != null))
                    {
                        value.IntervalBlocks.Add(this);
                        value.Deleted += this.OnResetPending;
                    }
                    this.OnPendingChanged(e);
                    this.OnPropertyChanged("Pending", e, _pendingReference);
                }
            }
        }
        
        /// <summary>
        /// The ReadingType property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("IntervalBlocks")]
        public virtual IReadingType ReadingType
        {
            get
            {
                return this._readingType;
            }
            set
            {
                if ((this._readingType != value))
                {
                    IReadingType old = this._readingType;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReadingTypeChanging(e);
                    this.OnPropertyChanging("ReadingType", e, _readingTypeReference);
                    this._readingType = value;
                    if ((old != null))
                    {
                        old.IntervalBlocks.Remove(this);
                        old.Deleted -= this.OnResetReadingType;
                    }
                    if ((value != null))
                    {
                        value.IntervalBlocks.Add(this);
                        value.Deleted += this.OnResetReadingType;
                    }
                    this.OnReadingTypeChanged(e);
                    this.OnPropertyChanged("ReadingType", e, _readingTypeReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new IntervalBlockReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/IntervalBlock")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the MeterReading property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeterReadingChanging;
        
        /// <summary>
        /// Gets fired when the MeterReading property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeterReadingChanged;
        
        /// <summary>
        /// Gets fired before the Pending property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PendingChanging;
        
        /// <summary>
        /// Gets fired when the Pending property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PendingChanged;
        
        /// <summary>
        /// Gets fired before the ReadingType property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReadingTypeChanging;
        
        /// <summary>
        /// Gets fired when the ReadingType property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReadingTypeChanged;
        
        private static ITypedElement RetrieveMeterReadingReference()
        {
            return ((ITypedElement)(((ModelElement)(IntervalBlock.ClassInstance)).Resolve("MeterReading")));
        }
        
        /// <summary>
        /// Raises the MeterReadingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeterReadingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeterReadingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeterReadingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeterReadingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeterReadingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MeterReading property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeterReading(object sender, System.EventArgs eventArgs)
        {
            this.MeterReading = null;
        }
        
        private static ITypedElement RetrieveIntervalReadingsReference()
        {
            return ((ITypedElement)(((ModelElement)(IntervalBlock.ClassInstance)).Resolve("IntervalReadings")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the IntervalReadings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IntervalReadingsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("IntervalReadings", e, _intervalReadingsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the IntervalReadings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void IntervalReadingsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("IntervalReadings", e, _intervalReadingsReference);
        }
        
        private static ITypedElement RetrievePendingReference()
        {
            return ((ITypedElement)(((ModelElement)(IntervalBlock.ClassInstance)).Resolve("Pending")));
        }
        
        /// <summary>
        /// Raises the PendingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPendingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PendingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PendingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPendingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PendingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Pending property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPending(object sender, System.EventArgs eventArgs)
        {
            this.Pending = null;
        }
        
        private static ITypedElement RetrieveReadingTypeReference()
        {
            return ((ITypedElement)(((ModelElement)(IntervalBlock.ClassInstance)).Resolve("ReadingType")));
        }
        
        /// <summary>
        /// Raises the ReadingTypeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadingTypeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReadingTypeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReadingTypeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadingTypeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReadingTypeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ReadingType property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReadingType(object sender, System.EventArgs eventArgs)
        {
            this.ReadingType = null;
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "INTERVALREADINGS"))
            {
                return this._intervalReadings;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "METERREADING"))
            {
                this.MeterReading = ((IMeterReading)(value));
                return;
            }
            if ((feature == "PENDING"))
            {
                this.Pending = ((IPending)(value));
                return;
            }
            if ((feature == "READINGTYPE"))
            {
                this.ReadingType = ((IReadingType)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "MeterReading"))
            {
                return new MeterReadingProxy(this);
            }
            if ((attribute == "Pending"))
            {
                return new PendingProxy(this);
            }
            if ((attribute == "ReadingType"))
            {
                return new ReadingTypeProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "MeterReading"))
            {
                return new MeterReadingProxy(this);
            }
            if ((reference == "Pending"))
            {
                return new PendingProxy(this);
            }
            if ((reference == "ReadingType"))
            {
                return new ReadingTypeProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Metering/IntervalBlock")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the IntervalBlock class
        /// </summary>
        public class IntervalBlockReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private IntervalBlock _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public IntervalBlockReferencedElementsCollection(IntervalBlock parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.MeterReading != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.IntervalReadings.Count);
                    if ((this._parent.Pending != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ReadingType != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.MeterReadingChanged += this.PropagateValueChanges;
                this._parent.IntervalReadings.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.PendingChanged += this.PropagateValueChanges;
                this._parent.ReadingTypeChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.MeterReadingChanged -= this.PropagateValueChanges;
                this._parent.IntervalReadings.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.PendingChanged -= this.PropagateValueChanges;
                this._parent.ReadingTypeChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.MeterReading == null))
                {
                    IMeterReading meterReadingCasted = item.As<IMeterReading>();
                    if ((meterReadingCasted != null))
                    {
                        this._parent.MeterReading = meterReadingCasted;
                        return;
                    }
                }
                IIntervalReading intervalReadingsCasted = item.As<IIntervalReading>();
                if ((intervalReadingsCasted != null))
                {
                    this._parent.IntervalReadings.Add(intervalReadingsCasted);
                }
                if ((this._parent.Pending == null))
                {
                    IPending pendingCasted = item.As<IPending>();
                    if ((pendingCasted != null))
                    {
                        this._parent.Pending = pendingCasted;
                        return;
                    }
                }
                if ((this._parent.ReadingType == null))
                {
                    IReadingType readingTypeCasted = item.As<IReadingType>();
                    if ((readingTypeCasted != null))
                    {
                        this._parent.ReadingType = readingTypeCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.MeterReading = null;
                this._parent.IntervalReadings.Clear();
                this._parent.Pending = null;
                this._parent.ReadingType = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.MeterReading))
                {
                    return true;
                }
                if (this._parent.IntervalReadings.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Pending))
                {
                    return true;
                }
                if ((item == this._parent.ReadingType))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.MeterReading != null))
                {
                    array[arrayIndex] = this._parent.MeterReading;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> intervalReadingsEnumerator = this._parent.IntervalReadings.GetEnumerator();
                try
                {
                    for (
                    ; intervalReadingsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = intervalReadingsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    intervalReadingsEnumerator.Dispose();
                }
                if ((this._parent.Pending != null))
                {
                    array[arrayIndex] = this._parent.Pending;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ReadingType != null))
                {
                    array[arrayIndex] = this._parent.ReadingType;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.MeterReading == item))
                {
                    this._parent.MeterReading = null;
                    return true;
                }
                IIntervalReading intervalReadingItem = item.As<IIntervalReading>();
                if (((intervalReadingItem != null) 
                            && this._parent.IntervalReadings.Remove(intervalReadingItem)))
                {
                    return true;
                }
                if ((this._parent.Pending == item))
                {
                    this._parent.Pending = null;
                    return true;
                }
                if ((this._parent.ReadingType == item))
                {
                    this._parent.ReadingType = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.MeterReading).Concat(this._parent.IntervalReadings).Concat(this._parent.Pending).Concat(this._parent.ReadingType).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeterReading property
        /// </summary>
        private sealed class MeterReadingProxy : ModelPropertyChange<IIntervalBlock, IMeterReading>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeterReadingProxy(IIntervalBlock modelElement) : 
                    base(modelElement, "MeterReading")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeterReading Value
            {
                get
                {
                    return this.ModelElement.MeterReading;
                }
                set
                {
                    this.ModelElement.MeterReading = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Pending property
        /// </summary>
        private sealed class PendingProxy : ModelPropertyChange<IIntervalBlock, IPending>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PendingProxy(IIntervalBlock modelElement) : 
                    base(modelElement, "Pending")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPending Value
            {
                get
                {
                    return this.ModelElement.Pending;
                }
                set
                {
                    this.ModelElement.Pending = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReadingType property
        /// </summary>
        private sealed class ReadingTypeProxy : ModelPropertyChange<IIntervalBlock, IReadingType>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReadingTypeProxy(IIntervalBlock modelElement) : 
                    base(modelElement, "ReadingType")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReadingType Value
            {
                get
                {
                    return this.ModelElement.ReadingType;
                }
                set
                {
                    this.ModelElement.ReadingType = value;
                }
            }
        }
    }
}

