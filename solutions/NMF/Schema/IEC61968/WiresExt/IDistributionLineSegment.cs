using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.WiresExt
{
    
    
    /// <summary>
    /// The public interface for DistributionLineSegment
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(DistributionLineSegment))]
    [XmlDefaultImplementationTypeAttribute(typeof(DistributionLineSegment))]
    public interface IDistributionLineSegment : IModelElement, IACLineSegment
    {
        
        /// <summary>
        /// The PhaseImpedance property
        /// </summary>
        IPerLengthPhaseImpedance PhaseImpedance
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ConductorAssets property
        /// </summary>
        IOrderedSetExpression<IConductorAsset> ConductorAssets
        {
            get;
        }
        
        /// <summary>
        /// The SequenceImpedance property
        /// </summary>
        IPerLengthSequenceImpedance SequenceImpedance
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ConductorInfo property
        /// </summary>
        IConductorInfo ConductorInfo
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the PhaseImpedance property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhaseImpedanceChanging;
        
        /// <summary>
        /// Gets fired when the PhaseImpedance property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PhaseImpedanceChanged;
        
        /// <summary>
        /// Gets fired before the SequenceImpedance property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SequenceImpedanceChanging;
        
        /// <summary>
        /// Gets fired when the SequenceImpedance property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SequenceImpedanceChanged;
        
        /// <summary>
        /// Gets fired before the ConductorInfo property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ConductorInfoChanging;
        
        /// <summary>
        /// Gets fired when the ConductorInfo property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ConductorInfoChanged;
    }
}

