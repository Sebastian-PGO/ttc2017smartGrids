//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.WiresExt
{
    
    
    /// <summary>
    /// The public interface for PerLengthSequenceImpedance
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(PerLengthSequenceImpedance))]
    [XmlDefaultImplementationTypeAttribute(typeof(PerLengthSequenceImpedance))]
    public interface IPerLengthSequenceImpedance : IModelElement, IIdentifiedObject
    {
        
        /// <summary>
        /// The x0 property
        /// </summary>
        float X0
        {
            get;
            set;
        }
        
        /// <summary>
        /// The bch property
        /// </summary>
        float Bch
        {
            get;
            set;
        }
        
        /// <summary>
        /// The r0 property
        /// </summary>
        float R0
        {
            get;
            set;
        }
        
        /// <summary>
        /// The g0ch property
        /// </summary>
        float G0ch
        {
            get;
            set;
        }
        
        /// <summary>
        /// The r property
        /// </summary>
        float R
        {
            get;
            set;
        }
        
        /// <summary>
        /// The x property
        /// </summary>
        float X
        {
            get;
            set;
        }
        
        /// <summary>
        /// The gch property
        /// </summary>
        float Gch
        {
            get;
            set;
        }
        
        /// <summary>
        /// The b0ch property
        /// </summary>
        float B0ch
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ConductorSegments property
        /// </summary>
        IOrderedSetExpression<IDistributionLineSegment> ConductorSegments
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the X0 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> X0Changing;
        
        /// <summary>
        /// Gets fired when the X0 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> X0Changed;
        
        /// <summary>
        /// Gets fired before the Bch property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BchChanging;
        
        /// <summary>
        /// Gets fired when the Bch property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BchChanged;
        
        /// <summary>
        /// Gets fired before the R0 property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> R0Changing;
        
        /// <summary>
        /// Gets fired when the R0 property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> R0Changed;
        
        /// <summary>
        /// Gets fired before the G0ch property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> G0chChanging;
        
        /// <summary>
        /// Gets fired when the G0ch property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> G0chChanged;
        
        /// <summary>
        /// Gets fired before the R property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RChanging;
        
        /// <summary>
        /// Gets fired when the R property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RChanged;
        
        /// <summary>
        /// Gets fired before the X property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XChanging;
        
        /// <summary>
        /// Gets fired when the X property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> XChanged;
        
        /// <summary>
        /// Gets fired before the Gch property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GchChanging;
        
        /// <summary>
        /// Gets fired when the Gch property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> GchChanged;
        
        /// <summary>
        /// Gets fired before the B0ch property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> B0chChanging;
        
        /// <summary>
        /// Gets fired when the B0ch property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> B0chChanged;
    }
}

