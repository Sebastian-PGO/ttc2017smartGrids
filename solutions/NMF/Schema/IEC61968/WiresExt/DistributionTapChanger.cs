using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.WiresExt
{
    
    
    /// <summary>
    /// The default implementation of the DistributionTapChanger class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#WiresExt")]
    [XmlNamespacePrefixAttribute("cimWiresExt")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/WiresExt/DistributionTapChang" +
        "er")]
    [DebuggerDisplayAttribute("DistributionTapChanger {UUID}")]
    public partial class DistributionTapChanger : RatioTapChanger, IDistributionTapChanger, IModelElement
    {
        
        /// <summary>
        /// The backing field for the PtRatio property
        /// </summary>
        private float _ptRatio;
        
        private static Lazy<ITypedElement> _ptRatioAttribute = new Lazy<ITypedElement>(RetrievePtRatioAttribute);
        
        /// <summary>
        /// The backing field for the LimitVoltage property
        /// </summary>
        private float _limitVoltage;
        
        private static Lazy<ITypedElement> _limitVoltageAttribute = new Lazy<ITypedElement>(RetrieveLimitVoltageAttribute);
        
        /// <summary>
        /// The backing field for the ReverseLineDropR property
        /// </summary>
        private float _reverseLineDropR;
        
        private static Lazy<ITypedElement> _reverseLineDropRAttribute = new Lazy<ITypedElement>(RetrieveReverseLineDropRAttribute);
        
        /// <summary>
        /// The backing field for the ReverseLineDropX property
        /// </summary>
        private float _reverseLineDropX;
        
        private static Lazy<ITypedElement> _reverseLineDropXAttribute = new Lazy<ITypedElement>(RetrieveReverseLineDropXAttribute);
        
        /// <summary>
        /// The backing field for the CtRating property
        /// </summary>
        private float _ctRating;
        
        private static Lazy<ITypedElement> _ctRatingAttribute = new Lazy<ITypedElement>(RetrieveCtRatingAttribute);
        
        /// <summary>
        /// The backing field for the LineDropR property
        /// </summary>
        private float _lineDropR;
        
        private static Lazy<ITypedElement> _lineDropRAttribute = new Lazy<ITypedElement>(RetrieveLineDropRAttribute);
        
        /// <summary>
        /// The backing field for the BandVoltage property
        /// </summary>
        private float _bandVoltage;
        
        private static Lazy<ITypedElement> _bandVoltageAttribute = new Lazy<ITypedElement>(RetrieveBandVoltageAttribute);
        
        /// <summary>
        /// The backing field for the LineDropX property
        /// </summary>
        private float _lineDropX;
        
        private static Lazy<ITypedElement> _lineDropXAttribute = new Lazy<ITypedElement>(RetrieveLineDropXAttribute);
        
        /// <summary>
        /// The backing field for the CtRatio property
        /// </summary>
        private float _ctRatio;
        
        private static Lazy<ITypedElement> _ctRatioAttribute = new Lazy<ITypedElement>(RetrieveCtRatioAttribute);
        
        /// <summary>
        /// The backing field for the LineDropCompensation property
        /// </summary>
        private bool _lineDropCompensation;
        
        private static Lazy<ITypedElement> _lineDropCompensationAttribute = new Lazy<ITypedElement>(RetrieveLineDropCompensationAttribute);
        
        /// <summary>
        /// The backing field for the MonitoredPhase property
        /// </summary>
        private Nullable<PhaseCode> _monitoredPhase;
        
        private static Lazy<ITypedElement> _monitoredPhaseAttribute = new Lazy<ITypedElement>(RetrieveMonitoredPhaseAttribute);
        
        /// <summary>
        /// The backing field for the TargetVoltage property
        /// </summary>
        private float _targetVoltage;
        
        private static Lazy<ITypedElement> _targetVoltageAttribute = new Lazy<ITypedElement>(RetrieveTargetVoltageAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ptRatio property
        /// </summary>
        [XmlElementNameAttribute("ptRatio")]
        [XmlAttributeAttribute(true)]
        public virtual float PtRatio
        {
            get
            {
                return this._ptRatio;
            }
            set
            {
                if ((this._ptRatio != value))
                {
                    float old = this._ptRatio;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPtRatioChanging(e);
                    this.OnPropertyChanging("PtRatio", e, _ptRatioAttribute);
                    this._ptRatio = value;
                    this.OnPtRatioChanged(e);
                    this.OnPropertyChanged("PtRatio", e, _ptRatioAttribute);
                }
            }
        }
        
        /// <summary>
        /// The limitVoltage property
        /// </summary>
        [XmlElementNameAttribute("limitVoltage")]
        [XmlAttributeAttribute(true)]
        public virtual float LimitVoltage
        {
            get
            {
                return this._limitVoltage;
            }
            set
            {
                if ((this._limitVoltage != value))
                {
                    float old = this._limitVoltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLimitVoltageChanging(e);
                    this.OnPropertyChanging("LimitVoltage", e, _limitVoltageAttribute);
                    this._limitVoltage = value;
                    this.OnLimitVoltageChanged(e);
                    this.OnPropertyChanged("LimitVoltage", e, _limitVoltageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The reverseLineDropR property
        /// </summary>
        [XmlElementNameAttribute("reverseLineDropR")]
        [XmlAttributeAttribute(true)]
        public virtual float ReverseLineDropR
        {
            get
            {
                return this._reverseLineDropR;
            }
            set
            {
                if ((this._reverseLineDropR != value))
                {
                    float old = this._reverseLineDropR;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReverseLineDropRChanging(e);
                    this.OnPropertyChanging("ReverseLineDropR", e, _reverseLineDropRAttribute);
                    this._reverseLineDropR = value;
                    this.OnReverseLineDropRChanged(e);
                    this.OnPropertyChanged("ReverseLineDropR", e, _reverseLineDropRAttribute);
                }
            }
        }
        
        /// <summary>
        /// The reverseLineDropX property
        /// </summary>
        [XmlElementNameAttribute("reverseLineDropX")]
        [XmlAttributeAttribute(true)]
        public virtual float ReverseLineDropX
        {
            get
            {
                return this._reverseLineDropX;
            }
            set
            {
                if ((this._reverseLineDropX != value))
                {
                    float old = this._reverseLineDropX;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReverseLineDropXChanging(e);
                    this.OnPropertyChanging("ReverseLineDropX", e, _reverseLineDropXAttribute);
                    this._reverseLineDropX = value;
                    this.OnReverseLineDropXChanged(e);
                    this.OnPropertyChanged("ReverseLineDropX", e, _reverseLineDropXAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ctRating property
        /// </summary>
        [XmlElementNameAttribute("ctRating")]
        [XmlAttributeAttribute(true)]
        public virtual float CtRating
        {
            get
            {
                return this._ctRating;
            }
            set
            {
                if ((this._ctRating != value))
                {
                    float old = this._ctRating;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCtRatingChanging(e);
                    this.OnPropertyChanging("CtRating", e, _ctRatingAttribute);
                    this._ctRating = value;
                    this.OnCtRatingChanged(e);
                    this.OnPropertyChanged("CtRating", e, _ctRatingAttribute);
                }
            }
        }
        
        /// <summary>
        /// The lineDropR property
        /// </summary>
        [XmlElementNameAttribute("lineDropR")]
        [XmlAttributeAttribute(true)]
        public virtual float LineDropR
        {
            get
            {
                return this._lineDropR;
            }
            set
            {
                if ((this._lineDropR != value))
                {
                    float old = this._lineDropR;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLineDropRChanging(e);
                    this.OnPropertyChanging("LineDropR", e, _lineDropRAttribute);
                    this._lineDropR = value;
                    this.OnLineDropRChanged(e);
                    this.OnPropertyChanged("LineDropR", e, _lineDropRAttribute);
                }
            }
        }
        
        /// <summary>
        /// The bandVoltage property
        /// </summary>
        [XmlElementNameAttribute("bandVoltage")]
        [XmlAttributeAttribute(true)]
        public virtual float BandVoltage
        {
            get
            {
                return this._bandVoltage;
            }
            set
            {
                if ((this._bandVoltage != value))
                {
                    float old = this._bandVoltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBandVoltageChanging(e);
                    this.OnPropertyChanging("BandVoltage", e, _bandVoltageAttribute);
                    this._bandVoltage = value;
                    this.OnBandVoltageChanged(e);
                    this.OnPropertyChanged("BandVoltage", e, _bandVoltageAttribute);
                }
            }
        }
        
        /// <summary>
        /// The lineDropX property
        /// </summary>
        [XmlElementNameAttribute("lineDropX")]
        [XmlAttributeAttribute(true)]
        public virtual float LineDropX
        {
            get
            {
                return this._lineDropX;
            }
            set
            {
                if ((this._lineDropX != value))
                {
                    float old = this._lineDropX;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLineDropXChanging(e);
                    this.OnPropertyChanging("LineDropX", e, _lineDropXAttribute);
                    this._lineDropX = value;
                    this.OnLineDropXChanged(e);
                    this.OnPropertyChanged("LineDropX", e, _lineDropXAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ctRatio property
        /// </summary>
        [XmlElementNameAttribute("ctRatio")]
        [XmlAttributeAttribute(true)]
        public virtual float CtRatio
        {
            get
            {
                return this._ctRatio;
            }
            set
            {
                if ((this._ctRatio != value))
                {
                    float old = this._ctRatio;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCtRatioChanging(e);
                    this.OnPropertyChanging("CtRatio", e, _ctRatioAttribute);
                    this._ctRatio = value;
                    this.OnCtRatioChanged(e);
                    this.OnPropertyChanged("CtRatio", e, _ctRatioAttribute);
                }
            }
        }
        
        /// <summary>
        /// The lineDropCompensation property
        /// </summary>
        [XmlElementNameAttribute("lineDropCompensation")]
        [XmlAttributeAttribute(true)]
        public virtual bool LineDropCompensation
        {
            get
            {
                return this._lineDropCompensation;
            }
            set
            {
                if ((this._lineDropCompensation != value))
                {
                    bool old = this._lineDropCompensation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLineDropCompensationChanging(e);
                    this.OnPropertyChanging("LineDropCompensation", e, _lineDropCompensationAttribute);
                    this._lineDropCompensation = value;
                    this.OnLineDropCompensationChanged(e);
                    this.OnPropertyChanged("LineDropCompensation", e, _lineDropCompensationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The monitoredPhase property
        /// </summary>
        [XmlElementNameAttribute("monitoredPhase")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<PhaseCode> MonitoredPhase
        {
            get
            {
                return this._monitoredPhase;
            }
            set
            {
                if ((this._monitoredPhase != value))
                {
                    Nullable<PhaseCode> old = this._monitoredPhase;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMonitoredPhaseChanging(e);
                    this.OnPropertyChanging("MonitoredPhase", e, _monitoredPhaseAttribute);
                    this._monitoredPhase = value;
                    this.OnMonitoredPhaseChanged(e);
                    this.OnPropertyChanged("MonitoredPhase", e, _monitoredPhaseAttribute);
                }
            }
        }
        
        /// <summary>
        /// The targetVoltage property
        /// </summary>
        [XmlElementNameAttribute("targetVoltage")]
        [XmlAttributeAttribute(true)]
        public virtual float TargetVoltage
        {
            get
            {
                return this._targetVoltage;
            }
            set
            {
                if ((this._targetVoltage != value))
                {
                    float old = this._targetVoltage;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTargetVoltageChanging(e);
                    this.OnPropertyChanging("TargetVoltage", e, _targetVoltageAttribute);
                    this._targetVoltage = value;
                    this.OnTargetVoltageChanged(e);
                    this.OnPropertyChanged("TargetVoltage", e, _targetVoltageAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/WiresExt/DistributionTapChang" +
                            "er")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PtRatio property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PtRatioChanging;
        
        /// <summary>
        /// Gets fired when the PtRatio property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PtRatioChanged;
        
        /// <summary>
        /// Gets fired before the LimitVoltage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LimitVoltageChanging;
        
        /// <summary>
        /// Gets fired when the LimitVoltage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LimitVoltageChanged;
        
        /// <summary>
        /// Gets fired before the ReverseLineDropR property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReverseLineDropRChanging;
        
        /// <summary>
        /// Gets fired when the ReverseLineDropR property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReverseLineDropRChanged;
        
        /// <summary>
        /// Gets fired before the ReverseLineDropX property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReverseLineDropXChanging;
        
        /// <summary>
        /// Gets fired when the ReverseLineDropX property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReverseLineDropXChanged;
        
        /// <summary>
        /// Gets fired before the CtRating property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CtRatingChanging;
        
        /// <summary>
        /// Gets fired when the CtRating property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CtRatingChanged;
        
        /// <summary>
        /// Gets fired before the LineDropR property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LineDropRChanging;
        
        /// <summary>
        /// Gets fired when the LineDropR property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LineDropRChanged;
        
        /// <summary>
        /// Gets fired before the BandVoltage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BandVoltageChanging;
        
        /// <summary>
        /// Gets fired when the BandVoltage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BandVoltageChanged;
        
        /// <summary>
        /// Gets fired before the LineDropX property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LineDropXChanging;
        
        /// <summary>
        /// Gets fired when the LineDropX property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LineDropXChanged;
        
        /// <summary>
        /// Gets fired before the CtRatio property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CtRatioChanging;
        
        /// <summary>
        /// Gets fired when the CtRatio property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CtRatioChanged;
        
        /// <summary>
        /// Gets fired before the LineDropCompensation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LineDropCompensationChanging;
        
        /// <summary>
        /// Gets fired when the LineDropCompensation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LineDropCompensationChanged;
        
        /// <summary>
        /// Gets fired before the MonitoredPhase property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MonitoredPhaseChanging;
        
        /// <summary>
        /// Gets fired when the MonitoredPhase property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MonitoredPhaseChanged;
        
        /// <summary>
        /// Gets fired before the TargetVoltage property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TargetVoltageChanging;
        
        /// <summary>
        /// Gets fired when the TargetVoltage property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TargetVoltageChanged;
        
        private static ITypedElement RetrievePtRatioAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTapChanger.ClassInstance)).Resolve("ptRatio")));
        }
        
        /// <summary>
        /// Raises the PtRatioChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPtRatioChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PtRatioChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PtRatioChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPtRatioChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PtRatioChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLimitVoltageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTapChanger.ClassInstance)).Resolve("limitVoltage")));
        }
        
        /// <summary>
        /// Raises the LimitVoltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLimitVoltageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LimitVoltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LimitVoltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLimitVoltageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LimitVoltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReverseLineDropRAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTapChanger.ClassInstance)).Resolve("reverseLineDropR")));
        }
        
        /// <summary>
        /// Raises the ReverseLineDropRChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReverseLineDropRChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReverseLineDropRChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReverseLineDropRChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReverseLineDropRChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReverseLineDropRChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveReverseLineDropXAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTapChanger.ClassInstance)).Resolve("reverseLineDropX")));
        }
        
        /// <summary>
        /// Raises the ReverseLineDropXChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReverseLineDropXChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReverseLineDropXChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReverseLineDropXChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReverseLineDropXChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReverseLineDropXChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCtRatingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTapChanger.ClassInstance)).Resolve("ctRating")));
        }
        
        /// <summary>
        /// Raises the CtRatingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCtRatingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CtRatingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CtRatingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCtRatingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CtRatingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLineDropRAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTapChanger.ClassInstance)).Resolve("lineDropR")));
        }
        
        /// <summary>
        /// Raises the LineDropRChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLineDropRChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LineDropRChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LineDropRChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLineDropRChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LineDropRChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBandVoltageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTapChanger.ClassInstance)).Resolve("bandVoltage")));
        }
        
        /// <summary>
        /// Raises the BandVoltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBandVoltageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BandVoltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BandVoltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBandVoltageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BandVoltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLineDropXAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTapChanger.ClassInstance)).Resolve("lineDropX")));
        }
        
        /// <summary>
        /// Raises the LineDropXChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLineDropXChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LineDropXChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LineDropXChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLineDropXChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LineDropXChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCtRatioAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTapChanger.ClassInstance)).Resolve("ctRatio")));
        }
        
        /// <summary>
        /// Raises the CtRatioChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCtRatioChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CtRatioChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CtRatioChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCtRatioChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CtRatioChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLineDropCompensationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTapChanger.ClassInstance)).Resolve("lineDropCompensation")));
        }
        
        /// <summary>
        /// Raises the LineDropCompensationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLineDropCompensationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LineDropCompensationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LineDropCompensationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLineDropCompensationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LineDropCompensationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveMonitoredPhaseAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTapChanger.ClassInstance)).Resolve("monitoredPhase")));
        }
        
        /// <summary>
        /// Raises the MonitoredPhaseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMonitoredPhaseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MonitoredPhaseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MonitoredPhaseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMonitoredPhaseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MonitoredPhaseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTargetVoltageAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DistributionTapChanger.ClassInstance)).Resolve("targetVoltage")));
        }
        
        /// <summary>
        /// Raises the TargetVoltageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetVoltageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TargetVoltageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TargetVoltageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTargetVoltageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TargetVoltageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PTRATIO"))
            {
                return this.PtRatio;
            }
            if ((attribute == "LIMITVOLTAGE"))
            {
                return this.LimitVoltage;
            }
            if ((attribute == "REVERSELINEDROPR"))
            {
                return this.ReverseLineDropR;
            }
            if ((attribute == "REVERSELINEDROPX"))
            {
                return this.ReverseLineDropX;
            }
            if ((attribute == "CTRATING"))
            {
                return this.CtRating;
            }
            if ((attribute == "LINEDROPR"))
            {
                return this.LineDropR;
            }
            if ((attribute == "BANDVOLTAGE"))
            {
                return this.BandVoltage;
            }
            if ((attribute == "LINEDROPX"))
            {
                return this.LineDropX;
            }
            if ((attribute == "CTRATIO"))
            {
                return this.CtRatio;
            }
            if ((attribute == "LINEDROPCOMPENSATION"))
            {
                return this.LineDropCompensation;
            }
            if ((attribute == "MONITOREDPHASE"))
            {
                return this.MonitoredPhase;
            }
            if ((attribute == "TARGETVOLTAGE"))
            {
                return this.TargetVoltage;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "PTRATIO"))
            {
                this.PtRatio = ((float)(value));
                return;
            }
            if ((feature == "LIMITVOLTAGE"))
            {
                this.LimitVoltage = ((float)(value));
                return;
            }
            if ((feature == "REVERSELINEDROPR"))
            {
                this.ReverseLineDropR = ((float)(value));
                return;
            }
            if ((feature == "REVERSELINEDROPX"))
            {
                this.ReverseLineDropX = ((float)(value));
                return;
            }
            if ((feature == "CTRATING"))
            {
                this.CtRating = ((float)(value));
                return;
            }
            if ((feature == "LINEDROPR"))
            {
                this.LineDropR = ((float)(value));
                return;
            }
            if ((feature == "BANDVOLTAGE"))
            {
                this.BandVoltage = ((float)(value));
                return;
            }
            if ((feature == "LINEDROPX"))
            {
                this.LineDropX = ((float)(value));
                return;
            }
            if ((feature == "CTRATIO"))
            {
                this.CtRatio = ((float)(value));
                return;
            }
            if ((feature == "LINEDROPCOMPENSATION"))
            {
                this.LineDropCompensation = ((bool)(value));
                return;
            }
            if ((feature == "MONITOREDPHASE"))
            {
                this.MonitoredPhase = ((PhaseCode)(value));
                return;
            }
            if ((feature == "TARGETVOLTAGE"))
            {
                this.TargetVoltage = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/WiresExt/DistributionTapChang" +
                        "er")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ptRatio property
        /// </summary>
        private sealed class PtRatioProxy : ModelPropertyChange<IDistributionTapChanger, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PtRatioProxy(IDistributionTapChanger modelElement) : 
                    base(modelElement, "ptRatio")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PtRatio;
                }
                set
                {
                    this.ModelElement.PtRatio = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the limitVoltage property
        /// </summary>
        private sealed class LimitVoltageProxy : ModelPropertyChange<IDistributionTapChanger, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LimitVoltageProxy(IDistributionTapChanger modelElement) : 
                    base(modelElement, "limitVoltage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.LimitVoltage;
                }
                set
                {
                    this.ModelElement.LimitVoltage = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the reverseLineDropR property
        /// </summary>
        private sealed class ReverseLineDropRProxy : ModelPropertyChange<IDistributionTapChanger, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReverseLineDropRProxy(IDistributionTapChanger modelElement) : 
                    base(modelElement, "reverseLineDropR")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ReverseLineDropR;
                }
                set
                {
                    this.ModelElement.ReverseLineDropR = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the reverseLineDropX property
        /// </summary>
        private sealed class ReverseLineDropXProxy : ModelPropertyChange<IDistributionTapChanger, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReverseLineDropXProxy(IDistributionTapChanger modelElement) : 
                    base(modelElement, "reverseLineDropX")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ReverseLineDropX;
                }
                set
                {
                    this.ModelElement.ReverseLineDropX = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ctRating property
        /// </summary>
        private sealed class CtRatingProxy : ModelPropertyChange<IDistributionTapChanger, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CtRatingProxy(IDistributionTapChanger modelElement) : 
                    base(modelElement, "ctRating")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CtRating;
                }
                set
                {
                    this.ModelElement.CtRating = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lineDropR property
        /// </summary>
        private sealed class LineDropRProxy : ModelPropertyChange<IDistributionTapChanger, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LineDropRProxy(IDistributionTapChanger modelElement) : 
                    base(modelElement, "lineDropR")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.LineDropR;
                }
                set
                {
                    this.ModelElement.LineDropR = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the bandVoltage property
        /// </summary>
        private sealed class BandVoltageProxy : ModelPropertyChange<IDistributionTapChanger, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BandVoltageProxy(IDistributionTapChanger modelElement) : 
                    base(modelElement, "bandVoltage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.BandVoltage;
                }
                set
                {
                    this.ModelElement.BandVoltage = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lineDropX property
        /// </summary>
        private sealed class LineDropXProxy : ModelPropertyChange<IDistributionTapChanger, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LineDropXProxy(IDistributionTapChanger modelElement) : 
                    base(modelElement, "lineDropX")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.LineDropX;
                }
                set
                {
                    this.ModelElement.LineDropX = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ctRatio property
        /// </summary>
        private sealed class CtRatioProxy : ModelPropertyChange<IDistributionTapChanger, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CtRatioProxy(IDistributionTapChanger modelElement) : 
                    base(modelElement, "ctRatio")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CtRatio;
                }
                set
                {
                    this.ModelElement.CtRatio = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lineDropCompensation property
        /// </summary>
        private sealed class LineDropCompensationProxy : ModelPropertyChange<IDistributionTapChanger, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LineDropCompensationProxy(IDistributionTapChanger modelElement) : 
                    base(modelElement, "lineDropCompensation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.LineDropCompensation;
                }
                set
                {
                    this.ModelElement.LineDropCompensation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the monitoredPhase property
        /// </summary>
        private sealed class MonitoredPhaseProxy : ModelPropertyChange<IDistributionTapChanger, Nullable<PhaseCode>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MonitoredPhaseProxy(IDistributionTapChanger modelElement) : 
                    base(modelElement, "monitoredPhase")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<PhaseCode> Value
            {
                get
                {
                    return this.ModelElement.MonitoredPhase;
                }
                set
                {
                    this.ModelElement.MonitoredPhase = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the targetVoltage property
        /// </summary>
        private sealed class TargetVoltageProxy : ModelPropertyChange<IDistributionTapChanger, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TargetVoltageProxy(IDistributionTapChanger modelElement) : 
                    base(modelElement, "targetVoltage")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.TargetVoltage;
                }
                set
                {
                    this.ModelElement.TargetVoltage = value;
                }
            }
        }
    }
}

