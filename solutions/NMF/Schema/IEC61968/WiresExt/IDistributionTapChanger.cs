using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.WiresExt
{
    
    
    /// <summary>
    /// The public interface for DistributionTapChanger
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(DistributionTapChanger))]
    [XmlDefaultImplementationTypeAttribute(typeof(DistributionTapChanger))]
    public interface IDistributionTapChanger : IModelElement, IRatioTapChanger
    {
        
        /// <summary>
        /// The ptRatio property
        /// </summary>
        float PtRatio
        {
            get;
            set;
        }
        
        /// <summary>
        /// The limitVoltage property
        /// </summary>
        float LimitVoltage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reverseLineDropR property
        /// </summary>
        float ReverseLineDropR
        {
            get;
            set;
        }
        
        /// <summary>
        /// The reverseLineDropX property
        /// </summary>
        float ReverseLineDropX
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ctRating property
        /// </summary>
        float CtRating
        {
            get;
            set;
        }
        
        /// <summary>
        /// The lineDropR property
        /// </summary>
        float LineDropR
        {
            get;
            set;
        }
        
        /// <summary>
        /// The bandVoltage property
        /// </summary>
        float BandVoltage
        {
            get;
            set;
        }
        
        /// <summary>
        /// The lineDropX property
        /// </summary>
        float LineDropX
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ctRatio property
        /// </summary>
        float CtRatio
        {
            get;
            set;
        }
        
        /// <summary>
        /// The lineDropCompensation property
        /// </summary>
        bool LineDropCompensation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The monitoredPhase property
        /// </summary>
        Nullable<PhaseCode> MonitoredPhase
        {
            get;
            set;
        }
        
        /// <summary>
        /// The targetVoltage property
        /// </summary>
        float TargetVoltage
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the PtRatio property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PtRatioChanging;
        
        /// <summary>
        /// Gets fired when the PtRatio property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PtRatioChanged;
        
        /// <summary>
        /// Gets fired before the LimitVoltage property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LimitVoltageChanging;
        
        /// <summary>
        /// Gets fired when the LimitVoltage property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LimitVoltageChanged;
        
        /// <summary>
        /// Gets fired before the ReverseLineDropR property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReverseLineDropRChanging;
        
        /// <summary>
        /// Gets fired when the ReverseLineDropR property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReverseLineDropRChanged;
        
        /// <summary>
        /// Gets fired before the ReverseLineDropX property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReverseLineDropXChanging;
        
        /// <summary>
        /// Gets fired when the ReverseLineDropX property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ReverseLineDropXChanged;
        
        /// <summary>
        /// Gets fired before the CtRating property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CtRatingChanging;
        
        /// <summary>
        /// Gets fired when the CtRating property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CtRatingChanged;
        
        /// <summary>
        /// Gets fired before the LineDropR property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LineDropRChanging;
        
        /// <summary>
        /// Gets fired when the LineDropR property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LineDropRChanged;
        
        /// <summary>
        /// Gets fired before the BandVoltage property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BandVoltageChanging;
        
        /// <summary>
        /// Gets fired when the BandVoltage property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BandVoltageChanged;
        
        /// <summary>
        /// Gets fired before the LineDropX property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LineDropXChanging;
        
        /// <summary>
        /// Gets fired when the LineDropX property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LineDropXChanged;
        
        /// <summary>
        /// Gets fired before the CtRatio property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CtRatioChanging;
        
        /// <summary>
        /// Gets fired when the CtRatio property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CtRatioChanged;
        
        /// <summary>
        /// Gets fired before the LineDropCompensation property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LineDropCompensationChanging;
        
        /// <summary>
        /// Gets fired when the LineDropCompensation property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LineDropCompensationChanged;
        
        /// <summary>
        /// Gets fired before the MonitoredPhase property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MonitoredPhaseChanging;
        
        /// <summary>
        /// Gets fired when the MonitoredPhase property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MonitoredPhaseChanged;
        
        /// <summary>
        /// Gets fired before the TargetVoltage property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TargetVoltageChanging;
        
        /// <summary>
        /// Gets fired when the TargetVoltage property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> TargetVoltageChanged;
    }
}

