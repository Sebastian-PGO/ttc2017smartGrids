//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.AssetModels;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.WiresExt
{
    
    
    /// <summary>
    /// The default implementation of the PerLengthSequenceImpedance class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#WiresExt")]
    [XmlNamespacePrefixAttribute("cimWiresExt")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/WiresExt/PerLengthSequenceImp" +
        "edance")]
    [DebuggerDisplayAttribute("PerLengthSequenceImpedance {UUID}")]
    public partial class PerLengthSequenceImpedance : IdentifiedObject, IPerLengthSequenceImpedance, IModelElement
    {
        
        /// <summary>
        /// The backing field for the X0 property
        /// </summary>
        private float _x0;
        
        private static Lazy<ITypedElement> _x0Attribute = new Lazy<ITypedElement>(RetrieveX0Attribute);
        
        /// <summary>
        /// The backing field for the Bch property
        /// </summary>
        private float _bch;
        
        private static Lazy<ITypedElement> _bchAttribute = new Lazy<ITypedElement>(RetrieveBchAttribute);
        
        /// <summary>
        /// The backing field for the R0 property
        /// </summary>
        private float _r0;
        
        private static Lazy<ITypedElement> _r0Attribute = new Lazy<ITypedElement>(RetrieveR0Attribute);
        
        /// <summary>
        /// The backing field for the G0ch property
        /// </summary>
        private float _g0ch;
        
        private static Lazy<ITypedElement> _g0chAttribute = new Lazy<ITypedElement>(RetrieveG0chAttribute);
        
        /// <summary>
        /// The backing field for the R property
        /// </summary>
        private float _r;
        
        private static Lazy<ITypedElement> _rAttribute = new Lazy<ITypedElement>(RetrieveRAttribute);
        
        /// <summary>
        /// The backing field for the X property
        /// </summary>
        private float _x;
        
        private static Lazy<ITypedElement> _xAttribute = new Lazy<ITypedElement>(RetrieveXAttribute);
        
        /// <summary>
        /// The backing field for the Gch property
        /// </summary>
        private float _gch;
        
        private static Lazy<ITypedElement> _gchAttribute = new Lazy<ITypedElement>(RetrieveGchAttribute);
        
        /// <summary>
        /// The backing field for the B0ch property
        /// </summary>
        private float _b0ch;
        
        private static Lazy<ITypedElement> _b0chAttribute = new Lazy<ITypedElement>(RetrieveB0chAttribute);
        
        private static Lazy<ITypedElement> _conductorSegmentsReference = new Lazy<ITypedElement>(RetrieveConductorSegmentsReference);
        
        /// <summary>
        /// The backing field for the ConductorSegments property
        /// </summary>
        private PerLengthSequenceImpedanceConductorSegmentsCollection _conductorSegments;
        
        private static IClass _classInstance;
        
        public PerLengthSequenceImpedance()
        {
            this._conductorSegments = new PerLengthSequenceImpedanceConductorSegmentsCollection(this);
            this._conductorSegments.CollectionChanging += this.ConductorSegmentsCollectionChanging;
            this._conductorSegments.CollectionChanged += this.ConductorSegmentsCollectionChanged;
        }
        
        /// <summary>
        /// The x0 property
        /// </summary>
        [XmlElementNameAttribute("x0")]
        [XmlAttributeAttribute(true)]
        public virtual float X0
        {
            get
            {
                return this._x0;
            }
            set
            {
                if ((this._x0 != value))
                {
                    float old = this._x0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnX0Changing(e);
                    this.OnPropertyChanging("X0", e, _x0Attribute);
                    this._x0 = value;
                    this.OnX0Changed(e);
                    this.OnPropertyChanged("X0", e, _x0Attribute);
                }
            }
        }
        
        /// <summary>
        /// The bch property
        /// </summary>
        [XmlElementNameAttribute("bch")]
        [XmlAttributeAttribute(true)]
        public virtual float Bch
        {
            get
            {
                return this._bch;
            }
            set
            {
                if ((this._bch != value))
                {
                    float old = this._bch;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBchChanging(e);
                    this.OnPropertyChanging("Bch", e, _bchAttribute);
                    this._bch = value;
                    this.OnBchChanged(e);
                    this.OnPropertyChanged("Bch", e, _bchAttribute);
                }
            }
        }
        
        /// <summary>
        /// The r0 property
        /// </summary>
        [XmlElementNameAttribute("r0")]
        [XmlAttributeAttribute(true)]
        public virtual float R0
        {
            get
            {
                return this._r0;
            }
            set
            {
                if ((this._r0 != value))
                {
                    float old = this._r0;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnR0Changing(e);
                    this.OnPropertyChanging("R0", e, _r0Attribute);
                    this._r0 = value;
                    this.OnR0Changed(e);
                    this.OnPropertyChanged("R0", e, _r0Attribute);
                }
            }
        }
        
        /// <summary>
        /// The g0ch property
        /// </summary>
        [XmlElementNameAttribute("g0ch")]
        [XmlAttributeAttribute(true)]
        public virtual float G0ch
        {
            get
            {
                return this._g0ch;
            }
            set
            {
                if ((this._g0ch != value))
                {
                    float old = this._g0ch;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnG0chChanging(e);
                    this.OnPropertyChanging("G0ch", e, _g0chAttribute);
                    this._g0ch = value;
                    this.OnG0chChanged(e);
                    this.OnPropertyChanged("G0ch", e, _g0chAttribute);
                }
            }
        }
        
        /// <summary>
        /// The r property
        /// </summary>
        [XmlElementNameAttribute("r")]
        [XmlAttributeAttribute(true)]
        public virtual float R
        {
            get
            {
                return this._r;
            }
            set
            {
                if ((this._r != value))
                {
                    float old = this._r;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRChanging(e);
                    this.OnPropertyChanging("R", e, _rAttribute);
                    this._r = value;
                    this.OnRChanged(e);
                    this.OnPropertyChanged("R", e, _rAttribute);
                }
            }
        }
        
        /// <summary>
        /// The x property
        /// </summary>
        [XmlElementNameAttribute("x")]
        [XmlAttributeAttribute(true)]
        public virtual float X
        {
            get
            {
                return this._x;
            }
            set
            {
                if ((this._x != value))
                {
                    float old = this._x;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnXChanging(e);
                    this.OnPropertyChanging("X", e, _xAttribute);
                    this._x = value;
                    this.OnXChanged(e);
                    this.OnPropertyChanged("X", e, _xAttribute);
                }
            }
        }
        
        /// <summary>
        /// The gch property
        /// </summary>
        [XmlElementNameAttribute("gch")]
        [XmlAttributeAttribute(true)]
        public virtual float Gch
        {
            get
            {
                return this._gch;
            }
            set
            {
                if ((this._gch != value))
                {
                    float old = this._gch;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnGchChanging(e);
                    this.OnPropertyChanging("Gch", e, _gchAttribute);
                    this._gch = value;
                    this.OnGchChanged(e);
                    this.OnPropertyChanged("Gch", e, _gchAttribute);
                }
            }
        }
        
        /// <summary>
        /// The b0ch property
        /// </summary>
        [XmlElementNameAttribute("b0ch")]
        [XmlAttributeAttribute(true)]
        public virtual float B0ch
        {
            get
            {
                return this._b0ch;
            }
            set
            {
                if ((this._b0ch != value))
                {
                    float old = this._b0ch;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnB0chChanging(e);
                    this.OnPropertyChanging("B0ch", e, _b0chAttribute);
                    this._b0ch = value;
                    this.OnB0chChanged(e);
                    this.OnPropertyChanged("B0ch", e, _b0chAttribute);
                }
            }
        }
        
        /// <summary>
        /// The ConductorSegments property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("SequenceImpedance")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDistributionLineSegment> ConductorSegments
        {
            get
            {
                return this._conductorSegments;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new PerLengthSequenceImpedanceReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/WiresExt/PerLengthSequenceImp" +
                            "edance")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the X0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> X0Changing;
        
        /// <summary>
        /// Gets fired when the X0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> X0Changed;
        
        /// <summary>
        /// Gets fired before the Bch property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BchChanging;
        
        /// <summary>
        /// Gets fired when the Bch property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BchChanged;
        
        /// <summary>
        /// Gets fired before the R0 property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> R0Changing;
        
        /// <summary>
        /// Gets fired when the R0 property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> R0Changed;
        
        /// <summary>
        /// Gets fired before the G0ch property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> G0chChanging;
        
        /// <summary>
        /// Gets fired when the G0ch property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> G0chChanged;
        
        /// <summary>
        /// Gets fired before the R property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RChanging;
        
        /// <summary>
        /// Gets fired when the R property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RChanged;
        
        /// <summary>
        /// Gets fired before the X property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XChanging;
        
        /// <summary>
        /// Gets fired when the X property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> XChanged;
        
        /// <summary>
        /// Gets fired before the Gch property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GchChanging;
        
        /// <summary>
        /// Gets fired when the Gch property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> GchChanged;
        
        /// <summary>
        /// Gets fired before the B0ch property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> B0chChanging;
        
        /// <summary>
        /// Gets fired when the B0ch property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> B0chChanged;
        
        private static ITypedElement RetrieveX0Attribute()
        {
            return ((ITypedElement)(((ModelElement)(PerLengthSequenceImpedance.ClassInstance)).Resolve("x0")));
        }
        
        /// <summary>
        /// Raises the X0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnX0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.X0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the X0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnX0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.X0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveBchAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PerLengthSequenceImpedance.ClassInstance)).Resolve("bch")));
        }
        
        /// <summary>
        /// Raises the BchChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBchChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BchChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BchChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBchChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BchChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveR0Attribute()
        {
            return ((ITypedElement)(((ModelElement)(PerLengthSequenceImpedance.ClassInstance)).Resolve("r0")));
        }
        
        /// <summary>
        /// Raises the R0Changing event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnR0Changing(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.R0Changing;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the R0Changed event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnR0Changed(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.R0Changed;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveG0chAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PerLengthSequenceImpedance.ClassInstance)).Resolve("g0ch")));
        }
        
        /// <summary>
        /// Raises the G0chChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnG0chChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.G0chChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the G0chChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnG0chChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.G0chChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PerLengthSequenceImpedance.ClassInstance)).Resolve("r")));
        }
        
        /// <summary>
        /// Raises the RChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveXAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PerLengthSequenceImpedance.ClassInstance)).Resolve("x")));
        }
        
        /// <summary>
        /// Raises the XChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the XChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnXChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.XChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveGchAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PerLengthSequenceImpedance.ClassInstance)).Resolve("gch")));
        }
        
        /// <summary>
        /// Raises the GchChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGchChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GchChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the GchChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnGchChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.GchChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveB0chAttribute()
        {
            return ((ITypedElement)(((ModelElement)(PerLengthSequenceImpedance.ClassInstance)).Resolve("b0ch")));
        }
        
        /// <summary>
        /// Raises the B0chChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnB0chChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.B0chChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the B0chChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnB0chChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.B0chChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveConductorSegmentsReference()
        {
            return ((ITypedElement)(((ModelElement)(PerLengthSequenceImpedance.ClassInstance)).Resolve("ConductorSegments")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ConductorSegments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConductorSegmentsCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("ConductorSegments", e, _conductorSegmentsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ConductorSegments property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ConductorSegmentsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ConductorSegments", e, _conductorSegmentsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "X0"))
            {
                return this.X0;
            }
            if ((attribute == "BCH"))
            {
                return this.Bch;
            }
            if ((attribute == "R0"))
            {
                return this.R0;
            }
            if ((attribute == "G0CH"))
            {
                return this.G0ch;
            }
            if ((attribute == "R"))
            {
                return this.R;
            }
            if ((attribute == "X"))
            {
                return this.X;
            }
            if ((attribute == "GCH"))
            {
                return this.Gch;
            }
            if ((attribute == "B0CH"))
            {
                return this.B0ch;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "CONDUCTORSEGMENTS"))
            {
                return this._conductorSegments;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "X0"))
            {
                this.X0 = ((float)(value));
                return;
            }
            if ((feature == "BCH"))
            {
                this.Bch = ((float)(value));
                return;
            }
            if ((feature == "R0"))
            {
                this.R0 = ((float)(value));
                return;
            }
            if ((feature == "G0CH"))
            {
                this.G0ch = ((float)(value));
                return;
            }
            if ((feature == "R"))
            {
                this.R = ((float)(value));
                return;
            }
            if ((feature == "X"))
            {
                this.X = ((float)(value));
                return;
            }
            if ((feature == "GCH"))
            {
                this.Gch = ((float)(value));
                return;
            }
            if ((feature == "B0CH"))
            {
                this.B0ch = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/WiresExt/PerLengthSequenceImp" +
                        "edance")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the PerLengthSequenceImpedance class
        /// </summary>
        public class PerLengthSequenceImpedanceReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private PerLengthSequenceImpedance _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public PerLengthSequenceImpedanceReferencedElementsCollection(PerLengthSequenceImpedance parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.ConductorSegments.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.ConductorSegments.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.ConductorSegments.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IDistributionLineSegment conductorSegmentsCasted = item.As<IDistributionLineSegment>();
                if ((conductorSegmentsCasted != null))
                {
                    this._parent.ConductorSegments.Add(conductorSegmentsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.ConductorSegments.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.ConductorSegments.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> conductorSegmentsEnumerator = this._parent.ConductorSegments.GetEnumerator();
                try
                {
                    for (
                    ; conductorSegmentsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = conductorSegmentsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    conductorSegmentsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IDistributionLineSegment distributionLineSegmentItem = item.As<IDistributionLineSegment>();
                if (((distributionLineSegmentItem != null) 
                            && this._parent.ConductorSegments.Remove(distributionLineSegmentItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.ConductorSegments).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the x0 property
        /// </summary>
        private sealed class X0Proxy : ModelPropertyChange<IPerLengthSequenceImpedance, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public X0Proxy(IPerLengthSequenceImpedance modelElement) : 
                    base(modelElement, "x0")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.X0;
                }
                set
                {
                    this.ModelElement.X0 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the bch property
        /// </summary>
        private sealed class BchProxy : ModelPropertyChange<IPerLengthSequenceImpedance, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BchProxy(IPerLengthSequenceImpedance modelElement) : 
                    base(modelElement, "bch")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Bch;
                }
                set
                {
                    this.ModelElement.Bch = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the r0 property
        /// </summary>
        private sealed class R0Proxy : ModelPropertyChange<IPerLengthSequenceImpedance, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public R0Proxy(IPerLengthSequenceImpedance modelElement) : 
                    base(modelElement, "r0")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.R0;
                }
                set
                {
                    this.ModelElement.R0 = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the g0ch property
        /// </summary>
        private sealed class G0chProxy : ModelPropertyChange<IPerLengthSequenceImpedance, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public G0chProxy(IPerLengthSequenceImpedance modelElement) : 
                    base(modelElement, "g0ch")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.G0ch;
                }
                set
                {
                    this.ModelElement.G0ch = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the r property
        /// </summary>
        private sealed class RProxy : ModelPropertyChange<IPerLengthSequenceImpedance, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RProxy(IPerLengthSequenceImpedance modelElement) : 
                    base(modelElement, "r")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.R;
                }
                set
                {
                    this.ModelElement.R = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the x property
        /// </summary>
        private sealed class XProxy : ModelPropertyChange<IPerLengthSequenceImpedance, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public XProxy(IPerLengthSequenceImpedance modelElement) : 
                    base(modelElement, "x")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.X;
                }
                set
                {
                    this.ModelElement.X = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the gch property
        /// </summary>
        private sealed class GchProxy : ModelPropertyChange<IPerLengthSequenceImpedance, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public GchProxy(IPerLengthSequenceImpedance modelElement) : 
                    base(modelElement, "gch")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.Gch;
                }
                set
                {
                    this.ModelElement.Gch = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the b0ch property
        /// </summary>
        private sealed class B0chProxy : ModelPropertyChange<IPerLengthSequenceImpedance, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public B0chProxy(IPerLengthSequenceImpedance modelElement) : 
                    base(modelElement, "b0ch")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.B0ch;
                }
                set
                {
                    this.ModelElement.B0ch = value;
                }
            }
        }
    }
}

