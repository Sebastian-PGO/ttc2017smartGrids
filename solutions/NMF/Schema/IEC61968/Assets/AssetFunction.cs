//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61968.Assets
{
    
    
    /// <summary>
    /// The default implementation of the AssetFunction class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Assets")]
    [XmlNamespacePrefixAttribute("cimAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Assets/AssetFunction")]
    [DebuggerDisplayAttribute("AssetFunction {UUID}")]
    public partial class AssetFunction : IdentifiedObject, IAssetFunction, IModelElement
    {
        
        /// <summary>
        /// The backing field for the HardwareID property
        /// </summary>
        private string _hardwareID;
        
        private static Lazy<ITypedElement> _hardwareIDAttribute = new Lazy<ITypedElement>(RetrieveHardwareIDAttribute);
        
        /// <summary>
        /// The backing field for the ProgramID property
        /// </summary>
        private string _programID;
        
        private static Lazy<ITypedElement> _programIDAttribute = new Lazy<ITypedElement>(RetrieveProgramIDAttribute);
        
        /// <summary>
        /// The backing field for the FirmwareID property
        /// </summary>
        private string _firmwareID;
        
        private static Lazy<ITypedElement> _firmwareIDAttribute = new Lazy<ITypedElement>(RetrieveFirmwareIDAttribute);
        
        /// <summary>
        /// The backing field for the Password property
        /// </summary>
        private string _password;
        
        private static Lazy<ITypedElement> _passwordAttribute = new Lazy<ITypedElement>(RetrievePasswordAttribute);
        
        /// <summary>
        /// The backing field for the ConfigID property
        /// </summary>
        private string _configID;
        
        private static Lazy<ITypedElement> _configIDAttribute = new Lazy<ITypedElement>(RetrieveConfigIDAttribute);
        
        private static Lazy<ITypedElement> _assetReference = new Lazy<ITypedElement>(RetrieveAssetReference);
        
        /// <summary>
        /// The backing field for the Asset property
        /// </summary>
        private IAsset _asset;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The hardwareID property
        /// </summary>
        [XmlElementNameAttribute("hardwareID")]
        [XmlAttributeAttribute(true)]
        public virtual string HardwareID
        {
            get
            {
                return this._hardwareID;
            }
            set
            {
                if ((this._hardwareID != value))
                {
                    string old = this._hardwareID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHardwareIDChanging(e);
                    this.OnPropertyChanging("HardwareID", e, _hardwareIDAttribute);
                    this._hardwareID = value;
                    this.OnHardwareIDChanged(e);
                    this.OnPropertyChanged("HardwareID", e, _hardwareIDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The programID property
        /// </summary>
        [XmlElementNameAttribute("programID")]
        [XmlAttributeAttribute(true)]
        public virtual string ProgramID
        {
            get
            {
                return this._programID;
            }
            set
            {
                if ((this._programID != value))
                {
                    string old = this._programID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnProgramIDChanging(e);
                    this.OnPropertyChanging("ProgramID", e, _programIDAttribute);
                    this._programID = value;
                    this.OnProgramIDChanged(e);
                    this.OnPropertyChanged("ProgramID", e, _programIDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The firmwareID property
        /// </summary>
        [XmlElementNameAttribute("firmwareID")]
        [XmlAttributeAttribute(true)]
        public virtual string FirmwareID
        {
            get
            {
                return this._firmwareID;
            }
            set
            {
                if ((this._firmwareID != value))
                {
                    string old = this._firmwareID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFirmwareIDChanging(e);
                    this.OnPropertyChanging("FirmwareID", e, _firmwareIDAttribute);
                    this._firmwareID = value;
                    this.OnFirmwareIDChanged(e);
                    this.OnPropertyChanged("FirmwareID", e, _firmwareIDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The password property
        /// </summary>
        [XmlElementNameAttribute("password")]
        [XmlAttributeAttribute(true)]
        public virtual string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    string old = this._password;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPasswordChanging(e);
                    this.OnPropertyChanging("Password", e, _passwordAttribute);
                    this._password = value;
                    this.OnPasswordChanged(e);
                    this.OnPropertyChanged("Password", e, _passwordAttribute);
                }
            }
        }
        
        /// <summary>
        /// The configID property
        /// </summary>
        [XmlElementNameAttribute("configID")]
        [XmlAttributeAttribute(true)]
        public virtual string ConfigID
        {
            get
            {
                return this._configID;
            }
            set
            {
                if ((this._configID != value))
                {
                    string old = this._configID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConfigIDChanging(e);
                    this.OnPropertyChanging("ConfigID", e, _configIDAttribute);
                    this._configID = value;
                    this.OnConfigIDChanged(e);
                    this.OnPropertyChanged("ConfigID", e, _configIDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Asset property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("AssetFunctions")]
        public virtual IAsset Asset
        {
            get
            {
                return this._asset;
            }
            set
            {
                if ((this._asset != value))
                {
                    IAsset old = this._asset;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAssetChanging(e);
                    this.OnPropertyChanging("Asset", e, _assetReference);
                    this._asset = value;
                    if ((old != null))
                    {
                        old.AssetFunctions.Remove(this);
                        old.Deleted -= this.OnResetAsset;
                    }
                    if ((value != null))
                    {
                        value.AssetFunctions.Add(this);
                        value.Deleted += this.OnResetAsset;
                    }
                    this.OnAssetChanged(e);
                    this.OnPropertyChanged("Asset", e, _assetReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AssetFunctionReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Assets/AssetFunction")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the HardwareID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HardwareIDChanging;
        
        /// <summary>
        /// Gets fired when the HardwareID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HardwareIDChanged;
        
        /// <summary>
        /// Gets fired before the ProgramID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProgramIDChanging;
        
        /// <summary>
        /// Gets fired when the ProgramID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProgramIDChanged;
        
        /// <summary>
        /// Gets fired before the FirmwareID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FirmwareIDChanging;
        
        /// <summary>
        /// Gets fired when the FirmwareID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FirmwareIDChanged;
        
        /// <summary>
        /// Gets fired before the Password property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PasswordChanging;
        
        /// <summary>
        /// Gets fired when the Password property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PasswordChanged;
        
        /// <summary>
        /// Gets fired before the ConfigID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConfigIDChanging;
        
        /// <summary>
        /// Gets fired when the ConfigID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConfigIDChanged;
        
        /// <summary>
        /// Gets fired before the Asset property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetChanging;
        
        /// <summary>
        /// Gets fired when the Asset property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetChanged;
        
        private static ITypedElement RetrieveHardwareIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AssetFunction.ClassInstance)).Resolve("hardwareID")));
        }
        
        /// <summary>
        /// Raises the HardwareIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHardwareIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HardwareIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HardwareIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHardwareIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HardwareIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveProgramIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AssetFunction.ClassInstance)).Resolve("programID")));
        }
        
        /// <summary>
        /// Raises the ProgramIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProgramIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProgramIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ProgramIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProgramIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProgramIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFirmwareIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AssetFunction.ClassInstance)).Resolve("firmwareID")));
        }
        
        /// <summary>
        /// Raises the FirmwareIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFirmwareIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FirmwareIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FirmwareIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFirmwareIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FirmwareIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePasswordAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AssetFunction.ClassInstance)).Resolve("password")));
        }
        
        /// <summary>
        /// Raises the PasswordChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPasswordChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PasswordChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PasswordChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPasswordChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PasswordChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveConfigIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(AssetFunction.ClassInstance)).Resolve("configID")));
        }
        
        /// <summary>
        /// Raises the ConfigIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConfigIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConfigIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConfigIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConfigIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConfigIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAssetReference()
        {
            return ((ITypedElement)(((ModelElement)(AssetFunction.ClassInstance)).Resolve("Asset")));
        }
        
        /// <summary>
        /// Raises the AssetChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AssetChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Asset property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAsset(object sender, System.EventArgs eventArgs)
        {
            this.Asset = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "HARDWAREID"))
            {
                return this.HardwareID;
            }
            if ((attribute == "PROGRAMID"))
            {
                return this.ProgramID;
            }
            if ((attribute == "FIRMWAREID"))
            {
                return this.FirmwareID;
            }
            if ((attribute == "PASSWORD"))
            {
                return this.Password;
            }
            if ((attribute == "CONFIGID"))
            {
                return this.ConfigID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ASSET"))
            {
                this.Asset = ((IAsset)(value));
                return;
            }
            if ((feature == "HARDWAREID"))
            {
                this.HardwareID = ((string)(value));
                return;
            }
            if ((feature == "PROGRAMID"))
            {
                this.ProgramID = ((string)(value));
                return;
            }
            if ((feature == "FIRMWAREID"))
            {
                this.FirmwareID = ((string)(value));
                return;
            }
            if ((feature == "PASSWORD"))
            {
                this.Password = ((string)(value));
                return;
            }
            if ((feature == "CONFIGID"))
            {
                this.ConfigID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Asset"))
            {
                return new AssetProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Asset"))
            {
                return new AssetProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Assets/AssetFunction")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the AssetFunction class
        /// </summary>
        public class AssetFunctionReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private AssetFunction _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AssetFunctionReferencedElementsCollection(AssetFunction parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Asset != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AssetChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AssetChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Asset == null))
                {
                    IAsset assetCasted = item.As<IAsset>();
                    if ((assetCasted != null))
                    {
                        this._parent.Asset = assetCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Asset = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Asset))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Asset != null))
                {
                    array[arrayIndex] = this._parent.Asset;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Asset == item))
                {
                    this._parent.Asset = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Asset).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the hardwareID property
        /// </summary>
        private sealed class HardwareIDProxy : ModelPropertyChange<IAssetFunction, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HardwareIDProxy(IAssetFunction modelElement) : 
                    base(modelElement, "hardwareID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.HardwareID;
                }
                set
                {
                    this.ModelElement.HardwareID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the programID property
        /// </summary>
        private sealed class ProgramIDProxy : ModelPropertyChange<IAssetFunction, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProgramIDProxy(IAssetFunction modelElement) : 
                    base(modelElement, "programID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ProgramID;
                }
                set
                {
                    this.ModelElement.ProgramID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the firmwareID property
        /// </summary>
        private sealed class FirmwareIDProxy : ModelPropertyChange<IAssetFunction, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FirmwareIDProxy(IAssetFunction modelElement) : 
                    base(modelElement, "firmwareID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.FirmwareID;
                }
                set
                {
                    this.ModelElement.FirmwareID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the password property
        /// </summary>
        private sealed class PasswordProxy : ModelPropertyChange<IAssetFunction, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PasswordProxy(IAssetFunction modelElement) : 
                    base(modelElement, "password")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Password;
                }
                set
                {
                    this.ModelElement.Password = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the configID property
        /// </summary>
        private sealed class ConfigIDProxy : ModelPropertyChange<IAssetFunction, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConfigIDProxy(IAssetFunction modelElement) : 
                    base(modelElement, "configID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ConfigID;
                }
                set
                {
                    this.ModelElement.ConfigID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Asset property
        /// </summary>
        private sealed class AssetProxy : ModelPropertyChange<IAssetFunction, IAsset>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssetProxy(IAssetFunction modelElement) : 
                    base(modelElement, "Asset")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAsset Value
            {
                get
                {
                    return this.ModelElement.Asset;
                }
                set
                {
                    this.ModelElement.Asset = value;
                }
            }
        }
    }
}

