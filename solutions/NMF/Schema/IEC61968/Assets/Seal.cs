//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61968.Assets
{
    
    
    /// <summary>
    /// The default implementation of the Seal class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Assets")]
    [XmlNamespacePrefixAttribute("cimAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Assets/Seal")]
    [DebuggerDisplayAttribute("Seal {UUID}")]
    public partial class Seal : IdentifiedObject, ISeal, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Condition property
        /// </summary>
        private Nullable<SealConditionKind> _condition;
        
        private static Lazy<ITypedElement> _conditionAttribute = new Lazy<ITypedElement>(RetrieveConditionAttribute);
        
        /// <summary>
        /// The backing field for the SealNumber property
        /// </summary>
        private string _sealNumber;
        
        private static Lazy<ITypedElement> _sealNumberAttribute = new Lazy<ITypedElement>(RetrieveSealNumberAttribute);
        
        /// <summary>
        /// The backing field for the AppliedDateTime property
        /// </summary>
        private DateTime _appliedDateTime;
        
        private static Lazy<ITypedElement> _appliedDateTimeAttribute = new Lazy<ITypedElement>(RetrieveAppliedDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the Kind property
        /// </summary>
        private Nullable<SealKind> _kind;
        
        private static Lazy<ITypedElement> _kindAttribute = new Lazy<ITypedElement>(RetrieveKindAttribute);
        
        private static Lazy<ITypedElement> _assetContainerReference = new Lazy<ITypedElement>(RetrieveAssetContainerReference);
        
        /// <summary>
        /// The backing field for the AssetContainer property
        /// </summary>
        private IAssetContainer _assetContainer;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The condition property
        /// </summary>
        [XmlElementNameAttribute("condition")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<SealConditionKind> Condition
        {
            get
            {
                return this._condition;
            }
            set
            {
                if ((this._condition != value))
                {
                    Nullable<SealConditionKind> old = this._condition;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnConditionChanging(e);
                    this.OnPropertyChanging("Condition", e, _conditionAttribute);
                    this._condition = value;
                    this.OnConditionChanged(e);
                    this.OnPropertyChanged("Condition", e, _conditionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The sealNumber property
        /// </summary>
        [XmlElementNameAttribute("sealNumber")]
        [XmlAttributeAttribute(true)]
        public virtual string SealNumber
        {
            get
            {
                return this._sealNumber;
            }
            set
            {
                if ((this._sealNumber != value))
                {
                    string old = this._sealNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSealNumberChanging(e);
                    this.OnPropertyChanging("SealNumber", e, _sealNumberAttribute);
                    this._sealNumber = value;
                    this.OnSealNumberChanged(e);
                    this.OnPropertyChanged("SealNumber", e, _sealNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The appliedDateTime property
        /// </summary>
        [XmlElementNameAttribute("appliedDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime AppliedDateTime
        {
            get
            {
                return this._appliedDateTime;
            }
            set
            {
                if ((this._appliedDateTime != value))
                {
                    DateTime old = this._appliedDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAppliedDateTimeChanging(e);
                    this.OnPropertyChanging("AppliedDateTime", e, _appliedDateTimeAttribute);
                    this._appliedDateTime = value;
                    this.OnAppliedDateTimeChanged(e);
                    this.OnPropertyChanged("AppliedDateTime", e, _appliedDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The kind property
        /// </summary>
        [XmlElementNameAttribute("kind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<SealKind> Kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                if ((this._kind != value))
                {
                    Nullable<SealKind> old = this._kind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKindChanging(e);
                    this.OnPropertyChanging("Kind", e, _kindAttribute);
                    this._kind = value;
                    this.OnKindChanged(e);
                    this.OnPropertyChanged("Kind", e, _kindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The AssetContainer property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Seals")]
        public virtual IAssetContainer AssetContainer
        {
            get
            {
                return this._assetContainer;
            }
            set
            {
                if ((this._assetContainer != value))
                {
                    IAssetContainer old = this._assetContainer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAssetContainerChanging(e);
                    this.OnPropertyChanging("AssetContainer", e, _assetContainerReference);
                    this._assetContainer = value;
                    if ((old != null))
                    {
                        old.Seals.Remove(this);
                        old.Deleted -= this.OnResetAssetContainer;
                    }
                    if ((value != null))
                    {
                        value.Seals.Add(this);
                        value.Deleted += this.OnResetAssetContainer;
                    }
                    this.OnAssetContainerChanged(e);
                    this.OnPropertyChanged("AssetContainer", e, _assetContainerReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SealReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Assets/Seal")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Condition property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConditionChanging;
        
        /// <summary>
        /// Gets fired when the Condition property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ConditionChanged;
        
        /// <summary>
        /// Gets fired before the SealNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SealNumberChanging;
        
        /// <summary>
        /// Gets fired when the SealNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SealNumberChanged;
        
        /// <summary>
        /// Gets fired before the AppliedDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AppliedDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the AppliedDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AppliedDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        /// <summary>
        /// Gets fired before the AssetContainer property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetContainerChanging;
        
        /// <summary>
        /// Gets fired when the AssetContainer property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetContainerChanged;
        
        private static ITypedElement RetrieveConditionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Seal.ClassInstance)).Resolve("condition")));
        }
        
        /// <summary>
        /// Raises the ConditionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConditionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConditionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ConditionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnConditionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ConditionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveSealNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Seal.ClassInstance)).Resolve("sealNumber")));
        }
        
        /// <summary>
        /// Raises the SealNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSealNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SealNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SealNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSealNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SealNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAppliedDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Seal.ClassInstance)).Resolve("appliedDateTime")));
        }
        
        /// <summary>
        /// Raises the AppliedDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAppliedDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AppliedDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AppliedDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAppliedDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AppliedDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Seal.ClassInstance)).Resolve("kind")));
        }
        
        /// <summary>
        /// Raises the KindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAssetContainerReference()
        {
            return ((ITypedElement)(((ModelElement)(Seal.ClassInstance)).Resolve("AssetContainer")));
        }
        
        /// <summary>
        /// Raises the AssetContainerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetContainerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetContainerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AssetContainerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetContainerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetContainerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AssetContainer property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAssetContainer(object sender, System.EventArgs eventArgs)
        {
            this.AssetContainer = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "CONDITION"))
            {
                return this.Condition;
            }
            if ((attribute == "SEALNUMBER"))
            {
                return this.SealNumber;
            }
            if ((attribute == "APPLIEDDATETIME"))
            {
                return this.AppliedDateTime;
            }
            if ((attribute == "KIND"))
            {
                return this.Kind;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ASSETCONTAINER"))
            {
                this.AssetContainer = ((IAssetContainer)(value));
                return;
            }
            if ((feature == "CONDITION"))
            {
                this.Condition = ((SealConditionKind)(value));
                return;
            }
            if ((feature == "SEALNUMBER"))
            {
                this.SealNumber = ((string)(value));
                return;
            }
            if ((feature == "APPLIEDDATETIME"))
            {
                this.AppliedDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "KIND"))
            {
                this.Kind = ((SealKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "AssetContainer"))
            {
                return new AssetContainerProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "AssetContainer"))
            {
                return new AssetContainerProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Assets/Seal")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Seal class
        /// </summary>
        public class SealReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Seal _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SealReferencedElementsCollection(Seal parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.AssetContainer != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AssetContainerChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AssetContainerChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.AssetContainer == null))
                {
                    IAssetContainer assetContainerCasted = item.As<IAssetContainer>();
                    if ((assetContainerCasted != null))
                    {
                        this._parent.AssetContainer = assetContainerCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AssetContainer = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.AssetContainer))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.AssetContainer != null))
                {
                    array[arrayIndex] = this._parent.AssetContainer;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.AssetContainer == item))
                {
                    this._parent.AssetContainer = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AssetContainer).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the condition property
        /// </summary>
        private sealed class ConditionProxy : ModelPropertyChange<ISeal, Nullable<SealConditionKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ConditionProxy(ISeal modelElement) : 
                    base(modelElement, "condition")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<SealConditionKind> Value
            {
                get
                {
                    return this.ModelElement.Condition;
                }
                set
                {
                    this.ModelElement.Condition = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the sealNumber property
        /// </summary>
        private sealed class SealNumberProxy : ModelPropertyChange<ISeal, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SealNumberProxy(ISeal modelElement) : 
                    base(modelElement, "sealNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.SealNumber;
                }
                set
                {
                    this.ModelElement.SealNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the appliedDateTime property
        /// </summary>
        private sealed class AppliedDateTimeProxy : ModelPropertyChange<ISeal, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AppliedDateTimeProxy(ISeal modelElement) : 
                    base(modelElement, "appliedDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.AppliedDateTime;
                }
                set
                {
                    this.ModelElement.AppliedDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kind property
        /// </summary>
        private sealed class KindProxy : ModelPropertyChange<ISeal, Nullable<SealKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KindProxy(ISeal modelElement) : 
                    base(modelElement, "kind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<SealKind> Value
            {
                get
                {
                    return this.ModelElement.Kind;
                }
                set
                {
                    this.ModelElement.Kind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AssetContainer property
        /// </summary>
        private sealed class AssetContainerProxy : ModelPropertyChange<ISeal, IAssetContainer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssetContainerProxy(ISeal modelElement) : 
                    base(modelElement, "AssetContainer")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssetContainer Value
            {
                get
                {
                    return this.ModelElement.AssetContainer;
                }
                set
                {
                    this.ModelElement.AssetContainer = value;
                }
            }
        }
    }
}

