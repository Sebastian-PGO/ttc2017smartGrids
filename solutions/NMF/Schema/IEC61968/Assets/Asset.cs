using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61968.Assets
{
    
    
    /// <summary>
    /// The default implementation of the Asset class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Assets")]
    [XmlNamespacePrefixAttribute("cimAssets")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Assets/Asset")]
    [DebuggerDisplayAttribute("Asset {UUID}")]
    public partial class Asset : IdentifiedObject, IAsset, IModelElement
    {
        
        /// <summary>
        /// The backing field for the SerialNumber property
        /// </summary>
        private string _serialNumber;
        
        private static Lazy<ITypedElement> _serialNumberAttribute = new Lazy<ITypedElement>(RetrieveSerialNumberAttribute);
        
        /// <summary>
        /// The backing field for the Critical property
        /// </summary>
        private bool _critical;
        
        private static Lazy<ITypedElement> _criticalAttribute = new Lazy<ITypedElement>(RetrieveCriticalAttribute);
        
        /// <summary>
        /// The backing field for the ManufacturedDate property
        /// </summary>
        private string _manufacturedDate;
        
        private static Lazy<ITypedElement> _manufacturedDateAttribute = new Lazy<ITypedElement>(RetrieveManufacturedDateAttribute);
        
        /// <summary>
        /// The backing field for the LotNumber property
        /// </summary>
        private string _lotNumber;
        
        private static Lazy<ITypedElement> _lotNumberAttribute = new Lazy<ITypedElement>(RetrieveLotNumberAttribute);
        
        /// <summary>
        /// The backing field for the InitialLossOfLife property
        /// </summary>
        private float _initialLossOfLife;
        
        private static Lazy<ITypedElement> _initialLossOfLifeAttribute = new Lazy<ITypedElement>(RetrieveInitialLossOfLifeAttribute);
        
        /// <summary>
        /// The backing field for the InitialCondition property
        /// </summary>
        private string _initialCondition;
        
        private static Lazy<ITypedElement> _initialConditionAttribute = new Lazy<ITypedElement>(RetrieveInitialConditionAttribute);
        
        /// <summary>
        /// The backing field for the UtcNumber property
        /// </summary>
        private string _utcNumber;
        
        private static Lazy<ITypedElement> _utcNumberAttribute = new Lazy<ITypedElement>(RetrieveUtcNumberAttribute);
        
        /// <summary>
        /// The backing field for the InstallationDate property
        /// </summary>
        private string _installationDate;
        
        private static Lazy<ITypedElement> _installationDateAttribute = new Lazy<ITypedElement>(RetrieveInstallationDateAttribute);
        
        /// <summary>
        /// The backing field for the CorporateCode property
        /// </summary>
        private string _corporateCode;
        
        private static Lazy<ITypedElement> _corporateCodeAttribute = new Lazy<ITypedElement>(RetrieveCorporateCodeAttribute);
        
        /// <summary>
        /// The backing field for the PurchasePrice property
        /// </summary>
        private float _purchasePrice;
        
        private static Lazy<ITypedElement> _purchasePriceAttribute = new Lazy<ITypedElement>(RetrievePurchasePriceAttribute);
        
        /// <summary>
        /// The backing field for the Application property
        /// </summary>
        private string _application;
        
        private static Lazy<ITypedElement> _applicationAttribute = new Lazy<ITypedElement>(RetrieveApplicationAttribute);
        
        /// <summary>
        /// The backing field for the Category property
        /// </summary>
        private string _category;
        
        private static Lazy<ITypedElement> _categoryAttribute = new Lazy<ITypedElement>(RetrieveCategoryAttribute);
        
        private static Lazy<ITypedElement> _assetPropertyCurvesReference = new Lazy<ITypedElement>(RetrieveAssetPropertyCurvesReference);
        
        /// <summary>
        /// The backing field for the AssetPropertyCurves property
        /// </summary>
        private AssetAssetPropertyCurvesCollection _assetPropertyCurves;
        
        private static Lazy<ITypedElement> _measurementsReference = new Lazy<ITypedElement>(RetrieveMeasurementsReference);
        
        /// <summary>
        /// The backing field for the Measurements property
        /// </summary>
        private AssetMeasurementsCollection _measurements;
        
        private static Lazy<ITypedElement> _financialInfoReference = new Lazy<ITypedElement>(RetrieveFinancialInfoReference);
        
        /// <summary>
        /// The backing field for the FinancialInfo property
        /// </summary>
        private IFinancialInfo _financialInfo;
        
        private static Lazy<ITypedElement> _fromAssetRolesReference = new Lazy<ITypedElement>(RetrieveFromAssetRolesReference);
        
        /// <summary>
        /// The backing field for the FromAssetRoles property
        /// </summary>
        private AssetFromAssetRolesCollection _fromAssetRoles;
        
        private static Lazy<ITypedElement> _activityRecordsReference = new Lazy<ITypedElement>(RetrieveActivityRecordsReference);
        
        /// <summary>
        /// The backing field for the ActivityRecords property
        /// </summary>
        private AssetActivityRecordsCollection _activityRecords;
        
        private static Lazy<ITypedElement> _documentRolesReference = new Lazy<ITypedElement>(RetrieveDocumentRolesReference);
        
        /// <summary>
        /// The backing field for the DocumentRoles property
        /// </summary>
        private AssetDocumentRolesCollection _documentRoles;
        
        private static Lazy<ITypedElement> _assetContainerReference = new Lazy<ITypedElement>(RetrieveAssetContainerReference);
        
        /// <summary>
        /// The backing field for the AssetContainer property
        /// </summary>
        private IAssetContainer _assetContainer;
        
        private static Lazy<ITypedElement> _erpInventoryReference = new Lazy<ITypedElement>(RetrieveErpInventoryReference);
        
        /// <summary>
        /// The backing field for the ErpInventory property
        /// </summary>
        private IErpInventory _erpInventory;
        
        private static Lazy<ITypedElement> _reliabilityInfosReference = new Lazy<ITypedElement>(RetrieveReliabilityInfosReference);
        
        /// <summary>
        /// The backing field for the ReliabilityInfos property
        /// </summary>
        private AssetReliabilityInfosCollection _reliabilityInfos;
        
        private static Lazy<ITypedElement> _workTaskReference = new Lazy<ITypedElement>(RetrieveWorkTaskReference);
        
        /// <summary>
        /// The backing field for the WorkTask property
        /// </summary>
        private IWorkTask _workTask;
        
        private static Lazy<ITypedElement> _electronicAddressReference = new Lazy<ITypedElement>(RetrieveElectronicAddressReference);
        
        /// <summary>
        /// The backing field for the ElectronicAddress property
        /// </summary>
        private IElectronicAddress _electronicAddress;
        
        private static Lazy<ITypedElement> _scheduledEventsReference = new Lazy<ITypedElement>(RetrieveScheduledEventsReference);
        
        /// <summary>
        /// The backing field for the ScheduledEvents property
        /// </summary>
        private AssetScheduledEventsCollection _scheduledEvents;
        
        private static Lazy<ITypedElement> _changeItemsReference = new Lazy<ITypedElement>(RetrieveChangeItemsReference);
        
        /// <summary>
        /// The backing field for the ChangeItems property
        /// </summary>
        private AssetChangeItemsCollection _changeItems;
        
        private static Lazy<ITypedElement> _assetFunctionsReference = new Lazy<ITypedElement>(RetrieveAssetFunctionsReference);
        
        /// <summary>
        /// The backing field for the AssetFunctions property
        /// </summary>
        private AssetAssetFunctionsCollection _assetFunctions;
        
        private static Lazy<ITypedElement> _statusReference = new Lazy<ITypedElement>(RetrieveStatusReference);
        
        /// <summary>
        /// The backing field for the Status property
        /// </summary>
        private IStatus _status;
        
        private static Lazy<ITypedElement> _erpOrganisationRolesReference = new Lazy<ITypedElement>(RetrieveErpOrganisationRolesReference);
        
        /// <summary>
        /// The backing field for the ErpOrganisationRoles property
        /// </summary>
        private AssetErpOrganisationRolesCollection _erpOrganisationRoles;
        
        private static Lazy<ITypedElement> _ratingsReference = new Lazy<ITypedElement>(RetrieveRatingsReference);
        
        /// <summary>
        /// The backing field for the Ratings property
        /// </summary>
        private AssetRatingsCollection _ratings;
        
        private static Lazy<ITypedElement> _mediumsReference = new Lazy<ITypedElement>(RetrieveMediumsReference);
        
        /// <summary>
        /// The backing field for the Mediums property
        /// </summary>
        private AssetMediumsCollection _mediums;
        
        private static Lazy<ITypedElement> _propertiesReference = new Lazy<ITypedElement>(RetrievePropertiesReference);
        
        /// <summary>
        /// The backing field for the Properties property
        /// </summary>
        private AssetPropertiesCollection _properties;
        
        private static Lazy<ITypedElement> _assetInfoReference = new Lazy<ITypedElement>(RetrieveAssetInfoReference);
        
        /// <summary>
        /// The backing field for the AssetInfo property
        /// </summary>
        private IAssetInfo _assetInfo;
        
        private static Lazy<ITypedElement> _toAssetRolesReference = new Lazy<ITypedElement>(RetrieveToAssetRolesReference);
        
        /// <summary>
        /// The backing field for the ToAssetRoles property
        /// </summary>
        private AssetToAssetRolesCollection _toAssetRoles;
        
        private static Lazy<ITypedElement> _locationReference = new Lazy<ITypedElement>(RetrieveLocationReference);
        
        /// <summary>
        /// The backing field for the Location property
        /// </summary>
        private ILocation _location;
        
        private static Lazy<ITypedElement> _powerSystemResourcesReference = new Lazy<ITypedElement>(RetrievePowerSystemResourcesReference);
        
        /// <summary>
        /// The backing field for the PowerSystemResources property
        /// </summary>
        private AssetPowerSystemResourcesCollection _powerSystemResources;
        
        private static Lazy<ITypedElement> _erpItemMasterReference = new Lazy<ITypedElement>(RetrieveErpItemMasterReference);
        
        /// <summary>
        /// The backing field for the ErpItemMaster property
        /// </summary>
        private IErpItemMaster _erpItemMaster;
        
        private static Lazy<ITypedElement> _acceptanceTestReference = new Lazy<ITypedElement>(RetrieveAcceptanceTestReference);
        
        /// <summary>
        /// The backing field for the AcceptanceTest property
        /// </summary>
        private IAcceptanceTest _acceptanceTest;
        
        private static Lazy<ITypedElement> _erpRecDeliveryItemsReference = new Lazy<ITypedElement>(RetrieveErpRecDeliveryItemsReference);
        
        /// <summary>
        /// The backing field for the ErpRecDeliveryItems property
        /// </summary>
        private AssetErpRecDeliveryItemsCollection _erpRecDeliveryItems;
        
        private static IClass _classInstance;
        
        public Asset()
        {
            this._assetPropertyCurves = new AssetAssetPropertyCurvesCollection(this);
            this._assetPropertyCurves.CollectionChanging += this.AssetPropertyCurvesCollectionChanging;
            this._assetPropertyCurves.CollectionChanged += this.AssetPropertyCurvesCollectionChanged;
            this._measurements = new AssetMeasurementsCollection(this);
            this._measurements.CollectionChanging += this.MeasurementsCollectionChanging;
            this._measurements.CollectionChanged += this.MeasurementsCollectionChanged;
            this._fromAssetRoles = new AssetFromAssetRolesCollection(this);
            this._fromAssetRoles.CollectionChanging += this.FromAssetRolesCollectionChanging;
            this._fromAssetRoles.CollectionChanged += this.FromAssetRolesCollectionChanged;
            this._activityRecords = new AssetActivityRecordsCollection(this);
            this._activityRecords.CollectionChanging += this.ActivityRecordsCollectionChanging;
            this._activityRecords.CollectionChanged += this.ActivityRecordsCollectionChanged;
            this._documentRoles = new AssetDocumentRolesCollection(this);
            this._documentRoles.CollectionChanging += this.DocumentRolesCollectionChanging;
            this._documentRoles.CollectionChanged += this.DocumentRolesCollectionChanged;
            this._reliabilityInfos = new AssetReliabilityInfosCollection(this);
            this._reliabilityInfos.CollectionChanging += this.ReliabilityInfosCollectionChanging;
            this._reliabilityInfos.CollectionChanged += this.ReliabilityInfosCollectionChanged;
            this._scheduledEvents = new AssetScheduledEventsCollection(this);
            this._scheduledEvents.CollectionChanging += this.ScheduledEventsCollectionChanging;
            this._scheduledEvents.CollectionChanged += this.ScheduledEventsCollectionChanged;
            this._changeItems = new AssetChangeItemsCollection(this);
            this._changeItems.CollectionChanging += this.ChangeItemsCollectionChanging;
            this._changeItems.CollectionChanged += this.ChangeItemsCollectionChanged;
            this._assetFunctions = new AssetAssetFunctionsCollection(this);
            this._assetFunctions.CollectionChanging += this.AssetFunctionsCollectionChanging;
            this._assetFunctions.CollectionChanged += this.AssetFunctionsCollectionChanged;
            this._erpOrganisationRoles = new AssetErpOrganisationRolesCollection(this);
            this._erpOrganisationRoles.CollectionChanging += this.ErpOrganisationRolesCollectionChanging;
            this._erpOrganisationRoles.CollectionChanged += this.ErpOrganisationRolesCollectionChanged;
            this._ratings = new AssetRatingsCollection(this);
            this._ratings.CollectionChanging += this.RatingsCollectionChanging;
            this._ratings.CollectionChanged += this.RatingsCollectionChanged;
            this._mediums = new AssetMediumsCollection(this);
            this._mediums.CollectionChanging += this.MediumsCollectionChanging;
            this._mediums.CollectionChanged += this.MediumsCollectionChanged;
            this._properties = new AssetPropertiesCollection(this);
            this._properties.CollectionChanging += this.PropertiesCollectionChanging;
            this._properties.CollectionChanged += this.PropertiesCollectionChanged;
            this._toAssetRoles = new AssetToAssetRolesCollection(this);
            this._toAssetRoles.CollectionChanging += this.ToAssetRolesCollectionChanging;
            this._toAssetRoles.CollectionChanged += this.ToAssetRolesCollectionChanged;
            this._powerSystemResources = new AssetPowerSystemResourcesCollection(this);
            this._powerSystemResources.CollectionChanging += this.PowerSystemResourcesCollectionChanging;
            this._powerSystemResources.CollectionChanged += this.PowerSystemResourcesCollectionChanged;
            this._erpRecDeliveryItems = new AssetErpRecDeliveryItemsCollection(this);
            this._erpRecDeliveryItems.CollectionChanging += this.ErpRecDeliveryItemsCollectionChanging;
            this._erpRecDeliveryItems.CollectionChanged += this.ErpRecDeliveryItemsCollectionChanged;
        }
        
        /// <summary>
        /// The serialNumber property
        /// </summary>
        [XmlElementNameAttribute("serialNumber")]
        [XmlAttributeAttribute(true)]
        public virtual string SerialNumber
        {
            get
            {
                return this._serialNumber;
            }
            set
            {
                if ((this._serialNumber != value))
                {
                    string old = this._serialNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnSerialNumberChanging(e);
                    this.OnPropertyChanging("SerialNumber", e, _serialNumberAttribute);
                    this._serialNumber = value;
                    this.OnSerialNumberChanged(e);
                    this.OnPropertyChanged("SerialNumber", e, _serialNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The critical property
        /// </summary>
        [XmlElementNameAttribute("critical")]
        [XmlAttributeAttribute(true)]
        public virtual bool Critical
        {
            get
            {
                return this._critical;
            }
            set
            {
                if ((this._critical != value))
                {
                    bool old = this._critical;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCriticalChanging(e);
                    this.OnPropertyChanging("Critical", e, _criticalAttribute);
                    this._critical = value;
                    this.OnCriticalChanged(e);
                    this.OnPropertyChanged("Critical", e, _criticalAttribute);
                }
            }
        }
        
        /// <summary>
        /// The manufacturedDate property
        /// </summary>
        [XmlElementNameAttribute("manufacturedDate")]
        [XmlAttributeAttribute(true)]
        public virtual string ManufacturedDate
        {
            get
            {
                return this._manufacturedDate;
            }
            set
            {
                if ((this._manufacturedDate != value))
                {
                    string old = this._manufacturedDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnManufacturedDateChanging(e);
                    this.OnPropertyChanging("ManufacturedDate", e, _manufacturedDateAttribute);
                    this._manufacturedDate = value;
                    this.OnManufacturedDateChanged(e);
                    this.OnPropertyChanged("ManufacturedDate", e, _manufacturedDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The lotNumber property
        /// </summary>
        [XmlElementNameAttribute("lotNumber")]
        [XmlAttributeAttribute(true)]
        public virtual string LotNumber
        {
            get
            {
                return this._lotNumber;
            }
            set
            {
                if ((this._lotNumber != value))
                {
                    string old = this._lotNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLotNumberChanging(e);
                    this.OnPropertyChanging("LotNumber", e, _lotNumberAttribute);
                    this._lotNumber = value;
                    this.OnLotNumberChanged(e);
                    this.OnPropertyChanged("LotNumber", e, _lotNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The initialLossOfLife property
        /// </summary>
        [XmlElementNameAttribute("initialLossOfLife")]
        [XmlAttributeAttribute(true)]
        public virtual float InitialLossOfLife
        {
            get
            {
                return this._initialLossOfLife;
            }
            set
            {
                if ((this._initialLossOfLife != value))
                {
                    float old = this._initialLossOfLife;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInitialLossOfLifeChanging(e);
                    this.OnPropertyChanging("InitialLossOfLife", e, _initialLossOfLifeAttribute);
                    this._initialLossOfLife = value;
                    this.OnInitialLossOfLifeChanged(e);
                    this.OnPropertyChanged("InitialLossOfLife", e, _initialLossOfLifeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The initialCondition property
        /// </summary>
        [XmlElementNameAttribute("initialCondition")]
        [XmlAttributeAttribute(true)]
        public virtual string InitialCondition
        {
            get
            {
                return this._initialCondition;
            }
            set
            {
                if ((this._initialCondition != value))
                {
                    string old = this._initialCondition;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInitialConditionChanging(e);
                    this.OnPropertyChanging("InitialCondition", e, _initialConditionAttribute);
                    this._initialCondition = value;
                    this.OnInitialConditionChanged(e);
                    this.OnPropertyChanged("InitialCondition", e, _initialConditionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The utcNumber property
        /// </summary>
        [XmlElementNameAttribute("utcNumber")]
        [XmlAttributeAttribute(true)]
        public virtual string UtcNumber
        {
            get
            {
                return this._utcNumber;
            }
            set
            {
                if ((this._utcNumber != value))
                {
                    string old = this._utcNumber;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUtcNumberChanging(e);
                    this.OnPropertyChanging("UtcNumber", e, _utcNumberAttribute);
                    this._utcNumber = value;
                    this.OnUtcNumberChanged(e);
                    this.OnPropertyChanged("UtcNumber", e, _utcNumberAttribute);
                }
            }
        }
        
        /// <summary>
        /// The installationDate property
        /// </summary>
        [XmlElementNameAttribute("installationDate")]
        [XmlAttributeAttribute(true)]
        public virtual string InstallationDate
        {
            get
            {
                return this._installationDate;
            }
            set
            {
                if ((this._installationDate != value))
                {
                    string old = this._installationDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInstallationDateChanging(e);
                    this.OnPropertyChanging("InstallationDate", e, _installationDateAttribute);
                    this._installationDate = value;
                    this.OnInstallationDateChanged(e);
                    this.OnPropertyChanged("InstallationDate", e, _installationDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// The corporateCode property
        /// </summary>
        [XmlElementNameAttribute("corporateCode")]
        [XmlAttributeAttribute(true)]
        public virtual string CorporateCode
        {
            get
            {
                return this._corporateCode;
            }
            set
            {
                if ((this._corporateCode != value))
                {
                    string old = this._corporateCode;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCorporateCodeChanging(e);
                    this.OnPropertyChanging("CorporateCode", e, _corporateCodeAttribute);
                    this._corporateCode = value;
                    this.OnCorporateCodeChanged(e);
                    this.OnPropertyChanged("CorporateCode", e, _corporateCodeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The purchasePrice property
        /// </summary>
        [XmlElementNameAttribute("purchasePrice")]
        [XmlAttributeAttribute(true)]
        public virtual float PurchasePrice
        {
            get
            {
                return this._purchasePrice;
            }
            set
            {
                if ((this._purchasePrice != value))
                {
                    float old = this._purchasePrice;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPurchasePriceChanging(e);
                    this.OnPropertyChanging("PurchasePrice", e, _purchasePriceAttribute);
                    this._purchasePrice = value;
                    this.OnPurchasePriceChanged(e);
                    this.OnPropertyChanged("PurchasePrice", e, _purchasePriceAttribute);
                }
            }
        }
        
        /// <summary>
        /// The application property
        /// </summary>
        [XmlElementNameAttribute("application")]
        [XmlAttributeAttribute(true)]
        public virtual string Application
        {
            get
            {
                return this._application;
            }
            set
            {
                if ((this._application != value))
                {
                    string old = this._application;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnApplicationChanging(e);
                    this.OnPropertyChanging("Application", e, _applicationAttribute);
                    this._application = value;
                    this.OnApplicationChanged(e);
                    this.OnPropertyChanged("Application", e, _applicationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The category property
        /// </summary>
        [XmlElementNameAttribute("category")]
        [XmlAttributeAttribute(true)]
        public virtual string Category
        {
            get
            {
                return this._category;
            }
            set
            {
                if ((this._category != value))
                {
                    string old = this._category;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCategoryChanging(e);
                    this.OnPropertyChanging("Category", e, _categoryAttribute);
                    this._category = value;
                    this.OnCategoryChanged(e);
                    this.OnPropertyChanged("Category", e, _categoryAttribute);
                }
            }
        }
        
        /// <summary>
        /// The AssetPropertyCurves property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Assets")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAssetPropertyCurve> AssetPropertyCurves
        {
            get
            {
                return this._assetPropertyCurves;
            }
        }
        
        /// <summary>
        /// The Measurements property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Asset")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMeasurement> Measurements
        {
            get
            {
                return this._measurements;
            }
        }
        
        /// <summary>
        /// The FinancialInfo property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Asset")]
        public virtual IFinancialInfo FinancialInfo
        {
            get
            {
                return this._financialInfo;
            }
            set
            {
                if ((this._financialInfo != value))
                {
                    IFinancialInfo old = this._financialInfo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFinancialInfoChanging(e);
                    this.OnPropertyChanging("FinancialInfo", e, _financialInfoReference);
                    this._financialInfo = value;
                    if ((old != null))
                    {
                        old.Asset = null;
                        old.Deleted -= this.OnResetFinancialInfo;
                    }
                    if ((value != null))
                    {
                        value.Asset = this;
                        value.Deleted += this.OnResetFinancialInfo;
                    }
                    this.OnFinancialInfoChanged(e);
                    this.OnPropertyChanged("FinancialInfo", e, _financialInfoReference);
                }
            }
        }
        
        /// <summary>
        /// The FromAssetRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("ToAsset")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAssetAssetRole> FromAssetRoles
        {
            get
            {
                return this._fromAssetRoles;
            }
        }
        
        /// <summary>
        /// The ActivityRecords property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Assets")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IActivityRecord> ActivityRecords
        {
            get
            {
                return this._activityRecords;
            }
        }
        
        /// <summary>
        /// The DocumentRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Asset")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDocAssetRole> DocumentRoles
        {
            get
            {
                return this._documentRoles;
            }
        }
        
        /// <summary>
        /// The AssetContainer property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Assets")]
        public virtual IAssetContainer AssetContainer
        {
            get
            {
                return this._assetContainer;
            }
            set
            {
                if ((this._assetContainer != value))
                {
                    IAssetContainer old = this._assetContainer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAssetContainerChanging(e);
                    this.OnPropertyChanging("AssetContainer", e, _assetContainerReference);
                    this._assetContainer = value;
                    if ((old != null))
                    {
                        old.Assets.Remove(this);
                        old.Deleted -= this.OnResetAssetContainer;
                    }
                    if ((value != null))
                    {
                        value.Assets.Add(this);
                        value.Deleted += this.OnResetAssetContainer;
                    }
                    this.OnAssetContainerChanged(e);
                    this.OnPropertyChanged("AssetContainer", e, _assetContainerReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpInventory property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Asset")]
        public virtual IErpInventory ErpInventory
        {
            get
            {
                return this._erpInventory;
            }
            set
            {
                if ((this._erpInventory != value))
                {
                    IErpInventory old = this._erpInventory;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpInventoryChanging(e);
                    this.OnPropertyChanging("ErpInventory", e, _erpInventoryReference);
                    this._erpInventory = value;
                    if ((old != null))
                    {
                        old.Asset = null;
                        old.Deleted -= this.OnResetErpInventory;
                    }
                    if ((value != null))
                    {
                        value.Asset = this;
                        value.Deleted += this.OnResetErpInventory;
                    }
                    this.OnErpInventoryChanged(e);
                    this.OnPropertyChanged("ErpInventory", e, _erpInventoryReference);
                }
            }
        }
        
        /// <summary>
        /// The ReliabilityInfos property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Assets")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IReliabilityInfo> ReliabilityInfos
        {
            get
            {
                return this._reliabilityInfos;
            }
        }
        
        /// <summary>
        /// The WorkTask property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Assets")]
        public virtual IWorkTask WorkTask
        {
            get
            {
                return this._workTask;
            }
            set
            {
                if ((this._workTask != value))
                {
                    IWorkTask old = this._workTask;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWorkTaskChanging(e);
                    this.OnPropertyChanging("WorkTask", e, _workTaskReference);
                    this._workTask = value;
                    if ((old != null))
                    {
                        old.Assets.Remove(this);
                        old.Deleted -= this.OnResetWorkTask;
                    }
                    if ((value != null))
                    {
                        value.Assets.Add(this);
                        value.Deleted += this.OnResetWorkTask;
                    }
                    this.OnWorkTaskChanged(e);
                    this.OnPropertyChanged("WorkTask", e, _workTaskReference);
                }
            }
        }
        
        /// <summary>
        /// The electronicAddress property
        /// </summary>
        [XmlElementNameAttribute("electronicAddress")]
        [XmlAttributeAttribute(true)]
        public virtual IElectronicAddress ElectronicAddress
        {
            get
            {
                return this._electronicAddress;
            }
            set
            {
                if ((this._electronicAddress != value))
                {
                    IElectronicAddress old = this._electronicAddress;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnElectronicAddressChanging(e);
                    this.OnPropertyChanging("ElectronicAddress", e, _electronicAddressReference);
                    this._electronicAddress = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetElectronicAddress;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetElectronicAddress;
                    }
                    this.OnElectronicAddressChanged(e);
                    this.OnPropertyChanged("ElectronicAddress", e, _electronicAddressReference);
                }
            }
        }
        
        /// <summary>
        /// The ScheduledEvents property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Assets")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IScheduledEvent> ScheduledEvents
        {
            get
            {
                return this._scheduledEvents;
            }
        }
        
        /// <summary>
        /// The ChangeItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Asset")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IChangeItem> ChangeItems
        {
            get
            {
                return this._changeItems;
            }
        }
        
        /// <summary>
        /// The AssetFunctions property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Asset")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAssetFunction> AssetFunctions
        {
            get
            {
                return this._assetFunctions;
            }
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        [XmlElementNameAttribute("status")]
        [XmlAttributeAttribute(true)]
        public virtual IStatus Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    IStatus old = this._status;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnStatusChanging(e);
                    this.OnPropertyChanging("Status", e, _statusReference);
                    this._status = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetStatus;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetStatus;
                    }
                    this.OnStatusChanged(e);
                    this.OnPropertyChanged("Status", e, _statusReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpOrganisationRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Asset")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IOrgAssetRole> ErpOrganisationRoles
        {
            get
            {
                return this._erpOrganisationRoles;
            }
        }
        
        /// <summary>
        /// The Ratings property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("RatingAssets")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IUserAttribute> Ratings
        {
            get
            {
                return this._ratings;
            }
        }
        
        /// <summary>
        /// The Mediums property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Assets")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IMedium> Mediums
        {
            get
            {
                return this._mediums;
            }
        }
        
        /// <summary>
        /// The Properties property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("PropertyAssets")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IUserAttribute> Properties
        {
            get
            {
                return this._properties;
            }
        }
        
        /// <summary>
        /// The AssetInfo property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Asset")]
        public virtual IAssetInfo AssetInfo
        {
            get
            {
                return this._assetInfo;
            }
            set
            {
                if ((this._assetInfo != value))
                {
                    IAssetInfo old = this._assetInfo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAssetInfoChanging(e);
                    this.OnPropertyChanging("AssetInfo", e, _assetInfoReference);
                    this._assetInfo = value;
                    if ((old != null))
                    {
                        old.Asset = null;
                        old.Deleted -= this.OnResetAssetInfo;
                    }
                    if ((value != null))
                    {
                        value.Asset = this;
                        value.Deleted += this.OnResetAssetInfo;
                    }
                    this.OnAssetInfoChanged(e);
                    this.OnPropertyChanged("AssetInfo", e, _assetInfoReference);
                }
            }
        }
        
        /// <summary>
        /// The ToAssetRoles property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("FromAsset")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IAssetAssetRole> ToAssetRoles
        {
            get
            {
                return this._toAssetRoles;
            }
        }
        
        /// <summary>
        /// The Location property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Assets")]
        public virtual ILocation Location
        {
            get
            {
                return this._location;
            }
            set
            {
                if ((this._location != value))
                {
                    ILocation old = this._location;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocationChanging(e);
                    this.OnPropertyChanging("Location", e, _locationReference);
                    this._location = value;
                    if ((old != null))
                    {
                        old.Assets.Remove(this);
                        old.Deleted -= this.OnResetLocation;
                    }
                    if ((value != null))
                    {
                        value.Assets.Add(this);
                        value.Deleted += this.OnResetLocation;
                    }
                    this.OnLocationChanged(e);
                    this.OnPropertyChanged("Location", e, _locationReference);
                }
            }
        }
        
        /// <summary>
        /// The PowerSystemResources property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Assets")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IPowerSystemResource> PowerSystemResources
        {
            get
            {
                return this._powerSystemResources;
            }
        }
        
        /// <summary>
        /// The ErpItemMaster property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Asset")]
        public virtual IErpItemMaster ErpItemMaster
        {
            get
            {
                return this._erpItemMaster;
            }
            set
            {
                if ((this._erpItemMaster != value))
                {
                    IErpItemMaster old = this._erpItemMaster;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpItemMasterChanging(e);
                    this.OnPropertyChanging("ErpItemMaster", e, _erpItemMasterReference);
                    this._erpItemMaster = value;
                    if ((old != null))
                    {
                        old.Asset = null;
                        old.Deleted -= this.OnResetErpItemMaster;
                    }
                    if ((value != null))
                    {
                        value.Asset = this;
                        value.Deleted += this.OnResetErpItemMaster;
                    }
                    this.OnErpItemMasterChanged(e);
                    this.OnPropertyChanged("ErpItemMaster", e, _erpItemMasterReference);
                }
            }
        }
        
        /// <summary>
        /// The acceptanceTest property
        /// </summary>
        [XmlElementNameAttribute("acceptanceTest")]
        [XmlAttributeAttribute(true)]
        public virtual IAcceptanceTest AcceptanceTest
        {
            get
            {
                return this._acceptanceTest;
            }
            set
            {
                if ((this._acceptanceTest != value))
                {
                    IAcceptanceTest old = this._acceptanceTest;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAcceptanceTestChanging(e);
                    this.OnPropertyChanging("AcceptanceTest", e, _acceptanceTestReference);
                    this._acceptanceTest = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetAcceptanceTest;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetAcceptanceTest;
                    }
                    this.OnAcceptanceTestChanged(e);
                    this.OnPropertyChanged("AcceptanceTest", e, _acceptanceTestReference);
                }
            }
        }
        
        /// <summary>
        /// The ErpRecDeliveryItems property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Assets")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IErpRecDelvLineItem> ErpRecDeliveryItems
        {
            get
            {
                return this._erpRecDeliveryItems;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new AssetReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Assets/Asset")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the SerialNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SerialNumberChanging;
        
        /// <summary>
        /// Gets fired when the SerialNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> SerialNumberChanged;
        
        /// <summary>
        /// Gets fired before the Critical property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CriticalChanging;
        
        /// <summary>
        /// Gets fired when the Critical property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CriticalChanged;
        
        /// <summary>
        /// Gets fired before the ManufacturedDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ManufacturedDateChanging;
        
        /// <summary>
        /// Gets fired when the ManufacturedDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ManufacturedDateChanged;
        
        /// <summary>
        /// Gets fired before the LotNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LotNumberChanging;
        
        /// <summary>
        /// Gets fired when the LotNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LotNumberChanged;
        
        /// <summary>
        /// Gets fired before the InitialLossOfLife property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InitialLossOfLifeChanging;
        
        /// <summary>
        /// Gets fired when the InitialLossOfLife property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InitialLossOfLifeChanged;
        
        /// <summary>
        /// Gets fired before the InitialCondition property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InitialConditionChanging;
        
        /// <summary>
        /// Gets fired when the InitialCondition property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InitialConditionChanged;
        
        /// <summary>
        /// Gets fired before the UtcNumber property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UtcNumberChanging;
        
        /// <summary>
        /// Gets fired when the UtcNumber property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UtcNumberChanged;
        
        /// <summary>
        /// Gets fired before the InstallationDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InstallationDateChanging;
        
        /// <summary>
        /// Gets fired when the InstallationDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InstallationDateChanged;
        
        /// <summary>
        /// Gets fired before the CorporateCode property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CorporateCodeChanging;
        
        /// <summary>
        /// Gets fired when the CorporateCode property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CorporateCodeChanged;
        
        /// <summary>
        /// Gets fired before the PurchasePrice property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PurchasePriceChanging;
        
        /// <summary>
        /// Gets fired when the PurchasePrice property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PurchasePriceChanged;
        
        /// <summary>
        /// Gets fired before the Application property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApplicationChanging;
        
        /// <summary>
        /// Gets fired when the Application property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ApplicationChanged;
        
        /// <summary>
        /// Gets fired before the Category property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CategoryChanging;
        
        /// <summary>
        /// Gets fired when the Category property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CategoryChanged;
        
        /// <summary>
        /// Gets fired before the FinancialInfo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FinancialInfoChanging;
        
        /// <summary>
        /// Gets fired when the FinancialInfo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> FinancialInfoChanged;
        
        /// <summary>
        /// Gets fired before the AssetContainer property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetContainerChanging;
        
        /// <summary>
        /// Gets fired when the AssetContainer property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetContainerChanged;
        
        /// <summary>
        /// Gets fired before the ErpInventory property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpInventoryChanging;
        
        /// <summary>
        /// Gets fired when the ErpInventory property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpInventoryChanged;
        
        /// <summary>
        /// Gets fired before the WorkTask property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkTaskChanging;
        
        /// <summary>
        /// Gets fired when the WorkTask property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkTaskChanged;
        
        /// <summary>
        /// Gets fired before the ElectronicAddress property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ElectronicAddressChanging;
        
        /// <summary>
        /// Gets fired when the ElectronicAddress property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ElectronicAddressChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the AssetInfo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetInfoChanging;
        
        /// <summary>
        /// Gets fired when the AssetInfo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AssetInfoChanged;
        
        /// <summary>
        /// Gets fired before the Location property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocationChanging;
        
        /// <summary>
        /// Gets fired when the Location property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocationChanged;
        
        /// <summary>
        /// Gets fired before the ErpItemMaster property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpItemMasterChanging;
        
        /// <summary>
        /// Gets fired when the ErpItemMaster property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpItemMasterChanged;
        
        /// <summary>
        /// Gets fired before the AcceptanceTest property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AcceptanceTestChanging;
        
        /// <summary>
        /// Gets fired when the AcceptanceTest property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AcceptanceTestChanged;
        
        private static ITypedElement RetrieveSerialNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("serialNumber")));
        }
        
        /// <summary>
        /// Raises the SerialNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSerialNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SerialNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the SerialNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnSerialNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.SerialNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCriticalAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("critical")));
        }
        
        /// <summary>
        /// Raises the CriticalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCriticalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CriticalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CriticalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCriticalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CriticalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveManufacturedDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("manufacturedDate")));
        }
        
        /// <summary>
        /// Raises the ManufacturedDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnManufacturedDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ManufacturedDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ManufacturedDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnManufacturedDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ManufacturedDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLotNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("lotNumber")));
        }
        
        /// <summary>
        /// Raises the LotNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLotNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LotNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LotNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLotNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LotNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveInitialLossOfLifeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("initialLossOfLife")));
        }
        
        /// <summary>
        /// Raises the InitialLossOfLifeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInitialLossOfLifeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InitialLossOfLifeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InitialLossOfLifeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInitialLossOfLifeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InitialLossOfLifeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveInitialConditionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("initialCondition")));
        }
        
        /// <summary>
        /// Raises the InitialConditionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInitialConditionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InitialConditionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InitialConditionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInitialConditionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InitialConditionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUtcNumberAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("utcNumber")));
        }
        
        /// <summary>
        /// Raises the UtcNumberChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUtcNumberChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UtcNumberChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UtcNumberChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUtcNumberChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UtcNumberChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveInstallationDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("installationDate")));
        }
        
        /// <summary>
        /// Raises the InstallationDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstallationDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InstallationDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InstallationDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInstallationDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InstallationDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCorporateCodeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("corporateCode")));
        }
        
        /// <summary>
        /// Raises the CorporateCodeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCorporateCodeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CorporateCodeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CorporateCodeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCorporateCodeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CorporateCodeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePurchasePriceAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("purchasePrice")));
        }
        
        /// <summary>
        /// Raises the PurchasePriceChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPurchasePriceChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PurchasePriceChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PurchasePriceChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPurchasePriceChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PurchasePriceChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveApplicationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("application")));
        }
        
        /// <summary>
        /// Raises the ApplicationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApplicationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApplicationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ApplicationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnApplicationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ApplicationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCategoryAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("category")));
        }
        
        /// <summary>
        /// Raises the CategoryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCategoryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CategoryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CategoryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCategoryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CategoryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAssetPropertyCurvesReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("AssetPropertyCurves")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AssetPropertyCurves property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetPropertyCurvesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("AssetPropertyCurves", e, _assetPropertyCurvesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AssetPropertyCurves property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetPropertyCurvesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AssetPropertyCurves", e, _assetPropertyCurvesReference);
        }
        
        private static ITypedElement RetrieveMeasurementsReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("Measurements")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Measurements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeasurementsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Measurements", e, _measurementsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Measurements property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MeasurementsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Measurements", e, _measurementsReference);
        }
        
        private static ITypedElement RetrieveFinancialInfoReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("FinancialInfo")));
        }
        
        /// <summary>
        /// Raises the FinancialInfoChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFinancialInfoChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FinancialInfoChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the FinancialInfoChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFinancialInfoChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.FinancialInfoChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the FinancialInfo property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetFinancialInfo(object sender, System.EventArgs eventArgs)
        {
            this.FinancialInfo = null;
        }
        
        private static ITypedElement RetrieveFromAssetRolesReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("FromAssetRoles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the FromAssetRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FromAssetRolesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("FromAssetRoles", e, _fromAssetRolesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the FromAssetRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void FromAssetRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("FromAssetRoles", e, _fromAssetRolesReference);
        }
        
        private static ITypedElement RetrieveActivityRecordsReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("ActivityRecords")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ActivityRecords property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ActivityRecordsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ActivityRecords", e, _activityRecordsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ActivityRecords property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ActivityRecordsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ActivityRecords", e, _activityRecordsReference);
        }
        
        private static ITypedElement RetrieveDocumentRolesReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("DocumentRoles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the DocumentRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DocumentRolesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("DocumentRoles", e, _documentRolesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the DocumentRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DocumentRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("DocumentRoles", e, _documentRolesReference);
        }
        
        private static ITypedElement RetrieveAssetContainerReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("AssetContainer")));
        }
        
        /// <summary>
        /// Raises the AssetContainerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetContainerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetContainerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AssetContainerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetContainerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetContainerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AssetContainer property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAssetContainer(object sender, System.EventArgs eventArgs)
        {
            this.AssetContainer = null;
        }
        
        private static ITypedElement RetrieveErpInventoryReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("ErpInventory")));
        }
        
        /// <summary>
        /// Raises the ErpInventoryChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpInventoryChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpInventoryChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpInventoryChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpInventoryChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpInventoryChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpInventory property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpInventory(object sender, System.EventArgs eventArgs)
        {
            this.ErpInventory = null;
        }
        
        private static ITypedElement RetrieveReliabilityInfosReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("ReliabilityInfos")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ReliabilityInfos property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReliabilityInfosCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ReliabilityInfos", e, _reliabilityInfosReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ReliabilityInfos property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ReliabilityInfosCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ReliabilityInfos", e, _reliabilityInfosReference);
        }
        
        private static ITypedElement RetrieveWorkTaskReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("WorkTask")));
        }
        
        /// <summary>
        /// Raises the WorkTaskChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkTaskChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkTaskChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WorkTaskChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkTaskChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkTaskChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the WorkTask property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWorkTask(object sender, System.EventArgs eventArgs)
        {
            this.WorkTask = null;
        }
        
        private static ITypedElement RetrieveElectronicAddressReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("electronicAddress")));
        }
        
        /// <summary>
        /// Raises the ElectronicAddressChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectronicAddressChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ElectronicAddressChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ElectronicAddressChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectronicAddressChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ElectronicAddressChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ElectronicAddress property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetElectronicAddress(object sender, System.EventArgs eventArgs)
        {
            this.ElectronicAddress = null;
        }
        
        private static ITypedElement RetrieveScheduledEventsReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("ScheduledEvents")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ScheduledEvents property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ScheduledEventsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ScheduledEvents", e, _scheduledEventsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ScheduledEvents property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ScheduledEventsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ScheduledEvents", e, _scheduledEventsReference);
        }
        
        private static ITypedElement RetrieveChangeItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("ChangeItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ChangeItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChangeItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ChangeItems", e, _changeItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ChangeItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ChangeItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ChangeItems", e, _changeItemsReference);
        }
        
        private static ITypedElement RetrieveAssetFunctionsReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("AssetFunctions")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the AssetFunctions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetFunctionsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("AssetFunctions", e, _assetFunctionsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the AssetFunctions property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AssetFunctionsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("AssetFunctions", e, _assetFunctionsReference);
        }
        
        private static ITypedElement RetrieveStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("status")));
        }
        
        /// <summary>
        /// Raises the StatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the StatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.StatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Status property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetStatus(object sender, System.EventArgs eventArgs)
        {
            this.Status = null;
        }
        
        private static ITypedElement RetrieveErpOrganisationRolesReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("ErpOrganisationRoles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpOrganisationRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpOrganisationRolesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ErpOrganisationRoles", e, _erpOrganisationRolesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpOrganisationRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpOrganisationRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpOrganisationRoles", e, _erpOrganisationRolesReference);
        }
        
        private static ITypedElement RetrieveRatingsReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("Ratings")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Ratings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RatingsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Ratings", e, _ratingsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Ratings property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void RatingsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Ratings", e, _ratingsReference);
        }
        
        private static ITypedElement RetrieveMediumsReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("Mediums")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Mediums property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MediumsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Mediums", e, _mediumsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Mediums property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void MediumsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Mediums", e, _mediumsReference);
        }
        
        private static ITypedElement RetrievePropertiesReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("Properties")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Properties property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PropertiesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Properties", e, _propertiesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Properties property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PropertiesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Properties", e, _propertiesReference);
        }
        
        private static ITypedElement RetrieveAssetInfoReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("AssetInfo")));
        }
        
        /// <summary>
        /// Raises the AssetInfoChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetInfoChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetInfoChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AssetInfoChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAssetInfoChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AssetInfoChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AssetInfo property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAssetInfo(object sender, System.EventArgs eventArgs)
        {
            this.AssetInfo = null;
        }
        
        private static ITypedElement RetrieveToAssetRolesReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("ToAssetRoles")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ToAssetRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ToAssetRolesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ToAssetRoles", e, _toAssetRolesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ToAssetRoles property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ToAssetRolesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ToAssetRoles", e, _toAssetRolesReference);
        }
        
        private static ITypedElement RetrieveLocationReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("Location")));
        }
        
        /// <summary>
        /// Raises the LocationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Location property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLocation(object sender, System.EventArgs eventArgs)
        {
            this.Location = null;
        }
        
        private static ITypedElement RetrievePowerSystemResourcesReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("PowerSystemResources")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the PowerSystemResources property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PowerSystemResourcesCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("PowerSystemResources", e, _powerSystemResourcesReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the PowerSystemResources property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void PowerSystemResourcesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("PowerSystemResources", e, _powerSystemResourcesReference);
        }
        
        private static ITypedElement RetrieveErpItemMasterReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("ErpItemMaster")));
        }
        
        /// <summary>
        /// Raises the ErpItemMasterChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpItemMasterChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpItemMasterChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpItemMasterChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpItemMasterChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpItemMasterChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpItemMaster property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpItemMaster(object sender, System.EventArgs eventArgs)
        {
            this.ErpItemMaster = null;
        }
        
        private static ITypedElement RetrieveAcceptanceTestReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("acceptanceTest")));
        }
        
        /// <summary>
        /// Raises the AcceptanceTestChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAcceptanceTestChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AcceptanceTestChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AcceptanceTestChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAcceptanceTestChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AcceptanceTestChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AcceptanceTest property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAcceptanceTest(object sender, System.EventArgs eventArgs)
        {
            this.AcceptanceTest = null;
        }
        
        private static ITypedElement RetrieveErpRecDeliveryItemsReference()
        {
            return ((ITypedElement)(((ModelElement)(Asset.ClassInstance)).Resolve("ErpRecDeliveryItems")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the ErpRecDeliveryItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpRecDeliveryItemsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("ErpRecDeliveryItems", e, _erpRecDeliveryItemsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the ErpRecDeliveryItems property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void ErpRecDeliveryItemsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("ErpRecDeliveryItems", e, _erpRecDeliveryItemsReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "SERIALNUMBER"))
            {
                return this.SerialNumber;
            }
            if ((attribute == "CRITICAL"))
            {
                return this.Critical;
            }
            if ((attribute == "MANUFACTUREDDATE"))
            {
                return this.ManufacturedDate;
            }
            if ((attribute == "LOTNUMBER"))
            {
                return this.LotNumber;
            }
            if ((attribute == "INITIALLOSSOFLIFE"))
            {
                return this.InitialLossOfLife;
            }
            if ((attribute == "INITIALCONDITION"))
            {
                return this.InitialCondition;
            }
            if ((attribute == "UTCNUMBER"))
            {
                return this.UtcNumber;
            }
            if ((attribute == "INSTALLATIONDATE"))
            {
                return this.InstallationDate;
            }
            if ((attribute == "CORPORATECODE"))
            {
                return this.CorporateCode;
            }
            if ((attribute == "PURCHASEPRICE"))
            {
                return this.PurchasePrice;
            }
            if ((attribute == "APPLICATION"))
            {
                return this.Application;
            }
            if ((attribute == "CATEGORY"))
            {
                return this.Category;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ASSETPROPERTYCURVES"))
            {
                return this._assetPropertyCurves;
            }
            if ((feature == "MEASUREMENTS"))
            {
                return this._measurements;
            }
            if ((feature == "FROMASSETROLES"))
            {
                return this._fromAssetRoles;
            }
            if ((feature == "ACTIVITYRECORDS"))
            {
                return this._activityRecords;
            }
            if ((feature == "DOCUMENTROLES"))
            {
                return this._documentRoles;
            }
            if ((feature == "RELIABILITYINFOS"))
            {
                return this._reliabilityInfos;
            }
            if ((feature == "SCHEDULEDEVENTS"))
            {
                return this._scheduledEvents;
            }
            if ((feature == "CHANGEITEMS"))
            {
                return this._changeItems;
            }
            if ((feature == "ASSETFUNCTIONS"))
            {
                return this._assetFunctions;
            }
            if ((feature == "ERPORGANISATIONROLES"))
            {
                return this._erpOrganisationRoles;
            }
            if ((feature == "RATINGS"))
            {
                return this._ratings;
            }
            if ((feature == "MEDIUMS"))
            {
                return this._mediums;
            }
            if ((feature == "PROPERTIES"))
            {
                return this._properties;
            }
            if ((feature == "TOASSETROLES"))
            {
                return this._toAssetRoles;
            }
            if ((feature == "POWERSYSTEMRESOURCES"))
            {
                return this._powerSystemResources;
            }
            if ((feature == "ERPRECDELIVERYITEMS"))
            {
                return this._erpRecDeliveryItems;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "FINANCIALINFO"))
            {
                this.FinancialInfo = ((IFinancialInfo)(value));
                return;
            }
            if ((feature == "ASSETCONTAINER"))
            {
                this.AssetContainer = ((IAssetContainer)(value));
                return;
            }
            if ((feature == "ERPINVENTORY"))
            {
                this.ErpInventory = ((IErpInventory)(value));
                return;
            }
            if ((feature == "WORKTASK"))
            {
                this.WorkTask = ((IWorkTask)(value));
                return;
            }
            if ((feature == "ELECTRONICADDRESS"))
            {
                this.ElectronicAddress = ((IElectronicAddress)(value));
                return;
            }
            if ((feature == "STATUS"))
            {
                this.Status = ((IStatus)(value));
                return;
            }
            if ((feature == "ASSETINFO"))
            {
                this.AssetInfo = ((IAssetInfo)(value));
                return;
            }
            if ((feature == "LOCATION"))
            {
                this.Location = ((ILocation)(value));
                return;
            }
            if ((feature == "ERPITEMMASTER"))
            {
                this.ErpItemMaster = ((IErpItemMaster)(value));
                return;
            }
            if ((feature == "ACCEPTANCETEST"))
            {
                this.AcceptanceTest = ((IAcceptanceTest)(value));
                return;
            }
            if ((feature == "SERIALNUMBER"))
            {
                this.SerialNumber = ((string)(value));
                return;
            }
            if ((feature == "CRITICAL"))
            {
                this.Critical = ((bool)(value));
                return;
            }
            if ((feature == "MANUFACTUREDDATE"))
            {
                this.ManufacturedDate = ((string)(value));
                return;
            }
            if ((feature == "LOTNUMBER"))
            {
                this.LotNumber = ((string)(value));
                return;
            }
            if ((feature == "INITIALLOSSOFLIFE"))
            {
                this.InitialLossOfLife = ((float)(value));
                return;
            }
            if ((feature == "INITIALCONDITION"))
            {
                this.InitialCondition = ((string)(value));
                return;
            }
            if ((feature == "UTCNUMBER"))
            {
                this.UtcNumber = ((string)(value));
                return;
            }
            if ((feature == "INSTALLATIONDATE"))
            {
                this.InstallationDate = ((string)(value));
                return;
            }
            if ((feature == "CORPORATECODE"))
            {
                this.CorporateCode = ((string)(value));
                return;
            }
            if ((feature == "PURCHASEPRICE"))
            {
                this.PurchasePrice = ((float)(value));
                return;
            }
            if ((feature == "APPLICATION"))
            {
                this.Application = ((string)(value));
                return;
            }
            if ((feature == "CATEGORY"))
            {
                this.Category = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "FinancialInfo"))
            {
                return new FinancialInfoProxy(this);
            }
            if ((attribute == "AssetContainer"))
            {
                return new AssetContainerProxy(this);
            }
            if ((attribute == "ErpInventory"))
            {
                return new ErpInventoryProxy(this);
            }
            if ((attribute == "WorkTask"))
            {
                return new WorkTaskProxy(this);
            }
            if ((attribute == "ElectronicAddress"))
            {
                return new ElectronicAddressProxy(this);
            }
            if ((attribute == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((attribute == "AssetInfo"))
            {
                return new AssetInfoProxy(this);
            }
            if ((attribute == "Location"))
            {
                return new LocationProxy(this);
            }
            if ((attribute == "ErpItemMaster"))
            {
                return new ErpItemMasterProxy(this);
            }
            if ((attribute == "AcceptanceTest"))
            {
                return new AcceptanceTestProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "FinancialInfo"))
            {
                return new FinancialInfoProxy(this);
            }
            if ((reference == "AssetContainer"))
            {
                return new AssetContainerProxy(this);
            }
            if ((reference == "ErpInventory"))
            {
                return new ErpInventoryProxy(this);
            }
            if ((reference == "WorkTask"))
            {
                return new WorkTaskProxy(this);
            }
            if ((reference == "ElectronicAddress"))
            {
                return new ElectronicAddressProxy(this);
            }
            if ((reference == "Status"))
            {
                return new StatusProxy(this);
            }
            if ((reference == "AssetInfo"))
            {
                return new AssetInfoProxy(this);
            }
            if ((reference == "Location"))
            {
                return new LocationProxy(this);
            }
            if ((reference == "ErpItemMaster"))
            {
                return new ErpItemMasterProxy(this);
            }
            if ((reference == "AcceptanceTest"))
            {
                return new AcceptanceTestProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Assets/Asset")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Asset class
        /// </summary>
        public class AssetReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Asset _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public AssetReferencedElementsCollection(Asset parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.AssetPropertyCurves.Count);
                    count = (count + this._parent.Measurements.Count);
                    if ((this._parent.FinancialInfo != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.FromAssetRoles.Count);
                    count = (count + this._parent.ActivityRecords.Count);
                    count = (count + this._parent.DocumentRoles.Count);
                    if ((this._parent.AssetContainer != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ErpInventory != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ReliabilityInfos.Count);
                    if ((this._parent.WorkTask != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElectronicAddress != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ScheduledEvents.Count);
                    count = (count + this._parent.ChangeItems.Count);
                    count = (count + this._parent.AssetFunctions.Count);
                    if ((this._parent.Status != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ErpOrganisationRoles.Count);
                    count = (count + this._parent.Ratings.Count);
                    count = (count + this._parent.Mediums.Count);
                    count = (count + this._parent.Properties.Count);
                    if ((this._parent.AssetInfo != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ToAssetRoles.Count);
                    if ((this._parent.Location != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.PowerSystemResources.Count);
                    if ((this._parent.ErpItemMaster != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AcceptanceTest != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.ErpRecDeliveryItems.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AssetPropertyCurves.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Measurements.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.FinancialInfoChanged += this.PropagateValueChanges;
                this._parent.FromAssetRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ActivityRecords.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.DocumentRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AssetContainerChanged += this.PropagateValueChanges;
                this._parent.ErpInventoryChanged += this.PropagateValueChanges;
                this._parent.ReliabilityInfos.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WorkTaskChanged += this.PropagateValueChanges;
                this._parent.ElectronicAddressChanged += this.PropagateValueChanges;
                this._parent.ScheduledEvents.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ChangeItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AssetFunctions.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.StatusChanged += this.PropagateValueChanges;
                this._parent.ErpOrganisationRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Ratings.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Mediums.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Properties.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.AssetInfoChanged += this.PropagateValueChanges;
                this._parent.ToAssetRoles.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.LocationChanged += this.PropagateValueChanges;
                this._parent.PowerSystemResources.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpItemMasterChanged += this.PropagateValueChanges;
                this._parent.AcceptanceTestChanged += this.PropagateValueChanges;
                this._parent.ErpRecDeliveryItems.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AssetPropertyCurves.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Measurements.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.FinancialInfoChanged -= this.PropagateValueChanges;
                this._parent.FromAssetRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ActivityRecords.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.DocumentRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AssetContainerChanged -= this.PropagateValueChanges;
                this._parent.ErpInventoryChanged -= this.PropagateValueChanges;
                this._parent.ReliabilityInfos.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WorkTaskChanged -= this.PropagateValueChanges;
                this._parent.ElectronicAddressChanged -= this.PropagateValueChanges;
                this._parent.ScheduledEvents.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ChangeItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AssetFunctions.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.StatusChanged -= this.PropagateValueChanges;
                this._parent.ErpOrganisationRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Ratings.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Mediums.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Properties.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.AssetInfoChanged -= this.PropagateValueChanges;
                this._parent.ToAssetRoles.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.LocationChanged -= this.PropagateValueChanges;
                this._parent.PowerSystemResources.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpItemMasterChanged -= this.PropagateValueChanges;
                this._parent.AcceptanceTestChanged -= this.PropagateValueChanges;
                this._parent.ErpRecDeliveryItems.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IAssetPropertyCurve assetPropertyCurvesCasted = item.As<IAssetPropertyCurve>();
                if ((assetPropertyCurvesCasted != null))
                {
                    this._parent.AssetPropertyCurves.Add(assetPropertyCurvesCasted);
                }
                IMeasurement measurementsCasted = item.As<IMeasurement>();
                if ((measurementsCasted != null))
                {
                    this._parent.Measurements.Add(measurementsCasted);
                }
                if ((this._parent.FinancialInfo == null))
                {
                    IFinancialInfo financialInfoCasted = item.As<IFinancialInfo>();
                    if ((financialInfoCasted != null))
                    {
                        this._parent.FinancialInfo = financialInfoCasted;
                        return;
                    }
                }
                IAssetAssetRole fromAssetRolesCasted = item.As<IAssetAssetRole>();
                if ((fromAssetRolesCasted != null))
                {
                    this._parent.FromAssetRoles.Add(fromAssetRolesCasted);
                }
                IActivityRecord activityRecordsCasted = item.As<IActivityRecord>();
                if ((activityRecordsCasted != null))
                {
                    this._parent.ActivityRecords.Add(activityRecordsCasted);
                }
                IDocAssetRole documentRolesCasted = item.As<IDocAssetRole>();
                if ((documentRolesCasted != null))
                {
                    this._parent.DocumentRoles.Add(documentRolesCasted);
                }
                if ((this._parent.AssetContainer == null))
                {
                    IAssetContainer assetContainerCasted = item.As<IAssetContainer>();
                    if ((assetContainerCasted != null))
                    {
                        this._parent.AssetContainer = assetContainerCasted;
                        return;
                    }
                }
                if ((this._parent.ErpInventory == null))
                {
                    IErpInventory erpInventoryCasted = item.As<IErpInventory>();
                    if ((erpInventoryCasted != null))
                    {
                        this._parent.ErpInventory = erpInventoryCasted;
                        return;
                    }
                }
                IReliabilityInfo reliabilityInfosCasted = item.As<IReliabilityInfo>();
                if ((reliabilityInfosCasted != null))
                {
                    this._parent.ReliabilityInfos.Add(reliabilityInfosCasted);
                }
                if ((this._parent.WorkTask == null))
                {
                    IWorkTask workTaskCasted = item.As<IWorkTask>();
                    if ((workTaskCasted != null))
                    {
                        this._parent.WorkTask = workTaskCasted;
                        return;
                    }
                }
                if ((this._parent.ElectronicAddress == null))
                {
                    IElectronicAddress electronicAddressCasted = item.As<IElectronicAddress>();
                    if ((electronicAddressCasted != null))
                    {
                        this._parent.ElectronicAddress = electronicAddressCasted;
                        return;
                    }
                }
                IScheduledEvent scheduledEventsCasted = item.As<IScheduledEvent>();
                if ((scheduledEventsCasted != null))
                {
                    this._parent.ScheduledEvents.Add(scheduledEventsCasted);
                }
                IChangeItem changeItemsCasted = item.As<IChangeItem>();
                if ((changeItemsCasted != null))
                {
                    this._parent.ChangeItems.Add(changeItemsCasted);
                }
                IAssetFunction assetFunctionsCasted = item.As<IAssetFunction>();
                if ((assetFunctionsCasted != null))
                {
                    this._parent.AssetFunctions.Add(assetFunctionsCasted);
                }
                if ((this._parent.Status == null))
                {
                    IStatus statusCasted = item.As<IStatus>();
                    if ((statusCasted != null))
                    {
                        this._parent.Status = statusCasted;
                        return;
                    }
                }
                IOrgAssetRole erpOrganisationRolesCasted = item.As<IOrgAssetRole>();
                if ((erpOrganisationRolesCasted != null))
                {
                    this._parent.ErpOrganisationRoles.Add(erpOrganisationRolesCasted);
                }
                IUserAttribute ratingsCasted = item.As<IUserAttribute>();
                if ((ratingsCasted != null))
                {
                    this._parent.Ratings.Add(ratingsCasted);
                }
                IMedium mediumsCasted = item.As<IMedium>();
                if ((mediumsCasted != null))
                {
                    this._parent.Mediums.Add(mediumsCasted);
                }
                IUserAttribute propertiesCasted = item.As<IUserAttribute>();
                if ((propertiesCasted != null))
                {
                    this._parent.Properties.Add(propertiesCasted);
                }
                if ((this._parent.AssetInfo == null))
                {
                    IAssetInfo assetInfoCasted = item.As<IAssetInfo>();
                    if ((assetInfoCasted != null))
                    {
                        this._parent.AssetInfo = assetInfoCasted;
                        return;
                    }
                }
                IAssetAssetRole toAssetRolesCasted = item.As<IAssetAssetRole>();
                if ((toAssetRolesCasted != null))
                {
                    this._parent.ToAssetRoles.Add(toAssetRolesCasted);
                }
                if ((this._parent.Location == null))
                {
                    ILocation locationCasted = item.As<ILocation>();
                    if ((locationCasted != null))
                    {
                        this._parent.Location = locationCasted;
                        return;
                    }
                }
                IPowerSystemResource powerSystemResourcesCasted = item.As<IPowerSystemResource>();
                if ((powerSystemResourcesCasted != null))
                {
                    this._parent.PowerSystemResources.Add(powerSystemResourcesCasted);
                }
                if ((this._parent.ErpItemMaster == null))
                {
                    IErpItemMaster erpItemMasterCasted = item.As<IErpItemMaster>();
                    if ((erpItemMasterCasted != null))
                    {
                        this._parent.ErpItemMaster = erpItemMasterCasted;
                        return;
                    }
                }
                if ((this._parent.AcceptanceTest == null))
                {
                    IAcceptanceTest acceptanceTestCasted = item.As<IAcceptanceTest>();
                    if ((acceptanceTestCasted != null))
                    {
                        this._parent.AcceptanceTest = acceptanceTestCasted;
                        return;
                    }
                }
                IErpRecDelvLineItem erpRecDeliveryItemsCasted = item.As<IErpRecDelvLineItem>();
                if ((erpRecDeliveryItemsCasted != null))
                {
                    this._parent.ErpRecDeliveryItems.Add(erpRecDeliveryItemsCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AssetPropertyCurves.Clear();
                this._parent.Measurements.Clear();
                this._parent.FinancialInfo = null;
                this._parent.FromAssetRoles.Clear();
                this._parent.ActivityRecords.Clear();
                this._parent.DocumentRoles.Clear();
                this._parent.AssetContainer = null;
                this._parent.ErpInventory = null;
                this._parent.ReliabilityInfos.Clear();
                this._parent.WorkTask = null;
                this._parent.ElectronicAddress = null;
                this._parent.ScheduledEvents.Clear();
                this._parent.ChangeItems.Clear();
                this._parent.AssetFunctions.Clear();
                this._parent.Status = null;
                this._parent.ErpOrganisationRoles.Clear();
                this._parent.Ratings.Clear();
                this._parent.Mediums.Clear();
                this._parent.Properties.Clear();
                this._parent.AssetInfo = null;
                this._parent.ToAssetRoles.Clear();
                this._parent.Location = null;
                this._parent.PowerSystemResources.Clear();
                this._parent.ErpItemMaster = null;
                this._parent.AcceptanceTest = null;
                this._parent.ErpRecDeliveryItems.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.AssetPropertyCurves.Contains(item))
                {
                    return true;
                }
                if (this._parent.Measurements.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.FinancialInfo))
                {
                    return true;
                }
                if (this._parent.FromAssetRoles.Contains(item))
                {
                    return true;
                }
                if (this._parent.ActivityRecords.Contains(item))
                {
                    return true;
                }
                if (this._parent.DocumentRoles.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.AssetContainer))
                {
                    return true;
                }
                if ((item == this._parent.ErpInventory))
                {
                    return true;
                }
                if (this._parent.ReliabilityInfos.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.WorkTask))
                {
                    return true;
                }
                if ((item == this._parent.ElectronicAddress))
                {
                    return true;
                }
                if (this._parent.ScheduledEvents.Contains(item))
                {
                    return true;
                }
                if (this._parent.ChangeItems.Contains(item))
                {
                    return true;
                }
                if (this._parent.AssetFunctions.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Status))
                {
                    return true;
                }
                if (this._parent.ErpOrganisationRoles.Contains(item))
                {
                    return true;
                }
                if (this._parent.Ratings.Contains(item))
                {
                    return true;
                }
                if (this._parent.Mediums.Contains(item))
                {
                    return true;
                }
                if (this._parent.Properties.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.AssetInfo))
                {
                    return true;
                }
                if (this._parent.ToAssetRoles.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.Location))
                {
                    return true;
                }
                if (this._parent.PowerSystemResources.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ErpItemMaster))
                {
                    return true;
                }
                if ((item == this._parent.AcceptanceTest))
                {
                    return true;
                }
                if (this._parent.ErpRecDeliveryItems.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> assetPropertyCurvesEnumerator = this._parent.AssetPropertyCurves.GetEnumerator();
                try
                {
                    for (
                    ; assetPropertyCurvesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = assetPropertyCurvesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    assetPropertyCurvesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> measurementsEnumerator = this._parent.Measurements.GetEnumerator();
                try
                {
                    for (
                    ; measurementsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = measurementsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    measurementsEnumerator.Dispose();
                }
                if ((this._parent.FinancialInfo != null))
                {
                    array[arrayIndex] = this._parent.FinancialInfo;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> fromAssetRolesEnumerator = this._parent.FromAssetRoles.GetEnumerator();
                try
                {
                    for (
                    ; fromAssetRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = fromAssetRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    fromAssetRolesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> activityRecordsEnumerator = this._parent.ActivityRecords.GetEnumerator();
                try
                {
                    for (
                    ; activityRecordsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = activityRecordsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    activityRecordsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> documentRolesEnumerator = this._parent.DocumentRoles.GetEnumerator();
                try
                {
                    for (
                    ; documentRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = documentRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    documentRolesEnumerator.Dispose();
                }
                if ((this._parent.AssetContainer != null))
                {
                    array[arrayIndex] = this._parent.AssetContainer;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ErpInventory != null))
                {
                    array[arrayIndex] = this._parent.ErpInventory;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> reliabilityInfosEnumerator = this._parent.ReliabilityInfos.GetEnumerator();
                try
                {
                    for (
                    ; reliabilityInfosEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = reliabilityInfosEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    reliabilityInfosEnumerator.Dispose();
                }
                if ((this._parent.WorkTask != null))
                {
                    array[arrayIndex] = this._parent.WorkTask;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElectronicAddress != null))
                {
                    array[arrayIndex] = this._parent.ElectronicAddress;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> scheduledEventsEnumerator = this._parent.ScheduledEvents.GetEnumerator();
                try
                {
                    for (
                    ; scheduledEventsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = scheduledEventsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    scheduledEventsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> changeItemsEnumerator = this._parent.ChangeItems.GetEnumerator();
                try
                {
                    for (
                    ; changeItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = changeItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    changeItemsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> assetFunctionsEnumerator = this._parent.AssetFunctions.GetEnumerator();
                try
                {
                    for (
                    ; assetFunctionsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = assetFunctionsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    assetFunctionsEnumerator.Dispose();
                }
                if ((this._parent.Status != null))
                {
                    array[arrayIndex] = this._parent.Status;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> erpOrganisationRolesEnumerator = this._parent.ErpOrganisationRoles.GetEnumerator();
                try
                {
                    for (
                    ; erpOrganisationRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpOrganisationRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpOrganisationRolesEnumerator.Dispose();
                }
                IEnumerator<IModelElement> ratingsEnumerator = this._parent.Ratings.GetEnumerator();
                try
                {
                    for (
                    ; ratingsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = ratingsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    ratingsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> mediumsEnumerator = this._parent.Mediums.GetEnumerator();
                try
                {
                    for (
                    ; mediumsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = mediumsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    mediumsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> propertiesEnumerator = this._parent.Properties.GetEnumerator();
                try
                {
                    for (
                    ; propertiesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = propertiesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    propertiesEnumerator.Dispose();
                }
                if ((this._parent.AssetInfo != null))
                {
                    array[arrayIndex] = this._parent.AssetInfo;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> toAssetRolesEnumerator = this._parent.ToAssetRoles.GetEnumerator();
                try
                {
                    for (
                    ; toAssetRolesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = toAssetRolesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    toAssetRolesEnumerator.Dispose();
                }
                if ((this._parent.Location != null))
                {
                    array[arrayIndex] = this._parent.Location;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> powerSystemResourcesEnumerator = this._parent.PowerSystemResources.GetEnumerator();
                try
                {
                    for (
                    ; powerSystemResourcesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = powerSystemResourcesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    powerSystemResourcesEnumerator.Dispose();
                }
                if ((this._parent.ErpItemMaster != null))
                {
                    array[arrayIndex] = this._parent.ErpItemMaster;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AcceptanceTest != null))
                {
                    array[arrayIndex] = this._parent.AcceptanceTest;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> erpRecDeliveryItemsEnumerator = this._parent.ErpRecDeliveryItems.GetEnumerator();
                try
                {
                    for (
                    ; erpRecDeliveryItemsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = erpRecDeliveryItemsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    erpRecDeliveryItemsEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IAssetPropertyCurve assetPropertyCurveItem = item.As<IAssetPropertyCurve>();
                if (((assetPropertyCurveItem != null) 
                            && this._parent.AssetPropertyCurves.Remove(assetPropertyCurveItem)))
                {
                    return true;
                }
                IMeasurement measurementItem = item.As<IMeasurement>();
                if (((measurementItem != null) 
                            && this._parent.Measurements.Remove(measurementItem)))
                {
                    return true;
                }
                if ((this._parent.FinancialInfo == item))
                {
                    this._parent.FinancialInfo = null;
                    return true;
                }
                IAssetAssetRole assetAssetRoleItem = item.As<IAssetAssetRole>();
                if (((assetAssetRoleItem != null) 
                            && this._parent.FromAssetRoles.Remove(assetAssetRoleItem)))
                {
                    return true;
                }
                IActivityRecord activityRecordItem = item.As<IActivityRecord>();
                if (((activityRecordItem != null) 
                            && this._parent.ActivityRecords.Remove(activityRecordItem)))
                {
                    return true;
                }
                IDocAssetRole docAssetRoleItem = item.As<IDocAssetRole>();
                if (((docAssetRoleItem != null) 
                            && this._parent.DocumentRoles.Remove(docAssetRoleItem)))
                {
                    return true;
                }
                if ((this._parent.AssetContainer == item))
                {
                    this._parent.AssetContainer = null;
                    return true;
                }
                if ((this._parent.ErpInventory == item))
                {
                    this._parent.ErpInventory = null;
                    return true;
                }
                IReliabilityInfo reliabilityInfoItem = item.As<IReliabilityInfo>();
                if (((reliabilityInfoItem != null) 
                            && this._parent.ReliabilityInfos.Remove(reliabilityInfoItem)))
                {
                    return true;
                }
                if ((this._parent.WorkTask == item))
                {
                    this._parent.WorkTask = null;
                    return true;
                }
                if ((this._parent.ElectronicAddress == item))
                {
                    this._parent.ElectronicAddress = null;
                    return true;
                }
                IScheduledEvent scheduledEventItem = item.As<IScheduledEvent>();
                if (((scheduledEventItem != null) 
                            && this._parent.ScheduledEvents.Remove(scheduledEventItem)))
                {
                    return true;
                }
                IChangeItem changeItemItem = item.As<IChangeItem>();
                if (((changeItemItem != null) 
                            && this._parent.ChangeItems.Remove(changeItemItem)))
                {
                    return true;
                }
                IAssetFunction assetFunctionItem = item.As<IAssetFunction>();
                if (((assetFunctionItem != null) 
                            && this._parent.AssetFunctions.Remove(assetFunctionItem)))
                {
                    return true;
                }
                if ((this._parent.Status == item))
                {
                    this._parent.Status = null;
                    return true;
                }
                IOrgAssetRole orgAssetRoleItem = item.As<IOrgAssetRole>();
                if (((orgAssetRoleItem != null) 
                            && this._parent.ErpOrganisationRoles.Remove(orgAssetRoleItem)))
                {
                    return true;
                }
                IUserAttribute userAttributeItem = item.As<IUserAttribute>();
                if (((userAttributeItem != null) 
                            && this._parent.Ratings.Remove(userAttributeItem)))
                {
                    return true;
                }
                IMedium mediumItem = item.As<IMedium>();
                if (((mediumItem != null) 
                            && this._parent.Mediums.Remove(mediumItem)))
                {
                    return true;
                }
                if (((userAttributeItem != null) 
                            && this._parent.Properties.Remove(userAttributeItem)))
                {
                    return true;
                }
                if ((this._parent.AssetInfo == item))
                {
                    this._parent.AssetInfo = null;
                    return true;
                }
                if (((assetAssetRoleItem != null) 
                            && this._parent.ToAssetRoles.Remove(assetAssetRoleItem)))
                {
                    return true;
                }
                if ((this._parent.Location == item))
                {
                    this._parent.Location = null;
                    return true;
                }
                IPowerSystemResource powerSystemResourceItem = item.As<IPowerSystemResource>();
                if (((powerSystemResourceItem != null) 
                            && this._parent.PowerSystemResources.Remove(powerSystemResourceItem)))
                {
                    return true;
                }
                if ((this._parent.ErpItemMaster == item))
                {
                    this._parent.ErpItemMaster = null;
                    return true;
                }
                if ((this._parent.AcceptanceTest == item))
                {
                    this._parent.AcceptanceTest = null;
                    return true;
                }
                IErpRecDelvLineItem erpRecDelvLineItemItem = item.As<IErpRecDelvLineItem>();
                if (((erpRecDelvLineItemItem != null) 
                            && this._parent.ErpRecDeliveryItems.Remove(erpRecDelvLineItemItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AssetPropertyCurves).Concat(this._parent.Measurements).Concat(this._parent.FinancialInfo).Concat(this._parent.FromAssetRoles).Concat(this._parent.ActivityRecords).Concat(this._parent.DocumentRoles).Concat(this._parent.AssetContainer).Concat(this._parent.ErpInventory).Concat(this._parent.ReliabilityInfos).Concat(this._parent.WorkTask).Concat(this._parent.ElectronicAddress).Concat(this._parent.ScheduledEvents).Concat(this._parent.ChangeItems).Concat(this._parent.AssetFunctions).Concat(this._parent.Status).Concat(this._parent.ErpOrganisationRoles).Concat(this._parent.Ratings).Concat(this._parent.Mediums).Concat(this._parent.Properties).Concat(this._parent.AssetInfo).Concat(this._parent.ToAssetRoles).Concat(this._parent.Location).Concat(this._parent.PowerSystemResources).Concat(this._parent.ErpItemMaster).Concat(this._parent.AcceptanceTest).Concat(this._parent.ErpRecDeliveryItems).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the serialNumber property
        /// </summary>
        private sealed class SerialNumberProxy : ModelPropertyChange<IAsset, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public SerialNumberProxy(IAsset modelElement) : 
                    base(modelElement, "serialNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.SerialNumber;
                }
                set
                {
                    this.ModelElement.SerialNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the critical property
        /// </summary>
        private sealed class CriticalProxy : ModelPropertyChange<IAsset, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CriticalProxy(IAsset modelElement) : 
                    base(modelElement, "critical")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.Critical;
                }
                set
                {
                    this.ModelElement.Critical = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the manufacturedDate property
        /// </summary>
        private sealed class ManufacturedDateProxy : ModelPropertyChange<IAsset, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ManufacturedDateProxy(IAsset modelElement) : 
                    base(modelElement, "manufacturedDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ManufacturedDate;
                }
                set
                {
                    this.ModelElement.ManufacturedDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the lotNumber property
        /// </summary>
        private sealed class LotNumberProxy : ModelPropertyChange<IAsset, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LotNumberProxy(IAsset modelElement) : 
                    base(modelElement, "lotNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.LotNumber;
                }
                set
                {
                    this.ModelElement.LotNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the initialLossOfLife property
        /// </summary>
        private sealed class InitialLossOfLifeProxy : ModelPropertyChange<IAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InitialLossOfLifeProxy(IAsset modelElement) : 
                    base(modelElement, "initialLossOfLife")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.InitialLossOfLife;
                }
                set
                {
                    this.ModelElement.InitialLossOfLife = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the initialCondition property
        /// </summary>
        private sealed class InitialConditionProxy : ModelPropertyChange<IAsset, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InitialConditionProxy(IAsset modelElement) : 
                    base(modelElement, "initialCondition")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.InitialCondition;
                }
                set
                {
                    this.ModelElement.InitialCondition = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the utcNumber property
        /// </summary>
        private sealed class UtcNumberProxy : ModelPropertyChange<IAsset, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UtcNumberProxy(IAsset modelElement) : 
                    base(modelElement, "utcNumber")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.UtcNumber;
                }
                set
                {
                    this.ModelElement.UtcNumber = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the installationDate property
        /// </summary>
        private sealed class InstallationDateProxy : ModelPropertyChange<IAsset, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InstallationDateProxy(IAsset modelElement) : 
                    base(modelElement, "installationDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.InstallationDate;
                }
                set
                {
                    this.ModelElement.InstallationDate = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the corporateCode property
        /// </summary>
        private sealed class CorporateCodeProxy : ModelPropertyChange<IAsset, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CorporateCodeProxy(IAsset modelElement) : 
                    base(modelElement, "corporateCode")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.CorporateCode;
                }
                set
                {
                    this.ModelElement.CorporateCode = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the purchasePrice property
        /// </summary>
        private sealed class PurchasePriceProxy : ModelPropertyChange<IAsset, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PurchasePriceProxy(IAsset modelElement) : 
                    base(modelElement, "purchasePrice")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PurchasePrice;
                }
                set
                {
                    this.ModelElement.PurchasePrice = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the application property
        /// </summary>
        private sealed class ApplicationProxy : ModelPropertyChange<IAsset, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ApplicationProxy(IAsset modelElement) : 
                    base(modelElement, "application")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Application;
                }
                set
                {
                    this.ModelElement.Application = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the category property
        /// </summary>
        private sealed class CategoryProxy : ModelPropertyChange<IAsset, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CategoryProxy(IAsset modelElement) : 
                    base(modelElement, "category")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Category;
                }
                set
                {
                    this.ModelElement.Category = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the FinancialInfo property
        /// </summary>
        private sealed class FinancialInfoProxy : ModelPropertyChange<IAsset, IFinancialInfo>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public FinancialInfoProxy(IAsset modelElement) : 
                    base(modelElement, "FinancialInfo")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IFinancialInfo Value
            {
                get
                {
                    return this.ModelElement.FinancialInfo;
                }
                set
                {
                    this.ModelElement.FinancialInfo = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AssetContainer property
        /// </summary>
        private sealed class AssetContainerProxy : ModelPropertyChange<IAsset, IAssetContainer>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssetContainerProxy(IAsset modelElement) : 
                    base(modelElement, "AssetContainer")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssetContainer Value
            {
                get
                {
                    return this.ModelElement.AssetContainer;
                }
                set
                {
                    this.ModelElement.AssetContainer = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpInventory property
        /// </summary>
        private sealed class ErpInventoryProxy : ModelPropertyChange<IAsset, IErpInventory>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpInventoryProxy(IAsset modelElement) : 
                    base(modelElement, "ErpInventory")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpInventory Value
            {
                get
                {
                    return this.ModelElement.ErpInventory;
                }
                set
                {
                    this.ModelElement.ErpInventory = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the WorkTask property
        /// </summary>
        private sealed class WorkTaskProxy : ModelPropertyChange<IAsset, IWorkTask>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WorkTaskProxy(IAsset modelElement) : 
                    base(modelElement, "WorkTask")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWorkTask Value
            {
                get
                {
                    return this.ModelElement.WorkTask;
                }
                set
                {
                    this.ModelElement.WorkTask = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the electronicAddress property
        /// </summary>
        private sealed class ElectronicAddressProxy : ModelPropertyChange<IAsset, IElectronicAddress>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ElectronicAddressProxy(IAsset modelElement) : 
                    base(modelElement, "electronicAddress")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectronicAddress Value
            {
                get
                {
                    return this.ModelElement.ElectronicAddress;
                }
                set
                {
                    this.ModelElement.ElectronicAddress = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the status property
        /// </summary>
        private sealed class StatusProxy : ModelPropertyChange<IAsset, IStatus>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public StatusProxy(IAsset modelElement) : 
                    base(modelElement, "status")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IStatus Value
            {
                get
                {
                    return this.ModelElement.Status;
                }
                set
                {
                    this.ModelElement.Status = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AssetInfo property
        /// </summary>
        private sealed class AssetInfoProxy : ModelPropertyChange<IAsset, IAssetInfo>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AssetInfoProxy(IAsset modelElement) : 
                    base(modelElement, "AssetInfo")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAssetInfo Value
            {
                get
                {
                    return this.ModelElement.AssetInfo;
                }
                set
                {
                    this.ModelElement.AssetInfo = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Location property
        /// </summary>
        private sealed class LocationProxy : ModelPropertyChange<IAsset, ILocation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocationProxy(IAsset modelElement) : 
                    base(modelElement, "Location")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ILocation Value
            {
                get
                {
                    return this.ModelElement.Location;
                }
                set
                {
                    this.ModelElement.Location = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpItemMaster property
        /// </summary>
        private sealed class ErpItemMasterProxy : ModelPropertyChange<IAsset, IErpItemMaster>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpItemMasterProxy(IAsset modelElement) : 
                    base(modelElement, "ErpItemMaster")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpItemMaster Value
            {
                get
                {
                    return this.ModelElement.ErpItemMaster;
                }
                set
                {
                    this.ModelElement.ErpItemMaster = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the acceptanceTest property
        /// </summary>
        private sealed class AcceptanceTestProxy : ModelPropertyChange<IAsset, IAcceptanceTest>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AcceptanceTestProxy(IAsset modelElement) : 
                    base(modelElement, "acceptanceTest")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAcceptanceTest Value
            {
                get
                {
                    return this.ModelElement.AcceptanceTest;
                }
                set
                {
                    this.ModelElement.AcceptanceTest = value;
                }
            }
        }
    }
}

