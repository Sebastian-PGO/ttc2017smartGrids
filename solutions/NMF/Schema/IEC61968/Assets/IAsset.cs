using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61970.Core;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfAssets;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCommon;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfLocations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfOperations;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;
using TTC2017.SmartGrids.CIM.IEC61970.Meas;

namespace TTC2017.SmartGrids.CIM.IEC61968.Assets
{
    
    
    /// <summary>
    /// The public interface for Asset
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Asset))]
    [XmlDefaultImplementationTypeAttribute(typeof(Asset))]
    public interface IAsset : IModelElement, IIdentifiedObject
    {
        
        /// <summary>
        /// The serialNumber property
        /// </summary>
        string SerialNumber
        {
            get;
            set;
        }
        
        /// <summary>
        /// The critical property
        /// </summary>
        bool Critical
        {
            get;
            set;
        }
        
        /// <summary>
        /// The manufacturedDate property
        /// </summary>
        string ManufacturedDate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The lotNumber property
        /// </summary>
        string LotNumber
        {
            get;
            set;
        }
        
        /// <summary>
        /// The initialLossOfLife property
        /// </summary>
        float InitialLossOfLife
        {
            get;
            set;
        }
        
        /// <summary>
        /// The initialCondition property
        /// </summary>
        string InitialCondition
        {
            get;
            set;
        }
        
        /// <summary>
        /// The utcNumber property
        /// </summary>
        string UtcNumber
        {
            get;
            set;
        }
        
        /// <summary>
        /// The installationDate property
        /// </summary>
        string InstallationDate
        {
            get;
            set;
        }
        
        /// <summary>
        /// The corporateCode property
        /// </summary>
        string CorporateCode
        {
            get;
            set;
        }
        
        /// <summary>
        /// The purchasePrice property
        /// </summary>
        float PurchasePrice
        {
            get;
            set;
        }
        
        /// <summary>
        /// The application property
        /// </summary>
        string Application
        {
            get;
            set;
        }
        
        /// <summary>
        /// The category property
        /// </summary>
        string Category
        {
            get;
            set;
        }
        
        /// <summary>
        /// The AssetPropertyCurves property
        /// </summary>
        IOrderedSetExpression<IAssetPropertyCurve> AssetPropertyCurves
        {
            get;
        }
        
        /// <summary>
        /// The Measurements property
        /// </summary>
        IOrderedSetExpression<IMeasurement> Measurements
        {
            get;
        }
        
        /// <summary>
        /// The FinancialInfo property
        /// </summary>
        IFinancialInfo FinancialInfo
        {
            get;
            set;
        }
        
        /// <summary>
        /// The FromAssetRoles property
        /// </summary>
        IOrderedSetExpression<IAssetAssetRole> FromAssetRoles
        {
            get;
        }
        
        /// <summary>
        /// The ActivityRecords property
        /// </summary>
        IOrderedSetExpression<IActivityRecord> ActivityRecords
        {
            get;
        }
        
        /// <summary>
        /// The DocumentRoles property
        /// </summary>
        IOrderedSetExpression<IDocAssetRole> DocumentRoles
        {
            get;
        }
        
        /// <summary>
        /// The AssetContainer property
        /// </summary>
        IAssetContainer AssetContainer
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ErpInventory property
        /// </summary>
        IErpInventory ErpInventory
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ReliabilityInfos property
        /// </summary>
        IOrderedSetExpression<IReliabilityInfo> ReliabilityInfos
        {
            get;
        }
        
        /// <summary>
        /// The WorkTask property
        /// </summary>
        IWorkTask WorkTask
        {
            get;
            set;
        }
        
        /// <summary>
        /// The electronicAddress property
        /// </summary>
        IElectronicAddress ElectronicAddress
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ScheduledEvents property
        /// </summary>
        IOrderedSetExpression<IScheduledEvent> ScheduledEvents
        {
            get;
        }
        
        /// <summary>
        /// The ChangeItems property
        /// </summary>
        IOrderedSetExpression<IChangeItem> ChangeItems
        {
            get;
        }
        
        /// <summary>
        /// The AssetFunctions property
        /// </summary>
        IOrderedSetExpression<IAssetFunction> AssetFunctions
        {
            get;
        }
        
        /// <summary>
        /// The status property
        /// </summary>
        IStatus Status
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ErpOrganisationRoles property
        /// </summary>
        IOrderedSetExpression<IOrgAssetRole> ErpOrganisationRoles
        {
            get;
        }
        
        /// <summary>
        /// The Ratings property
        /// </summary>
        IOrderedSetExpression<IUserAttribute> Ratings
        {
            get;
        }
        
        /// <summary>
        /// The Mediums property
        /// </summary>
        IOrderedSetExpression<IMedium> Mediums
        {
            get;
        }
        
        /// <summary>
        /// The Properties property
        /// </summary>
        IOrderedSetExpression<IUserAttribute> Properties
        {
            get;
        }
        
        /// <summary>
        /// The AssetInfo property
        /// </summary>
        IAssetInfo AssetInfo
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ToAssetRoles property
        /// </summary>
        IOrderedSetExpression<IAssetAssetRole> ToAssetRoles
        {
            get;
        }
        
        /// <summary>
        /// The Location property
        /// </summary>
        ILocation Location
        {
            get;
            set;
        }
        
        /// <summary>
        /// The PowerSystemResources property
        /// </summary>
        IOrderedSetExpression<IPowerSystemResource> PowerSystemResources
        {
            get;
        }
        
        /// <summary>
        /// The ErpItemMaster property
        /// </summary>
        IErpItemMaster ErpItemMaster
        {
            get;
            set;
        }
        
        /// <summary>
        /// The acceptanceTest property
        /// </summary>
        IAcceptanceTest AcceptanceTest
        {
            get;
            set;
        }
        
        /// <summary>
        /// The ErpRecDeliveryItems property
        /// </summary>
        IOrderedSetExpression<IErpRecDelvLineItem> ErpRecDeliveryItems
        {
            get;
        }
        
        /// <summary>
        /// Gets fired before the SerialNumber property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SerialNumberChanging;
        
        /// <summary>
        /// Gets fired when the SerialNumber property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> SerialNumberChanged;
        
        /// <summary>
        /// Gets fired before the Critical property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CriticalChanging;
        
        /// <summary>
        /// Gets fired when the Critical property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CriticalChanged;
        
        /// <summary>
        /// Gets fired before the ManufacturedDate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ManufacturedDateChanging;
        
        /// <summary>
        /// Gets fired when the ManufacturedDate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ManufacturedDateChanged;
        
        /// <summary>
        /// Gets fired before the LotNumber property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LotNumberChanging;
        
        /// <summary>
        /// Gets fired when the LotNumber property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LotNumberChanged;
        
        /// <summary>
        /// Gets fired before the InitialLossOfLife property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InitialLossOfLifeChanging;
        
        /// <summary>
        /// Gets fired when the InitialLossOfLife property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InitialLossOfLifeChanged;
        
        /// <summary>
        /// Gets fired before the InitialCondition property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InitialConditionChanging;
        
        /// <summary>
        /// Gets fired when the InitialCondition property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InitialConditionChanged;
        
        /// <summary>
        /// Gets fired before the UtcNumber property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UtcNumberChanging;
        
        /// <summary>
        /// Gets fired when the UtcNumber property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> UtcNumberChanged;
        
        /// <summary>
        /// Gets fired before the InstallationDate property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InstallationDateChanging;
        
        /// <summary>
        /// Gets fired when the InstallationDate property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> InstallationDateChanged;
        
        /// <summary>
        /// Gets fired before the CorporateCode property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CorporateCodeChanging;
        
        /// <summary>
        /// Gets fired when the CorporateCode property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CorporateCodeChanged;
        
        /// <summary>
        /// Gets fired before the PurchasePrice property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PurchasePriceChanging;
        
        /// <summary>
        /// Gets fired when the PurchasePrice property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PurchasePriceChanged;
        
        /// <summary>
        /// Gets fired before the Application property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ApplicationChanging;
        
        /// <summary>
        /// Gets fired when the Application property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ApplicationChanged;
        
        /// <summary>
        /// Gets fired before the Category property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CategoryChanging;
        
        /// <summary>
        /// Gets fired when the Category property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CategoryChanged;
        
        /// <summary>
        /// Gets fired before the FinancialInfo property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FinancialInfoChanging;
        
        /// <summary>
        /// Gets fired when the FinancialInfo property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> FinancialInfoChanged;
        
        /// <summary>
        /// Gets fired before the AssetContainer property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AssetContainerChanging;
        
        /// <summary>
        /// Gets fired when the AssetContainer property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AssetContainerChanged;
        
        /// <summary>
        /// Gets fired before the ErpInventory property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ErpInventoryChanging;
        
        /// <summary>
        /// Gets fired when the ErpInventory property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ErpInventoryChanged;
        
        /// <summary>
        /// Gets fired before the WorkTask property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WorkTaskChanging;
        
        /// <summary>
        /// Gets fired when the WorkTask property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> WorkTaskChanged;
        
        /// <summary>
        /// Gets fired before the ElectronicAddress property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ElectronicAddressChanging;
        
        /// <summary>
        /// Gets fired when the ElectronicAddress property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ElectronicAddressChanged;
        
        /// <summary>
        /// Gets fired before the Status property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StatusChanging;
        
        /// <summary>
        /// Gets fired when the Status property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> StatusChanged;
        
        /// <summary>
        /// Gets fired before the AssetInfo property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AssetInfoChanging;
        
        /// <summary>
        /// Gets fired when the AssetInfo property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AssetInfoChanged;
        
        /// <summary>
        /// Gets fired before the Location property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LocationChanging;
        
        /// <summary>
        /// Gets fired when the Location property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LocationChanged;
        
        /// <summary>
        /// Gets fired before the ErpItemMaster property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ErpItemMasterChanging;
        
        /// <summary>
        /// Gets fired when the ErpItemMaster property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ErpItemMasterChanged;
        
        /// <summary>
        /// Gets fired before the AcceptanceTest property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AcceptanceTestChanging;
        
        /// <summary>
        /// Gets fired when the AcceptanceTest property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AcceptanceTestChanged;
    }
}

