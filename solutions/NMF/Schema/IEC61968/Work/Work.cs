using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM.IEC61968.Common;
using TTC2017.SmartGrids.CIM.IEC61968.Customers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfCustomers;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfERPSupport;
using TTC2017.SmartGrids.CIM.IEC61970.Informative.InfWork;

namespace TTC2017.SmartGrids.CIM.IEC61968.Work
{
    
    
    /// <summary>
    /// The default implementation of the Work class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#Work")]
    [XmlNamespacePrefixAttribute("cimWork")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Work/Work")]
    [DebuggerDisplayAttribute("Work {UUID}")]
    public partial class Work : Document, IWork, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Priority property
        /// </summary>
        private string _priority;
        
        private static Lazy<ITypedElement> _priorityAttribute = new Lazy<ITypedElement>(RetrievePriorityAttribute);
        
        /// <summary>
        /// The backing field for the RequestDateTime property
        /// </summary>
        private DateTime _requestDateTime;
        
        private static Lazy<ITypedElement> _requestDateTimeAttribute = new Lazy<ITypedElement>(RetrieveRequestDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the Kind property
        /// </summary>
        private Nullable<WorkKind> _kind;
        
        private static Lazy<ITypedElement> _kindAttribute = new Lazy<ITypedElement>(RetrieveKindAttribute);
        
        private static Lazy<ITypedElement> _workTasksReference = new Lazy<ITypedElement>(RetrieveWorkTasksReference);
        
        /// <summary>
        /// The backing field for the WorkTasks property
        /// </summary>
        private WorkWorkTasksCollection _workTasks;
        
        private static Lazy<ITypedElement> _designsReference = new Lazy<ITypedElement>(RetrieveDesignsReference);
        
        /// <summary>
        /// The backing field for the Designs property
        /// </summary>
        private WorkDesignsCollection _designs;
        
        private static Lazy<ITypedElement> _businessCaseReference = new Lazy<ITypedElement>(RetrieveBusinessCaseReference);
        
        /// <summary>
        /// The backing field for the BusinessCase property
        /// </summary>
        private IBusinessCase _businessCase;
        
        private static Lazy<ITypedElement> _workFlowStepsReference = new Lazy<ITypedElement>(RetrieveWorkFlowStepsReference);
        
        /// <summary>
        /// The backing field for the WorkFlowSteps property
        /// </summary>
        private WorkWorkFlowStepsCollection _workFlowSteps;
        
        private static Lazy<ITypedElement> _workCostDetailsReference = new Lazy<ITypedElement>(RetrieveWorkCostDetailsReference);
        
        /// <summary>
        /// The backing field for the WorkCostDetails property
        /// </summary>
        private WorkWorkCostDetailsCollection _workCostDetails;
        
        private static Lazy<ITypedElement> _erpProjectAccountingReference = new Lazy<ITypedElement>(RetrieveErpProjectAccountingReference);
        
        /// <summary>
        /// The backing field for the ErpProjectAccounting property
        /// </summary>
        private IErpProjectAccounting _erpProjectAccounting;
        
        private static Lazy<ITypedElement> _projectReference = new Lazy<ITypedElement>(RetrieveProjectReference);
        
        /// <summary>
        /// The backing field for the Project property
        /// </summary>
        private IProject _project;
        
        private static Lazy<ITypedElement> _requestReference = new Lazy<ITypedElement>(RetrieveRequestReference);
        
        /// <summary>
        /// The backing field for the Request property
        /// </summary>
        private IRequest _request;
        
        private static Lazy<ITypedElement> _workBillingInfoReference = new Lazy<ITypedElement>(RetrieveWorkBillingInfoReference);
        
        /// <summary>
        /// The backing field for the WorkBillingInfo property
        /// </summary>
        private IWorkBillingInfo _workBillingInfo;
        
        private static Lazy<ITypedElement> _customersReference = new Lazy<ITypedElement>(RetrieveCustomersReference);
        
        /// <summary>
        /// The backing field for the Customers property
        /// </summary>
        private WorkCustomersCollection _customers;
        
        private static IClass _classInstance;
        
        public Work()
        {
            this._workTasks = new WorkWorkTasksCollection(this);
            this._workTasks.CollectionChanging += this.WorkTasksCollectionChanging;
            this._workTasks.CollectionChanged += this.WorkTasksCollectionChanged;
            this._designs = new WorkDesignsCollection(this);
            this._designs.CollectionChanging += this.DesignsCollectionChanging;
            this._designs.CollectionChanged += this.DesignsCollectionChanged;
            this._workFlowSteps = new WorkWorkFlowStepsCollection(this);
            this._workFlowSteps.CollectionChanging += this.WorkFlowStepsCollectionChanging;
            this._workFlowSteps.CollectionChanged += this.WorkFlowStepsCollectionChanged;
            this._workCostDetails = new WorkWorkCostDetailsCollection(this);
            this._workCostDetails.CollectionChanging += this.WorkCostDetailsCollectionChanging;
            this._workCostDetails.CollectionChanged += this.WorkCostDetailsCollectionChanged;
            this._customers = new WorkCustomersCollection(this);
            this._customers.CollectionChanging += this.CustomersCollectionChanging;
            this._customers.CollectionChanged += this.CustomersCollectionChanged;
        }
        
        /// <summary>
        /// The priority property
        /// </summary>
        [XmlElementNameAttribute("priority")]
        [XmlAttributeAttribute(true)]
        public virtual string Priority
        {
            get
            {
                return this._priority;
            }
            set
            {
                if ((this._priority != value))
                {
                    string old = this._priority;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPriorityChanging(e);
                    this.OnPropertyChanging("Priority", e, _priorityAttribute);
                    this._priority = value;
                    this.OnPriorityChanged(e);
                    this.OnPropertyChanged("Priority", e, _priorityAttribute);
                }
            }
        }
        
        /// <summary>
        /// The requestDateTime property
        /// </summary>
        [XmlElementNameAttribute("requestDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime RequestDateTime
        {
            get
            {
                return this._requestDateTime;
            }
            set
            {
                if ((this._requestDateTime != value))
                {
                    DateTime old = this._requestDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRequestDateTimeChanging(e);
                    this.OnPropertyChanging("RequestDateTime", e, _requestDateTimeAttribute);
                    this._requestDateTime = value;
                    this.OnRequestDateTimeChanged(e);
                    this.OnPropertyChanged("RequestDateTime", e, _requestDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The kind property
        /// </summary>
        [XmlElementNameAttribute("kind")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<WorkKind> Kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                if ((this._kind != value))
                {
                    Nullable<WorkKind> old = this._kind;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnKindChanging(e);
                    this.OnPropertyChanging("Kind", e, _kindAttribute);
                    this._kind = value;
                    this.OnKindChanged(e);
                    this.OnPropertyChanged("Kind", e, _kindAttribute);
                }
            }
        }
        
        /// <summary>
        /// The WorkTasks property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Work")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWorkTask> WorkTasks
        {
            get
            {
                return this._workTasks;
            }
        }
        
        /// <summary>
        /// The Designs property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Work")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IDesign> Designs
        {
            get
            {
                return this._designs;
            }
        }
        
        /// <summary>
        /// The BusinessCase property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Works")]
        public virtual IBusinessCase BusinessCase
        {
            get
            {
                return this._businessCase;
            }
            set
            {
                if ((this._businessCase != value))
                {
                    IBusinessCase old = this._businessCase;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBusinessCaseChanging(e);
                    this.OnPropertyChanging("BusinessCase", e, _businessCaseReference);
                    this._businessCase = value;
                    if ((old != null))
                    {
                        old.Works.Remove(this);
                        old.Deleted -= this.OnResetBusinessCase;
                    }
                    if ((value != null))
                    {
                        value.Works.Add(this);
                        value.Deleted += this.OnResetBusinessCase;
                    }
                    this.OnBusinessCaseChanged(e);
                    this.OnPropertyChanged("BusinessCase", e, _businessCaseReference);
                }
            }
        }
        
        /// <summary>
        /// The WorkFlowSteps property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Work")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWorkFlowStep> WorkFlowSteps
        {
            get
            {
                return this._workFlowSteps;
            }
        }
        
        /// <summary>
        /// The WorkCostDetails property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Works")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IWorkCostDetail> WorkCostDetails
        {
            get
            {
                return this._workCostDetails;
            }
        }
        
        /// <summary>
        /// The ErpProjectAccounting property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Works")]
        public virtual IErpProjectAccounting ErpProjectAccounting
        {
            get
            {
                return this._erpProjectAccounting;
            }
            set
            {
                if ((this._erpProjectAccounting != value))
                {
                    IErpProjectAccounting old = this._erpProjectAccounting;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnErpProjectAccountingChanging(e);
                    this.OnPropertyChanging("ErpProjectAccounting", e, _erpProjectAccountingReference);
                    this._erpProjectAccounting = value;
                    if ((old != null))
                    {
                        old.Works.Remove(this);
                        old.Deleted -= this.OnResetErpProjectAccounting;
                    }
                    if ((value != null))
                    {
                        value.Works.Add(this);
                        value.Deleted += this.OnResetErpProjectAccounting;
                    }
                    this.OnErpProjectAccountingChanged(e);
                    this.OnPropertyChanged("ErpProjectAccounting", e, _erpProjectAccountingReference);
                }
            }
        }
        
        /// <summary>
        /// The Project property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Works")]
        public virtual IProject Project
        {
            get
            {
                return this._project;
            }
            set
            {
                if ((this._project != value))
                {
                    IProject old = this._project;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnProjectChanging(e);
                    this.OnPropertyChanging("Project", e, _projectReference);
                    this._project = value;
                    if ((old != null))
                    {
                        old.Works.Remove(this);
                        old.Deleted -= this.OnResetProject;
                    }
                    if ((value != null))
                    {
                        value.Works.Add(this);
                        value.Deleted += this.OnResetProject;
                    }
                    this.OnProjectChanged(e);
                    this.OnPropertyChanged("Project", e, _projectReference);
                }
            }
        }
        
        /// <summary>
        /// The Request property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Works")]
        public virtual IRequest Request
        {
            get
            {
                return this._request;
            }
            set
            {
                if ((this._request != value))
                {
                    IRequest old = this._request;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRequestChanging(e);
                    this.OnPropertyChanging("Request", e, _requestReference);
                    this._request = value;
                    if ((old != null))
                    {
                        old.Works.Remove(this);
                        old.Deleted -= this.OnResetRequest;
                    }
                    if ((value != null))
                    {
                        value.Works.Add(this);
                        value.Deleted += this.OnResetRequest;
                    }
                    this.OnRequestChanged(e);
                    this.OnPropertyChanged("Request", e, _requestReference);
                }
            }
        }
        
        /// <summary>
        /// The WorkBillingInfo property
        /// </summary>
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Works")]
        public virtual IWorkBillingInfo WorkBillingInfo
        {
            get
            {
                return this._workBillingInfo;
            }
            set
            {
                if ((this._workBillingInfo != value))
                {
                    IWorkBillingInfo old = this._workBillingInfo;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnWorkBillingInfoChanging(e);
                    this.OnPropertyChanging("WorkBillingInfo", e, _workBillingInfoReference);
                    this._workBillingInfo = value;
                    if ((old != null))
                    {
                        old.Works.Remove(this);
                        old.Deleted -= this.OnResetWorkBillingInfo;
                    }
                    if ((value != null))
                    {
                        value.Works.Add(this);
                        value.Deleted += this.OnResetWorkBillingInfo;
                    }
                    this.OnWorkBillingInfoChanged(e);
                    this.OnPropertyChanged("WorkBillingInfo", e, _workBillingInfoReference);
                }
            }
        }
        
        /// <summary>
        /// The Customers property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlAttributeAttribute(true)]
        [XmlOppositeAttribute("Works")]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<ICustomer> Customers
        {
            get
            {
                return this._customers;
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new WorkReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Work/Work")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Priority property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PriorityChanging;
        
        /// <summary>
        /// Gets fired when the Priority property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PriorityChanged;
        
        /// <summary>
        /// Gets fired before the RequestDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RequestDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the RequestDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RequestDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the Kind property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanging;
        
        /// <summary>
        /// Gets fired when the Kind property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> KindChanged;
        
        /// <summary>
        /// Gets fired before the BusinessCase property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BusinessCaseChanging;
        
        /// <summary>
        /// Gets fired when the BusinessCase property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BusinessCaseChanged;
        
        /// <summary>
        /// Gets fired before the ErpProjectAccounting property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpProjectAccountingChanging;
        
        /// <summary>
        /// Gets fired when the ErpProjectAccounting property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ErpProjectAccountingChanged;
        
        /// <summary>
        /// Gets fired before the Project property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProjectChanging;
        
        /// <summary>
        /// Gets fired when the Project property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProjectChanged;
        
        /// <summary>
        /// Gets fired before the Request property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RequestChanging;
        
        /// <summary>
        /// Gets fired when the Request property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RequestChanged;
        
        /// <summary>
        /// Gets fired before the WorkBillingInfo property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkBillingInfoChanging;
        
        /// <summary>
        /// Gets fired when the WorkBillingInfo property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> WorkBillingInfoChanged;
        
        private static ITypedElement RetrievePriorityAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Work.ClassInstance)).Resolve("priority")));
        }
        
        /// <summary>
        /// Raises the PriorityChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPriorityChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PriorityChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PriorityChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPriorityChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PriorityChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveRequestDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Work.ClassInstance)).Resolve("requestDateTime")));
        }
        
        /// <summary>
        /// Raises the RequestDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRequestDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RequestDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RequestDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRequestDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RequestDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveKindAttribute()
        {
            return ((ITypedElement)(((ModelElement)(Work.ClassInstance)).Resolve("kind")));
        }
        
        /// <summary>
        /// Raises the KindChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the KindChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnKindChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.KindChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveWorkTasksReference()
        {
            return ((ITypedElement)(((ModelElement)(Work.ClassInstance)).Resolve("WorkTasks")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WorkTasks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkTasksCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("WorkTasks", e, _workTasksReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WorkTasks property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkTasksCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WorkTasks", e, _workTasksReference);
        }
        
        private static ITypedElement RetrieveDesignsReference()
        {
            return ((ITypedElement)(((ModelElement)(Work.ClassInstance)).Resolve("Designs")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Designs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DesignsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Designs", e, _designsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Designs property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void DesignsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Designs", e, _designsReference);
        }
        
        private static ITypedElement RetrieveBusinessCaseReference()
        {
            return ((ITypedElement)(((ModelElement)(Work.ClassInstance)).Resolve("BusinessCase")));
        }
        
        /// <summary>
        /// Raises the BusinessCaseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBusinessCaseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BusinessCaseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BusinessCaseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBusinessCaseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BusinessCaseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BusinessCase property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBusinessCase(object sender, System.EventArgs eventArgs)
        {
            this.BusinessCase = null;
        }
        
        private static ITypedElement RetrieveWorkFlowStepsReference()
        {
            return ((ITypedElement)(((ModelElement)(Work.ClassInstance)).Resolve("WorkFlowSteps")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WorkFlowSteps property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkFlowStepsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("WorkFlowSteps", e, _workFlowStepsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WorkFlowSteps property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkFlowStepsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WorkFlowSteps", e, _workFlowStepsReference);
        }
        
        private static ITypedElement RetrieveWorkCostDetailsReference()
        {
            return ((ITypedElement)(((ModelElement)(Work.ClassInstance)).Resolve("WorkCostDetails")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the WorkCostDetails property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkCostDetailsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("WorkCostDetails", e, _workCostDetailsReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the WorkCostDetails property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void WorkCostDetailsCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("WorkCostDetails", e, _workCostDetailsReference);
        }
        
        private static ITypedElement RetrieveErpProjectAccountingReference()
        {
            return ((ITypedElement)(((ModelElement)(Work.ClassInstance)).Resolve("ErpProjectAccounting")));
        }
        
        /// <summary>
        /// Raises the ErpProjectAccountingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpProjectAccountingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpProjectAccountingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ErpProjectAccountingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnErpProjectAccountingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ErpProjectAccountingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ErpProjectAccounting property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetErpProjectAccounting(object sender, System.EventArgs eventArgs)
        {
            this.ErpProjectAccounting = null;
        }
        
        private static ITypedElement RetrieveProjectReference()
        {
            return ((ITypedElement)(((ModelElement)(Work.ClassInstance)).Resolve("Project")));
        }
        
        /// <summary>
        /// Raises the ProjectChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProjectChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProjectChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ProjectChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProjectChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProjectChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Project property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetProject(object sender, System.EventArgs eventArgs)
        {
            this.Project = null;
        }
        
        private static ITypedElement RetrieveRequestReference()
        {
            return ((ITypedElement)(((ModelElement)(Work.ClassInstance)).Resolve("Request")));
        }
        
        /// <summary>
        /// Raises the RequestChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRequestChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RequestChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RequestChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRequestChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RequestChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Request property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRequest(object sender, System.EventArgs eventArgs)
        {
            this.Request = null;
        }
        
        private static ITypedElement RetrieveWorkBillingInfoReference()
        {
            return ((ITypedElement)(((ModelElement)(Work.ClassInstance)).Resolve("WorkBillingInfo")));
        }
        
        /// <summary>
        /// Raises the WorkBillingInfoChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkBillingInfoChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkBillingInfoChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the WorkBillingInfoChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnWorkBillingInfoChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.WorkBillingInfoChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the WorkBillingInfo property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetWorkBillingInfo(object sender, System.EventArgs eventArgs)
        {
            this.WorkBillingInfo = null;
        }
        
        private static ITypedElement RetrieveCustomersReference()
        {
            return ((ITypedElement)(((ModelElement)(Work.ClassInstance)).Resolve("Customers")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Customers property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CustomersCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Customers", e, _customersReference);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Customers property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void CustomersCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Customers", e, _customersReference);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "PRIORITY"))
            {
                return this.Priority;
            }
            if ((attribute == "REQUESTDATETIME"))
            {
                return this.RequestDateTime;
            }
            if ((attribute == "KIND"))
            {
                return this.Kind;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "WORKTASKS"))
            {
                return this._workTasks;
            }
            if ((feature == "DESIGNS"))
            {
                return this._designs;
            }
            if ((feature == "WORKFLOWSTEPS"))
            {
                return this._workFlowSteps;
            }
            if ((feature == "WORKCOSTDETAILS"))
            {
                return this._workCostDetails;
            }
            if ((feature == "CUSTOMERS"))
            {
                return this._customers;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "BUSINESSCASE"))
            {
                this.BusinessCase = ((IBusinessCase)(value));
                return;
            }
            if ((feature == "ERPPROJECTACCOUNTING"))
            {
                this.ErpProjectAccounting = ((IErpProjectAccounting)(value));
                return;
            }
            if ((feature == "PROJECT"))
            {
                this.Project = ((IProject)(value));
                return;
            }
            if ((feature == "REQUEST"))
            {
                this.Request = ((IRequest)(value));
                return;
            }
            if ((feature == "WORKBILLINGINFO"))
            {
                this.WorkBillingInfo = ((IWorkBillingInfo)(value));
                return;
            }
            if ((feature == "PRIORITY"))
            {
                this.Priority = ((string)(value));
                return;
            }
            if ((feature == "REQUESTDATETIME"))
            {
                this.RequestDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "KIND"))
            {
                this.Kind = ((WorkKind)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "BusinessCase"))
            {
                return new BusinessCaseProxy(this);
            }
            if ((attribute == "ErpProjectAccounting"))
            {
                return new ErpProjectAccountingProxy(this);
            }
            if ((attribute == "Project"))
            {
                return new ProjectProxy(this);
            }
            if ((attribute == "Request"))
            {
                return new RequestProxy(this);
            }
            if ((attribute == "WorkBillingInfo"))
            {
                return new WorkBillingInfoProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "BusinessCase"))
            {
                return new BusinessCaseProxy(this);
            }
            if ((reference == "ErpProjectAccounting"))
            {
                return new ErpProjectAccountingProxy(this);
            }
            if ((reference == "Project"))
            {
                return new ProjectProxy(this);
            }
            if ((reference == "Request"))
            {
                return new RequestProxy(this);
            }
            if ((reference == "WorkBillingInfo"))
            {
                return new WorkBillingInfoProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/Work/Work")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Work class
        /// </summary>
        public class WorkReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Work _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public WorkReferencedElementsCollection(Work parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.WorkTasks.Count);
                    count = (count + this._parent.Designs.Count);
                    if ((this._parent.BusinessCase != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.WorkFlowSteps.Count);
                    count = (count + this._parent.WorkCostDetails.Count);
                    if ((this._parent.ErpProjectAccounting != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Project != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Request != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.WorkBillingInfo != null))
                    {
                        count = (count + 1);
                    }
                    count = (count + this._parent.Customers.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.WorkTasks.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.Designs.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.BusinessCaseChanged += this.PropagateValueChanges;
                this._parent.WorkFlowSteps.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.WorkCostDetails.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.ErpProjectAccountingChanged += this.PropagateValueChanges;
                this._parent.ProjectChanged += this.PropagateValueChanges;
                this._parent.RequestChanged += this.PropagateValueChanges;
                this._parent.WorkBillingInfoChanged += this.PropagateValueChanges;
                this._parent.Customers.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.WorkTasks.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.Designs.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.BusinessCaseChanged -= this.PropagateValueChanges;
                this._parent.WorkFlowSteps.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.WorkCostDetails.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.ErpProjectAccountingChanged -= this.PropagateValueChanges;
                this._parent.ProjectChanged -= this.PropagateValueChanges;
                this._parent.RequestChanged -= this.PropagateValueChanges;
                this._parent.WorkBillingInfoChanged -= this.PropagateValueChanges;
                this._parent.Customers.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IWorkTask workTasksCasted = item.As<IWorkTask>();
                if ((workTasksCasted != null))
                {
                    this._parent.WorkTasks.Add(workTasksCasted);
                }
                IDesign designsCasted = item.As<IDesign>();
                if ((designsCasted != null))
                {
                    this._parent.Designs.Add(designsCasted);
                }
                if ((this._parent.BusinessCase == null))
                {
                    IBusinessCase businessCaseCasted = item.As<IBusinessCase>();
                    if ((businessCaseCasted != null))
                    {
                        this._parent.BusinessCase = businessCaseCasted;
                        return;
                    }
                }
                IWorkFlowStep workFlowStepsCasted = item.As<IWorkFlowStep>();
                if ((workFlowStepsCasted != null))
                {
                    this._parent.WorkFlowSteps.Add(workFlowStepsCasted);
                }
                IWorkCostDetail workCostDetailsCasted = item.As<IWorkCostDetail>();
                if ((workCostDetailsCasted != null))
                {
                    this._parent.WorkCostDetails.Add(workCostDetailsCasted);
                }
                if ((this._parent.ErpProjectAccounting == null))
                {
                    IErpProjectAccounting erpProjectAccountingCasted = item.As<IErpProjectAccounting>();
                    if ((erpProjectAccountingCasted != null))
                    {
                        this._parent.ErpProjectAccounting = erpProjectAccountingCasted;
                        return;
                    }
                }
                if ((this._parent.Project == null))
                {
                    IProject projectCasted = item.As<IProject>();
                    if ((projectCasted != null))
                    {
                        this._parent.Project = projectCasted;
                        return;
                    }
                }
                if ((this._parent.Request == null))
                {
                    IRequest requestCasted = item.As<IRequest>();
                    if ((requestCasted != null))
                    {
                        this._parent.Request = requestCasted;
                        return;
                    }
                }
                if ((this._parent.WorkBillingInfo == null))
                {
                    IWorkBillingInfo workBillingInfoCasted = item.As<IWorkBillingInfo>();
                    if ((workBillingInfoCasted != null))
                    {
                        this._parent.WorkBillingInfo = workBillingInfoCasted;
                        return;
                    }
                }
                ICustomer customersCasted = item.As<ICustomer>();
                if ((customersCasted != null))
                {
                    this._parent.Customers.Add(customersCasted);
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.WorkTasks.Clear();
                this._parent.Designs.Clear();
                this._parent.BusinessCase = null;
                this._parent.WorkFlowSteps.Clear();
                this._parent.WorkCostDetails.Clear();
                this._parent.ErpProjectAccounting = null;
                this._parent.Project = null;
                this._parent.Request = null;
                this._parent.WorkBillingInfo = null;
                this._parent.Customers.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.WorkTasks.Contains(item))
                {
                    return true;
                }
                if (this._parent.Designs.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.BusinessCase))
                {
                    return true;
                }
                if (this._parent.WorkFlowSteps.Contains(item))
                {
                    return true;
                }
                if (this._parent.WorkCostDetails.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.ErpProjectAccounting))
                {
                    return true;
                }
                if ((item == this._parent.Project))
                {
                    return true;
                }
                if ((item == this._parent.Request))
                {
                    return true;
                }
                if ((item == this._parent.WorkBillingInfo))
                {
                    return true;
                }
                if (this._parent.Customers.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> workTasksEnumerator = this._parent.WorkTasks.GetEnumerator();
                try
                {
                    for (
                    ; workTasksEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = workTasksEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    workTasksEnumerator.Dispose();
                }
                IEnumerator<IModelElement> designsEnumerator = this._parent.Designs.GetEnumerator();
                try
                {
                    for (
                    ; designsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = designsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    designsEnumerator.Dispose();
                }
                if ((this._parent.BusinessCase != null))
                {
                    array[arrayIndex] = this._parent.BusinessCase;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> workFlowStepsEnumerator = this._parent.WorkFlowSteps.GetEnumerator();
                try
                {
                    for (
                    ; workFlowStepsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = workFlowStepsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    workFlowStepsEnumerator.Dispose();
                }
                IEnumerator<IModelElement> workCostDetailsEnumerator = this._parent.WorkCostDetails.GetEnumerator();
                try
                {
                    for (
                    ; workCostDetailsEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = workCostDetailsEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    workCostDetailsEnumerator.Dispose();
                }
                if ((this._parent.ErpProjectAccounting != null))
                {
                    array[arrayIndex] = this._parent.ErpProjectAccounting;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Project != null))
                {
                    array[arrayIndex] = this._parent.Project;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Request != null))
                {
                    array[arrayIndex] = this._parent.Request;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.WorkBillingInfo != null))
                {
                    array[arrayIndex] = this._parent.WorkBillingInfo;
                    arrayIndex = (arrayIndex + 1);
                }
                IEnumerator<IModelElement> customersEnumerator = this._parent.Customers.GetEnumerator();
                try
                {
                    for (
                    ; customersEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = customersEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    customersEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IWorkTask workTaskItem = item.As<IWorkTask>();
                if (((workTaskItem != null) 
                            && this._parent.WorkTasks.Remove(workTaskItem)))
                {
                    return true;
                }
                IDesign designItem = item.As<IDesign>();
                if (((designItem != null) 
                            && this._parent.Designs.Remove(designItem)))
                {
                    return true;
                }
                if ((this._parent.BusinessCase == item))
                {
                    this._parent.BusinessCase = null;
                    return true;
                }
                IWorkFlowStep workFlowStepItem = item.As<IWorkFlowStep>();
                if (((workFlowStepItem != null) 
                            && this._parent.WorkFlowSteps.Remove(workFlowStepItem)))
                {
                    return true;
                }
                IWorkCostDetail workCostDetailItem = item.As<IWorkCostDetail>();
                if (((workCostDetailItem != null) 
                            && this._parent.WorkCostDetails.Remove(workCostDetailItem)))
                {
                    return true;
                }
                if ((this._parent.ErpProjectAccounting == item))
                {
                    this._parent.ErpProjectAccounting = null;
                    return true;
                }
                if ((this._parent.Project == item))
                {
                    this._parent.Project = null;
                    return true;
                }
                if ((this._parent.Request == item))
                {
                    this._parent.Request = null;
                    return true;
                }
                if ((this._parent.WorkBillingInfo == item))
                {
                    this._parent.WorkBillingInfo = null;
                    return true;
                }
                ICustomer customerItem = item.As<ICustomer>();
                if (((customerItem != null) 
                            && this._parent.Customers.Remove(customerItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.WorkTasks).Concat(this._parent.Designs).Concat(this._parent.BusinessCase).Concat(this._parent.WorkFlowSteps).Concat(this._parent.WorkCostDetails).Concat(this._parent.ErpProjectAccounting).Concat(this._parent.Project).Concat(this._parent.Request).Concat(this._parent.WorkBillingInfo).Concat(this._parent.Customers).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the priority property
        /// </summary>
        private sealed class PriorityProxy : ModelPropertyChange<IWork, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PriorityProxy(IWork modelElement) : 
                    base(modelElement, "priority")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Priority;
                }
                set
                {
                    this.ModelElement.Priority = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the requestDateTime property
        /// </summary>
        private sealed class RequestDateTimeProxy : ModelPropertyChange<IWork, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RequestDateTimeProxy(IWork modelElement) : 
                    base(modelElement, "requestDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.RequestDateTime;
                }
                set
                {
                    this.ModelElement.RequestDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the kind property
        /// </summary>
        private sealed class KindProxy : ModelPropertyChange<IWork, Nullable<WorkKind>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public KindProxy(IWork modelElement) : 
                    base(modelElement, "kind")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<WorkKind> Value
            {
                get
                {
                    return this.ModelElement.Kind;
                }
                set
                {
                    this.ModelElement.Kind = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BusinessCase property
        /// </summary>
        private sealed class BusinessCaseProxy : ModelPropertyChange<IWork, IBusinessCase>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BusinessCaseProxy(IWork modelElement) : 
                    base(modelElement, "BusinessCase")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBusinessCase Value
            {
                get
                {
                    return this.ModelElement.BusinessCase;
                }
                set
                {
                    this.ModelElement.BusinessCase = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ErpProjectAccounting property
        /// </summary>
        private sealed class ErpProjectAccountingProxy : ModelPropertyChange<IWork, IErpProjectAccounting>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ErpProjectAccountingProxy(IWork modelElement) : 
                    base(modelElement, "ErpProjectAccounting")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IErpProjectAccounting Value
            {
                get
                {
                    return this.ModelElement.ErpProjectAccounting;
                }
                set
                {
                    this.ModelElement.ErpProjectAccounting = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Project property
        /// </summary>
        private sealed class ProjectProxy : ModelPropertyChange<IWork, IProject>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProjectProxy(IWork modelElement) : 
                    base(modelElement, "Project")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IProject Value
            {
                get
                {
                    return this.ModelElement.Project;
                }
                set
                {
                    this.ModelElement.Project = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Request property
        /// </summary>
        private sealed class RequestProxy : ModelPropertyChange<IWork, IRequest>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RequestProxy(IWork modelElement) : 
                    base(modelElement, "Request")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRequest Value
            {
                get
                {
                    return this.ModelElement.Request;
                }
                set
                {
                    this.ModelElement.Request = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the WorkBillingInfo property
        /// </summary>
        private sealed class WorkBillingInfoProxy : ModelPropertyChange<IWork, IWorkBillingInfo>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public WorkBillingInfoProxy(IWork modelElement) : 
                    base(modelElement, "WorkBillingInfo")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IWorkBillingInfo Value
            {
                get
                {
                    return this.ModelElement.WorkBillingInfo;
                }
                set
                {
                    this.ModelElement.WorkBillingInfo = value;
                }
            }
        }
    }
}

