using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.LoadControl
{
    
    
    /// <summary>
    /// The public interface for ConnectDisconnectFunction
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(ConnectDisconnectFunction))]
    [XmlDefaultImplementationTypeAttribute(typeof(ConnectDisconnectFunction))]
    public interface IConnectDisconnectFunction : IModelElement, IDeviceFunction
    {
        
        /// <summary>
        /// The isDelayedDiscon property
        /// </summary>
        bool IsDelayedDiscon
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isLocalAutoReconOp property
        /// </summary>
        bool IsLocalAutoReconOp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isLocalAutoDisconOp property
        /// </summary>
        bool IsLocalAutoDisconOp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isConnected property
        /// </summary>
        bool IsConnected
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isRemoteAutoDisconOp property
        /// </summary>
        bool IsRemoteAutoDisconOp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The eventCount property
        /// </summary>
        int EventCount
        {
            get;
            set;
        }
        
        /// <summary>
        /// The isRemoteAutoReconOp property
        /// </summary>
        bool IsRemoteAutoReconOp
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Switches property
        /// </summary>
        IOrderedSetExpression<ISwitch> Switches
        {
            get;
        }
        
        /// <summary>
        /// The rcdInfo property
        /// </summary>
        IRemoteConnectDisconnectInfo RcdInfo
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the IsDelayedDiscon property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsDelayedDisconChanging;
        
        /// <summary>
        /// Gets fired when the IsDelayedDiscon property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsDelayedDisconChanged;
        
        /// <summary>
        /// Gets fired before the IsLocalAutoReconOp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsLocalAutoReconOpChanging;
        
        /// <summary>
        /// Gets fired when the IsLocalAutoReconOp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsLocalAutoReconOpChanged;
        
        /// <summary>
        /// Gets fired before the IsLocalAutoDisconOp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsLocalAutoDisconOpChanging;
        
        /// <summary>
        /// Gets fired when the IsLocalAutoDisconOp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsLocalAutoDisconOpChanged;
        
        /// <summary>
        /// Gets fired before the IsConnected property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsConnectedChanging;
        
        /// <summary>
        /// Gets fired when the IsConnected property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsConnectedChanged;
        
        /// <summary>
        /// Gets fired before the IsRemoteAutoDisconOp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsRemoteAutoDisconOpChanging;
        
        /// <summary>
        /// Gets fired when the IsRemoteAutoDisconOp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsRemoteAutoDisconOpChanged;
        
        /// <summary>
        /// Gets fired before the EventCount property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EventCountChanging;
        
        /// <summary>
        /// Gets fired when the EventCount property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> EventCountChanged;
        
        /// <summary>
        /// Gets fired before the IsRemoteAutoReconOp property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsRemoteAutoReconOpChanging;
        
        /// <summary>
        /// Gets fired when the IsRemoteAutoReconOp property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> IsRemoteAutoReconOpChanged;
        
        /// <summary>
        /// Gets fired before the RcdInfo property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RcdInfoChanging;
        
        /// <summary>
        /// Gets fired when the RcdInfo property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> RcdInfoChanged;
    }
}

