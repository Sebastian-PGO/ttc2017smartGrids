using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.CIM;
using TTC2017.SmartGrids.CIM.IEC61968.Metering;
using TTC2017.SmartGrids.CIM.IEC61970.Wires;

namespace TTC2017.SmartGrids.CIM.IEC61968.LoadControl
{
    
    
    /// <summary>
    /// The default implementation of the RemoteConnectDisconnectInfo class
    /// </summary>
    [XmlNamespaceAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#LoadControl")]
    [XmlNamespacePrefixAttribute("cimLoadControl")]
    [ModelRepresentationClassAttribute("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/LoadControl/RemoteConnectDisc" +
        "onnectInfo")]
    [DebuggerDisplayAttribute("RemoteConnectDisconnectInfo {UUID}")]
    public partial class RemoteConnectDisconnectInfo : Element, IRemoteConnectDisconnectInfo, IModelElement
    {
        
        /// <summary>
        /// The backing field for the PowerLimit property
        /// </summary>
        private float _powerLimit;
        
        private static Lazy<ITypedElement> _powerLimitAttribute = new Lazy<ITypedElement>(RetrievePowerLimitAttribute);
        
        /// <summary>
        /// The backing field for the CustomerVoltageLimit property
        /// </summary>
        private float _customerVoltageLimit;
        
        private static Lazy<ITypedElement> _customerVoltageLimitAttribute = new Lazy<ITypedElement>(RetrieveCustomerVoltageLimitAttribute);
        
        /// <summary>
        /// The backing field for the EnergyLimit property
        /// </summary>
        private float _energyLimit;
        
        private static Lazy<ITypedElement> _energyLimitAttribute = new Lazy<ITypedElement>(RetrieveEnergyLimitAttribute);
        
        /// <summary>
        /// The backing field for the IsEnergyLimiting property
        /// </summary>
        private bool _isEnergyLimiting;
        
        private static Lazy<ITypedElement> _isEnergyLimitingAttribute = new Lazy<ITypedElement>(RetrieveIsEnergyLimitingAttribute);
        
        /// <summary>
        /// The backing field for the EnergyUsageWarning property
        /// </summary>
        private float _energyUsageWarning;
        
        private static Lazy<ITypedElement> _energyUsageWarningAttribute = new Lazy<ITypedElement>(RetrieveEnergyUsageWarningAttribute);
        
        /// <summary>
        /// The backing field for the NeedsVoltageLimitCheck property
        /// </summary>
        private bool _needsVoltageLimitCheck;
        
        private static Lazy<ITypedElement> _needsVoltageLimitCheckAttribute = new Lazy<ITypedElement>(RetrieveNeedsVoltageLimitCheckAttribute);
        
        /// <summary>
        /// The backing field for the EnergyUsageStartDateTime property
        /// </summary>
        private DateTime _energyUsageStartDateTime;
        
        private static Lazy<ITypedElement> _energyUsageStartDateTimeAttribute = new Lazy<ITypedElement>(RetrieveEnergyUsageStartDateTimeAttribute);
        
        /// <summary>
        /// The backing field for the UsePushbutton property
        /// </summary>
        private bool _usePushbutton;
        
        private static Lazy<ITypedElement> _usePushbuttonAttribute = new Lazy<ITypedElement>(RetrieveUsePushbuttonAttribute);
        
        /// <summary>
        /// The backing field for the IsArmDisconnect property
        /// </summary>
        private bool _isArmDisconnect;
        
        private static Lazy<ITypedElement> _isArmDisconnectAttribute = new Lazy<ITypedElement>(RetrieveIsArmDisconnectAttribute);
        
        /// <summary>
        /// The backing field for the IsArmConnect property
        /// </summary>
        private bool _isArmConnect;
        
        private static Lazy<ITypedElement> _isArmConnectAttribute = new Lazy<ITypedElement>(RetrieveIsArmConnectAttribute);
        
        /// <summary>
        /// The backing field for the NeedsPowerLimitCheck property
        /// </summary>
        private bool _needsPowerLimitCheck;
        
        private static Lazy<ITypedElement> _needsPowerLimitCheckAttribute = new Lazy<ITypedElement>(RetrieveNeedsPowerLimitCheckAttribute);
        
        /// <summary>
        /// The backing field for the ArmedTimeout property
        /// </summary>
        private float _armedTimeout;
        
        private static Lazy<ITypedElement> _armedTimeoutAttribute = new Lazy<ITypedElement>(RetrieveArmedTimeoutAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The powerLimit property
        /// </summary>
        [XmlElementNameAttribute("powerLimit")]
        [XmlAttributeAttribute(true)]
        public virtual float PowerLimit
        {
            get
            {
                return this._powerLimit;
            }
            set
            {
                if ((this._powerLimit != value))
                {
                    float old = this._powerLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPowerLimitChanging(e);
                    this.OnPropertyChanging("PowerLimit", e, _powerLimitAttribute);
                    this._powerLimit = value;
                    this.OnPowerLimitChanged(e);
                    this.OnPropertyChanged("PowerLimit", e, _powerLimitAttribute);
                }
            }
        }
        
        /// <summary>
        /// The customerVoltageLimit property
        /// </summary>
        [XmlElementNameAttribute("customerVoltageLimit")]
        [XmlAttributeAttribute(true)]
        public virtual float CustomerVoltageLimit
        {
            get
            {
                return this._customerVoltageLimit;
            }
            set
            {
                if ((this._customerVoltageLimit != value))
                {
                    float old = this._customerVoltageLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCustomerVoltageLimitChanging(e);
                    this.OnPropertyChanging("CustomerVoltageLimit", e, _customerVoltageLimitAttribute);
                    this._customerVoltageLimit = value;
                    this.OnCustomerVoltageLimitChanged(e);
                    this.OnPropertyChanged("CustomerVoltageLimit", e, _customerVoltageLimitAttribute);
                }
            }
        }
        
        /// <summary>
        /// The energyLimit property
        /// </summary>
        [XmlElementNameAttribute("energyLimit")]
        [XmlAttributeAttribute(true)]
        public virtual float EnergyLimit
        {
            get
            {
                return this._energyLimit;
            }
            set
            {
                if ((this._energyLimit != value))
                {
                    float old = this._energyLimit;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEnergyLimitChanging(e);
                    this.OnPropertyChanging("EnergyLimit", e, _energyLimitAttribute);
                    this._energyLimit = value;
                    this.OnEnergyLimitChanged(e);
                    this.OnPropertyChanged("EnergyLimit", e, _energyLimitAttribute);
                }
            }
        }
        
        /// <summary>
        /// The isEnergyLimiting property
        /// </summary>
        [XmlElementNameAttribute("isEnergyLimiting")]
        [XmlAttributeAttribute(true)]
        public virtual bool IsEnergyLimiting
        {
            get
            {
                return this._isEnergyLimiting;
            }
            set
            {
                if ((this._isEnergyLimiting != value))
                {
                    bool old = this._isEnergyLimiting;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsEnergyLimitingChanging(e);
                    this.OnPropertyChanging("IsEnergyLimiting", e, _isEnergyLimitingAttribute);
                    this._isEnergyLimiting = value;
                    this.OnIsEnergyLimitingChanged(e);
                    this.OnPropertyChanged("IsEnergyLimiting", e, _isEnergyLimitingAttribute);
                }
            }
        }
        
        /// <summary>
        /// The energyUsageWarning property
        /// </summary>
        [XmlElementNameAttribute("energyUsageWarning")]
        [XmlAttributeAttribute(true)]
        public virtual float EnergyUsageWarning
        {
            get
            {
                return this._energyUsageWarning;
            }
            set
            {
                if ((this._energyUsageWarning != value))
                {
                    float old = this._energyUsageWarning;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEnergyUsageWarningChanging(e);
                    this.OnPropertyChanging("EnergyUsageWarning", e, _energyUsageWarningAttribute);
                    this._energyUsageWarning = value;
                    this.OnEnergyUsageWarningChanged(e);
                    this.OnPropertyChanged("EnergyUsageWarning", e, _energyUsageWarningAttribute);
                }
            }
        }
        
        /// <summary>
        /// The needsVoltageLimitCheck property
        /// </summary>
        [XmlElementNameAttribute("needsVoltageLimitCheck")]
        [XmlAttributeAttribute(true)]
        public virtual bool NeedsVoltageLimitCheck
        {
            get
            {
                return this._needsVoltageLimitCheck;
            }
            set
            {
                if ((this._needsVoltageLimitCheck != value))
                {
                    bool old = this._needsVoltageLimitCheck;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNeedsVoltageLimitCheckChanging(e);
                    this.OnPropertyChanging("NeedsVoltageLimitCheck", e, _needsVoltageLimitCheckAttribute);
                    this._needsVoltageLimitCheck = value;
                    this.OnNeedsVoltageLimitCheckChanged(e);
                    this.OnPropertyChanged("NeedsVoltageLimitCheck", e, _needsVoltageLimitCheckAttribute);
                }
            }
        }
        
        /// <summary>
        /// The energyUsageStartDateTime property
        /// </summary>
        [XmlElementNameAttribute("energyUsageStartDateTime")]
        [XmlAttributeAttribute(true)]
        public virtual DateTime EnergyUsageStartDateTime
        {
            get
            {
                return this._energyUsageStartDateTime;
            }
            set
            {
                if ((this._energyUsageStartDateTime != value))
                {
                    DateTime old = this._energyUsageStartDateTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnEnergyUsageStartDateTimeChanging(e);
                    this.OnPropertyChanging("EnergyUsageStartDateTime", e, _energyUsageStartDateTimeAttribute);
                    this._energyUsageStartDateTime = value;
                    this.OnEnergyUsageStartDateTimeChanged(e);
                    this.OnPropertyChanged("EnergyUsageStartDateTime", e, _energyUsageStartDateTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The usePushbutton property
        /// </summary>
        [XmlElementNameAttribute("usePushbutton")]
        [XmlAttributeAttribute(true)]
        public virtual bool UsePushbutton
        {
            get
            {
                return this._usePushbutton;
            }
            set
            {
                if ((this._usePushbutton != value))
                {
                    bool old = this._usePushbutton;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnUsePushbuttonChanging(e);
                    this.OnPropertyChanging("UsePushbutton", e, _usePushbuttonAttribute);
                    this._usePushbutton = value;
                    this.OnUsePushbuttonChanged(e);
                    this.OnPropertyChanged("UsePushbutton", e, _usePushbuttonAttribute);
                }
            }
        }
        
        /// <summary>
        /// The isArmDisconnect property
        /// </summary>
        [XmlElementNameAttribute("isArmDisconnect")]
        [XmlAttributeAttribute(true)]
        public virtual bool IsArmDisconnect
        {
            get
            {
                return this._isArmDisconnect;
            }
            set
            {
                if ((this._isArmDisconnect != value))
                {
                    bool old = this._isArmDisconnect;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsArmDisconnectChanging(e);
                    this.OnPropertyChanging("IsArmDisconnect", e, _isArmDisconnectAttribute);
                    this._isArmDisconnect = value;
                    this.OnIsArmDisconnectChanged(e);
                    this.OnPropertyChanged("IsArmDisconnect", e, _isArmDisconnectAttribute);
                }
            }
        }
        
        /// <summary>
        /// The isArmConnect property
        /// </summary>
        [XmlElementNameAttribute("isArmConnect")]
        [XmlAttributeAttribute(true)]
        public virtual bool IsArmConnect
        {
            get
            {
                return this._isArmConnect;
            }
            set
            {
                if ((this._isArmConnect != value))
                {
                    bool old = this._isArmConnect;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIsArmConnectChanging(e);
                    this.OnPropertyChanging("IsArmConnect", e, _isArmConnectAttribute);
                    this._isArmConnect = value;
                    this.OnIsArmConnectChanged(e);
                    this.OnPropertyChanged("IsArmConnect", e, _isArmConnectAttribute);
                }
            }
        }
        
        /// <summary>
        /// The needsPowerLimitCheck property
        /// </summary>
        [XmlElementNameAttribute("needsPowerLimitCheck")]
        [XmlAttributeAttribute(true)]
        public virtual bool NeedsPowerLimitCheck
        {
            get
            {
                return this._needsPowerLimitCheck;
            }
            set
            {
                if ((this._needsPowerLimitCheck != value))
                {
                    bool old = this._needsPowerLimitCheck;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNeedsPowerLimitCheckChanging(e);
                    this.OnPropertyChanging("NeedsPowerLimitCheck", e, _needsPowerLimitCheckAttribute);
                    this._needsPowerLimitCheck = value;
                    this.OnNeedsPowerLimitCheckChanged(e);
                    this.OnPropertyChanged("NeedsPowerLimitCheck", e, _needsPowerLimitCheckAttribute);
                }
            }
        }
        
        /// <summary>
        /// The armedTimeout property
        /// </summary>
        [XmlElementNameAttribute("armedTimeout")]
        [XmlAttributeAttribute(true)]
        public virtual float ArmedTimeout
        {
            get
            {
                return this._armedTimeout;
            }
            set
            {
                if ((this._armedTimeout != value))
                {
                    float old = this._armedTimeout;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnArmedTimeoutChanging(e);
                    this.OnPropertyChanging("ArmedTimeout", e, _armedTimeoutAttribute);
                    this._armedTimeout = value;
                    this.OnArmedTimeoutChanged(e);
                    this.OnPropertyChanged("ArmedTimeout", e, _armedTimeoutAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/LoadControl/RemoteConnectDisc" +
                            "onnectInfo")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the PowerLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerLimitChanging;
        
        /// <summary>
        /// Gets fired when the PowerLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PowerLimitChanged;
        
        /// <summary>
        /// Gets fired before the CustomerVoltageLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerVoltageLimitChanging;
        
        /// <summary>
        /// Gets fired when the CustomerVoltageLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CustomerVoltageLimitChanged;
        
        /// <summary>
        /// Gets fired before the EnergyLimit property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyLimitChanging;
        
        /// <summary>
        /// Gets fired when the EnergyLimit property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyLimitChanged;
        
        /// <summary>
        /// Gets fired before the IsEnergyLimiting property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsEnergyLimitingChanging;
        
        /// <summary>
        /// Gets fired when the IsEnergyLimiting property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsEnergyLimitingChanged;
        
        /// <summary>
        /// Gets fired before the EnergyUsageWarning property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyUsageWarningChanging;
        
        /// <summary>
        /// Gets fired when the EnergyUsageWarning property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyUsageWarningChanged;
        
        /// <summary>
        /// Gets fired before the NeedsVoltageLimitCheck property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeedsVoltageLimitCheckChanging;
        
        /// <summary>
        /// Gets fired when the NeedsVoltageLimitCheck property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeedsVoltageLimitCheckChanged;
        
        /// <summary>
        /// Gets fired before the EnergyUsageStartDateTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyUsageStartDateTimeChanging;
        
        /// <summary>
        /// Gets fired when the EnergyUsageStartDateTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> EnergyUsageStartDateTimeChanged;
        
        /// <summary>
        /// Gets fired before the UsePushbutton property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UsePushbuttonChanging;
        
        /// <summary>
        /// Gets fired when the UsePushbutton property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> UsePushbuttonChanged;
        
        /// <summary>
        /// Gets fired before the IsArmDisconnect property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsArmDisconnectChanging;
        
        /// <summary>
        /// Gets fired when the IsArmDisconnect property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsArmDisconnectChanged;
        
        /// <summary>
        /// Gets fired before the IsArmConnect property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsArmConnectChanging;
        
        /// <summary>
        /// Gets fired when the IsArmConnect property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IsArmConnectChanged;
        
        /// <summary>
        /// Gets fired before the NeedsPowerLimitCheck property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeedsPowerLimitCheckChanging;
        
        /// <summary>
        /// Gets fired when the NeedsPowerLimitCheck property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NeedsPowerLimitCheckChanged;
        
        /// <summary>
        /// Gets fired before the ArmedTimeout property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ArmedTimeoutChanging;
        
        /// <summary>
        /// Gets fired when the ArmedTimeout property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ArmedTimeoutChanged;
        
        private static ITypedElement RetrievePowerLimitAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RemoteConnectDisconnectInfo.ClassInstance)).Resolve("powerLimit")));
        }
        
        /// <summary>
        /// Raises the PowerLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PowerLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPowerLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PowerLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveCustomerVoltageLimitAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RemoteConnectDisconnectInfo.ClassInstance)).Resolve("customerVoltageLimit")));
        }
        
        /// <summary>
        /// Raises the CustomerVoltageLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerVoltageLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerVoltageLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CustomerVoltageLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCustomerVoltageLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CustomerVoltageLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEnergyLimitAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RemoteConnectDisconnectInfo.ClassInstance)).Resolve("energyLimit")));
        }
        
        /// <summary>
        /// Raises the EnergyLimitChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyLimitChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyLimitChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnergyLimitChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyLimitChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyLimitChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIsEnergyLimitingAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RemoteConnectDisconnectInfo.ClassInstance)).Resolve("isEnergyLimiting")));
        }
        
        /// <summary>
        /// Raises the IsEnergyLimitingChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsEnergyLimitingChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsEnergyLimitingChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsEnergyLimitingChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsEnergyLimitingChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsEnergyLimitingChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEnergyUsageWarningAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RemoteConnectDisconnectInfo.ClassInstance)).Resolve("energyUsageWarning")));
        }
        
        /// <summary>
        /// Raises the EnergyUsageWarningChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyUsageWarningChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyUsageWarningChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnergyUsageWarningChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyUsageWarningChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyUsageWarningChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNeedsVoltageLimitCheckAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RemoteConnectDisconnectInfo.ClassInstance)).Resolve("needsVoltageLimitCheck")));
        }
        
        /// <summary>
        /// Raises the NeedsVoltageLimitCheckChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeedsVoltageLimitCheckChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeedsVoltageLimitCheckChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NeedsVoltageLimitCheckChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeedsVoltageLimitCheckChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeedsVoltageLimitCheckChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveEnergyUsageStartDateTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RemoteConnectDisconnectInfo.ClassInstance)).Resolve("energyUsageStartDateTime")));
        }
        
        /// <summary>
        /// Raises the EnergyUsageStartDateTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyUsageStartDateTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyUsageStartDateTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the EnergyUsageStartDateTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnEnergyUsageStartDateTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.EnergyUsageStartDateTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveUsePushbuttonAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RemoteConnectDisconnectInfo.ClassInstance)).Resolve("usePushbutton")));
        }
        
        /// <summary>
        /// Raises the UsePushbuttonChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUsePushbuttonChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UsePushbuttonChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the UsePushbuttonChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnUsePushbuttonChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.UsePushbuttonChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIsArmDisconnectAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RemoteConnectDisconnectInfo.ClassInstance)).Resolve("isArmDisconnect")));
        }
        
        /// <summary>
        /// Raises the IsArmDisconnectChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsArmDisconnectChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsArmDisconnectChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsArmDisconnectChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsArmDisconnectChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsArmDisconnectChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveIsArmConnectAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RemoteConnectDisconnectInfo.ClassInstance)).Resolve("isArmConnect")));
        }
        
        /// <summary>
        /// Raises the IsArmConnectChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsArmConnectChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsArmConnectChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IsArmConnectChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIsArmConnectChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IsArmConnectChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveNeedsPowerLimitCheckAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RemoteConnectDisconnectInfo.ClassInstance)).Resolve("needsPowerLimitCheck")));
        }
        
        /// <summary>
        /// Raises the NeedsPowerLimitCheckChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeedsPowerLimitCheckChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeedsPowerLimitCheckChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NeedsPowerLimitCheckChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNeedsPowerLimitCheckChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NeedsPowerLimitCheckChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveArmedTimeoutAttribute()
        {
            return ((ITypedElement)(((ModelElement)(RemoteConnectDisconnectInfo.ClassInstance)).Resolve("armedTimeout")));
        }
        
        /// <summary>
        /// Raises the ArmedTimeoutChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnArmedTimeoutChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ArmedTimeoutChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ArmedTimeoutChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnArmedTimeoutChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ArmedTimeoutChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "POWERLIMIT"))
            {
                return this.PowerLimit;
            }
            if ((attribute == "CUSTOMERVOLTAGELIMIT"))
            {
                return this.CustomerVoltageLimit;
            }
            if ((attribute == "ENERGYLIMIT"))
            {
                return this.EnergyLimit;
            }
            if ((attribute == "ISENERGYLIMITING"))
            {
                return this.IsEnergyLimiting;
            }
            if ((attribute == "ENERGYUSAGEWARNING"))
            {
                return this.EnergyUsageWarning;
            }
            if ((attribute == "NEEDSVOLTAGELIMITCHECK"))
            {
                return this.NeedsVoltageLimitCheck;
            }
            if ((attribute == "ENERGYUSAGESTARTDATETIME"))
            {
                return this.EnergyUsageStartDateTime;
            }
            if ((attribute == "USEPUSHBUTTON"))
            {
                return this.UsePushbutton;
            }
            if ((attribute == "ISARMDISCONNECT"))
            {
                return this.IsArmDisconnect;
            }
            if ((attribute == "ISARMCONNECT"))
            {
                return this.IsArmConnect;
            }
            if ((attribute == "NEEDSPOWERLIMITCHECK"))
            {
                return this.NeedsPowerLimitCheck;
            }
            if ((attribute == "ARMEDTIMEOUT"))
            {
                return this.ArmedTimeout;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "POWERLIMIT"))
            {
                this.PowerLimit = ((float)(value));
                return;
            }
            if ((feature == "CUSTOMERVOLTAGELIMIT"))
            {
                this.CustomerVoltageLimit = ((float)(value));
                return;
            }
            if ((feature == "ENERGYLIMIT"))
            {
                this.EnergyLimit = ((float)(value));
                return;
            }
            if ((feature == "ISENERGYLIMITING"))
            {
                this.IsEnergyLimiting = ((bool)(value));
                return;
            }
            if ((feature == "ENERGYUSAGEWARNING"))
            {
                this.EnergyUsageWarning = ((float)(value));
                return;
            }
            if ((feature == "NEEDSVOLTAGELIMITCHECK"))
            {
                this.NeedsVoltageLimitCheck = ((bool)(value));
                return;
            }
            if ((feature == "ENERGYUSAGESTARTDATETIME"))
            {
                this.EnergyUsageStartDateTime = ((DateTime)(value));
                return;
            }
            if ((feature == "USEPUSHBUTTON"))
            {
                this.UsePushbutton = ((bool)(value));
                return;
            }
            if ((feature == "ISARMDISCONNECT"))
            {
                this.IsArmDisconnect = ((bool)(value));
                return;
            }
            if ((feature == "ISARMCONNECT"))
            {
                this.IsArmConnect = ((bool)(value));
                return;
            }
            if ((feature == "NEEDSPOWERLIMITCHECK"))
            {
                this.NeedsPowerLimitCheck = ((bool)(value));
                return;
            }
            if ((feature == "ARMEDTIMEOUT"))
            {
                this.ArmedTimeout = ((float)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://iec.ch/TC57/2009/CIM-schema-cim14#//IEC61968/LoadControl/RemoteConnectDisc" +
                        "onnectInfo")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the powerLimit property
        /// </summary>
        private sealed class PowerLimitProxy : ModelPropertyChange<IRemoteConnectDisconnectInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PowerLimitProxy(IRemoteConnectDisconnectInfo modelElement) : 
                    base(modelElement, "powerLimit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.PowerLimit;
                }
                set
                {
                    this.ModelElement.PowerLimit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the customerVoltageLimit property
        /// </summary>
        private sealed class CustomerVoltageLimitProxy : ModelPropertyChange<IRemoteConnectDisconnectInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CustomerVoltageLimitProxy(IRemoteConnectDisconnectInfo modelElement) : 
                    base(modelElement, "customerVoltageLimit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.CustomerVoltageLimit;
                }
                set
                {
                    this.ModelElement.CustomerVoltageLimit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the energyLimit property
        /// </summary>
        private sealed class EnergyLimitProxy : ModelPropertyChange<IRemoteConnectDisconnectInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnergyLimitProxy(IRemoteConnectDisconnectInfo modelElement) : 
                    base(modelElement, "energyLimit")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.EnergyLimit;
                }
                set
                {
                    this.ModelElement.EnergyLimit = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isEnergyLimiting property
        /// </summary>
        private sealed class IsEnergyLimitingProxy : ModelPropertyChange<IRemoteConnectDisconnectInfo, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsEnergyLimitingProxy(IRemoteConnectDisconnectInfo modelElement) : 
                    base(modelElement, "isEnergyLimiting")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsEnergyLimiting;
                }
                set
                {
                    this.ModelElement.IsEnergyLimiting = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the energyUsageWarning property
        /// </summary>
        private sealed class EnergyUsageWarningProxy : ModelPropertyChange<IRemoteConnectDisconnectInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnergyUsageWarningProxy(IRemoteConnectDisconnectInfo modelElement) : 
                    base(modelElement, "energyUsageWarning")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.EnergyUsageWarning;
                }
                set
                {
                    this.ModelElement.EnergyUsageWarning = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the needsVoltageLimitCheck property
        /// </summary>
        private sealed class NeedsVoltageLimitCheckProxy : ModelPropertyChange<IRemoteConnectDisconnectInfo, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NeedsVoltageLimitCheckProxy(IRemoteConnectDisconnectInfo modelElement) : 
                    base(modelElement, "needsVoltageLimitCheck")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.NeedsVoltageLimitCheck;
                }
                set
                {
                    this.ModelElement.NeedsVoltageLimitCheck = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the energyUsageStartDateTime property
        /// </summary>
        private sealed class EnergyUsageStartDateTimeProxy : ModelPropertyChange<IRemoteConnectDisconnectInfo, DateTime>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public EnergyUsageStartDateTimeProxy(IRemoteConnectDisconnectInfo modelElement) : 
                    base(modelElement, "energyUsageStartDateTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override DateTime Value
            {
                get
                {
                    return this.ModelElement.EnergyUsageStartDateTime;
                }
                set
                {
                    this.ModelElement.EnergyUsageStartDateTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the usePushbutton property
        /// </summary>
        private sealed class UsePushbuttonProxy : ModelPropertyChange<IRemoteConnectDisconnectInfo, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public UsePushbuttonProxy(IRemoteConnectDisconnectInfo modelElement) : 
                    base(modelElement, "usePushbutton")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.UsePushbutton;
                }
                set
                {
                    this.ModelElement.UsePushbutton = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isArmDisconnect property
        /// </summary>
        private sealed class IsArmDisconnectProxy : ModelPropertyChange<IRemoteConnectDisconnectInfo, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsArmDisconnectProxy(IRemoteConnectDisconnectInfo modelElement) : 
                    base(modelElement, "isArmDisconnect")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsArmDisconnect;
                }
                set
                {
                    this.ModelElement.IsArmDisconnect = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the isArmConnect property
        /// </summary>
        private sealed class IsArmConnectProxy : ModelPropertyChange<IRemoteConnectDisconnectInfo, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IsArmConnectProxy(IRemoteConnectDisconnectInfo modelElement) : 
                    base(modelElement, "isArmConnect")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.IsArmConnect;
                }
                set
                {
                    this.ModelElement.IsArmConnect = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the needsPowerLimitCheck property
        /// </summary>
        private sealed class NeedsPowerLimitCheckProxy : ModelPropertyChange<IRemoteConnectDisconnectInfo, bool>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NeedsPowerLimitCheckProxy(IRemoteConnectDisconnectInfo modelElement) : 
                    base(modelElement, "needsPowerLimitCheck")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override bool Value
            {
                get
                {
                    return this.ModelElement.NeedsPowerLimitCheck;
                }
                set
                {
                    this.ModelElement.NeedsPowerLimitCheck = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the armedTimeout property
        /// </summary>
        private sealed class ArmedTimeoutProxy : ModelPropertyChange<IRemoteConnectDisconnectInfo, float>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ArmedTimeoutProxy(IRemoteConnectDisconnectInfo modelElement) : 
                    base(modelElement, "armedTimeout")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override float Value
            {
                get
                {
                    return this.ModelElement.ArmedTimeout;
                }
                set
                {
                    this.ModelElement.ArmedTimeout = value;
                }
            }
        }
    }
}

