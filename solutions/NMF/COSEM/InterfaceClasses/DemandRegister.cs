using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM;
using TTC2017.SmartGrids.COSEM.Datatypes;

namespace TTC2017.SmartGrids.COSEM.InterfaceClasses
{
    
    
    /// <summary>
    /// The default implementation of the DemandRegister class
    /// </summary>
    [XmlNamespaceAttribute("interface")]
    [XmlNamespacePrefixAttribute("inter")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//InterfaceClasse" +
        "s/DemandRegister")]
    public partial class DemandRegister : ExtendedRegister, IDemandRegister, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Number_of_periods property
        /// </summary>
        private Nullable<int> _number_of_periods;
        
        private static Lazy<ITypedElement> _number_of_periodsAttribute = new Lazy<ITypedElement>(RetrieveNumber_of_periodsAttribute);
        
        /// <summary>
        /// The backing field for the Period property
        /// </summary>
        private Nullable<int> _period;
        
        private static Lazy<ITypedElement> _periodAttribute = new Lazy<ITypedElement>(RetrievePeriodAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The number_of_periods property
        /// </summary>
        [XmlElementNameAttribute("number_of_periods")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Number_of_periods
        {
            get
            {
                return this._number_of_periods;
            }
            set
            {
                if ((this._number_of_periods != value))
                {
                    Nullable<int> old = this._number_of_periods;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNumber_of_periodsChanging(e);
                    this.OnPropertyChanging("Number_of_periods", e, _number_of_periodsAttribute);
                    this._number_of_periods = value;
                    this.OnNumber_of_periodsChanged(e);
                    this.OnPropertyChanged("Number_of_periods", e, _number_of_periodsAttribute);
                }
            }
        }
        
        /// <summary>
        /// The period property
        /// </summary>
        [XmlElementNameAttribute("period")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<int> Period
        {
            get
            {
                return this._period;
            }
            set
            {
                if ((this._period != value))
                {
                    Nullable<int> old = this._period;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPeriodChanging(e);
                    this.OnPropertyChanging("Period", e, _periodAttribute);
                    this._period = value;
                    this.OnPeriodChanged(e);
                    this.OnPropertyChanged("Period", e, _periodAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//InterfaceClasse" +
                            "s/DemandRegister")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Number_of_periods property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Number_of_periodsChanging;
        
        /// <summary>
        /// Gets fired when the Number_of_periods property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Number_of_periodsChanged;
        
        /// <summary>
        /// Gets fired before the Period property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PeriodChanging;
        
        /// <summary>
        /// Gets fired when the Period property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PeriodChanged;
        
        private static ITypedElement RetrieveNumber_of_periodsAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DemandRegister.ClassInstance)).Resolve("number_of_periods")));
        }
        
        /// <summary>
        /// Raises the Number_of_periodsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumber_of_periodsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Number_of_periodsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Number_of_periodsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNumber_of_periodsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Number_of_periodsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePeriodAttribute()
        {
            return ((ITypedElement)(((ModelElement)(DemandRegister.ClassInstance)).Resolve("period")));
        }
        
        /// <summary>
        /// Raises the PeriodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPeriodChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PeriodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PeriodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPeriodChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PeriodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NUMBER_OF_PERIODS"))
            {
                return this.Number_of_periods;
            }
            if ((attribute == "PERIOD"))
            {
                return this.Period;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NUMBER_OF_PERIODS"))
            {
                this.Number_of_periods = ((int)(value));
                return;
            }
            if ((feature == "PERIOD"))
            {
                this.Period = ((int)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//InterfaceClasse" +
                        "s/DemandRegister")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the number_of_periods property
        /// </summary>
        private sealed class Number_of_periodsProxy : ModelPropertyChange<IDemandRegister, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Number_of_periodsProxy(IDemandRegister modelElement) : 
                    base(modelElement, "number_of_periods")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Number_of_periods;
                }
                set
                {
                    this.ModelElement.Number_of_periods = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the period property
        /// </summary>
        private sealed class PeriodProxy : ModelPropertyChange<IDemandRegister, Nullable<int>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PeriodProxy(IDemandRegister modelElement) : 
                    base(modelElement, "period")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<int> Value
            {
                get
                {
                    return this.ModelElement.Period;
                }
                set
                {
                    this.ModelElement.Period = value;
                }
            }
        }
    }
}

