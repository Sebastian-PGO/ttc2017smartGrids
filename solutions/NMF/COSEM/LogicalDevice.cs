//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.COSEMObjects;

namespace TTC2017.SmartGrids.COSEM
{
    
    
    /// <summary>
    /// The default implementation of the LogicalDevice class
    /// </summary>
    [XmlNamespaceAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem")]
    [XmlNamespacePrefixAttribute("cosem")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//LogicalDevice")]
    public partial class LogicalDevice : ModelElement, ILogicalDevice, IModelElement
    {
        
        /// <summary>
        /// The backing field for the ID property
        /// </summary>
        private string _iD;
        
        private static Lazy<ITypedElement> _iDAttribute = new Lazy<ITypedElement>(RetrieveIDAttribute);
        
        private static Lazy<ITypedElement> _aAReference = new Lazy<ITypedElement>(RetrieveAAReference);
        
        /// <summary>
        /// The backing field for the AA property
        /// </summary>
        private ICurrentAssociation _aA;
        
        private static Lazy<ITypedElement> _nameReference = new Lazy<ITypedElement>(RetrieveNameReference);
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private ILogicalDeviceName _name;
        
        private static Lazy<ITypedElement> _autoConnectReference = new Lazy<ITypedElement>(RetrieveAutoConnectReference);
        
        /// <summary>
        /// The backing field for the AutoConnect property
        /// </summary>
        private IAutoConnectObject _autoConnect;
        
        private static Lazy<ITypedElement> _billingPeriodValuesReference = new Lazy<ITypedElement>(RetrieveBillingPeriodValuesReference);
        
        /// <summary>
        /// The backing field for the BillingPeriodValues property
        /// </summary>
        private IBillingPeriodValues _billingPeriodValues;
        
        private static Lazy<ITypedElement> _electricityIDReference = new Lazy<ITypedElement>(RetrieveElectricityIDReference);
        
        /// <summary>
        /// The backing field for the ElectricityID property
        /// </summary>
        private IElectricityID _electricityID;
        
        private static Lazy<ITypedElement> _programEntriesReference = new Lazy<ITypedElement>(RetrieveProgramEntriesReference);
        
        /// <summary>
        /// The backing field for the ProgramEntries property
        /// </summary>
        private IElectricityProgramEntries _programEntries;
        
        private static Lazy<ITypedElement> _outputPulseReference = new Lazy<ITypedElement>(RetrieveOutputPulseReference);
        
        /// <summary>
        /// The backing field for the OutputPulse property
        /// </summary>
        private IOutputPulseValues_constants _outputPulse;
        
        private static Lazy<ITypedElement> _readingFactorReference = new Lazy<ITypedElement>(RetrieveReadingFactorReference);
        
        /// <summary>
        /// The backing field for the ReadingFactor property
        /// </summary>
        private IReadingFactorAndCT_VTratio _readingFactor;
        
        private static Lazy<ITypedElement> _nominalValuesReference = new Lazy<ITypedElement>(RetrieveNominalValuesReference);
        
        /// <summary>
        /// The backing field for the NominalValues property
        /// </summary>
        private IElectricityNominalValues _nominalValues;
        
        private static Lazy<ITypedElement> _inputPulseReference = new Lazy<ITypedElement>(RetrieveInputPulseReference);
        
        /// <summary>
        /// The backing field for the InputPulse property
        /// </summary>
        private IInputPulseValuesOrConstants _inputPulse;
        
        private static Lazy<ITypedElement> _measurementPeriodReference = new Lazy<ITypedElement>(RetrieveMeasurementPeriodReference);
        
        /// <summary>
        /// The backing field for the MeasurementPeriod property
        /// </summary>
        private IMeasurementPeriod_recordingInterval_billingPeriodDuration _measurementPeriod;
        
        private static Lazy<ITypedElement> _timeEntriesReference = new Lazy<ITypedElement>(RetrieveTimeEntriesReference);
        
        /// <summary>
        /// The backing field for the TimeEntries property
        /// </summary>
        private ITimeEntries _timeEntries;
        
        private static Lazy<ITypedElement> _transformerLineLossesReference = new Lazy<ITypedElement>(RetrieveTransformerLineLossesReference);
        
        /// <summary>
        /// The backing field for the TransformerLineLosses property
        /// </summary>
        private ITransformerAndLineLosses _transformerLineLosses;
        
        private static Lazy<ITypedElement> _measurementAlgorithmReference = new Lazy<ITypedElement>(RetrieveMeasurementAlgorithmReference);
        
        /// <summary>
        /// The backing field for the MeasurementAlgorithm property
        /// </summary>
        private IMeasurementMethods _measurementAlgorithm;
        
        private static Lazy<ITypedElement> _meteringPointReference = new Lazy<ITypedElement>(RetrieveMeteringPointReference);
        
        /// <summary>
        /// The backing field for the MeteringPoint property
        /// </summary>
        private IMeteringPointID _meteringPoint;
        
        private static Lazy<ITypedElement> _electricityRelatedStatusReference = new Lazy<ITypedElement>(RetrieveElectricityRelatedStatusReference);
        
        /// <summary>
        /// The backing field for the ElectricityRelatedStatus property
        /// </summary>
        private IElectricityRelatedStatusData _electricityRelatedStatus;
        
        private static Lazy<ITypedElement> _registerMonitorReference = new Lazy<ITypedElement>(RetrieveRegisterMonitorReference);
        
        /// <summary>
        /// The backing field for the RegisterMonitor property
        /// </summary>
        private IRegisterMonitorObject _registerMonitor;
        
        private static Lazy<ITypedElement> _electricityValuesReference = new Lazy<ITypedElement>(RetrieveElectricityValuesReference);
        
        /// <summary>
        /// The backing field for the ElectricityValues property
        /// </summary>
        private IElectricityValues _electricityValues;
        
        private static Lazy<ITypedElement> _measurementValueTypesReference = new Lazy<ITypedElement>(RetrieveMeasurementValueTypesReference);
        
        /// <summary>
        /// The backing field for the MeasurementValueTypes property
        /// </summary>
        private IMeasurementValues _measurementValueTypes;
        
        private static Lazy<ITypedElement> _harmonicsReference = new Lazy<ITypedElement>(RetrieveHarmonicsReference);
        
        /// <summary>
        /// The backing field for the Harmonics property
        /// </summary>
        private IElectricityHarmonics _harmonics;
        
        private static Lazy<ITypedElement> _tariffsReference = new Lazy<ITypedElement>(RetrieveTariffsReference);
        
        /// <summary>
        /// The backing field for the Tariffs property
        /// </summary>
        private ICurrentlyActiveTariff _tariffs;
        
        private static Lazy<ITypedElement> _phaseanglesReference = new Lazy<ITypedElement>(RetrievePhaseanglesReference);
        
        /// <summary>
        /// The backing field for the Phaseangles property
        /// </summary>
        private IExtendedPhaseAngleMeasurement _phaseangles;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The ID property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string ID
        {
            get
            {
                return this._iD;
            }
            set
            {
                if ((this._iD != value))
                {
                    string old = this._iD;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnIDChanging(e);
                    this.OnPropertyChanging("ID", e, _iDAttribute);
                    this._iD = value;
                    this.OnIDChanged(e);
                    this.OnPropertyChanged("ID", e, _iDAttribute);
                }
            }
        }
        
        /// <summary>
        /// The AA property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual ICurrentAssociation AA
        {
            get
            {
                return this._aA;
            }
            set
            {
                if ((this._aA != value))
                {
                    ICurrentAssociation old = this._aA;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAAChanging(e);
                    this.OnPropertyChanging("AA", e, _aAReference);
                    this._aA = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetAA;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetAA;
                    }
                    this.OnAAChanged(e);
                    this.OnPropertyChanged("AA", e, _aAReference);
                }
            }
        }
        
        /// <summary>
        /// The name property
        /// </summary>
        [XmlElementNameAttribute("name")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual ILogicalDeviceName Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    ILogicalDeviceName old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e, _nameReference);
                    this._name = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetName;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetName;
                    }
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e, _nameReference);
                }
            }
        }
        
        /// <summary>
        /// The AutoConnect property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IAutoConnectObject AutoConnect
        {
            get
            {
                return this._autoConnect;
            }
            set
            {
                if ((this._autoConnect != value))
                {
                    IAutoConnectObject old = this._autoConnect;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAutoConnectChanging(e);
                    this.OnPropertyChanging("AutoConnect", e, _autoConnectReference);
                    this._autoConnect = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetAutoConnect;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetAutoConnect;
                    }
                    this.OnAutoConnectChanged(e);
                    this.OnPropertyChanged("AutoConnect", e, _autoConnectReference);
                }
            }
        }
        
        /// <summary>
        /// The BillingPeriodValues property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IBillingPeriodValues BillingPeriodValues
        {
            get
            {
                return this._billingPeriodValues;
            }
            set
            {
                if ((this._billingPeriodValues != value))
                {
                    IBillingPeriodValues old = this._billingPeriodValues;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBillingPeriodValuesChanging(e);
                    this.OnPropertyChanging("BillingPeriodValues", e, _billingPeriodValuesReference);
                    this._billingPeriodValues = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetBillingPeriodValues;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetBillingPeriodValues;
                    }
                    this.OnBillingPeriodValuesChanged(e);
                    this.OnPropertyChanged("BillingPeriodValues", e, _billingPeriodValuesReference);
                }
            }
        }
        
        /// <summary>
        /// The ElectricityID property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IElectricityID ElectricityID
        {
            get
            {
                return this._electricityID;
            }
            set
            {
                if ((this._electricityID != value))
                {
                    IElectricityID old = this._electricityID;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnElectricityIDChanging(e);
                    this.OnPropertyChanging("ElectricityID", e, _electricityIDReference);
                    this._electricityID = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetElectricityID;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetElectricityID;
                    }
                    this.OnElectricityIDChanged(e);
                    this.OnPropertyChanged("ElectricityID", e, _electricityIDReference);
                }
            }
        }
        
        /// <summary>
        /// The ProgramEntries property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IElectricityProgramEntries ProgramEntries
        {
            get
            {
                return this._programEntries;
            }
            set
            {
                if ((this._programEntries != value))
                {
                    IElectricityProgramEntries old = this._programEntries;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnProgramEntriesChanging(e);
                    this.OnPropertyChanging("ProgramEntries", e, _programEntriesReference);
                    this._programEntries = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetProgramEntries;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetProgramEntries;
                    }
                    this.OnProgramEntriesChanged(e);
                    this.OnPropertyChanged("ProgramEntries", e, _programEntriesReference);
                }
            }
        }
        
        /// <summary>
        /// The OutputPulse property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IOutputPulseValues_constants OutputPulse
        {
            get
            {
                return this._outputPulse;
            }
            set
            {
                if ((this._outputPulse != value))
                {
                    IOutputPulseValues_constants old = this._outputPulse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOutputPulseChanging(e);
                    this.OnPropertyChanging("OutputPulse", e, _outputPulseReference);
                    this._outputPulse = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetOutputPulse;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetOutputPulse;
                    }
                    this.OnOutputPulseChanged(e);
                    this.OnPropertyChanged("OutputPulse", e, _outputPulseReference);
                }
            }
        }
        
        /// <summary>
        /// The ReadingFactor property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IReadingFactorAndCT_VTratio ReadingFactor
        {
            get
            {
                return this._readingFactor;
            }
            set
            {
                if ((this._readingFactor != value))
                {
                    IReadingFactorAndCT_VTratio old = this._readingFactor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnReadingFactorChanging(e);
                    this.OnPropertyChanging("ReadingFactor", e, _readingFactorReference);
                    this._readingFactor = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetReadingFactor;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetReadingFactor;
                    }
                    this.OnReadingFactorChanged(e);
                    this.OnPropertyChanged("ReadingFactor", e, _readingFactorReference);
                }
            }
        }
        
        /// <summary>
        /// The NominalValues property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IElectricityNominalValues NominalValues
        {
            get
            {
                return this._nominalValues;
            }
            set
            {
                if ((this._nominalValues != value))
                {
                    IElectricityNominalValues old = this._nominalValues;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNominalValuesChanging(e);
                    this.OnPropertyChanging("NominalValues", e, _nominalValuesReference);
                    this._nominalValues = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetNominalValues;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetNominalValues;
                    }
                    this.OnNominalValuesChanged(e);
                    this.OnPropertyChanged("NominalValues", e, _nominalValuesReference);
                }
            }
        }
        
        /// <summary>
        /// The InputPulse property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IInputPulseValuesOrConstants InputPulse
        {
            get
            {
                return this._inputPulse;
            }
            set
            {
                if ((this._inputPulse != value))
                {
                    IInputPulseValuesOrConstants old = this._inputPulse;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnInputPulseChanging(e);
                    this.OnPropertyChanging("InputPulse", e, _inputPulseReference);
                    this._inputPulse = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetInputPulse;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetInputPulse;
                    }
                    this.OnInputPulseChanged(e);
                    this.OnPropertyChanged("InputPulse", e, _inputPulseReference);
                }
            }
        }
        
        /// <summary>
        /// The MeasurementPeriod property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IMeasurementPeriod_recordingInterval_billingPeriodDuration MeasurementPeriod
        {
            get
            {
                return this._measurementPeriod;
            }
            set
            {
                if ((this._measurementPeriod != value))
                {
                    IMeasurementPeriod_recordingInterval_billingPeriodDuration old = this._measurementPeriod;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurementPeriodChanging(e);
                    this.OnPropertyChanging("MeasurementPeriod", e, _measurementPeriodReference);
                    this._measurementPeriod = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetMeasurementPeriod;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetMeasurementPeriod;
                    }
                    this.OnMeasurementPeriodChanged(e);
                    this.OnPropertyChanged("MeasurementPeriod", e, _measurementPeriodReference);
                }
            }
        }
        
        /// <summary>
        /// The TimeEntries property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual ITimeEntries TimeEntries
        {
            get
            {
                return this._timeEntries;
            }
            set
            {
                if ((this._timeEntries != value))
                {
                    ITimeEntries old = this._timeEntries;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTimeEntriesChanging(e);
                    this.OnPropertyChanging("TimeEntries", e, _timeEntriesReference);
                    this._timeEntries = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetTimeEntries;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetTimeEntries;
                    }
                    this.OnTimeEntriesChanged(e);
                    this.OnPropertyChanged("TimeEntries", e, _timeEntriesReference);
                }
            }
        }
        
        /// <summary>
        /// The TransformerLineLosses property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual ITransformerAndLineLosses TransformerLineLosses
        {
            get
            {
                return this._transformerLineLosses;
            }
            set
            {
                if ((this._transformerLineLosses != value))
                {
                    ITransformerAndLineLosses old = this._transformerLineLosses;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTransformerLineLossesChanging(e);
                    this.OnPropertyChanging("TransformerLineLosses", e, _transformerLineLossesReference);
                    this._transformerLineLosses = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetTransformerLineLosses;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetTransformerLineLosses;
                    }
                    this.OnTransformerLineLossesChanged(e);
                    this.OnPropertyChanged("TransformerLineLosses", e, _transformerLineLossesReference);
                }
            }
        }
        
        /// <summary>
        /// The MeasurementAlgorithm property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IMeasurementMethods MeasurementAlgorithm
        {
            get
            {
                return this._measurementAlgorithm;
            }
            set
            {
                if ((this._measurementAlgorithm != value))
                {
                    IMeasurementMethods old = this._measurementAlgorithm;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurementAlgorithmChanging(e);
                    this.OnPropertyChanging("MeasurementAlgorithm", e, _measurementAlgorithmReference);
                    this._measurementAlgorithm = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetMeasurementAlgorithm;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetMeasurementAlgorithm;
                    }
                    this.OnMeasurementAlgorithmChanged(e);
                    this.OnPropertyChanged("MeasurementAlgorithm", e, _measurementAlgorithmReference);
                }
            }
        }
        
        /// <summary>
        /// The MeteringPoint property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IMeteringPointID MeteringPoint
        {
            get
            {
                return this._meteringPoint;
            }
            set
            {
                if ((this._meteringPoint != value))
                {
                    IMeteringPointID old = this._meteringPoint;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeteringPointChanging(e);
                    this.OnPropertyChanging("MeteringPoint", e, _meteringPointReference);
                    this._meteringPoint = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetMeteringPoint;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetMeteringPoint;
                    }
                    this.OnMeteringPointChanged(e);
                    this.OnPropertyChanged("MeteringPoint", e, _meteringPointReference);
                }
            }
        }
        
        /// <summary>
        /// The ElectricityRelatedStatus property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IElectricityRelatedStatusData ElectricityRelatedStatus
        {
            get
            {
                return this._electricityRelatedStatus;
            }
            set
            {
                if ((this._electricityRelatedStatus != value))
                {
                    IElectricityRelatedStatusData old = this._electricityRelatedStatus;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnElectricityRelatedStatusChanging(e);
                    this.OnPropertyChanging("ElectricityRelatedStatus", e, _electricityRelatedStatusReference);
                    this._electricityRelatedStatus = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetElectricityRelatedStatus;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetElectricityRelatedStatus;
                    }
                    this.OnElectricityRelatedStatusChanged(e);
                    this.OnPropertyChanged("ElectricityRelatedStatus", e, _electricityRelatedStatusReference);
                }
            }
        }
        
        /// <summary>
        /// The RegisterMonitor property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IRegisterMonitorObject RegisterMonitor
        {
            get
            {
                return this._registerMonitor;
            }
            set
            {
                if ((this._registerMonitor != value))
                {
                    IRegisterMonitorObject old = this._registerMonitor;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnRegisterMonitorChanging(e);
                    this.OnPropertyChanging("RegisterMonitor", e, _registerMonitorReference);
                    this._registerMonitor = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetRegisterMonitor;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetRegisterMonitor;
                    }
                    this.OnRegisterMonitorChanged(e);
                    this.OnPropertyChanged("RegisterMonitor", e, _registerMonitorReference);
                }
            }
        }
        
        /// <summary>
        /// The ElectricityValues property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IElectricityValues ElectricityValues
        {
            get
            {
                return this._electricityValues;
            }
            set
            {
                if ((this._electricityValues != value))
                {
                    IElectricityValues old = this._electricityValues;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnElectricityValuesChanging(e);
                    this.OnPropertyChanging("ElectricityValues", e, _electricityValuesReference);
                    this._electricityValues = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetElectricityValues;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetElectricityValues;
                    }
                    this.OnElectricityValuesChanged(e);
                    this.OnPropertyChanged("ElectricityValues", e, _electricityValuesReference);
                }
            }
        }
        
        /// <summary>
        /// The MeasurementValueTypes property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IMeasurementValues MeasurementValueTypes
        {
            get
            {
                return this._measurementValueTypes;
            }
            set
            {
                if ((this._measurementValueTypes != value))
                {
                    IMeasurementValues old = this._measurementValueTypes;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnMeasurementValueTypesChanging(e);
                    this.OnPropertyChanging("MeasurementValueTypes", e, _measurementValueTypesReference);
                    this._measurementValueTypes = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetMeasurementValueTypes;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetMeasurementValueTypes;
                    }
                    this.OnMeasurementValueTypesChanged(e);
                    this.OnPropertyChanged("MeasurementValueTypes", e, _measurementValueTypesReference);
                }
            }
        }
        
        /// <summary>
        /// The Harmonics property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IElectricityHarmonics Harmonics
        {
            get
            {
                return this._harmonics;
            }
            set
            {
                if ((this._harmonics != value))
                {
                    IElectricityHarmonics old = this._harmonics;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHarmonicsChanging(e);
                    this.OnPropertyChanging("Harmonics", e, _harmonicsReference);
                    this._harmonics = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetHarmonics;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetHarmonics;
                    }
                    this.OnHarmonicsChanged(e);
                    this.OnPropertyChanged("Harmonics", e, _harmonicsReference);
                }
            }
        }
        
        /// <summary>
        /// The Tariffs property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual ICurrentlyActiveTariff Tariffs
        {
            get
            {
                return this._tariffs;
            }
            set
            {
                if ((this._tariffs != value))
                {
                    ICurrentlyActiveTariff old = this._tariffs;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTariffsChanging(e);
                    this.OnPropertyChanging("Tariffs", e, _tariffsReference);
                    this._tariffs = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetTariffs;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetTariffs;
                    }
                    this.OnTariffsChanged(e);
                    this.OnPropertyChanged("Tariffs", e, _tariffsReference);
                }
            }
        }
        
        /// <summary>
        /// The Phaseangles property
        /// </summary>
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        public virtual IExtendedPhaseAngleMeasurement Phaseangles
        {
            get
            {
                return this._phaseangles;
            }
            set
            {
                if ((this._phaseangles != value))
                {
                    IExtendedPhaseAngleMeasurement old = this._phaseangles;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPhaseanglesChanging(e);
                    this.OnPropertyChanging("Phaseangles", e, _phaseanglesReference);
                    this._phaseangles = value;
                    if ((old != null))
                    {
                        old.Parent = null;
                        old.Deleted -= this.OnResetPhaseangles;
                    }
                    if ((value != null))
                    {
                        value.Parent = this;
                        value.Deleted += this.OnResetPhaseangles;
                    }
                    this.OnPhaseanglesChanged(e);
                    this.OnPropertyChanged("Phaseangles", e, _phaseanglesReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new LogicalDeviceChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new LogicalDeviceReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//LogicalDevice")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the ID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanging;
        
        /// <summary>
        /// Gets fired when the ID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> IDChanged;
        
        /// <summary>
        /// Gets fired before the AA property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AAChanging;
        
        /// <summary>
        /// Gets fired when the AA property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AAChanged;
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the AutoConnect property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AutoConnectChanging;
        
        /// <summary>
        /// Gets fired when the AutoConnect property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AutoConnectChanged;
        
        /// <summary>
        /// Gets fired before the BillingPeriodValues property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillingPeriodValuesChanging;
        
        /// <summary>
        /// Gets fired when the BillingPeriodValues property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillingPeriodValuesChanged;
        
        /// <summary>
        /// Gets fired before the ElectricityID property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ElectricityIDChanging;
        
        /// <summary>
        /// Gets fired when the ElectricityID property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ElectricityIDChanged;
        
        /// <summary>
        /// Gets fired before the ProgramEntries property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProgramEntriesChanging;
        
        /// <summary>
        /// Gets fired when the ProgramEntries property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ProgramEntriesChanged;
        
        /// <summary>
        /// Gets fired before the OutputPulse property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OutputPulseChanging;
        
        /// <summary>
        /// Gets fired when the OutputPulse property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OutputPulseChanged;
        
        /// <summary>
        /// Gets fired before the ReadingFactor property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReadingFactorChanging;
        
        /// <summary>
        /// Gets fired when the ReadingFactor property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ReadingFactorChanged;
        
        /// <summary>
        /// Gets fired before the NominalValues property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NominalValuesChanging;
        
        /// <summary>
        /// Gets fired when the NominalValues property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NominalValuesChanged;
        
        /// <summary>
        /// Gets fired before the InputPulse property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InputPulseChanging;
        
        /// <summary>
        /// Gets fired when the InputPulse property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> InputPulseChanged;
        
        /// <summary>
        /// Gets fired before the MeasurementPeriod property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeasurementPeriodChanging;
        
        /// <summary>
        /// Gets fired when the MeasurementPeriod property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeasurementPeriodChanged;
        
        /// <summary>
        /// Gets fired before the TimeEntries property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeEntriesChanging;
        
        /// <summary>
        /// Gets fired when the TimeEntries property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TimeEntriesChanged;
        
        /// <summary>
        /// Gets fired before the TransformerLineLosses property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerLineLossesChanging;
        
        /// <summary>
        /// Gets fired when the TransformerLineLosses property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TransformerLineLossesChanged;
        
        /// <summary>
        /// Gets fired before the MeasurementAlgorithm property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeasurementAlgorithmChanging;
        
        /// <summary>
        /// Gets fired when the MeasurementAlgorithm property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeasurementAlgorithmChanged;
        
        /// <summary>
        /// Gets fired before the MeteringPoint property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeteringPointChanging;
        
        /// <summary>
        /// Gets fired when the MeteringPoint property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeteringPointChanged;
        
        /// <summary>
        /// Gets fired before the ElectricityRelatedStatus property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ElectricityRelatedStatusChanging;
        
        /// <summary>
        /// Gets fired when the ElectricityRelatedStatus property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ElectricityRelatedStatusChanged;
        
        /// <summary>
        /// Gets fired before the RegisterMonitor property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegisterMonitorChanging;
        
        /// <summary>
        /// Gets fired when the RegisterMonitor property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> RegisterMonitorChanged;
        
        /// <summary>
        /// Gets fired before the ElectricityValues property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ElectricityValuesChanging;
        
        /// <summary>
        /// Gets fired when the ElectricityValues property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ElectricityValuesChanged;
        
        /// <summary>
        /// Gets fired before the MeasurementValueTypes property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeasurementValueTypesChanging;
        
        /// <summary>
        /// Gets fired when the MeasurementValueTypes property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> MeasurementValueTypesChanged;
        
        /// <summary>
        /// Gets fired before the Harmonics property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HarmonicsChanging;
        
        /// <summary>
        /// Gets fired when the Harmonics property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HarmonicsChanged;
        
        /// <summary>
        /// Gets fired before the Tariffs property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TariffsChanging;
        
        /// <summary>
        /// Gets fired when the Tariffs property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TariffsChanged;
        
        /// <summary>
        /// Gets fired before the Phaseangles property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseanglesChanging;
        
        /// <summary>
        /// Gets fired when the Phaseangles property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PhaseanglesChanged;
        
        private static ITypedElement RetrieveIDAttribute()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("ID")));
        }
        
        /// <summary>
        /// Raises the IDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the IDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.IDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAAReference()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("AA")));
        }
        
        /// <summary>
        /// Raises the AAChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAAChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AAChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AAChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAAChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AAChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AA property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAA(object sender, System.EventArgs eventArgs)
        {
            this.AA = null;
        }
        
        private static ITypedElement RetrieveNameReference()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("name")));
        }
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Name property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetName(object sender, System.EventArgs eventArgs)
        {
            this.Name = null;
        }
        
        private static ITypedElement RetrieveAutoConnectReference()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("AutoConnect")));
        }
        
        /// <summary>
        /// Raises the AutoConnectChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAutoConnectChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AutoConnectChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AutoConnectChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAutoConnectChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AutoConnectChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the AutoConnect property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetAutoConnect(object sender, System.EventArgs eventArgs)
        {
            this.AutoConnect = null;
        }
        
        private static ITypedElement RetrieveBillingPeriodValuesReference()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("BillingPeriodValues")));
        }
        
        /// <summary>
        /// Raises the BillingPeriodValuesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingPeriodValuesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillingPeriodValuesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BillingPeriodValuesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingPeriodValuesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillingPeriodValuesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BillingPeriodValues property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBillingPeriodValues(object sender, System.EventArgs eventArgs)
        {
            this.BillingPeriodValues = null;
        }
        
        private static ITypedElement RetrieveElectricityIDReference()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("ElectricityID")));
        }
        
        /// <summary>
        /// Raises the ElectricityIDChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectricityIDChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ElectricityIDChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ElectricityIDChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectricityIDChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ElectricityIDChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ElectricityID property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetElectricityID(object sender, System.EventArgs eventArgs)
        {
            this.ElectricityID = null;
        }
        
        private static ITypedElement RetrieveProgramEntriesReference()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("ProgramEntries")));
        }
        
        /// <summary>
        /// Raises the ProgramEntriesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProgramEntriesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProgramEntriesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ProgramEntriesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnProgramEntriesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ProgramEntriesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ProgramEntries property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetProgramEntries(object sender, System.EventArgs eventArgs)
        {
            this.ProgramEntries = null;
        }
        
        private static ITypedElement RetrieveOutputPulseReference()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("OutputPulse")));
        }
        
        /// <summary>
        /// Raises the OutputPulseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutputPulseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OutputPulseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OutputPulseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutputPulseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OutputPulseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OutputPulse property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOutputPulse(object sender, System.EventArgs eventArgs)
        {
            this.OutputPulse = null;
        }
        
        private static ITypedElement RetrieveReadingFactorReference()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("ReadingFactor")));
        }
        
        /// <summary>
        /// Raises the ReadingFactorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadingFactorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReadingFactorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ReadingFactorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnReadingFactorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ReadingFactorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ReadingFactor property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetReadingFactor(object sender, System.EventArgs eventArgs)
        {
            this.ReadingFactor = null;
        }
        
        private static ITypedElement RetrieveNominalValuesReference()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("NominalValues")));
        }
        
        /// <summary>
        /// Raises the NominalValuesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalValuesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NominalValuesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NominalValuesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNominalValuesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NominalValuesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the NominalValues property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetNominalValues(object sender, System.EventArgs eventArgs)
        {
            this.NominalValues = null;
        }
        
        private static ITypedElement RetrieveInputPulseReference()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("InputPulse")));
        }
        
        /// <summary>
        /// Raises the InputPulseChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInputPulseChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InputPulseChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the InputPulseChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnInputPulseChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.InputPulseChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the InputPulse property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetInputPulse(object sender, System.EventArgs eventArgs)
        {
            this.InputPulse = null;
        }
        
        private static ITypedElement RetrieveMeasurementPeriodReference()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("MeasurementPeriod")));
        }
        
        /// <summary>
        /// Raises the MeasurementPeriodChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementPeriodChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeasurementPeriodChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeasurementPeriodChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementPeriodChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeasurementPeriodChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MeasurementPeriod property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeasurementPeriod(object sender, System.EventArgs eventArgs)
        {
            this.MeasurementPeriod = null;
        }
        
        private static ITypedElement RetrieveTimeEntriesReference()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("TimeEntries")));
        }
        
        /// <summary>
        /// Raises the TimeEntriesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeEntriesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeEntriesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TimeEntriesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTimeEntriesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TimeEntriesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TimeEntries property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTimeEntries(object sender, System.EventArgs eventArgs)
        {
            this.TimeEntries = null;
        }
        
        private static ITypedElement RetrieveTransformerLineLossesReference()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("TransformerLineLosses")));
        }
        
        /// <summary>
        /// Raises the TransformerLineLossesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerLineLossesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerLineLossesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TransformerLineLossesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTransformerLineLossesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TransformerLineLossesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the TransformerLineLosses property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTransformerLineLosses(object sender, System.EventArgs eventArgs)
        {
            this.TransformerLineLosses = null;
        }
        
        private static ITypedElement RetrieveMeasurementAlgorithmReference()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("MeasurementAlgorithm")));
        }
        
        /// <summary>
        /// Raises the MeasurementAlgorithmChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementAlgorithmChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeasurementAlgorithmChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeasurementAlgorithmChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementAlgorithmChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeasurementAlgorithmChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MeasurementAlgorithm property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeasurementAlgorithm(object sender, System.EventArgs eventArgs)
        {
            this.MeasurementAlgorithm = null;
        }
        
        private static ITypedElement RetrieveMeteringPointReference()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("MeteringPoint")));
        }
        
        /// <summary>
        /// Raises the MeteringPointChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeteringPointChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeteringPointChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeteringPointChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeteringPointChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeteringPointChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MeteringPoint property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeteringPoint(object sender, System.EventArgs eventArgs)
        {
            this.MeteringPoint = null;
        }
        
        private static ITypedElement RetrieveElectricityRelatedStatusReference()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("ElectricityRelatedStatus")));
        }
        
        /// <summary>
        /// Raises the ElectricityRelatedStatusChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectricityRelatedStatusChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ElectricityRelatedStatusChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ElectricityRelatedStatusChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectricityRelatedStatusChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ElectricityRelatedStatusChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ElectricityRelatedStatus property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetElectricityRelatedStatus(object sender, System.EventArgs eventArgs)
        {
            this.ElectricityRelatedStatus = null;
        }
        
        private static ITypedElement RetrieveRegisterMonitorReference()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("RegisterMonitor")));
        }
        
        /// <summary>
        /// Raises the RegisterMonitorChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegisterMonitorChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegisterMonitorChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the RegisterMonitorChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnRegisterMonitorChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.RegisterMonitorChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the RegisterMonitor property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetRegisterMonitor(object sender, System.EventArgs eventArgs)
        {
            this.RegisterMonitor = null;
        }
        
        private static ITypedElement RetrieveElectricityValuesReference()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("ElectricityValues")));
        }
        
        /// <summary>
        /// Raises the ElectricityValuesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectricityValuesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ElectricityValuesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ElectricityValuesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnElectricityValuesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ElectricityValuesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the ElectricityValues property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetElectricityValues(object sender, System.EventArgs eventArgs)
        {
            this.ElectricityValues = null;
        }
        
        private static ITypedElement RetrieveMeasurementValueTypesReference()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("MeasurementValueTypes")));
        }
        
        /// <summary>
        /// Raises the MeasurementValueTypesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementValueTypesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeasurementValueTypesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the MeasurementValueTypesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnMeasurementValueTypesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.MeasurementValueTypesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the MeasurementValueTypes property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetMeasurementValueTypes(object sender, System.EventArgs eventArgs)
        {
            this.MeasurementValueTypes = null;
        }
        
        private static ITypedElement RetrieveHarmonicsReference()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("Harmonics")));
        }
        
        /// <summary>
        /// Raises the HarmonicsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHarmonicsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HarmonicsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HarmonicsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHarmonicsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HarmonicsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Harmonics property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetHarmonics(object sender, System.EventArgs eventArgs)
        {
            this.Harmonics = null;
        }
        
        private static ITypedElement RetrieveTariffsReference()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("Tariffs")));
        }
        
        /// <summary>
        /// Raises the TariffsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTariffsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TariffsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TariffsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTariffsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TariffsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Tariffs property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetTariffs(object sender, System.EventArgs eventArgs)
        {
            this.Tariffs = null;
        }
        
        private static ITypedElement RetrievePhaseanglesReference()
        {
            return ((ITypedElement)(((ModelElement)(LogicalDevice.ClassInstance)).Resolve("Phaseangles")));
        }
        
        /// <summary>
        /// Raises the PhaseanglesChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseanglesChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseanglesChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PhaseanglesChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPhaseanglesChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PhaseanglesChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Phaseangles property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPhaseangles(object sender, System.EventArgs eventArgs)
        {
            this.Phaseangles = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            if ((element == this.AA))
            {
                return ModelHelper.CreatePath("AA");
            }
            if ((element == this.Name))
            {
                return ModelHelper.CreatePath("Name");
            }
            if ((element == this.AutoConnect))
            {
                return ModelHelper.CreatePath("AutoConnect");
            }
            if ((element == this.BillingPeriodValues))
            {
                return ModelHelper.CreatePath("BillingPeriodValues");
            }
            if ((element == this.ElectricityID))
            {
                return ModelHelper.CreatePath("ElectricityID");
            }
            if ((element == this.ProgramEntries))
            {
                return ModelHelper.CreatePath("ProgramEntries");
            }
            if ((element == this.OutputPulse))
            {
                return ModelHelper.CreatePath("OutputPulse");
            }
            if ((element == this.ReadingFactor))
            {
                return ModelHelper.CreatePath("ReadingFactor");
            }
            if ((element == this.NominalValues))
            {
                return ModelHelper.CreatePath("NominalValues");
            }
            if ((element == this.InputPulse))
            {
                return ModelHelper.CreatePath("InputPulse");
            }
            if ((element == this.MeasurementPeriod))
            {
                return ModelHelper.CreatePath("MeasurementPeriod");
            }
            if ((element == this.TimeEntries))
            {
                return ModelHelper.CreatePath("TimeEntries");
            }
            if ((element == this.TransformerLineLosses))
            {
                return ModelHelper.CreatePath("TransformerLineLosses");
            }
            if ((element == this.MeasurementAlgorithm))
            {
                return ModelHelper.CreatePath("MeasurementAlgorithm");
            }
            if ((element == this.MeteringPoint))
            {
                return ModelHelper.CreatePath("MeteringPoint");
            }
            if ((element == this.ElectricityRelatedStatus))
            {
                return ModelHelper.CreatePath("ElectricityRelatedStatus");
            }
            if ((element == this.RegisterMonitor))
            {
                return ModelHelper.CreatePath("RegisterMonitor");
            }
            if ((element == this.ElectricityValues))
            {
                return ModelHelper.CreatePath("ElectricityValues");
            }
            if ((element == this.MeasurementValueTypes))
            {
                return ModelHelper.CreatePath("MeasurementValueTypes");
            }
            if ((element == this.Harmonics))
            {
                return ModelHelper.CreatePath("Harmonics");
            }
            if ((element == this.Tariffs))
            {
                return ModelHelper.CreatePath("Tariffs");
            }
            if ((element == this.Phaseangles))
            {
                return ModelHelper.CreatePath("Phaseangles");
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "AA"))
            {
                return this.AA;
            }
            if ((reference == "NAME"))
            {
                return this.Name;
            }
            if ((reference == "AUTOCONNECT"))
            {
                return this.AutoConnect;
            }
            if ((reference == "BILLINGPERIODVALUES"))
            {
                return this.BillingPeriodValues;
            }
            if ((reference == "ELECTRICITYID"))
            {
                return this.ElectricityID;
            }
            if ((reference == "PROGRAMENTRIES"))
            {
                return this.ProgramEntries;
            }
            if ((reference == "OUTPUTPULSE"))
            {
                return this.OutputPulse;
            }
            if ((reference == "READINGFACTOR"))
            {
                return this.ReadingFactor;
            }
            if ((reference == "NOMINALVALUES"))
            {
                return this.NominalValues;
            }
            if ((reference == "INPUTPULSE"))
            {
                return this.InputPulse;
            }
            if ((reference == "MEASUREMENTPERIOD"))
            {
                return this.MeasurementPeriod;
            }
            if ((reference == "TIMEENTRIES"))
            {
                return this.TimeEntries;
            }
            if ((reference == "TRANSFORMERLINELOSSES"))
            {
                return this.TransformerLineLosses;
            }
            if ((reference == "MEASUREMENTALGORITHM"))
            {
                return this.MeasurementAlgorithm;
            }
            if ((reference == "METERINGPOINT"))
            {
                return this.MeteringPoint;
            }
            if ((reference == "ELECTRICITYRELATEDSTATUS"))
            {
                return this.ElectricityRelatedStatus;
            }
            if ((reference == "REGISTERMONITOR"))
            {
                return this.RegisterMonitor;
            }
            if ((reference == "ELECTRICITYVALUES"))
            {
                return this.ElectricityValues;
            }
            if ((reference == "MEASUREMENTVALUETYPES"))
            {
                return this.MeasurementValueTypes;
            }
            if ((reference == "HARMONICS"))
            {
                return this.Harmonics;
            }
            if ((reference == "TARIFFS"))
            {
                return this.Tariffs;
            }
            if ((reference == "PHASEANGLES"))
            {
                return this.Phaseangles;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ID"))
            {
                return this.ID;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "AA"))
            {
                this.AA = ((ICurrentAssociation)(value));
                return;
            }
            if ((feature == "NAME"))
            {
                this.Name = ((ILogicalDeviceName)(value));
                return;
            }
            if ((feature == "AUTOCONNECT"))
            {
                this.AutoConnect = ((IAutoConnectObject)(value));
                return;
            }
            if ((feature == "BILLINGPERIODVALUES"))
            {
                this.BillingPeriodValues = ((IBillingPeriodValues)(value));
                return;
            }
            if ((feature == "ELECTRICITYID"))
            {
                this.ElectricityID = ((IElectricityID)(value));
                return;
            }
            if ((feature == "PROGRAMENTRIES"))
            {
                this.ProgramEntries = ((IElectricityProgramEntries)(value));
                return;
            }
            if ((feature == "OUTPUTPULSE"))
            {
                this.OutputPulse = ((IOutputPulseValues_constants)(value));
                return;
            }
            if ((feature == "READINGFACTOR"))
            {
                this.ReadingFactor = ((IReadingFactorAndCT_VTratio)(value));
                return;
            }
            if ((feature == "NOMINALVALUES"))
            {
                this.NominalValues = ((IElectricityNominalValues)(value));
                return;
            }
            if ((feature == "INPUTPULSE"))
            {
                this.InputPulse = ((IInputPulseValuesOrConstants)(value));
                return;
            }
            if ((feature == "MEASUREMENTPERIOD"))
            {
                this.MeasurementPeriod = ((IMeasurementPeriod_recordingInterval_billingPeriodDuration)(value));
                return;
            }
            if ((feature == "TIMEENTRIES"))
            {
                this.TimeEntries = ((ITimeEntries)(value));
                return;
            }
            if ((feature == "TRANSFORMERLINELOSSES"))
            {
                this.TransformerLineLosses = ((ITransformerAndLineLosses)(value));
                return;
            }
            if ((feature == "MEASUREMENTALGORITHM"))
            {
                this.MeasurementAlgorithm = ((IMeasurementMethods)(value));
                return;
            }
            if ((feature == "METERINGPOINT"))
            {
                this.MeteringPoint = ((IMeteringPointID)(value));
                return;
            }
            if ((feature == "ELECTRICITYRELATEDSTATUS"))
            {
                this.ElectricityRelatedStatus = ((IElectricityRelatedStatusData)(value));
                return;
            }
            if ((feature == "REGISTERMONITOR"))
            {
                this.RegisterMonitor = ((IRegisterMonitorObject)(value));
                return;
            }
            if ((feature == "ELECTRICITYVALUES"))
            {
                this.ElectricityValues = ((IElectricityValues)(value));
                return;
            }
            if ((feature == "MEASUREMENTVALUETYPES"))
            {
                this.MeasurementValueTypes = ((IMeasurementValues)(value));
                return;
            }
            if ((feature == "HARMONICS"))
            {
                this.Harmonics = ((IElectricityHarmonics)(value));
                return;
            }
            if ((feature == "TARIFFS"))
            {
                this.Tariffs = ((ICurrentlyActiveTariff)(value));
                return;
            }
            if ((feature == "PHASEANGLES"))
            {
                this.Phaseangles = ((IExtendedPhaseAngleMeasurement)(value));
                return;
            }
            if ((feature == "ID"))
            {
                this.ID = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "AA"))
            {
                return new AAProxy(this);
            }
            if ((attribute == "Name"))
            {
                return new NameProxy(this);
            }
            if ((attribute == "AutoConnect"))
            {
                return new AutoConnectProxy(this);
            }
            if ((attribute == "BillingPeriodValues"))
            {
                return new BillingPeriodValuesProxy(this);
            }
            if ((attribute == "ElectricityID"))
            {
                return new ElectricityIDProxy(this);
            }
            if ((attribute == "ProgramEntries"))
            {
                return new ProgramEntriesProxy(this);
            }
            if ((attribute == "OutputPulse"))
            {
                return new OutputPulseProxy(this);
            }
            if ((attribute == "ReadingFactor"))
            {
                return new ReadingFactorProxy(this);
            }
            if ((attribute == "NominalValues"))
            {
                return new NominalValuesProxy(this);
            }
            if ((attribute == "InputPulse"))
            {
                return new InputPulseProxy(this);
            }
            if ((attribute == "MeasurementPeriod"))
            {
                return new MeasurementPeriodProxy(this);
            }
            if ((attribute == "TimeEntries"))
            {
                return new TimeEntriesProxy(this);
            }
            if ((attribute == "TransformerLineLosses"))
            {
                return new TransformerLineLossesProxy(this);
            }
            if ((attribute == "MeasurementAlgorithm"))
            {
                return new MeasurementAlgorithmProxy(this);
            }
            if ((attribute == "MeteringPoint"))
            {
                return new MeteringPointProxy(this);
            }
            if ((attribute == "ElectricityRelatedStatus"))
            {
                return new ElectricityRelatedStatusProxy(this);
            }
            if ((attribute == "RegisterMonitor"))
            {
                return new RegisterMonitorProxy(this);
            }
            if ((attribute == "ElectricityValues"))
            {
                return new ElectricityValuesProxy(this);
            }
            if ((attribute == "MeasurementValueTypes"))
            {
                return new MeasurementValueTypesProxy(this);
            }
            if ((attribute == "Harmonics"))
            {
                return new HarmonicsProxy(this);
            }
            if ((attribute == "Tariffs"))
            {
                return new TariffsProxy(this);
            }
            if ((attribute == "Phaseangles"))
            {
                return new PhaseanglesProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "AA"))
            {
                return new AAProxy(this);
            }
            if ((reference == "Name"))
            {
                return new NameProxy(this);
            }
            if ((reference == "AutoConnect"))
            {
                return new AutoConnectProxy(this);
            }
            if ((reference == "BillingPeriodValues"))
            {
                return new BillingPeriodValuesProxy(this);
            }
            if ((reference == "ElectricityID"))
            {
                return new ElectricityIDProxy(this);
            }
            if ((reference == "ProgramEntries"))
            {
                return new ProgramEntriesProxy(this);
            }
            if ((reference == "OutputPulse"))
            {
                return new OutputPulseProxy(this);
            }
            if ((reference == "ReadingFactor"))
            {
                return new ReadingFactorProxy(this);
            }
            if ((reference == "NominalValues"))
            {
                return new NominalValuesProxy(this);
            }
            if ((reference == "InputPulse"))
            {
                return new InputPulseProxy(this);
            }
            if ((reference == "MeasurementPeriod"))
            {
                return new MeasurementPeriodProxy(this);
            }
            if ((reference == "TimeEntries"))
            {
                return new TimeEntriesProxy(this);
            }
            if ((reference == "TransformerLineLosses"))
            {
                return new TransformerLineLossesProxy(this);
            }
            if ((reference == "MeasurementAlgorithm"))
            {
                return new MeasurementAlgorithmProxy(this);
            }
            if ((reference == "MeteringPoint"))
            {
                return new MeteringPointProxy(this);
            }
            if ((reference == "ElectricityRelatedStatus"))
            {
                return new ElectricityRelatedStatusProxy(this);
            }
            if ((reference == "RegisterMonitor"))
            {
                return new RegisterMonitorProxy(this);
            }
            if ((reference == "ElectricityValues"))
            {
                return new ElectricityValuesProxy(this);
            }
            if ((reference == "MeasurementValueTypes"))
            {
                return new MeasurementValueTypesProxy(this);
            }
            if ((reference == "Harmonics"))
            {
                return new HarmonicsProxy(this);
            }
            if ((reference == "Tariffs"))
            {
                return new TariffsProxy(this);
            }
            if ((reference == "Phaseangles"))
            {
                return new PhaseanglesProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//LogicalDevice")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the LogicalDevice class
        /// </summary>
        public class LogicalDeviceChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private LogicalDevice _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public LogicalDeviceChildrenCollection(LogicalDevice parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.AA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Name != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AutoConnect != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BillingPeriodValues != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElectricityID != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ProgramEntries != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OutputPulse != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ReadingFactor != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.NominalValues != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.InputPulse != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeasurementPeriod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TimeEntries != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TransformerLineLosses != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeasurementAlgorithm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeteringPoint != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElectricityRelatedStatus != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RegisterMonitor != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElectricityValues != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeasurementValueTypes != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Harmonics != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Tariffs != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Phaseangles != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AAChanged += this.PropagateValueChanges;
                this._parent.NameChanged += this.PropagateValueChanges;
                this._parent.AutoConnectChanged += this.PropagateValueChanges;
                this._parent.BillingPeriodValuesChanged += this.PropagateValueChanges;
                this._parent.ElectricityIDChanged += this.PropagateValueChanges;
                this._parent.ProgramEntriesChanged += this.PropagateValueChanges;
                this._parent.OutputPulseChanged += this.PropagateValueChanges;
                this._parent.ReadingFactorChanged += this.PropagateValueChanges;
                this._parent.NominalValuesChanged += this.PropagateValueChanges;
                this._parent.InputPulseChanged += this.PropagateValueChanges;
                this._parent.MeasurementPeriodChanged += this.PropagateValueChanges;
                this._parent.TimeEntriesChanged += this.PropagateValueChanges;
                this._parent.TransformerLineLossesChanged += this.PropagateValueChanges;
                this._parent.MeasurementAlgorithmChanged += this.PropagateValueChanges;
                this._parent.MeteringPointChanged += this.PropagateValueChanges;
                this._parent.ElectricityRelatedStatusChanged += this.PropagateValueChanges;
                this._parent.RegisterMonitorChanged += this.PropagateValueChanges;
                this._parent.ElectricityValuesChanged += this.PropagateValueChanges;
                this._parent.MeasurementValueTypesChanged += this.PropagateValueChanges;
                this._parent.HarmonicsChanged += this.PropagateValueChanges;
                this._parent.TariffsChanged += this.PropagateValueChanges;
                this._parent.PhaseanglesChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AAChanged -= this.PropagateValueChanges;
                this._parent.NameChanged -= this.PropagateValueChanges;
                this._parent.AutoConnectChanged -= this.PropagateValueChanges;
                this._parent.BillingPeriodValuesChanged -= this.PropagateValueChanges;
                this._parent.ElectricityIDChanged -= this.PropagateValueChanges;
                this._parent.ProgramEntriesChanged -= this.PropagateValueChanges;
                this._parent.OutputPulseChanged -= this.PropagateValueChanges;
                this._parent.ReadingFactorChanged -= this.PropagateValueChanges;
                this._parent.NominalValuesChanged -= this.PropagateValueChanges;
                this._parent.InputPulseChanged -= this.PropagateValueChanges;
                this._parent.MeasurementPeriodChanged -= this.PropagateValueChanges;
                this._parent.TimeEntriesChanged -= this.PropagateValueChanges;
                this._parent.TransformerLineLossesChanged -= this.PropagateValueChanges;
                this._parent.MeasurementAlgorithmChanged -= this.PropagateValueChanges;
                this._parent.MeteringPointChanged -= this.PropagateValueChanges;
                this._parent.ElectricityRelatedStatusChanged -= this.PropagateValueChanges;
                this._parent.RegisterMonitorChanged -= this.PropagateValueChanges;
                this._parent.ElectricityValuesChanged -= this.PropagateValueChanges;
                this._parent.MeasurementValueTypesChanged -= this.PropagateValueChanges;
                this._parent.HarmonicsChanged -= this.PropagateValueChanges;
                this._parent.TariffsChanged -= this.PropagateValueChanges;
                this._parent.PhaseanglesChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.AA == null))
                {
                    ICurrentAssociation aACasted = item.As<ICurrentAssociation>();
                    if ((aACasted != null))
                    {
                        this._parent.AA = aACasted;
                        return;
                    }
                }
                if ((this._parent.Name == null))
                {
                    ILogicalDeviceName nameCasted = item.As<ILogicalDeviceName>();
                    if ((nameCasted != null))
                    {
                        this._parent.Name = nameCasted;
                        return;
                    }
                }
                if ((this._parent.AutoConnect == null))
                {
                    IAutoConnectObject autoConnectCasted = item.As<IAutoConnectObject>();
                    if ((autoConnectCasted != null))
                    {
                        this._parent.AutoConnect = autoConnectCasted;
                        return;
                    }
                }
                if ((this._parent.BillingPeriodValues == null))
                {
                    IBillingPeriodValues billingPeriodValuesCasted = item.As<IBillingPeriodValues>();
                    if ((billingPeriodValuesCasted != null))
                    {
                        this._parent.BillingPeriodValues = billingPeriodValuesCasted;
                        return;
                    }
                }
                if ((this._parent.ElectricityID == null))
                {
                    IElectricityID electricityIDCasted = item.As<IElectricityID>();
                    if ((electricityIDCasted != null))
                    {
                        this._parent.ElectricityID = electricityIDCasted;
                        return;
                    }
                }
                if ((this._parent.ProgramEntries == null))
                {
                    IElectricityProgramEntries programEntriesCasted = item.As<IElectricityProgramEntries>();
                    if ((programEntriesCasted != null))
                    {
                        this._parent.ProgramEntries = programEntriesCasted;
                        return;
                    }
                }
                if ((this._parent.OutputPulse == null))
                {
                    IOutputPulseValues_constants outputPulseCasted = item.As<IOutputPulseValues_constants>();
                    if ((outputPulseCasted != null))
                    {
                        this._parent.OutputPulse = outputPulseCasted;
                        return;
                    }
                }
                if ((this._parent.ReadingFactor == null))
                {
                    IReadingFactorAndCT_VTratio readingFactorCasted = item.As<IReadingFactorAndCT_VTratio>();
                    if ((readingFactorCasted != null))
                    {
                        this._parent.ReadingFactor = readingFactorCasted;
                        return;
                    }
                }
                if ((this._parent.NominalValues == null))
                {
                    IElectricityNominalValues nominalValuesCasted = item.As<IElectricityNominalValues>();
                    if ((nominalValuesCasted != null))
                    {
                        this._parent.NominalValues = nominalValuesCasted;
                        return;
                    }
                }
                if ((this._parent.InputPulse == null))
                {
                    IInputPulseValuesOrConstants inputPulseCasted = item.As<IInputPulseValuesOrConstants>();
                    if ((inputPulseCasted != null))
                    {
                        this._parent.InputPulse = inputPulseCasted;
                        return;
                    }
                }
                if ((this._parent.MeasurementPeriod == null))
                {
                    IMeasurementPeriod_recordingInterval_billingPeriodDuration measurementPeriodCasted = item.As<IMeasurementPeriod_recordingInterval_billingPeriodDuration>();
                    if ((measurementPeriodCasted != null))
                    {
                        this._parent.MeasurementPeriod = measurementPeriodCasted;
                        return;
                    }
                }
                if ((this._parent.TimeEntries == null))
                {
                    ITimeEntries timeEntriesCasted = item.As<ITimeEntries>();
                    if ((timeEntriesCasted != null))
                    {
                        this._parent.TimeEntries = timeEntriesCasted;
                        return;
                    }
                }
                if ((this._parent.TransformerLineLosses == null))
                {
                    ITransformerAndLineLosses transformerLineLossesCasted = item.As<ITransformerAndLineLosses>();
                    if ((transformerLineLossesCasted != null))
                    {
                        this._parent.TransformerLineLosses = transformerLineLossesCasted;
                        return;
                    }
                }
                if ((this._parent.MeasurementAlgorithm == null))
                {
                    IMeasurementMethods measurementAlgorithmCasted = item.As<IMeasurementMethods>();
                    if ((measurementAlgorithmCasted != null))
                    {
                        this._parent.MeasurementAlgorithm = measurementAlgorithmCasted;
                        return;
                    }
                }
                if ((this._parent.MeteringPoint == null))
                {
                    IMeteringPointID meteringPointCasted = item.As<IMeteringPointID>();
                    if ((meteringPointCasted != null))
                    {
                        this._parent.MeteringPoint = meteringPointCasted;
                        return;
                    }
                }
                if ((this._parent.ElectricityRelatedStatus == null))
                {
                    IElectricityRelatedStatusData electricityRelatedStatusCasted = item.As<IElectricityRelatedStatusData>();
                    if ((electricityRelatedStatusCasted != null))
                    {
                        this._parent.ElectricityRelatedStatus = electricityRelatedStatusCasted;
                        return;
                    }
                }
                if ((this._parent.RegisterMonitor == null))
                {
                    IRegisterMonitorObject registerMonitorCasted = item.As<IRegisterMonitorObject>();
                    if ((registerMonitorCasted != null))
                    {
                        this._parent.RegisterMonitor = registerMonitorCasted;
                        return;
                    }
                }
                if ((this._parent.ElectricityValues == null))
                {
                    IElectricityValues electricityValuesCasted = item.As<IElectricityValues>();
                    if ((electricityValuesCasted != null))
                    {
                        this._parent.ElectricityValues = electricityValuesCasted;
                        return;
                    }
                }
                if ((this._parent.MeasurementValueTypes == null))
                {
                    IMeasurementValues measurementValueTypesCasted = item.As<IMeasurementValues>();
                    if ((measurementValueTypesCasted != null))
                    {
                        this._parent.MeasurementValueTypes = measurementValueTypesCasted;
                        return;
                    }
                }
                if ((this._parent.Harmonics == null))
                {
                    IElectricityHarmonics harmonicsCasted = item.As<IElectricityHarmonics>();
                    if ((harmonicsCasted != null))
                    {
                        this._parent.Harmonics = harmonicsCasted;
                        return;
                    }
                }
                if ((this._parent.Tariffs == null))
                {
                    ICurrentlyActiveTariff tariffsCasted = item.As<ICurrentlyActiveTariff>();
                    if ((tariffsCasted != null))
                    {
                        this._parent.Tariffs = tariffsCasted;
                        return;
                    }
                }
                if ((this._parent.Phaseangles == null))
                {
                    IExtendedPhaseAngleMeasurement phaseanglesCasted = item.As<IExtendedPhaseAngleMeasurement>();
                    if ((phaseanglesCasted != null))
                    {
                        this._parent.Phaseangles = phaseanglesCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AA = null;
                this._parent.Name = null;
                this._parent.AutoConnect = null;
                this._parent.BillingPeriodValues = null;
                this._parent.ElectricityID = null;
                this._parent.ProgramEntries = null;
                this._parent.OutputPulse = null;
                this._parent.ReadingFactor = null;
                this._parent.NominalValues = null;
                this._parent.InputPulse = null;
                this._parent.MeasurementPeriod = null;
                this._parent.TimeEntries = null;
                this._parent.TransformerLineLosses = null;
                this._parent.MeasurementAlgorithm = null;
                this._parent.MeteringPoint = null;
                this._parent.ElectricityRelatedStatus = null;
                this._parent.RegisterMonitor = null;
                this._parent.ElectricityValues = null;
                this._parent.MeasurementValueTypes = null;
                this._parent.Harmonics = null;
                this._parent.Tariffs = null;
                this._parent.Phaseangles = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.AA))
                {
                    return true;
                }
                if ((item == this._parent.Name))
                {
                    return true;
                }
                if ((item == this._parent.AutoConnect))
                {
                    return true;
                }
                if ((item == this._parent.BillingPeriodValues))
                {
                    return true;
                }
                if ((item == this._parent.ElectricityID))
                {
                    return true;
                }
                if ((item == this._parent.ProgramEntries))
                {
                    return true;
                }
                if ((item == this._parent.OutputPulse))
                {
                    return true;
                }
                if ((item == this._parent.ReadingFactor))
                {
                    return true;
                }
                if ((item == this._parent.NominalValues))
                {
                    return true;
                }
                if ((item == this._parent.InputPulse))
                {
                    return true;
                }
                if ((item == this._parent.MeasurementPeriod))
                {
                    return true;
                }
                if ((item == this._parent.TimeEntries))
                {
                    return true;
                }
                if ((item == this._parent.TransformerLineLosses))
                {
                    return true;
                }
                if ((item == this._parent.MeasurementAlgorithm))
                {
                    return true;
                }
                if ((item == this._parent.MeteringPoint))
                {
                    return true;
                }
                if ((item == this._parent.ElectricityRelatedStatus))
                {
                    return true;
                }
                if ((item == this._parent.RegisterMonitor))
                {
                    return true;
                }
                if ((item == this._parent.ElectricityValues))
                {
                    return true;
                }
                if ((item == this._parent.MeasurementValueTypes))
                {
                    return true;
                }
                if ((item == this._parent.Harmonics))
                {
                    return true;
                }
                if ((item == this._parent.Tariffs))
                {
                    return true;
                }
                if ((item == this._parent.Phaseangles))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.AA != null))
                {
                    array[arrayIndex] = this._parent.AA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Name != null))
                {
                    array[arrayIndex] = this._parent.Name;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AutoConnect != null))
                {
                    array[arrayIndex] = this._parent.AutoConnect;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BillingPeriodValues != null))
                {
                    array[arrayIndex] = this._parent.BillingPeriodValues;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElectricityID != null))
                {
                    array[arrayIndex] = this._parent.ElectricityID;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ProgramEntries != null))
                {
                    array[arrayIndex] = this._parent.ProgramEntries;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OutputPulse != null))
                {
                    array[arrayIndex] = this._parent.OutputPulse;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ReadingFactor != null))
                {
                    array[arrayIndex] = this._parent.ReadingFactor;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.NominalValues != null))
                {
                    array[arrayIndex] = this._parent.NominalValues;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.InputPulse != null))
                {
                    array[arrayIndex] = this._parent.InputPulse;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeasurementPeriod != null))
                {
                    array[arrayIndex] = this._parent.MeasurementPeriod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TimeEntries != null))
                {
                    array[arrayIndex] = this._parent.TimeEntries;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TransformerLineLosses != null))
                {
                    array[arrayIndex] = this._parent.TransformerLineLosses;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeasurementAlgorithm != null))
                {
                    array[arrayIndex] = this._parent.MeasurementAlgorithm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeteringPoint != null))
                {
                    array[arrayIndex] = this._parent.MeteringPoint;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElectricityRelatedStatus != null))
                {
                    array[arrayIndex] = this._parent.ElectricityRelatedStatus;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RegisterMonitor != null))
                {
                    array[arrayIndex] = this._parent.RegisterMonitor;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElectricityValues != null))
                {
                    array[arrayIndex] = this._parent.ElectricityValues;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeasurementValueTypes != null))
                {
                    array[arrayIndex] = this._parent.MeasurementValueTypes;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Harmonics != null))
                {
                    array[arrayIndex] = this._parent.Harmonics;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Tariffs != null))
                {
                    array[arrayIndex] = this._parent.Tariffs;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Phaseangles != null))
                {
                    array[arrayIndex] = this._parent.Phaseangles;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.AA == item))
                {
                    this._parent.AA = null;
                    return true;
                }
                if ((this._parent.Name == item))
                {
                    this._parent.Name = null;
                    return true;
                }
                if ((this._parent.AutoConnect == item))
                {
                    this._parent.AutoConnect = null;
                    return true;
                }
                if ((this._parent.BillingPeriodValues == item))
                {
                    this._parent.BillingPeriodValues = null;
                    return true;
                }
                if ((this._parent.ElectricityID == item))
                {
                    this._parent.ElectricityID = null;
                    return true;
                }
                if ((this._parent.ProgramEntries == item))
                {
                    this._parent.ProgramEntries = null;
                    return true;
                }
                if ((this._parent.OutputPulse == item))
                {
                    this._parent.OutputPulse = null;
                    return true;
                }
                if ((this._parent.ReadingFactor == item))
                {
                    this._parent.ReadingFactor = null;
                    return true;
                }
                if ((this._parent.NominalValues == item))
                {
                    this._parent.NominalValues = null;
                    return true;
                }
                if ((this._parent.InputPulse == item))
                {
                    this._parent.InputPulse = null;
                    return true;
                }
                if ((this._parent.MeasurementPeriod == item))
                {
                    this._parent.MeasurementPeriod = null;
                    return true;
                }
                if ((this._parent.TimeEntries == item))
                {
                    this._parent.TimeEntries = null;
                    return true;
                }
                if ((this._parent.TransformerLineLosses == item))
                {
                    this._parent.TransformerLineLosses = null;
                    return true;
                }
                if ((this._parent.MeasurementAlgorithm == item))
                {
                    this._parent.MeasurementAlgorithm = null;
                    return true;
                }
                if ((this._parent.MeteringPoint == item))
                {
                    this._parent.MeteringPoint = null;
                    return true;
                }
                if ((this._parent.ElectricityRelatedStatus == item))
                {
                    this._parent.ElectricityRelatedStatus = null;
                    return true;
                }
                if ((this._parent.RegisterMonitor == item))
                {
                    this._parent.RegisterMonitor = null;
                    return true;
                }
                if ((this._parent.ElectricityValues == item))
                {
                    this._parent.ElectricityValues = null;
                    return true;
                }
                if ((this._parent.MeasurementValueTypes == item))
                {
                    this._parent.MeasurementValueTypes = null;
                    return true;
                }
                if ((this._parent.Harmonics == item))
                {
                    this._parent.Harmonics = null;
                    return true;
                }
                if ((this._parent.Tariffs == item))
                {
                    this._parent.Tariffs = null;
                    return true;
                }
                if ((this._parent.Phaseangles == item))
                {
                    this._parent.Phaseangles = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AA).Concat(this._parent.Name).Concat(this._parent.AutoConnect).Concat(this._parent.BillingPeriodValues).Concat(this._parent.ElectricityID).Concat(this._parent.ProgramEntries).Concat(this._parent.OutputPulse).Concat(this._parent.ReadingFactor).Concat(this._parent.NominalValues).Concat(this._parent.InputPulse).Concat(this._parent.MeasurementPeriod).Concat(this._parent.TimeEntries).Concat(this._parent.TransformerLineLosses).Concat(this._parent.MeasurementAlgorithm).Concat(this._parent.MeteringPoint).Concat(this._parent.ElectricityRelatedStatus).Concat(this._parent.RegisterMonitor).Concat(this._parent.ElectricityValues).Concat(this._parent.MeasurementValueTypes).Concat(this._parent.Harmonics).Concat(this._parent.Tariffs).Concat(this._parent.Phaseangles).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the LogicalDevice class
        /// </summary>
        public class LogicalDeviceReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private LogicalDevice _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public LogicalDeviceReferencedElementsCollection(LogicalDevice parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.AA != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Name != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.AutoConnect != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BillingPeriodValues != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElectricityID != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ProgramEntries != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OutputPulse != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ReadingFactor != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.NominalValues != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.InputPulse != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeasurementPeriod != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TimeEntries != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.TransformerLineLosses != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeasurementAlgorithm != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeteringPoint != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElectricityRelatedStatus != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.RegisterMonitor != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.ElectricityValues != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.MeasurementValueTypes != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Harmonics != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Tariffs != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Phaseangles != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.AAChanged += this.PropagateValueChanges;
                this._parent.NameChanged += this.PropagateValueChanges;
                this._parent.AutoConnectChanged += this.PropagateValueChanges;
                this._parent.BillingPeriodValuesChanged += this.PropagateValueChanges;
                this._parent.ElectricityIDChanged += this.PropagateValueChanges;
                this._parent.ProgramEntriesChanged += this.PropagateValueChanges;
                this._parent.OutputPulseChanged += this.PropagateValueChanges;
                this._parent.ReadingFactorChanged += this.PropagateValueChanges;
                this._parent.NominalValuesChanged += this.PropagateValueChanges;
                this._parent.InputPulseChanged += this.PropagateValueChanges;
                this._parent.MeasurementPeriodChanged += this.PropagateValueChanges;
                this._parent.TimeEntriesChanged += this.PropagateValueChanges;
                this._parent.TransformerLineLossesChanged += this.PropagateValueChanges;
                this._parent.MeasurementAlgorithmChanged += this.PropagateValueChanges;
                this._parent.MeteringPointChanged += this.PropagateValueChanges;
                this._parent.ElectricityRelatedStatusChanged += this.PropagateValueChanges;
                this._parent.RegisterMonitorChanged += this.PropagateValueChanges;
                this._parent.ElectricityValuesChanged += this.PropagateValueChanges;
                this._parent.MeasurementValueTypesChanged += this.PropagateValueChanges;
                this._parent.HarmonicsChanged += this.PropagateValueChanges;
                this._parent.TariffsChanged += this.PropagateValueChanges;
                this._parent.PhaseanglesChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.AAChanged -= this.PropagateValueChanges;
                this._parent.NameChanged -= this.PropagateValueChanges;
                this._parent.AutoConnectChanged -= this.PropagateValueChanges;
                this._parent.BillingPeriodValuesChanged -= this.PropagateValueChanges;
                this._parent.ElectricityIDChanged -= this.PropagateValueChanges;
                this._parent.ProgramEntriesChanged -= this.PropagateValueChanges;
                this._parent.OutputPulseChanged -= this.PropagateValueChanges;
                this._parent.ReadingFactorChanged -= this.PropagateValueChanges;
                this._parent.NominalValuesChanged -= this.PropagateValueChanges;
                this._parent.InputPulseChanged -= this.PropagateValueChanges;
                this._parent.MeasurementPeriodChanged -= this.PropagateValueChanges;
                this._parent.TimeEntriesChanged -= this.PropagateValueChanges;
                this._parent.TransformerLineLossesChanged -= this.PropagateValueChanges;
                this._parent.MeasurementAlgorithmChanged -= this.PropagateValueChanges;
                this._parent.MeteringPointChanged -= this.PropagateValueChanges;
                this._parent.ElectricityRelatedStatusChanged -= this.PropagateValueChanges;
                this._parent.RegisterMonitorChanged -= this.PropagateValueChanges;
                this._parent.ElectricityValuesChanged -= this.PropagateValueChanges;
                this._parent.MeasurementValueTypesChanged -= this.PropagateValueChanges;
                this._parent.HarmonicsChanged -= this.PropagateValueChanges;
                this._parent.TariffsChanged -= this.PropagateValueChanges;
                this._parent.PhaseanglesChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.AA == null))
                {
                    ICurrentAssociation aACasted = item.As<ICurrentAssociation>();
                    if ((aACasted != null))
                    {
                        this._parent.AA = aACasted;
                        return;
                    }
                }
                if ((this._parent.Name == null))
                {
                    ILogicalDeviceName nameCasted = item.As<ILogicalDeviceName>();
                    if ((nameCasted != null))
                    {
                        this._parent.Name = nameCasted;
                        return;
                    }
                }
                if ((this._parent.AutoConnect == null))
                {
                    IAutoConnectObject autoConnectCasted = item.As<IAutoConnectObject>();
                    if ((autoConnectCasted != null))
                    {
                        this._parent.AutoConnect = autoConnectCasted;
                        return;
                    }
                }
                if ((this._parent.BillingPeriodValues == null))
                {
                    IBillingPeriodValues billingPeriodValuesCasted = item.As<IBillingPeriodValues>();
                    if ((billingPeriodValuesCasted != null))
                    {
                        this._parent.BillingPeriodValues = billingPeriodValuesCasted;
                        return;
                    }
                }
                if ((this._parent.ElectricityID == null))
                {
                    IElectricityID electricityIDCasted = item.As<IElectricityID>();
                    if ((electricityIDCasted != null))
                    {
                        this._parent.ElectricityID = electricityIDCasted;
                        return;
                    }
                }
                if ((this._parent.ProgramEntries == null))
                {
                    IElectricityProgramEntries programEntriesCasted = item.As<IElectricityProgramEntries>();
                    if ((programEntriesCasted != null))
                    {
                        this._parent.ProgramEntries = programEntriesCasted;
                        return;
                    }
                }
                if ((this._parent.OutputPulse == null))
                {
                    IOutputPulseValues_constants outputPulseCasted = item.As<IOutputPulseValues_constants>();
                    if ((outputPulseCasted != null))
                    {
                        this._parent.OutputPulse = outputPulseCasted;
                        return;
                    }
                }
                if ((this._parent.ReadingFactor == null))
                {
                    IReadingFactorAndCT_VTratio readingFactorCasted = item.As<IReadingFactorAndCT_VTratio>();
                    if ((readingFactorCasted != null))
                    {
                        this._parent.ReadingFactor = readingFactorCasted;
                        return;
                    }
                }
                if ((this._parent.NominalValues == null))
                {
                    IElectricityNominalValues nominalValuesCasted = item.As<IElectricityNominalValues>();
                    if ((nominalValuesCasted != null))
                    {
                        this._parent.NominalValues = nominalValuesCasted;
                        return;
                    }
                }
                if ((this._parent.InputPulse == null))
                {
                    IInputPulseValuesOrConstants inputPulseCasted = item.As<IInputPulseValuesOrConstants>();
                    if ((inputPulseCasted != null))
                    {
                        this._parent.InputPulse = inputPulseCasted;
                        return;
                    }
                }
                if ((this._parent.MeasurementPeriod == null))
                {
                    IMeasurementPeriod_recordingInterval_billingPeriodDuration measurementPeriodCasted = item.As<IMeasurementPeriod_recordingInterval_billingPeriodDuration>();
                    if ((measurementPeriodCasted != null))
                    {
                        this._parent.MeasurementPeriod = measurementPeriodCasted;
                        return;
                    }
                }
                if ((this._parent.TimeEntries == null))
                {
                    ITimeEntries timeEntriesCasted = item.As<ITimeEntries>();
                    if ((timeEntriesCasted != null))
                    {
                        this._parent.TimeEntries = timeEntriesCasted;
                        return;
                    }
                }
                if ((this._parent.TransformerLineLosses == null))
                {
                    ITransformerAndLineLosses transformerLineLossesCasted = item.As<ITransformerAndLineLosses>();
                    if ((transformerLineLossesCasted != null))
                    {
                        this._parent.TransformerLineLosses = transformerLineLossesCasted;
                        return;
                    }
                }
                if ((this._parent.MeasurementAlgorithm == null))
                {
                    IMeasurementMethods measurementAlgorithmCasted = item.As<IMeasurementMethods>();
                    if ((measurementAlgorithmCasted != null))
                    {
                        this._parent.MeasurementAlgorithm = measurementAlgorithmCasted;
                        return;
                    }
                }
                if ((this._parent.MeteringPoint == null))
                {
                    IMeteringPointID meteringPointCasted = item.As<IMeteringPointID>();
                    if ((meteringPointCasted != null))
                    {
                        this._parent.MeteringPoint = meteringPointCasted;
                        return;
                    }
                }
                if ((this._parent.ElectricityRelatedStatus == null))
                {
                    IElectricityRelatedStatusData electricityRelatedStatusCasted = item.As<IElectricityRelatedStatusData>();
                    if ((electricityRelatedStatusCasted != null))
                    {
                        this._parent.ElectricityRelatedStatus = electricityRelatedStatusCasted;
                        return;
                    }
                }
                if ((this._parent.RegisterMonitor == null))
                {
                    IRegisterMonitorObject registerMonitorCasted = item.As<IRegisterMonitorObject>();
                    if ((registerMonitorCasted != null))
                    {
                        this._parent.RegisterMonitor = registerMonitorCasted;
                        return;
                    }
                }
                if ((this._parent.ElectricityValues == null))
                {
                    IElectricityValues electricityValuesCasted = item.As<IElectricityValues>();
                    if ((electricityValuesCasted != null))
                    {
                        this._parent.ElectricityValues = electricityValuesCasted;
                        return;
                    }
                }
                if ((this._parent.MeasurementValueTypes == null))
                {
                    IMeasurementValues measurementValueTypesCasted = item.As<IMeasurementValues>();
                    if ((measurementValueTypesCasted != null))
                    {
                        this._parent.MeasurementValueTypes = measurementValueTypesCasted;
                        return;
                    }
                }
                if ((this._parent.Harmonics == null))
                {
                    IElectricityHarmonics harmonicsCasted = item.As<IElectricityHarmonics>();
                    if ((harmonicsCasted != null))
                    {
                        this._parent.Harmonics = harmonicsCasted;
                        return;
                    }
                }
                if ((this._parent.Tariffs == null))
                {
                    ICurrentlyActiveTariff tariffsCasted = item.As<ICurrentlyActiveTariff>();
                    if ((tariffsCasted != null))
                    {
                        this._parent.Tariffs = tariffsCasted;
                        return;
                    }
                }
                if ((this._parent.Phaseangles == null))
                {
                    IExtendedPhaseAngleMeasurement phaseanglesCasted = item.As<IExtendedPhaseAngleMeasurement>();
                    if ((phaseanglesCasted != null))
                    {
                        this._parent.Phaseangles = phaseanglesCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.AA = null;
                this._parent.Name = null;
                this._parent.AutoConnect = null;
                this._parent.BillingPeriodValues = null;
                this._parent.ElectricityID = null;
                this._parent.ProgramEntries = null;
                this._parent.OutputPulse = null;
                this._parent.ReadingFactor = null;
                this._parent.NominalValues = null;
                this._parent.InputPulse = null;
                this._parent.MeasurementPeriod = null;
                this._parent.TimeEntries = null;
                this._parent.TransformerLineLosses = null;
                this._parent.MeasurementAlgorithm = null;
                this._parent.MeteringPoint = null;
                this._parent.ElectricityRelatedStatus = null;
                this._parent.RegisterMonitor = null;
                this._parent.ElectricityValues = null;
                this._parent.MeasurementValueTypes = null;
                this._parent.Harmonics = null;
                this._parent.Tariffs = null;
                this._parent.Phaseangles = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.AA))
                {
                    return true;
                }
                if ((item == this._parent.Name))
                {
                    return true;
                }
                if ((item == this._parent.AutoConnect))
                {
                    return true;
                }
                if ((item == this._parent.BillingPeriodValues))
                {
                    return true;
                }
                if ((item == this._parent.ElectricityID))
                {
                    return true;
                }
                if ((item == this._parent.ProgramEntries))
                {
                    return true;
                }
                if ((item == this._parent.OutputPulse))
                {
                    return true;
                }
                if ((item == this._parent.ReadingFactor))
                {
                    return true;
                }
                if ((item == this._parent.NominalValues))
                {
                    return true;
                }
                if ((item == this._parent.InputPulse))
                {
                    return true;
                }
                if ((item == this._parent.MeasurementPeriod))
                {
                    return true;
                }
                if ((item == this._parent.TimeEntries))
                {
                    return true;
                }
                if ((item == this._parent.TransformerLineLosses))
                {
                    return true;
                }
                if ((item == this._parent.MeasurementAlgorithm))
                {
                    return true;
                }
                if ((item == this._parent.MeteringPoint))
                {
                    return true;
                }
                if ((item == this._parent.ElectricityRelatedStatus))
                {
                    return true;
                }
                if ((item == this._parent.RegisterMonitor))
                {
                    return true;
                }
                if ((item == this._parent.ElectricityValues))
                {
                    return true;
                }
                if ((item == this._parent.MeasurementValueTypes))
                {
                    return true;
                }
                if ((item == this._parent.Harmonics))
                {
                    return true;
                }
                if ((item == this._parent.Tariffs))
                {
                    return true;
                }
                if ((item == this._parent.Phaseangles))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.AA != null))
                {
                    array[arrayIndex] = this._parent.AA;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Name != null))
                {
                    array[arrayIndex] = this._parent.Name;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.AutoConnect != null))
                {
                    array[arrayIndex] = this._parent.AutoConnect;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BillingPeriodValues != null))
                {
                    array[arrayIndex] = this._parent.BillingPeriodValues;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElectricityID != null))
                {
                    array[arrayIndex] = this._parent.ElectricityID;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ProgramEntries != null))
                {
                    array[arrayIndex] = this._parent.ProgramEntries;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OutputPulse != null))
                {
                    array[arrayIndex] = this._parent.OutputPulse;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ReadingFactor != null))
                {
                    array[arrayIndex] = this._parent.ReadingFactor;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.NominalValues != null))
                {
                    array[arrayIndex] = this._parent.NominalValues;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.InputPulse != null))
                {
                    array[arrayIndex] = this._parent.InputPulse;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeasurementPeriod != null))
                {
                    array[arrayIndex] = this._parent.MeasurementPeriod;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TimeEntries != null))
                {
                    array[arrayIndex] = this._parent.TimeEntries;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.TransformerLineLosses != null))
                {
                    array[arrayIndex] = this._parent.TransformerLineLosses;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeasurementAlgorithm != null))
                {
                    array[arrayIndex] = this._parent.MeasurementAlgorithm;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeteringPoint != null))
                {
                    array[arrayIndex] = this._parent.MeteringPoint;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElectricityRelatedStatus != null))
                {
                    array[arrayIndex] = this._parent.ElectricityRelatedStatus;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.RegisterMonitor != null))
                {
                    array[arrayIndex] = this._parent.RegisterMonitor;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.ElectricityValues != null))
                {
                    array[arrayIndex] = this._parent.ElectricityValues;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.MeasurementValueTypes != null))
                {
                    array[arrayIndex] = this._parent.MeasurementValueTypes;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Harmonics != null))
                {
                    array[arrayIndex] = this._parent.Harmonics;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Tariffs != null))
                {
                    array[arrayIndex] = this._parent.Tariffs;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Phaseangles != null))
                {
                    array[arrayIndex] = this._parent.Phaseangles;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.AA == item))
                {
                    this._parent.AA = null;
                    return true;
                }
                if ((this._parent.Name == item))
                {
                    this._parent.Name = null;
                    return true;
                }
                if ((this._parent.AutoConnect == item))
                {
                    this._parent.AutoConnect = null;
                    return true;
                }
                if ((this._parent.BillingPeriodValues == item))
                {
                    this._parent.BillingPeriodValues = null;
                    return true;
                }
                if ((this._parent.ElectricityID == item))
                {
                    this._parent.ElectricityID = null;
                    return true;
                }
                if ((this._parent.ProgramEntries == item))
                {
                    this._parent.ProgramEntries = null;
                    return true;
                }
                if ((this._parent.OutputPulse == item))
                {
                    this._parent.OutputPulse = null;
                    return true;
                }
                if ((this._parent.ReadingFactor == item))
                {
                    this._parent.ReadingFactor = null;
                    return true;
                }
                if ((this._parent.NominalValues == item))
                {
                    this._parent.NominalValues = null;
                    return true;
                }
                if ((this._parent.InputPulse == item))
                {
                    this._parent.InputPulse = null;
                    return true;
                }
                if ((this._parent.MeasurementPeriod == item))
                {
                    this._parent.MeasurementPeriod = null;
                    return true;
                }
                if ((this._parent.TimeEntries == item))
                {
                    this._parent.TimeEntries = null;
                    return true;
                }
                if ((this._parent.TransformerLineLosses == item))
                {
                    this._parent.TransformerLineLosses = null;
                    return true;
                }
                if ((this._parent.MeasurementAlgorithm == item))
                {
                    this._parent.MeasurementAlgorithm = null;
                    return true;
                }
                if ((this._parent.MeteringPoint == item))
                {
                    this._parent.MeteringPoint = null;
                    return true;
                }
                if ((this._parent.ElectricityRelatedStatus == item))
                {
                    this._parent.ElectricityRelatedStatus = null;
                    return true;
                }
                if ((this._parent.RegisterMonitor == item))
                {
                    this._parent.RegisterMonitor = null;
                    return true;
                }
                if ((this._parent.ElectricityValues == item))
                {
                    this._parent.ElectricityValues = null;
                    return true;
                }
                if ((this._parent.MeasurementValueTypes == item))
                {
                    this._parent.MeasurementValueTypes = null;
                    return true;
                }
                if ((this._parent.Harmonics == item))
                {
                    this._parent.Harmonics = null;
                    return true;
                }
                if ((this._parent.Tariffs == item))
                {
                    this._parent.Tariffs = null;
                    return true;
                }
                if ((this._parent.Phaseangles == item))
                {
                    this._parent.Phaseangles = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.AA).Concat(this._parent.Name).Concat(this._parent.AutoConnect).Concat(this._parent.BillingPeriodValues).Concat(this._parent.ElectricityID).Concat(this._parent.ProgramEntries).Concat(this._parent.OutputPulse).Concat(this._parent.ReadingFactor).Concat(this._parent.NominalValues).Concat(this._parent.InputPulse).Concat(this._parent.MeasurementPeriod).Concat(this._parent.TimeEntries).Concat(this._parent.TransformerLineLosses).Concat(this._parent.MeasurementAlgorithm).Concat(this._parent.MeteringPoint).Concat(this._parent.ElectricityRelatedStatus).Concat(this._parent.RegisterMonitor).Concat(this._parent.ElectricityValues).Concat(this._parent.MeasurementValueTypes).Concat(this._parent.Harmonics).Concat(this._parent.Tariffs).Concat(this._parent.Phaseangles).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ID property
        /// </summary>
        private sealed class IDProxy : ModelPropertyChange<ILogicalDevice, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public IDProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "ID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.ID;
                }
                set
                {
                    this.ModelElement.ID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AA property
        /// </summary>
        private sealed class AAProxy : ModelPropertyChange<ILogicalDevice, ICurrentAssociation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AAProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "AA")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICurrentAssociation Value
            {
                get
                {
                    return this.ModelElement.AA;
                }
                set
                {
                    this.ModelElement.AA = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<ILogicalDevice, ILogicalDeviceName>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ILogicalDeviceName Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the AutoConnect property
        /// </summary>
        private sealed class AutoConnectProxy : ModelPropertyChange<ILogicalDevice, IAutoConnectObject>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AutoConnectProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "AutoConnect")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IAutoConnectObject Value
            {
                get
                {
                    return this.ModelElement.AutoConnect;
                }
                set
                {
                    this.ModelElement.AutoConnect = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BillingPeriodValues property
        /// </summary>
        private sealed class BillingPeriodValuesProxy : ModelPropertyChange<ILogicalDevice, IBillingPeriodValues>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BillingPeriodValuesProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "BillingPeriodValues")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IBillingPeriodValues Value
            {
                get
                {
                    return this.ModelElement.BillingPeriodValues;
                }
                set
                {
                    this.ModelElement.BillingPeriodValues = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ElectricityID property
        /// </summary>
        private sealed class ElectricityIDProxy : ModelPropertyChange<ILogicalDevice, IElectricityID>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ElectricityIDProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "ElectricityID")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectricityID Value
            {
                get
                {
                    return this.ModelElement.ElectricityID;
                }
                set
                {
                    this.ModelElement.ElectricityID = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ProgramEntries property
        /// </summary>
        private sealed class ProgramEntriesProxy : ModelPropertyChange<ILogicalDevice, IElectricityProgramEntries>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ProgramEntriesProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "ProgramEntries")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectricityProgramEntries Value
            {
                get
                {
                    return this.ModelElement.ProgramEntries;
                }
                set
                {
                    this.ModelElement.ProgramEntries = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the OutputPulse property
        /// </summary>
        private sealed class OutputPulseProxy : ModelPropertyChange<ILogicalDevice, IOutputPulseValues_constants>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OutputPulseProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "OutputPulse")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOutputPulseValues_constants Value
            {
                get
                {
                    return this.ModelElement.OutputPulse;
                }
                set
                {
                    this.ModelElement.OutputPulse = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ReadingFactor property
        /// </summary>
        private sealed class ReadingFactorProxy : ModelPropertyChange<ILogicalDevice, IReadingFactorAndCT_VTratio>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ReadingFactorProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "ReadingFactor")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IReadingFactorAndCT_VTratio Value
            {
                get
                {
                    return this.ModelElement.ReadingFactor;
                }
                set
                {
                    this.ModelElement.ReadingFactor = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the NominalValues property
        /// </summary>
        private sealed class NominalValuesProxy : ModelPropertyChange<ILogicalDevice, IElectricityNominalValues>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NominalValuesProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "NominalValues")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectricityNominalValues Value
            {
                get
                {
                    return this.ModelElement.NominalValues;
                }
                set
                {
                    this.ModelElement.NominalValues = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the InputPulse property
        /// </summary>
        private sealed class InputPulseProxy : ModelPropertyChange<ILogicalDevice, IInputPulseValuesOrConstants>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public InputPulseProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "InputPulse")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IInputPulseValuesOrConstants Value
            {
                get
                {
                    return this.ModelElement.InputPulse;
                }
                set
                {
                    this.ModelElement.InputPulse = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeasurementPeriod property
        /// </summary>
        private sealed class MeasurementPeriodProxy : ModelPropertyChange<ILogicalDevice, IMeasurementPeriod_recordingInterval_billingPeriodDuration>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeasurementPeriodProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "MeasurementPeriod")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeasurementPeriod_recordingInterval_billingPeriodDuration Value
            {
                get
                {
                    return this.ModelElement.MeasurementPeriod;
                }
                set
                {
                    this.ModelElement.MeasurementPeriod = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TimeEntries property
        /// </summary>
        private sealed class TimeEntriesProxy : ModelPropertyChange<ILogicalDevice, ITimeEntries>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TimeEntriesProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "TimeEntries")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITimeEntries Value
            {
                get
                {
                    return this.ModelElement.TimeEntries;
                }
                set
                {
                    this.ModelElement.TimeEntries = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the TransformerLineLosses property
        /// </summary>
        private sealed class TransformerLineLossesProxy : ModelPropertyChange<ILogicalDevice, ITransformerAndLineLosses>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TransformerLineLossesProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "TransformerLineLosses")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITransformerAndLineLosses Value
            {
                get
                {
                    return this.ModelElement.TransformerLineLosses;
                }
                set
                {
                    this.ModelElement.TransformerLineLosses = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeasurementAlgorithm property
        /// </summary>
        private sealed class MeasurementAlgorithmProxy : ModelPropertyChange<ILogicalDevice, IMeasurementMethods>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeasurementAlgorithmProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "MeasurementAlgorithm")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeasurementMethods Value
            {
                get
                {
                    return this.ModelElement.MeasurementAlgorithm;
                }
                set
                {
                    this.ModelElement.MeasurementAlgorithm = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeteringPoint property
        /// </summary>
        private sealed class MeteringPointProxy : ModelPropertyChange<ILogicalDevice, IMeteringPointID>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeteringPointProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "MeteringPoint")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeteringPointID Value
            {
                get
                {
                    return this.ModelElement.MeteringPoint;
                }
                set
                {
                    this.ModelElement.MeteringPoint = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ElectricityRelatedStatus property
        /// </summary>
        private sealed class ElectricityRelatedStatusProxy : ModelPropertyChange<ILogicalDevice, IElectricityRelatedStatusData>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ElectricityRelatedStatusProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "ElectricityRelatedStatus")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectricityRelatedStatusData Value
            {
                get
                {
                    return this.ModelElement.ElectricityRelatedStatus;
                }
                set
                {
                    this.ModelElement.ElectricityRelatedStatus = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the RegisterMonitor property
        /// </summary>
        private sealed class RegisterMonitorProxy : ModelPropertyChange<ILogicalDevice, IRegisterMonitorObject>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public RegisterMonitorProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "RegisterMonitor")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IRegisterMonitorObject Value
            {
                get
                {
                    return this.ModelElement.RegisterMonitor;
                }
                set
                {
                    this.ModelElement.RegisterMonitor = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the ElectricityValues property
        /// </summary>
        private sealed class ElectricityValuesProxy : ModelPropertyChange<ILogicalDevice, IElectricityValues>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ElectricityValuesProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "ElectricityValues")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectricityValues Value
            {
                get
                {
                    return this.ModelElement.ElectricityValues;
                }
                set
                {
                    this.ModelElement.ElectricityValues = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the MeasurementValueTypes property
        /// </summary>
        private sealed class MeasurementValueTypesProxy : ModelPropertyChange<ILogicalDevice, IMeasurementValues>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public MeasurementValueTypesProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "MeasurementValueTypes")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IMeasurementValues Value
            {
                get
                {
                    return this.ModelElement.MeasurementValueTypes;
                }
                set
                {
                    this.ModelElement.MeasurementValueTypes = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Harmonics property
        /// </summary>
        private sealed class HarmonicsProxy : ModelPropertyChange<ILogicalDevice, IElectricityHarmonics>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HarmonicsProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "Harmonics")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IElectricityHarmonics Value
            {
                get
                {
                    return this.ModelElement.Harmonics;
                }
                set
                {
                    this.ModelElement.Harmonics = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Tariffs property
        /// </summary>
        private sealed class TariffsProxy : ModelPropertyChange<ILogicalDevice, ICurrentlyActiveTariff>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TariffsProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "Tariffs")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ICurrentlyActiveTariff Value
            {
                get
                {
                    return this.ModelElement.Tariffs;
                }
                set
                {
                    this.ModelElement.Tariffs = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Phaseangles property
        /// </summary>
        private sealed class PhaseanglesProxy : ModelPropertyChange<ILogicalDevice, IExtendedPhaseAngleMeasurement>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PhaseanglesProxy(ILogicalDevice modelElement) : 
                    base(modelElement, "Phaseangles")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IExtendedPhaseAngleMeasurement Value
            {
                get
                {
                    return this.ModelElement.Phaseangles;
                }
                set
                {
                    this.ModelElement.Phaseangles = value;
                }
            }
        }
    }
}

