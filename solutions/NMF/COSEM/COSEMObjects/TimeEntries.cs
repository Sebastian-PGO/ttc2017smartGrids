using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The default implementation of the TimeEntries class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Ti" +
        "meEntries")]
    public partial class TimeEntries : Data, ITimeEntries, IModelElement
    {
        
        /// <summary>
        /// The backing field for the LocalTime property
        /// </summary>
        private string _localTime;
        
        private static Lazy<ITypedElement> _localTimeAttribute = new Lazy<ITypedElement>(RetrieveLocalTimeAttribute);
        
        /// <summary>
        /// The backing field for the LocalDate property
        /// </summary>
        private string _localDate;
        
        private static Lazy<ITypedElement> _localDateAttribute = new Lazy<ITypedElement>(RetrieveLocalDateAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The LocalTime property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string LocalTime
        {
            get
            {
                return this._localTime;
            }
            set
            {
                if ((this._localTime != value))
                {
                    string old = this._localTime;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocalTimeChanging(e);
                    this.OnPropertyChanging("LocalTime", e, _localTimeAttribute);
                    this._localTime = value;
                    this.OnLocalTimeChanged(e);
                    this.OnPropertyChanged("LocalTime", e, _localTimeAttribute);
                }
            }
        }
        
        /// <summary>
        /// The LocalDate property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string LocalDate
        {
            get
            {
                return this._localDate;
            }
            set
            {
                if ((this._localDate != value))
                {
                    string old = this._localDate;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocalDateChanging(e);
                    this.OnPropertyChanging("LocalDate", e, _localDateAttribute);
                    this._localDate = value;
                    this.OnLocalDateChanged(e);
                    this.OnPropertyChanged("LocalDate", e, _localDateAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Ti" +
                            "meEntries")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the LocalTime property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocalTimeChanging;
        
        /// <summary>
        /// Gets fired when the LocalTime property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocalTimeChanged;
        
        /// <summary>
        /// Gets fired before the LocalDate property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocalDateChanging;
        
        /// <summary>
        /// Gets fired when the LocalDate property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocalDateChanged;
        
        private static ITypedElement RetrieveLocalTimeAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TimeEntries.ClassInstance)).Resolve("LocalTime")));
        }
        
        /// <summary>
        /// Raises the LocalTimeChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocalTimeChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocalTimeChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocalTimeChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocalTimeChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocalTimeChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLocalDateAttribute()
        {
            return ((ITypedElement)(((ModelElement)(TimeEntries.ClassInstance)).Resolve("LocalDate")));
        }
        
        /// <summary>
        /// Raises the LocalDateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocalDateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocalDateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocalDateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocalDateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocalDateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "LOCALTIME"))
            {
                return this.LocalTime;
            }
            if ((attribute == "LOCALDATE"))
            {
                return this.LocalDate;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "LOCALTIME"))
            {
                this.LocalTime = ((string)(value));
                return;
            }
            if ((feature == "LOCALDATE"))
            {
                this.LocalDate = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Ti" +
                        "meEntries")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LocalTime property
        /// </summary>
        private sealed class LocalTimeProxy : ModelPropertyChange<ITimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocalTimeProxy(ITimeEntries modelElement) : 
                    base(modelElement, "LocalTime")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.LocalTime;
                }
                set
                {
                    this.ModelElement.LocalTime = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the LocalDate property
        /// </summary>
        private sealed class LocalDateProxy : ModelPropertyChange<ITimeEntries, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocalDateProxy(ITimeEntries modelElement) : 
                    base(modelElement, "LocalDate")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.LocalDate;
                }
                set
                {
                    this.ModelElement.LocalDate = value;
                }
            }
        }
    }
}

