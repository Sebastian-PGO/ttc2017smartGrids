//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The default implementation of the SingleActionScheduleObject class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Si" +
        "ngleActionScheduleObject")]
    public partial class SingleActionScheduleObject : Singleactionschedule, ISingleActionScheduleObject, IModelElement
    {
        
        private static Lazy<ITypedElement> _disconnectReference = new Lazy<ITypedElement>(RetrieveDisconnectReference);
        
        /// <summary>
        /// The backing field for the Disconnect property
        /// </summary>
        private IDisconnectControlSchedule _disconnect;
        
        private static Lazy<ITypedElement> _billingPeriodEndReference = new Lazy<ITypedElement>(RetrieveBillingPeriodEndReference);
        
        /// <summary>
        /// The backing field for the BillingPeriodEnd property
        /// </summary>
        private IEndOfBillingPeriodSchedule _billingPeriodEnd;
        
        private static Lazy<ITypedElement> _imageReference = new Lazy<ITypedElement>(RetrieveImageReference);
        
        /// <summary>
        /// The backing field for the Image property
        /// </summary>
        private IImageActivationSchedule _image;
        
        private static Lazy<ITypedElement> _outputReference = new Lazy<ITypedElement>(RetrieveOutputReference);
        
        /// <summary>
        /// The backing field for the Output property
        /// </summary>
        private IOutputControlSchedule _output;
        
        private static Lazy<ITypedElement> _pushReference = new Lazy<ITypedElement>(RetrievePushReference);
        
        /// <summary>
        /// The backing field for the Push property
        /// </summary>
        private IPushSchedule _push;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The disconnect property
        /// </summary>
        [XmlElementNameAttribute("disconnect")]
        [XmlAttributeAttribute(true)]
        public virtual IDisconnectControlSchedule Disconnect
        {
            get
            {
                return this._disconnect;
            }
            set
            {
                if ((this._disconnect != value))
                {
                    IDisconnectControlSchedule old = this._disconnect;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDisconnectChanging(e);
                    this.OnPropertyChanging("Disconnect", e, _disconnectReference);
                    this._disconnect = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetDisconnect;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetDisconnect;
                    }
                    this.OnDisconnectChanged(e);
                    this.OnPropertyChanged("Disconnect", e, _disconnectReference);
                }
            }
        }
        
        /// <summary>
        /// The BillingPeriodEnd property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IEndOfBillingPeriodSchedule BillingPeriodEnd
        {
            get
            {
                return this._billingPeriodEnd;
            }
            set
            {
                if ((this._billingPeriodEnd != value))
                {
                    IEndOfBillingPeriodSchedule old = this._billingPeriodEnd;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnBillingPeriodEndChanging(e);
                    this.OnPropertyChanging("BillingPeriodEnd", e, _billingPeriodEndReference);
                    this._billingPeriodEnd = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetBillingPeriodEnd;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetBillingPeriodEnd;
                    }
                    this.OnBillingPeriodEndChanged(e);
                    this.OnPropertyChanged("BillingPeriodEnd", e, _billingPeriodEndReference);
                }
            }
        }
        
        /// <summary>
        /// The Image property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IImageActivationSchedule Image
        {
            get
            {
                return this._image;
            }
            set
            {
                if ((this._image != value))
                {
                    IImageActivationSchedule old = this._image;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnImageChanging(e);
                    this.OnPropertyChanging("Image", e, _imageReference);
                    this._image = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetImage;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetImage;
                    }
                    this.OnImageChanged(e);
                    this.OnPropertyChanged("Image", e, _imageReference);
                }
            }
        }
        
        /// <summary>
        /// The Output property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IOutputControlSchedule Output
        {
            get
            {
                return this._output;
            }
            set
            {
                if ((this._output != value))
                {
                    IOutputControlSchedule old = this._output;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOutputChanging(e);
                    this.OnPropertyChanging("Output", e, _outputReference);
                    this._output = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOutput;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOutput;
                    }
                    this.OnOutputChanged(e);
                    this.OnPropertyChanged("Output", e, _outputReference);
                }
            }
        }
        
        /// <summary>
        /// The Push property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual IPushSchedule Push
        {
            get
            {
                return this._push;
            }
            set
            {
                if ((this._push != value))
                {
                    IPushSchedule old = this._push;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPushChanging(e);
                    this.OnPropertyChanging("Push", e, _pushReference);
                    this._push = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetPush;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetPush;
                    }
                    this.OnPushChanged(e);
                    this.OnPropertyChanged("Push", e, _pushReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SingleActionScheduleObjectReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Si" +
                            "ngleActionScheduleObject")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Disconnect property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DisconnectChanging;
        
        /// <summary>
        /// Gets fired when the Disconnect property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DisconnectChanged;
        
        /// <summary>
        /// Gets fired before the BillingPeriodEnd property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillingPeriodEndChanging;
        
        /// <summary>
        /// Gets fired when the BillingPeriodEnd property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> BillingPeriodEndChanged;
        
        /// <summary>
        /// Gets fired before the Image property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImageChanging;
        
        /// <summary>
        /// Gets fired when the Image property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> ImageChanged;
        
        /// <summary>
        /// Gets fired before the Output property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OutputChanging;
        
        /// <summary>
        /// Gets fired when the Output property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OutputChanged;
        
        /// <summary>
        /// Gets fired before the Push property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PushChanging;
        
        /// <summary>
        /// Gets fired when the Push property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PushChanged;
        
        private static ITypedElement RetrieveDisconnectReference()
        {
            return ((ITypedElement)(((ModelElement)(SingleActionScheduleObject.ClassInstance)).Resolve("disconnect")));
        }
        
        /// <summary>
        /// Raises the DisconnectChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDisconnectChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DisconnectChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DisconnectChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDisconnectChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DisconnectChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Disconnect property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetDisconnect(object sender, System.EventArgs eventArgs)
        {
            this.Disconnect = null;
        }
        
        private static ITypedElement RetrieveBillingPeriodEndReference()
        {
            return ((ITypedElement)(((ModelElement)(SingleActionScheduleObject.ClassInstance)).Resolve("BillingPeriodEnd")));
        }
        
        /// <summary>
        /// Raises the BillingPeriodEndChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingPeriodEndChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillingPeriodEndChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the BillingPeriodEndChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnBillingPeriodEndChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.BillingPeriodEndChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the BillingPeriodEnd property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetBillingPeriodEnd(object sender, System.EventArgs eventArgs)
        {
            this.BillingPeriodEnd = null;
        }
        
        private static ITypedElement RetrieveImageReference()
        {
            return ((ITypedElement)(((ModelElement)(SingleActionScheduleObject.ClassInstance)).Resolve("Image")));
        }
        
        /// <summary>
        /// Raises the ImageChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImageChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImageChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the ImageChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnImageChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.ImageChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Image property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetImage(object sender, System.EventArgs eventArgs)
        {
            this.Image = null;
        }
        
        private static ITypedElement RetrieveOutputReference()
        {
            return ((ITypedElement)(((ModelElement)(SingleActionScheduleObject.ClassInstance)).Resolve("Output")));
        }
        
        /// <summary>
        /// Raises the OutputChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutputChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OutputChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OutputChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOutputChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OutputChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Output property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOutput(object sender, System.EventArgs eventArgs)
        {
            this.Output = null;
        }
        
        private static ITypedElement RetrievePushReference()
        {
            return ((ITypedElement)(((ModelElement)(SingleActionScheduleObject.ClassInstance)).Resolve("Push")));
        }
        
        /// <summary>
        /// Raises the PushChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPushChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PushChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PushChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPushChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PushChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Push property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetPush(object sender, System.EventArgs eventArgs)
        {
            this.Push = null;
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "DISCONNECT"))
            {
                this.Disconnect = ((IDisconnectControlSchedule)(value));
                return;
            }
            if ((feature == "BILLINGPERIODEND"))
            {
                this.BillingPeriodEnd = ((IEndOfBillingPeriodSchedule)(value));
                return;
            }
            if ((feature == "IMAGE"))
            {
                this.Image = ((IImageActivationSchedule)(value));
                return;
            }
            if ((feature == "OUTPUT"))
            {
                this.Output = ((IOutputControlSchedule)(value));
                return;
            }
            if ((feature == "PUSH"))
            {
                this.Push = ((IPushSchedule)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "Disconnect"))
            {
                return new DisconnectProxy(this);
            }
            if ((attribute == "BillingPeriodEnd"))
            {
                return new BillingPeriodEndProxy(this);
            }
            if ((attribute == "Image"))
            {
                return new ImageProxy(this);
            }
            if ((attribute == "Output"))
            {
                return new OutputProxy(this);
            }
            if ((attribute == "Push"))
            {
                return new PushProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "Disconnect"))
            {
                return new DisconnectProxy(this);
            }
            if ((reference == "BillingPeriodEnd"))
            {
                return new BillingPeriodEndProxy(this);
            }
            if ((reference == "Image"))
            {
                return new ImageProxy(this);
            }
            if ((reference == "Output"))
            {
                return new OutputProxy(this);
            }
            if ((reference == "Push"))
            {
                return new PushProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Si" +
                        "ngleActionScheduleObject")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the SingleActionScheduleObject class
        /// </summary>
        public class SingleActionScheduleObjectReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SingleActionScheduleObject _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SingleActionScheduleObjectReferencedElementsCollection(SingleActionScheduleObject parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Disconnect != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.BillingPeriodEnd != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Image != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Output != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.Push != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.DisconnectChanged += this.PropagateValueChanges;
                this._parent.BillingPeriodEndChanged += this.PropagateValueChanges;
                this._parent.ImageChanged += this.PropagateValueChanges;
                this._parent.OutputChanged += this.PropagateValueChanges;
                this._parent.PushChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.DisconnectChanged -= this.PropagateValueChanges;
                this._parent.BillingPeriodEndChanged -= this.PropagateValueChanges;
                this._parent.ImageChanged -= this.PropagateValueChanges;
                this._parent.OutputChanged -= this.PropagateValueChanges;
                this._parent.PushChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Disconnect == null))
                {
                    IDisconnectControlSchedule disconnectCasted = item.As<IDisconnectControlSchedule>();
                    if ((disconnectCasted != null))
                    {
                        this._parent.Disconnect = disconnectCasted;
                        return;
                    }
                }
                if ((this._parent.BillingPeriodEnd == null))
                {
                    IEndOfBillingPeriodSchedule billingPeriodEndCasted = item.As<IEndOfBillingPeriodSchedule>();
                    if ((billingPeriodEndCasted != null))
                    {
                        this._parent.BillingPeriodEnd = billingPeriodEndCasted;
                        return;
                    }
                }
                if ((this._parent.Image == null))
                {
                    IImageActivationSchedule imageCasted = item.As<IImageActivationSchedule>();
                    if ((imageCasted != null))
                    {
                        this._parent.Image = imageCasted;
                        return;
                    }
                }
                if ((this._parent.Output == null))
                {
                    IOutputControlSchedule outputCasted = item.As<IOutputControlSchedule>();
                    if ((outputCasted != null))
                    {
                        this._parent.Output = outputCasted;
                        return;
                    }
                }
                if ((this._parent.Push == null))
                {
                    IPushSchedule pushCasted = item.As<IPushSchedule>();
                    if ((pushCasted != null))
                    {
                        this._parent.Push = pushCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Disconnect = null;
                this._parent.BillingPeriodEnd = null;
                this._parent.Image = null;
                this._parent.Output = null;
                this._parent.Push = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Disconnect))
                {
                    return true;
                }
                if ((item == this._parent.BillingPeriodEnd))
                {
                    return true;
                }
                if ((item == this._parent.Image))
                {
                    return true;
                }
                if ((item == this._parent.Output))
                {
                    return true;
                }
                if ((item == this._parent.Push))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Disconnect != null))
                {
                    array[arrayIndex] = this._parent.Disconnect;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.BillingPeriodEnd != null))
                {
                    array[arrayIndex] = this._parent.BillingPeriodEnd;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Image != null))
                {
                    array[arrayIndex] = this._parent.Image;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Output != null))
                {
                    array[arrayIndex] = this._parent.Output;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.Push != null))
                {
                    array[arrayIndex] = this._parent.Push;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Disconnect == item))
                {
                    this._parent.Disconnect = null;
                    return true;
                }
                if ((this._parent.BillingPeriodEnd == item))
                {
                    this._parent.BillingPeriodEnd = null;
                    return true;
                }
                if ((this._parent.Image == item))
                {
                    this._parent.Image = null;
                    return true;
                }
                if ((this._parent.Output == item))
                {
                    this._parent.Output = null;
                    return true;
                }
                if ((this._parent.Push == item))
                {
                    this._parent.Push = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Disconnect).Concat(this._parent.BillingPeriodEnd).Concat(this._parent.Image).Concat(this._parent.Output).Concat(this._parent.Push).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the disconnect property
        /// </summary>
        private sealed class DisconnectProxy : ModelPropertyChange<ISingleActionScheduleObject, IDisconnectControlSchedule>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DisconnectProxy(ISingleActionScheduleObject modelElement) : 
                    base(modelElement, "disconnect")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IDisconnectControlSchedule Value
            {
                get
                {
                    return this.ModelElement.Disconnect;
                }
                set
                {
                    this.ModelElement.Disconnect = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the BillingPeriodEnd property
        /// </summary>
        private sealed class BillingPeriodEndProxy : ModelPropertyChange<ISingleActionScheduleObject, IEndOfBillingPeriodSchedule>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public BillingPeriodEndProxy(ISingleActionScheduleObject modelElement) : 
                    base(modelElement, "BillingPeriodEnd")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IEndOfBillingPeriodSchedule Value
            {
                get
                {
                    return this.ModelElement.BillingPeriodEnd;
                }
                set
                {
                    this.ModelElement.BillingPeriodEnd = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Image property
        /// </summary>
        private sealed class ImageProxy : ModelPropertyChange<ISingleActionScheduleObject, IImageActivationSchedule>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public ImageProxy(ISingleActionScheduleObject modelElement) : 
                    base(modelElement, "Image")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IImageActivationSchedule Value
            {
                get
                {
                    return this.ModelElement.Image;
                }
                set
                {
                    this.ModelElement.Image = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Output property
        /// </summary>
        private sealed class OutputProxy : ModelPropertyChange<ISingleActionScheduleObject, IOutputControlSchedule>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OutputProxy(ISingleActionScheduleObject modelElement) : 
                    base(modelElement, "Output")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IOutputControlSchedule Value
            {
                get
                {
                    return this.ModelElement.Output;
                }
                set
                {
                    this.ModelElement.Output = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Push property
        /// </summary>
        private sealed class PushProxy : ModelPropertyChange<ISingleActionScheduleObject, IPushSchedule>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PushProxy(ISingleActionScheduleObject modelElement) : 
                    base(modelElement, "Push")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IPushSchedule Value
            {
                get
                {
                    return this.ModelElement.Push;
                }
                set
                {
                    this.ModelElement.Push = value;
                }
            }
        }
    }
}

