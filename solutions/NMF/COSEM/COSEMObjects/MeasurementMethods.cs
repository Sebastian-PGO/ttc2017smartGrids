using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The default implementation of the MeasurementMethods class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Me" +
        "asurementMethods")]
    public partial class MeasurementMethods : Data, IMeasurementMethods, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Algorithm_for_active_power_measurement property
        /// </summary>
        private string _algorithm_for_active_power_measurement;
        
        private static Lazy<ITypedElement> _algorithm_for_active_power_measurementAttribute = new Lazy<ITypedElement>(RetrieveAlgorithm_for_active_power_measurementAttribute);
        
        /// <summary>
        /// The backing field for the Algorithm_for_active_energy_management property
        /// </summary>
        private string _algorithm_for_active_energy_management;
        
        private static Lazy<ITypedElement> _algorithm_for_active_energy_managementAttribute = new Lazy<ITypedElement>(RetrieveAlgorithm_for_active_energy_managementAttribute);
        
        /// <summary>
        /// The backing field for the Algorithm_for_reactive_power_measurement property
        /// </summary>
        private string _algorithm_for_reactive_power_measurement;
        
        private static Lazy<ITypedElement> _algorithm_for_reactive_power_measurementAttribute = new Lazy<ITypedElement>(RetrieveAlgorithm_for_reactive_power_measurementAttribute);
        
        /// <summary>
        /// The backing field for the Algorithm_for_reactive_energy_measurement property
        /// </summary>
        private string _algorithm_for_reactive_energy_measurement;
        
        private static Lazy<ITypedElement> _algorithm_for_reactive_energy_measurementAttribute = new Lazy<ITypedElement>(RetrieveAlgorithm_for_reactive_energy_measurementAttribute);
        
        /// <summary>
        /// The backing field for the Algorithm_for_apparent_power_measurement property
        /// </summary>
        private string _algorithm_for_apparent_power_measurement;
        
        private static Lazy<ITypedElement> _algorithm_for_apparent_power_measurementAttribute = new Lazy<ITypedElement>(RetrieveAlgorithm_for_apparent_power_measurementAttribute);
        
        /// <summary>
        /// The backing field for the Algorithm_for_apparent_energy_measurement property
        /// </summary>
        private string _algorithm_for_apparent_energy_measurement;
        
        private static Lazy<ITypedElement> _algorithm_for_apparent_energy_measurementAttribute = new Lazy<ITypedElement>(RetrieveAlgorithm_for_apparent_energy_measurementAttribute);
        
        /// <summary>
        /// The backing field for the Algorithm_for_power_factor_calculation property
        /// </summary>
        private string _algorithm_for_power_factor_calculation;
        
        private static Lazy<ITypedElement> _algorithm_for_power_factor_calculationAttribute = new Lazy<ITypedElement>(RetrieveAlgorithm_for_power_factor_calculationAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The Algorithm_for_active_power_measurement property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Algorithm_for_active_power_measurement
        {
            get
            {
                return this._algorithm_for_active_power_measurement;
            }
            set
            {
                if ((this._algorithm_for_active_power_measurement != value))
                {
                    string old = this._algorithm_for_active_power_measurement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAlgorithm_for_active_power_measurementChanging(e);
                    this.OnPropertyChanging("Algorithm_for_active_power_measurement", e, _algorithm_for_active_power_measurementAttribute);
                    this._algorithm_for_active_power_measurement = value;
                    this.OnAlgorithm_for_active_power_measurementChanged(e);
                    this.OnPropertyChanged("Algorithm_for_active_power_measurement", e, _algorithm_for_active_power_measurementAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Algorithm_for_active_energy_management property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Algorithm_for_active_energy_management
        {
            get
            {
                return this._algorithm_for_active_energy_management;
            }
            set
            {
                if ((this._algorithm_for_active_energy_management != value))
                {
                    string old = this._algorithm_for_active_energy_management;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAlgorithm_for_active_energy_managementChanging(e);
                    this.OnPropertyChanging("Algorithm_for_active_energy_management", e, _algorithm_for_active_energy_managementAttribute);
                    this._algorithm_for_active_energy_management = value;
                    this.OnAlgorithm_for_active_energy_managementChanged(e);
                    this.OnPropertyChanged("Algorithm_for_active_energy_management", e, _algorithm_for_active_energy_managementAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Algorithm_for_reactive_power_measurement property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Algorithm_for_reactive_power_measurement
        {
            get
            {
                return this._algorithm_for_reactive_power_measurement;
            }
            set
            {
                if ((this._algorithm_for_reactive_power_measurement != value))
                {
                    string old = this._algorithm_for_reactive_power_measurement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAlgorithm_for_reactive_power_measurementChanging(e);
                    this.OnPropertyChanging("Algorithm_for_reactive_power_measurement", e, _algorithm_for_reactive_power_measurementAttribute);
                    this._algorithm_for_reactive_power_measurement = value;
                    this.OnAlgorithm_for_reactive_power_measurementChanged(e);
                    this.OnPropertyChanged("Algorithm_for_reactive_power_measurement", e, _algorithm_for_reactive_power_measurementAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Algorithm_for_reactive_energy_measurement property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Algorithm_for_reactive_energy_measurement
        {
            get
            {
                return this._algorithm_for_reactive_energy_measurement;
            }
            set
            {
                if ((this._algorithm_for_reactive_energy_measurement != value))
                {
                    string old = this._algorithm_for_reactive_energy_measurement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAlgorithm_for_reactive_energy_measurementChanging(e);
                    this.OnPropertyChanging("Algorithm_for_reactive_energy_measurement", e, _algorithm_for_reactive_energy_measurementAttribute);
                    this._algorithm_for_reactive_energy_measurement = value;
                    this.OnAlgorithm_for_reactive_energy_measurementChanged(e);
                    this.OnPropertyChanged("Algorithm_for_reactive_energy_measurement", e, _algorithm_for_reactive_energy_measurementAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Algorithm_for_apparent_power_measurement property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Algorithm_for_apparent_power_measurement
        {
            get
            {
                return this._algorithm_for_apparent_power_measurement;
            }
            set
            {
                if ((this._algorithm_for_apparent_power_measurement != value))
                {
                    string old = this._algorithm_for_apparent_power_measurement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAlgorithm_for_apparent_power_measurementChanging(e);
                    this.OnPropertyChanging("Algorithm_for_apparent_power_measurement", e, _algorithm_for_apparent_power_measurementAttribute);
                    this._algorithm_for_apparent_power_measurement = value;
                    this.OnAlgorithm_for_apparent_power_measurementChanged(e);
                    this.OnPropertyChanged("Algorithm_for_apparent_power_measurement", e, _algorithm_for_apparent_power_measurementAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Algorithm_for_apparent_energy_measurement property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Algorithm_for_apparent_energy_measurement
        {
            get
            {
                return this._algorithm_for_apparent_energy_measurement;
            }
            set
            {
                if ((this._algorithm_for_apparent_energy_measurement != value))
                {
                    string old = this._algorithm_for_apparent_energy_measurement;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAlgorithm_for_apparent_energy_measurementChanging(e);
                    this.OnPropertyChanging("Algorithm_for_apparent_energy_measurement", e, _algorithm_for_apparent_energy_measurementAttribute);
                    this._algorithm_for_apparent_energy_measurement = value;
                    this.OnAlgorithm_for_apparent_energy_measurementChanged(e);
                    this.OnPropertyChanged("Algorithm_for_apparent_energy_measurement", e, _algorithm_for_apparent_energy_measurementAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Algorithm_for_power_factor_calculation property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual string Algorithm_for_power_factor_calculation
        {
            get
            {
                return this._algorithm_for_power_factor_calculation;
            }
            set
            {
                if ((this._algorithm_for_power_factor_calculation != value))
                {
                    string old = this._algorithm_for_power_factor_calculation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAlgorithm_for_power_factor_calculationChanging(e);
                    this.OnPropertyChanging("Algorithm_for_power_factor_calculation", e, _algorithm_for_power_factor_calculationAttribute);
                    this._algorithm_for_power_factor_calculation = value;
                    this.OnAlgorithm_for_power_factor_calculationChanged(e);
                    this.OnPropertyChanged("Algorithm_for_power_factor_calculation", e, _algorithm_for_power_factor_calculationAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Me" +
                            "asurementMethods")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Algorithm_for_active_power_measurement property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Algorithm_for_active_power_measurementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_active_power_measurement property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Algorithm_for_active_power_measurementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_active_energy_management property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Algorithm_for_active_energy_managementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_active_energy_management property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Algorithm_for_active_energy_managementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_reactive_power_measurement property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Algorithm_for_reactive_power_measurementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_reactive_power_measurement property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Algorithm_for_reactive_power_measurementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_reactive_energy_measurement property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Algorithm_for_reactive_energy_measurementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_reactive_energy_measurement property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Algorithm_for_reactive_energy_measurementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_apparent_power_measurement property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Algorithm_for_apparent_power_measurementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_apparent_power_measurement property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Algorithm_for_apparent_power_measurementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_apparent_energy_measurement property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Algorithm_for_apparent_energy_measurementChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_apparent_energy_measurement property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Algorithm_for_apparent_energy_measurementChanged;
        
        /// <summary>
        /// Gets fired before the Algorithm_for_power_factor_calculation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Algorithm_for_power_factor_calculationChanging;
        
        /// <summary>
        /// Gets fired when the Algorithm_for_power_factor_calculation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Algorithm_for_power_factor_calculationChanged;
        
        private static ITypedElement RetrieveAlgorithm_for_active_power_measurementAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementMethods.ClassInstance)).Resolve("Algorithm_for_active_power_measurement")));
        }
        
        /// <summary>
        /// Raises the Algorithm_for_active_power_measurementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_active_power_measurementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_active_power_measurementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Algorithm_for_active_power_measurementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_active_power_measurementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_active_power_measurementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAlgorithm_for_active_energy_managementAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementMethods.ClassInstance)).Resolve("Algorithm_for_active_energy_management")));
        }
        
        /// <summary>
        /// Raises the Algorithm_for_active_energy_managementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_active_energy_managementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_active_energy_managementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Algorithm_for_active_energy_managementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_active_energy_managementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_active_energy_managementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAlgorithm_for_reactive_power_measurementAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementMethods.ClassInstance)).Resolve("Algorithm_for_reactive_power_measurement")));
        }
        
        /// <summary>
        /// Raises the Algorithm_for_reactive_power_measurementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_reactive_power_measurementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_reactive_power_measurementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Algorithm_for_reactive_power_measurementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_reactive_power_measurementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_reactive_power_measurementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAlgorithm_for_reactive_energy_measurementAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementMethods.ClassInstance)).Resolve("Algorithm_for_reactive_energy_measurement")));
        }
        
        /// <summary>
        /// Raises the Algorithm_for_reactive_energy_measurementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_reactive_energy_measurementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_reactive_energy_measurementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Algorithm_for_reactive_energy_measurementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_reactive_energy_measurementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_reactive_energy_measurementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAlgorithm_for_apparent_power_measurementAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementMethods.ClassInstance)).Resolve("Algorithm_for_apparent_power_measurement")));
        }
        
        /// <summary>
        /// Raises the Algorithm_for_apparent_power_measurementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_apparent_power_measurementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_apparent_power_measurementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Algorithm_for_apparent_power_measurementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_apparent_power_measurementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_apparent_power_measurementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAlgorithm_for_apparent_energy_measurementAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementMethods.ClassInstance)).Resolve("Algorithm_for_apparent_energy_measurement")));
        }
        
        /// <summary>
        /// Raises the Algorithm_for_apparent_energy_measurementChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_apparent_energy_measurementChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_apparent_energy_measurementChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Algorithm_for_apparent_energy_measurementChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_apparent_energy_measurementChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_apparent_energy_measurementChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAlgorithm_for_power_factor_calculationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(MeasurementMethods.ClassInstance)).Resolve("Algorithm_for_power_factor_calculation")));
        }
        
        /// <summary>
        /// Raises the Algorithm_for_power_factor_calculationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_power_factor_calculationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_power_factor_calculationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Algorithm_for_power_factor_calculationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAlgorithm_for_power_factor_calculationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Algorithm_for_power_factor_calculationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "ALGORITHM_FOR_ACTIVE_POWER_MEASUREMENT"))
            {
                return this.Algorithm_for_active_power_measurement;
            }
            if ((attribute == "ALGORITHM_FOR_ACTIVE_ENERGY_MANAGEMENT"))
            {
                return this.Algorithm_for_active_energy_management;
            }
            if ((attribute == "ALGORITHM_FOR_REACTIVE_POWER_MEASUREMENT"))
            {
                return this.Algorithm_for_reactive_power_measurement;
            }
            if ((attribute == "ALGORITHM_FOR_REACTIVE_ENERGY_MEASUREMENT"))
            {
                return this.Algorithm_for_reactive_energy_measurement;
            }
            if ((attribute == "ALGORITHM_FOR_APPARENT_POWER_MEASUREMENT"))
            {
                return this.Algorithm_for_apparent_power_measurement;
            }
            if ((attribute == "ALGORITHM_FOR_APPARENT_ENERGY_MEASUREMENT"))
            {
                return this.Algorithm_for_apparent_energy_measurement;
            }
            if ((attribute == "ALGORITHM_FOR_POWER_FACTOR_CALCULATION"))
            {
                return this.Algorithm_for_power_factor_calculation;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "ALGORITHM_FOR_ACTIVE_POWER_MEASUREMENT"))
            {
                this.Algorithm_for_active_power_measurement = ((string)(value));
                return;
            }
            if ((feature == "ALGORITHM_FOR_ACTIVE_ENERGY_MANAGEMENT"))
            {
                this.Algorithm_for_active_energy_management = ((string)(value));
                return;
            }
            if ((feature == "ALGORITHM_FOR_REACTIVE_POWER_MEASUREMENT"))
            {
                this.Algorithm_for_reactive_power_measurement = ((string)(value));
                return;
            }
            if ((feature == "ALGORITHM_FOR_REACTIVE_ENERGY_MEASUREMENT"))
            {
                this.Algorithm_for_reactive_energy_measurement = ((string)(value));
                return;
            }
            if ((feature == "ALGORITHM_FOR_APPARENT_POWER_MEASUREMENT"))
            {
                this.Algorithm_for_apparent_power_measurement = ((string)(value));
                return;
            }
            if ((feature == "ALGORITHM_FOR_APPARENT_ENERGY_MEASUREMENT"))
            {
                this.Algorithm_for_apparent_energy_measurement = ((string)(value));
                return;
            }
            if ((feature == "ALGORITHM_FOR_POWER_FACTOR_CALCULATION"))
            {
                this.Algorithm_for_power_factor_calculation = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/Me" +
                        "asurementMethods")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Algorithm_for_active_power_measurement property
        /// </summary>
        private sealed class Algorithm_for_active_power_measurementProxy : ModelPropertyChange<IMeasurementMethods, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Algorithm_for_active_power_measurementProxy(IMeasurementMethods modelElement) : 
                    base(modelElement, "Algorithm_for_active_power_measurement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Algorithm_for_active_power_measurement;
                }
                set
                {
                    this.ModelElement.Algorithm_for_active_power_measurement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Algorithm_for_active_energy_management property
        /// </summary>
        private sealed class Algorithm_for_active_energy_managementProxy : ModelPropertyChange<IMeasurementMethods, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Algorithm_for_active_energy_managementProxy(IMeasurementMethods modelElement) : 
                    base(modelElement, "Algorithm_for_active_energy_management")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Algorithm_for_active_energy_management;
                }
                set
                {
                    this.ModelElement.Algorithm_for_active_energy_management = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Algorithm_for_reactive_power_measurement property
        /// </summary>
        private sealed class Algorithm_for_reactive_power_measurementProxy : ModelPropertyChange<IMeasurementMethods, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Algorithm_for_reactive_power_measurementProxy(IMeasurementMethods modelElement) : 
                    base(modelElement, "Algorithm_for_reactive_power_measurement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Algorithm_for_reactive_power_measurement;
                }
                set
                {
                    this.ModelElement.Algorithm_for_reactive_power_measurement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Algorithm_for_reactive_energy_measurement property
        /// </summary>
        private sealed class Algorithm_for_reactive_energy_measurementProxy : ModelPropertyChange<IMeasurementMethods, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Algorithm_for_reactive_energy_measurementProxy(IMeasurementMethods modelElement) : 
                    base(modelElement, "Algorithm_for_reactive_energy_measurement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Algorithm_for_reactive_energy_measurement;
                }
                set
                {
                    this.ModelElement.Algorithm_for_reactive_energy_measurement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Algorithm_for_apparent_power_measurement property
        /// </summary>
        private sealed class Algorithm_for_apparent_power_measurementProxy : ModelPropertyChange<IMeasurementMethods, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Algorithm_for_apparent_power_measurementProxy(IMeasurementMethods modelElement) : 
                    base(modelElement, "Algorithm_for_apparent_power_measurement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Algorithm_for_apparent_power_measurement;
                }
                set
                {
                    this.ModelElement.Algorithm_for_apparent_power_measurement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Algorithm_for_apparent_energy_measurement property
        /// </summary>
        private sealed class Algorithm_for_apparent_energy_measurementProxy : ModelPropertyChange<IMeasurementMethods, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Algorithm_for_apparent_energy_measurementProxy(IMeasurementMethods modelElement) : 
                    base(modelElement, "Algorithm_for_apparent_energy_measurement")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Algorithm_for_apparent_energy_measurement;
                }
                set
                {
                    this.ModelElement.Algorithm_for_apparent_energy_measurement = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Algorithm_for_power_factor_calculation property
        /// </summary>
        private sealed class Algorithm_for_power_factor_calculationProxy : ModelPropertyChange<IMeasurementMethods, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Algorithm_for_power_factor_calculationProxy(IMeasurementMethods modelElement) : 
                    base(modelElement, "Algorithm_for_power_factor_calculation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Algorithm_for_power_factor_calculation;
                }
                set
                {
                    this.ModelElement.Algorithm_for_power_factor_calculation = value;
                }
            }
        }
    }
}

