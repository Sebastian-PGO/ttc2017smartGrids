using System.Collections.Specialized;
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The public interface for SingleActionScheduleObject
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(SingleActionScheduleObject))]
    [XmlDefaultImplementationTypeAttribute(typeof(SingleActionScheduleObject))]
    public interface ISingleActionScheduleObject : IModelElement, ISingleactionschedule
    {
        
        /// <summary>
        /// The disconnect property
        /// </summary>
        IDisconnectControlSchedule Disconnect
        {
            get;
            set;
        }
        
        /// <summary>
        /// The BillingPeriodEnd property
        /// </summary>
        IEndOfBillingPeriodSchedule BillingPeriodEnd
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Image property
        /// </summary>
        IImageActivationSchedule Image
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Output property
        /// </summary>
        IOutputControlSchedule Output
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Push property
        /// </summary>
        IPushSchedule Push
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Disconnect property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DisconnectChanging;
        
        /// <summary>
        /// Gets fired when the Disconnect property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DisconnectChanged;
        
        /// <summary>
        /// Gets fired before the BillingPeriodEnd property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BillingPeriodEndChanging;
        
        /// <summary>
        /// Gets fired when the BillingPeriodEnd property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> BillingPeriodEndChanged;
        
        /// <summary>
        /// Gets fired before the Image property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImageChanging;
        
        /// <summary>
        /// Gets fired when the Image property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> ImageChanged;
        
        /// <summary>
        /// Gets fired before the Output property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OutputChanging;
        
        /// <summary>
        /// Gets fired when the Output property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OutputChanged;
        
        /// <summary>
        /// Gets fired before the Push property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PushChanging;
        
        /// <summary>
        /// Gets fired when the Push property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PushChanged;
    }
}

