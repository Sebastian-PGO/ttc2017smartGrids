//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The public interface for MeasurementValues
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(MeasurementValues))]
    [XmlDefaultImplementationTypeAttribute(typeof(MeasurementValues))]
    public interface IMeasurementValues : IModelElement, IData
    {
        
        /// <summary>
        /// The Billing_period_average property
        /// </summary>
        Nullable<double> Billing_period_average
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Cumulative_minimum property
        /// </summary>
        Nullable<double> Cumulative_minimum
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Cumulative_maximum property
        /// </summary>
        Nullable<double> Cumulative_maximum
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Minimum property
        /// </summary>
        Nullable<double> Minimum
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Current_average property
        /// </summary>
        Nullable<double> Current_average
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Last_average property
        /// </summary>
        Nullable<double> Last_average
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Maximum property
        /// </summary>
        Nullable<double> Maximum
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Instantaneous_value property
        /// </summary>
        Nullable<double> Instantaneous_value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Time_integral property
        /// </summary>
        Nullable<double> Time_integral
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Under_limit_threshold property
        /// </summary>
        Nullable<double> Under_limit_threshold
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Under_limit_occurrence_counter property
        /// </summary>
        Nullable<double> Under_limit_occurrence_counter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Under_limit_duration property
        /// </summary>
        Nullable<double> Under_limit_duration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Under_limit_magnitude property
        /// </summary>
        Nullable<double> Under_limit_magnitude
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Over_limit_threshold property
        /// </summary>
        Nullable<double> Over_limit_threshold
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Over_limit_occurrence_counter property
        /// </summary>
        Nullable<double> Over_limit_occurrence_counter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Over_limit_duration property
        /// </summary>
        Nullable<double> Over_limit_duration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Over_limit_magnitude property
        /// </summary>
        Nullable<double> Over_limit_magnitude
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Missing_threshold property
        /// </summary>
        Nullable<bool> Missing_threshold
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Missing_occurrence_counter property
        /// </summary>
        Nullable<bool> Missing_occurrence_counter
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Missing_duration property
        /// </summary>
        Nullable<bool> Missing_duration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Missing_magnitude property
        /// </summary>
        Nullable<bool> Missing_magnitude
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Time_threshold_for_under_limit property
        /// </summary>
        string Time_threshold_for_under_limit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Time_threshold_for_over_limit property
        /// </summary>
        string Time_threshold_for_over_limit
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Time_threshold_for_missing_magnitude property
        /// </summary>
        string Time_threshold_for_missing_magnitude
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Contracted_value property
        /// </summary>
        Nullable<double> Contracted_value
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Minimum_for_recording_interval property
        /// </summary>
        Nullable<double> Minimum_for_recording_interval
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Maximum_for_recording_interval property
        /// </summary>
        Nullable<double> Maximum_for_recording_interval
        {
            get;
            set;
        }
        
        /// <summary>
        /// The Test_average property
        /// </summary>
        Nullable<double> Test_average
        {
            get;
            set;
        }
        
        /// <summary>
        /// The calculations property
        /// </summary>
        IElectricityValues Calculations
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Billing_period_average property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Billing_period_averageChanging;
        
        /// <summary>
        /// Gets fired when the Billing_period_average property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Billing_period_averageChanged;
        
        /// <summary>
        /// Gets fired before the Cumulative_minimum property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Cumulative_minimumChanging;
        
        /// <summary>
        /// Gets fired when the Cumulative_minimum property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Cumulative_minimumChanged;
        
        /// <summary>
        /// Gets fired before the Cumulative_maximum property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Cumulative_maximumChanging;
        
        /// <summary>
        /// Gets fired when the Cumulative_maximum property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Cumulative_maximumChanged;
        
        /// <summary>
        /// Gets fired before the Minimum property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinimumChanging;
        
        /// <summary>
        /// Gets fired when the Minimum property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MinimumChanged;
        
        /// <summary>
        /// Gets fired before the Current_average property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Current_averageChanging;
        
        /// <summary>
        /// Gets fired when the Current_average property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Current_averageChanged;
        
        /// <summary>
        /// Gets fired before the Last_average property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Last_averageChanging;
        
        /// <summary>
        /// Gets fired when the Last_average property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Last_averageChanged;
        
        /// <summary>
        /// Gets fired before the Maximum property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaximumChanging;
        
        /// <summary>
        /// Gets fired when the Maximum property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> MaximumChanged;
        
        /// <summary>
        /// Gets fired before the Instantaneous_value property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Instantaneous_valueChanging;
        
        /// <summary>
        /// Gets fired when the Instantaneous_value property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Instantaneous_valueChanged;
        
        /// <summary>
        /// Gets fired before the Time_integral property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Time_integralChanging;
        
        /// <summary>
        /// Gets fired when the Time_integral property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Time_integralChanged;
        
        /// <summary>
        /// Gets fired before the Under_limit_threshold property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Under_limit_thresholdChanging;
        
        /// <summary>
        /// Gets fired when the Under_limit_threshold property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Under_limit_thresholdChanged;
        
        /// <summary>
        /// Gets fired before the Under_limit_occurrence_counter property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Under_limit_occurrence_counterChanging;
        
        /// <summary>
        /// Gets fired when the Under_limit_occurrence_counter property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Under_limit_occurrence_counterChanged;
        
        /// <summary>
        /// Gets fired before the Under_limit_duration property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Under_limit_durationChanging;
        
        /// <summary>
        /// Gets fired when the Under_limit_duration property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Under_limit_durationChanged;
        
        /// <summary>
        /// Gets fired before the Under_limit_magnitude property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Under_limit_magnitudeChanging;
        
        /// <summary>
        /// Gets fired when the Under_limit_magnitude property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Under_limit_magnitudeChanged;
        
        /// <summary>
        /// Gets fired before the Over_limit_threshold property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Over_limit_thresholdChanging;
        
        /// <summary>
        /// Gets fired when the Over_limit_threshold property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Over_limit_thresholdChanged;
        
        /// <summary>
        /// Gets fired before the Over_limit_occurrence_counter property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Over_limit_occurrence_counterChanging;
        
        /// <summary>
        /// Gets fired when the Over_limit_occurrence_counter property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Over_limit_occurrence_counterChanged;
        
        /// <summary>
        /// Gets fired before the Over_limit_duration property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Over_limit_durationChanging;
        
        /// <summary>
        /// Gets fired when the Over_limit_duration property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Over_limit_durationChanged;
        
        /// <summary>
        /// Gets fired before the Over_limit_magnitude property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Over_limit_magnitudeChanging;
        
        /// <summary>
        /// Gets fired when the Over_limit_magnitude property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Over_limit_magnitudeChanged;
        
        /// <summary>
        /// Gets fired before the Missing_threshold property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Missing_thresholdChanging;
        
        /// <summary>
        /// Gets fired when the Missing_threshold property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Missing_thresholdChanged;
        
        /// <summary>
        /// Gets fired before the Missing_occurrence_counter property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Missing_occurrence_counterChanging;
        
        /// <summary>
        /// Gets fired when the Missing_occurrence_counter property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Missing_occurrence_counterChanged;
        
        /// <summary>
        /// Gets fired before the Missing_duration property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Missing_durationChanging;
        
        /// <summary>
        /// Gets fired when the Missing_duration property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Missing_durationChanged;
        
        /// <summary>
        /// Gets fired before the Missing_magnitude property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Missing_magnitudeChanging;
        
        /// <summary>
        /// Gets fired when the Missing_magnitude property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Missing_magnitudeChanged;
        
        /// <summary>
        /// Gets fired before the Time_threshold_for_under_limit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Time_threshold_for_under_limitChanging;
        
        /// <summary>
        /// Gets fired when the Time_threshold_for_under_limit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Time_threshold_for_under_limitChanged;
        
        /// <summary>
        /// Gets fired before the Time_threshold_for_over_limit property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Time_threshold_for_over_limitChanging;
        
        /// <summary>
        /// Gets fired when the Time_threshold_for_over_limit property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Time_threshold_for_over_limitChanged;
        
        /// <summary>
        /// Gets fired before the Time_threshold_for_missing_magnitude property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Time_threshold_for_missing_magnitudeChanging;
        
        /// <summary>
        /// Gets fired when the Time_threshold_for_missing_magnitude property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Time_threshold_for_missing_magnitudeChanged;
        
        /// <summary>
        /// Gets fired before the Contracted_value property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Contracted_valueChanging;
        
        /// <summary>
        /// Gets fired when the Contracted_value property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Contracted_valueChanged;
        
        /// <summary>
        /// Gets fired before the Minimum_for_recording_interval property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Minimum_for_recording_intervalChanging;
        
        /// <summary>
        /// Gets fired when the Minimum_for_recording_interval property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Minimum_for_recording_intervalChanged;
        
        /// <summary>
        /// Gets fired before the Maximum_for_recording_interval property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Maximum_for_recording_intervalChanging;
        
        /// <summary>
        /// Gets fired when the Maximum_for_recording_interval property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Maximum_for_recording_intervalChanged;
        
        /// <summary>
        /// Gets fired before the Test_average property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Test_averageChanging;
        
        /// <summary>
        /// Gets fired when the Test_average property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> Test_averageChanged;
        
        /// <summary>
        /// Gets fired before the Calculations property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CalculationsChanging;
        
        /// <summary>
        /// Gets fired when the Calculations property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CalculationsChanged;
    }
}

