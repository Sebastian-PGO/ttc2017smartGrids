//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Models.Repository;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using TTC2017.SmartGrids.COSEM.InterfaceClasses;

namespace TTC2017.SmartGrids.COSEM.COSEMObjects
{
    
    
    /// <summary>
    /// The default implementation of the ElectricityHarmonics class
    /// </summary>
    [XmlNamespaceAttribute("objects")]
    [XmlNamespacePrefixAttribute("objects")]
    [ModelRepresentationClassAttribute("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/El" +
        "ectricityHarmonics")]
    public partial class ElectricityHarmonics : Data, IElectricityHarmonics, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Total property
        /// </summary>
        private Nullable<double> _total;
        
        private static Lazy<ITypedElement> _totalAttribute = new Lazy<ITypedElement>(RetrieveTotalAttribute);
        
        /// <summary>
        /// The backing field for the Fundamental_harmonic property
        /// </summary>
        private Nullable<double> _fundamental_harmonic;
        
        private static Lazy<ITypedElement> _fundamental_harmonicAttribute = new Lazy<ITypedElement>(RetrieveFundamental_harmonicAttribute);
        
        /// <summary>
        /// The backing field for the Harmonic property
        /// </summary>
        private Nullable<double> _harmonic;
        
        private static Lazy<ITypedElement> _harmonicAttribute = new Lazy<ITypedElement>(RetrieveHarmonicAttribute);
        
        /// <summary>
        /// The backing field for the Total_Harmoni_Distortion property
        /// </summary>
        private Nullable<double> _total_Harmoni_Distortion;
        
        private static Lazy<ITypedElement> _total_Harmoni_DistortionAttribute = new Lazy<ITypedElement>(RetrieveTotal_Harmoni_DistortionAttribute);
        
        /// <summary>
        /// The backing field for the Total_Demand_Distortion property
        /// </summary>
        private Nullable<double> _total_Demand_Distortion;
        
        private static Lazy<ITypedElement> _total_Demand_DistortionAttribute = new Lazy<ITypedElement>(RetrieveTotal_Demand_DistortionAttribute);
        
        /// <summary>
        /// The backing field for the All_harmonics property
        /// </summary>
        private Nullable<double> _all_harmonics;
        
        private static Lazy<ITypedElement> _all_harmonicsAttribute = new Lazy<ITypedElement>(RetrieveAll_harmonicsAttribute);
        
        /// <summary>
        /// The backing field for the All_harmonics_to_nominal_value_ratio property
        /// </summary>
        private Nullable<double> _all_harmonics_to_nominal_value_ratio;
        
        private static Lazy<ITypedElement> _all_harmonics_to_nominal_value_ratioAttribute = new Lazy<ITypedElement>(RetrieveAll_harmonics_to_nominal_value_ratioAttribute);
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The total property
        /// </summary>
        [XmlElementNameAttribute("total")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Total
        {
            get
            {
                return this._total;
            }
            set
            {
                if ((this._total != value))
                {
                    Nullable<double> old = this._total;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTotalChanging(e);
                    this.OnPropertyChanging("Total", e, _totalAttribute);
                    this._total = value;
                    this.OnTotalChanged(e);
                    this.OnPropertyChanged("Total", e, _totalAttribute);
                }
            }
        }
        
        /// <summary>
        /// The fundamental_harmonic property
        /// </summary>
        [XmlElementNameAttribute("fundamental_harmonic")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Fundamental_harmonic
        {
            get
            {
                return this._fundamental_harmonic;
            }
            set
            {
                if ((this._fundamental_harmonic != value))
                {
                    Nullable<double> old = this._fundamental_harmonic;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnFundamental_harmonicChanging(e);
                    this.OnPropertyChanging("Fundamental_harmonic", e, _fundamental_harmonicAttribute);
                    this._fundamental_harmonic = value;
                    this.OnFundamental_harmonicChanged(e);
                    this.OnPropertyChanged("Fundamental_harmonic", e, _fundamental_harmonicAttribute);
                }
            }
        }
        
        /// <summary>
        /// The harmonic property
        /// </summary>
        [XmlElementNameAttribute("harmonic")]
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Harmonic
        {
            get
            {
                return this._harmonic;
            }
            set
            {
                if ((this._harmonic != value))
                {
                    Nullable<double> old = this._harmonic;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHarmonicChanging(e);
                    this.OnPropertyChanging("Harmonic", e, _harmonicAttribute);
                    this._harmonic = value;
                    this.OnHarmonicChanged(e);
                    this.OnPropertyChanged("Harmonic", e, _harmonicAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Total_Harmoni_Distortion property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Total_Harmoni_Distortion
        {
            get
            {
                return this._total_Harmoni_Distortion;
            }
            set
            {
                if ((this._total_Harmoni_Distortion != value))
                {
                    Nullable<double> old = this._total_Harmoni_Distortion;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTotal_Harmoni_DistortionChanging(e);
                    this.OnPropertyChanging("Total_Harmoni_Distortion", e, _total_Harmoni_DistortionAttribute);
                    this._total_Harmoni_Distortion = value;
                    this.OnTotal_Harmoni_DistortionChanged(e);
                    this.OnPropertyChanged("Total_Harmoni_Distortion", e, _total_Harmoni_DistortionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The Total_Demand_Distortion property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> Total_Demand_Distortion
        {
            get
            {
                return this._total_Demand_Distortion;
            }
            set
            {
                if ((this._total_Demand_Distortion != value))
                {
                    Nullable<double> old = this._total_Demand_Distortion;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnTotal_Demand_DistortionChanging(e);
                    this.OnPropertyChanging("Total_Demand_Distortion", e, _total_Demand_DistortionAttribute);
                    this._total_Demand_Distortion = value;
                    this.OnTotal_Demand_DistortionChanged(e);
                    this.OnPropertyChanged("Total_Demand_Distortion", e, _total_Demand_DistortionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The All_harmonics property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> All_harmonics
        {
            get
            {
                return this._all_harmonics;
            }
            set
            {
                if ((this._all_harmonics != value))
                {
                    Nullable<double> old = this._all_harmonics;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAll_harmonicsChanging(e);
                    this.OnPropertyChanging("All_harmonics", e, _all_harmonicsAttribute);
                    this._all_harmonics = value;
                    this.OnAll_harmonicsChanged(e);
                    this.OnPropertyChanged("All_harmonics", e, _all_harmonicsAttribute);
                }
            }
        }
        
        /// <summary>
        /// The All_harmonics_to_nominal_value_ratio property
        /// </summary>
        [XmlAttributeAttribute(true)]
        public virtual Nullable<double> All_harmonics_to_nominal_value_ratio
        {
            get
            {
                return this._all_harmonics_to_nominal_value_ratio;
            }
            set
            {
                if ((this._all_harmonics_to_nominal_value_ratio != value))
                {
                    Nullable<double> old = this._all_harmonics_to_nominal_value_ratio;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAll_harmonics_to_nominal_value_ratioChanging(e);
                    this.OnPropertyChanging("All_harmonics_to_nominal_value_ratio", e, _all_harmonics_to_nominal_value_ratioAttribute);
                    this._all_harmonics_to_nominal_value_ratio = value;
                    this.OnAll_harmonics_to_nominal_value_ratioChanged(e);
                    this.OnPropertyChanged("All_harmonics_to_nominal_value_ratio", e, _all_harmonics_to_nominal_value_ratioAttribute);
                }
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/El" +
                            "ectricityHarmonics")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the Total property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotalChanging;
        
        /// <summary>
        /// Gets fired when the Total property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> TotalChanged;
        
        /// <summary>
        /// Gets fired before the Fundamental_harmonic property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Fundamental_harmonicChanging;
        
        /// <summary>
        /// Gets fired when the Fundamental_harmonic property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Fundamental_harmonicChanged;
        
        /// <summary>
        /// Gets fired before the Harmonic property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HarmonicChanging;
        
        /// <summary>
        /// Gets fired when the Harmonic property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HarmonicChanged;
        
        /// <summary>
        /// Gets fired before the Total_Harmoni_Distortion property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Total_Harmoni_DistortionChanging;
        
        /// <summary>
        /// Gets fired when the Total_Harmoni_Distortion property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Total_Harmoni_DistortionChanged;
        
        /// <summary>
        /// Gets fired before the Total_Demand_Distortion property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Total_Demand_DistortionChanging;
        
        /// <summary>
        /// Gets fired when the Total_Demand_Distortion property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> Total_Demand_DistortionChanged;
        
        /// <summary>
        /// Gets fired before the All_harmonics property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> All_harmonicsChanging;
        
        /// <summary>
        /// Gets fired when the All_harmonics property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> All_harmonicsChanged;
        
        /// <summary>
        /// Gets fired before the All_harmonics_to_nominal_value_ratio property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> All_harmonics_to_nominal_value_ratioChanging;
        
        /// <summary>
        /// Gets fired when the All_harmonics_to_nominal_value_ratio property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> All_harmonics_to_nominal_value_ratioChanged;
        
        private static ITypedElement RetrieveTotalAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricityHarmonics.ClassInstance)).Resolve("total")));
        }
        
        /// <summary>
        /// Raises the TotalChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotalChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotalChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the TotalChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotalChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.TotalChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveFundamental_harmonicAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricityHarmonics.ClassInstance)).Resolve("fundamental_harmonic")));
        }
        
        /// <summary>
        /// Raises the Fundamental_harmonicChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFundamental_harmonicChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Fundamental_harmonicChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Fundamental_harmonicChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnFundamental_harmonicChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Fundamental_harmonicChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveHarmonicAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricityHarmonics.ClassInstance)).Resolve("harmonic")));
        }
        
        /// <summary>
        /// Raises the HarmonicChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHarmonicChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HarmonicChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HarmonicChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHarmonicChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HarmonicChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTotal_Harmoni_DistortionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricityHarmonics.ClassInstance)).Resolve("Total_Harmoni_Distortion")));
        }
        
        /// <summary>
        /// Raises the Total_Harmoni_DistortionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotal_Harmoni_DistortionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Total_Harmoni_DistortionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Total_Harmoni_DistortionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotal_Harmoni_DistortionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Total_Harmoni_DistortionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveTotal_Demand_DistortionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricityHarmonics.ClassInstance)).Resolve("Total_Demand_Distortion")));
        }
        
        /// <summary>
        /// Raises the Total_Demand_DistortionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotal_Demand_DistortionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Total_Demand_DistortionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the Total_Demand_DistortionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnTotal_Demand_DistortionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.Total_Demand_DistortionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAll_harmonicsAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricityHarmonics.ClassInstance)).Resolve("All_harmonics")));
        }
        
        /// <summary>
        /// Raises the All_harmonicsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAll_harmonicsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.All_harmonicsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the All_harmonicsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAll_harmonicsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.All_harmonicsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAll_harmonics_to_nominal_value_ratioAttribute()
        {
            return ((ITypedElement)(((ModelElement)(ElectricityHarmonics.ClassInstance)).Resolve("All_harmonics_to_nominal_value_ratio")));
        }
        
        /// <summary>
        /// Raises the All_harmonics_to_nominal_value_ratioChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAll_harmonics_to_nominal_value_ratioChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.All_harmonics_to_nominal_value_ratioChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the All_harmonics_to_nominal_value_ratioChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAll_harmonics_to_nominal_value_ratioChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.All_harmonics_to_nominal_value_ratioChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "TOTAL"))
            {
                return this.Total;
            }
            if ((attribute == "FUNDAMENTAL_HARMONIC"))
            {
                return this.Fundamental_harmonic;
            }
            if ((attribute == "HARMONIC"))
            {
                return this.Harmonic;
            }
            if ((attribute == "TOTAL_HARMONI_DISTORTION"))
            {
                return this.Total_Harmoni_Distortion;
            }
            if ((attribute == "TOTAL_DEMAND_DISTORTION"))
            {
                return this.Total_Demand_Distortion;
            }
            if ((attribute == "ALL_HARMONICS"))
            {
                return this.All_harmonics;
            }
            if ((attribute == "ALL_HARMONICS_TO_NOMINAL_VALUE_RATIO"))
            {
                return this.All_harmonics_to_nominal_value_ratio;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "TOTAL"))
            {
                this.Total = ((double)(value));
                return;
            }
            if ((feature == "FUNDAMENTAL_HARMONIC"))
            {
                this.Fundamental_harmonic = ((double)(value));
                return;
            }
            if ((feature == "HARMONIC"))
            {
                this.Harmonic = ((double)(value));
                return;
            }
            if ((feature == "TOTAL_HARMONI_DISTORTION"))
            {
                this.Total_Harmoni_Distortion = ((double)(value));
                return;
            }
            if ((feature == "TOTAL_DEMAND_DISTORTION"))
            {
                this.Total_Demand_Distortion = ((double)(value));
                return;
            }
            if ((feature == "ALL_HARMONICS"))
            {
                this.All_harmonics = ((double)(value));
                return;
            }
            if ((feature == "ALL_HARMONICS_TO_NOMINAL_VALUE_RATIO"))
            {
                this.All_harmonics_to_nominal_value_ratio = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://www.transformation-tool-contest.eu/2017/smartGrids/cosem#//COSEMObjects/El" +
                        "ectricityHarmonics")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the total property
        /// </summary>
        private sealed class TotalProxy : ModelPropertyChange<IElectricityHarmonics, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public TotalProxy(IElectricityHarmonics modelElement) : 
                    base(modelElement, "total")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Total;
                }
                set
                {
                    this.ModelElement.Total = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the fundamental_harmonic property
        /// </summary>
        private sealed class Fundamental_harmonicProxy : ModelPropertyChange<IElectricityHarmonics, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Fundamental_harmonicProxy(IElectricityHarmonics modelElement) : 
                    base(modelElement, "fundamental_harmonic")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Fundamental_harmonic;
                }
                set
                {
                    this.ModelElement.Fundamental_harmonic = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the harmonic property
        /// </summary>
        private sealed class HarmonicProxy : ModelPropertyChange<IElectricityHarmonics, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HarmonicProxy(IElectricityHarmonics modelElement) : 
                    base(modelElement, "harmonic")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Harmonic;
                }
                set
                {
                    this.ModelElement.Harmonic = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Total_Harmoni_Distortion property
        /// </summary>
        private sealed class Total_Harmoni_DistortionProxy : ModelPropertyChange<IElectricityHarmonics, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Total_Harmoni_DistortionProxy(IElectricityHarmonics modelElement) : 
                    base(modelElement, "Total_Harmoni_Distortion")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Total_Harmoni_Distortion;
                }
                set
                {
                    this.ModelElement.Total_Harmoni_Distortion = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the Total_Demand_Distortion property
        /// </summary>
        private sealed class Total_Demand_DistortionProxy : ModelPropertyChange<IElectricityHarmonics, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public Total_Demand_DistortionProxy(IElectricityHarmonics modelElement) : 
                    base(modelElement, "Total_Demand_Distortion")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.Total_Demand_Distortion;
                }
                set
                {
                    this.ModelElement.Total_Demand_Distortion = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the All_harmonics property
        /// </summary>
        private sealed class All_harmonicsProxy : ModelPropertyChange<IElectricityHarmonics, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public All_harmonicsProxy(IElectricityHarmonics modelElement) : 
                    base(modelElement, "All_harmonics")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.All_harmonics;
                }
                set
                {
                    this.ModelElement.All_harmonics = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the All_harmonics_to_nominal_value_ratio property
        /// </summary>
        private sealed class All_harmonics_to_nominal_value_ratioProxy : ModelPropertyChange<IElectricityHarmonics, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public All_harmonics_to_nominal_value_ratioProxy(IElectricityHarmonics modelElement) : 
                    base(modelElement, "All_harmonics_to_nominal_value_ratio")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.All_harmonics_to_nominal_value_ratio;
                }
                set
                {
                    this.ModelElement.All_harmonics_to_nominal_value_ratio = value;
                }
            }
        }
    }
}

